digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 358196"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 358197"];
3 [label="param TypeTests(this) 358198"];
4 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 358199"];
5 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 358200"];
6 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 358201"];
7 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 358202"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 358203"];
9 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 358204"];
10 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 358205"];
11 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 358206"];
12 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 358207"];
13 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 358208"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 358209"];
15 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 358210"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 358211"];
17 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 358212"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 358213"];
19 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 358214"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 358215"];
21 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 358216"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 358217"];
23 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 358218"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 358219"];
25 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 358220"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 358221"];
27 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 358222"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 358223"];
29 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 358224"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 358225"];
31 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 358226"];
32 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 358227"];
33 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 358228"];
34 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 358229"];
35 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 358230"];
36 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 358231"];
37 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 358232"];
38 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 358233"];
39 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 358234"];
40 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 358235"];
41 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 358236"];
42 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 358237"];
43 [label="LazyThreadSafetyMode.PublicationOnly 358238"];
44 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 358239"];
45 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 358240"];
46 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 358241"];
47 [label="LazyThreadSafetyMode.PublicationOnly 358242"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 358243"];
49 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 358244"];
50 [label="RuntimeUtilities.IsCoreClrRuntime 358245"];
51 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 358246"];
52 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 358247"];
53 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 358248"];
54 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 358249"];
55 [label="LazyThreadSafetyMode.PublicationOnly 358250"];
56 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 358251"];
57 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 358252"];
58 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 358253"];
59 [label="LazyThreadSafetyMode.PublicationOnly 358254"];
60 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 358255"];
61 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 358256"];
62 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 358257"];
63 [label="LazyThreadSafetyMode.PublicationOnly 358258"];
64 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 358259"];
65 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 358260"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 358261"];
67 [label="LazyThreadSafetyMode.PublicationOnly 358262"];
68 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358263"];
69 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358264"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 358265"];
71 [label="LazyThreadSafetyMode.PublicationOnly 358266"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358267"];
73 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358268"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 358269"];
75 [label="LazyThreadSafetyMode.PublicationOnly 358270"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358271"];
77 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358272"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 358273"];
79 [label="LazyThreadSafetyMode.PublicationOnly 358274"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358275"];
81 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358276"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 358277"];
83 [label="LazyThreadSafetyMode.PublicationOnly 358278"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358279"];
85 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358280"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 358281"];
87 [label="LazyThreadSafetyMode.PublicationOnly 358282"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358283"];
89 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358284"];
90 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 358285"];
91 [label="LazyThreadSafetyMode.PublicationOnly 358286"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358287"];
93 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358288"];
94 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 358289"];
95 [label="LazyThreadSafetyMode.PublicationOnly 358290"];
96 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 358291"];
97 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 358292"];
98 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 358293"];
99 [label="LazyThreadSafetyMode.PublicationOnly 358294"];
100 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 358295"];
101 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 358296"];
102 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 358297"];
103 [label="LazyThreadSafetyMode.PublicationOnly 358298"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358299"];
105 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358300"];
106 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 358301"];
107 [label="LazyThreadSafetyMode.PublicationOnly 358302"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358303"];
109 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358304"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 358305"];
111 [label="LazyThreadSafetyMode.PublicationOnly 358306"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358307"];
113 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358308"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 358309"];
115 [label="LazyThreadSafetyMode.PublicationOnly 358310"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358311"];
117 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358312"];
118 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 358313"];
119 [label="LazyThreadSafetyMode.PublicationOnly 358314"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 358315"];
121 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 358316"];
122 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 358317"];
123 [label="LazyThreadSafetyMode.PublicationOnly 358318"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358319"];
125 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358320"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 358321"];
127 [label="LazyThreadSafetyMode.PublicationOnly 358322"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358323"];
129 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358324"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 358325"];
131 [label="LazyThreadSafetyMode.PublicationOnly 358326"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358327"];
133 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358328"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 358329"];
135 [label="LazyThreadSafetyMode.PublicationOnly 358330"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358331"];
137 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358332"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 358333"];
139 [label="LazyThreadSafetyMode.PublicationOnly 358334"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358335"];
141 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358336"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 358337"];
143 [label="LazyThreadSafetyMode.PublicationOnly 358338"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358339"];
145 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358340"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 358341"];
147 [label="LazyThreadSafetyMode.PublicationOnly 358342"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358343"];
149 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358344"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 358345"];
151 [label="LazyThreadSafetyMode.PublicationOnly 358346"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358347"];
153 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358348"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 358349"];
155 [label="LazyThreadSafetyMode.PublicationOnly 358350"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358351"];
157 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358352"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 358353"];
159 [label="LazyThreadSafetyMode.PublicationOnly 358354"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358355"];
161 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358356"];
162 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 358357"];
163 [label="LazyThreadSafetyMode.PublicationOnly 358358"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358359"];
165 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358360"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 358361"];
167 [label="LazyThreadSafetyMode.PublicationOnly 358362"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358363"];
169 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358364"];
170 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 358365"];
171 [label="LazyThreadSafetyMode.PublicationOnly 358366"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358367"];
173 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 358368"];
174 [label="@'R:\\Invalid.dll' 358369"];
175 [label="fullPath: @'R:\\Invalid.dll' 358370"];
176 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 358371"];
177 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 358372"];
178 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 358373"];
179 [label="MscorlibRef_v4_0_30316_17626 358374"];
180 [label="Net451.mscorlib 358375"];
181 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 358376"];
182 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 358377"];
183 [label="'/*<bind>*/' 358378"];
184 [label="StartString = '/*<bind>*/' 358379"];
185 [label="'/*</bind>*/' 358380"];
186 [label="EndString = '/*</bind>*/' 358381"];
187 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 358382"];
188 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 358383"];
189 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 358384"];
190 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 358385"];
191 [label="param CSharpTestBase(this) 358386"];
192 [label="param CommonTestBase(this) 358387"];
193 [label="param TestBase(this) 358388"];
194 [label="_temp 358389"];
195 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 358390"];
196 [label="param EnumFields(this) 358391"];
197 [label="var text =\n@'public enum MyEnum \n{\n    One,\n    Two = 2,\n    Three,\n}\n'; 358392"];
198 [label="var comp = CreateCompilation(text); 358393"];
199 [label="text 358394"];
200 [label="param operator(string source) 358395"];
201 [label="source 358396"];
202 [label="new CSharpTestSource(source) 358397"];
203 [label="param CSharpTestSource(object value) 358398"];
204 [label="param CSharpTestSource(this) 358399"];
205 [label="Value 358400"];
206 [label="var comp = CreateCompilation(text); 358401"];
207 [label="var comp = CreateCompilation(text); 358402"];
208 [label="CreateCompilation(text) 358403"];
209 [label="param CreateCompilation(CSharpTestSource source) 358404"];
210 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 358405"];
211 [label="param CreateCompilation(CSharpCompilationOptions options = null) 358406"];
212 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 358407"];
213 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 358408"];
214 [label="param CreateCompilation(string assemblyName = '') 358409"];
215 [label="param CreateCompilation(string sourceFileName = '') 358410"];
216 [label="param CreateCompilation(bool skipUsesIsNullable = false) 358411"];
217 [label="source 358412"];
218 [label="targetFramework 358413"];
219 [label="references 358414"];
220 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 358415"];
221 [label="param GetReferences(TargetFramework tf) 358416"];
222 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 358417"];
223 [label="var references = GetReferences(tf); 358418"];
224 [label="GetReferences(tf) 358419"];
225 [label="param GetReferences(TargetFramework targetFramework) 358420"];
226 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 358421"];
227 [label="StandardReferences 358422"];
228 [label="RuntimeUtilities.IsCoreClrRuntime 358423"];
229 [label="Mscorlib46ExtendedReferences 358424"];
230 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 358425"];
231 [label="TestBase.ValueTupleRef 358426"];
232 [label="TestReferences.NetFx.ValueTuple.tuplelib 358427"];
233 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 358428"];
234 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 358429"];
235 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 358430"];
236 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 358431"];
237 [label="return references; 358432"];
238 [label="options 358433"];
239 [label="parseOptions 358434"];
240 [label="assemblyName 358435"];
241 [label="sourceFileName 358436"];
242 [label="skipUsesIsNullable 358437"];
243 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 358438"];
244 [label="param CreateEmptyCompilation(CSharpTestSource source) 358439"];
245 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 358440"];
246 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 358441"];
247 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 358442"];
248 [label="param CreateEmptyCompilation(string assemblyName = '') 358443"];
249 [label="param CreateEmptyCompilation(string sourceFileName = '') 358444"];
250 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 358445"];
251 [label="source 358446"];
252 [label="references 358447"];
253 [label="options 358448"];
254 [label="parseOptions 358449"];
255 [label="assemblyName 358450"];
256 [label="sourceFileName 358451"];
257 [label="skipUsesIsNullable 358452"];
258 [label="null 358453"];
259 [label="experimentalFeature: null 358454"];
260 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 358455"];
261 [label="param CreateCompilationCore(CSharpTestSource source) 358456"];
262 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 358457"];
263 [label="param CreateCompilationCore(CSharpCompilationOptions options) 358458"];
264 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 358459"];
265 [label="param CreateCompilationCore(string assemblyName) 358460"];
266 [label="param CreateCompilationCore(string sourceFileName) 358461"];
267 [label="param CreateCompilationCore(bool skipUsesIsNullable) 358462"];
268 [label="param CreateCompilationCore(MessageID? experimentalFeature) 358463"];
269 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 358464"];
270 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 358465"];
271 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 358466"];
272 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 358467"];
273 [label="param GetSyntaxTrees(string sourceFileName = '') 358468"];
274 [label="param GetSyntaxTrees(this) 358469"];
275 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 358470"];
276 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 358471"];
277 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 358472"];
278 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 358473"];
279 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 358474"];
280 [label="param Parse(string text) 358475"];
281 [label="param Parse(string filename = '') 358476"];
282 [label="param Parse(CSharpParseOptions options = null) 358477"];
283 [label="param Parse(Encoding encoding = null) 358478"];
284 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 358479"];
285 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 358480"];
286 [label="kind: SourceCodeKind.Regular 358481"];
287 [label="documentationMode: DocumentationMode.Parse 358482"];
288 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 358483"];
289 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 358484"];
290 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 358485"];
291 [label="SourceCodeKind.Script 358486"];
292 [label="Regular.WithKind(SourceCodeKind.Script) 358487"];
293 [label="Script = Regular.WithKind(SourceCodeKind.Script) 358488"];
294 [label="LanguageVersion.CSharp6 358489"];
295 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 358490"];
296 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 358491"];
297 [label="LanguageVersion.CSharp7 358492"];
298 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 358493"];
299 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 358494"];
300 [label="LanguageVersion.CSharp7_1 358495"];
301 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 358496"];
302 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 358497"];
303 [label="LanguageVersion.CSharp7_2 358498"];
304 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 358499"];
305 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 358500"];
306 [label="LanguageVersion.CSharp7_3 358501"];
307 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 358502"];
308 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 358503"];
309 [label="LanguageVersion.Default 358504"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 358505"];
311 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 358506"];
312 [label="LanguageVersion.Preview 358507"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 358508"];
314 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 358509"];
315 [label="LanguageVersion.CSharp8 358510"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 358511"];
317 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 358512"];
318 [label="LanguageVersion.CSharp9 358513"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 358514"];
320 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 358515"];
321 [label="DocumentationMode.Diagnose 358516"];
322 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 358517"];
323 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 358518"];
324 [label="Regular 358519"];
325 [label="'UseLegacyStrongNameProvider' 358520"];
326 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 358521"];
327 [label="param WithFeature(this CSharpParseOptions options) 358522"];
328 [label="param WithFeature(string feature) 358523"];
329 [label="param WithFeature(string value = 'true') 358524"];
330 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 358525"];
331 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 358526"];
332 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 358527"];
333 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 358528"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 358529"];
335 [label="new[] { new KeyValuePair<string, string>(feature, value) } 358530"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 358531"];
337 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 358532"];
338 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 358533"];
339 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 358534"];
340 [label="1 358535"];
341 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 358536"];
342 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 358537"];
343 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 358538"];
344 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 358539"];
345 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 358540"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 358541"];
347 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 358542"];
348 [label="LanguageVersion.CSharp8 358543"];
349 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 358544"];
350 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 358545"];
351 [label="RegularWithExtendedPartialMethods = RegularPreview 358546"];
352 [label="new SmallDictionary<string, string> { } 358547"];
353 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 358548"];
354 [label="kind: SourceCodeKind.Regular 358549"];
355 [label="documentationMode: DocumentationMode.None 358550"];
356 [label="languageVersion: LanguageVersion.Preview 358551"];
357 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 358552"];
358 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 358553"];
359 [label="s_experimentalFeatures 358554"];
360 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 358555"];
361 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 358556"];
362 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 358557"];
363 [label="'testV7SwitchBinder' 358558"];
364 [label="'true' 358559"];
365 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 358560"];
366 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 358561"];
367 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 358562"];
368 [label="RegularWithoutRecursivePatterns = Regular7_3 358563"];
369 [label="RegularWithRecursivePatterns = Regular8 358564"];
370 [label="RegularWithoutPatternCombinators = Regular8 358565"];
371 [label="RegularWithPatternCombinators = RegularPreview 358566"];
372 [label="OutputKind.DynamicallyLinkedLibrary 358567"];
373 [label="OptimizationLevel.Release 358568"];
374 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 358569"];
375 [label="param CreateTestOptions(OutputKind outputKind) 358570"];
376 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358571"];
377 [label="param CreateTestOptions(bool allowUnsafe = false) 358572"];
378 [label="outputKind 358573"];
379 [label="optimizationLevel: optimizationLevel 358574"];
380 [label="warningLevel: Diagnostic.MaxWarningLevel 358575"];
381 [label="allowUnsafe: allowUnsafe 358576"];
382 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358577"];
383 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358578"];
384 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 358579"];
385 [label="OutputKind.ConsoleApplication 358580"];
386 [label="OptimizationLevel.Release 358581"];
387 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 358582"];
388 [label="param CreateTestOptions(OutputKind outputKind) 358583"];
389 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358584"];
390 [label="param CreateTestOptions(bool allowUnsafe = false) 358585"];
391 [label="outputKind 358586"];
392 [label="optimizationLevel: optimizationLevel 358587"];
393 [label="warningLevel: Diagnostic.MaxWarningLevel 358588"];
394 [label="allowUnsafe: allowUnsafe 358589"];
395 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358590"];
396 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358591"];
397 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 358592"];
398 [label="true 358593"];
399 [label="ReleaseDll.WithDebugPlusMode(true) 358594"];
400 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 358595"];
401 [label="true 358596"];
402 [label="ReleaseExe.WithDebugPlusMode(true) 358597"];
403 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 358598"];
404 [label="OutputKind.DynamicallyLinkedLibrary 358599"];
405 [label="OptimizationLevel.Debug 358600"];
406 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 358601"];
407 [label="param CreateTestOptions(OutputKind outputKind) 358602"];
408 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358603"];
409 [label="param CreateTestOptions(bool allowUnsafe = false) 358604"];
410 [label="outputKind 358605"];
411 [label="optimizationLevel: optimizationLevel 358606"];
412 [label="warningLevel: Diagnostic.MaxWarningLevel 358607"];
413 [label="allowUnsafe: allowUnsafe 358608"];
414 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358609"];
415 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358610"];
416 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 358611"];
417 [label="OutputKind.ConsoleApplication 358612"];
418 [label="OptimizationLevel.Debug 358613"];
419 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 358614"];
420 [label="param CreateTestOptions(OutputKind outputKind) 358615"];
421 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358616"];
422 [label="param CreateTestOptions(bool allowUnsafe = false) 358617"];
423 [label="outputKind 358618"];
424 [label="optimizationLevel: optimizationLevel 358619"];
425 [label="warningLevel: Diagnostic.MaxWarningLevel 358620"];
426 [label="allowUnsafe: allowUnsafe 358621"];
427 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358622"];
428 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358623"];
429 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 358624"];
430 [label="OutputKind.WindowsRuntimeMetadata 358625"];
431 [label="OptimizationLevel.Release 358626"];
432 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 358627"];
433 [label="param CreateTestOptions(OutputKind outputKind) 358628"];
434 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358629"];
435 [label="param CreateTestOptions(bool allowUnsafe = false) 358630"];
436 [label="outputKind 358631"];
437 [label="optimizationLevel: optimizationLevel 358632"];
438 [label="warningLevel: Diagnostic.MaxWarningLevel 358633"];
439 [label="allowUnsafe: allowUnsafe 358634"];
440 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358635"];
441 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358636"];
442 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 358637"];
443 [label="OutputKind.WindowsRuntimeMetadata 358638"];
444 [label="OptimizationLevel.Debug 358639"];
445 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 358640"];
446 [label="param CreateTestOptions(OutputKind outputKind) 358641"];
447 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358642"];
448 [label="param CreateTestOptions(bool allowUnsafe = false) 358643"];
449 [label="outputKind 358644"];
450 [label="optimizationLevel: optimizationLevel 358645"];
451 [label="warningLevel: Diagnostic.MaxWarningLevel 358646"];
452 [label="allowUnsafe: allowUnsafe 358647"];
453 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358648"];
454 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358649"];
455 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 358650"];
456 [label="OutputKind.NetModule 358651"];
457 [label="OptimizationLevel.Release 358652"];
458 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 358653"];
459 [label="param CreateTestOptions(OutputKind outputKind) 358654"];
460 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358655"];
461 [label="param CreateTestOptions(bool allowUnsafe = false) 358656"];
462 [label="outputKind 358657"];
463 [label="optimizationLevel: optimizationLevel 358658"];
464 [label="warningLevel: Diagnostic.MaxWarningLevel 358659"];
465 [label="allowUnsafe: allowUnsafe 358660"];
466 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358661"];
467 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358662"];
468 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 358663"];
469 [label="OutputKind.NetModule 358664"];
470 [label="OptimizationLevel.Debug 358665"];
471 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 358666"];
472 [label="param CreateTestOptions(OutputKind outputKind) 358667"];
473 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 358668"];
474 [label="param CreateTestOptions(bool allowUnsafe = false) 358669"];
475 [label="outputKind 358670"];
476 [label="optimizationLevel: optimizationLevel 358671"];
477 [label="warningLevel: Diagnostic.MaxWarningLevel 358672"];
478 [label="allowUnsafe: allowUnsafe 358673"];
479 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358674"];
480 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 358675"];
481 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 358676"];
482 [label="true 358677"];
483 [label="ReleaseDll.WithAllowUnsafe(true) 358678"];
484 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 358679"];
485 [label="true 358680"];
486 [label="ReleaseExe.WithAllowUnsafe(true) 358681"];
487 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 358682"];
488 [label="true 358683"];
489 [label="DebugDll.WithAllowUnsafe(true) 358684"];
490 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 358685"];
491 [label="true 358686"];
492 [label="DebugExe.WithAllowUnsafe(true) 358687"];
493 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 358688"];
494 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 358689"];
495 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358690"];
496 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358691"];
497 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 358692"];
498 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358693"];
499 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358694"];
500 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 358695"];
501 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358696"];
502 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358697"];
503 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 358698"];
504 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358699"];
505 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 358700"];
506 [label="DebugInformationFormat.Pdb 358701"];
507 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 358702"];
508 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 358703"];
509 [label="options = TestOptions.Regular; 358704"];
510 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 358705"];
511 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 358706"];
512 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 358707"];
513 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 358708"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 358709"];
515 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 358710"];
516 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 358711"];
517 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 358712"];
518 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 358713"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 358714"];
520 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 358715"];
521 [label="param CheckSerializable(SyntaxTree tree) 358716"];
522 [label="var stream = new MemoryStream(); 358717"];
523 [label="var root = tree.GetRoot(); 358718"];
524 [label="var root = tree.GetRoot(); 358719"];
525 [label="root.SerializeTo(stream); 358720"];
526 [label="root.SerializeTo(stream); 358721"];
527 [label="root.SerializeTo(stream); 358722"];
528 [label="stream.Position = 0; 358723"];
529 [label="stream.Position 358724"];
530 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 358725"];
531 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 358726"];
532 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 358727"];
533 [label="return tree; 358728"];
534 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 358729"];
535 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 358730"];
536 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 358731"];
537 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 358732"];
538 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 358733"];
539 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 358734"];
540 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 358735"];
541 [label="hasTopLevelStatements 358736"];
542 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 358737"];
543 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 358738"];
544 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 358739"];
545 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 358740"];
546 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 358741"];
547 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 358742"];
548 [label="param ValidateIOperations(Func<Compilation> createCompilation) 358743"];
549 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 358744"];
550 [label="return; 358745"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 358746"];
552 [label="var compilation = createCompilationLambda(); 358747"];
553 [label="var compilation = createCompilationLambda(); 358748"];
554 [label="return Guid.NewGuid().ToString('D'); 358749"];
555 [label="var compilation = createCompilationLambda(); 358750"];
556 [label="OutputKind.ConsoleApplication 358751"];
557 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 358752"];
558 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 358753"];
559 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 358754"];
560 [label="OutputKind.DynamicallyLinkedLibrary 358755"];
561 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 358756"];
562 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 358757"];
563 [label="true 358758"];
564 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 358759"];
565 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 358760"];
566 [label="param Create(string? assemblyName) 358761"];
567 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 358762"];
568 [label="param Create(IEnumerable<MetadataReference>? references = null) 358763"];
569 [label="param Create(CSharpCompilationOptions? options = null) 358764"];
570 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 358765"];
571 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 358766"];
572 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 358767"];
573 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 358768"];
574 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 358769"];
575 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 358770"];
576 [label="param Create(string? assemblyName) 358771"];
577 [label="param Create(CSharpCompilationOptions options) 358772"];
578 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 358773"];
579 [label="param Create(IEnumerable<MetadataReference>? references) 358774"];
580 [label="param Create(CSharpCompilation? previousSubmission) 358775"];
581 [label="param Create(Type? returnType) 358776"];
582 [label="param Create(Type? hostObjectType) 358777"];
583 [label="param Create(bool isSubmission) 358778"];
584 [label="RoslynDebug.Assert(options != null); 358779"];
585 [label="RoslynDebug.Assert(options != null); 358780"];
586 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 358781"];
587 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 358782"];
588 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 358783"];
589 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358784"];
590 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358785"];
591 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358786"];
592 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358787"];
593 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358788"];
594 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358789"];
595 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358790"];
596 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358791"];
597 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358792"];
598 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358793"];
599 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 358794"];
600 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 358795"];
601 [label="param CSharpCompilation(string? assemblyName) 358796"];
602 [label="param CSharpCompilation(CSharpCompilationOptions options) 358797"];
603 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 358798"];
604 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 358799"];
605 [label="param CSharpCompilation(Type? submissionReturnType) 358800"];
606 [label="param CSharpCompilation(Type? hostObjectType) 358801"];
607 [label="param CSharpCompilation(bool isSubmission) 358802"];
608 [label="param CSharpCompilation(ReferenceManager? referenceManager) 358803"];
609 [label="param CSharpCompilation(bool reuseReferenceManager) 358804"];
610 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 358805"];
611 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 358806"];
612 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 358807"];
613 [label="param CSharpCompilation(this) 358808"];
614 [label="assemblyName 358809"];
615 [label="options 358810"];
616 [label="references 358811"];
617 [label="previousSubmission 358812"];
618 [label="submissionReturnType 358813"];
619 [label="hostObjectType 358814"];
620 [label="isSubmission 358815"];
621 [label="referenceManager 358816"];
622 [label="reuseReferenceManager 358817"];
623 [label="syntaxAndDeclarations 358818"];
624 [label="syntaxAndDeclarations.ExternalSyntaxTrees 358819"];
625 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 358820"];
626 [label="semanticModelProvider 358821"];
627 [label="eventQueue 358822"];
628 [label="param CSharpCompilation(this) 358823"];
629 [label="param CSharpCompilation(string? assemblyName) 358824"];
630 [label="param CSharpCompilation(CSharpCompilationOptions options) 358825"];
631 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 358826"];
632 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 358827"];
633 [label="param CSharpCompilation(Type? submissionReturnType) 358828"];
634 [label="param CSharpCompilation(Type? hostObjectType) 358829"];
635 [label="param CSharpCompilation(bool isSubmission) 358830"];
636 [label="param CSharpCompilation(ReferenceManager? referenceManager) 358831"];
637 [label="param CSharpCompilation(bool reuseReferenceManager) 358832"];
638 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 358833"];
639 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 358834"];
640 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 358835"];
641 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 358836"];
642 [label="param CSharpCompilation(this) 358837"];
643 [label="assemblyName 358838"];
644 [label="references 358839"];
645 [label="features 358840"];
646 [label="isSubmission 358841"];
647 [label="semanticModelProvider 358842"];
648 [label="eventQueue 358843"];
649 [label="param CSharpCompilation(this) 358844"];
650 [label="param CSharpCompilation(this) 358845"];
651 [label="_options 358846"];
652 [label="_globalImports 358847"];
653 [label="_previousSubmissionImports 358848"];
654 [label="_globalNamespaceAlias 358849"];
655 [label="_scriptClass 358850"];
656 [label="_lazyHostObjectTypeSymbol 358851"];
657 [label="_lazyImportInfos 358852"];
658 [label="_conversions 358853"];
659 [label="_anonymousTypeManager 358854"];
660 [label="_lazyGlobalNamespace 358855"];
661 [label="builtInOperators 358856"];
662 [label="_lazyAssemblySymbol 358857"];
663 [label="_referenceManager 358858"];
664 [label="_syntaxAndDeclarations 358859"];
665 [label="_lazyEntryPoint 358860"];
666 [label="_lazyEmitNullablePublicOnly 358861"];
667 [label="_lazyCompilationUnitCompletedTrees 358862"];
668 [label="NullableAnalysisData 358863"];
669 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 358864"];
670 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 358865"];
671 [label="_externAliasTargets 358866"];
672 [label="_moduleInitializerMethods 358867"];
673 [label="_binderFactories 358868"];
674 [label="_ignoreAccessibilityBinderFactories 358869"];
675 [label="_lazyDeclarationDiagnostics 358870"];
676 [label="_declarationDiagnosticsFrozen 358871"];
677 [label="new DiagnosticBag() 358872"];
678 [label="_additionalCodegenWarnings = new DiagnosticBag() 358873"];
679 [label="WellKnownMemberSignatureComparer 358874"];
680 [label="_lazyWellKnownTypes 358875"];
681 [label="_lazyWellKnownTypeMembers 358876"];
682 [label="_usesNullableAttributes 358877"];
683 [label="_needsGeneratedAttributes 358878"];
684 [label="_needsGeneratedAttributes_IsFrozen 358879"];
685 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 358880"];
686 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 358881"];
687 [label="new WellKnownMembersSignatureComparer(this) 358882"];
688 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 358883"];
689 [label="param WellKnownMembersSignatureComparer(this) 358884"];
690 [label="new SpecialMembersSignatureComparer() 358885"];
691 [label="param SpecialMembersSignatureComparer(this) 358886"];
692 [label="Instance = new SpecialMembersSignatureComparer() 358887"];
693 [label="param WellKnownMembersSignatureComparer(this) 358888"];
694 [label="param SpecialMembersSignatureComparer(this) 358889"];
695 [label="param SpecialMembersSignatureComparer(this) 358890"];
696 [label="_compilation 358891"];
697 [label="_compilation 358892"];
698 [label="WellKnownMemberSignatureComparer 358893"];
699 [label="_options 358894"];
700 [label="this.builtInOperators = new BuiltInOperators(this); 358895"];
701 [label="this.builtInOperators = new BuiltInOperators(this); 358896"];
702 [label="this.builtInOperators 358897"];
703 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 358898"];
704 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 358899"];
705 [label="_scriptClass 358900"];
706 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 358901"];
707 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 358902"];
708 [label="_globalImports 358903"];
709 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 358904"];
710 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 358905"];
711 [label="_previousSubmissionImports 358906"];
712 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 358907"];
713 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 358908"];
714 [label="_globalNamespaceAlias 358909"];
715 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 358910"];
716 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 358911"];
717 [label="new AnonymousTypeManager(this) 358912"];
718 [label="param AnonymousTypeManager(CSharpCompilation compilation) 358913"];
719 [label="param AnonymousTypeManager(this) 358914"];
720 [label="param AnonymousTypeManager(this) 358915"];
721 [label="public CSharpCompilation Compilation { get; } 358916"];
722 [label="_lazyAnonymousTypeTemplates 358917"];
723 [label="_lazySynthesizedDelegates 358918"];
724 [label="new ConcurrentDictionary<Location, bool>() 358919"];
725 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 358920"];
726 [label="Debug.Assert(compilation != null); 358921"];
727 [label="Debug.Assert(compilation != null); 358922"];
728 [label="this.Compilation 358923"];
729 [label="_anonymousTypeManager 358924"];
730 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 358925"];
731 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 358926"];
732 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 358927"];
733 [label="LanguageVersion? result = null; 358928"];
734 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 358929"];
735 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 358930"];
736 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 358931"];
737 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 358932"];
738 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 358933"];
739 [label="this.LanguageVersion 358934"];
740 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 358935"];
741 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 358936"];
742 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 358937"];
743 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 358938"];
744 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 358939"];
745 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 358940"];
746 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 358941"];
747 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 358942"];
748 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 358943"];
749 [label="this.Options 358944"];
750 [label="get\n            {\n                return _options;\n            } 358945"];
751 [label="return _options; 358946"];
752 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 358947"];
753 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 358948"];
754 [label="new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata) 358949"];
755 [label="param ReferenceManager(string simpleAssemblyName) 358950"];
756 [label="param ReferenceManager(AssemblyIdentityComparer identityComparer) 358951"];
757 [label="param ReferenceManager(Dictionary<MetadataReference, MetadataOrDiagnostic>? observedMetadata) 358952"];
758 [label="param ReferenceManager(this) 358953"];
759 [label="simpleAssemblyName 358954"];
760 [label="identityComparer 358955"];
761 [label="observedMetadata 358956"];
762 [label="param ReferenceManager(this) 358957"];
763 [label="param ReferenceManager(this) 358958"];
764 [label="_referenceManager 358959"];
765 [label="_syntaxAndDeclarations 358960"];
766 [label="Debug.Assert(_lazyAssemblySymbol is null); 358961"];
767 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 358962"];
768 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 358963"];
769 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 358964"];
770 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 358965"];
771 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 358966"];
772 [label="compilation.AddSyntaxTrees(syntaxTrees) 358967"];
773 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 358968"];
774 [label="param AddSyntaxTrees(this) 358969"];
775 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 358970"];
776 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 358971"];
777 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 358972"];
778 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 358973"];
779 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 358974"];
780 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 358975"];
781 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 358976"];
782 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 358977"];
783 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 358978"];
784 [label="bool reuseReferenceManager = true; 358979"];
785 [label="int i = 0; 358980"];
786 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 358981"];
787 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 358982"];
788 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 358983"];
789 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 358984"];
790 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 358985"];
791 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 358986"];
792 [label="externalSyntaxTrees.Add(tree); 358987"];
793 [label="externalSyntaxTrees.Add(tree); 358988"];
794 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 358989"];
795 [label="i++; 358990"];
796 [label="externalSyntaxTrees.Free(); 358991"];
797 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 358992"];
798 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 358993"];
799 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 358994"];
800 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 358995"];
801 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 358996"];
802 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 358997"];
803 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 358998"];
804 [label="param Update(ReferenceManager referenceManager) 358999"];
805 [label="param Update(bool reuseReferenceManager) 359000"];
806 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 359001"];
807 [label="param Update(this) 359002"];
808 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 359003"];
809 [label="this.PreviousSubmission 359004"];
810 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 359005"];
811 [label="ScriptCompilationInfo 359006"];
812 [label="ScriptCompilationInfo?.PreviousScriptCompilation 359007"];
813 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 359008"];
814 [label="this.SubmissionReturnType 359009"];
815 [label="=> ScriptCompilationInfo 359010"];
816 [label="ScriptCompilationInfo 359011"];
817 [label="this.HostObjectType 359012"];
818 [label="=> ScriptCompilationInfo 359013"];
819 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 359014"];
820 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 359015"];
821 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 359016"];
822 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 359017"];
823 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 359018"];
824 [label="param CSharpCompilation(string? assemblyName) 359019"];
825 [label="param CSharpCompilation(CSharpCompilationOptions options) 359020"];
826 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 359021"];
827 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 359022"];
828 [label="param CSharpCompilation(Type? submissionReturnType) 359023"];
829 [label="param CSharpCompilation(Type? hostObjectType) 359024"];
830 [label="param CSharpCompilation(bool isSubmission) 359025"];
831 [label="param CSharpCompilation(ReferenceManager? referenceManager) 359026"];
832 [label="param CSharpCompilation(bool reuseReferenceManager) 359027"];
833 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 359028"];
834 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 359029"];
835 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 359030"];
836 [label="param CSharpCompilation(this) 359031"];
837 [label="previousSubmission 359032"];
838 [label="submissionReturnType 359033"];
839 [label="hostObjectType 359034"];
840 [label="syntaxAndDeclarations.ExternalSyntaxTrees 359035"];
841 [label="eventQueue 359036"];
842 [label="param CSharpCompilation(this) 359037"];
843 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 359038"];
844 [label="param CSharpCompilation(Type? submissionReturnType) 359039"];
845 [label="param CSharpCompilation(Type? hostObjectType) 359040"];
846 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 359041"];
847 [label="param CSharpCompilation(this) 359042"];
848 [label="eventQueue 359043"];
849 [label="param CSharpCompilation(this) 359044"];
850 [label="_options 359045"];
851 [label="_globalImports 359046"];
852 [label="_previousSubmissionImports 359047"];
853 [label="_globalNamespaceAlias 359048"];
854 [label="_scriptClass 359049"];
855 [label="_lazyHostObjectTypeSymbol 359050"];
856 [label="_lazyImportInfos 359051"];
857 [label="_conversions 359052"];
858 [label="_anonymousTypeManager 359053"];
859 [label="_lazyGlobalNamespace 359054"];
860 [label="builtInOperators 359055"];
861 [label="_lazyAssemblySymbol 359056"];
862 [label="_referenceManager 359057"];
863 [label="_syntaxAndDeclarations 359058"];
864 [label="_lazyEntryPoint 359059"];
865 [label="_lazyEmitNullablePublicOnly 359060"];
866 [label="_lazyCompilationUnitCompletedTrees 359061"];
867 [label="NullableAnalysisData 359062"];
868 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 359063"];
869 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 359064"];
870 [label="_externAliasTargets 359065"];
871 [label="_moduleInitializerMethods 359066"];
872 [label="_binderFactories 359067"];
873 [label="_ignoreAccessibilityBinderFactories 359068"];
874 [label="_lazyDeclarationDiagnostics 359069"];
875 [label="_declarationDiagnosticsFrozen 359070"];
876 [label="new DiagnosticBag() 359071"];
877 [label="_additionalCodegenWarnings = new DiagnosticBag() 359072"];
878 [label="WellKnownMemberSignatureComparer 359073"];
879 [label="_lazyWellKnownTypes 359074"];
880 [label="_lazyWellKnownTypeMembers 359075"];
881 [label="_usesNullableAttributes 359076"];
882 [label="_needsGeneratedAttributes 359077"];
883 [label="_needsGeneratedAttributes_IsFrozen 359078"];
884 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 359079"];
885 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 359080"];
886 [label="new WellKnownMembersSignatureComparer(this) 359081"];
887 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 359082"];
888 [label="param WellKnownMembersSignatureComparer(this) 359083"];
889 [label="param WellKnownMembersSignatureComparer(this) 359084"];
890 [label="param SpecialMembersSignatureComparer(this) 359085"];
891 [label="param SpecialMembersSignatureComparer(this) 359086"];
892 [label="_compilation 359087"];
893 [label="_compilation 359088"];
894 [label="WellKnownMemberSignatureComparer 359089"];
895 [label="this.builtInOperators = new BuiltInOperators(this); 359090"];
896 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 359091"];
897 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 359092"];
898 [label="new AnonymousTypeManager(this) 359093"];
899 [label="param AnonymousTypeManager(CSharpCompilation compilation) 359094"];
900 [label="param AnonymousTypeManager(this) 359095"];
901 [label="param AnonymousTypeManager(this) 359096"];
902 [label="public CSharpCompilation Compilation { get; } 359097"];
903 [label="_lazyAnonymousTypeTemplates 359098"];
904 [label="_lazySynthesizedDelegates 359099"];
905 [label="new ConcurrentDictionary<Location, bool>() 359100"];
906 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 359101"];
907 [label="Debug.Assert(compilation != null); 359102"];
908 [label="Debug.Assert(compilation != null); 359103"];
909 [label="this.Compilation 359104"];
910 [label="_anonymousTypeManager 359105"];
911 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 359106"];
912 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 359107"];
913 [label="LanguageVersion? result = null; 359108"];
914 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 359109"];
915 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 359110"];
916 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 359111"];
917 [label="result = version; 359112"];
918 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 359113"];
919 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 359114"];
920 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 359115"];
921 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 359116"];
922 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 359117"];
923 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 359118"];
924 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 359119"];
925 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 359120"];
926 [label="referenceManager.AssertCanReuseForCompilation(this); 359121"];
927 [label="referenceManager.AssertCanReuseForCompilation(this); 359122"];
928 [label="_referenceManager 359123"];
929 [label="Debug.Assert(_lazyAssemblySymbol is null); 359124"];
930 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 359125"];
931 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 359126"];
932 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 359127"];
933 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 359128"];
934 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 359129"];
935 [label="return compilation; 359130"];
936 [label="var compilation = createCompilationLambda(); 359131"];
937 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 359132"];
938 [label="IsNullableEnabled(compilation) 359133"];
939 [label="param IsNullableEnabled(CSharpCompilation compilation) 359134"];
940 [label="compilation.SyntaxTrees 359135"];
941 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 359136"];
942 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 359137"];
943 [label="var trees = compilation.SyntaxTrees; 359138"];
944 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 359139"];
945 [label="var options = (CSharpParseOptions)trees[0].Options; 359140"];
946 [label="var options = (CSharpParseOptions)trees[0].Options; 359141"];
947 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 359142"];
948 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 359143"];
949 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 359144"];
950 [label="return compilation; 359145"];
951 [label="comp.GlobalNamespace 359146"];
952 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 359147"];
953 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 359148"];
954 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 359149"];
955 [label="GetAllUnaliasedModules(modules); 359150"];
956 [label="GetAllUnaliasedModules(modules) 359151"];
957 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 359152"];
958 [label="param GetAllUnaliasedModules(this) 359153"];
959 [label="Assembly 359154"];
960 [label="get\n            {\n                return SourceAssembly;\n            } 359155"];
961 [label="SourceAssembly 359156"];
962 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 359157"];
963 [label="GetBoundReferenceManager() 359158"];
964 [label="param GetBoundReferenceManager(this) 359159"];
965 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 359160"];
966 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 359161"];
967 [label="_referenceManager.CreateSourceAssemblyForCompilation(this) 359162"];
968 [label="param CreateSourceAssemblyForCompilation(CSharpCompilation compilation) 359163"];
969 [label="param CreateSourceAssemblyForCompilation(this) 359164"];
970 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 359165"];
971 [label="CreateAndSetSourceAssemblyFullBind(compilation) 359166"];
972 [label="param CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation) 359167"];
973 [label="param CreateAndSetSourceAssemblyFullBind(this) 359168"];
974 [label="var resolutionDiagnostics = DiagnosticBag.GetInstance(); 359169"];
975 [label="var assemblyReferencesBySimpleName = PooledDictionary<string, List<ReferencedAssemblyIdentity>>.GetInstance(); 359170"];
976 [label="compilation.Options 359171"];
977 [label="get\n            {\n                return _options;\n            } 359172"];
978 [label="bool supersedeLowerVersions = compilation.Options.ReferencesSupersedeLowerVersions; 359173"];
979 [label="IDictionary<(string, string), MetadataReference>? boundReferenceDirectiveMap; 359174"];
980 [label="ImmutableArray<MetadataReference> boundReferenceDirectives; 359175"];
981 [label="boundReferenceDirectives 359176"];
982 [label="ImmutableArray<AssemblyData> referencedAssemblies; 359177"];
983 [label="referencedAssemblies 359178"];
984 [label="ImmutableArray<PEModule> modules; 359179"];
985 [label="modules 359180"];
986 [label="ImmutableArray<MetadataReference> explicitReferences; 359181"];
987 [label="explicitReferences 359182"];
988 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359183"];
989 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359184"];
990 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359185"];
991 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359186"];
992 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359187"];
993 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359188"];
994 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359189"];
995 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359190"];
996 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359191"];
997 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359192"];
998 [label="get { return this.Declarations.ReferenceDirectives; } 359193"];
999 [label="this.Declarations 359194"];
1000 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 359195"];
1001 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 359196"];
1002 [label="return this.Declarations.ReferenceDirectives; 359197"];
1003 [label="this.Declarations.ReferenceDirectives 359198"];
1004 [label="param ToDeclarationModifiers(this SyntaxTokenList modifiers) 359199"];
1005 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 359200"];
1006 [label="var result = DeclarationModifiers.None; 359201"];
1007 [label="bool seenNoDuplicates = true; 359202"];
1008 [label="bool seenNoAccessibilityDuplicates = true; 359203"];
1009 [label="foreach (var modifier in modifiers)\n            {\n                DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind());\n\n                ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics);\n\n                result |= one;\n            } 359204"];
1010 [label="DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind()); 359205"];
1011 [label="ToDeclarationModifier(modifier.ContextualKind()) 359206"];
1012 [label="param ToDeclarationModifier(SyntaxKind kind) 359207"];
1013 [label="switch (kind)\n            {\n                case SyntaxKind.AbstractKeyword:\n                    return DeclarationModifiers.Abstract;\n                case SyntaxKind.AsyncKeyword:\n                    return DeclarationModifiers.Async;\n                case SyntaxKind.SealedKeyword:\n                    return DeclarationModifiers.Sealed;\n                case SyntaxKind.StaticKeyword:\n                    return DeclarationModifiers.Static;\n                case SyntaxKind.NewKeyword:\n                    return DeclarationModifiers.New;\n                case SyntaxKind.PublicKeyword:\n                    return DeclarationModifiers.Public;\n                case SyntaxKind.ProtectedKeyword:\n                    return DeclarationModifiers.Protected;\n                case SyntaxKind.InternalKeyword:\n                    return DeclarationModifiers.Internal;\n                case SyntaxKind.PrivateKeyword:\n                    return DeclarationModifiers.Private;\n                case SyntaxKind.ExternKeyword:\n                    return DeclarationModifiers.Extern;\n                case SyntaxKind.ReadOnlyKeyword:\n                    return DeclarationModifiers.ReadOnly;\n                case SyntaxKind.PartialKeyword:\n                    return DeclarationModifiers.Partial;\n                case SyntaxKind.UnsafeKeyword:\n                    return DeclarationModifiers.Unsafe;\n                case SyntaxKind.VirtualKeyword:\n                    return DeclarationModifiers.Virtual;\n                case SyntaxKind.OverrideKeyword:\n                    return DeclarationModifiers.Override;\n                case SyntaxKind.ConstKeyword:\n                    return DeclarationModifiers.Const;\n                case SyntaxKind.FixedKeyword:\n                    return DeclarationModifiers.Fixed;\n                case SyntaxKind.VolatileKeyword:\n                    return DeclarationModifiers.Volatile;\n                case SyntaxKind.RefKeyword:\n                    return DeclarationModifiers.Ref;\n                case SyntaxKind.DataKeyword:\n                    return DeclarationModifiers.Data;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 359208"];
1014 [label="return DeclarationModifiers.Public; 359209"];
1015 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 359210"];
1016 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 359211"];
1017 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 359212"];
1018 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 359213"];
1019 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 359214"];
1020 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 359215"];
1021 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 359216"];
1022 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 359217"];
1023 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 359218"];
1024 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 359219"];
1025 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 359220"];
1026 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 359221"];
1027 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 359222"];
1028 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 359223"];
1029 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 359224"];
1030 [label="result |= one; 359225"];
1031 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 359226"];
1032 [label="return result; 359227"];
1033 [label="get { return _options; } 359228"];
1034 [label="return _options; 359229"];
1035 [label="get { return CSharp.MessageProvider.Instance; } 359230"];
1036 [label="return CSharp.MessageProvider.Instance; 359231"];
1037 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359232"];
1038 [label="param CreateAssemblyDataForFile(PEAssembly assembly) 359233"];
1039 [label="param CreateAssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 359234"];
1040 [label="param CreateAssemblyDataForFile(DocumentationProvider documentationProvider) 359235"];
1041 [label="param CreateAssemblyDataForFile(string sourceAssemblySimpleName) 359236"];
1042 [label="param CreateAssemblyDataForFile(MetadataImportOptions importOptions) 359237"];
1043 [label="param CreateAssemblyDataForFile(bool embedInteropTypes) 359238"];
1044 [label="param CreateAssemblyDataForFile(this) 359239"];
1045 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359240"];
1046 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359241"];
1047 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359242"];
1048 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359243"];
1049 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359244"];
1050 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359245"];
1051 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 359246"];
1052 [label="new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions) 359247"];
1053 [label="param AssemblyDataForFile(PEAssembly assembly) 359248"];
1054 [label="param AssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 359249"];
1055 [label="param AssemblyDataForFile(bool embedInteropTypes) 359250"];
1056 [label="param AssemblyDataForFile(DocumentationProvider documentationProvider) 359251"];
1057 [label="param AssemblyDataForFile(string sourceAssemblySimpleName) 359252"];
1058 [label="param AssemblyDataForFile(MetadataImportOptions compilationImportOptions) 359253"];
1059 [label="param AssemblyDataForFile(this) 359254"];
1060 [label="assembly.Identity 359255"];
1061 [label="assembly.AssemblyReferences 359256"];
1062 [label="embedInteropTypes 359257"];
1063 [label="param AssemblyDataForFile(this) 359258"];
1064 [label="param AssemblyDataForMetadataOrCompilation(AssemblyIdentity identity) 359259"];
1065 [label="param AssemblyDataForMetadataOrCompilation(ImmutableArray<AssemblyIdentity> referencedAssemblies) 359260"];
1066 [label="param AssemblyDataForMetadataOrCompilation(bool embedInteropTypes) 359261"];
1067 [label="param AssemblyDataForMetadataOrCompilation(this) 359262"];
1068 [label="param AssemblyDataForMetadataOrCompilation(this) 359263"];
1069 [label="_assemblies 359264"];
1070 [label="_identity 359265"];
1071 [label="_embedInteropTypes 359266"];
1072 [label="RoslynDebug.Assert(identity != null); 359267"];
1073 [label="RoslynDebug.Assert(identity != null); 359268"];
1074 [label="Debug.Assert(!referencedAssemblies.IsDefault); 359269"];
1075 [label="_embedInteropTypes 359270"];
1076 [label="_identity 359271"];
1077 [label="_referencedAssemblies 359272"];
1078 [label="Assembly 359273"];
1079 [label="CachedSymbols 359274"];
1080 [label="DocumentationProvider 359275"];
1081 [label="_compilationImportOptions 359276"];
1082 [label="_sourceAssemblySimpleName 359277"];
1083 [label="_internalsVisibleComputed 359278"];
1084 [label="_internalsPotentiallyVisibleToCompilation 359279"];
1085 [label="RoslynDebug.Assert(documentationProvider != null); 359280"];
1086 [label="RoslynDebug.Assert(documentationProvider != null); 359281"];
1087 [label="RoslynDebug.Assert(cachedSymbols != null); 359282"];
1088 [label="RoslynDebug.Assert(cachedSymbols != null); 359283"];
1089 [label="CachedSymbols 359284"];
1090 [label="Assembly 359285"];
1091 [label="DocumentationProvider 359286"];
1092 [label="_compilationImportOptions 359287"];
1093 [label="_sourceAssemblySimpleName 359288"];
1094 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 359289"];
1095 [label="RoslynDebug.Assert(identity != null); 359290"];
1096 [label="Debug.Assert(!referencedAssemblies.IsDefault); 359291"];
1097 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 359292"];
1098 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 359293"];
1099 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 359294"];
1100 [label="get\n                    {\n                        return _identity;\n                    } 359295"];
1101 [label="return _identity; 359296"];
1102 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 359297"];
1103 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 359298"];
1104 [label="bool hasCircularReference; 359299"];
1105 [label="int corLibraryIndex; 359300"];
1106 [label="ImmutableArray<MetadataReference> implicitlyResolvedReferences; 359301"];
1107 [label="implicitlyResolvedReferences 359302"];
1108 [label="ImmutableArray<ResolvedReference> implicitlyResolvedReferenceMap; 359303"];
1109 [label="implicitlyResolvedReferenceMap 359304"];
1110 [label="ImmutableArray<AssemblyData> allAssemblyData; 359305"];
1111 [label="allAssemblyData 359306"];
1112 [label="var temp1 = compilation.ScriptCompilationInfo; 359307"];
1113 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 359308"];
1114 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 359309"];
1115 [label="temp1 != null 359310"];
1116 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 359311"];
1117 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 359312"];
1118 [label="temp2 != null 359313"];
1119 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 359314"];
1120 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 359315"];
1121 [label="temp3 != null 359316"];
1122 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 359317"];
1123 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 359318"];
1124 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359319"];
1125 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359320"];
1126 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359321"];
1127 [label="compilation.Options 359322"];
1128 [label="get\n            {\n                return _options;\n            } 359323"];
1129 [label="return _options; 359324"];
1130 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359325"];
1131 [label="compilation.Options 359326"];
1132 [label="get\n            {\n                return _options;\n            } 359327"];
1133 [label="return _options; 359328"];
1134 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359329"];
1135 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359330"];
1136 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359331"];
1137 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359332"];
1138 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359333"];
1139 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359334"];
1140 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359335"];
1141 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359336"];
1142 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359337"];
1143 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359338"];
1144 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359339"];
1145 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 359340"];
1146 [label="param BindAssemblyReferences(ImmutableArray<AssemblyData> assemblies) 359341"];
1147 [label="param BindAssemblyReferences(AssemblyIdentityComparer assemblyIdentityComparer) 359342"];
1148 [label="param BindAssemblyReferences(this) 359343"];
1149 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 359344"];
1150 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 359345"];
1151 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 359346"];
1152 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 359347"];
1153 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 359348"];
1154 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 359349"];
1155 [label="return _embedInteropTypes; 359350"];
1156 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 359351"];
1157 [label="return _referencedAssemblies; 359352"];
1158 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 359353"];
1159 [label="return Assembly.ContainsNoPiaLocalTypes(); 359354"];
1160 [label="get\n                    {\n                        return Assembly.DeclaresTheObjectClass;\n                    } 359355"];
1161 [label="return Assembly.DeclaresTheObjectClass; 359356"];
1162 [label="get\n                    {\n                        if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        }\n\n                        return _assemblies;\n                    } 359357"];
1163 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 359358"];
1164 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 359359"];
1165 [label="_assemblies = new List<AssemblySymbol>(); 359360"];
1166 [label="_assemblies 359361"];
1167 [label="AddAvailableSymbols(_assemblies); 359362"];
1168 [label="AddAvailableSymbols(_assemblies) 359363"];
1169 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 359364"];
1170 [label="param AddAvailableSymbols(this) 359365"];
1171 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 359366"];
1172 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 359367"];
1173 [label="AddAvailableSymbols(_assemblies); 359368"];
1174 [label="return _assemblies; 359369"];
1175 [label="AddAvailableSymbols(_assemblies); 359370"];
1176 [label="AddAvailableSymbols(_assemblies) 359371"];
1177 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 359372"];
1178 [label="param AddAvailableSymbols(this) 359373"];
1179 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 359374"];
1180 [label="AddAvailableSymbols(_assemblies); 359375"];
1181 [label="Debug.Assert(bindingResult.Length == allAssemblyData.Length); 359376"];
1182 [label="var references = explicitReferences.AddRange(implicitlyResolvedReferences); 359377"];
1183 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 359378"];
1184 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 359379"];
1185 [label="Dictionary<MetadataReference, int> referencedAssembliesMap, referencedModulesMap; 359380"];
1186 [label="ImmutableArray<ImmutableArray<string>> aliasesOfReferencedAssemblies; 359381"];
1187 [label="aliasesOfReferencedAssemblies 359382"];
1188 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359383"];
1189 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359384"];
1190 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359385"];
1191 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359386"];
1192 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359387"];
1193 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359388"];
1194 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359389"];
1195 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359390"];
1196 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359391"];
1197 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 359392"];
1198 [label="var newSymbols = new List<int>(); 359393"];
1199 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 359394"];
1200 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 359395"];
1201 [label="ref BoundInputAssembly bound = ref bindingResult[i]; 359396"];
1202 [label="if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        } 359397"];
1203 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 359398"];
1204 [label="((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol() 359399"];
1205 [label="param CreateAssemblySymbol(this) 359400"];
1206 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 359401"];
1207 [label="this.IsLinked 359402"];
1208 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 359403"];
1209 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 359404"];
1210 [label="this.EffectiveImportOptions 359405"];
1211 [label="get\n                    {\n                        // We need to import internal members if they might be visible to the compilation being compiled:\n                        if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        }\n\n                        return _compilationImportOptions;\n                    } 359406"];
1212 [label="InternalsMayBeVisibleToCompilation 359407"];
1213 [label="get\n                    {\n                        if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        }\n\n                        return _internalsPotentiallyVisibleToCompilation;\n                    } 359408"];
1214 [label="if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        } 359409"];
1215 [label="_internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly); 359410"];
1216 [label="_internalsPotentiallyVisibleToCompilation 359411"];
1217 [label="_internalsVisibleComputed = true; 359412"];
1218 [label="_internalsVisibleComputed 359413"];
1219 [label="return _internalsPotentiallyVisibleToCompilation; 359414"];
1220 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 359415"];
1221 [label="return _compilationImportOptions; 359416"];
1222 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 359417"];
1223 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 359418"];
1224 [label="new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions) 359419"];
1225 [label="param PEAssemblySymbol(PEAssembly assembly) 359420"];
1226 [label="param PEAssemblySymbol(DocumentationProvider documentationProvider) 359421"];
1227 [label="param PEAssemblySymbol(bool isLinked) 359422"];
1228 [label="param PEAssemblySymbol(MetadataImportOptions importOptions) 359423"];
1229 [label="param PEAssemblySymbol(this) 359424"];
1230 [label="param PEAssemblySymbol(this) 359425"];
1231 [label="param MetadataOrSourceAssemblySymbol(this) 359426"];
1232 [label="param MetadataOrSourceAssemblySymbol(this) 359427"];
1233 [label="param NonMissingAssemblySymbol(this) 359428"];
1234 [label="new char[] { '+' } 359429"];
1235 [label="'+' 359430"];
1236 [label="new char[] { '+' } 359431"];
1237 [label="s_nestedTypeNameSeparators = new char[] { '+' } 359432"];
1238 [label="param NonMissingAssemblySymbol(this) 359433"];
1239 [label="param AssemblySymbol(this) 359434"];
1240 [label="SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 359435"];
1241 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 359436"];
1242 [label="SymbolDisplayCompilerInternalOptions.None 359437"];
1243 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 359438"];
1244 [label="s_debuggerDisplayFormat =\n            SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 359439"];
1245 [label="param AssemblySymbol(this) 359440"];
1246 [label="param Symbol(this) 359441"];
1247 [label="_lazyISymbol 359442"];
1248 [label="_corLibrary 359443"];
1249 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 359444"];
1250 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 359445"];
1251 [label="_globalNamespace 359446"];
1252 [label="_lazySpecialTypes 359447"];
1253 [label="_cachedSpecialTypes 359448"];
1254 [label="_lazyNativeIntegerTypes 359449"];
1255 [label="_lazyTypeNames 359450"];
1256 [label="_lazyNamespaceNames 359451"];
1257 [label="_lazySpecialTypeMembers 359452"];
1258 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 359453"];
1259 [label="_assembly 359454"];
1260 [label="_documentationProvider 359455"];
1261 [label="_isLinked 359456"];
1262 [label="Debug.Assert(assembly != null); 359457"];
1263 [label="Debug.Assert(assembly != null); 359458"];
1264 [label="Debug.Assert(documentationProvider != null); 359459"];
1265 [label="Debug.Assert(documentationProvider != null); 359460"];
1266 [label="_assembly 359461"];
1267 [label="_documentationProvider 359462"];
1268 [label="var modules = new ModuleSymbol[assembly.Modules.Length]; 359463"];
1269 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 359464"];
1270 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 359465"];
1271 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 359466"];
1272 [label="31 359467"];
1273 [label="DefaultTypeMapCapacity = 31 359468"];
1274 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 359469"];
1275 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 359470"];
1276 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 359471"];
1277 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 359472"];
1278 [label="new PEModuleSymbol(this, assembly.Modules[i], importOptions, i) 359473"];
1279 [label="param PEModuleSymbol(PEAssemblySymbol assemblySymbol) 359474"];
1280 [label="param PEModuleSymbol(PEModule module) 359475"];
1281 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 359476"];
1282 [label="param PEModuleSymbol(int ordinal) 359477"];
1283 [label="param PEModuleSymbol(this) 359478"];
1284 [label="assemblySymbol 359479"];
1285 [label="module 359480"];
1286 [label="importOptions 359481"];
1287 [label="ordinal 359482"];
1288 [label="param PEModuleSymbol(this) 359483"];
1289 [label="param PEModuleSymbol(AssemblySymbol assemblySymbol) 359484"];
1290 [label="param PEModuleSymbol(PEModule module) 359485"];
1291 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 359486"];
1292 [label="param PEModuleSymbol(int ordinal) 359487"];
1293 [label="param PEModuleSymbol(this) 359488"];
1294 [label="param PEModuleSymbol(this) 359489"];
1295 [label="param NonMissingModuleSymbol(this) 359490"];
1296 [label="param NonMissingModuleSymbol(this) 359491"];
1297 [label="param ModuleSymbol(this) 359492"];
1298 [label="param ModuleSymbol(this) 359493"];
1299 [label="param Symbol(this) 359494"];
1300 [label="_lazyISymbol 359495"];
1301 [label="_moduleReferences 359496"];
1302 [label="_assemblySymbol 359497"];
1303 [label="_ordinal 359498"];
1304 [label="_module 359499"];
1305 [label="_globalNamespace 359500"];
1306 [label="_lazySystemTypeSymbol 359501"];
1307 [label="_lazyEventRegistrationTokenSymbol 359502"];
1308 [label="_lazyEventRegistrationTokenTableSymbol 359503"];
1309 [label="2 359504"];
1310 [label="concurrencyLevel: 2 359505"];
1311 [label="capacity: DefaultTypeMapCapacity 359506"];
1312 [label="new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 359507"];
1313 [label="TypeHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 359508"];
1314 [label="2 359509"];
1315 [label="concurrencyLevel: 2 359510"];
1316 [label="capacity: DefaultTypeMapCapacity 359511"];
1317 [label="new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 359512"];
1318 [label="TypeRefHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 359513"];
1319 [label="ImportOptions 359514"];
1320 [label="_lazyTypeNames 359515"];
1321 [label="_lazyNamespaceNames 359516"];
1322 [label="_lazyNullableMemberMetadata 359517"];
1323 [label="Debug.Assert((object)assemblySymbol != null); 359518"];
1324 [label="Debug.Assert((object)assemblySymbol != null); 359519"];
1325 [label="Debug.Assert(module != null); 359520"];
1326 [label="Debug.Assert(module != null); 359521"];
1327 [label="_assemblySymbol 359522"];
1328 [label="_ordinal 359523"];
1329 [label="_module 359524"];
1330 [label="this.ImportOptions 359525"];
1331 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 359526"];
1332 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 359527"];
1333 [label="new PEGlobalNamespaceSymbol(this) 359528"];
1334 [label="param PEGlobalNamespaceSymbol(PEModuleSymbol moduleSymbol) 359529"];
1335 [label="param PEGlobalNamespaceSymbol(this) 359530"];
1336 [label="param PEGlobalNamespaceSymbol(this) 359531"];
1337 [label="param PENamespaceSymbol(this) 359532"];
1338 [label="param PENamespaceSymbol(this) 359533"];
1339 [label="param NamespaceSymbol(this) 359534"];
1340 [label="param NamespaceSymbol(this) 359535"];
1341 [label="param NamespaceOrTypeSymbol(this) 359536"];
1342 [label="param NamespaceOrTypeSymbol(this) 359537"];
1343 [label="param Symbol(this) 359538"];
1344 [label="_lazyISymbol 359539"];
1345 [label="_lazyAdapter 359540"];
1346 [label="_lazyQualifiedName 359541"];
1347 [label="lazyNamespaces 359542"];
1348 [label="lazyTypes 359543"];
1349 [label="_lazyNoPiaLocalTypes 359544"];
1350 [label="_moduleSymbol 359545"];
1351 [label="Debug.Assert((object)moduleSymbol != null); 359546"];
1352 [label="Debug.Assert((object)moduleSymbol != null); 359547"];
1353 [label="_moduleSymbol 359548"];
1354 [label="_globalNamespace 359549"];
1355 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 359550"];
1356 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 359551"];
1357 [label="this.MetadataLocation 359552"];
1358 [label="Debug.Assert(ordinal >= 0); 359553"];
1359 [label="Debug.Assert(ordinal >= 0); 359554"];
1360 [label="modules[i] 359555"];
1361 [label="_modules = modules.AsImmutableOrNull(); 359556"];
1362 [label="_modules = modules.AsImmutableOrNull(); 359557"];
1363 [label="_modules 359558"];
1364 [label="_isLinked 359559"];
1365 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 359560"];
1366 [label="bound.AssemblySymbol 359561"];
1367 [label="newSymbols.Add(i); 359562"];
1368 [label="newSymbols.Add(i); 359563"];
1369 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 359564"];
1370 [label="allAssemblyData[i].IsLinked 359565"];
1371 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 359566"];
1372 [label="bound.AssemblySymbol.IsLinked 359567"];
1373 [label="get\n            {\n                return _isLinked;\n            } 359568"];
1374 [label="return _isLinked; 359569"];
1375 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 359570"];
1376 [label="return _internalsPotentiallyVisibleToCompilation; 359571"];
1377 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 359572"];
1378 [label="_assembly 359573"];
1379 [label="_documentationProvider 359574"];
1380 [label="Debug.Assert(assembly != null); 359575"];
1381 [label="Debug.Assert(documentationProvider != null); 359576"];
1382 [label="_assemblySymbol 359577"];
1383 [label="_ordinal 359578"];
1384 [label="_module 359579"];
1385 [label="_globalNamespace 359580"];
1386 [label="ImportOptions 359581"];
1387 [label="Debug.Assert((object)assemblySymbol != null); 359582"];
1388 [label="Debug.Assert(module != null); 359583"];
1389 [label="_moduleSymbol 359584"];
1390 [label="Debug.Assert((object)moduleSymbol != null); 359585"];
1391 [label="Debug.Assert(ordinal >= 0); 359586"];
1392 [label="bound.AssemblySymbol 359587"];
1393 [label="newSymbols.Add(i); 359588"];
1394 [label="newSymbols.Add(i); 359589"];
1395 [label="allAssemblyData[i].IsLinked 359590"];
1396 [label="bound.AssemblySymbol.IsLinked 359591"];
1397 [label="get\n            {\n                return _isLinked;\n            } 359592"];
1398 [label="return _isLinked; 359593"];
1399 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 359594"];
1400 [label="_assembly 359595"];
1401 [label="_documentationProvider 359596"];
1402 [label="_assemblySymbol 359597"];
1403 [label="_ordinal 359598"];
1404 [label="_module 359599"];
1405 [label="_globalNamespace 359600"];
1406 [label="ImportOptions 359601"];
1407 [label="Debug.Assert((object)assemblySymbol != null); 359602"];
1408 [label="Debug.Assert(module != null); 359603"];
1409 [label="_moduleSymbol 359604"];
1410 [label="Debug.Assert((object)moduleSymbol != null); 359605"];
1411 [label="Debug.Assert(ordinal >= 0); 359606"];
1412 [label="bound.AssemblySymbol 359607"];
1413 [label="newSymbols.Add(i); 359608"];
1414 [label="get\n            {\n                return _isLinked;\n            } 359609"];
1415 [label="return _isLinked; 359610"];
1416 [label="return _internalsPotentiallyVisibleToCompilation; 359611"];
1417 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 359612"];
1418 [label="_assembly 359613"];
1419 [label="_documentationProvider 359614"];
1420 [label="Debug.Assert(assembly != null); 359615"];
1421 [label="Debug.Assert(documentationProvider != null); 359616"];
1422 [label="Debug.Assert(ordinal >= 0); 359617"];
1423 [label="bound.AssemblySymbol 359618"];
1424 [label="newSymbols.Add(i); 359619"];
1425 [label="newSymbols.Add(i); 359620"];
1426 [label="bound.AssemblySymbol.IsLinked 359621"];
1427 [label="get\n            {\n                return _isLinked;\n            } 359622"];
1428 [label="return _isLinked; 359623"];
1429 [label="newSymbols.Add(i); 359624"];
1430 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 359625"];
1431 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 359626"];
1432 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 359627"];
1433 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 359628"];
1434 [label="t_assemblyForWhichCurrentThreadIsComputingKeys 359629"];
1435 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 359630"];
1436 [label="new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules) 359631"];
1437 [label="param SourceAssemblySymbol(CSharpCompilation compilation) 359632"];
1438 [label="param SourceAssemblySymbol(string assemblySimpleName) 359633"];
1439 [label="param SourceAssemblySymbol(string moduleName) 359634"];
1440 [label="param SourceAssemblySymbol(ImmutableArray<PEModule> netModules) 359635"];
1441 [label="param SourceAssemblySymbol(this) 359636"];
1442 [label="param SourceAssemblySymbol(this) 359637"];
1443 [label="param MetadataOrSourceAssemblySymbol(this) 359638"];
1444 [label="param MetadataOrSourceAssemblySymbol(this) 359639"];
1445 [label="param NonMissingAssemblySymbol(this) 359640"];
1446 [label="param NonMissingAssemblySymbol(this) 359641"];
1447 [label="param AssemblySymbol(this) 359642"];
1448 [label="param AssemblySymbol(this) 359643"];
1449 [label="param Symbol(this) 359644"];
1450 [label="_lazyISymbol 359645"];
1451 [label="_corLibrary 359646"];
1452 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 359647"];
1453 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 359648"];
1454 [label="_globalNamespace 359649"];
1455 [label="_lazySpecialTypes 359650"];
1456 [label="_cachedSpecialTypes 359651"];
1457 [label="_lazyNativeIntegerTypes 359652"];
1458 [label="_lazyTypeNames 359653"];
1459 [label="_lazyNamespaceNames 359654"];
1460 [label="_lazySpecialTypeMembers 359655"];
1461 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 359656"];
1462 [label="_compilation 359657"];
1463 [label="lazyAssemblyIdentity 359658"];
1464 [label="_assemblySimpleName 359659"];
1465 [label="_lazyStrongNameKeys 359660"];
1466 [label="_lazySourceAttributesBag 359661"];
1467 [label="_lazyNetModuleAttributesBag 359662"];
1468 [label="_lazyForwardedTypesFromSource 359663"];
1469 [label="_lazyOmittedAttributeIndices 359664"];
1470 [label="_lazyContainsExtensionMethods 359665"];
1471 [label="new ConcurrentDictionary<FieldSymbol, bool>() 359666"];
1472 [label="_unassignedFieldsMap = new ConcurrentDictionary<FieldSymbol, bool>() 359667"];
1473 [label="new ConcurrentSet<FieldSymbol>() 359668"];
1474 [label="_unreadFields = new ConcurrentSet<FieldSymbol>() 359669"];
1475 [label="new ConcurrentSet<TypeSymbol>() 359670"];
1476 [label="TypesReferencedInExternalMethods = new ConcurrentSet<TypeSymbol>() 359671"];
1477 [label="_optimisticallyGrantedInternalsAccess 359672"];
1478 [label="_lazyInternalsVisibleToMap 359673"];
1479 [label="Debug.Assert(compilation != null); 359674"];
1480 [label="Debug.Assert(compilation != null); 359675"];
1481 [label="Debug.Assert(assemblySimpleName != null); 359676"];
1482 [label="Debug.Assert(assemblySimpleName != null); 359677"];
1483 [label="Debug.Assert(!String.IsNullOrWhiteSpace(moduleName)); 359678"];
1484 [label="Debug.Assert(!netModules.IsDefault); 359679"];
1485 [label="_compilation 359680"];
1486 [label="_assemblySimpleName 359681"];
1487 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 359682"];
1488 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 359683"];
1489 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 359684"];
1490 [label="compilation.Declarations 359685"];
1491 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 359686"];
1492 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 359687"];
1493 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 359688"];
1494 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 359689"];
1495 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 359690"];
1496 [label="new SourceModuleSymbol(this, compilation.Declarations, moduleName) 359691"];
1497 [label="param SourceModuleSymbol(SourceAssemblySymbol assemblySymbol) 359692"];
1498 [label="param SourceModuleSymbol(DeclarationTable declarations) 359693"];
1499 [label="param SourceModuleSymbol(string moduleName) 359694"];
1500 [label="param SourceModuleSymbol(this) 359695"];
1501 [label="param SourceModuleSymbol(this) 359696"];
1502 [label="param NonMissingModuleSymbol(this) 359697"];
1503 [label="param NonMissingModuleSymbol(this) 359698"];
1504 [label="param ModuleSymbol(this) 359699"];
1505 [label="param ModuleSymbol(this) 359700"];
1506 [label="param Symbol(this) 359701"];
1507 [label="_lazyISymbol 359702"];
1508 [label="_moduleReferences 359703"];
1509 [label="_assemblySymbol 359704"];
1510 [label="_lazyContainsExplicitDefinitionOfNoPiaLocalTypes = ThreeState.Unknown 359705"];
1511 [label="_sources 359706"];
1512 [label="_lazyCustomAttributesBag 359707"];
1513 [label="_globalNamespace 359708"];
1514 [label="_hasBadAttributes 359709"];
1515 [label="_name 359710"];
1516 [label="Debug.Assert((object)assemblySymbol != null); 359711"];
1517 [label="Debug.Assert((object)assemblySymbol != null); 359712"];
1518 [label="_assemblySymbol 359713"];
1519 [label="_sources 359714"];
1520 [label="_name 359715"];
1521 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 359716"];
1522 [label="compilation.Options 359717"];
1523 [label="get\n            {\n                return _options;\n            } 359718"];
1524 [label="return _options; 359719"];
1525 [label="var importOptions = (compilation.Options.MetadataImportOptions == MetadataImportOptions.All) ?\n                MetadataImportOptions.All : MetadataImportOptions.Internal; 359720"];
1526 [label="(compilation.Options.MetadataImportOptions == MetadataImportOptions.All) 359721"];
1527 [label="foreach (PEModule netModule in netModules)\n            {\n                moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count));\n                // SetReferences will be called later by the ReferenceManager (in CreateSourceAssemblyFullBind for \n                // a fresh manager, in CreateSourceAssemblyReuseData for a reused one).\n            } 359722"];
1528 [label="_modules = moduleBuilder.ToImmutableAndFree(); 359723"];
1529 [label="_modules 359724"];
1530 [label="compilation.Options 359725"];
1531 [label="get\n            {\n                return _options;\n            } 359726"];
1532 [label="return _options; 359727"];
1533 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 359728"];
1534 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 359729"];
1535 [label="AssemblySymbol? corLibrary; 359730"];
1536 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 359731"];
1537 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 359732"];
1538 [label="if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 359733"];
1539 [label="corLibrary = bindingResult[corLibraryIndex].AssemblySymbol; 359734"];
1540 [label="assemblySymbol.SetCorLibrary(corLibrary); 359735"];
1541 [label="assemblySymbol.SetCorLibrary(corLibrary) 359736"];
1542 [label="param SetCorLibrary(AssemblySymbol corLibrary) 359737"];
1543 [label="param SetCorLibrary(this) 359738"];
1544 [label="Debug.Assert((object)_corLibrary == null); 359739"];
1545 [label="Debug.Assert((object)_corLibrary == null); 359740"];
1546 [label="_corLibrary 359741"];
1547 [label="assemblySymbol.SetCorLibrary(corLibrary); 359742"];
1548 [label="Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies = null; 359743"];
1549 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 359744"];
1550 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 359745"];
1551 [label="ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences; 359746"];
1552 [label="moduleReferences 359747"];
1553 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359748"];
1554 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359749"];
1555 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359750"];
1556 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359751"];
1557 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359752"];
1558 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359753"];
1559 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences) 359754"];
1560 [label="param SetupReferencesForSourceAssembly(SourceAssemblySymbol sourceAssembly) 359755"];
1561 [label="param SetupReferencesForSourceAssembly(ImmutableArray<PEModule> modules) 359756"];
1562 [label="param SetupReferencesForSourceAssembly(int totalReferencedAssemblyCount) 359757"];
1563 [label="param SetupReferencesForSourceAssembly(BoundInputAssembly[] bindingResult) 359758"];
1564 [label="param SetupReferencesForSourceAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 359759"];
1565 [label="param SetupReferencesForSourceAssembly(out ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences) 359760"];
1566 [label="sourceAssembly.Modules 359761"];
1567 [label="get\n            {\n                return _modules;\n            } 359762"];
1568 [label="return _modules; 359763"];
1569 [label="var moduleSymbols = sourceAssembly.Modules; 359764"];
1570 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 359765"];
1571 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 359766"];
1572 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 359767"];
1573 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 359768"];
1574 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 359769"];
1575 [label="(moduleSymbols.Length > 1) 359770"];
1576 [label="int refsUsed = 0; 359771"];
1577 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 359772"];
1578 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 359773"];
1579 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 359774"];
1580 [label="(moduleIndex == 0) 359775"];
1581 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 359776"];
1582 [label="var identities = new AssemblyIdentity[refsCount]; 359777"];
1583 [label="var symbols = new AssemblySymbol[refsCount]; 359778"];
1584 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 359779"];
1585 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 359780"];
1586 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 359781"];
1587 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 359782"];
1588 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 359783"];
1589 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 359784"];
1590 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 359785"];
1591 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 359786"];
1592 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 359787"];
1593 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 359788"];
1594 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 359789"];
1595 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359790"];
1596 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359791"];
1597 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359792"];
1598 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 359793"];
1599 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 359794"];
1600 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 359795"];
1601 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 359796"];
1602 [label="Debug.Assert(referenceBinding.IsBound); 359797"];
1603 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 359798"];
1604 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 359799"];
1605 [label="Debug.Assert(assembly is object); 359800"];
1606 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 359801"];
1607 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 359802"];
1608 [label="return assembly; 359803"];
1609 [label="symbols[k] 359804"];
1610 [label="identities[k] 359805"];
1611 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 359806"];
1612 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 359807"];
1613 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 359808"];
1614 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 359809"];
1615 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359810"];
1616 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359811"];
1617 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 359812"];
1618 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 359813"];
1619 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 359814"];
1620 [label="Debug.Assert(referenceBinding.IsBound); 359815"];
1621 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 359816"];
1622 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 359817"];
1623 [label="Debug.Assert(assembly is object); 359818"];
1624 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 359819"];
1625 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 359820"];
1626 [label="return assembly; 359821"];
1627 [label="symbols[k] 359822"];
1628 [label="identities[k] 359823"];
1629 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 359824"];
1630 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 359825"];
1631 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 359826"];
1632 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 359827"];
1633 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 359828"];
1634 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 359829"];
1635 [label="if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    } 359830"];
1636 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 359831"];
1637 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 359832"];
1638 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 359833"];
1639 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly) 359834"];
1640 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 359835"];
1641 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 359836"];
1642 [label="param SetReferences(this) 359837"];
1643 [label="Debug.Assert(moduleReferences != null); 359838"];
1644 [label="Debug.Assert(moduleReferences != null); 359839"];
1645 [label="AssertReferencesUninitialized() 359840"];
1646 [label="param AssertReferencesUninitialized(this) 359841"];
1647 [label="Debug.Assert(_moduleReferences == null); 359842"];
1648 [label="Debug.Assert(_moduleReferences == null); 359843"];
1649 [label="AssertReferencesUninitialized(); 359844"];
1650 [label="_moduleReferences 359845"];
1651 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 359846"];
1652 [label="refsUsed += refsCount; 359847"];
1653 [label="moduleReferences = moduleReferencesBuilder.ToImmutableOrEmptyAndFree(); 359848"];
1654 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 359849"];
1655 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 359850"];
1656 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 359851"];
1657 [label="if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        } 359852"];
1658 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 359853"];
1659 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 359854"];
1660 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 359855"];
1661 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 359856"];
1662 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies) 359857"];
1663 [label="param InitializeNewSymbols(List<int> newSymbols) 359858"];
1664 [label="param InitializeNewSymbols(SourceAssemblySymbol sourceAssembly) 359859"];
1665 [label="param InitializeNewSymbols(ImmutableArray<AssemblyData> assemblies) 359860"];
1666 [label="param InitializeNewSymbols(BoundInputAssembly[] bindingResult) 359861"];
1667 [label="param InitializeNewSymbols(Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 359862"];
1668 [label="Debug.Assert(newSymbols.Count > 0); 359863"];
1669 [label="Debug.Assert(newSymbols.Count > 0); 359864"];
1670 [label="sourceAssembly.CorLibrary 359865"];
1671 [label="get\n            {\n                return _corLibrary;\n            } 359866"];
1672 [label="return _corLibrary; 359867"];
1673 [label="var corLibrary = sourceAssembly.CorLibrary; 359868"];
1674 [label="RoslynDebug.Assert((object)corLibrary != null); 359869"];
1675 [label="RoslynDebug.Assert((object)corLibrary != null); 359870"];
1676 [label="foreach (int i in newSymbols)\n                {\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n\n                    if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                } 359871"];
1677 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 359872"];
1678 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 359873"];
1679 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 359874"];
1680 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 359875"];
1681 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359876"];
1682 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359877"];
1683 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359878"];
1684 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359879"];
1685 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359880"];
1686 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly) 359881"];
1687 [label="param SetupReferencesForFileAssembly(AssemblyDataForFile fileData) 359882"];
1688 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 359883"];
1689 [label="param SetupReferencesForFileAssembly(ref BoundInputAssembly currentBindingResult) 359884"];
1690 [label="param SetupReferencesForFileAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 359885"];
1691 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 359886"];
1692 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 359887"];
1693 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 359888"];
1694 [label="var portableExecutableAssemblySymbol = (PEAssemblySymbol)currentBindingResult.AssemblySymbol; 359889"];
1695 [label="portableExecutableAssemblySymbol.Modules 359890"];
1696 [label="get\n            {\n                return _modules;\n            } 359891"];
1697 [label="return _modules; 359892"];
1698 [label="ImmutableArray<ModuleSymbol> modules = portableExecutableAssemblySymbol.Modules; 359893"];
1699 [label="int moduleCount = modules.Length; 359894"];
1700 [label="int refsUsed = 0; 359895"];
1701 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 359896"];
1702 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 359897"];
1703 [label="int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j]; 359898"];
1704 [label="var identities = new AssemblyIdentity[moduleReferenceCount]; 359899"];
1705 [label="var symbols = new AssemblySymbol[moduleReferenceCount]; 359900"];
1706 [label="fileData.AssemblyReferences 359901"];
1707 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 359902"];
1708 [label="return _referencedAssemblies; 359903"];
1709 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 359904"];
1710 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 359905"];
1711 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 359906"];
1712 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 359907"];
1713 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 359908"];
1714 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 359909"];
1715 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 359910"];
1716 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 359911"];
1717 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 359912"];
1718 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 359913"];
1719 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 359914"];
1720 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 359915"];
1721 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 359916"];
1722 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 359917"];
1723 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 359918"];
1724 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 359919"];
1725 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 359920"];
1726 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly) 359921"];
1727 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 359922"];
1728 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 359923"];
1729 [label="param SetReferences(this) 359924"];
1730 [label="Debug.Assert(moduleReferences != null); 359925"];
1731 [label="Debug.Assert(moduleReferences != null); 359926"];
1732 [label="AssertReferencesUninitialized() 359927"];
1733 [label="param AssertReferencesUninitialized(this) 359928"];
1734 [label="Debug.Assert(_moduleReferences == null); 359929"];
1735 [label="Debug.Assert(_moduleReferences == null); 359930"];
1736 [label="AssertReferencesUninitialized(); 359931"];
1737 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 359932"];
1738 [label="refsUsed += moduleReferenceCount; 359933"];
1739 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359934"];
1740 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359935"];
1741 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 359936"];
1742 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 359937"];
1743 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 359938"];
1744 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 359939"];
1745 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 359940"];
1746 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 359941"];
1747 [label="var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k]; 359942"];
1748 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        } 359943"];
1749 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359944"];
1750 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359945"];
1751 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 359946"];
1752 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 359947"];
1753 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 359948"];
1754 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 359949"];
1755 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 359950"];
1756 [label="Debug.Assert(referenceBinding.IsBound); 359951"];
1757 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 359952"];
1758 [label="Debug.Assert(assembly is object); 359953"];
1759 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 359954"];
1760 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 359955"];
1761 [label="symbols[k] 359956"];
1762 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 359957"];
1763 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 359958"];
1764 [label="GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies) 359959"];
1765 [label="param GetOrAddMissingAssemblySymbol(AssemblyIdentity assemblyIdentity) 359960"];
1766 [label="param GetOrAddMissingAssemblySymbol(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 359961"];
1767 [label="MissingAssemblySymbol? missingAssembly; 359962"];
1768 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 359963"];
1769 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 359964"];
1770 [label="missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>(); 359965"];
1771 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 359966"];
1772 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 359967"];
1773 [label="new MissingAssemblySymbol(assemblyIdentity) 359968"];
1774 [label="param MissingAssemblySymbol(AssemblyIdentity identity) 359969"];
1775 [label="param MissingAssemblySymbol(this) 359970"];
1776 [label="param MissingAssemblySymbol(this) 359971"];
1777 [label="identity 359972"];
1778 [label="moduleSymbol 359973"];
1779 [label="Debug.Assert(identity != null); 359974"];
1780 [label="Debug.Assert(identity != null); 359975"];
1781 [label="this.identity 359976"];
1782 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 359977"];
1783 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 359978"];
1784 [label="new MissingModuleSymbol(this, 0) 359979"];
1785 [label="param MissingModuleSymbol(AssemblySymbol assembly) 359980"];
1786 [label="param MissingModuleSymbol(int ordinal) 359981"];
1787 [label="param MissingModuleSymbol(this) 359982"];
1788 [label="param MissingModuleSymbol(this) 359983"];
1789 [label="assembly 359984"];
1790 [label="ordinal 359985"];
1791 [label="globalNamespace 359986"];
1792 [label="Debug.Assert((object)assembly != null); 359987"];
1793 [label="Debug.Assert((object)assembly != null); 359988"];
1794 [label="Debug.Assert(ordinal >= -1); 359989"];
1795 [label="Debug.Assert(ordinal >= -1); 359990"];
1796 [label="this.assembly 359991"];
1797 [label="this.ordinal 359992"];
1798 [label="globalNamespace = new MissingNamespaceSymbol(this); 359993"];
1799 [label="globalNamespace = new MissingNamespaceSymbol(this); 359994"];
1800 [label="new MissingNamespaceSymbol(this) 359995"];
1801 [label="param MissingNamespaceSymbol(MissingModuleSymbol containingModule) 359996"];
1802 [label="param MissingNamespaceSymbol(this) 359997"];
1803 [label="param MissingNamespaceSymbol(this) 359998"];
1804 [label="_name 359999"];
1805 [label="_containingSymbol 360000"];
1806 [label="Debug.Assert((object)containingModule != null); 360001"];
1807 [label="Debug.Assert((object)containingModule != null); 360002"];
1808 [label="_containingSymbol 360003"];
1809 [label="_name 360004"];
1810 [label="globalNamespace 360005"];
1811 [label="moduleSymbol 360006"];
1812 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 360007"];
1813 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 360008"];
1814 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 360009"];
1815 [label="return missingAssembly; 360010"];
1816 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 360011"];
1817 [label="symbols[k] 360012"];
1818 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 360013"];
1819 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 360014"];
1820 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 360015"];
1821 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 360016"];
1822 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 360017"];
1823 [label="Debug.Assert(moduleReferences != null); 360018"];
1824 [label="Debug.Assert(moduleReferences != null); 360019"];
1825 [label="AssertReferencesUninitialized() 360020"];
1826 [label="param AssertReferencesUninitialized(this) 360021"];
1827 [label="Debug.Assert(_moduleReferences == null); 360022"];
1828 [label="Debug.Assert(_moduleReferences == null); 360023"];
1829 [label="AssertReferencesUninitialized(); 360024"];
1830 [label="refsUsed += moduleReferenceCount; 360025"];
1831 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 360026"];
1832 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 360027"];
1833 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 360028"];
1834 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 360029"];
1835 [label="Debug.Assert(referenceBinding.IsBound); 360030"];
1836 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 360031"];
1837 [label="Debug.Assert(assembly is object); 360032"];
1838 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 360033"];
1839 [label="return missingAssembly; 360034"];
1840 [label="identity 360035"];
1841 [label="moduleSymbol 360036"];
1842 [label="Debug.Assert(identity != null); 360037"];
1843 [label="Debug.Assert(identity != null); 360038"];
1844 [label="assembly 360039"];
1845 [label="ordinal 360040"];
1846 [label="globalNamespace 360041"];
1847 [label="Debug.Assert((object)assembly != null); 360042"];
1848 [label="Debug.Assert((object)assembly != null); 360043"];
1849 [label="Debug.Assert(ordinal >= -1); 360044"];
1850 [label="Debug.Assert(ordinal >= -1); 360045"];
1851 [label="_name 360046"];
1852 [label="_containingSymbol 360047"];
1853 [label="Debug.Assert((object)containingModule != null); 360048"];
1854 [label="Debug.Assert((object)containingModule != null); 360049"];
1855 [label="identity 360050"];
1856 [label="moduleSymbol 360051"];
1857 [label="Debug.Assert(identity != null); 360052"];
1858 [label="assembly 360053"];
1859 [label="ordinal 360054"];
1860 [label="globalNamespace 360055"];
1861 [label="Debug.Assert((object)assembly != null); 360056"];
1862 [label="Debug.Assert(ordinal >= -1); 360057"];
1863 [label="_name 360058"];
1864 [label="_containingSymbol 360059"];
1865 [label="Debug.Assert((object)containingModule != null); 360060"];
1866 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 360061"];
1867 [label="Debug.Assert(moduleReferences != null); 360062"];
1868 [label="Debug.Assert(moduleReferences != null); 360063"];
1869 [label="AssertReferencesUninitialized() 360064"];
1870 [label="param AssertReferencesUninitialized(this) 360065"];
1871 [label="Debug.Assert(_moduleReferences == null); 360066"];
1872 [label="Debug.Assert(_moduleReferences == null); 360067"];
1873 [label="AssertReferencesUninitialized(); 360068"];
1874 [label="refsUsed += moduleReferenceCount; 360069"];
1875 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 360070"];
1876 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 360071"];
1877 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 360072"];
1878 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 360073"];
1879 [label="Debug.Assert(referenceBinding.IsBound); 360074"];
1880 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 360075"];
1881 [label="Debug.Assert(assembly is object); 360076"];
1882 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 360077"];
1883 [label="if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    } 360078"];
1884 [label="unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>(); 360079"];
1885 [label="unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity)); 360080"];
1886 [label="unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity)); 360081"];
1887 [label="identity 360082"];
1888 [label="moduleSymbol 360083"];
1889 [label="Debug.Assert(identity != null); 360084"];
1890 [label="assembly 360085"];
1891 [label="ordinal 360086"];
1892 [label="globalNamespace 360087"];
1893 [label="Debug.Assert((object)assembly != null); 360088"];
1894 [label="Debug.Assert(ordinal >= -1); 360089"];
1895 [label="_name 360090"];
1896 [label="_containingSymbol 360091"];
1897 [label="Debug.Assert((object)containingModule != null); 360092"];
1898 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 360093"];
1899 [label="Debug.Assert(moduleReferences != null); 360094"];
1900 [label="Debug.Assert(moduleReferences != null); 360095"];
1901 [label="AssertReferencesUninitialized() 360096"];
1902 [label="param AssertReferencesUninitialized(this) 360097"];
1903 [label="Debug.Assert(_moduleReferences == null); 360098"];
1904 [label="Debug.Assert(_moduleReferences == null); 360099"];
1905 [label="AssertReferencesUninitialized(); 360100"];
1906 [label="refsUsed += moduleReferenceCount; 360101"];
1907 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 360102"];
1908 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 360103"];
1909 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 360104"];
1910 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 360105"];
1911 [label="Debug.Assert(referenceBinding.IsBound); 360106"];
1912 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 360107"];
1913 [label="Debug.Assert(assembly is object); 360108"];
1914 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 360109"];
1915 [label="Debug.Assert(moduleReferences != null); 360110"];
1916 [label="AssertReferencesUninitialized() 360111"];
1917 [label="param AssertReferencesUninitialized(this) 360112"];
1918 [label="Debug.Assert(_moduleReferences == null); 360113"];
1919 [label="Debug.Assert(_moduleReferences == null); 360114"];
1920 [label="AssertReferencesUninitialized(); 360115"];
1921 [label="refsUsed += moduleReferenceCount; 360116"];
1922 [label="var linkedReferencedAssembliesBuilder = ArrayBuilder<AssemblySymbol>.GetInstance(); 360117"];
1923 [label="sourceAssembly.Modules 360118"];
1924 [label="get\n            {\n                return _modules;\n            } 360119"];
1925 [label="return _modules; 360120"];
1926 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 360121"];
1927 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 360122"];
1928 [label="sourceAssembly.Modules[0].GetReferencedAssemblySymbols() 360123"];
1929 [label="param GetReferencedAssemblySymbols(this) 360124"];
1930 [label="AssertReferencesInitialized() 360125"];
1931 [label="param AssertReferencesInitialized(this) 360126"];
1932 [label="Debug.Assert(_moduleReferences != null); 360127"];
1933 [label="Debug.Assert(_moduleReferences != null); 360128"];
1934 [label="AssertReferencesInitialized(); 360129"];
1935 [label="return _moduleReferences.Symbols; 360130"];
1936 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly currentBindingResult = ref bindingResult[i];\n                    Debug.Assert(currentBindingResult.AssemblySymbol is object);\n                    Debug.Assert(currentBindingResult.ReferenceBinding is object);\n\n                    if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    }\n\n                    // Setup linked referenced assemblies.\n                    linkedReferencedAssembliesBuilder.Clear();\n\n                    if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    }\n\n                    foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    }\n\n                    if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    }\n\n                    currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary);\n                } 360131"];
1937 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 360132"];
1938 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 360133"];
1939 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 360134"];
1940 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 360135"];
1941 [label="assemblies[i].ContainsNoPiaLocalTypes 360136"];
1942 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 360137"];
1943 [label="linkedReferencedAssembliesBuilder.Clear(); 360138"];
1944 [label="if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    } 360139"];
1945 [label="assemblies[i].IsLinked 360140"];
1946 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 360141"];
1947 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 360142"];
1948 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 360143"];
1949 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 360144"];
1950 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 360145"];
1951 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 360146"];
1952 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary) 360147"];
1953 [label="param SetCorLibrary(AssemblySymbol corLibrary) 360148"];
1954 [label="param SetCorLibrary(this) 360149"];
1955 [label="Debug.Assert((object)_corLibrary == null); 360150"];
1956 [label="Debug.Assert((object)_corLibrary == null); 360151"];
1957 [label="_corLibrary 360152"];
1958 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 360153"];
1959 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 360154"];
1960 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 360155"];
1961 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 360156"];
1962 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 360157"];
1963 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 360158"];
1964 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 360159"];
1965 [label="if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        } 360160"];
1966 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 360161"];
1967 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 360162"];
1968 [label="Debug.Assert((object)_corLibrary == null); 360163"];
1969 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 360164"];
1970 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 360165"];
1971 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 360166"];
1972 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 360167"];
1973 [label="Debug.Assert((object)_corLibrary == null); 360168"];
1974 [label="linkedReferencedAssembliesBuilder.Free(); 360169"];
1975 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 360170"];
1976 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 360171"];
1977 [label="foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    } 360172"];
1978 [label="missingAssembly.SetCorLibrary(corLibrary); 360173"];
1979 [label="missingAssembly.SetCorLibrary(corLibrary) 360174"];
1980 [label="param SetCorLibrary(AssemblySymbol corLibrary) 360175"];
1981 [label="Debug.Assert((object)_corLibrary == null); 360176"];
1982 [label="missingAssembly.SetCorLibrary(corLibrary); 360177"];
1983 [label="Debug.Assert((object)_corLibrary == null); 360178"];
1984 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 360179"];
1985 [label="if (compilation._lazyAssemblySymbol is null)\n                    {\n                        lock (SymbolCacheAndReferenceManagerStateGuard)\n                        {\n                            if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            }\n                        }\n                    } 360180"];
1986 [label="if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            } 360181"];
1987 [label="if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                } 360182"];
1988 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 360183"];
1989 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 360184"];
1990 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult) 360185"];
1991 [label="param UpdateSymbolCacheNoLock(List<int> newSymbols) 360186"];
1992 [label="param UpdateSymbolCacheNoLock(ImmutableArray<AssemblyData> assemblies) 360187"];
1993 [label="param UpdateSymbolCacheNoLock(BoundInputAssembly[] bindingResult) 360188"];
1994 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly current = ref bindingResult[i];\n                    Debug.Assert(current.AssemblySymbol is object);\n\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n                    if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    }\n                } 360189"];
1995 [label="ref BoundInputAssembly current = ref bindingResult[i]; 360190"];
1996 [label="Debug.Assert(current.AssemblySymbol is object); 360191"];
1997 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 360192"];
1998 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 360193"];
1999 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 360194"];
2000 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 360195"];
2001 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 360196"];
2002 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 360197"];
2003 [label="Debug.Assert(current.AssemblySymbol is object); 360198"];
2004 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 360199"];
2005 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360200"];
2006 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360201"];
2007 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360202"];
2008 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360203"];
2009 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360204"];
2010 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360205"];
2011 [label="ReferenceEquals(corLibrary, assemblySymbol) 360206"];
2012 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360207"];
2013 [label="assemblySymbol.SourceModule 360208"];
2014 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 360209"];
2015 [label="this.Modules 360210"];
2016 [label="get\n            {\n                return _modules;\n            } 360211"];
2017 [label="return _modules; 360212"];
2018 [label="return (SourceModuleSymbol)this.Modules[0]; 360213"];
2019 [label="return (SourceModuleSymbol)this.Modules[0]; 360214"];
2020 [label="assemblySymbol.SourceModule.GetReferencedAssemblySymbols() 360215"];
2021 [label="param GetReferencedAssemblySymbols(this) 360216"];
2022 [label="AssertReferencesInitialized() 360217"];
2023 [label="param AssertReferencesInitialized(this) 360218"];
2024 [label="Debug.Assert(_moduleReferences != null); 360219"];
2025 [label="Debug.Assert(_moduleReferences != null); 360220"];
2026 [label="AssertReferencesInitialized(); 360221"];
2027 [label="return _moduleReferences.Symbols; 360222"];
2028 [label="assemblySymbol.SourceModule 360223"];
2029 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 360224"];
2030 [label="this.Modules 360225"];
2031 [label="get\n            {\n                return _modules;\n            } 360226"];
2032 [label="return _modules; 360227"];
2033 [label="return (SourceModuleSymbol)this.Modules[0]; 360228"];
2034 [label="assemblySymbol.SourceModule.GetUnifiedAssemblies() 360229"];
2035 [label="param GetUnifiedAssemblies(this) 360230"];
2036 [label="AssertReferencesInitialized() 360231"];
2037 [label="param AssertReferencesInitialized(this) 360232"];
2038 [label="Debug.Assert(_moduleReferences != null); 360233"];
2039 [label="Debug.Assert(_moduleReferences != null); 360234"];
2040 [label="AssertReferencesInitialized(); 360235"];
2041 [label="return _moduleReferences.UnifiedAssemblies; 360236"];
2042 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 360237"];
2043 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 360238"];
2044 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 360239"];
2045 [label="compilation._referenceManager 360240"];
2046 [label="compilation._lazyAssemblySymbol 360241"];
2047 [label="return true; 360242"];
2048 [label="resolutionDiagnostics.Free(); 360243"];
2049 [label="assemblyReferencesBySimpleName.Free(); 360244"];
2050 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 360245"];
2051 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 360246"];
2052 [label="AssertBound(); 360247"];
2053 [label="Debug.Assert(compilation._lazyAssemblySymbol is object); 360248"];
2054 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 360249"];
2055 [label="Debug.Assert(_lazyAssemblySymbol is object); 360250"];
2056 [label="return _referenceManager; 360251"];
2057 [label="GetBoundReferenceManager(); 360252"];
2058 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 360253"];
2059 [label="return _lazyAssemblySymbol; 360254"];
2060 [label="return SourceAssembly; 360255"];
2061 [label="modules.AddRange(Assembly.Modules); 360256"];
2062 [label="Assembly.Modules 360257"];
2063 [label="get\n            {\n                return _modules;\n            } 360258"];
2064 [label="modules.AddRange(Assembly.Modules); 360259"];
2065 [label="GetBoundReferenceManager() 360260"];
2066 [label="param GetBoundReferenceManager(this) 360261"];
2067 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 360262"];
2068 [label="return _referenceManager; 360263"];
2069 [label="var referenceManager = GetBoundReferenceManager(); 360264"];
2070 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 360265"];
2071 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 360266"];
2072 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 360267"];
2073 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 360268"];
2074 [label="referenceManager.ReferencedAssemblies[i].Modules 360269"];
2075 [label="get\n            {\n                return _modules;\n            } 360270"];
2076 [label="GetAllUnaliasedModules(modules); 360271"];
2077 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 360272"];
2078 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 360273"];
2079 [label="new NamespaceExtent(this) 360274"];
2080 [label="param NamespaceExtent(CSharpCompilation compilation) 360275"];
2081 [label="param NamespaceExtent(this) 360276"];
2082 [label="_kind 360277"];
2083 [label="_symbolOrCompilation 360278"];
2084 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 360279"];
2085 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 360280"];
2086 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 360281"];
2087 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 360282"];
2088 [label="var diagnostics = DiagnosticBag.GetInstance(); 360283"];
2089 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 360284"];
2090 [label="DeclaringCompilation 360285"];
2091 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 360286"];
2092 [label="_assemblySymbol.DeclaringCompilation 360287"];
2093 [label="get\n            {\n                return _compilation;\n            } 360288"];
2094 [label="return _compilation; 360289"];
2095 [label="return _assemblySymbol.DeclaringCompilation; 360290"];
2096 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 360291"];
2097 [label="DeclaringCompilation.MergedRootDeclaration 360292"];
2098 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 360293"];
2099 [label="Declarations 360294"];
2100 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 360295"];
2101 [label="return Declarations.GetMergedRoot(this); 360296"];
2102 [label="return Declarations.GetMergedRoot(this); 360297"];
2103 [label="return Declarations.GetMergedRoot(this); 360298"];
2104 [label="0x1 360299"];
2105 [label="LazyAllMembersIsSorted = 0x1 360300"];
2106 [label="d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 360301"];
2107 [label="s_declaringSyntaxReferencesSelector = d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 360302"];
2108 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 360303"];
2109 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 360304"];
2110 [label="new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics) 360305"];
2111 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 360306"];
2112 [label="param SourceNamespaceSymbol(Symbol container) 360307"];
2113 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 360308"];
2114 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 360309"];
2115 [label="param SourceNamespaceSymbol(this) 360310"];
2116 [label="param SourceNamespaceSymbol(this) 360311"];
2117 [label="_module 360312"];
2118 [label="_container 360313"];
2119 [label="_mergedDeclaration 360314"];
2120 [label="_nameToMembersMap 360315"];
2121 [label="_nameToTypeMembersMap 360316"];
2122 [label="_flags 360317"];
2123 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 360318"];
2124 [label="1 360319"];
2125 [label="_treeOrdinal 360320"];
2126 [label="0 360321"];
2127 [label="_position 360322"];
2128 [label="NotInSource = new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 360323"];
2129 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 360324"];
2130 [label="1 360325"];
2131 [label="_treeOrdinal 360326"];
2132 [label="1 360327"];
2133 [label="_position 360328"];
2134 [label="NotInitialized = new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 360329"];
2135 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 360330"];
2136 [label="_treeOrdinal 360331"];
2137 [label="1 360332"];
2138 [label="int.MaxValue - 1 360333"];
2139 [label="_position 360334"];
2140 [label="SynthesizedCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 360335"];
2141 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 360336"];
2142 [label="_treeOrdinal 360337"];
2143 [label="_position 360338"];
2144 [label="SynthesizedCCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 360339"];
2145 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 360340"];
2146 [label="Debug.Assert(mergedDeclaration != null); 360341"];
2147 [label="Debug.Assert(mergedDeclaration != null); 360342"];
2148 [label="_module 360343"];
2149 [label="_container 360344"];
2150 [label="_mergedDeclaration 360345"];
2151 [label="foreach (var singleDeclaration in mergedDeclaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 360346"];
2152 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 360347"];
2153 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 360348"];
2154 [label="Debug.Assert(diagnostics.IsEmptyWithoutResolution); 360349"];
2155 [label="diagnostics.Free(); 360350"];
2156 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 360351"];
2157 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 360352"];
2158 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 360353"];
2159 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 360354"];
2160 [label="return _globalNamespace; 360355"];
2161 [label="param GetHashCode(this) 360356"];
2162 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 360357"];
2163 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 360358"];
2164 [label="get { return _globalNamespace; } 360359"];
2165 [label="return _globalNamespace; 360360"];
2166 [label="MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)) 360361"];
2167 [label="param Create(NamespaceExtent extent) 360362"];
2168 [label="param Create(NamespaceSymbol containingNamespace) 360363"];
2169 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 360364"];
2170 [label="param Create(string nameOpt = null) 360365"];
2171 [label="Debug.Assert(namespacesToMerge.Length != 0); 360366"];
2172 [label="Debug.Assert(namespacesToMerge.Length != 0); 360367"];
2173 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 360368"];
2174 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 360369"];
2175 [label="(namespacesToMerge.Length == 1 && nameOpt == null) 360370"];
2176 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 360371"];
2177 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 360372"];
2178 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 360373"];
2179 [label="new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt) 360374"];
2180 [label="param MergedNamespaceSymbol(NamespaceExtent extent) 360375"];
2181 [label="param MergedNamespaceSymbol(NamespaceSymbol containingNamespace) 360376"];
2182 [label="param MergedNamespaceSymbol(ImmutableArray<NamespaceSymbol> namespacesToMerge) 360377"];
2183 [label="param MergedNamespaceSymbol(string nameOpt) 360378"];
2184 [label="param MergedNamespaceSymbol(this) 360379"];
2185 [label="param MergedNamespaceSymbol(this) 360380"];
2186 [label="_containingNamespace 360381"];
2187 [label="_nameOpt 360382"];
2188 [label="_cachedLookup 360383"];
2189 [label="_extent 360384"];
2190 [label="_namespacesToMerge 360385"];
2191 [label="_containingNamespace 360386"];
2192 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 360387"];
2193 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 360388"];
2194 [label="_cachedLookup 360389"];
2195 [label="_nameOpt 360390"];
2196 [label="foreach (NamespaceSymbol ns in namespacesToMerge)\n            {\n                Debug.Assert(ns.ConstituentNamespaces.Length == 1);\n            } 360391"];
2197 [label="ns.ConstituentNamespaces 360392"];
2198 [label="get\n            {\n                return ImmutableArray.Create(this);\n            } 360393"];
2199 [label="return ImmutableArray.Create(this); 360394"];
2200 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 360395"];
2201 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 360396"];
2202 [label="modules.Free(); 360397"];
2203 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 360398"];
2204 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 360399"];
2205 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 360400"];
2206 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 360401"];
2207 [label="return _lazyGlobalNamespace; 360402"];
2208 [label="var v = comp.GlobalNamespace.GetTypeMembers('MyEnum', 0).Single(); 360403"];
2209 [label="var v = comp.GlobalNamespace.GetTypeMembers('MyEnum', 0).Single(); 360404"];
2210 [label="comp.GlobalNamespace.GetTypeMembers('MyEnum', 0) 360405"];
2211 [label="param GetTypeMembers(string name) 360406"];
2212 [label="param GetTypeMembers(int arity) 360407"];
2213 [label="param GetTypeMembers(this) 360408"];
2214 [label="return GetTypeMembers(name).WhereAsArray((t, arity) => t.Arity == arity, arity); 360409"];
2215 [label="GetTypeMembers(name) 360410"];
2216 [label="param GetTypeMembers(string name) 360411"];
2217 [label="param GetTypeMembers(this) 360412"];
2218 [label="return ImmutableArray.CreateRange<NamedTypeSymbol>(_cachedLookup[name].OfType<NamedTypeSymbol>()); 360413"];
2219 [label="_cachedLookup 360414"];
2220 [label="param SlowGetChildrenOfName(string name) 360415"];
2221 [label="param SlowGetChildrenOfName(this) 360416"];
2222 [label="ArrayBuilder<NamespaceSymbol> namespaceSymbols = null; 360417"];
2223 [label="var otherSymbols = ArrayBuilder<Symbol>.GetInstance(); 360418"];
2224 [label="foreach (NamespaceSymbol namespaceSymbol in _namespacesToMerge)\n            {\n                foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                }\n            } 360419"];
2225 [label="foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                } 360420"];
2226 [label="namespaceSymbol.GetMembers(name) 360421"];
2227 [label="param GetMembers(string name) 360422"];
2228 [label="param GetMembers(this) 360423"];
2229 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 360424"];
2230 [label="members 360425"];
2231 [label="this.GetNameToMembersMap() 360426"];
2232 [label="param GetNameToMembersMap(this) 360427"];
2233 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 360428"];
2234 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 360429"];
2235 [label="var diagnostics = DiagnosticBag.GetInstance(); 360430"];
2236 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 360431"];
2237 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 360432"];
2238 [label="MakeNameToMembersMap(diagnostics) 360433"];
2239 [label="param MakeNameToMembersMap(DiagnosticBag diagnostics) 360434"];
2240 [label="param MakeNameToMembersMap(this) 360435"];
2241 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 360436"];
2242 [label="_mergedDeclaration.Children 360437"];
2243 [label="param NameToSymbolMapBuilder(int capacity) 360438"];
2244 [label="param NameToSymbolMapBuilder(this) 360439"];
2245 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 360440"];
2246 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 360441"];
2247 [label="_dictionary 360442"];
2248 [label="foreach (var declaration in _mergedDeclaration.Children)\n            {\n                builder.Add(BuildSymbol(declaration, diagnostics));\n            } 360443"];
2249 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 360444"];
2250 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 360445"];
2251 [label="BuildSymbol(declaration, diagnostics) 360446"];
2252 [label="param BuildSymbol(MergedNamespaceOrTypeDeclaration declaration) 360447"];
2253 [label="param BuildSymbol(DiagnosticBag diagnostics) 360448"];
2254 [label="param BuildSymbol(this) 360449"];
2255 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Namespace:\n                    return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Script:\n                case DeclarationKind.Submission:\n                case DeclarationKind.ImplicitClass:\n                    return new ImplicitNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.SimpleProgram:\n                    return new SimpleProgramNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaration.Kind);\n            } 360450"];
2256 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 360451"];
2257 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 360452"];
2258 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 360453"];
2259 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 360454"];
2260 [label="new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics) 360455"];
2261 [label="param SourceNamedTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 360456"];
2262 [label="param SourceNamedTypeSymbol(MergedTypeDeclaration declaration) 360457"];
2263 [label="param SourceNamedTypeSymbol(DiagnosticBag diagnostics) 360458"];
2264 [label="param SourceNamedTypeSymbol(TupleExtraData tupleData = null) 360459"];
2265 [label="param SourceNamedTypeSymbol(this) 360460"];
2266 [label="false 360461"];
2267 [label="considerName: false 360462"];
2268 [label="false 360463"];
2269 [label="considerExplicitlyImplementedInterfaces: false 360464"];
2270 [label="true 360465"];
2271 [label="considerReturnType: true 360466"];
2272 [label="false 360467"];
2273 [label="considerTypeConstraints: false 360468"];
2274 [label="true 360469"];
2275 [label="considerRefKindDifferences: true 360470"];
2276 [label="true 360471"];
2277 [label="considerCallingConvention: true 360472"];
2278 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360473"];
2279 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360474"];
2280 [label="param MemberSignatureComparer(bool considerName) 360475"];
2281 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360476"];
2282 [label="param MemberSignatureComparer(bool considerReturnType) 360477"];
2283 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360478"];
2284 [label="param MemberSignatureComparer(bool considerCallingConvention) 360479"];
2285 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360480"];
2286 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360481"];
2287 [label="param MemberSignatureComparer(this) 360482"];
2288 [label="_considerName 360483"];
2289 [label="_considerExplicitlyImplementedInterfaces 360484"];
2290 [label="_considerReturnType 360485"];
2291 [label="_considerTypeConstraints 360486"];
2292 [label="_considerCallingConvention 360487"];
2293 [label="_considerRefKindDifferences 360488"];
2294 [label="_typeComparison 360489"];
2295 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360490"];
2296 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360491"];
2297 [label="_considerName 360492"];
2298 [label="_considerExplicitlyImplementedInterfaces 360493"];
2299 [label="_considerReturnType 360494"];
2300 [label="_considerTypeConstraints 360495"];
2301 [label="_considerCallingConvention 360496"];
2302 [label="_considerRefKindDifferences 360497"];
2303 [label="_typeComparison 360498"];
2304 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360499"];
2305 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360500"];
2306 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360501"];
2307 [label="ExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360502"];
2308 [label="true 360503"];
2309 [label="considerName: true 360504"];
2310 [label="true 360505"];
2311 [label="considerExplicitlyImplementedInterfaces: true 360506"];
2312 [label="true 360507"];
2313 [label="considerReturnType: true 360508"];
2314 [label="false 360509"];
2315 [label="considerTypeConstraints: false 360510"];
2316 [label="true 360511"];
2317 [label="considerCallingConvention: true 360512"];
2318 [label="true 360513"];
2319 [label="considerRefKindDifferences: true 360514"];
2320 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360515"];
2321 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360516"];
2322 [label="param MemberSignatureComparer(bool considerName) 360517"];
2323 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360518"];
2324 [label="param MemberSignatureComparer(bool considerReturnType) 360519"];
2325 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360520"];
2326 [label="param MemberSignatureComparer(bool considerCallingConvention) 360521"];
2327 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360522"];
2328 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360523"];
2329 [label="param MemberSignatureComparer(this) 360524"];
2330 [label="_considerName 360525"];
2331 [label="_considerExplicitlyImplementedInterfaces 360526"];
2332 [label="_considerReturnType 360527"];
2333 [label="_considerTypeConstraints 360528"];
2334 [label="_considerCallingConvention 360529"];
2335 [label="_considerRefKindDifferences 360530"];
2336 [label="_typeComparison 360531"];
2337 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360532"];
2338 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360533"];
2339 [label="_considerName 360534"];
2340 [label="_considerExplicitlyImplementedInterfaces 360535"];
2341 [label="_considerReturnType 360536"];
2342 [label="_considerTypeConstraints 360537"];
2343 [label="_considerCallingConvention 360538"];
2344 [label="_considerRefKindDifferences 360539"];
2345 [label="_typeComparison 360540"];
2346 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360541"];
2347 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360542"];
2348 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360543"];
2349 [label="CSharpImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360544"];
2350 [label="true 360545"];
2351 [label="considerName: true 360546"];
2352 [label="true 360547"];
2353 [label="considerExplicitlyImplementedInterfaces: true 360548"];
2354 [label="false 360549"];
2355 [label="considerReturnType: false 360550"];
2356 [label="false 360551"];
2357 [label="considerTypeConstraints: false 360552"];
2358 [label="false 360553"];
2359 [label="considerCallingConvention: false 360554"];
2360 [label="true 360555"];
2361 [label="considerRefKindDifferences: true 360556"];
2362 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360557"];
2363 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360558"];
2364 [label="param MemberSignatureComparer(bool considerName) 360559"];
2365 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360560"];
2366 [label="param MemberSignatureComparer(bool considerReturnType) 360561"];
2367 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360562"];
2368 [label="param MemberSignatureComparer(bool considerCallingConvention) 360563"];
2369 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360564"];
2370 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360565"];
2371 [label="param MemberSignatureComparer(this) 360566"];
2372 [label="_considerName 360567"];
2373 [label="_considerExplicitlyImplementedInterfaces 360568"];
2374 [label="_considerReturnType 360569"];
2375 [label="_considerTypeConstraints 360570"];
2376 [label="_considerCallingConvention 360571"];
2377 [label="_considerRefKindDifferences 360572"];
2378 [label="_typeComparison 360573"];
2379 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360574"];
2380 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360575"];
2381 [label="_considerName 360576"];
2382 [label="_considerExplicitlyImplementedInterfaces 360577"];
2383 [label="_considerReturnType 360578"];
2384 [label="_considerTypeConstraints 360579"];
2385 [label="_considerCallingConvention 360580"];
2386 [label="_considerRefKindDifferences 360581"];
2387 [label="_typeComparison 360582"];
2388 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360583"];
2389 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360584"];
2390 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360585"];
2391 [label="CSharpCloseImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360586"];
2392 [label="true 360587"];
2393 [label="considerName: true 360588"];
2394 [label="true 360589"];
2395 [label="considerExplicitlyImplementedInterfaces: true 360590"];
2396 [label="false 360591"];
2397 [label="considerReturnType: false 360592"];
2398 [label="false 360593"];
2399 [label="considerTypeConstraints: false 360594"];
2400 [label="false 360595"];
2401 [label="considerCallingConvention: false 360596"];
2402 [label="false 360597"];
2403 [label="considerRefKindDifferences: false 360598"];
2404 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360599"];
2405 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360600"];
2406 [label="param MemberSignatureComparer(bool considerName) 360601"];
2407 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360602"];
2408 [label="param MemberSignatureComparer(bool considerReturnType) 360603"];
2409 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360604"];
2410 [label="param MemberSignatureComparer(bool considerCallingConvention) 360605"];
2411 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360606"];
2412 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360607"];
2413 [label="param MemberSignatureComparer(this) 360608"];
2414 [label="_considerName 360609"];
2415 [label="_considerExplicitlyImplementedInterfaces 360610"];
2416 [label="_considerReturnType 360611"];
2417 [label="_considerTypeConstraints 360612"];
2418 [label="_considerCallingConvention 360613"];
2419 [label="_considerRefKindDifferences 360614"];
2420 [label="_typeComparison 360615"];
2421 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360616"];
2422 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360617"];
2423 [label="_considerName 360618"];
2424 [label="_considerExplicitlyImplementedInterfaces 360619"];
2425 [label="_considerReturnType 360620"];
2426 [label="_considerTypeConstraints 360621"];
2427 [label="_considerCallingConvention 360622"];
2428 [label="_considerRefKindDifferences 360623"];
2429 [label="_typeComparison 360624"];
2430 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360625"];
2431 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360626"];
2432 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360627"];
2433 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 360628"];
2434 [label="_typeComparison 360629"];
2435 [label="DuplicateSourceComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360630"];
2436 [label="true 360631"];
2437 [label="considerName: true 360632"];
2438 [label="true 360633"];
2439 [label="considerExplicitlyImplementedInterfaces: true 360634"];
2440 [label="false 360635"];
2441 [label="considerReturnType: false 360636"];
2442 [label="false 360637"];
2443 [label="considerTypeConstraints: false 360638"];
2444 [label="false 360639"];
2445 [label="considerCallingConvention: false 360640"];
2446 [label="true 360641"];
2447 [label="considerRefKindDifferences: true 360642"];
2448 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360643"];
2449 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360644"];
2450 [label="param MemberSignatureComparer(bool considerName) 360645"];
2451 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360646"];
2452 [label="param MemberSignatureComparer(bool considerReturnType) 360647"];
2453 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360648"];
2454 [label="param MemberSignatureComparer(bool considerCallingConvention) 360649"];
2455 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360650"];
2456 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360651"];
2457 [label="param MemberSignatureComparer(this) 360652"];
2458 [label="_considerName 360653"];
2459 [label="_considerExplicitlyImplementedInterfaces 360654"];
2460 [label="_considerReturnType 360655"];
2461 [label="_considerTypeConstraints 360656"];
2462 [label="_considerCallingConvention 360657"];
2463 [label="_considerRefKindDifferences 360658"];
2464 [label="_typeComparison 360659"];
2465 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360660"];
2466 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360661"];
2467 [label="_considerName 360662"];
2468 [label="_considerExplicitlyImplementedInterfaces 360663"];
2469 [label="_considerReturnType 360664"];
2470 [label="_considerTypeConstraints 360665"];
2471 [label="_considerCallingConvention 360666"];
2472 [label="_considerRefKindDifferences 360667"];
2473 [label="_typeComparison 360668"];
2474 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360669"];
2475 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360670"];
2476 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360671"];
2477 [label="RecordAPISignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360672"];
2478 [label="true 360673"];
2479 [label="considerName: true 360674"];
2480 [label="true 360675"];
2481 [label="considerExplicitlyImplementedInterfaces: true 360676"];
2482 [label="false 360677"];
2483 [label="considerReturnType: false 360678"];
2484 [label="false 360679"];
2485 [label="considerTypeConstraints: false 360680"];
2486 [label="false 360681"];
2487 [label="considerCallingConvention: false 360682"];
2488 [label="true 360683"];
2489 [label="considerRefKindDifferences: true 360684"];
2490 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360685"];
2491 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360686"];
2492 [label="param MemberSignatureComparer(bool considerName) 360687"];
2493 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360688"];
2494 [label="param MemberSignatureComparer(bool considerReturnType) 360689"];
2495 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360690"];
2496 [label="param MemberSignatureComparer(bool considerCallingConvention) 360691"];
2497 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360692"];
2498 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360693"];
2499 [label="param MemberSignatureComparer(this) 360694"];
2500 [label="_considerName 360695"];
2501 [label="_considerExplicitlyImplementedInterfaces 360696"];
2502 [label="_considerReturnType 360697"];
2503 [label="_considerTypeConstraints 360698"];
2504 [label="_considerCallingConvention 360699"];
2505 [label="_considerRefKindDifferences 360700"];
2506 [label="_typeComparison 360701"];
2507 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360702"];
2508 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360703"];
2509 [label="_considerName 360704"];
2510 [label="_considerExplicitlyImplementedInterfaces 360705"];
2511 [label="_considerReturnType 360706"];
2512 [label="_considerTypeConstraints 360707"];
2513 [label="_considerCallingConvention 360708"];
2514 [label="_considerRefKindDifferences 360709"];
2515 [label="_typeComparison 360710"];
2516 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360711"];
2517 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360712"];
2518 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360713"];
2519 [label="PartialMethodsComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360714"];
2520 [label="true 360715"];
2521 [label="considerName: true 360716"];
2522 [label="false 360717"];
2523 [label="considerExplicitlyImplementedInterfaces: false 360718"];
2524 [label="false 360719"];
2525 [label="considerReturnType: false 360720"];
2526 [label="false 360721"];
2527 [label="considerTypeConstraints: false 360722"];
2528 [label="false 360723"];
2529 [label="considerCallingConvention: false 360724"];
2530 [label="true 360725"];
2531 [label="considerRefKindDifferences: true 360726"];
2532 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360727"];
2533 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360728"];
2534 [label="param MemberSignatureComparer(bool considerName) 360729"];
2535 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360730"];
2536 [label="param MemberSignatureComparer(bool considerReturnType) 360731"];
2537 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360732"];
2538 [label="param MemberSignatureComparer(bool considerCallingConvention) 360733"];
2539 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360734"];
2540 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360735"];
2541 [label="param MemberSignatureComparer(this) 360736"];
2542 [label="_considerName 360737"];
2543 [label="_considerExplicitlyImplementedInterfaces 360738"];
2544 [label="_considerReturnType 360739"];
2545 [label="_considerTypeConstraints 360740"];
2546 [label="_considerCallingConvention 360741"];
2547 [label="_considerRefKindDifferences 360742"];
2548 [label="_typeComparison 360743"];
2549 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360744"];
2550 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360745"];
2551 [label="_considerName 360746"];
2552 [label="_considerExplicitlyImplementedInterfaces 360747"];
2553 [label="_considerReturnType 360748"];
2554 [label="_considerTypeConstraints 360749"];
2555 [label="_considerCallingConvention 360750"];
2556 [label="_considerRefKindDifferences 360751"];
2557 [label="_typeComparison 360752"];
2558 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360753"];
2559 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360754"];
2560 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360755"];
2561 [label="CSharpOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360756"];
2562 [label="true 360757"];
2563 [label="considerName: true 360758"];
2564 [label="false 360759"];
2565 [label="considerExplicitlyImplementedInterfaces: false 360760"];
2566 [label="true 360761"];
2567 [label="considerReturnType: true 360762"];
2568 [label="false 360763"];
2569 [label="considerTypeConstraints: false 360764"];
2570 [label="false 360765"];
2571 [label="considerCallingConvention: false 360766"];
2572 [label="false 360767"];
2573 [label="considerRefKindDifferences: false 360768"];
2574 [label="TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 360769"];
2575 [label="typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 360770"];
2576 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 360771"];
2577 [label="param MemberSignatureComparer(bool considerName) 360772"];
2578 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360773"];
2579 [label="param MemberSignatureComparer(bool considerReturnType) 360774"];
2580 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360775"];
2581 [label="param MemberSignatureComparer(bool considerCallingConvention) 360776"];
2582 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360777"];
2583 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360778"];
2584 [label="param MemberSignatureComparer(this) 360779"];
2585 [label="_considerName 360780"];
2586 [label="_considerExplicitlyImplementedInterfaces 360781"];
2587 [label="_considerReturnType 360782"];
2588 [label="_considerTypeConstraints 360783"];
2589 [label="_considerCallingConvention 360784"];
2590 [label="_considerRefKindDifferences 360785"];
2591 [label="_typeComparison 360786"];
2592 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360787"];
2593 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360788"];
2594 [label="_considerName 360789"];
2595 [label="_considerExplicitlyImplementedInterfaces 360790"];
2596 [label="_considerReturnType 360791"];
2597 [label="_considerTypeConstraints 360792"];
2598 [label="_considerCallingConvention 360793"];
2599 [label="_considerRefKindDifferences 360794"];
2600 [label="_typeComparison 360795"];
2601 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360796"];
2602 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360797"];
2603 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360798"];
2604 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 360799"];
2605 [label="_typeComparison 360800"];
2606 [label="CSharpWithTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 360801"];
2607 [label="true 360802"];
2608 [label="considerName: true 360803"];
2609 [label="false 360804"];
2610 [label="considerExplicitlyImplementedInterfaces: false 360805"];
2611 [label="true 360806"];
2612 [label="considerReturnType: true 360807"];
2613 [label="false 360808"];
2614 [label="considerTypeConstraints: false 360809"];
2615 [label="false 360810"];
2616 [label="considerCallingConvention: false 360811"];
2617 [label="false 360812"];
2618 [label="considerRefKindDifferences: false 360813"];
2619 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360814"];
2620 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360815"];
2621 [label="param MemberSignatureComparer(bool considerName) 360816"];
2622 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360817"];
2623 [label="param MemberSignatureComparer(bool considerReturnType) 360818"];
2624 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360819"];
2625 [label="param MemberSignatureComparer(bool considerCallingConvention) 360820"];
2626 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360821"];
2627 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360822"];
2628 [label="param MemberSignatureComparer(this) 360823"];
2629 [label="_considerName 360824"];
2630 [label="_considerExplicitlyImplementedInterfaces 360825"];
2631 [label="_considerReturnType 360826"];
2632 [label="_considerTypeConstraints 360827"];
2633 [label="_considerCallingConvention 360828"];
2634 [label="_considerRefKindDifferences 360829"];
2635 [label="_typeComparison 360830"];
2636 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360831"];
2637 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360832"];
2638 [label="_considerName 360833"];
2639 [label="_considerExplicitlyImplementedInterfaces 360834"];
2640 [label="_considerReturnType 360835"];
2641 [label="_considerTypeConstraints 360836"];
2642 [label="_considerCallingConvention 360837"];
2643 [label="_considerRefKindDifferences 360838"];
2644 [label="_typeComparison 360839"];
2645 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360840"];
2646 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360841"];
2647 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360842"];
2648 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 360843"];
2649 [label="_typeComparison 360844"];
2650 [label="CSharpWithoutTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360845"];
2651 [label="false 360846"];
2652 [label="considerName: false 360847"];
2653 [label="false 360848"];
2654 [label="considerExplicitlyImplementedInterfaces: false 360849"];
2655 [label="false 360850"];
2656 [label="considerReturnType: false 360851"];
2657 [label="false 360852"];
2658 [label="considerTypeConstraints: false 360853"];
2659 [label="false 360854"];
2660 [label="considerCallingConvention: false 360855"];
2661 [label="true 360856"];
2662 [label="considerRefKindDifferences: true 360857"];
2663 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 360858"];
2664 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360859"];
2665 [label="param MemberSignatureComparer(bool considerName) 360860"];
2666 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360861"];
2667 [label="param MemberSignatureComparer(bool considerReturnType) 360862"];
2668 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360863"];
2669 [label="param MemberSignatureComparer(bool considerCallingConvention) 360864"];
2670 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360865"];
2671 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360866"];
2672 [label="param MemberSignatureComparer(this) 360867"];
2673 [label="_considerName 360868"];
2674 [label="_considerExplicitlyImplementedInterfaces 360869"];
2675 [label="_considerReturnType 360870"];
2676 [label="_considerTypeConstraints 360871"];
2677 [label="_considerCallingConvention 360872"];
2678 [label="_considerRefKindDifferences 360873"];
2679 [label="_typeComparison 360874"];
2680 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360875"];
2681 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360876"];
2682 [label="_considerName 360877"];
2683 [label="_considerExplicitlyImplementedInterfaces 360878"];
2684 [label="_considerReturnType 360879"];
2685 [label="_considerTypeConstraints 360880"];
2686 [label="_considerCallingConvention 360881"];
2687 [label="_considerRefKindDifferences 360882"];
2688 [label="_typeComparison 360883"];
2689 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360884"];
2690 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360885"];
2691 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360886"];
2692 [label="CSharpAccessorOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 360887"];
2693 [label="true 360888"];
2694 [label="considerName: true 360889"];
2695 [label="false 360890"];
2696 [label="considerExplicitlyImplementedInterfaces: false 360891"];
2697 [label="true 360892"];
2698 [label="considerReturnType: true 360893"];
2699 [label="false 360894"];
2700 [label="considerTypeConstraints: false 360895"];
2701 [label="false 360896"];
2702 [label="considerCallingConvention: false 360897"];
2703 [label="true 360898"];
2704 [label="considerRefKindDifferences: true 360899"];
2705 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 360900"];
2706 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 360901"];
2707 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 360902"];
2708 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 360903"];
2709 [label="param MemberSignatureComparer(bool considerName) 360904"];
2710 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360905"];
2711 [label="param MemberSignatureComparer(bool considerReturnType) 360906"];
2712 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360907"];
2713 [label="param MemberSignatureComparer(bool considerCallingConvention) 360908"];
2714 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360909"];
2715 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360910"];
2716 [label="param MemberSignatureComparer(this) 360911"];
2717 [label="_considerName 360912"];
2718 [label="_considerExplicitlyImplementedInterfaces 360913"];
2719 [label="_considerReturnType 360914"];
2720 [label="_considerTypeConstraints 360915"];
2721 [label="_considerCallingConvention 360916"];
2722 [label="_considerRefKindDifferences 360917"];
2723 [label="_typeComparison 360918"];
2724 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360919"];
2725 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360920"];
2726 [label="_considerName 360921"];
2727 [label="_considerExplicitlyImplementedInterfaces 360922"];
2728 [label="_considerReturnType 360923"];
2729 [label="_considerTypeConstraints 360924"];
2730 [label="_considerCallingConvention 360925"];
2731 [label="_considerRefKindDifferences 360926"];
2732 [label="_typeComparison 360927"];
2733 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360928"];
2734 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360929"];
2735 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360930"];
2736 [label="CSharpCustomModifierOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 360931"];
2737 [label="false 360932"];
2738 [label="considerName: false 360933"];
2739 [label="false 360934"];
2740 [label="considerExplicitlyImplementedInterfaces: false 360935"];
2741 [label="false 360936"];
2742 [label="considerReturnType: false 360937"];
2743 [label="false 360938"];
2744 [label="considerTypeConstraints: false 360939"];
2745 [label="false 360940"];
2746 [label="considerCallingConvention: false 360941"];
2747 [label="false 360942"];
2748 [label="considerRefKindDifferences: false 360943"];
2749 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 360944"];
2750 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 360945"];
2751 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 360946"];
2752 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 360947"];
2753 [label="param MemberSignatureComparer(bool considerName) 360948"];
2754 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360949"];
2755 [label="param MemberSignatureComparer(bool considerReturnType) 360950"];
2756 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360951"];
2757 [label="param MemberSignatureComparer(bool considerCallingConvention) 360952"];
2758 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360953"];
2759 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 360954"];
2760 [label="param MemberSignatureComparer(this) 360955"];
2761 [label="_considerName 360956"];
2762 [label="_considerExplicitlyImplementedInterfaces 360957"];
2763 [label="_considerReturnType 360958"];
2764 [label="_considerTypeConstraints 360959"];
2765 [label="_considerCallingConvention 360960"];
2766 [label="_considerRefKindDifferences 360961"];
2767 [label="_typeComparison 360962"];
2768 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360963"];
2769 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 360964"];
2770 [label="_considerName 360965"];
2771 [label="_considerExplicitlyImplementedInterfaces 360966"];
2772 [label="_considerReturnType 360967"];
2773 [label="_considerTypeConstraints 360968"];
2774 [label="_considerCallingConvention 360969"];
2775 [label="_considerRefKindDifferences 360970"];
2776 [label="_typeComparison 360971"];
2777 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360972"];
2778 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 360973"];
2779 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 360974"];
2780 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 360975"];
2781 [label="_typeComparison 360976"];
2782 [label="SloppyOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 360977"];
2783 [label="true 360978"];
2784 [label="considerName: true 360979"];
2785 [label="false 360980"];
2786 [label="considerExplicitlyImplementedInterfaces: false 360981"];
2787 [label="true 360982"];
2788 [label="considerReturnType: true 360983"];
2789 [label="false 360984"];
2790 [label="considerTypeConstraints: false 360985"];
2791 [label="true 360986"];
2792 [label="considerCallingConvention: true 360987"];
2793 [label="false 360988"];
2794 [label="considerRefKindDifferences: false 360989"];
2795 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 360990"];
2796 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 360991"];
2797 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 360992"];
2798 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 360993"];
2799 [label="param MemberSignatureComparer(bool considerName) 360994"];
2800 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 360995"];
2801 [label="param MemberSignatureComparer(bool considerReturnType) 360996"];
2802 [label="param MemberSignatureComparer(bool considerTypeConstraints) 360997"];
2803 [label="param MemberSignatureComparer(bool considerCallingConvention) 360998"];
2804 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 360999"];
2805 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 361000"];
2806 [label="param MemberSignatureComparer(this) 361001"];
2807 [label="_considerName 361002"];
2808 [label="_considerExplicitlyImplementedInterfaces 361003"];
2809 [label="_considerReturnType 361004"];
2810 [label="_considerTypeConstraints 361005"];
2811 [label="_considerCallingConvention 361006"];
2812 [label="_considerRefKindDifferences 361007"];
2813 [label="_typeComparison 361008"];
2814 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361009"];
2815 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361010"];
2816 [label="_considerName 361011"];
2817 [label="_considerExplicitlyImplementedInterfaces 361012"];
2818 [label="_considerReturnType 361013"];
2819 [label="_considerTypeConstraints 361014"];
2820 [label="_considerCallingConvention 361015"];
2821 [label="_considerRefKindDifferences 361016"];
2822 [label="_typeComparison 361017"];
2823 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361018"];
2824 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361019"];
2825 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 361020"];
2826 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 361021"];
2827 [label="_typeComparison 361022"];
2828 [label="RuntimeSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361023"];
2829 [label="true 361024"];
2830 [label="considerName: true 361025"];
2831 [label="false 361026"];
2832 [label="considerExplicitlyImplementedInterfaces: false 361027"];
2833 [label="true 361028"];
2834 [label="considerReturnType: true 361029"];
2835 [label="false 361030"];
2836 [label="considerTypeConstraints: false 361031"];
2837 [label="true 361032"];
2838 [label="considerCallingConvention: true 361033"];
2839 [label="true 361034"];
2840 [label="considerRefKindDifferences: true 361035"];
2841 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361036"];
2842 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361037"];
2843 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361038"];
2844 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361039"];
2845 [label="param MemberSignatureComparer(bool considerName) 361040"];
2846 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 361041"];
2847 [label="param MemberSignatureComparer(bool considerReturnType) 361042"];
2848 [label="param MemberSignatureComparer(bool considerTypeConstraints) 361043"];
2849 [label="param MemberSignatureComparer(bool considerCallingConvention) 361044"];
2850 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 361045"];
2851 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 361046"];
2852 [label="param MemberSignatureComparer(this) 361047"];
2853 [label="_considerName 361048"];
2854 [label="_considerExplicitlyImplementedInterfaces 361049"];
2855 [label="_considerReturnType 361050"];
2856 [label="_considerTypeConstraints 361051"];
2857 [label="_considerCallingConvention 361052"];
2858 [label="_considerRefKindDifferences 361053"];
2859 [label="_typeComparison 361054"];
2860 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361055"];
2861 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361056"];
2862 [label="_considerName 361057"];
2863 [label="_considerExplicitlyImplementedInterfaces 361058"];
2864 [label="_considerReturnType 361059"];
2865 [label="_considerTypeConstraints 361060"];
2866 [label="_considerCallingConvention 361061"];
2867 [label="_considerRefKindDifferences 361062"];
2868 [label="_typeComparison 361063"];
2869 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361064"];
2870 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361065"];
2871 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 361066"];
2872 [label="RuntimePlusRefOutSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361067"];
2873 [label="true 361068"];
2874 [label="considerName: true 361069"];
2875 [label="true 361070"];
2876 [label="considerExplicitlyImplementedInterfaces: true 361071"];
2877 [label="true 361072"];
2878 [label="considerReturnType: true 361073"];
2879 [label="false 361074"];
2880 [label="considerTypeConstraints: false 361075"];
2881 [label="true 361076"];
2882 [label="considerCallingConvention: true 361077"];
2883 [label="false 361078"];
2884 [label="considerRefKindDifferences: false 361079"];
2885 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361080"];
2886 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361081"];
2887 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361082"];
2888 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361083"];
2889 [label="param MemberSignatureComparer(bool considerName) 361084"];
2890 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 361085"];
2891 [label="param MemberSignatureComparer(bool considerReturnType) 361086"];
2892 [label="param MemberSignatureComparer(bool considerTypeConstraints) 361087"];
2893 [label="param MemberSignatureComparer(bool considerCallingConvention) 361088"];
2894 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 361089"];
2895 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 361090"];
2896 [label="param MemberSignatureComparer(this) 361091"];
2897 [label="_considerName 361092"];
2898 [label="_considerExplicitlyImplementedInterfaces 361093"];
2899 [label="_considerReturnType 361094"];
2900 [label="_considerTypeConstraints 361095"];
2901 [label="_considerCallingConvention 361096"];
2902 [label="_considerRefKindDifferences 361097"];
2903 [label="_typeComparison 361098"];
2904 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361099"];
2905 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361100"];
2906 [label="_considerName 361101"];
2907 [label="_considerExplicitlyImplementedInterfaces 361102"];
2908 [label="_considerReturnType 361103"];
2909 [label="_considerTypeConstraints 361104"];
2910 [label="_considerCallingConvention 361105"];
2911 [label="_considerRefKindDifferences 361106"];
2912 [label="_typeComparison 361107"];
2913 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361108"];
2914 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361109"];
2915 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 361110"];
2916 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 361111"];
2917 [label="_typeComparison 361112"];
2918 [label="RuntimeImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361113"];
2919 [label="true 361114"];
2920 [label="considerName: true 361115"];
2921 [label="true 361116"];
2922 [label="considerExplicitlyImplementedInterfaces: true 361117"];
2923 [label="true 361118"];
2924 [label="considerReturnType: true 361119"];
2925 [label="true 361120"];
2926 [label="considerTypeConstraints: true 361121"];
2927 [label="true 361122"];
2928 [label="considerCallingConvention: true 361123"];
2929 [label="true 361124"];
2930 [label="considerRefKindDifferences: true 361125"];
2931 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361126"];
2932 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361127"];
2933 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361128"];
2934 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361129"];
2935 [label="param MemberSignatureComparer(bool considerName) 361130"];
2936 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 361131"];
2937 [label="param MemberSignatureComparer(bool considerReturnType) 361132"];
2938 [label="param MemberSignatureComparer(bool considerTypeConstraints) 361133"];
2939 [label="param MemberSignatureComparer(bool considerCallingConvention) 361134"];
2940 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 361135"];
2941 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 361136"];
2942 [label="param MemberSignatureComparer(this) 361137"];
2943 [label="_considerName 361138"];
2944 [label="_considerExplicitlyImplementedInterfaces 361139"];
2945 [label="_considerReturnType 361140"];
2946 [label="_considerTypeConstraints 361141"];
2947 [label="_considerCallingConvention 361142"];
2948 [label="_considerRefKindDifferences 361143"];
2949 [label="_typeComparison 361144"];
2950 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361145"];
2951 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361146"];
2952 [label="_considerName 361147"];
2953 [label="_considerExplicitlyImplementedInterfaces 361148"];
2954 [label="_considerReturnType 361149"];
2955 [label="_considerTypeConstraints 361150"];
2956 [label="_considerCallingConvention 361151"];
2957 [label="_considerRefKindDifferences 361152"];
2958 [label="_typeComparison 361153"];
2959 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361154"];
2960 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361155"];
2961 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 361156"];
2962 [label="CSharpSignatureAndConstraintsAndReturnTypeComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361157"];
2963 [label="true 361158"];
2964 [label="considerName: true 361159"];
2965 [label="false 361160"];
2966 [label="considerExplicitlyImplementedInterfaces: false 361161"];
2967 [label="true 361162"];
2968 [label="considerReturnType: true 361163"];
2969 [label="false 361164"];
2970 [label="considerTypeConstraints: false 361165"];
2971 [label="true 361166"];
2972 [label="considerCallingConvention: true 361167"];
2973 [label="true 361168"];
2974 [label="considerRefKindDifferences: true 361169"];
2975 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361170"];
2976 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361171"];
2977 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 361172"];
2978 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361173"];
2979 [label="param MemberSignatureComparer(bool considerName) 361174"];
2980 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 361175"];
2981 [label="param MemberSignatureComparer(bool considerReturnType) 361176"];
2982 [label="param MemberSignatureComparer(bool considerTypeConstraints) 361177"];
2983 [label="param MemberSignatureComparer(bool considerCallingConvention) 361178"];
2984 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 361179"];
2985 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 361180"];
2986 [label="param MemberSignatureComparer(this) 361181"];
2987 [label="_considerName 361182"];
2988 [label="_considerExplicitlyImplementedInterfaces 361183"];
2989 [label="_considerReturnType 361184"];
2990 [label="_considerTypeConstraints 361185"];
2991 [label="_considerCallingConvention 361186"];
2992 [label="_considerRefKindDifferences 361187"];
2993 [label="_typeComparison 361188"];
2994 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361189"];
2995 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361190"];
2996 [label="_considerName 361191"];
2997 [label="_considerExplicitlyImplementedInterfaces 361192"];
2998 [label="_considerReturnType 361193"];
2999 [label="_considerTypeConstraints 361194"];
3000 [label="_considerCallingConvention 361195"];
3001 [label="_considerRefKindDifferences 361196"];
3002 [label="_typeComparison 361197"];
3003 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361198"];
3004 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361199"];
3005 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 361200"];
3006 [label="RetargetedExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 361201"];
3007 [label="false 361202"];
3008 [label="considerName: false 361203"];
3009 [label="false 361204"];
3010 [label="considerExplicitlyImplementedInterfaces: false 361205"];
3011 [label="false 361206"];
3012 [label="considerReturnType: false 361207"];
3013 [label="false 361208"];
3014 [label="considerTypeConstraints: false 361209"];
3015 [label="false 361210"];
3016 [label="considerCallingConvention: false 361211"];
3017 [label="true 361212"];
3018 [label="considerRefKindDifferences: true 361213"];
3019 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361214"];
3020 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 361215"];
3021 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 361216"];
3022 [label="new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 361217"];
3023 [label="param MemberSignatureComparer(bool considerName) 361218"];
3024 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 361219"];
3025 [label="param MemberSignatureComparer(bool considerReturnType) 361220"];
3026 [label="param MemberSignatureComparer(bool considerTypeConstraints) 361221"];
3027 [label="param MemberSignatureComparer(bool considerCallingConvention) 361222"];
3028 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 361223"];
3029 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 361224"];
3030 [label="param MemberSignatureComparer(this) 361225"];
3031 [label="_considerName 361226"];
3032 [label="_considerExplicitlyImplementedInterfaces 361227"];
3033 [label="_considerReturnType 361228"];
3034 [label="_considerTypeConstraints 361229"];
3035 [label="_considerCallingConvention 361230"];
3036 [label="_considerRefKindDifferences 361231"];
3037 [label="_typeComparison 361232"];
3038 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361233"];
3039 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 361234"];
3040 [label="_considerName 361235"];
3041 [label="_considerExplicitlyImplementedInterfaces 361236"];
3042 [label="_considerReturnType 361237"];
3043 [label="_considerTypeConstraints 361238"];
3044 [label="_considerCallingConvention 361239"];
3045 [label="_considerRefKindDifferences 361240"];
3046 [label="_typeComparison 361241"];
3047 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361242"];
3048 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 361243"];
3049 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 361244"];
3050 [label="CrefComparer = new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 361245"];
3051 [label="MemberSignatureComparer.RecordAPISignatureComparer 361246"];
3052 [label="PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 361247"];
3053 [label="s_duplicateRecordMemberSignatureDictionary =\n            PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 361248"];
3054 [label="EmptyComparer.Instance 361249"];
3055 [label="new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 361250"];
3056 [label="s_emptyTypeMembers = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 361251"];
3057 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 361252"];
3058 [label="ReportBadReturn =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 361253"];
3059 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 361254"];
3060 [label="ReportBadParameter =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 361255"];
3061 [label="containingSymbol 361256"];
3062 [label="declaration 361257"];
3063 [label="diagnostics 361258"];
3064 [label="tupleData 361259"];
3065 [label="param SourceNamedTypeSymbol(this) 361260"];
3066 [label="param SourceMemberContainerTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 361261"];
3067 [label="param SourceMemberContainerTypeSymbol(MergedTypeDeclaration declaration) 361262"];
3068 [label="param SourceMemberContainerTypeSymbol(DiagnosticBag diagnostics) 361263"];
3069 [label="param SourceMemberContainerTypeSymbol(TupleExtraData? tupleData = null) 361264"];
3070 [label="param SourceMemberContainerTypeSymbol(this) 361265"];
3071 [label="symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 361266"];
3072 [label="IsInstanceFieldOrEvent = symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 361267"];
3073 [label="type => !type.HasType 361268"];
3074 [label="TypeWithAnnotationsIsNullFunction = type => !type.HasType 361269"];
3075 [label="type => type.HasType && type.Type.IsErrorType() 361270"];
3076 [label="TypeWithAnnotationsIsErrorType = type => type.HasType && type.Type.IsErrorType() 361271"];
3077 [label="8 361272"];
3078 [label="ValueTupleRestPosition = 8 361273"];
3079 [label="1 361274"];
3080 [label="ValueTupleRestPosition - 1 361275"];
3081 [label="ValueTupleRestIndex = ValueTupleRestPosition - 1 361276"];
3082 [label="'ValueTuple' 361277"];
3083 [label="ValueTupleTypeName = 'ValueTuple' 361278"];
3084 [label="'Rest' 361279"];
3085 [label="ValueTupleRestFieldName = 'Rest' 361280"];
3086 [label="{\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 361281"];
3087 [label="tupleTypes = {\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 361282"];
3088 [label="{\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 361283"];
3089 [label="tupleCtors = {\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 361284"];
3090 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361285"];
3091 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 } 361286"];
3092 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 } 361287"];
3093 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 } 361288"];
3094 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 } 361289"];
3095 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 } 361290"];
3096 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 } 361291"];
3097 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 } 361292"];
3098 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest } 361293"];
3099 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361294"];
3100 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361295"];
3101 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361296"];
3102 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361297"];
3103 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361298"];
3104 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361299"];
3105 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361300"];
3106 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361301"];
3107 [label="tupleMembers = new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 361302"];
3108 [label="tupleData 361303"];
3109 [label="param SourceMemberContainerTypeSymbol(this) 361304"];
3110 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 361305"];
3111 [label="param NamedTypeSymbol(this) 361306"];
3112 [label="'<invalid-global-code>' 361307"];
3113 [label="ImplicitTypeName = '<invalid-global-code>' 361308"];
3114 [label="0 361309"];
3115 [label="TypeCompareKind.ConsiderEverything 361310"];
3116 [label="new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 361311"];
3117 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361312"];
3118 [label="param SymbolEqualityComparer(this) 361313"];
3119 [label="_comparison 361314"];
3120 [label="_comparison 361315"];
3121 [label="ConsiderEverything = new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 361316"];
3122 [label="TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361317"];
3123 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361318"];
3124 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361319"];
3125 [label="param SymbolEqualityComparer(this) 361320"];
3126 [label="_comparison 361321"];
3127 [label="_comparison 361322"];
3128 [label="IgnoringTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361323"];
3129 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361324"];
3130 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361325"];
3131 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361326"];
3132 [label="param SymbolEqualityComparer(this) 361327"];
3133 [label="_comparison 361328"];
3134 [label="_comparison 361329"];
3135 [label="IgnoringDynamicTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361330"];
3136 [label="TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 361331"];
3137 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361332"];
3138 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361333"];
3139 [label="param SymbolEqualityComparer(this) 361334"];
3140 [label="_comparison 361335"];
3141 [label="_comparison 361336"];
3142 [label="IgnoringNullable = new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361337"];
3143 [label="TypeCompareKind.ObliviousNullableModifierMatchesAny 361338"];
3144 [label="new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 361339"];
3145 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361340"];
3146 [label="param SymbolEqualityComparer(this) 361341"];
3147 [label="_comparison 361342"];
3148 [label="_comparison 361343"];
3149 [label="ObliviousNullableModifierMatchesAny = new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 361344"];
3150 [label="TypeCompareKind.AllIgnoreOptions 361345"];
3151 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 361346"];
3152 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361347"];
3153 [label="param SymbolEqualityComparer(this) 361348"];
3154 [label="_comparison 361349"];
3155 [label="_comparison 361350"];
3156 [label="AllIgnoreOptions = new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 361351"];
3157 [label="TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 361352"];
3158 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 361353"];
3159 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361354"];
3160 [label="param SymbolEqualityComparer(this) 361355"];
3161 [label="_comparison 361356"];
3162 [label="_comparison 361357"];
3163 [label="AllIgnoreOptionsPlusNullableWithUnknownMatchesAny =\n                                                                  new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 361358"];
3164 [label="TypeCompareKind.CLRSignatureCompareOptions 361359"];
3165 [label="new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 361360"];
3166 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 361361"];
3167 [label="param SymbolEqualityComparer(this) 361362"];
3168 [label="_comparison 361363"];
3169 [label="_comparison 361364"];
3170 [label="CLRSignature = new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 361365"];
3171 [label="SymbolEqualityComparer.CLRSignature 361366"];
3172 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 361367"];
3173 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 361368"];
3174 [label="EmptyInterfacesAndTheirBaseInterfaces =\n                                                new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 361369"];
3175 [label="new InterfaceInfo() 361370"];
3176 [label="param InterfaceInfo(this) 361371"];
3177 [label="interfacesAndTheirBaseInterfaces 361372"];
3178 [label="_implementationForInterfaceMemberMap 361373"];
3179 [label="explicitInterfaceImplementationMap 361374"];
3180 [label="s_noInterfaces = new InterfaceInfo() 361375"];
3181 [label="(type) => type.SetUnknownNullabilityForReferenceTypes() 361376"];
3182 [label="s_setUnknownNullability =\n            (type) => type.SetUnknownNullabilityForReferenceTypes() 361377"];
3183 [label="param NamedTypeSymbol(this) 361378"];
3184 [label="param TypeSymbol(this) 361379"];
3185 [label="param TypeSymbol(this) 361380"];
3186 [label="_lazyAbstractMembers 361381"];
3187 [label="_lazyInterfaceInfo 361382"];
3188 [label="_lazyAdapter 361383"];
3189 [label="_hasNoBaseCycles 361384"];
3190 [label="_lazyTupleData 361385"];
3191 [label="_lazyTupleData 361386"];
3192 [label="_declModifiers 361387"];
3193 [label="_containingSymbol 361388"];
3194 [label="declaration 361389"];
3195 [label="new DeclaredMembersAndInitializers() 361390"];
3196 [label="param DeclaredMembersAndInitializers(this) 361391"];
3197 [label="HaveIndexers 361392"];
3198 [label="RecordDeclarationWithParameters 361393"];
3199 [label="RecordPrimaryConstructor 361394"];
3200 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 361395"];
3201 [label="IsNullableEnabledForInstanceConstructorsAndFields 361396"];
3202 [label="IsNullableEnabledForStaticConstructorsAndFields 361397"];
3203 [label="UninitializedSentinel = new DeclaredMembersAndInitializers() 361398"];
3204 [label="_lazyDeclaredMembersAndInitializers = DeclaredMembersAndInitializers.UninitializedSentinel 361399"];
3205 [label="_lazyMembersAndInitializers 361400"];
3206 [label="_lazyMembersDictionary 361401"];
3207 [label="_lazyEarlyAttributeDecodingMembersDictionary 361402"];
3208 [label="_lazyTypeMembers 361403"];
3209 [label="_lazyKnownCircularStruct 361404"];
3210 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 361405"];
3211 [label="_lazyContainsExtensionMethods 361406"];
3212 [label="_lazyAnyMemberHasAttributes 361407"];
3213 [label="_containingSymbol 361408"];
3214 [label="this.declaration 361409"];
3215 [label="TypeKind typeKind = declaration.Kind.ToTypeKind(); 361410"];
3216 [label="declaration.Kind.ToTypeKind() 361411"];
3217 [label="param ToTypeKind(this DeclarationKind kind) 361412"];
3218 [label="switch (kind)\n            {\n                case DeclarationKind.Class:\n                case DeclarationKind.Script:\n                case DeclarationKind.ImplicitClass:\n                case DeclarationKind.SimpleProgram:\n                case DeclarationKind.Record:\n                    return TypeKind.Class;\n\n                case DeclarationKind.Submission:\n                    return TypeKind.Submission;\n\n                case DeclarationKind.Delegate:\n                    return TypeKind.Delegate;\n\n                case DeclarationKind.Enum:\n                    return TypeKind.Enum;\n\n                case DeclarationKind.Interface:\n                    return TypeKind.Interface;\n\n                case DeclarationKind.Struct:\n                    return TypeKind.Struct;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 361413"];
3219 [label="return TypeKind.Enum; 361414"];
3220 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 361415"];
3221 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 361416"];
3222 [label="MakeModifiers(typeKind, diagnostics) 361417"];
3223 [label="param MakeModifiers(TypeKind typeKind) 361418"];
3224 [label="param MakeModifiers(DiagnosticBag diagnostics) 361419"];
3225 [label="param MakeModifiers(this) 361420"];
3226 [label="this.ContainingSymbol 361421"];
3227 [label="get\n            {\n                return _containingSymbol;\n            } 361422"];
3228 [label="return _containingSymbol; 361423"];
3229 [label="Symbol containingSymbol = this.ContainingSymbol; 361424"];
3230 [label="DeclarationModifiers defaultAccess; 361425"];
3231 [label="var allowedModifiers = DeclarationModifiers.AccessibilityMask; 361426"];
3232 [label="containingSymbol.Kind 361427"];
3233 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 361428"];
3234 [label="return SymbolKind.Namespace; 361429"];
3235 [label="if (containingSymbol.Kind == SymbolKind.Namespace)\n            {\n                defaultAccess = DeclarationModifiers.Internal;\n            }\n            else\n            {\n                allowedModifiers |= DeclarationModifiers.New;\n\n                if (((NamedTypeSymbol)containingSymbol).IsInterface)\n                {\n                    defaultAccess = DeclarationModifiers.Public;\n                }\n                else\n                {\n                    defaultAccess = DeclarationModifiers.Private;\n                }\n            } 361430"];
3236 [label="defaultAccess = DeclarationModifiers.Internal; 361431"];
3237 [label="switch (typeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Submission:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe;\n\n                    if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    }\n\n                    break;\n                case TypeKind.Struct:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Interface:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Delegate:\n                    allowedModifiers |= DeclarationModifiers.Unsafe;\n                    break;\n            } 361432"];
3238 [label="bool modifierErrors; 361433"];
3239 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 361434"];
3240 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 361435"];
3241 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 361436"];
3242 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 361437"];
3243 [label="MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors) 361438"];
3244 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers defaultAccess) 361439"];
3245 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers allowedModifiers) 361440"];
3246 [label="param MakeAndCheckTypeModifiers(DiagnosticBag diagnostics) 361441"];
3247 [label="param MakeAndCheckTypeModifiers(out bool modifierErrors) 361442"];
3248 [label="param MakeAndCheckTypeModifiers(this) 361443"];
3249 [label="modifierErrors = false; 361444"];
3250 [label="var result = DeclarationModifiers.Unset; 361445"];
3251 [label="var partCount = declaration.Declarations.Length; 361446"];
3252 [label="var missingPartial = false; 361447"];
3253 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 361448"];
3254 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 361449"];
3255 [label="var decl = declaration.Declarations[i]; 361450"];
3256 [label="var mods = decl.Modifiers; 361451"];
3257 [label="if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                } 361452"];
3258 [label="if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                } 361453"];
3259 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 361454"];
3260 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 361455"];
3261 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 361456"];
3262 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 361457"];
3263 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 361458"];
3264 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 361459"];
3265 [label="ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors) 361460"];
3266 [label="param CheckModifiers(DeclarationModifiers modifiers) 361461"];
3267 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 361462"];
3268 [label="param CheckModifiers(Location errorLocation) 361463"];
3269 [label="param CheckModifiers(DiagnosticBag diagnostics) 361464"];
3270 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 361465"];
3271 [label="param CheckModifiers(out bool modifierErrors) 361466"];
3272 [label="modifierErrors = false; 361467"];
3273 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 361468"];
3274 [label="DeclarationModifiers result = modifiers & allowedModifiers; 361469"];
3275 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 361470"];
3276 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 361471"];
3277 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 361472"];
3278 [label="return result; 361473"];
3279 [label="if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    } 361474"];
3280 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 361475"];
3281 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 361476"];
3282 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 361477"];
3283 [label="ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false) 361478"];
3284 [label="param CheckAccessibility(DeclarationModifiers modifiers) 361479"];
3285 [label="param CheckAccessibility(Symbol symbol) 361480"];
3286 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 361481"];
3287 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 361482"];
3288 [label="IsValidAccessibility(modifiers) 361483"];
3289 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 361484"];
3290 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 361485"];
3291 [label="return true; 361486"];
3292 [label="symbol.Kind 361487"];
3293 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 361488"];
3294 [label="return SymbolKind.NamedType; 361489"];
3295 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 361490"];
3296 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 361491"];
3297 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 361492"];
3298 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 361493"];
3299 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 361494"];
3300 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 361495"];
3301 [label="return null; 361496"];
3302 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 361497"];
3303 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 361498"];
3304 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 361499"];
3305 [label="if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                } 361500"];
3306 [label="result = mods; 361501"];
3307 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 361502"];
3308 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 361503"];
3309 [label="if (missingPartial)\n            {\n                if ((result & DeclarationModifiers.Partial) == 0)\n                {\n                    // duplicate definitions\n                    switch (this.ContainingSymbol.Kind)\n                    {\n                        case SymbolKind.Namespace:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, declaration.Declarations[i].NameLocation, this.Name, this.ContainingSymbol);\n                                modifierErrors = true;\n                            }\n                            break;\n\n                        case SymbolKind.NamedType:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                if (ContainingType!.Locations.Length == 1 || ContainingType.IsPartial())\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, declaration.Declarations[i].NameLocation, this.ContainingSymbol, this.Name);\n                                modifierErrors = true;\n                            }\n                            break;\n                    }\n                }\n                else\n                {\n                    for (var i = 0; i < partCount; i++)\n                    {\n                        var singleDeclaration = declaration.Declarations[i];\n                        var mods = singleDeclaration.Modifiers;\n                        if ((mods & DeclarationModifiers.Partial) == 0)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_MissingPartial, singleDeclaration.NameLocation, this.Name);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n            } 361504"];
3310 [label="this.Name 361505"];
3311 [label="get\n            {\n                return declaration.Name;\n            } 361506"];
3312 [label="return declaration.Name; 361507"];
3313 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 361508"];
3314 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 361509"];
3315 [label="return result; 361510"];
3316 [label="(type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 361511"];
3317 [label="s_hasInvalidTypeParameterFunc =\n            (type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 361512"];
3318 [label="this.CheckUnsafeModifier(mods, diagnostics); 361513"];
3319 [label="this.CheckUnsafeModifier(mods, diagnostics); 361514"];
3320 [label="this.CheckUnsafeModifier(mods, diagnostics); 361515"];
3321 [label="this.CheckUnsafeModifier(mods, diagnostics) 361516"];
3322 [label="param CheckUnsafeModifier(this Symbol symbol) 361517"];
3323 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 361518"];
3324 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 361519"];
3325 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 361520"];
3326 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 361521"];
3327 [label="symbol.Locations 361522"];
3328 [label="get\n            {\n                return declaration.NameLocations.Cast<SourceLocation, Location>();\n            } 361523"];
3329 [label="return declaration.NameLocations.Cast<SourceLocation, Location>(); 361524"];
3330 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 361525"];
3331 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 361526"];
3332 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 361527"];
3333 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 361528"];
3334 [label="param CheckUnsafeModifier(this Symbol symbol) 361529"];
3335 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 361530"];
3336 [label="param CheckUnsafeModifier(Location errorLocation) 361531"];
3337 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 361532"];
3338 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 361533"];
3339 [label="this.CheckUnsafeModifier(mods, diagnostics); 361534"];
3340 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 361535"];
3341 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 361536"];
3342 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 361537"];
3343 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 361538"];
3344 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 361539"];
3345 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 361540"];
3346 [label="switch (typeKind)\n            {\n                case TypeKind.Interface:\n                    mods |= DeclarationModifiers.Abstract;\n                    break;\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n                case TypeKind.Delegate:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n            } 361541"];
3347 [label="mods |= DeclarationModifiers.Sealed; 361542"];
3348 [label="return mods; 361543"];
3349 [label="foreach (var singleDeclaration in declaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 361544"];
3350 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 361545"];
3351 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 361546"];
3352 [label="int access = (int)(modifiers & DeclarationModifiers.AccessibilityMask); 361547"];
3353 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 361548"];
3354 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 361549"];
3355 [label="_declModifiers 361550"];
3356 [label="var specialType = access == (int)DeclarationModifiers.Public\n                ? MakeSpecialType()\n                : SpecialType.None; 361551"];
3357 [label="access == (int)DeclarationModifiers.Public 361552"];
3358 [label="MakeSpecialType() 361553"];
3359 [label="param MakeSpecialType(this) 361554"];
3360 [label="ContainingSymbol 361555"];
3361 [label="get\n            {\n                return _containingSymbol;\n            } 361556"];
3362 [label="return _containingSymbol; 361557"];
3363 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 361558"];
3364 [label="ContainingSymbol.Kind 361559"];
3365 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 361560"];
3366 [label="return SymbolKind.Namespace; 361561"];
3367 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 361562"];
3368 [label="ContainingSymbol 361563"];
3369 [label="get\n            {\n                return _containingSymbol;\n            } 361564"];
3370 [label="return _containingSymbol; 361565"];
3371 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 361566"];
3372 [label="ContainingSymbol.ContainingAssembly 361567"];
3373 [label="=> _module.ContainingAssembly 361568"];
3374 [label="_module.ContainingAssembly 361569"];
3375 [label="get\n            {\n                return _assemblySymbol;\n            } 361570"];
3376 [label="return _assemblySymbol; 361571"];
3377 [label="ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 361572"];
3378 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 361573"];
3379 [label="this.CorLibrary 361574"];
3380 [label="get\n            {\n                return _corLibrary;\n            } 361575"];
3381 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 361576"];
3382 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 361577"];
3383 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 361578"];
3384 [label="return SpecialType.None; 361579"];
3385 [label="0 361580"];
3386 [label="SpecialTypeOffset = 0 361581"];
3387 [label="6 361582"];
3388 [label="SpecialTypeSize = 6 361583"];
3389 [label="SpecialTypeOffset + SpecialTypeSize 361584"];
3390 [label="ManagedKindOffset = SpecialTypeOffset + SpecialTypeSize 361585"];
3391 [label="2 361586"];
3392 [label="ManagedKindSize = 2 361587"];
3393 [label="ManagedKindOffset + ManagedKindSize 361588"];
3394 [label="FieldDefinitionsNotedOffset = ManagedKindOffset + ManagedKindSize 361589"];
3395 [label="1 361590"];
3396 [label="FieldDefinitionsNotedSize = 1 361591"];
3397 [label="FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 361592"];
3398 [label="FlattenedMembersIsSortedOffset = FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 361593"];
3399 [label="1 361594"];
3400 [label="FlattenedMembersIsSortedSize = 1 361595"];
3401 [label="FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 361596"];
3402 [label="TypeKindOffset = FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 361597"];
3403 [label="4 361598"];
3404 [label="TypeKindSize = 4 361599"];
3405 [label="TypeKindOffset + TypeKindSize 361600"];
3406 [label="NullableContextOffset = TypeKindOffset + TypeKindSize 361601"];
3407 [label="3 361602"];
3408 [label="NullableContextSize = 3 361603"];
3409 [label="1 361604"];
3410 [label="1 << SpecialTypeSize 361605"];
3411 [label="1 361606"];
3412 [label="(1 << SpecialTypeSize) - 1 361607"];
3413 [label="SpecialTypeMask = (1 << SpecialTypeSize) - 1 361608"];
3414 [label="1 361609"];
3415 [label="1 << ManagedKindSize 361610"];
3416 [label="1 361611"];
3417 [label="(1 << ManagedKindSize) - 1 361612"];
3418 [label="ManagedKindMask = (1 << ManagedKindSize) - 1 361613"];
3419 [label="1 361614"];
3420 [label="1 << TypeKindSize 361615"];
3421 [label="1 361616"];
3422 [label="(1 << TypeKindSize) - 1 361617"];
3423 [label="TypeKindMask = (1 << TypeKindSize) - 1 361618"];
3424 [label="1 361619"];
3425 [label="1 << NullableContextSize 361620"];
3426 [label="1 361621"];
3427 [label="(1 << NullableContextSize) - 1 361622"];
3428 [label="NullableContextMask = (1 << NullableContextSize) - 1 361623"];
3429 [label="1 361624"];
3430 [label="1 << FieldDefinitionsNotedOffset 361625"];
3431 [label="FieldDefinitionsNotedBit = 1 << FieldDefinitionsNotedOffset 361626"];
3432 [label="1 361627"];
3433 [label="1 << FlattenedMembersIsSortedOffset 361628"];
3434 [label="FlattenedMembersIsSortedBit = 1 << FlattenedMembersIsSortedOffset 361629"];
3435 [label="Debug.Assert(EnumUtilities.ContainsAllValues<SpecialType>(SpecialTypeMask)); 361630"];
3436 [label="Debug.Assert(EnumUtilities.ContainsAllValues<NullableContextKind>(NullableContextMask)); 361631"];
3437 [label="_flags = new Flags(specialType, typeKind); 361632"];
3438 [label="_flags = new Flags(specialType, typeKind); 361633"];
3439 [label="_flags = new Flags(specialType, typeKind); 361634"];
3440 [label="new Flags(specialType, typeKind) 361635"];
3441 [label="param Flags(SpecialType specialType) 361636"];
3442 [label="param Flags(TypeKind typeKind) 361637"];
3443 [label="param Flags(this) 361638"];
3444 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 361639"];
3445 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 361640"];
3446 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 361641"];
3447 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 361642"];
3448 [label="_flags = specialTypeInt | typeKindInt; 361643"];
3449 [label="_flags 361644"];
3450 [label="_flags 361645"];
3451 [label="this.ContainingType 361646"];
3452 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 361647"];
3453 [label="return _containingSymbol as NamedTypeSymbol; 361648"];
3454 [label="var containingType = this.ContainingType; 361649"];
3455 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 361650"];
3456 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 361651"];
3457 [label="state.NotePartComplete(CompletionPart.TypeArguments); 361652"];
3458 [label="state.NotePartComplete(CompletionPart.TypeArguments) 361653"];
3459 [label="param NotePartComplete(CompletionPart part) 361654"];
3460 [label="param NotePartComplete(this) 361655"];
3461 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 361656"];
3462 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 361657"];
3463 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 361658"];
3464 [label="_lazyCustomAttributesBag 361659"];
3465 [label="_lazyDocComment 361660"];
3466 [label="_lazyExpandedDocComment 361661"];
3467 [label="_lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.Unknown 361662"];
3468 [label="_lazyDeclaredBases 361663"];
3469 [label="new UnsupportedMetadataTypeSymbol() 361664"];
3470 [label="param UnsupportedMetadataTypeSymbol(BadImageFormatException? mrEx = null) 361665"];
3471 [label="param UnsupportedMetadataTypeSymbol(this) 361666"];
3472 [label="param ErrorTypeSymbol(this) 361667"];
3473 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 361668"];
3474 [label="tupleData 361669"];
3475 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 361670"];
3476 [label="param NamedTypeSymbol(this) 361671"];
3477 [label="param TypeSymbol(this) 361672"];
3478 [label="param NamespaceOrTypeSymbol(this) 361673"];
3479 [label="param Symbol(this) 361674"];
3480 [label="_lazyISymbol 361675"];
3481 [label="_lazyAbstractMembers 361676"];
3482 [label="_lazyInterfaceInfo 361677"];
3483 [label="_lazyAdapter 361678"];
3484 [label="_hasNoBaseCycles 361679"];
3485 [label="_lazyTupleData 361680"];
3486 [label="_lazyTupleData 361681"];
3487 [label="_mrEx 361682"];
3488 [label="_mrEx 361683"];
3489 [label="UnknownResultType = new UnsupportedMetadataTypeSymbol() 361684"];
3490 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 361685"];
3491 [label="_lazyEnumValueField 361686"];
3492 [label="_lazyEnumUnderlyingType = ErrorTypeSymbol.UnknownResultType 361687"];
3493 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    break;\n                default:\n                    Debug.Assert(false, 'bad declaration kind');\n                    break;\n            } 361688"];
3494 [label="containingSymbol.Kind 361689"];
3495 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 361690"];
3496 [label="return SymbolKind.Namespace; 361691"];
3497 [label="if (containingSymbol.Kind == SymbolKind.NamedType)\n            {\n                // Nested types are never unified.\n                _lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.False;\n            } 361692"];
3498 [label="builder.Add(BuildSymbol(declaration, diagnostics)) 361693"];
3499 [label="param Add(NamespaceOrTypeSymbol symbol) 361694"];
3500 [label="param Add(this) 361695"];
3501 [label="symbol.Name 361696"];
3502 [label="get\n            {\n                return declaration.Name;\n            } 361697"];
3503 [label="return declaration.Name; 361698"];
3504 [label="string name = symbol.Name; 361699"];
3505 [label="object item; 361700"];
3506 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 361701"];
3507 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 361702"];
3508 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 361703"];
3509 [label="_dictionary 361704"];
3510 [label="builder.CreateMap() 361705"];
3511 [label="param CreateMap(this) 361706"];
3512 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 361707"];
3513 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 361708"];
3514 [label="foreach (var kvp in _dictionary)\n                {\n                    object value = kvp.Value;\n                    ImmutableArray<NamespaceOrTypeSymbol> members;\n\n                    var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    }\n\n                    result.Add(kvp.Key, members);\n                } 361709"];
3515 [label="object value = kvp.Value; 361710"];
3516 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 361711"];
3517 [label="members 361712"];
3518 [label="var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>; 361713"];
3519 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 361714"];
3520 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 361715"];
3521 [label="NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value; 361716"];
3522 [label="symbol.Kind 361717"];
3523 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 361718"];
3524 [label="return SymbolKind.NamedType; 361719"];
3525 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 361720"];
3526 [label="symbol.Kind == SymbolKind.Namespace 361721"];
3527 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 361722"];
3528 [label="result.Add(kvp.Key, members); 361723"];
3529 [label="result.Add(kvp.Key, members); 361724"];
3530 [label="result.Add(kvp.Key, members); 361725"];
3531 [label="return result; 361726"];
3532 [label="var result = builder.CreateMap(); 361727"];
3533 [label="CheckMembers(this, result, diagnostics); 361728"];
3534 [label="CheckMembers(this, result, diagnostics); 361729"];
3535 [label="CheckMembers(this, result, diagnostics); 361730"];
3536 [label="CheckMembers(this, result, diagnostics) 361731"];
3537 [label="param CheckMembers(NamespaceSymbol @namespace) 361732"];
3538 [label="param CheckMembers(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> result) 361733"];
3539 [label="param CheckMembers(DiagnosticBag diagnostics) 361734"];
3540 [label="var memberOfArity = new Symbol[10]; 361735"];
3541 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 361736"];
3542 [label="@namespace.ContainingAssembly 361737"];
3543 [label="=> _module.ContainingAssembly 361738"];
3544 [label="_module.ContainingAssembly 361739"];
3545 [label="get\n            {\n                return _assemblySymbol;\n            } 361740"];
3546 [label="return _assemblySymbol; 361741"];
3547 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 361742"];
3548 [label="@namespace.ContainingAssembly.Modules 361743"];
3549 [label="get\n            {\n                return _modules;\n            } 361744"];
3550 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 361745"];
3551 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 361746"];
3552 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 361747"];
3553 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 361748"];
3554 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 361749"];
3555 [label="foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                } 361750"];
3556 [label="var nts = symbol as NamedTypeSymbol; 361751"];
3557 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 361752"];
3558 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 361753"];
3559 [label="((object)nts != null) 361754"];
3560 [label="nts.Arity 361755"];
3561 [label="get\n            {\n                return declaration.Arity;\n            } 361756"];
3562 [label="return declaration.Arity; 361757"];
3563 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 361758"];
3564 [label="var other = memberOfArity[arity]; 361759"];
3565 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 361760"];
3566 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 361761"];
3567 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 361762"];
3568 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 361763"];
3569 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 361764"];
3570 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 361765"];
3571 [label="memberOfArity[arity] 361766"];
3572 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 361767"];
3573 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 361768"];
3574 [label="nts.DeclaredAccessibility 361769"];
3575 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 361770"];
3576 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 361771"];
3577 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 361772"];
3578 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 361773"];
3579 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 361774"];
3580 [label="return Accessibility.Public; 361775"];
3581 [label="Accessibility declaredAccessibility = nts.DeclaredAccessibility; 361776"];
3582 [label="if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        } 361777"];
3583 [label="CheckMembers(this, result, diagnostics); 361778"];
3584 [label="return result; 361779"];
3585 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 361780"];
3586 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 361781"];
3587 [label="this.DeclaringCompilation 361782"];
3588 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 361783"];
3589 [label="this.Kind 361784"];
3590 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 361785"];
3591 [label="return SymbolKind.Namespace; 361786"];
3592 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 361787"];
3593 [label="this.ContainingModule 361788"];
3594 [label="get\n            {\n                return _module;\n            } 361789"];
3595 [label="return _module; 361790"];
3596 [label="var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol; 361791"];
3597 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 361792"];
3598 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 361793"];
3599 [label="(object)sourceModuleSymbol == null 361794"];
3600 [label="sourceModuleSymbol.DeclaringCompilation 361795"];
3601 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 361796"];
3602 [label="this.DeclaringCompilation.DeclarationDiagnostics 361797"];
3603 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 361798"];
3604 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 361799"];
3605 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 361800"];
3606 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 361801"];
3607 [label="var diagnostics = new DiagnosticBag(); 361802"];
3608 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 361803"];
3609 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 361804"];
3610 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 361805"];
3611 [label="return _lazyDeclarationDiagnostics; 361806"];
3612 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 361807"];
3613 [label="RegisterDeclaredCorTypes() 361808"];
3614 [label="param RegisterDeclaredCorTypes(this) 361809"];
3615 [label="ContainingAssembly 361810"];
3616 [label="=> _module.ContainingAssembly 361811"];
3617 [label="_module.ContainingAssembly 361812"];
3618 [label="get\n            {\n                return _assemblySymbol;\n            } 361813"];
3619 [label="return _assemblySymbol; 361814"];
3620 [label="AssemblySymbol containingAssembly = ContainingAssembly; 361815"];
3621 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 361816"];
3622 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 361817"];
3623 [label="this.CorLibrary 361818"];
3624 [label="get\n            {\n                return _corLibrary;\n            } 361819"];
3625 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 361820"];
3626 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 361821"];
3627 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 361822"];
3628 [label="RegisterDeclaredCorTypes(); 361823"];
3629 [label="DeclaringCompilation 361824"];
3630 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 361825"];
3631 [label="this.Kind 361826"];
3632 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 361827"];
3633 [label="return SymbolKind.Namespace; 361828"];
3634 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 361829"];
3635 [label="this.ContainingModule 361830"];
3636 [label="get\n            {\n                return _module;\n            } 361831"];
3637 [label="return _module; 361832"];
3638 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 361833"];
3639 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 361834"];
3640 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 361835"];
3641 [label="DeclaringCompilation.SymbolDeclaredEvent(this) 361836"];
3642 [label="param SymbolDeclaredEvent(Symbol symbol) 361837"];
3643 [label="param SymbolDeclaredEvent(this) 361838"];
3644 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 361839"];
3645 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 361840"];
3646 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 361841"];
3647 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 361842"];
3648 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 361843"];
3649 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 361844"];
3650 [label="var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap); 361845"];
3651 [label="_state.NotePartComplete(CompletionPart.NameToMembersMap) 361846"];
3652 [label="param NotePartComplete(CompletionPart part) 361847"];
3653 [label="param NotePartComplete(this) 361848"];
3654 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 361849"];
3655 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 361850"];
3656 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 361851"];
3657 [label="Debug.Assert(wasSetThisThread); 361852"];
3658 [label="diagnostics.Free(); 361853"];
3659 [label="return _nameToMembersMap; 361854"];
3660 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 361855"];
3661 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 361856"];
3662 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 361857"];
3663 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 361858"];
3664 [label="this.GetNameToMembersMap().TryGetValue(name, out members) 361859"];
3665 [label="childSymbol.Kind 361860"];
3666 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 361861"];
3667 [label="if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    } 361862"];
3668 [label="otherSymbols.Add(childSymbol); 361863"];
3669 [label="otherSymbols.Add(childSymbol); 361864"];
3670 [label="param GetMembers(string name) 361865"];
3671 [label="param GetMembers(this) 361866"];
3672 [label="EnsureAllMembersLoaded() 361867"];
3673 [label="param EnsureAllMembersLoaded(this) 361868"];
3674 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 361869"];
3675 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 361870"];
3676 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 361871"];
3677 [label="_moduleSymbol.Module 361872"];
3678 [label="get\n            {\n                return _module;\n            } 361873"];
3679 [label="return _module; 361874"];
3680 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 361875"];
3681 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 361876"];
3682 [label="LoadAllMembers(groups); 361877"];
3683 [label="LoadAllMembers(groups) 361878"];
3684 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 361879"];
3685 [label="param LoadAllMembers(this) 361880"];
3686 [label="Debug.Assert(typesByNS != null); 361881"];
3687 [label="Debug.Assert(typesByNS != null); 361882"];
3688 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> nestedTypes = null; 361883"];
3689 [label="IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> nestedNamespaces = null; 361884"];
3690 [label="this.IsGlobalNamespace 361885"];
3691 [label="get\n            {\n                return true;\n            } 361886"];
3692 [label="return true; 361887"];
3693 [label="bool isGlobalNamespace = this.IsGlobalNamespace; 361888"];
3694 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361889"];
3695 [label="isGlobalNamespace 361890"];
3696 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361891"];
3697 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361892"];
3698 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361893"];
3699 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361894"];
3700 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361895"];
3701 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 361896"];
3702 [label="LazyInitializeNamespaces(nestedNamespaces); 361897"];
3703 [label="LazyInitializeNamespaces(nestedNamespaces) 361898"];
3704 [label="param LazyInitializeNamespaces(IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> childNamespaces) 361899"];
3705 [label="param LazyInitializeNamespaces(this) 361900"];
3706 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 361901"];
3707 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 361902"];
3708 [label="var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance); 361903"];
3709 [label="foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                } 361904"];
3710 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 361905"];
3711 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 361906"];
3712 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 361907"];
3713 [label="new PENestedNamespaceSymbol(child.Key, this, child.Value) 361908"];
3714 [label="param PENestedNamespaceSymbol(string name) 361909"];
3715 [label="param PENestedNamespaceSymbol(PENamespaceSymbol containingNamespace) 361910"];
3716 [label="param PENestedNamespaceSymbol(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 361911"];
3717 [label="param PENestedNamespaceSymbol(this) 361912"];
3718 [label="param PENestedNamespaceSymbol(this) 361913"];
3719 [label="_containingNamespaceSymbol 361914"];
3720 [label="_name 361915"];
3721 [label="_typesByNS 361916"];
3722 [label="Debug.Assert(name != null); 361917"];
3723 [label="Debug.Assert(name != null); 361918"];
3724 [label="Debug.Assert((object)containingNamespace != null); 361919"];
3725 [label="Debug.Assert((object)containingNamespace != null); 361920"];
3726 [label="Debug.Assert(typesByNS != null); 361921"];
3727 [label="Debug.Assert(typesByNS != null); 361922"];
3728 [label="_containingNamespaceSymbol 361923"];
3729 [label="_name 361924"];
3730 [label="_typesByNS 361925"];
3731 [label="c.Name 361926"];
3732 [label="get\n            {\n                return _name;\n            } 361927"];
3733 [label="return _name; 361928"];
3734 [label="namespaces.Add(c.Name, c); 361929"];
3735 [label="namespaces.Add(c.Name, c); 361930"];
3736 [label="namespaces.Add(c.Name, c); 361931"];
3737 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 361932"];
3738 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 361933"];
3739 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 361934"];
3740 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 361935"];
3741 [label="LazyInitializeNamespaces(nestedNamespaces); 361936"];
3742 [label="LazyInitializeTypes(nestedTypes); 361937"];
3743 [label="LazyInitializeTypes(nestedTypes) 361938"];
3744 [label="param LazyInitializeTypes(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typeGroups) 361939"];
3745 [label="param LazyInitializeTypes(this) 361940"];
3746 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 361941"];
3747 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 361942"];
3748 [label="ContainingPEModule 361943"];
3749 [label="get\n            {\n                return _moduleSymbol;\n            } 361944"];
3750 [label="return _moduleSymbol; 361945"];
3751 [label="var moduleSymbol = ContainingPEModule; 361946"];
3752 [label="var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance(); 361947"];
3753 [label="moduleSymbol.Module 361948"];
3754 [label="get\n            {\n                return _module;\n            } 361949"];
3755 [label="var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes(); 361950"];
3756 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 361951"];
3757 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 361952"];
3758 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 361953"];
3759 [label="foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    } 361954"];
3760 [label="if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        } 361955"];
3761 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 361956"];
3762 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 361957"];
3763 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 361958"];
3764 [label="EmptyComparer.Instance 361959"];
3765 [label="new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 361960"];
3766 [label="s_emptyNestedTypes = new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 361961"];
3767 [label="new UncommonProperties() 361962"];
3768 [label="param UncommonProperties(this) 361963"];
3769 [label="lazyEnumUnderlyingType 361964"];
3770 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 361965"];
3771 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 361966"];
3772 [label="lazyContainsExtensionMethods 361967"];
3773 [label="lazyIsByRefLike 361968"];
3774 [label="lazyIsReadOnly 361969"];
3775 [label="lazyDefaultMemberName 361970"];
3776 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 361971"];
3777 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 361972"];
3778 [label="s_noUncommonProperties = new UncommonProperties() 361973"];
3779 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 361974"];
3780 [label="PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key) 361975"];
3781 [label="param Create(PEModuleSymbol moduleSymbol) 361976"];
3782 [label="param Create(PENamespaceSymbol containingNamespace) 361977"];
3783 [label="param Create(TypeDefinitionHandle handle) 361978"];
3784 [label="param Create(string emittedNamespaceName) 361979"];
3785 [label="GenericParameterHandleCollection genericParameterHandles; 361980"];
3786 [label="genericParameterHandles 361981"];
3787 [label="ushort arity; 361982"];
3788 [label="BadImageFormatException mrEx = null; 361983"];
3789 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 361984"];
3790 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 361985"];
3791 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 361986"];
3792 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 361987"];
3793 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 361988"];
3794 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx) 361989"];
3795 [label="param GetGenericInfo(PEModuleSymbol moduleSymbol) 361990"];
3796 [label="param GetGenericInfo(TypeDefinitionHandle handle) 361991"];
3797 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 361992"];
3798 [label="param GetGenericInfo(out ushort arity) 361993"];
3799 [label="param GetGenericInfo(out BadImageFormatException mrEx) 361994"];
3800 [label="moduleSymbol.Module 361995"];
3801 [label="get\n            {\n                return _module;\n            } 361996"];
3802 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 361997"];
3803 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 361998"];
3804 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 361999"];
3805 [label="arity = (ushort)genericParameterHandles.Count; 362000"];
3806 [label="mrEx = null; 362001"];
3807 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 362002"];
3808 [label="bool mangleName; 362003"];
3809 [label="PENamedTypeSymbol result; 362004"];
3810 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 362005"];
3811 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 362006"];
3812 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 362007"];
3813 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 362008"];
3814 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 362009"];
3815 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 362010"];
3816 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 362011"];
3817 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 362012"];
3818 [label="new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName) 362013"];
3819 [label="param PENamedTypeSymbolNonGeneric(PEModuleSymbol moduleSymbol) 362014"];
3820 [label="param PENamedTypeSymbolNonGeneric(NamespaceOrTypeSymbol container) 362015"];
3821 [label="param PENamedTypeSymbolNonGeneric(TypeDefinitionHandle handle) 362016"];
3822 [label="param PENamedTypeSymbolNonGeneric(string emittedNamespaceName) 362017"];
3823 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362018"];
3824 [label="param PENamedTypeSymbolNonGeneric(this) 362019"];
3825 [label="moduleSymbol 362020"];
3826 [label="container 362021"];
3827 [label="handle 362022"];
3828 [label="emittedNamespaceName 362023"];
3829 [label="0 362024"];
3830 [label="mangleName 362025"];
3831 [label="param PENamedTypeSymbolNonGeneric(this) 362026"];
3832 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 362027"];
3833 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 362028"];
3834 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 362029"];
3835 [label="param PENamedTypeSymbol(string emittedNamespaceName) 362030"];
3836 [label="param PENamedTypeSymbol(ushort arity) 362031"];
3837 [label="param PENamedTypeSymbol(out bool mangleName) 362032"];
3838 [label="param PENamedTypeSymbol(this) 362033"];
3839 [label="param PENamedTypeSymbol(this) 362034"];
3840 [label="param NamedTypeSymbol(this) 362035"];
3841 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 362036"];
3842 [label="param NamedTypeSymbol(this) 362037"];
3843 [label="param TypeSymbol(this) 362038"];
3844 [label="param TypeSymbol(this) 362039"];
3845 [label="_lazyAbstractMembers 362040"];
3846 [label="_lazyInterfaceInfo 362041"];
3847 [label="_lazyAdapter 362042"];
3848 [label="_hasNoBaseCycles 362043"];
3849 [label="_lazyTupleData 362044"];
3850 [label="_lazyTupleData 362045"];
3851 [label="_container 362046"];
3852 [label="_name 362047"];
3853 [label="_flags 362048"];
3854 [label="_corTypeId 362049"];
3855 [label="_lazyMemberNames 362050"];
3856 [label="_lazyMembersByName 362051"];
3857 [label="_lazyNestedTypes 362052"];
3858 [label="_lazyKind 362053"];
3859 [label="_lazyNullableContextValue 362054"];
3860 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 362055"];
3861 [label="default(ImmutableArray<NamedTypeSymbol>) 362056"];
3862 [label="_lazyInterfaces = default(ImmutableArray<NamedTypeSymbol>) 362057"];
3863 [label="_lazyDeclaredBaseType = ErrorTypeSymbol.UnknownResultType 362058"];
3864 [label="default(ImmutableArray<NamedTypeSymbol>) 362059"];
3865 [label="_lazyDeclaredInterfaces = default(ImmutableArray<NamedTypeSymbol>) 362060"];
3866 [label="_lazyDocComment 362061"];
3867 [label="_lazyUseSiteDiagnostic = CSDiagnosticInfo.EmptyErrorInfo 362062"];
3868 [label="_lazyUncommonProperties 362063"];
3869 [label="public IEnumerable<object> fieldDefs { get; set; } 362064"];
3870 [label="Debug.Assert(!handle.IsNil); 362065"];
3871 [label="Debug.Assert((object)container != null); 362066"];
3872 [label="Debug.Assert((object)container != null); 362067"];
3873 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362068"];
3874 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362069"];
3875 [label="string metadataName; 362070"];
3876 [label="bool makeBad = false; 362071"];
3877 [label="moduleSymbol.Module 362072"];
3878 [label="get\n            {\n                return _module;\n            } 362073"];
3879 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 362074"];
3880 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 362075"];
3881 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 362076"];
3882 [label="_handle 362077"];
3883 [label="_container 362078"];
3884 [label="moduleSymbol.Module 362079"];
3885 [label="get\n            {\n                return _module;\n            } 362080"];
3886 [label="return _module; 362081"];
3887 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 362082"];
3888 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 362083"];
3889 [label="_flags 362084"];
3890 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 362085"];
3891 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 362086"];
3892 [label="_name 362087"];
3893 [label="mangleName = false; 362088"];
3894 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362089"];
3895 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362090"];
3896 [label="moduleSymbol.ContainingAssembly 362091"];
3897 [label="get\n            {\n                return _assemblySymbol;\n            } 362092"];
3898 [label="return _assemblySymbol; 362093"];
3899 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362094"];
3900 [label="moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 362095"];
3901 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 362096"];
3902 [label="this.CorLibrary 362097"];
3903 [label="get\n            {\n                return _corLibrary;\n            } 362098"];
3904 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 362099"];
3905 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 362100"];
3906 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 362101"];
3907 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362102"];
3908 [label="this.DeclaredAccessibility 362103"];
3909 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 362104"];
3910 [label="Accessibility access = Accessibility.Private; 362105"];
3911 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 362106"];
3912 [label="access = Accessibility.Internal; 362107"];
3913 [label="return access; 362108"];
3914 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362109"];
3915 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362110"];
3916 [label="_corTypeId 362111"];
3917 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362112"];
3918 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362113"];
3919 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362114"];
3920 [label="return result; 362115"];
3921 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 362116"];
3922 [label="GenericParameterHandleCollection genericParameterHandles; 362117"];
3923 [label="genericParameterHandles 362118"];
3924 [label="ushort arity; 362119"];
3925 [label="BadImageFormatException mrEx = null; 362120"];
3926 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362121"];
3927 [label="param GetGenericInfo(out ushort arity) 362122"];
3928 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362123"];
3929 [label="mrEx = null; 362124"];
3930 [label="bool mangleName; 362125"];
3931 [label="PENamedTypeSymbol result; 362126"];
3932 [label="result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName); 362127"];
3933 [label="result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName); 362128"];
3934 [label="new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName) 362129"];
3935 [label="param PENamedTypeSymbolGeneric(PEModuleSymbol moduleSymbol) 362130"];
3936 [label="param PENamedTypeSymbolGeneric(NamespaceOrTypeSymbol container) 362131"];
3937 [label="param PENamedTypeSymbolGeneric(TypeDefinitionHandle handle) 362132"];
3938 [label="param PENamedTypeSymbolGeneric(string emittedNamespaceName) 362133"];
3939 [label="param PENamedTypeSymbolGeneric(GenericParameterHandleCollection genericParameterHandles) 362134"];
3940 [label="param PENamedTypeSymbolGeneric(ushort arity) 362135"];
3941 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 362136"];
3942 [label="param PENamedTypeSymbolGeneric(this) 362137"];
3943 [label="moduleSymbol 362138"];
3944 [label="container 362139"];
3945 [label="handle 362140"];
3946 [label="emittedNamespaceName 362141"];
3947 [label="arity 362142"];
3948 [label="mangleName 362143"];
3949 [label="param PENamedTypeSymbolGeneric(this) 362144"];
3950 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 362145"];
3951 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 362146"];
3952 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 362147"];
3953 [label="param PENamedTypeSymbol(string emittedNamespaceName) 362148"];
3954 [label="param PENamedTypeSymbol(ushort arity) 362149"];
3955 [label="param PENamedTypeSymbol(out bool mangleName) 362150"];
3956 [label="_lazyTupleData 362151"];
3957 [label="_container 362152"];
3958 [label="_name 362153"];
3959 [label="_flags 362154"];
3960 [label="_corTypeId 362155"];
3961 [label="Debug.Assert(!handle.IsNil); 362156"];
3962 [label="Debug.Assert((object)container != null); 362157"];
3963 [label="Debug.Assert((object)container != null); 362158"];
3964 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362159"];
3965 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362160"];
3966 [label="string metadataName; 362161"];
3967 [label="bool makeBad = false; 362162"];
3968 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 362163"];
3969 [label="_name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity); 362164"];
3970 [label="_name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity); 362165"];
3971 [label="_name 362166"];
3972 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 362167"];
3973 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 362168"];
3974 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 362169"];
3975 [label="mangleName = !ReferenceEquals(_name, metadataName); 362170"];
3976 [label="mangleName = !ReferenceEquals(_name, metadataName); 362171"];
3977 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 362172"];
3978 [label="Accessibility access = Accessibility.Private; 362173"];
3979 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362174"];
3980 [label="_arity 362175"];
3981 [label="_mangleName 362176"];
3982 [label="Debug.Assert(genericParameterHandles.Count > 0); 362177"];
3983 [label="Debug.Assert(genericParameterHandles.Count > 0); 362178"];
3984 [label="_arity 362179"];
3985 [label="_genericParameterHandles 362180"];
3986 [label="_mangleName 362181"];
3987 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362182"];
3988 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362183"];
3989 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 362184"];
3990 [label="GenericParameterHandleCollection genericParameterHandles; 362185"];
3991 [label="genericParameterHandles 362186"];
3992 [label="ushort arity; 362187"];
3993 [label="BadImageFormatException mrEx = null; 362188"];
3994 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362189"];
3995 [label="param GetGenericInfo(out ushort arity) 362190"];
3996 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362191"];
3997 [label="mrEx = null; 362192"];
3998 [label="bool mangleName; 362193"];
3999 [label="PENamedTypeSymbol result; 362194"];
4000 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 362195"];
4001 [label="mangleName 362196"];
4002 [label="param PENamedTypeSymbol(out bool mangleName) 362197"];
4003 [label="_lazyTupleData 362198"];
4004 [label="_container 362199"];
4005 [label="_name 362200"];
4006 [label="_flags 362201"];
4007 [label="_corTypeId 362202"];
4008 [label="Debug.Assert(!handle.IsNil); 362203"];
4009 [label="Debug.Assert((object)container != null); 362204"];
4010 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362205"];
4011 [label="string metadataName; 362206"];
4012 [label="bool makeBad = false; 362207"];
4013 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 362208"];
4014 [label="Accessibility access = Accessibility.Private; 362209"];
4015 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362210"];
4016 [label="_arity 362211"];
4017 [label="_mangleName 362212"];
4018 [label="Debug.Assert(genericParameterHandles.Count > 0); 362213"];
4019 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362214"];
4020 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362215"];
4021 [label="GenericParameterHandleCollection genericParameterHandles; 362216"];
4022 [label="genericParameterHandles 362217"];
4023 [label="ushort arity; 362218"];
4024 [label="BadImageFormatException mrEx = null; 362219"];
4025 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362220"];
4026 [label="param GetGenericInfo(out ushort arity) 362221"];
4027 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362222"];
4028 [label="mrEx = null; 362223"];
4029 [label="PENamedTypeSymbol result; 362224"];
4030 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362225"];
4031 [label="mangleName 362226"];
4032 [label="param PENamedTypeSymbol(out bool mangleName) 362227"];
4033 [label="Debug.Assert(!handle.IsNil); 362228"];
4034 [label="mangleName = false; 362229"];
4035 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362230"];
4036 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362231"];
4037 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362232"];
4038 [label="mangleName 362233"];
4039 [label="param PENamedTypeSymbol(out bool mangleName) 362234"];
4040 [label="_lazyTupleData 362235"];
4041 [label="_container 362236"];
4042 [label="_name 362237"];
4043 [label="_flags 362238"];
4044 [label="_corTypeId 362239"];
4045 [label="Debug.Assert(!handle.IsNil); 362240"];
4046 [label="Debug.Assert((object)container != null); 362241"];
4047 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362242"];
4048 [label="string metadataName; 362243"];
4049 [label="bool makeBad = false; 362244"];
4050 [label="mangleName = false; 362245"];
4051 [label="Accessibility access = Accessibility.Private; 362246"];
4052 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362247"];
4053 [label="genericParameterHandles 362248"];
4054 [label="ushort arity; 362249"];
4055 [label="BadImageFormatException mrEx = null; 362250"];
4056 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362251"];
4057 [label="param GetGenericInfo(out ushort arity) 362252"];
4058 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362253"];
4059 [label="mrEx = null; 362254"];
4060 [label="PENamedTypeSymbol result; 362255"];
4061 [label="Debug.Assert(!handle.IsNil); 362256"];
4062 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362257"];
4063 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362258"];
4064 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362259"];
4065 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362260"];
4066 [label="mangleName 362261"];
4067 [label="param PENamedTypeSymbol(out bool mangleName) 362262"];
4068 [label="_lazyTupleData 362263"];
4069 [label="_container 362264"];
4070 [label="_name 362265"];
4071 [label="_flags 362266"];
4072 [label="_corTypeId 362267"];
4073 [label="Debug.Assert(!handle.IsNil); 362268"];
4074 [label="Debug.Assert((object)container != null); 362269"];
4075 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362270"];
4076 [label="string metadataName; 362271"];
4077 [label="bool makeBad = false; 362272"];
4078 [label="mangleName = false; 362273"];
4079 [label="Accessibility access = Accessibility.Private; 362274"];
4080 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362275"];
4081 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 362276"];
4082 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 362277"];
4083 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 362278"];
4084 [label="get\n            {\n                return _name;\n            } 362279"];
4085 [label="return _name; 362280"];
4086 [label="children.Free(); 362281"];
4087 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362282"];
4088 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362283"];
4089 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 362284"];
4090 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 362285"];
4091 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 362286"];
4092 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 362287"];
4093 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 362288"];
4094 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 362289"];
4095 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 362290"];
4096 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 362291"];
4097 [label="param OnNewTypeDeclarationsLoaded(this) 362292"];
4098 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 362293"];
4099 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 362294"];
4100 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 362295"];
4101 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 362296"];
4102 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 362297"];
4103 [label="foreach (var types in typesDict.Values)\n            {\n                foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                }\n            } 362298"];
4104 [label="foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                } 362299"];
4105 [label="bool added; 362300"];
4106 [label="type.Handle 362301"];
4107 [label="get\n            {\n                return _handle;\n            } 362302"];
4108 [label="return _handle; 362303"];
4109 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 362304"];
4110 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 362305"];
4111 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 362306"];
4112 [label="Debug.Assert(added); 362307"];
4113 [label="type.SpecialType 362308"];
4114 [label="get\n            {\n                return _corTypeId;\n            } 362309"];
4115 [label="return _corTypeId; 362310"];
4116 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 362311"];
4117 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 362312"];
4118 [label="bool added; 362313"];
4119 [label="Debug.Assert(added); 362314"];
4120 [label="type.SpecialType 362315"];
4121 [label="get\n            {\n                return _corTypeId;\n            } 362316"];
4122 [label="return _corTypeId; 362317"];
4123 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 362318"];
4124 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 362319"];
4125 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 362320"];
4126 [label="LazyInitializeTypes(nestedTypes); 362321"];
4127 [label="LoadAllMembers(groups); 362322"];
4128 [label="EnsureAllMembersLoaded(); 362323"];
4129 [label="PENestedNamespaceSymbol ns = null; 362324"];
4130 [label="ImmutableArray<PENamedTypeSymbol> t; 362325"];
4131 [label="t 362326"];
4132 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 362327"];
4133 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 362328"];
4134 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 362329"];
4135 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 362330"];
4136 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 362331"];
4137 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 362332"];
4138 [label="return ImmutableArray<Symbol>.Empty; 362333"];
4139 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 362334"];
4140 [label="Debug.Assert(typesByNS != null); 362335"];
4141 [label="get\n            {\n                return true;\n            } 362336"];
4142 [label="_containingNamespaceSymbol 362337"];
4143 [label="_name 362338"];
4144 [label="_typesByNS 362339"];
4145 [label="Debug.Assert(name != null); 362340"];
4146 [label="Debug.Assert((object)containingNamespace != null); 362341"];
4147 [label="Debug.Assert(typesByNS != null); 362342"];
4148 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 362343"];
4149 [label="genericParameterHandles 362344"];
4150 [label="BadImageFormatException mrEx = null; 362345"];
4151 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362346"];
4152 [label="param GetGenericInfo(out ushort arity) 362347"];
4153 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362348"];
4154 [label="mrEx = null; 362349"];
4155 [label="PENamedTypeSymbol result; 362350"];
4156 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362351"];
4157 [label="mangleName 362352"];
4158 [label="param PENamedTypeSymbol(out bool mangleName) 362353"];
4159 [label="_lazyTupleData 362354"];
4160 [label="_container 362355"];
4161 [label="_name 362356"];
4162 [label="_flags 362357"];
4163 [label="_corTypeId 362358"];
4164 [label="Debug.Assert(!handle.IsNil); 362359"];
4165 [label="Debug.Assert((object)container != null); 362360"];
4166 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362361"];
4167 [label="string metadataName; 362362"];
4168 [label="bool makeBad = false; 362363"];
4169 [label="mangleName = false; 362364"];
4170 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362365"];
4171 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362366"];
4172 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362367"];
4173 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362368"];
4174 [label="param GetGenericInfo(out ushort arity) 362369"];
4175 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362370"];
4176 [label="mangleName 362371"];
4177 [label="param PENamedTypeSymbol(out bool mangleName) 362372"];
4178 [label="_lazyTupleData 362373"];
4179 [label="_container 362374"];
4180 [label="_name 362375"];
4181 [label="_flags 362376"];
4182 [label="_corTypeId 362377"];
4183 [label="Debug.Assert(!handle.IsNil); 362378"];
4184 [label="Debug.Assert((object)container != null); 362379"];
4185 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362380"];
4186 [label="string metadataName; 362381"];
4187 [label="bool makeBad = false; 362382"];
4188 [label="mangleName = false; 362383"];
4189 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362384"];
4190 [label="genericParameterHandles 362385"];
4191 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362386"];
4192 [label="param GetGenericInfo(out ushort arity) 362387"];
4193 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362388"];
4194 [label="mrEx = null; 362389"];
4195 [label="PENamedTypeSymbol result; 362390"];
4196 [label="Debug.Assert(!handle.IsNil); 362391"];
4197 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362392"];
4198 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362393"];
4199 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362394"];
4200 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362395"];
4201 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 362396"];
4202 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 362397"];
4203 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 362398"];
4204 [label="bool added; 362399"];
4205 [label="Debug.Assert(added); 362400"];
4206 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 362401"];
4207 [label="EnsureAllMembersLoaded(); 362402"];
4208 [label="return ImmutableArray<Symbol>.Empty; 362403"];
4209 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 362404"];
4210 [label="Debug.Assert(typesByNS != null); 362405"];
4211 [label="get\n            {\n                return true;\n            } 362406"];
4212 [label="_containingNamespaceSymbol 362407"];
4213 [label="_name 362408"];
4214 [label="_typesByNS 362409"];
4215 [label="Debug.Assert(name != null); 362410"];
4216 [label="Debug.Assert((object)containingNamespace != null); 362411"];
4217 [label="Debug.Assert(typesByNS != null); 362412"];
4218 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 362413"];
4219 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362414"];
4220 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362415"];
4221 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 362416"];
4222 [label="bool added; 362417"];
4223 [label="Debug.Assert(added); 362418"];
4224 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 362419"];
4225 [label="EnsureAllMembersLoaded(); 362420"];
4226 [label="return ImmutableArray<Symbol>.Empty; 362421"];
4227 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 362422"];
4228 [label="Debug.Assert(typesByNS != null); 362423"];
4229 [label="get\n            {\n                return true;\n            } 362424"];
4230 [label="_containingNamespaceSymbol 362425"];
4231 [label="_name 362426"];
4232 [label="_typesByNS 362427"];
4233 [label="Debug.Assert(name != null); 362428"];
4234 [label="Debug.Assert((object)containingNamespace != null); 362429"];
4235 [label="Debug.Assert(typesByNS != null); 362430"];
4236 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 362431"];
4237 [label="genericParameterHandles 362432"];
4238 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 362433"];
4239 [label="param GetGenericInfo(out ushort arity) 362434"];
4240 [label="param GetGenericInfo(out BadImageFormatException mrEx) 362435"];
4241 [label="mrEx = null; 362436"];
4242 [label="PENamedTypeSymbol result; 362437"];
4243 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 362438"];
4244 [label="mangleName 362439"];
4245 [label="param PENamedTypeSymbol(out bool mangleName) 362440"];
4246 [label="_lazyTupleData 362441"];
4247 [label="_container 362442"];
4248 [label="_name 362443"];
4249 [label="_flags 362444"];
4250 [label="_corTypeId 362445"];
4251 [label="Debug.Assert(!handle.IsNil); 362446"];
4252 [label="Debug.Assert((object)container != null); 362447"];
4253 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 362448"];
4254 [label="string metadataName; 362449"];
4255 [label="bool makeBad = false; 362450"];
4256 [label="mangleName = false; 362451"];
4257 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 362452"];
4258 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362453"];
4259 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 362454"];
4260 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362455"];
4261 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 362456"];
4262 [label="EnsureAllMembersLoaded(); 362457"];
4263 [label="return ImmutableArray<Symbol>.Empty; 362458"];
4264 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 362459"];
4265 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 362460"];
4266 [label="return otherSymbols.ToImmutableAndFree(); 362461"];
4267 [label="return GetTypeMembers(name).WhereAsArray((t, arity) => t.Arity == arity, arity); 362462"];
4268 [label="return GetTypeMembers(name).WhereAsArray((t, arity) => t.Arity == arity, arity); 362463"];
4269 [label="return GetTypeMembers(name).WhereAsArray((t, arity) => t.Arity == arity, arity); 362464"];
4270 [label="get\n            {\n                return declaration.Arity;\n            } 362465"];
4271 [label="return declaration.Arity; 362466"];
4272 [label="CustomAssert.NotNull(v); 362467"];
4273 [label="CustomAssert.Equal(Accessibility.Public, v.DeclaredAccessibility); 362468"];
4274 [label="v.DeclaredAccessibility 362469"];
4275 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 362470"];
4276 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 362471"];
4277 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 362472"];
4278 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 362473"];
4279 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 362474"];
4280 [label="return Accessibility.Public; 362475"];
4281 [label="CustomAssert.Equal(Accessibility.Public, v.DeclaredAccessibility); 362476"];
4282 [label="v.GetMembers() 362477"];
4283 [label="param GetMembers(this) 362478"];
4284 [label="_flags.FlattenedMembersIsSorted 362479"];
4285 [label="get { return (_flags & FlattenedMembersIsSortedBit) != 0; } 362480"];
4286 [label="return (_flags & FlattenedMembersIsSortedBit) != 0; 362481"];
4287 [label="return (_flags & FlattenedMembersIsSortedBit) != 0; 362482"];
4288 [label="if (_flags.FlattenedMembersIsSorted)\n            {\n                return _lazyMembersFlattened;\n            }\n            else\n            {\n                var allMembers = this.GetMembersUnordered();\n\n                if (allMembers.Length > 1)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers);\n                }\n\n                _flags.SetFlattenedMembersIsSorted();\n                return allMembers;\n            } 362483"];
4289 [label="this.GetMembersUnordered() 362484"];
4290 [label="param GetMembersUnordered(this) 362485"];
4291 [label="var result = _lazyMembersFlattened; 362486"];
4292 [label="if (result.IsDefault)\n            {\n                result = GetMembersByName().Flatten(null);  // do not sort.\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersFlattened, result);\n                result = _lazyMembersFlattened;\n            } 362487"];
4293 [label="GetMembersByName() 362488"];
4294 [label="param GetMembersByName(this) 362489"];
4295 [label="if (this.state.HasComplete(CompletionPart.Members))\n            {\n                return _lazyMembersDictionary!;\n            } 362490"];
4296 [label="this.state.HasComplete(CompletionPart.Members) 362491"];
4297 [label="param HasComplete(CompletionPart part) 362492"];
4298 [label="param HasComplete(this) 362493"];
4299 [label="return (_completeParts & (int)part) == (int)part; 362494"];
4300 [label="GetMembersByNameSlow() 362495"];
4301 [label="param GetMembersByNameSlow(this) 362496"];
4302 [label="if (_lazyMembersDictionary == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                var membersDictionary = MakeAllMembers(diagnostics);\n\n                if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                }\n\n                diagnostics.Free();\n            } 362497"];
4303 [label="if (_lazyMembersDictionary == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                var membersDictionary = MakeAllMembers(diagnostics);\n\n                if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                }\n\n                diagnostics.Free();\n            } 362498"];
4304 [label="var diagnostics = DiagnosticBag.GetInstance(); 362499"];
4305 [label="var membersDictionary = MakeAllMembers(diagnostics); 362500"];
4306 [label="MakeAllMembers(diagnostics) 362501"];
4307 [label="param MakeAllMembers(DiagnosticBag diagnostics) 362502"];
4308 [label="param MakeAllMembers(this) 362503"];
4309 [label="Dictionary<string, ImmutableArray<Symbol>> membersByName; 362504"];
4310 [label="GetMembersAndInitializers() 362505"];
4311 [label="param GetMembersAndInitializers(this) 362506"];
4312 [label="var membersAndInitializers = _lazyMembersAndInitializers; 362507"];
4313 [label="if (membersAndInitializers != null)\n            {\n                return membersAndInitializers;\n            } 362508"];
4314 [label="if (membersAndInitializers != null)\n            {\n                return membersAndInitializers;\n            } 362509"];
4315 [label="var diagnostics = DiagnosticBag.GetInstance(); 362510"];
4316 [label="membersAndInitializers = BuildMembersAndInitializers(diagnostics); 362511"];
4317 [label="BuildMembersAndInitializers(diagnostics) 362512"];
4318 [label="param BuildMembersAndInitializers(DiagnosticBag diagnostics) 362513"];
4319 [label="param BuildMembersAndInitializers(this) 362514"];
4320 [label="getDeclaredMembersAndInitializers() 362515"];
4321 [label="DeclaredMembersAndInitializers? getDeclaredMembersAndInitializers()\n            {\n                var declaredMembersAndInitializers = _lazyDeclaredMembersAndInitializers;\n                if (declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    return declaredMembersAndInitializers;\n                }\n\n                if (Volatile.Read(ref _lazyMembersAndInitializers) is not null)\n                {\n                    // We're previously computed declared members and already cleared them out\n                    // No need to compute them again\n                    return null;\n                }\n\n                var diagnostics = DiagnosticBag.GetInstance();\n                declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics);\n\n                var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel);\n                if (alreadyKnown != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    diagnostics.Free();\n                    return alreadyKnown;\n                }\n\n                AddDeclarationDiagnostics(diagnostics);\n                diagnostics.Free();\n\n                return declaredMembersAndInitializers!;\n            } 362516"];
4322 [label="var declaredMembersAndInitializers = _lazyDeclaredMembersAndInitializers; 362517"];
4323 [label="if (declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    return declaredMembersAndInitializers;\n                } 362518"];
4324 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) is not null)\n                {\n                    // We're previously computed declared members and already cleared them out\n                    // No need to compute them again\n                    return null;\n                } 362519"];
4325 [label="var diagnostics = DiagnosticBag.GetInstance(); 362520"];
4326 [label="declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics); 362521"];
4327 [label="buildDeclaredMembersAndInitializers(diagnostics) 362522"];
4328 [label="DeclaredMembersAndInitializers? buildDeclaredMembersAndInitializers(DiagnosticBag diagnostics)\n            {\n                var builder = new DeclaredMembersAndInitializersBuilder();\n                AddDeclaredNontypeMembers(builder, diagnostics);\n\n                switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                }\n\n                if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                }\n\n                return builder.ToReadOnlyAndFree();\n            } 362523"];
4329 [label="DeclaredMembersAndInitializers? buildDeclaredMembersAndInitializers(DiagnosticBag diagnostics)\n            {\n                var builder = new DeclaredMembersAndInitializersBuilder();\n                AddDeclaredNontypeMembers(builder, diagnostics);\n\n                switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                }\n\n                if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                }\n\n                return builder.ToReadOnlyAndFree();\n            } 362524"];
4330 [label="var builder = new DeclaredMembersAndInitializersBuilder(); 362525"];
4331 [label="new DeclaredMembersAndInitializersBuilder() 362526"];
4332 [label="param DeclaredMembersAndInitializersBuilder(this) 362527"];
4333 [label="ArrayBuilder<Symbol>.GetInstance() 362528"];
4334 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance() 362529"];
4335 [label="ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 362530"];
4336 [label="StaticInitializers = ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 362531"];
4337 [label="ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 362532"];
4338 [label="InstanceInitializers = ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 362533"];
4339 [label="HaveIndexers 362534"];
4340 [label="RecordDeclarationWithParameters 362535"];
4341 [label="RecordPrimaryConstructor 362536"];
4342 [label="1 362537"];
4343 [label="InstanceInitializersIndexForRecordDeclarationWithParameters = -1 362538"];
4344 [label="IsNullableEnabledForInstanceConstructorsAndFields 362539"];
4345 [label="IsNullableEnabledForStaticConstructorsAndFields 362540"];
4346 [label="AddDeclaredNontypeMembers(builder, diagnostics); 362541"];
4347 [label="AddDeclaredNontypeMembers(builder, diagnostics); 362542"];
4348 [label="AddDeclaredNontypeMembers(builder, diagnostics) 362543"];
4349 [label="param AddDeclaredNontypeMembers(DeclaredMembersAndInitializersBuilder builder) 362544"];
4350 [label="param AddDeclaredNontypeMembers(DiagnosticBag diagnostics) 362545"];
4351 [label="param AddDeclaredNontypeMembers(this) 362546"];
4352 [label="foreach (var decl in this.declaration.Declarations)\n            {\n                if (!decl.HasAnyNontypeMembers)\n                {\n                    continue;\n                }\n\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                var syntax = decl.SyntaxReference.GetSyntax();\n\n                switch (syntax.Kind())\n                {\n                    case SyntaxKind.EnumDeclaration:\n                        AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.DelegateDeclaration:\n                        SourceDelegateMethodSymbol.AddDelegateMembers(this, builder.NonTypeMembers, (DelegateDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.NamespaceDeclaration:\n                        // The members of a global anonymous type is in a syntax tree of a namespace declaration or a compilation unit.\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((NamespaceDeclarationSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.CompilationUnit:\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((CompilationUnitSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.StructDeclaration:\n                        var typeDecl = (TypeDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.RecordDeclaration:\n                        var recordDecl = (RecordDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder,\n                            instanceInitializers: noteRecordParameters(recordDecl, builder, diagnostics),\n                            recordDecl.Members,\n                            diagnostics);\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(syntax.Kind());\n                }\n            } 362547"];
4353 [label="if (!decl.HasAnyNontypeMembers)\n                {\n                    continue;\n                } 362548"];
4354 [label="if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                } 362549"];
4355 [label="var syntax = decl.SyntaxReference.GetSyntax(); 362550"];
4356 [label="switch (syntax.Kind())\n                {\n                    case SyntaxKind.EnumDeclaration:\n                        AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.DelegateDeclaration:\n                        SourceDelegateMethodSymbol.AddDelegateMembers(this, builder.NonTypeMembers, (DelegateDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.NamespaceDeclaration:\n                        // The members of a global anonymous type is in a syntax tree of a namespace declaration or a compilation unit.\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((NamespaceDeclarationSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.CompilationUnit:\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((CompilationUnitSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.StructDeclaration:\n                        var typeDecl = (TypeDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.RecordDeclaration:\n                        var recordDecl = (RecordDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder,\n                            instanceInitializers: noteRecordParameters(recordDecl, builder, diagnostics),\n                            recordDecl.Members,\n                            diagnostics);\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(syntax.Kind());\n                } 362551"];
4357 [label="AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics); 362552"];
4358 [label="AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics); 362553"];
4359 [label="AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics); 362554"];
4360 [label="AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics) 362555"];
4361 [label="param AddEnumMembers(DeclaredMembersAndInitializersBuilder result) 362556"];
4362 [label="param AddEnumMembers(EnumDeclarationSyntax syntax) 362557"];
4363 [label="param AddEnumMembers(DiagnosticBag diagnostics) 362558"];
4364 [label="param AddEnumMembers(this) 362559"];
4365 [label="SourceEnumConstantSymbol? otherSymbol = null; 362560"];
4366 [label="int otherSymbolOffset = 0; 362561"];
4367 [label="foreach (var member in syntax.Members)\n            {\n                SourceEnumConstantSymbol symbol;\n                var valueOpt = member.EqualsValue;\n\n                if (valueOpt != null)\n                {\n                    symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics);\n                }\n                else\n                {\n                    symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics);\n                }\n\n                result.NonTypeMembers.Add(symbol);\n\n                if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                }\n            } 362562"];
4368 [label="SourceEnumConstantSymbol symbol; 362563"];
4369 [label="var valueOpt = member.EqualsValue; 362564"];
4370 [label="if (valueOpt != null)\n                {\n                    symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics);\n                }\n                else\n                {\n                    symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics);\n                } 362565"];
4371 [label="if (valueOpt != null)\n                {\n                    symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics);\n                }\n                else\n                {\n                    symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics);\n                } 362566"];
4372 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362567"];
4373 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362568"];
4374 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362569"];
4375 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362570"];
4376 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362571"];
4377 [label="SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics) 362572"];
4378 [label="param CreateImplicitValuedConstant(SourceMemberContainerTypeSymbol containingEnum) 362573"];
4379 [label="param CreateImplicitValuedConstant(EnumMemberDeclarationSyntax syntax) 362574"];
4380 [label="param CreateImplicitValuedConstant(SourceEnumConstantSymbol otherConstant) 362575"];
4381 [label="param CreateImplicitValuedConstant(int otherConstantOffset) 362576"];
4382 [label="param CreateImplicitValuedConstant(DiagnosticBag diagnostics) 362577"];
4383 [label="if ((object)otherConstant == null)\n            {\n                Debug.Assert(otherConstantOffset == 0);\n                return new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics);\n            }\n            else\n            {\n                Debug.Assert(otherConstantOffset > 0);\n                return new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics);\n            } 362578"];
4384 [label="if ((object)otherConstant == null)\n            {\n                Debug.Assert(otherConstantOffset == 0);\n                return new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics);\n            }\n            else\n            {\n                Debug.Assert(otherConstantOffset > 0);\n                return new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics);\n            } 362579"];
4385 [label="Debug.Assert(otherConstantOffset == 0); 362580"];
4386 [label="Debug.Assert(otherConstantOffset == 0); 362581"];
4387 [label="return new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics); 362582"];
4388 [label="return new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics); 362583"];
4389 [label="return new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics); 362584"];
4390 [label="return new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics); 362585"];
4391 [label="new ZeroValuedEnumConstantSymbol(containingEnum, syntax, diagnostics) 362586"];
4392 [label="param ZeroValuedEnumConstantSymbol(SourceMemberContainerTypeSymbol containingEnum) 362587"];
4393 [label="param ZeroValuedEnumConstantSymbol(EnumMemberDeclarationSyntax syntax) 362588"];
4394 [label="param ZeroValuedEnumConstantSymbol(DiagnosticBag diagnostics) 362589"];
4395 [label="param ZeroValuedEnumConstantSymbol(this) 362590"];
4396 [label="containingEnum 362591"];
4397 [label="syntax 362592"];
4398 [label="diagnostics 362593"];
4399 [label="param ZeroValuedEnumConstantSymbol(this) 362594"];
4400 [label="param SourceEnumConstantSymbol(SourceMemberContainerTypeSymbol containingEnum) 362595"];
4401 [label="param SourceEnumConstantSymbol(EnumMemberDeclarationSyntax syntax) 362596"];
4402 [label="param SourceEnumConstantSymbol(DiagnosticBag diagnostics) 362597"];
4403 [label="param SourceEnumConstantSymbol(this) 362598"];
4404 [label="containingEnum 362599"];
4405 [label="syntax.Identifier.ValueText 362600"];
4406 [label="syntax.GetReference() 362601"];
4407 [label="syntax.Identifier 362602"];
4408 [label="syntax.Identifier 362603"];
4409 [label="param SourceFieldSymbolWithSyntaxReference(SourceMemberContainerTypeSymbol containingType) 362604"];
4410 [label="param SourceFieldSymbolWithSyntaxReference(string name) 362605"];
4411 [label="param SourceFieldSymbolWithSyntaxReference(SyntaxReference syntax) 362606"];
4412 [label="param SourceFieldSymbolWithSyntaxReference(Location location) 362607"];
4413 [label="param SourceFieldSymbolWithSyntaxReference(this) 362608"];
4414 [label="containingType 362609"];
4415 [label="param SourceFieldSymbolWithSyntaxReference(this) 362610"];
4416 [label="param SourceFieldSymbol(SourceMemberContainerTypeSymbol containingType) 362611"];
4417 [label="param SourceFieldSymbol(this) 362612"];
4418 [label="param SourceFieldSymbol(this) 362613"];
4419 [label="param FieldSymbolWithAttributesAndModifiers(this) 362614"];
4420 [label="param FieldSymbolWithAttributesAndModifiers(this) 362615"];
4421 [label="param FieldSymbol(this) 362616"];
4422 [label="param FieldSymbol(this) 362617"];
4423 [label="_lazyAdapter 362618"];
4424 [label="_lazyCustomAttributesBag 362619"];
4425 [label="containingType 362620"];
4426 [label="Debug.Assert((object)containingType != null); 362621"];
4427 [label="Debug.Assert((object)containingType != null); 362622"];
4428 [label="this.containingType 362623"];
4429 [label="_name 362624"];
4430 [label="_location 362625"];
4431 [label="_syntaxReference 362626"];
4432 [label="_lazyDocComment 362627"];
4433 [label="_lazyExpandedDocComment 362628"];
4434 [label="_lazyConstantEarlyDecodingValue = Microsoft.CodeAnalysis.ConstantValue.Unset 362629"];
4435 [label="_lazyConstantValue = Microsoft.CodeAnalysis.ConstantValue.Unset 362630"];
4436 [label="Debug.Assert(name != null); 362631"];
4437 [label="Debug.Assert(name != null); 362632"];
4438 [label="Debug.Assert(syntax != null); 362633"];
4439 [label="Debug.Assert(syntax != null); 362634"];
4440 [label="Debug.Assert(location != null); 362635"];
4441 [label="Debug.Assert(location != null); 362636"];
4442 [label="_name 362637"];
4443 [label="_syntaxReference 362638"];
4444 [label="_location 362639"];
4445 [label="syntax.Identifier 362640"];
4446 [label="syntax.Identifier.GetLocation() 362641"];
4447 [label="param SourceEnumConstantSymbol(this) 362642"];
4448 [label="param SourceEnumConstantSymbol(this) 362643"];
4449 [label="this.Name 362644"];
4450 [label="get\n            {\n                return _name;\n            } 362645"];
4451 [label="return _name; 362646"];
4452 [label="if (this.Name == WellKnownMemberNames.EnumBackingFieldName)\n            {\n                diagnostics.Add(ErrorCode.ERR_ReservedEnumerator, this.ErrorLocation, WellKnownMemberNames.EnumBackingFieldName);\n            } 362647"];
4453 [label="result.NonTypeMembers.Add(symbol); 362648"];
4454 [label="result.NonTypeMembers.Add(symbol); 362649"];
4455 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362650"];
4456 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362651"];
4457 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362652"];
4458 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362653"];
4459 [label="otherSymbol = symbol; 362654"];
4460 [label="otherSymbolOffset = 1; 362655"];
4461 [label="SourceEnumConstantSymbol symbol; 362656"];
4462 [label="symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics); 362657"];
4463 [label="symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics); 362658"];
4464 [label="symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics); 362659"];
4465 [label="SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics) 362660"];
4466 [label="param CreateExplicitValuedConstant(SourceMemberContainerTypeSymbol containingEnum) 362661"];
4467 [label="param CreateExplicitValuedConstant(EnumMemberDeclarationSyntax syntax) 362662"];
4468 [label="param CreateExplicitValuedConstant(DiagnosticBag diagnostics) 362663"];
4469 [label="var initializer = syntax.EqualsValue; 362664"];
4470 [label="Debug.Assert(initializer != null); 362665"];
4471 [label="Debug.Assert(initializer != null); 362666"];
4472 [label="return new ExplicitValuedEnumConstantSymbol(containingEnum, syntax, initializer, diagnostics); 362667"];
4473 [label="return new ExplicitValuedEnumConstantSymbol(containingEnum, syntax, initializer, diagnostics); 362668"];
4474 [label="return new ExplicitValuedEnumConstantSymbol(containingEnum, syntax, initializer, diagnostics); 362669"];
4475 [label="return new ExplicitValuedEnumConstantSymbol(containingEnum, syntax, initializer, diagnostics); 362670"];
4476 [label="return new ExplicitValuedEnumConstantSymbol(containingEnum, syntax, initializer, diagnostics); 362671"];
4477 [label="new ExplicitValuedEnumConstantSymbol(containingEnum, syntax, initializer, diagnostics) 362672"];
4478 [label="param ExplicitValuedEnumConstantSymbol(SourceMemberContainerTypeSymbol containingEnum) 362673"];
4479 [label="param ExplicitValuedEnumConstantSymbol(EnumMemberDeclarationSyntax syntax) 362674"];
4480 [label="param ExplicitValuedEnumConstantSymbol(EqualsValueClauseSyntax initializer) 362675"];
4481 [label="param ExplicitValuedEnumConstantSymbol(DiagnosticBag diagnostics) 362676"];
4482 [label="param ExplicitValuedEnumConstantSymbol(this) 362677"];
4483 [label="containingEnum 362678"];
4484 [label="syntax 362679"];
4485 [label="diagnostics 362680"];
4486 [label="param ExplicitValuedEnumConstantSymbol(this) 362681"];
4487 [label="param SourceEnumConstantSymbol(SourceMemberContainerTypeSymbol containingEnum) 362682"];
4488 [label="param SourceEnumConstantSymbol(EnumMemberDeclarationSyntax syntax) 362683"];
4489 [label="param SourceEnumConstantSymbol(DiagnosticBag diagnostics) 362684"];
4490 [label="containingType 362685"];
4491 [label="Debug.Assert((object)containingType != null); 362686"];
4492 [label="Debug.Assert((object)containingType != null); 362687"];
4493 [label="_name 362688"];
4494 [label="_location 362689"];
4495 [label="_syntaxReference 362690"];
4496 [label="Debug.Assert(name != null); 362691"];
4497 [label="Debug.Assert(name != null); 362692"];
4498 [label="Debug.Assert(syntax != null); 362693"];
4499 [label="Debug.Assert(syntax != null); 362694"];
4500 [label="Debug.Assert(location != null); 362695"];
4501 [label="Debug.Assert(location != null); 362696"];
4502 [label="param SourceEnumConstantSymbol(this) 362697"];
4503 [label="this.Name 362698"];
4504 [label="get\n            {\n                return _name;\n            } 362699"];
4505 [label="return _name; 362700"];
4506 [label="if (this.Name == WellKnownMemberNames.EnumBackingFieldName)\n            {\n                diagnostics.Add(ErrorCode.ERR_ReservedEnumerator, this.ErrorLocation, WellKnownMemberNames.EnumBackingFieldName);\n            } 362701"];
4507 [label="_equalsValueNodeRef 362702"];
4508 [label="_equalsValueNodeRef = initializer.GetReference(); 362703"];
4509 [label="_equalsValueNodeRef 362704"];
4510 [label="symbol = SourceEnumConstantSymbol.CreateExplicitValuedConstant(this, member, diagnostics); 362705"];
4511 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362706"];
4512 [label="otherSymbol = symbol; 362707"];
4513 [label="otherSymbolOffset = 1; 362708"];
4514 [label="SourceEnumConstantSymbol symbol; 362709"];
4515 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362710"];
4516 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362711"];
4517 [label="symbol = SourceEnumConstantSymbol.CreateImplicitValuedConstant(this, member, otherSymbol, otherSymbolOffset, diagnostics); 362712"];
4518 [label="param CreateImplicitValuedConstant(int otherConstantOffset) 362713"];
4519 [label="param CreateImplicitValuedConstant(DiagnosticBag diagnostics) 362714"];
4520 [label="Debug.Assert(otherConstantOffset > 0); 362715"];
4521 [label="Debug.Assert(otherConstantOffset > 0); 362716"];
4522 [label="return new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics); 362717"];
4523 [label="return new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics); 362718"];
4524 [label="return new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics); 362719"];
4525 [label="return new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics); 362720"];
4526 [label="new ImplicitValuedEnumConstantSymbol(containingEnum, syntax, otherConstant, (uint)otherConstantOffset, diagnostics) 362721"];
4527 [label="param ImplicitValuedEnumConstantSymbol(SourceMemberContainerTypeSymbol containingEnum) 362722"];
4528 [label="param ImplicitValuedEnumConstantSymbol(EnumMemberDeclarationSyntax syntax) 362723"];
4529 [label="param ImplicitValuedEnumConstantSymbol(SourceEnumConstantSymbol otherConstant) 362724"];
4530 [label="param ImplicitValuedEnumConstantSymbol(uint otherConstantOffset) 362725"];
4531 [label="param ImplicitValuedEnumConstantSymbol(DiagnosticBag diagnostics) 362726"];
4532 [label="param ImplicitValuedEnumConstantSymbol(this) 362727"];
4533 [label="containingEnum 362728"];
4534 [label="syntax 362729"];
4535 [label="diagnostics 362730"];
4536 [label="param ImplicitValuedEnumConstantSymbol(this) 362731"];
4537 [label="param SourceEnumConstantSymbol(SourceMemberContainerTypeSymbol containingEnum) 362732"];
4538 [label="param SourceEnumConstantSymbol(EnumMemberDeclarationSyntax syntax) 362733"];
4539 [label="param SourceEnumConstantSymbol(DiagnosticBag diagnostics) 362734"];
4540 [label="containingType 362735"];
4541 [label="Debug.Assert((object)containingType != null); 362736"];
4542 [label="Debug.Assert((object)containingType != null); 362737"];
4543 [label="_name 362738"];
4544 [label="_location 362739"];
4545 [label="_syntaxReference 362740"];
4546 [label="Debug.Assert(name != null); 362741"];
4547 [label="Debug.Assert(name != null); 362742"];
4548 [label="Debug.Assert(syntax != null); 362743"];
4549 [label="Debug.Assert(syntax != null); 362744"];
4550 [label="Debug.Assert(location != null); 362745"];
4551 [label="Debug.Assert(location != null); 362746"];
4552 [label="param SourceEnumConstantSymbol(this) 362747"];
4553 [label="this.Name 362748"];
4554 [label="get\n            {\n                return _name;\n            } 362749"];
4555 [label="return _name; 362750"];
4556 [label="if (this.Name == WellKnownMemberNames.EnumBackingFieldName)\n            {\n                diagnostics.Add(ErrorCode.ERR_ReservedEnumerator, this.ErrorLocation, WellKnownMemberNames.EnumBackingFieldName);\n            } 362751"];
4557 [label="_otherConstant 362752"];
4558 [label="_otherConstantOffset 362753"];
4559 [label="Debug.Assert((object)otherConstant != null); 362754"];
4560 [label="Debug.Assert((object)otherConstant != null); 362755"];
4561 [label="Debug.Assert(otherConstantOffset > 0); 362756"];
4562 [label="Debug.Assert(otherConstantOffset > 0); 362757"];
4563 [label="_otherConstant 362758"];
4564 [label="_otherConstantOffset 362759"];
4565 [label="result.NonTypeMembers.Add(symbol); 362760"];
4566 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362761"];
4567 [label="if (valueOpt != null || otherSymbol is null)\n                {\n                    otherSymbol = symbol;\n                    otherSymbolOffset = 1;\n                }\n                else\n                {\n                    otherSymbolOffset++;\n                } 362762"];
4568 [label="otherSymbolOffset++; 362763"];
4569 [label="AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics); 362764"];
4570 [label="AddDeclaredNontypeMembers(builder, diagnostics); 362765"];
4571 [label="TypeKind 362766"];
4572 [label="get\n            {\n                return _flags.TypeKind;\n            } 362767"];
4573 [label="_flags.TypeKind 362768"];
4574 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 362769"];
4575 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 362770"];
4576 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 362771"];
4577 [label="return _flags.TypeKind; 362772"];
4578 [label="switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                } 362773"];
4579 [label="CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics); 362774"];
4580 [label="CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics); 362775"];
4581 [label="CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics); 362776"];
4582 [label="CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics) 362777"];
4583 [label="param CheckForStructDefaultConstructors(ArrayBuilder<Symbol> members) 362778"];
4584 [label="param CheckForStructDefaultConstructors(bool isEnum) 362779"];
4585 [label="param CheckForStructDefaultConstructors(DiagnosticBag diagnostics) 362780"];
4586 [label="foreach (var s in members)\n            {\n                var m = s as MethodSymbol;\n                if (!(m is null))\n                {\n                    if (m.MethodKind == MethodKind.Constructor && m.ParameterCount == 0)\n                    {\n                        if (isEnum)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_EnumsCantContainDefaultConstructor, m.Locations[0]);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_StructsCantContainDefaultConstructor, m.Locations[0]);\n                        }\n                    }\n                }\n            } 362781"];
4587 [label="var m = s as MethodSymbol; 362782"];
4588 [label="if (!(m is null))\n                {\n                    if (m.MethodKind == MethodKind.Constructor && m.ParameterCount == 0)\n                    {\n                        if (isEnum)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_EnumsCantContainDefaultConstructor, m.Locations[0]);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_StructsCantContainDefaultConstructor, m.Locations[0]);\n                        }\n                    }\n                } 362783"];
4589 [label="IsTupleType 362784"];
4590 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 362785"];
4591 [label="_ 362786"];
4592 [label="tupleCardinality: out _ 362787"];
4593 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 362788"];
4594 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 362789"];
4595 [label="param IsTupleTypeOfCardinality(this) 362790"];
4596 [label="IsUnboundGenericType 362791"];
4597 [label="get\n            {\n                return false;\n            } 362792"];
4598 [label="return false; 362793"];
4599 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362794"];
4600 [label="ContainingSymbol 362795"];
4601 [label="get\n            {\n                return _containingSymbol;\n            } 362796"];
4602 [label="return _containingSymbol; 362797"];
4603 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362798"];
4604 [label=".Kind 362799"];
4605 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 362800"];
4606 [label="return SymbolKind.Namespace; 362801"];
4607 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362802"];
4608 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362803"];
4609 [label="ContainingNamespace 362804"];
4610 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 362805"];
4611 [label="this.ContainingSymbol 362806"];
4612 [label="get\n            {\n                return _containingSymbol;\n            } 362807"];
4613 [label="return _containingSymbol; 362808"];
4614 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 362809"];
4615 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 362810"];
4616 [label="var ns = container as NamespaceSymbol; 362811"];
4617 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 362812"];
4618 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 362813"];
4619 [label="return ns; 362814"];
4620 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362815"];
4621 [label="ContainingNamespace.ContainingNamespace 362816"];
4622 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 362817"];
4623 [label="this.ContainingSymbol 362818"];
4624 [label="=> _container 362819"];
4625 [label="_container 362820"];
4626 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 362821"];
4627 [label="container.ContainingSymbol 362822"];
4628 [label="get\n            {\n                return _assemblySymbol;\n            } 362823"];
4629 [label="return _assemblySymbol; 362824"];
4630 [label="get\n            {\n                return null;\n            } 362825"];
4631 [label="return null; 362826"];
4632 [label="return null; 362827"];
4633 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362828"];
4634 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362829"];
4635 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 362830"];
4636 [label="tupleCardinality = 0; 362831"];
4637 [label="return false; 362832"];
4638 [label="if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                } 362833"];
4639 [label="if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                } 362834"];
4640 [label="if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                } 362835"];
4641 [label="builder.ToReadOnlyAndFree() 362836"];
4642 [label="param ToReadOnlyAndFree(this) 362837"];
4643 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362838"];
4644 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362839"];
4645 [label="MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers) 362840"];
4646 [label="param ToReadOnlyAndFree(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> initializers) 362841"];
4647 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 362842"];
4648 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 362843"];
4649 [label="initializers.Free(); 362844"];
4650 [label="return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty; 362845"];
4651 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362846"];
4652 [label="MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers) 362847"];
4653 [label="param ToReadOnlyAndFree(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> initializers) 362848"];
4654 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 362849"];
4655 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 362850"];
4656 [label="initializers.Free(); 362851"];
4657 [label="return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty; 362852"];
4658 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362853"];
4659 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362854"];
4660 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362855"];
4661 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362856"];
4662 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362857"];
4663 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362858"];
4664 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 362859"];
4665 [label="new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields) 362860"];
4666 [label="param DeclaredMembersAndInitializers(ImmutableArray<Symbol> nonTypeMembers) 362861"];
4667 [label="param DeclaredMembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> staticInitializers) 362862"];
4668 [label="param DeclaredMembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> instanceInitializers) 362863"];
4669 [label="param DeclaredMembersAndInitializers(bool haveIndexers) 362864"];
4670 [label="param DeclaredMembersAndInitializers(RecordDeclarationSyntax? recordDeclarationWithParameters) 362865"];
4671 [label="param DeclaredMembersAndInitializers(SynthesizedRecordConstructor? recordPrimaryConstructor) 362866"];
4672 [label="param DeclaredMembersAndInitializers(int instanceInitializersIndexForRecordDeclarationWithParameters) 362867"];
4673 [label="param DeclaredMembersAndInitializers(bool isNullableEnabledForInstanceConstructorsAndFields) 362868"];
4674 [label="param DeclaredMembersAndInitializers(bool isNullableEnabledForStaticConstructorsAndFields) 362869"];
4675 [label="param DeclaredMembersAndInitializers(this) 362870"];
4676 [label="HaveIndexers 362871"];
4677 [label="RecordDeclarationWithParameters 362872"];
4678 [label="RecordPrimaryConstructor 362873"];
4679 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 362874"];
4680 [label="IsNullableEnabledForInstanceConstructorsAndFields 362875"];
4681 [label="IsNullableEnabledForStaticConstructorsAndFields 362876"];
4682 [label="Debug.Assert(!nonTypeMembers.IsDefault); 362877"];
4683 [label="Debug.Assert(!staticInitializers.IsDefault); 362878"];
4684 [label="Debug.Assert(!instanceInitializers.IsDefault); 362879"];
4685 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 362880"];
4686 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 362881"];
4687 [label="Debug.Assert(recordDeclarationWithParameters is object == recordPrimaryConstructor is object); 362882"];
4688 [label="this.NonTypeMembers 362883"];
4689 [label="this.StaticInitializers 362884"];
4690 [label="this.InstanceInitializers 362885"];
4691 [label="this.HaveIndexers 362886"];
4692 [label="this.RecordDeclarationWithParameters 362887"];
4693 [label="this.RecordPrimaryConstructor 362888"];
4694 [label="this.InstanceInitializersIndexForRecordDeclarationWithParameters 362889"];
4695 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 362890"];
4696 [label="this.IsNullableEnabledForStaticConstructorsAndFields 362891"];
4697 [label="return builder.ToReadOnlyAndFree(); 362892"];
4698 [label="declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics); 362893"];
4699 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 362894"];
4700 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 362895"];
4701 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 362896"];
4702 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 362897"];
4703 [label="if (alreadyKnown != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    diagnostics.Free();\n                    return alreadyKnown;\n                } 362898"];
4704 [label="AddDeclarationDiagnostics(diagnostics); 362899"];
4705 [label="AddDeclarationDiagnostics(diagnostics) 362900"];
4706 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 362901"];
4707 [label="param AddDeclarationDiagnostics(this) 362902"];
4708 [label="ContainingSymbol 362903"];
4709 [label="get\n            {\n                return _containingSymbol;\n            } 362904"];
4710 [label="return _containingSymbol; 362905"];
4711 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 362906"];
4712 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 362907"];
4713 [label="AddDeclarationDiagnostics(diagnostics); 362908"];
4714 [label="diagnostics.Free(); 362909"];
4715 [label="return declaredMembersAndInitializers!; 362910"];
4716 [label="var declaredMembersAndInitializers = getDeclaredMembersAndInitializers(); 362911"];
4717 [label="if (declaredMembersAndInitializers is null)\n            {\n                // Another thread completed the work before this one\n                return null;\n            } 362912"];
4718 [label="var membersAndInitializersBuilder = new MembersAndInitializersBuilder(declaredMembersAndInitializers); 362913"];
4719 [label="var membersAndInitializersBuilder = new MembersAndInitializersBuilder(declaredMembersAndInitializers); 362914"];
4720 [label="new MembersAndInitializersBuilder(declaredMembersAndInitializers) 362915"];
4721 [label="param MembersAndInitializersBuilder(DeclaredMembersAndInitializers declaredMembersAndInitializers) 362916"];
4722 [label="param MembersAndInitializersBuilder(this) 362917"];
4723 [label="NonTypeMembers 362918"];
4724 [label="InstanceInitializersForPositionalMembers 362919"];
4725 [label="IsNullableEnabledForInstanceConstructorsAndFields 362920"];
4726 [label="IsNullableEnabledForStaticConstructorsAndFields 362921"];
4727 [label="Debug.Assert(declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel); 362922"];
4728 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 362923"];
4729 [label="this.IsNullableEnabledForStaticConstructorsAndFields 362924"];
4730 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 362925"];
4731 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 362926"];
4732 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 362927"];
4733 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics) 362928"];
4734 [label="param AddSynthesizedMembers(MembersAndInitializersBuilder builder) 362929"];
4735 [label="param AddSynthesizedMembers(DeclaredMembersAndInitializers declaredMembersAndInitializers) 362930"];
4736 [label="param AddSynthesizedMembers(DiagnosticBag diagnostics) 362931"];
4737 [label="param AddSynthesizedMembers(this) 362932"];
4738 [label="TypeKind 362933"];
4739 [label="get\n            {\n                return _flags.TypeKind;\n            } 362934"];
4740 [label="_flags.TypeKind 362935"];
4741 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 362936"];
4742 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 362937"];
4743 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 362938"];
4744 [label="return _flags.TypeKind; 362939"];
4745 [label="switch (TypeKind)\n            {\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Class:\n                case TypeKind.Interface:\n                case TypeKind.Submission:\n                    AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics);\n                    AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics);\n                    break;\n\n                default:\n                    break;\n            } 362940"];
4746 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362941"];
4747 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362942"];
4748 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362943"];
4749 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics) 362944"];
4750 [label="param AddSynthesizedRecordMembersIfNecessary(MembersAndInitializersBuilder builder) 362945"];
4751 [label="param AddSynthesizedRecordMembersIfNecessary(DeclaredMembersAndInitializers declaredMembersAndInitializers) 362946"];
4752 [label="param AddSynthesizedRecordMembersIfNecessary(DiagnosticBag diagnostics) 362947"];
4753 [label="param AddSynthesizedRecordMembersIfNecessary(this) 362948"];
4754 [label="if (declaration.Kind != DeclarationKind.Record)\n            {\n                return;\n            } 362949"];
4755 [label="return; 362950"];
4756 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362951"];
4757 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362952"];
4758 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362953"];
4759 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 362954"];
4760 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics) 362955"];
4761 [label="param AddSynthesizedConstructorsIfNecessary(MembersAndInitializersBuilder builder) 362956"];
4762 [label="param AddSynthesizedConstructorsIfNecessary(DeclaredMembersAndInitializers declaredMembersAndInitializers) 362957"];
4763 [label="param AddSynthesizedConstructorsIfNecessary(DiagnosticBag diagnostics) 362958"];
4764 [label="param AddSynthesizedConstructorsIfNecessary(this) 362959"];
4765 [label="var hasInstanceConstructor = false; 362960"];
4766 [label="var hasParameterlessInstanceConstructor = false; 362961"];
4767 [label="var hasStaticConstructor = false; 362962"];
4768 [label="var membersSoFar = builder.GetNonTypeMembers(declaredMembersAndInitializers); 362963"];
4769 [label="builder.GetNonTypeMembers(declaredMembersAndInitializers) 362964"];
4770 [label="param GetNonTypeMembers(DeclaredMembersAndInitializers declaredMembers) 362965"];
4771 [label="param GetNonTypeMembers(this) 362966"];
4772 [label="return NonTypeMembers ?? (IReadOnlyCollection<Symbol>)declaredMembers.NonTypeMembers; 362967"];
4773 [label="return NonTypeMembers ?? (IReadOnlyCollection<Symbol>)declaredMembers.NonTypeMembers; 362968"];
4774 [label="foreach (var member in membersSoFar)\n            {\n                if (member.Kind == SymbolKind.Method)\n                {\n                    var method = (MethodSymbol)member;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    }\n                }\n\n                //kick out early if we've seen everything we're looking for\n                if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                }\n            } 362969"];
4775 [label="member.Kind 362970"];
4776 [label="get\n            {\n                return SymbolKind.Field;\n            } 362971"];
4777 [label="return SymbolKind.Field; 362972"];
4778 [label="if (member.Kind == SymbolKind.Method)\n                {\n                    var method = (MethodSymbol)member;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    }\n                } 362973"];
4779 [label="if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                } 362974"];
4780 [label="'Expressions' 362975"];
4781 [label="'Linq' 362976"];
4782 [label="'' 362977"];
4783 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 362978"];
4784 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 362979"];
4785 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 362980"];
4786 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 362981"];
4787 [label="s_expressionsNamespaceName = { 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 362982"];
4788 [label="(type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 362983"];
4789 [label="s_containsTypeParameterPredicate =\n            (type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 362984"];
4790 [label="(type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 362985"];
4791 [label="s_isTypeParameterWithSpecificContainerPredicate =\n             (type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 362986"];
4792 [label="(type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 362987"];
4793 [label="s_containsTypeParametersPredicate =\n            (type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 362988"];
4794 [label="(type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 362989"];
4795 [label="s_containsDynamicPredicate = (type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 362990"];
4796 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 362991"];
4797 [label="this.IsStructType() 362992"];
4798 [label="param IsStructType(this TypeSymbol type) 362993"];
4799 [label="RoslynDebug.Assert((object)type != null); 362994"];
4800 [label="RoslynDebug.Assert((object)type != null); 362995"];
4801 [label="type.TypeKind 362996"];
4802 [label="get\n            {\n                return _flags.TypeKind;\n            } 362997"];
4803 [label="return type.TypeKind == TypeKind.Struct; 362998"];
4804 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 362999"];
4805 [label="this.IsStatic 363000"];
4806 [label="=> HasFlag(DeclarationModifiers.Static) 363001"];
4807 [label="DeclarationModifiers.Static 363002"];
4808 [label="HasFlag(DeclarationModifiers.Static) 363003"];
4809 [label="param HasFlag(DeclarationModifiers flag) 363004"];
4810 [label="=> (_declModifiers & flag) != 0 363005"];
4811 [label="_declModifiers & flag 363006"];
4812 [label="0 363007"];
4813 [label="(_declModifiers & flag) != 0 363008"];
4814 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 363009"];
4815 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 363010"];
4816 [label="this.IsInterface 363011"];
4817 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 363012"];
4818 [label="this.TypeKind 363013"];
4819 [label="get\n            {\n                return _flags.TypeKind;\n            } 363014"];
4820 [label="return this.TypeKind == TypeKind.Interface; 363015"];
4821 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 363016"];
4822 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 363017"];
4823 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 363018"];
4824 [label="this.TypeKind 363019"];
4825 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers); 363020"];
4826 [label="(this.TypeKind == TypeKind.Submission) 363021"];
4827 [label="new SynthesizedInstanceConstructor(this) 363022"];
4828 [label="param SynthesizedInstanceConstructor(NamedTypeSymbol containingType) 363023"];
4829 [label="param SynthesizedInstanceConstructor(this) 363024"];
4830 [label="param SynthesizedInstanceConstructor(this) 363025"];
4831 [label="param SynthesizedInstanceMethodSymbol(this) 363026"];
4832 [label="null 363027"];
4833 [label="None = null 363028"];
4834 [label="param SynthesizedInstanceMethodSymbol(this) 363029"];
4835 [label="param MethodSymbol(this) 363030"];
4836 [label="param MethodSymbol(this) 363031"];
4837 [label="_lazyAdapter 363032"];
4838 [label="_lazyParameterSignature 363033"];
4839 [label="_lazyThisParameter 363034"];
4840 [label="_containingType 363035"];
4841 [label="Debug.Assert((object)containingType != null); 363036"];
4842 [label="Debug.Assert((object)containingType != null); 363037"];
4843 [label="_containingType 363038"];
4844 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers); 363039"];
4845 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers) 363040"];
4846 [label="param AddNonTypeMember(Symbol member) 363041"];
4847 [label="param AddNonTypeMember(DeclaredMembersAndInitializers declaredMembers) 363042"];
4848 [label="param AddNonTypeMember(this) 363043"];
4849 [label="if (NonTypeMembers is null)\n                {\n                    NonTypeMembers = ArrayBuilder<Symbol>.GetInstance(declaredMembers.NonTypeMembers.Length + 1);\n                    NonTypeMembers.AddRange(declaredMembers.NonTypeMembers);\n                } 363044"];
4850 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance(declaredMembers.NonTypeMembers.Length + 1); 363045"];
4851 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance(declaredMembers.NonTypeMembers.Length + 1); 363046"];
4852 [label="NonTypeMembers 363047"];
4853 [label="NonTypeMembers.AddRange(declaredMembers.NonTypeMembers); 363048"];
4854 [label="NonTypeMembers.AddRange(declaredMembers.NonTypeMembers); 363049"];
4855 [label="NonTypeMembers.Add(member); 363050"];
4856 [label="NonTypeMembers.Add(member); 363051"];
4857 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers); 363052"];
4858 [label="if (!hasStaticConstructor && hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers))\n            {\n                // Note: we don't have to put anything in the method - the binder will\n                // do that when processing field initializers.\n                builder.AddNonTypeMember(new SynthesizedStaticConstructor(this), declaredMembersAndInitializers);\n            } 363053"];
4859 [label="hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers) 363054"];
4860 [label="static bool hasNonConstantInitializer(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> initializers)\n            {\n                return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst));\n            } 363055"];
4861 [label="return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst)); 363056"];
4862 [label="return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst)); 363057"];
4863 [label="if (!hasStaticConstructor && hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers))\n            {\n                // Note: we don't have to put anything in the method - the binder will\n                // do that when processing field initializers.\n                builder.AddNonTypeMember(new SynthesizedStaticConstructor(this), declaredMembersAndInitializers);\n            } 363058"];
4864 [label="this.IsScriptClass 363059"];
4865 [label="get\n            {\n                var kind = this.declaration.Declarations[0].Kind;\n                return kind == DeclarationKind.Script || kind == DeclarationKind.Submission;\n            } 363060"];
4866 [label="var kind = this.declaration.Declarations[0].Kind; 363061"];
4867 [label="var kind = this.declaration.Declarations[0].Kind; 363062"];
4868 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 363063"];
4869 [label="if (this.IsScriptClass)\n            {\n                var scriptInitializer = new SynthesizedInteractiveInitializerMethod(this, diagnostics);\n                builder.AddNonTypeMember(scriptInitializer, declaredMembersAndInitializers);\n                var scriptEntryPoint = SynthesizedEntryPointSymbol.Create(scriptInitializer, diagnostics);\n                builder.AddNonTypeMember(scriptEntryPoint, declaredMembersAndInitializers);\n            } 363064"];
4870 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 363065"];
4871 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 363066"];
4872 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) != null)\n            {\n                // Another thread completed the work before this one\n                membersAndInitializersBuilder.Free();\n                return null;\n            } 363067"];
4873 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) != null)\n            {\n                // Another thread completed the work before this one\n                membersAndInitializersBuilder.Free();\n                return null;\n            } 363068"];
4874 [label="return membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers); 363069"];
4875 [label="membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers) 363070"];
4876 [label="param ToReadOnlyAndFree(DeclaredMembersAndInitializers declaredMembers) 363071"];
4877 [label="param ToReadOnlyAndFree(this) 363072"];
4878 [label="var nonTypeMembers = NonTypeMembers?.ToImmutableAndFree() ?? declaredMembers.NonTypeMembers; 363073"];
4879 [label="var instanceInitializers = InstanceInitializersForPositionalMembers is null\n                    ? declaredMembers.InstanceInitializers\n                    : mergeInitializers(); 363074"];
4880 [label="InstanceInitializersForPositionalMembers is null 363075"];
4881 [label="declaredMembers.InstanceInitializers 363076"];
4882 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 363077"];
4883 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 363078"];
4884 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 363079"];
4885 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 363080"];
4886 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 363081"];
4887 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 363082"];
4888 [label="new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields) 363083"];
4889 [label="param MembersAndInitializers(ImmutableArray<Symbol> nonTypeMembers) 363084"];
4890 [label="param MembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> staticInitializers) 363085"];
4891 [label="param MembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> instanceInitializers) 363086"];
4892 [label="param MembersAndInitializers(bool haveIndexers) 363087"];
4893 [label="param MembersAndInitializers(bool isNullableEnabledForInstanceConstructorsAndFields) 363088"];
4894 [label="param MembersAndInitializers(bool isNullableEnabledForStaticConstructorsAndFields) 363089"];
4895 [label="param MembersAndInitializers(this) 363090"];
4896 [label="HaveIndexers 363091"];
4897 [label="IsNullableEnabledForInstanceConstructorsAndFields 363092"];
4898 [label="IsNullableEnabledForStaticConstructorsAndFields 363093"];
4899 [label="Debug.Assert(!nonTypeMembers.IsDefault); 363094"];
4900 [label="Debug.Assert(!staticInitializers.IsDefault); 363095"];
4901 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 363096"];
4902 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 363097"];
4903 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 363098"];
4904 [label="Debug.Assert(!instanceInitializers.IsDefault); 363099"];
4905 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 363100"];
4906 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 363101"];
4907 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 363102"];
4908 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 363103"];
4909 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 363104"];
4910 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 363105"];
4911 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363106"];
4912 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363107"];
4913 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363108"];
4914 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363109"];
4915 [label="param IsIndexer(this Symbol symbol) 363110"];
4916 [label="symbol.Kind 363111"];
4917 [label="get\n            {\n                return SymbolKind.Field;\n            } 363112"];
4918 [label="return SymbolKind.Field; 363113"];
4919 [label="return symbol.Kind == SymbolKind.Property && ((PropertySymbol)symbol).IsIndexer; 363114"];
4920 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363115"];
4921 [label="get\n            {\n                return SymbolKind.Method;\n            } 363116"];
4922 [label="return SymbolKind.Method; 363117"];
4923 [label="return symbol.Kind == SymbolKind.Property && ((PropertySymbol)symbol).IsIndexer; 363118"];
4924 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363119"];
4925 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 363120"];
4926 [label="this.NonTypeMembers 363121"];
4927 [label="this.StaticInitializers 363122"];
4928 [label="this.InstanceInitializers 363123"];
4929 [label="this.HaveIndexers 363124"];
4930 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 363125"];
4931 [label="this.IsNullableEnabledForStaticConstructorsAndFields 363126"];
4932 [label="return membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers); 363127"];
4933 [label="membersAndInitializers = BuildMembersAndInitializers(diagnostics); 363128"];
4934 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 363129"];
4935 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 363130"];
4936 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 363131"];
4937 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 363132"];
4938 [label="if (alreadyKnown != null)\n            {\n                diagnostics.Free();\n                return alreadyKnown;\n            } 363133"];
4939 [label="if (alreadyKnown != null)\n            {\n                diagnostics.Free();\n                return alreadyKnown;\n            } 363134"];
4940 [label="AddDeclarationDiagnostics(diagnostics); 363135"];
4941 [label="AddDeclarationDiagnostics(diagnostics) 363136"];
4942 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 363137"];
4943 [label="param AddDeclarationDiagnostics(this) 363138"];
4944 [label="ContainingSymbol 363139"];
4945 [label="get\n            {\n                return _containingSymbol;\n            } 363140"];
4946 [label="return _containingSymbol; 363141"];
4947 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 363142"];
4948 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 363143"];
4949 [label="AddDeclarationDiagnostics(diagnostics); 363144"];
4950 [label="diagnostics.Free(); 363145"];
4951 [label="_lazyDeclaredMembersAndInitializers = null; 363146"];
4952 [label="_lazyDeclaredMembersAndInitializers 363147"];
4953 [label="return membersAndInitializers!; 363148"];
4954 [label="var membersAndInitializers = GetMembersAndInitializers(); 363149"];
4955 [label="this.IsTupleType 363150"];
4956 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 363151"];
4957 [label="_ 363152"];
4958 [label="tupleCardinality: out _ 363153"];
4959 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 363154"];
4960 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 363155"];
4961 [label="param IsTupleTypeOfCardinality(this) 363156"];
4962 [label="IsUnboundGenericType 363157"];
4963 [label="get\n            {\n                return false;\n            } 363158"];
4964 [label="return false; 363159"];
4965 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363160"];
4966 [label="ContainingSymbol 363161"];
4967 [label="get\n            {\n                return _containingSymbol;\n            } 363162"];
4968 [label="return _containingSymbol; 363163"];
4969 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363164"];
4970 [label=".Kind 363165"];
4971 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 363166"];
4972 [label="return SymbolKind.Namespace; 363167"];
4973 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363168"];
4974 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363169"];
4975 [label="ContainingNamespace 363170"];
4976 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 363171"];
4977 [label="this.ContainingSymbol 363172"];
4978 [label="get\n            {\n                return _containingSymbol;\n            } 363173"];
4979 [label="return _containingSymbol; 363174"];
4980 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 363175"];
4981 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 363176"];
4982 [label="var ns = container as NamespaceSymbol; 363177"];
4983 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 363178"];
4984 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 363179"];
4985 [label="return ns; 363180"];
4986 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363181"];
4987 [label="ContainingNamespace.ContainingNamespace 363182"];
4988 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 363183"];
4989 [label="this.ContainingSymbol 363184"];
4990 [label="=> _container 363185"];
4991 [label="_container 363186"];
4992 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 363187"];
4993 [label="container.ContainingSymbol 363188"];
4994 [label="get\n            {\n                return _assemblySymbol;\n            } 363189"];
4995 [label="return _assemblySymbol; 363190"];
4996 [label="get\n            {\n                return null;\n            } 363191"];
4997 [label="return null; 363192"];
4998 [label="return null; 363193"];
4999 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363194"];
5000 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363195"];
5001 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 363196"];
5002 [label="tupleCardinality = 0; 363197"];
5003 [label="return false; 363198"];
5004 [label="if (!membersAndInitializers.HaveIndexers && !this.IsTupleType && _lazyEarlyAttributeDecodingMembersDictionary is object)\n            {\n                membersByName = _lazyEarlyAttributeDecodingMembersDictionary;\n            }\n            else\n            {\n                membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance);\n\n                // Merge types into the member dictionary\n                AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary());\n            } 363199"];
5005 [label="if (!membersAndInitializers.HaveIndexers && !this.IsTupleType && _lazyEarlyAttributeDecodingMembersDictionary is object)\n            {\n                membersByName = _lazyEarlyAttributeDecodingMembersDictionary;\n            }\n            else\n            {\n                membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance);\n\n                // Merge types into the member dictionary\n                AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary());\n            } 363200"];
5006 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 363201"];
5007 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 363202"];
5008 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 363203"];
5009 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 363204"];
5010 [label="get\n            {\n                return _name;\n            } 363205"];
5011 [label="return _name; 363206"];
5012 [label="get { return WellKnownMemberNames.InstanceConstructorName; } 363207"];
5013 [label="return WellKnownMemberNames.InstanceConstructorName; 363208"];
5014 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 363209"];
5015 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 363210"];
5016 [label="GetTypeMembersDictionary() 363211"];
5017 [label="param GetTypeMembersDictionary(this) 363212"];
5018 [label="if (_lazyTypeMembers == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                }\n\n                diagnostics.Free();\n            } 363213"];
5019 [label="if (_lazyTypeMembers == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                }\n\n                diagnostics.Free();\n            } 363214"];
5020 [label="var diagnostics = DiagnosticBag.GetInstance(); 363215"];
5021 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 363216"];
5022 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 363217"];
5023 [label="MakeTypeMembers(diagnostics) 363218"];
5024 [label="param MakeTypeMembers(DiagnosticBag diagnostics) 363219"];
5025 [label="param MakeTypeMembers(this) 363220"];
5026 [label="var symbols = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 363221"];
5027 [label="var conflictDict = new Dictionary<(string, int), SourceNamedTypeSymbol>(); 363222"];
5028 [label="foreach (var childDeclaration in declaration.Children)\n                {\n                    var t = new SourceNamedTypeSymbol(this, childDeclaration, diagnostics);\n                    this.CheckMemberNameDistinctFromType(t, diagnostics);\n\n                    var key = (t.Name, t.Arity);\n                    SourceNamedTypeSymbol? other;\n                    if (conflictDict.TryGetValue(key, out other))\n                    {\n                        if (Locations.Length == 1 || IsPartial)\n                        {\n                            if (t.IsPartial && other.IsPartial)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, t.Locations[0], t);\n                            }\n                            else\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, t.Locations[0], this, t.Name);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        conflictDict.Add(key, t);\n                    }\n\n                    symbols.Add(t);\n                } 363223"];
5029 [label="IsInterface 363224"];
5030 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 363225"];
5031 [label="if (IsInterface)\n                {\n                    foreach (var t in symbols)\n                    {\n                        Binder.CheckFeatureAvailability(t.DeclaringSyntaxReferences[0].GetSyntax(), MessageID.IDS_DefaultInterfaceImplementation, diagnostics, t.Locations[0]);\n                    }\n                } 363226"];
5032 [label="Debug.Assert(s_emptyTypeMembers.Count == 0); 363227"];
5033 [label="Debug.Assert(s_emptyTypeMembers.Count == 0); 363228"];
5034 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 363229"];
5035 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 363230"];
5036 [label="symbols.Count > 0 363231"];
5037 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 363232"];
5038 [label="symbols.Free(); 363233"];
5039 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 363234"];
5040 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 363235"];
5041 [label="AddDeclarationDiagnostics(diagnostics); 363236"];
5042 [label="AddDeclarationDiagnostics(diagnostics) 363237"];
5043 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 363238"];
5044 [label="param AddDeclarationDiagnostics(this) 363239"];
5045 [label="ContainingSymbol 363240"];
5046 [label="get\n            {\n                return _containingSymbol;\n            } 363241"];
5047 [label="return _containingSymbol; 363242"];
5048 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 363243"];
5049 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 363244"];
5050 [label="AddDeclarationDiagnostics(diagnostics); 363245"];
5051 [label="state.NotePartComplete(CompletionPart.TypeMembers); 363246"];
5052 [label="state.NotePartComplete(CompletionPart.TypeMembers) 363247"];
5053 [label="param NotePartComplete(CompletionPart part) 363248"];
5054 [label="diagnostics.Free(); 363249"];
5055 [label="return _lazyTypeMembers; 363250"];
5056 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 363251"];
5057 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()) 363252"];
5058 [label="param AddNestedTypesToDictionary(Dictionary<string, ImmutableArray<Symbol>> membersByName) 363253"];
5059 [label="param AddNestedTypesToDictionary(Dictionary<string, ImmutableArray<NamedTypeSymbol>> typesByName) 363254"];
5060 [label="foreach (var pair in typesByName)\n            {\n                string name = pair.Key;\n                ImmutableArray<NamedTypeSymbol> types = pair.Value;\n                ImmutableArray<Symbol> typesAsSymbols = StaticCast<Symbol>.From(types);\n\n                ImmutableArray<Symbol> membersForName;\n                if (membersByName.TryGetValue(name, out membersForName))\n                {\n                    membersByName[name] = membersForName.Concat(typesAsSymbols);\n                }\n                else\n                {\n                    membersByName.Add(name, typesAsSymbols);\n                }\n            } 363255"];
5061 [label="foreach (var pair in typesByName)\n            {\n                string name = pair.Key;\n                ImmutableArray<NamedTypeSymbol> types = pair.Value;\n                ImmutableArray<Symbol> typesAsSymbols = StaticCast<Symbol>.From(types);\n\n                ImmutableArray<Symbol> membersForName;\n                if (membersByName.TryGetValue(name, out membersForName))\n                {\n                    membersByName[name] = membersForName.Concat(typesAsSymbols);\n                }\n                else\n                {\n                    membersByName.Add(name, typesAsSymbols);\n                }\n            } 363256"];
5062 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 363257"];
5063 [label="MergePartialMembers(ref membersByName, diagnostics); 363258"];
5064 [label="MergePartialMembers(ref membersByName, diagnostics); 363259"];
5065 [label="MergePartialMembers(ref membersByName, diagnostics) 363260"];
5066 [label="param MergePartialMembers(ref Dictionary<string, ImmutableArray<Symbol>> membersByName) 363261"];
5067 [label="param MergePartialMembers(DiagnosticBag diagnostics) 363262"];
5068 [label="param MergePartialMembers(this) 363263"];
5069 [label="var memberNames = ArrayBuilder<string>.GetInstance(membersByName.Count); 363264"];
5070 [label="memberNames.AddRange(membersByName.Keys); 363265"];
5071 [label="memberNames.AddRange(membersByName.Keys); 363266"];
5072 [label="var methodsBySignature = new Dictionary<MethodSymbol, SourceMemberMethodSymbol>(MemberSignatureComparer.PartialMethodsComparer); 363267"];
5073 [label="foreach (var name in memberNames)\n            {\n                methodsBySignature.Clear();\n                foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                }\n\n                foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                }\n            } 363268"];
5074 [label="foreach (var name in memberNames)\n            {\n                methodsBySignature.Clear();\n                foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                }\n\n                foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                }\n            } 363269"];
5075 [label="methodsBySignature.Clear(); 363270"];
5076 [label="foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                } 363271"];
5077 [label="var method = symbol as SourceMemberMethodSymbol; 363272"];
5078 [label="if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    } 363273"];
5079 [label="foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                } 363274"];
5080 [label="methodsBySignature.Clear(); 363275"];
5081 [label="foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                } 363276"];
5082 [label="memberNames.Free(); 363277"];
5083 [label="MergePartialMembers(ref membersByName, diagnostics); 363278"];
5084 [label="return membersByName; 363279"];
5085 [label="var membersDictionary = MakeAllMembers(diagnostics); 363280"];
5086 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 363281"];
5087 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 363282"];
5088 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 363283"];
5089 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 363284"];
5090 [label="AddDeclarationDiagnostics(diagnostics); 363285"];
5091 [label="AddDeclarationDiagnostics(diagnostics) 363286"];
5092 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 363287"];
5093 [label="param AddDeclarationDiagnostics(this) 363288"];
5094 [label="ContainingSymbol 363289"];
5095 [label="get\n            {\n                return _containingSymbol;\n            } 363290"];
5096 [label="return _containingSymbol; 363291"];
5097 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 363292"];
5098 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 363293"];
5099 [label="AddDeclarationDiagnostics(diagnostics); 363294"];
5100 [label="state.NotePartComplete(CompletionPart.Members); 363295"];
5101 [label="state.NotePartComplete(CompletionPart.Members) 363296"];
5102 [label="param NotePartComplete(CompletionPart part) 363297"];
5103 [label="diagnostics.Free(); 363298"];
5104 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)); 363299"];
5105 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)); 363300"];
5106 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)) 363301"];
5107 [label="param SpinWaitComplete(CompletionPart part) 363302"];
5108 [label="param SpinWaitComplete(CancellationToken cancellationToken) 363303"];
5109 [label="param SpinWaitComplete(this) 363304"];
5110 [label="if (HasComplete(part))\n            {\n                return;\n            } 363305"];
5111 [label="HasComplete(part) 363306"];
5112 [label="param HasComplete(CompletionPart part) 363307"];
5113 [label="param HasComplete(this) 363308"];
5114 [label="return (_completeParts & (int)part) == (int)part; 363309"];
5115 [label="return; 363310"];
5116 [label="return _lazyMembersDictionary; 363311"];
5117 [label="return GetMembersByNameSlow(); 363312"];
5118 [label="result = GetMembersByName().Flatten(null); 363313"];
5119 [label="result = GetMembersByName().Flatten(null); 363314"];
5120 [label="result = GetMembersByName().Flatten(null); 363315"];
5121 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersFlattened, result); 363316"];
5122 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersFlattened, result); 363317"];
5123 [label="result = _lazyMembersFlattened; 363318"];
5124 [label="return result.ConditionallyDeOrder(); 363319"];
5125 [label="var allMembers = this.GetMembersUnordered(); 363320"];
5126 [label="if (allMembers.Length > 1)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers);\n                } 363321"];
5127 [label="if (allMembers.Length > 1)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers);\n                } 363322"];
5128 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 363323"];
5129 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 363324"];
5130 [label="param ==(Symbol left) 363325"];
5131 [label="param ==(Symbol right) 363326"];
5132 [label="if (right is null)\n            {\n                return left is null;\n            } 363327"];
5133 [label="return (object)left == (object)right || right.Equals(left); 363328"];
5134 [label="return (object)left == (object)right || right.Equals(left); 363329"];
5135 [label="right.Equals(left) 363330"];
5136 [label="param Equals(object obj) 363331"];
5137 [label="param Equals(this) 363332"];
5138 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 363333"];
5139 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 363334"];
5140 [label="this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind) 363335"];
5141 [label="param Equals(Symbol other) 363336"];
5142 [label="param Equals(TypeCompareKind compareKind) 363337"];
5143 [label="param Equals(this) 363338"];
5144 [label="if (other is SubstitutedFieldSymbol sfs)\n            {\n                return sfs.Equals(this, compareKind);\n            } 363339"];
5145 [label="return base.Equals(other, compareKind); 363340"];
5146 [label="return base.Equals(other, compareKind); 363341"];
5147 [label="base.Equals(other, compareKind) 363342"];
5148 [label="param Equals(Symbol other) 363343"];
5149 [label="param Equals(TypeCompareKind compareKind) 363344"];
5150 [label="param Equals(this) 363345"];
5151 [label="return (object)this == other; 363346"];
5152 [label="param GetLexicalSortKey(this) 363347"];
5153 [label="return LexicalSortKey.SynthesizedCtor; 363348"];
5154 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 363349"];
5155 [label="param GetLexicalSortKey(this) 363350"];
5156 [label="return new LexicalSortKey(_location, this.DeclaringCompilation); 363351"];
5157 [label="this.DeclaringCompilation 363352"];
5158 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 363353"];
5159 [label="this.Kind 363354"];
5160 [label="get\n            {\n                return SymbolKind.Field;\n            } 363355"];
5161 [label="return SymbolKind.Field; 363356"];
5162 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 363357"];
5163 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 363358"];
5164 [label="this.ContainingSymbol 363359"];
5165 [label="get\n            {\n                return containingType;\n            } 363360"];
5166 [label="return containingType; 363361"];
5167 [label="var container = this.ContainingSymbol; 363362"];
5168 [label="return (object)container != null ? container.ContainingModule : null; 363363"];
5169 [label="return (object)container != null ? container.ContainingModule : null; 363364"];
5170 [label="(object)container != null 363365"];
5171 [label="container.ContainingModule 363366"];
5172 [label="get\n            {\n                return _containingSymbol;\n            } 363367"];
5173 [label="return _containingSymbol; 363368"];
5174 [label="return new LexicalSortKey(_location, this.DeclaringCompilation); 363369"];
5175 [label="return new LexicalSortKey(_location, this.DeclaringCompilation); 363370"];
5176 [label="new LexicalSortKey(_location, this.DeclaringCompilation) 363371"];
5177 [label="param LexicalSortKey(Location location) 363372"];
5178 [label="param LexicalSortKey(CSharpCompilation compilation) 363373"];
5179 [label="param LexicalSortKey(this) 363374"];
5180 [label="location.SourceTree 363375"];
5181 [label="location.SourceSpan.Start 363376"];
5182 [label="compilation 363377"];
5183 [label="param LexicalSortKey(this) 363378"];
5184 [label="param LexicalSortKey(SyntaxTree tree) 363379"];
5185 [label="param LexicalSortKey(int position) 363380"];
5186 [label="param LexicalSortKey(CSharpCompilation compilation) 363381"];
5187 [label="param LexicalSortKey(this) 363382"];
5188 [label="null 363383"];
5189 [label="tree == null 363384"];
5190 [label="tree 363385"];
5191 [label="compilation.GetSyntaxTreeOrdinal(tree) 363386"];
5192 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 363387"];
5193 [label="param GetSyntaxTreeOrdinal(this) 363388"];
5194 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 363389"];
5195 [label="this.ContainsSyntaxTree(tree) 363390"];
5196 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 363391"];
5197 [label="param ContainsSyntaxTree(this) 363392"];
5198 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 363393"];
5199 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 363394"];
5200 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 363395"];
5201 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 363396"];
5202 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 363397"];
5203 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 363398"];
5204 [label="position 363399"];
5205 [label="param LexicalSortKey(int treeOrdinal) 363400"];
5206 [label="param LexicalSortKey(int position) 363401"];
5207 [label="param LexicalSortKey(this) 363402"];
5208 [label="Debug.Assert(position >= 0); 363403"];
5209 [label="Debug.Assert(position >= 0); 363404"];
5210 [label="Debug.Assert(treeOrdinal >= 0); 363405"];
5211 [label="Debug.Assert(treeOrdinal >= 0); 363406"];
5212 [label="_treeOrdinal 363407"];
5213 [label="_position 363408"];
5214 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 363409"];
5215 [label="this.Kind 363410"];
5216 [label="get\n            {\n                return SymbolKind.Method;\n            } 363411"];
5217 [label="return SymbolKind.Method; 363412"];
5218 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 363413"];
5219 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 363414"];
5220 [label="get { return _containingType; } 363415"];
5221 [label="return _containingType; 363416"];
5222 [label="get\n            {\n                return SymbolKind.Field;\n            } 363417"];
5223 [label="return SymbolKind.Field; 363418"];
5224 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 363419"];
5225 [label="get\n            {\n                return containingType;\n            } 363420"];
5226 [label="param Compare(LexicalSortKey xSortKey) 363421"];
5227 [label="param Compare(LexicalSortKey ySortKey) 363422"];
5228 [label="int comparison; 363423"];
5229 [label="xSortKey.TreeOrdinal 363424"];
5230 [label="get { return _treeOrdinal; } 363425"];
5231 [label="return _treeOrdinal; 363426"];
5232 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 363427"];
5233 [label="ySortKey.TreeOrdinal 363428"];
5234 [label="get { return _treeOrdinal; } 363429"];
5235 [label="return _treeOrdinal; 363430"];
5236 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 363431"];
5237 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 363432"];
5238 [label="xSortKey.TreeOrdinal 363433"];
5239 [label="if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363434"];
5240 [label="if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363435"];
5241 [label="ySortKey.TreeOrdinal 363436"];
5242 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363437"];
5243 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363438"];
5244 [label="xSortKey.TreeOrdinal 363439"];
5245 [label="comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal; 363440"];
5246 [label="ySortKey.TreeOrdinal 363441"];
5247 [label="comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal; 363442"];
5248 [label="comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal; 363443"];
5249 [label="Debug.Assert(comparison != 0); 363444"];
5250 [label="Debug.Assert(comparison != 0); 363445"];
5251 [label="return comparison; 363446"];
5252 [label="param Equals(Symbol other) 363447"];
5253 [label="param Equals(TypeCompareKind compareKind) 363448"];
5254 [label="param Equals(this) 363449"];
5255 [label="if (other is SubstitutedMethodSymbol sms)\n            {\n                return sms.Equals(this, compareKind);\n            } 363450"];
5256 [label="if (other is NativeIntegerMethodSymbol nms)\n            {\n                return nms.Equals(this, compareKind);\n            } 363451"];
5257 [label="return base.Equals(other, compareKind); 363452"];
5258 [label="return base.Equals(other, compareKind); 363453"];
5259 [label="base.Equals(other, compareKind) 363454"];
5260 [label="param Equals(Symbol other) 363455"];
5261 [label="param Equals(TypeCompareKind compareKind) 363456"];
5262 [label="param Equals(this) 363457"];
5263 [label="return (object)this == other; 363458"];
5264 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 363459"];
5265 [label="Debug.Assert(position >= 0); 363460"];
5266 [label="Debug.Assert(treeOrdinal >= 0); 363461"];
5267 [label="xSortKey.TreeOrdinal 363462"];
5268 [label="if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363463"];
5269 [label="if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363464"];
5270 [label="ySortKey.TreeOrdinal 363465"];
5271 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363466"];
5272 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363467"];
5273 [label="Debug.Assert(comparison != 0); 363468"];
5274 [label="Debug.Assert(comparison != 0); 363469"];
5275 [label="Debug.Assert(position >= 0); 363470"];
5276 [label="Debug.Assert(treeOrdinal >= 0); 363471"];
5277 [label="if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363472"];
5278 [label="ySortKey.TreeOrdinal 363473"];
5279 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363474"];
5280 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363475"];
5281 [label="Debug.Assert(comparison != 0); 363476"];
5282 [label="xSortKey.Position 363477"];
5283 [label="get { return _position; } 363478"];
5284 [label="return _position; 363479"];
5285 [label="return xSortKey.Position - ySortKey.Position; 363480"];
5286 [label="ySortKey.Position 363481"];
5287 [label="get { return _position; } 363482"];
5288 [label="return _position; 363483"];
5289 [label="return xSortKey.Position - ySortKey.Position; 363484"];
5290 [label="return xSortKey.Position - ySortKey.Position; 363485"];
5291 [label="Debug.Assert(position >= 0); 363486"];
5292 [label="Debug.Assert(treeOrdinal >= 0); 363487"];
5293 [label="if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363488"];
5294 [label="ySortKey.TreeOrdinal 363489"];
5295 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363490"];
5296 [label="if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                } 363491"];
5297 [label="Debug.Assert(comparison != 0); 363492"];
5298 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers); 363493"];
5299 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers); 363494"];
5300 [label="_flags.SetFlattenedMembersIsSorted() 363495"];
5301 [label="param SetFlattenedMembersIsSorted(this) 363496"];
5302 [label="ThreadSafeFlagOperations.Set(ref _flags, (FlattenedMembersIsSortedBit)); 363497"];
5303 [label="ThreadSafeFlagOperations.Set(ref _flags, (FlattenedMembersIsSortedBit)); 363498"];
5304 [label="_flags.SetFlattenedMembersIsSorted(); 363499"];
5305 [label="return allMembers; 363500"];
5306 [label="var fields = v.GetMembers().OfType<FieldSymbol>().ToList(); 363501"];
5307 [label="var fields = v.GetMembers().OfType<FieldSymbol>().ToList(); 363502"];
5308 [label="CustomAssert.Equal(3, fields.Count); 363503"];
5309 [label="CustomAssert.Equal(3, fields.Count); 363504"];
5310 [label="CheckField(fields[0], 'One', isStatic: true); 363505"];
5311 [label="CheckField(fields[0], 'One', isStatic: true); 363506"];
5312 [label="CheckField(fields[0], 'One', isStatic: true) 363507"];
5313 [label="param CheckField(Symbol symbol) 363508"];
5314 [label="param CheckField(string name) 363509"];
5315 [label="param CheckField(bool isStatic) 363510"];
5316 [label="param CheckField(this) 363511"];
5317 [label="CustomAssert.Equal(SymbolKind.Field, symbol.Kind); 363512"];
5318 [label="symbol.Kind 363513"];
5319 [label="get\n            {\n                return SymbolKind.Field;\n            } 363514"];
5320 [label="return SymbolKind.Field; 363515"];
5321 [label="CustomAssert.Equal(SymbolKind.Field, symbol.Kind); 363516"];
5322 [label="CustomAssert.Equal(name, symbol.Name); 363517"];
5323 [label="symbol.Name 363518"];
5324 [label="get\n            {\n                return _name;\n            } 363519"];
5325 [label="CustomAssert.Equal(name, symbol.Name); 363520"];
5326 [label="CustomAssert.Equal(name, symbol.Name); 363521"];
5327 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363522"];
5328 [label="symbol.IsStatic 363523"];
5329 [label="=> (Modifiers & DeclarationModifiers.Static) != 0 363524"];
5330 [label="Modifiers 363525"];
5331 [label="get\n            {\n                return DeclarationModifiers.Const | DeclarationModifiers.Static | DeclarationModifiers.Public;\n            } 363526"];
5332 [label="return DeclarationModifiers.Const | DeclarationModifiers.Static | DeclarationModifiers.Public; 363527"];
5333 [label="Modifiers & DeclarationModifiers.Static 363528"];
5334 [label="0 363529"];
5335 [label="(Modifiers & DeclarationModifiers.Static) != 0 363530"];
5336 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363531"];
5337 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363532"];
5338 [label="CheckField(fields[1], 'Two', isStatic: true); 363533"];
5339 [label="CheckField(fields[1], 'Two', isStatic: true); 363534"];
5340 [label="CheckField(fields[1], 'Two', isStatic: true) 363535"];
5341 [label="param CheckField(Symbol symbol) 363536"];
5342 [label="param CheckField(string name) 363537"];
5343 [label="param CheckField(bool isStatic) 363538"];
5344 [label="param CheckField(this) 363539"];
5345 [label="CustomAssert.Equal(SymbolKind.Field, symbol.Kind); 363540"];
5346 [label="symbol.Kind 363541"];
5347 [label="get\n            {\n                return SymbolKind.Field;\n            } 363542"];
5348 [label="return SymbolKind.Field; 363543"];
5349 [label="CustomAssert.Equal(SymbolKind.Field, symbol.Kind); 363544"];
5350 [label="CustomAssert.Equal(name, symbol.Name); 363545"];
5351 [label="symbol.Name 363546"];
5352 [label="get\n            {\n                return _name;\n            } 363547"];
5353 [label="CustomAssert.Equal(name, symbol.Name); 363548"];
5354 [label="CustomAssert.Equal(name, symbol.Name); 363549"];
5355 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363550"];
5356 [label="symbol.IsStatic 363551"];
5357 [label="=> (Modifiers & DeclarationModifiers.Static) != 0 363552"];
5358 [label="Modifiers 363553"];
5359 [label="get\n            {\n                return DeclarationModifiers.Const | DeclarationModifiers.Static | DeclarationModifiers.Public;\n            } 363554"];
5360 [label="return DeclarationModifiers.Const | DeclarationModifiers.Static | DeclarationModifiers.Public; 363555"];
5361 [label="Modifiers & DeclarationModifiers.Static 363556"];
5362 [label="0 363557"];
5363 [label="(Modifiers & DeclarationModifiers.Static) != 0 363558"];
5364 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363559"];
5365 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363560"];
5366 [label="CheckField(fields[2], 'Three', isStatic: true); 363561"];
5367 [label="CheckField(fields[2], 'Three', isStatic: true); 363562"];
5368 [label="CheckField(fields[2], 'Three', isStatic: true) 363563"];
5369 [label="param CheckField(Symbol symbol) 363564"];
5370 [label="param CheckField(string name) 363565"];
5371 [label="param CheckField(bool isStatic) 363566"];
5372 [label="param CheckField(this) 363567"];
5373 [label="CustomAssert.Equal(SymbolKind.Field, symbol.Kind); 363568"];
5374 [label="symbol.Kind 363569"];
5375 [label="get\n            {\n                return SymbolKind.Field;\n            } 363570"];
5376 [label="return SymbolKind.Field; 363571"];
5377 [label="CustomAssert.Equal(SymbolKind.Field, symbol.Kind); 363572"];
5378 [label="CustomAssert.Equal(name, symbol.Name); 363573"];
5379 [label="symbol.Name 363574"];
5380 [label="get\n            {\n                return _name;\n            } 363575"];
5381 [label="CustomAssert.Equal(name, symbol.Name); 363576"];
5382 [label="CustomAssert.Equal(name, symbol.Name); 363577"];
5383 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363578"];
5384 [label="symbol.IsStatic 363579"];
5385 [label="=> (Modifiers & DeclarationModifiers.Static) != 0 363580"];
5386 [label="Modifiers 363581"];
5387 [label="get\n            {\n                return DeclarationModifiers.Const | DeclarationModifiers.Static | DeclarationModifiers.Public;\n            } 363582"];
5388 [label="return DeclarationModifiers.Const | DeclarationModifiers.Static | DeclarationModifiers.Public; 363583"];
5389 [label="Modifiers & DeclarationModifiers.Static 363584"];
5390 [label="0 363585"];
5391 [label="(Modifiers & DeclarationModifiers.Static) != 0 363586"];
5392 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363587"];
5393 [label="CustomAssert.Equal(isStatic, symbol.IsStatic); 363588"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
42 -> 0;
43 -> 0;
44 -> 42;
44 -> 43;
44 -> 0;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 44;
49 -> 48;
50 -> 0;
51 -> 50;
52 -> 51;
52 -> 50;
53 -> 52;
55 -> 0;
56 -> 54;
56 -> 55;
57 -> 56;
58 -> 0;
59 -> 0;
60 -> 58;
60 -> 59;
60 -> 0;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 48;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 64;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 0;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 72;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 0;
93 -> 92;
95 -> 0;
96 -> 94;
96 -> 95;
97 -> 96;
98 -> 0;
99 -> 0;
100 -> 98;
100 -> 99;
100 -> 88;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 0;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 100;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 124;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 0;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 136;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 0;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 148;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 0;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
180 -> 0;
180 -> 179;
181 -> 180;
181 -> 0;
182 -> 181;
184 -> 183;
186 -> 185;
188 -> 187;
190 -> 189;
191 -> 3;
192 -> 191;
193 -> 192;
194 -> 193;
194 -> 192;
195 -> 1;
195 -> 2;
195 -> 194;
196 -> 1;
197 -> 1;
198 -> 197;
198 -> 1;
199 -> 1;
200 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 199;
203 -> 201;
203 -> 202;
204 -> 202;
205 -> 203;
205 -> 204;
205 -> 202;
206 -> 202;
206 -> 1;
207 -> 1;
208 -> 1;
209 -> 206;
209 -> 208;
210 -> 207;
210 -> 208;
211 -> 207;
211 -> 208;
212 -> 207;
212 -> 208;
213 -> 207;
213 -> 208;
214 -> 207;
214 -> 208;
215 -> 207;
215 -> 208;
216 -> 207;
216 -> 208;
217 -> 209;
217 -> 208;
218 -> 213;
218 -> 208;
219 -> 210;
219 -> 208;
220 -> 208;
221 -> 218;
221 -> 220;
222 -> 219;
222 -> 220;
223 -> 221;
223 -> 220;
224 -> 220;
225 -> 223;
225 -> 224;
226 -> 225;
226 -> 224;
227 -> 226;
228 -> 0;
228 -> 227;
229 -> 228;
230 -> 229;
231 -> 229;
232 -> 0;
232 -> 231;
233 -> 232;
233 -> 230;
233 -> 229;
234 -> 233;
234 -> 227;
235 -> 220;
236 -> 222;
236 -> 235;
236 -> 220;
237 -> 234;
237 -> 236;
238 -> 211;
238 -> 208;
239 -> 212;
239 -> 208;
240 -> 214;
240 -> 208;
241 -> 215;
241 -> 208;
242 -> 216;
242 -> 208;
243 -> 208;
244 -> 217;
244 -> 243;
245 -> 237;
245 -> 243;
246 -> 238;
246 -> 243;
247 -> 239;
247 -> 243;
248 -> 240;
248 -> 243;
249 -> 241;
249 -> 243;
250 -> 242;
250 -> 243;
251 -> 244;
251 -> 243;
252 -> 245;
252 -> 243;
253 -> 246;
253 -> 243;
254 -> 247;
254 -> 243;
255 -> 248;
255 -> 243;
256 -> 249;
256 -> 243;
257 -> 250;
257 -> 243;
258 -> 243;
259 -> 258;
259 -> 243;
260 -> 243;
261 -> 251;
261 -> 260;
262 -> 252;
262 -> 260;
263 -> 253;
263 -> 260;
264 -> 254;
264 -> 260;
265 -> 255;
265 -> 260;
266 -> 256;
266 -> 260;
267 -> 257;
267 -> 260;
268 -> 259;
268 -> 260;
269 -> 264;
269 -> 260;
270 -> 266;
270 -> 260;
271 -> 260;
272 -> 269;
272 -> 271;
273 -> 270;
273 -> 271;
274 -> 261;
274 -> 271;
275 -> 274;
275 -> 205;
275 -> 271;
276 -> 275;
277 -> 273;
277 -> 275;
278 -> 272;
278 -> 275;
279 -> 275;
280 -> 276;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 278;
282 -> 279;
283 -> 276;
283 -> 279;
284 -> 279;
285 -> 282;
285 -> 284;
285 -> 279;
286 -> 0;
287 -> 0;
289 -> 286;
289 -> 287;
289 -> 288;
290 -> 289;
291 -> 0;
292 -> 290;
292 -> 289;
292 -> 291;
293 -> 292;
294 -> 0;
295 -> 290;
295 -> 289;
295 -> 294;
296 -> 295;
297 -> 0;
298 -> 290;
298 -> 289;
298 -> 297;
299 -> 298;
300 -> 0;
301 -> 290;
301 -> 289;
301 -> 300;
302 -> 301;
303 -> 0;
304 -> 290;
304 -> 289;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 290;
307 -> 289;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 290;
310 -> 289;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 290;
313 -> 289;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 290;
316 -> 289;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 290;
319 -> 289;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 290;
322 -> 289;
322 -> 321;
323 -> 322;
324 -> 290;
327 -> 324;
327 -> 326;
328 -> 325;
328 -> 326;
329 -> 326;
330 -> 327;
330 -> 289;
330 -> 326;
331 -> 326;
332 -> 328;
332 -> 326;
333 -> 329;
333 -> 326;
334 -> 332;
334 -> 333;
334 -> 326;
335 -> 334;
335 -> 331;
335 -> 326;
336 -> 330;
336 -> 331;
336 -> 289;
336 -> 335;
336 -> 334;
336 -> 326;
337 -> 336;
338 -> 0;
339 -> 338;
341 -> 339;
341 -> 340;
342 -> 290;
342 -> 289;
342 -> 341;
343 -> 342;
344 -> 0;
345 -> 344;
346 -> 290;
346 -> 289;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 290;
349 -> 289;
349 -> 348;
350 -> 349;
351 -> 314;
353 -> 352;
354 -> 0;
355 -> 0;
356 -> 0;
358 -> 354;
358 -> 355;
358 -> 356;
358 -> 357;
359 -> 353;
360 -> 358;
360 -> 359;
360 -> 352;
361 -> 360;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 296;
366 -> 289;
366 -> 295;
366 -> 362;
366 -> 365;
367 -> 366;
368 -> 308;
369 -> 317;
370 -> 317;
371 -> 314;
372 -> 0;
373 -> 0;
375 -> 372;
375 -> 374;
376 -> 373;
376 -> 374;
377 -> 374;
378 -> 375;
378 -> 374;
379 -> 376;
379 -> 374;
380 -> 0;
380 -> 374;
381 -> 377;
381 -> 374;
382 -> 374;
383 -> 378;
383 -> 379;
383 -> 380;
383 -> 381;
383 -> 382;
383 -> 374;
384 -> 383;
385 -> 0;
386 -> 0;
388 -> 385;
388 -> 387;
389 -> 386;
389 -> 387;
390 -> 387;
391 -> 388;
391 -> 387;
392 -> 389;
392 -> 387;
393 -> 0;
393 -> 387;
394 -> 390;
394 -> 387;
395 -> 387;
396 -> 391;
396 -> 392;
396 -> 393;
396 -> 394;
396 -> 395;
396 -> 387;
397 -> 396;
399 -> 384;
399 -> 383;
399 -> 398;
400 -> 399;
402 -> 397;
402 -> 396;
402 -> 401;
403 -> 402;
404 -> 0;
405 -> 0;
407 -> 404;
407 -> 406;
408 -> 405;
408 -> 406;
409 -> 406;
410 -> 407;
410 -> 406;
411 -> 408;
411 -> 406;
412 -> 0;
412 -> 406;
413 -> 409;
413 -> 406;
414 -> 406;
415 -> 410;
415 -> 411;
415 -> 412;
415 -> 413;
415 -> 414;
415 -> 406;
416 -> 415;
417 -> 0;
418 -> 0;
420 -> 417;
420 -> 419;
421 -> 418;
421 -> 419;
422 -> 419;
423 -> 420;
423 -> 419;
424 -> 421;
424 -> 419;
425 -> 0;
425 -> 419;
426 -> 422;
426 -> 419;
427 -> 419;
428 -> 423;
428 -> 424;
428 -> 425;
428 -> 426;
428 -> 427;
428 -> 419;
429 -> 428;
430 -> 0;
431 -> 0;
433 -> 430;
433 -> 432;
434 -> 431;
434 -> 432;
435 -> 432;
436 -> 433;
436 -> 432;
437 -> 434;
437 -> 432;
438 -> 0;
438 -> 432;
439 -> 435;
439 -> 432;
440 -> 432;
441 -> 436;
441 -> 437;
441 -> 438;
441 -> 439;
441 -> 440;
441 -> 432;
442 -> 441;
443 -> 0;
444 -> 0;
446 -> 443;
446 -> 445;
447 -> 444;
447 -> 445;
448 -> 445;
449 -> 446;
449 -> 445;
450 -> 447;
450 -> 445;
451 -> 0;
451 -> 445;
452 -> 448;
452 -> 445;
453 -> 445;
454 -> 449;
454 -> 450;
454 -> 451;
454 -> 452;
454 -> 453;
454 -> 445;
455 -> 454;
456 -> 0;
457 -> 0;
459 -> 456;
459 -> 458;
460 -> 457;
460 -> 458;
461 -> 458;
462 -> 459;
462 -> 458;
463 -> 460;
463 -> 458;
464 -> 0;
464 -> 458;
465 -> 461;
465 -> 458;
466 -> 458;
467 -> 462;
467 -> 463;
467 -> 464;
467 -> 465;
467 -> 466;
467 -> 458;
468 -> 467;
469 -> 0;
470 -> 0;
472 -> 469;
472 -> 471;
473 -> 470;
473 -> 471;
474 -> 471;
475 -> 472;
475 -> 471;
476 -> 473;
476 -> 471;
477 -> 0;
477 -> 471;
478 -> 474;
478 -> 471;
479 -> 471;
480 -> 475;
480 -> 476;
480 -> 477;
480 -> 478;
480 -> 479;
480 -> 471;
481 -> 480;
483 -> 384;
483 -> 383;
483 -> 482;
484 -> 483;
486 -> 397;
486 -> 396;
486 -> 485;
487 -> 486;
489 -> 416;
489 -> 415;
489 -> 488;
490 -> 489;
492 -> 429;
492 -> 428;
492 -> 491;
493 -> 492;
494 -> 0;
495 -> 384;
495 -> 383;
495 -> 494;
495 -> 0;
496 -> 495;
497 -> 0;
498 -> 397;
498 -> 396;
498 -> 497;
498 -> 0;
499 -> 498;
500 -> 0;
501 -> 468;
501 -> 467;
501 -> 500;
501 -> 0;
502 -> 501;
503 -> 0;
504 -> 416;
504 -> 415;
504 -> 503;
504 -> 0;
505 -> 504;
506 -> 0;
507 -> 0;
507 -> 506;
508 -> 507;
509 -> 290;
509 -> 285;
510 -> 280;
510 -> 279;
511 -> 0;
511 -> 279;
512 -> 511;
512 -> 283;
512 -> 279;
513 -> 279;
514 -> 510;
514 -> 512;
514 -> 513;
514 -> 0;
514 -> 279;
515 -> 514;
515 -> 279;
516 -> 509;
516 -> 279;
517 -> 281;
517 -> 279;
518 -> 279;
519 -> 515;
519 -> 516;
519 -> 517;
519 -> 518;
519 -> 514;
519 -> 289;
519 -> 279;
520 -> 279;
521 -> 519;
521 -> 520;
522 -> 520;
523 -> 520;
524 -> 521;
524 -> 519;
524 -> 523;
524 -> 520;
525 -> 522;
525 -> 520;
526 -> 520;
527 -> 524;
527 -> 519;
527 -> 523;
527 -> 525;
527 -> 526;
527 -> 522;
527 -> 520;
528 -> 520;
529 -> 528;
529 -> 522;
529 -> 520;
530 -> 522;
530 -> 520;
531 -> 520;
532 -> 530;
532 -> 531;
532 -> 522;
532 -> 529;
532 -> 520;
533 -> 521;
533 -> 520;
534 -> 533;
534 -> 276;
534 -> 275;
535 -> 276;
535 -> 260;
536 -> 260;
537 -> 263;
537 -> 536;
537 -> 260;
538 -> 535;
538 -> 537;
539 -> 537;
540 -> 538;
540 -> 539;
540 -> 276;
540 -> 534;
540 -> 519;
540 -> 537;
541 -> 540;
541 -> 537;
542 -> 384;
542 -> 541;
543 -> 0;
543 -> 260;
544 -> 268;
544 -> 260;
545 -> 265;
545 -> 535;
545 -> 262;
545 -> 542;
545 -> 260;
546 -> 545;
546 -> 260;
547 -> 260;
548 -> 546;
548 -> 547;
549 -> 0;
549 -> 547;
550 -> 549;
551 -> 260;
552 -> 545;
552 -> 276;
552 -> 534;
552 -> 519;
552 -> 233;
552 -> 0;
552 -> 383;
552 -> 230;
552 -> 260;
553 -> 260;
554 -> 553;
555 -> 552;
555 -> 554;
555 -> 260;
556 -> 0;
558 -> 556;
558 -> 557;
559 -> 558;
560 -> 0;
562 -> 560;
562 -> 561;
564 -> 562;
564 -> 563;
565 -> 564;
566 -> 552;
566 -> 553;
567 -> 552;
567 -> 553;
568 -> 552;
568 -> 553;
569 -> 552;
569 -> 553;
570 -> 566;
570 -> 553;
571 -> 569;
571 -> 553;
572 -> 567;
572 -> 553;
573 -> 568;
573 -> 553;
574 -> 553;
575 -> 553;
576 -> 570;
576 -> 575;
577 -> 571;
577 -> 575;
578 -> 572;
578 -> 575;
579 -> 573;
579 -> 575;
580 -> 574;
580 -> 575;
581 -> 574;
581 -> 575;
582 -> 574;
582 -> 575;
583 -> 574;
583 -> 575;
584 -> 575;
585 -> 577;
585 -> 584;
585 -> 575;
586 -> 583;
586 -> 575;
587 -> 579;
587 -> 575;
588 -> 587;
588 -> 555;
588 -> 575;
589 -> 576;
589 -> 575;
590 -> 577;
590 -> 575;
591 -> 588;
591 -> 575;
592 -> 580;
592 -> 575;
593 -> 581;
593 -> 575;
594 -> 582;
594 -> 575;
595 -> 583;
595 -> 575;
596 -> 575;
597 -> 0;
597 -> 575;
598 -> 577;
598 -> 588;
598 -> 575;
599 -> 597;
599 -> 598;
599 -> 595;
599 -> 596;
599 -> 0;
599 -> 588;
599 -> 575;
600 -> 575;
601 -> 589;
601 -> 600;
602 -> 590;
602 -> 600;
603 -> 591;
603 -> 600;
604 -> 592;
604 -> 600;
605 -> 593;
605 -> 600;
606 -> 594;
606 -> 600;
607 -> 595;
607 -> 600;
608 -> 596;
608 -> 600;
609 -> 596;
609 -> 600;
610 -> 599;
610 -> 600;
611 -> 596;
611 -> 600;
612 -> 596;
612 -> 600;
613 -> 596;
613 -> 600;
614 -> 601;
614 -> 600;
615 -> 602;
615 -> 600;
616 -> 603;
616 -> 600;
617 -> 604;
617 -> 600;
618 -> 605;
618 -> 600;
619 -> 606;
619 -> 600;
620 -> 607;
620 -> 600;
621 -> 608;
621 -> 600;
622 -> 609;
622 -> 600;
623 -> 610;
623 -> 600;
624 -> 610;
624 -> 599;
624 -> 600;
625 -> 624;
625 -> 599;
625 -> 600;
626 -> 611;
626 -> 600;
627 -> 612;
627 -> 600;
628 -> 600;
629 -> 614;
629 -> 628;
630 -> 615;
630 -> 628;
631 -> 616;
631 -> 628;
632 -> 617;
632 -> 628;
633 -> 618;
633 -> 628;
634 -> 619;
634 -> 628;
635 -> 620;
635 -> 628;
636 -> 621;
636 -> 628;
637 -> 622;
637 -> 628;
638 -> 623;
638 -> 628;
639 -> 625;
639 -> 628;
640 -> 626;
640 -> 628;
641 -> 627;
641 -> 628;
642 -> 613;
642 -> 628;
643 -> 629;
643 -> 628;
644 -> 631;
644 -> 628;
645 -> 639;
645 -> 628;
646 -> 635;
646 -> 628;
647 -> 640;
647 -> 628;
648 -> 641;
648 -> 628;
649 -> 628;
650 -> 649;
650 -> 643;
650 -> 644;
650 -> 645;
650 -> 646;
650 -> 647;
650 -> 648;
650 -> 588;
650 -> 625;
650 -> 628;
651 -> 649;
651 -> 628;
652 -> 649;
652 -> 628;
653 -> 649;
653 -> 628;
654 -> 649;
654 -> 628;
655 -> 649;
655 -> 628;
656 -> 649;
656 -> 628;
657 -> 649;
657 -> 628;
658 -> 649;
658 -> 628;
659 -> 649;
659 -> 628;
660 -> 649;
660 -> 628;
661 -> 649;
661 -> 628;
662 -> 649;
662 -> 628;
663 -> 649;
663 -> 628;
664 -> 649;
664 -> 628;
665 -> 649;
665 -> 628;
666 -> 649;
666 -> 628;
667 -> 649;
667 -> 628;
668 -> 649;
668 -> 628;
669 -> 649;
669 -> 628;
670 -> 649;
670 -> 628;
671 -> 649;
671 -> 628;
672 -> 649;
672 -> 628;
673 -> 649;
673 -> 628;
674 -> 649;
674 -> 628;
675 -> 649;
675 -> 628;
676 -> 649;
676 -> 628;
677 -> 628;
678 -> 677;
678 -> 649;
678 -> 628;
679 -> 649;
679 -> 628;
680 -> 649;
680 -> 628;
681 -> 649;
681 -> 628;
682 -> 649;
682 -> 628;
683 -> 649;
683 -> 628;
684 -> 649;
684 -> 628;
685 -> 649;
685 -> 628;
686 -> 628;
687 -> 628;
688 -> 685;
688 -> 687;
689 -> 686;
689 -> 687;
691 -> 690;
692 -> 690;
693 -> 687;
694 -> 689;
694 -> 693;
695 -> 693;
696 -> 689;
696 -> 687;
697 -> 688;
697 -> 689;
697 -> 687;
698 -> 686;
698 -> 649;
698 -> 628;
699 -> 630;
699 -> 649;
699 -> 628;
700 -> 649;
700 -> 628;
701 -> 700;
701 -> 650;
701 -> 651;
701 -> 699;
701 -> 652;
701 -> 653;
701 -> 654;
701 -> 655;
701 -> 656;
701 -> 657;
701 -> 658;
701 -> 659;
701 -> 660;
701 -> 661;
701 -> 662;
701 -> 663;
701 -> 664;
701 -> 665;
701 -> 666;
701 -> 667;
701 -> 668;
701 -> 669;
701 -> 670;
701 -> 671;
701 -> 672;
701 -> 673;
701 -> 674;
701 -> 675;
701 -> 676;
701 -> 678;
701 -> 679;
701 -> 698;
701 -> 680;
701 -> 681;
701 -> 682;
701 -> 683;
701 -> 684;
701 -> 677;
701 -> 695;
701 -> 696;
701 -> 697;
701 -> 628;
702 -> 701;
702 -> 649;
702 -> 628;
703 -> 649;
703 -> 701;
703 -> 628;
704 -> 703;
704 -> 701;
704 -> 702;
704 -> 628;
705 -> 704;
705 -> 649;
705 -> 628;
706 -> 649;
706 -> 704;
706 -> 628;
707 -> 706;
707 -> 704;
707 -> 705;
707 -> 628;
708 -> 707;
708 -> 649;
708 -> 628;
709 -> 649;
709 -> 707;
709 -> 628;
710 -> 709;
710 -> 707;
710 -> 708;
710 -> 628;
711 -> 710;
711 -> 649;
711 -> 628;
712 -> 649;
712 -> 710;
712 -> 628;
713 -> 712;
713 -> 710;
713 -> 711;
713 -> 628;
714 -> 713;
714 -> 649;
714 -> 628;
715 -> 649;
715 -> 628;
716 -> 628;
717 -> 628;
718 -> 715;
718 -> 717;
719 -> 716;
719 -> 717;
720 -> 717;
721 -> 720;
721 -> 717;
722 -> 720;
722 -> 717;
723 -> 720;
723 -> 717;
724 -> 717;
725 -> 724;
725 -> 720;
725 -> 717;
726 -> 717;
727 -> 718;
727 -> 726;
727 -> 717;
728 -> 718;
728 -> 720;
728 -> 717;
729 -> 716;
729 -> 649;
729 -> 628;
730 -> 638;
730 -> 713;
730 -> 628;
731 -> 628;
732 -> 730;
732 -> 731;
733 -> 731;
734 -> 732;
734 -> 731;
735 -> 734;
735 -> 713;
735 -> 714;
735 -> 729;
735 -> 731;
736 -> 0;
736 -> 731;
737 -> 736;
737 -> 733;
737 -> 731;
738 -> 737;
738 -> 628;
739 -> 738;
739 -> 649;
739 -> 628;
740 -> 635;
740 -> 628;
741 -> 740;
742 -> 632;
742 -> 741;
742 -> 740;
743 -> 633;
743 -> 741;
743 -> 740;
744 -> 742;
744 -> 743;
744 -> 740;
745 -> 634;
745 -> 741;
745 -> 740;
746 -> 744;
746 -> 745;
746 -> 740;
747 -> 637;
747 -> 628;
748 -> 649;
748 -> 713;
748 -> 714;
748 -> 729;
748 -> 739;
748 -> 720;
748 -> 721;
748 -> 728;
748 -> 722;
748 -> 723;
748 -> 725;
748 -> 724;
748 -> 747;
749 -> 747;
750 -> 649;
750 -> 749;
751 -> 750;
751 -> 748;
751 -> 749;
752 -> 636;
752 -> 747;
753 -> 747;
754 -> 747;
755 -> 748;
755 -> 754;
756 -> 751;
756 -> 754;
757 -> 752;
757 -> 754;
758 -> 753;
758 -> 754;
759 -> 755;
759 -> 754;
760 -> 756;
760 -> 754;
761 -> 757;
761 -> 754;
762 -> 754;
763 -> 762;
763 -> 759;
763 -> 760;
763 -> 761;
763 -> 748;
763 -> 754;
764 -> 753;
764 -> 649;
764 -> 747;
765 -> 638;
765 -> 649;
765 -> 628;
766 -> 649;
766 -> 763;
766 -> 628;
767 -> 628;
768 -> 649;
768 -> 763;
768 -> 767;
768 -> 628;
769 -> 575;
770 -> 578;
770 -> 769;
770 -> 575;
771 -> 578;
771 -> 770;
772 -> 770;
773 -> 771;
773 -> 772;
774 -> 596;
774 -> 772;
775 -> 772;
776 -> 773;
776 -> 775;
776 -> 772;
777 -> 773;
777 -> 772;
778 -> 777;
778 -> 763;
778 -> 764;
778 -> 765;
778 -> 772;
779 -> 772;
780 -> 774;
780 -> 778;
780 -> 772;
781 -> 779;
781 -> 772;
782 -> 780;
782 -> 778;
782 -> 772;
783 -> 781;
783 -> 782;
783 -> 779;
783 -> 778;
783 -> 772;
784 -> 772;
785 -> 772;
786 -> 773;
786 -> 772;
787 -> 786;
787 -> 783;
787 -> 772;
788 -> 787;
789 -> 787;
790 -> 787;
791 -> 774;
791 -> 790;
791 -> 787;
792 -> 787;
793 -> 779;
793 -> 792;
793 -> 790;
793 -> 787;
794 -> 784;
794 -> 787;
794 -> 793;
795 -> 785;
795 -> 787;
796 -> 779;
796 -> 793;
796 -> 772;
797 -> 774;
797 -> 796;
797 -> 772;
798 -> 773;
798 -> 772;
799 -> 780;
799 -> 798;
799 -> 796;
799 -> 772;
800 -> 774;
800 -> 799;
800 -> 772;
801 -> 794;
801 -> 772;
802 -> 799;
802 -> 772;
803 -> 772;
804 -> 800;
804 -> 803;
805 -> 801;
805 -> 803;
806 -> 802;
806 -> 803;
807 -> 774;
807 -> 803;
808 -> 807;
808 -> 799;
808 -> 803;
809 -> 803;
810 -> 807;
810 -> 809;
811 -> 810;
811 -> 799;
811 -> 809;
812 -> 811;
812 -> 809;
813 -> 812;
813 -> 803;
814 -> 803;
815 -> 808;
815 -> 814;
816 -> 815;
816 -> 808;
816 -> 814;
817 -> 803;
818 -> 816;
818 -> 817;
819 -> 804;
819 -> 803;
820 -> 805;
820 -> 803;
821 -> 806;
821 -> 803;
822 -> 803;
823 -> 803;
824 -> 808;
824 -> 823;
825 -> 808;
825 -> 823;
826 -> 808;
826 -> 823;
827 -> 813;
827 -> 823;
828 -> 816;
828 -> 823;
829 -> 818;
829 -> 823;
830 -> 818;
830 -> 823;
831 -> 819;
831 -> 823;
832 -> 820;
832 -> 823;
833 -> 821;
833 -> 823;
834 -> 818;
834 -> 823;
835 -> 822;
835 -> 823;
836 -> 822;
836 -> 823;
837 -> 827;
837 -> 823;
838 -> 828;
838 -> 823;
839 -> 829;
839 -> 823;
840 -> 833;
840 -> 818;
840 -> 823;
841 -> 835;
841 -> 823;
842 -> 823;
843 -> 837;
843 -> 842;
844 -> 838;
844 -> 842;
845 -> 839;
845 -> 842;
846 -> 841;
846 -> 842;
847 -> 836;
847 -> 842;
848 -> 846;
848 -> 842;
849 -> 842;
850 -> 849;
850 -> 842;
851 -> 849;
851 -> 842;
852 -> 849;
852 -> 842;
853 -> 849;
853 -> 842;
854 -> 849;
854 -> 842;
855 -> 849;
855 -> 842;
856 -> 849;
856 -> 842;
857 -> 849;
857 -> 842;
858 -> 849;
858 -> 842;
859 -> 849;
859 -> 842;
860 -> 849;
860 -> 842;
861 -> 849;
861 -> 842;
862 -> 849;
862 -> 842;
863 -> 849;
863 -> 842;
864 -> 849;
864 -> 842;
865 -> 849;
865 -> 842;
866 -> 849;
866 -> 842;
867 -> 849;
867 -> 842;
868 -> 849;
868 -> 842;
869 -> 849;
869 -> 842;
870 -> 849;
870 -> 842;
871 -> 849;
871 -> 842;
872 -> 849;
872 -> 842;
873 -> 849;
873 -> 842;
874 -> 849;
874 -> 842;
875 -> 849;
875 -> 842;
876 -> 842;
877 -> 876;
877 -> 849;
877 -> 842;
878 -> 849;
878 -> 842;
879 -> 849;
879 -> 842;
880 -> 849;
880 -> 842;
881 -> 849;
881 -> 842;
882 -> 849;
882 -> 842;
883 -> 849;
883 -> 842;
884 -> 849;
884 -> 842;
885 -> 842;
886 -> 842;
887 -> 884;
887 -> 886;
888 -> 885;
888 -> 886;
889 -> 886;
890 -> 888;
890 -> 889;
891 -> 889;
892 -> 888;
892 -> 886;
893 -> 887;
893 -> 888;
893 -> 886;
894 -> 885;
894 -> 849;
894 -> 842;
895 -> 849;
895 -> 842;
896 -> 849;
896 -> 842;
897 -> 842;
898 -> 842;
899 -> 896;
899 -> 898;
900 -> 897;
900 -> 898;
901 -> 898;
902 -> 901;
902 -> 898;
903 -> 901;
903 -> 898;
904 -> 901;
904 -> 898;
905 -> 898;
906 -> 905;
906 -> 901;
906 -> 898;
907 -> 898;
908 -> 899;
908 -> 907;
908 -> 898;
909 -> 899;
909 -> 901;
909 -> 898;
910 -> 897;
910 -> 849;
910 -> 842;
911 -> 842;
912 -> 840;
912 -> 911;
913 -> 911;
914 -> 912;
914 -> 911;
915 -> 914;
915 -> 840;
915 -> 910;
915 -> 901;
915 -> 902;
915 -> 909;
915 -> 903;
915 -> 904;
915 -> 906;
915 -> 905;
916 -> 914;
917 -> 915;
917 -> 916;
918 -> 830;
918 -> 842;
919 -> 918;
920 -> 843;
920 -> 919;
920 -> 918;
921 -> 844;
921 -> 919;
921 -> 918;
922 -> 920;
922 -> 921;
922 -> 918;
923 -> 845;
923 -> 919;
923 -> 918;
924 -> 922;
924 -> 923;
924 -> 918;
925 -> 831;
925 -> 832;
926 -> 849;
926 -> 832;
927 -> 831;
927 -> 926;
927 -> 840;
927 -> 910;
927 -> 917;
927 -> 901;
927 -> 902;
927 -> 909;
927 -> 903;
927 -> 904;
927 -> 906;
927 -> 905;
927 -> 832;
928 -> 831;
928 -> 849;
928 -> 832;
929 -> 849;
929 -> 927;
929 -> 842;
930 -> 842;
931 -> 849;
931 -> 927;
931 -> 930;
931 -> 842;
932 -> 822;
932 -> 772;
933 -> 932;
933 -> 770;
934 -> 933;
934 -> 927;
934 -> 575;
935 -> 933;
935 -> 575;
936 -> 552;
936 -> 935;
936 -> 927;
936 -> 928;
936 -> 833;
936 -> 260;
937 -> 936;
937 -> 260;
938 -> 260;
939 -> 937;
939 -> 938;
940 -> 938;
941 -> 939;
941 -> 940;
942 -> 941;
942 -> 936;
942 -> 940;
943 -> 942;
943 -> 938;
944 -> 943;
944 -> 942;
944 -> 938;
945 -> 938;
946 -> 943;
946 -> 945;
946 -> 942;
946 -> 938;
947 -> 0;
947 -> 938;
948 -> 946;
948 -> 947;
948 -> 938;
949 -> 267;
949 -> 948;
949 -> 260;
950 -> 936;
950 -> 260;
951 -> 1;
952 -> 950;
952 -> 951;
953 -> 952;
953 -> 948;
953 -> 951;
954 -> 953;
955 -> 954;
955 -> 953;
956 -> 953;
957 -> 955;
957 -> 956;
958 -> 952;
958 -> 956;
959 -> 956;
960 -> 958;
960 -> 959;
961 -> 959;
962 -> 960;
962 -> 961;
963 -> 961;
964 -> 962;
964 -> 963;
965 -> 964;
965 -> 948;
965 -> 963;
966 -> 964;
966 -> 965;
967 -> 965;
968 -> 966;
968 -> 967;
969 -> 964;
969 -> 948;
969 -> 967;
970 -> 968;
970 -> 967;
971 -> 967;
972 -> 970;
972 -> 971;
973 -> 969;
973 -> 971;
974 -> 971;
975 -> 971;
976 -> 971;
977 -> 972;
977 -> 976;
978 -> 977;
978 -> 971;
979 -> 971;
980 -> 971;
981 -> 980;
981 -> 971;
982 -> 971;
983 -> 982;
983 -> 971;
984 -> 971;
985 -> 984;
985 -> 971;
986 -> 971;
987 -> 986;
987 -> 971;
988 -> 972;
988 -> 971;
989 -> 975;
989 -> 971;
990 -> 986;
990 -> 971;
991 -> 979;
991 -> 971;
992 -> 980;
992 -> 971;
993 -> 982;
993 -> 971;
994 -> 984;
994 -> 971;
995 -> 974;
995 -> 971;
996 -> 988;
996 -> 989;
996 -> 990;
996 -> 991;
996 -> 992;
996 -> 993;
996 -> 994;
996 -> 995;
996 -> 973;
996 -> 948;
996 -> 975;
996 -> 974;
996 -> 987;
996 -> 981;
996 -> 983;
996 -> 985;
996 -> 971;
997 -> 971;
998 -> 996;
998 -> 997;
999 -> 997;
1000 -> 998;
1000 -> 999;
1001 -> 1000;
1001 -> 996;
1001 -> 999;
1002 -> 1001;
1002 -> 997;
1003 -> 997;
1004 -> 1002;
1004 -> 1003;
1005 -> 1002;
1005 -> 1003;
1006 -> 0;
1006 -> 1003;
1007 -> 1003;
1008 -> 1003;
1009 -> 1004;
1009 -> 1003;
1010 -> 1009;
1011 -> 1009;
1012 -> 1010;
1012 -> 1011;
1013 -> 1012;
1013 -> 1011;
1014 -> 0;
1014 -> 1013;
1015 -> 1009;
1016 -> 1014;
1016 -> 1009;
1017 -> 1006;
1017 -> 1009;
1018 -> 1007;
1018 -> 1009;
1019 -> 1008;
1019 -> 1009;
1020 -> 1005;
1020 -> 1009;
1021 -> 1009;
1022 -> 1015;
1022 -> 1021;
1023 -> 1016;
1023 -> 1021;
1024 -> 1017;
1024 -> 1021;
1025 -> 1018;
1025 -> 1021;
1026 -> 1019;
1026 -> 1021;
1027 -> 1020;
1027 -> 1021;
1028 -> 1024;
1028 -> 1023;
1028 -> 1021;
1029 -> 1021;
1030 -> 1006;
1030 -> 1014;
1030 -> 1009;
1031 -> 1030;
1031 -> 0;
1031 -> 1003;
1032 -> 1030;
1032 -> 1003;
1033 -> 996;
1033 -> 997;
1034 -> 1033;
1034 -> 1032;
1034 -> 997;
1035 -> 996;
1035 -> 997;
1036 -> 0;
1036 -> 997;
1037 -> 996;
1037 -> 1036;
1037 -> 1034;
1037 -> 971;
1038 -> 996;
1038 -> 997;
1039 -> 996;
1039 -> 997;
1040 -> 996;
1040 -> 997;
1041 -> 996;
1041 -> 997;
1042 -> 996;
1042 -> 997;
1043 -> 996;
1043 -> 997;
1044 -> 996;
1044 -> 997;
1045 -> 1038;
1045 -> 997;
1046 -> 1039;
1046 -> 997;
1047 -> 1043;
1047 -> 997;
1048 -> 1040;
1048 -> 997;
1049 -> 1041;
1049 -> 997;
1050 -> 1042;
1050 -> 997;
1051 -> 997;
1052 -> 997;
1053 -> 1045;
1053 -> 1052;
1054 -> 1046;
1054 -> 1052;
1055 -> 1047;
1055 -> 1052;
1056 -> 1048;
1056 -> 1052;
1057 -> 1049;
1057 -> 1052;
1058 -> 1050;
1058 -> 1052;
1059 -> 1051;
1059 -> 1052;
1060 -> 1053;
1060 -> 1037;
1060 -> 1052;
1061 -> 1053;
1061 -> 1037;
1061 -> 1052;
1062 -> 1055;
1062 -> 1052;
1063 -> 1052;
1064 -> 1060;
1064 -> 1063;
1065 -> 1061;
1065 -> 1063;
1066 -> 1062;
1066 -> 1063;
1067 -> 1059;
1067 -> 1063;
1068 -> 1063;
1069 -> 1068;
1069 -> 1063;
1070 -> 1068;
1070 -> 1063;
1071 -> 1068;
1071 -> 1063;
1072 -> 1063;
1073 -> 1064;
1073 -> 1072;
1073 -> 1063;
1074 -> 1065;
1074 -> 1037;
1074 -> 1063;
1075 -> 1066;
1075 -> 1068;
1075 -> 1063;
1076 -> 1064;
1076 -> 1068;
1076 -> 1063;
1077 -> 1065;
1077 -> 1068;
1077 -> 1063;
1078 -> 1059;
1078 -> 1052;
1079 -> 1059;
1079 -> 1052;
1080 -> 1059;
1080 -> 1052;
1081 -> 1059;
1081 -> 1052;
1082 -> 1059;
1082 -> 1052;
1083 -> 1059;
1083 -> 1052;
1084 -> 1059;
1084 -> 1052;
1085 -> 1052;
1086 -> 1056;
1086 -> 1085;
1086 -> 1052;
1087 -> 1052;
1088 -> 1054;
1088 -> 1087;
1088 -> 1052;
1089 -> 1054;
1089 -> 1059;
1089 -> 1052;
1090 -> 1053;
1090 -> 1059;
1090 -> 1052;
1091 -> 1056;
1091 -> 1059;
1091 -> 1052;
1092 -> 1058;
1092 -> 1059;
1092 -> 1052;
1093 -> 1057;
1093 -> 1059;
1093 -> 1052;
1094 -> 996;
1094 -> 1051;
1094 -> 1037;
1094 -> 1068;
1094 -> 1069;
1094 -> 1070;
1094 -> 1076;
1094 -> 1071;
1094 -> 1075;
1094 -> 1077;
1094 -> 1078;
1094 -> 1090;
1094 -> 1079;
1094 -> 1089;
1094 -> 1080;
1094 -> 1091;
1094 -> 1081;
1094 -> 1092;
1094 -> 1082;
1094 -> 1093;
1094 -> 1083;
1094 -> 1084;
1094 -> 971;
1095 -> 1094;
1095 -> 1072;
1095 -> 1063;
1096 -> 1094;
1096 -> 1063;
1097 -> 973;
1097 -> 1094;
1097 -> 971;
1098 -> 971;
1099 -> 1094;
1099 -> 971;
1100 -> 1097;
1100 -> 1098;
1101 -> 1100;
1101 -> 1097;
1101 -> 1098;
1102 -> 971;
1103 -> 1101;
1103 -> 971;
1104 -> 971;
1105 -> 971;
1106 -> 971;
1107 -> 1106;
1107 -> 971;
1108 -> 971;
1109 -> 1108;
1109 -> 971;
1110 -> 971;
1111 -> 1110;
1111 -> 971;
1112 -> 972;
1112 -> 1103;
1112 -> 971;
1113 -> 971;
1114 -> 1112;
1114 -> 1113;
1114 -> 971;
1115 -> 1114;
1115 -> 971;
1116 -> 971;
1117 -> 1115;
1117 -> 1116;
1117 -> 971;
1118 -> 1117;
1118 -> 971;
1119 -> 971;
1120 -> 1118;
1120 -> 1119;
1120 -> 971;
1121 -> 1120;
1121 -> 971;
1122 -> 0;
1122 -> 971;
1123 -> 1122;
1123 -> 1121;
1123 -> 971;
1124 -> 972;
1124 -> 971;
1125 -> 1103;
1125 -> 971;
1126 -> 1094;
1126 -> 971;
1127 -> 971;
1128 -> 972;
1128 -> 1127;
1129 -> 1128;
1129 -> 1103;
1129 -> 1127;
1130 -> 1129;
1130 -> 971;
1131 -> 971;
1132 -> 972;
1132 -> 1131;
1133 -> 1132;
1133 -> 1103;
1133 -> 1131;
1134 -> 1133;
1134 -> 971;
1135 -> 978;
1135 -> 971;
1136 -> 975;
1136 -> 971;
1137 -> 1110;
1137 -> 971;
1138 -> 1106;
1138 -> 971;
1139 -> 1108;
1139 -> 971;
1140 -> 1123;
1140 -> 971;
1141 -> 974;
1141 -> 971;
1142 -> 1104;
1142 -> 971;
1143 -> 1105;
1143 -> 971;
1144 -> 1124;
1144 -> 1125;
1144 -> 1126;
1144 -> 1130;
1144 -> 1134;
1144 -> 1135;
1144 -> 1136;
1144 -> 1137;
1144 -> 1138;
1144 -> 1139;
1144 -> 1140;
1144 -> 1141;
1144 -> 1142;
1144 -> 1143;
1144 -> 973;
1144 -> 1103;
1144 -> 1094;
1144 -> 1111;
1144 -> 1107;
1144 -> 1109;
1144 -> 0;
1144 -> 971;
1145 -> 971;
1146 -> 1144;
1146 -> 1145;
1147 -> 1144;
1147 -> 1145;
1148 -> 1144;
1148 -> 1145;
1149 -> 1148;
1149 -> 1144;
1149 -> 1145;
1150 -> 1146;
1150 -> 1145;
1151 -> 1145;
1152 -> 1147;
1152 -> 1145;
1153 -> 1149;
1153 -> 1150;
1153 -> 1151;
1153 -> 1152;
1153 -> 1144;
1153 -> 1145;
1154 -> 1144;
1154 -> 1145;
1155 -> 1154;
1155 -> 1153;
1155 -> 1145;
1156 -> 1144;
1156 -> 1145;
1157 -> 1156;
1157 -> 1155;
1157 -> 1145;
1158 -> 1144;
1158 -> 1145;
1159 -> 1158;
1159 -> 1157;
1159 -> 1145;
1160 -> 1144;
1160 -> 1145;
1161 -> 1160;
1161 -> 1159;
1161 -> 1145;
1162 -> 1144;
1162 -> 1145;
1163 -> 1145;
1164 -> 1162;
1164 -> 1161;
1164 -> 1163;
1164 -> 1145;
1165 -> 1164;
1166 -> 1165;
1166 -> 1162;
1166 -> 1164;
1167 -> 1162;
1167 -> 1161;
1167 -> 1166;
1167 -> 1164;
1168 -> 1164;
1169 -> 1167;
1169 -> 1168;
1170 -> 1162;
1170 -> 1168;
1171 -> 1170;
1171 -> 1161;
1171 -> 1168;
1172 -> 1171;
1172 -> 1161;
1172 -> 1166;
1172 -> 1168;
1173 -> 1164;
1174 -> 1162;
1174 -> 1161;
1174 -> 1166;
1174 -> 1145;
1175 -> 1162;
1175 -> 1174;
1176 -> 1174;
1177 -> 1175;
1177 -> 1176;
1178 -> 1162;
1178 -> 1176;
1179 -> 1178;
1179 -> 1174;
1179 -> 1176;
1180 -> 1174;
1181 -> 1174;
1181 -> 971;
1182 -> 1174;
1182 -> 971;
1183 -> 1174;
1183 -> 971;
1184 -> 1094;
1184 -> 1183;
1184 -> 1174;
1184 -> 1182;
1184 -> 971;
1185 -> 971;
1186 -> 971;
1187 -> 1186;
1187 -> 971;
1188 -> 1174;
1188 -> 971;
1189 -> 1182;
1189 -> 971;
1190 -> 1184;
1190 -> 971;
1191 -> 1094;
1191 -> 971;
1192 -> 1094;
1192 -> 1184;
1192 -> 971;
1193 -> 975;
1193 -> 971;
1194 -> 978;
1194 -> 971;
1195 -> 1185;
1195 -> 971;
1196 -> 1186;
1196 -> 971;
1197 -> 1188;
1197 -> 1189;
1197 -> 1190;
1197 -> 1191;
1197 -> 1192;
1197 -> 1193;
1197 -> 1194;
1197 -> 1195;
1197 -> 1196;
1197 -> 1184;
1197 -> 1182;
1197 -> 1187;
1197 -> 971;
1198 -> 971;
1199 -> 971;
1200 -> 1199;
1200 -> 1174;
1200 -> 1197;
1200 -> 971;
1201 -> 1174;
1201 -> 1197;
1201 -> 1199;
1201 -> 1200;
1202 -> 1201;
1202 -> 1197;
1202 -> 1200;
1203 -> 1174;
1203 -> 1199;
1203 -> 1197;
1203 -> 1202;
1204 -> 1202;
1205 -> 1203;
1205 -> 1204;
1206 -> 1205;
1206 -> 1203;
1206 -> 1204;
1207 -> 1204;
1208 -> 1205;
1208 -> 1207;
1209 -> 1208;
1209 -> 1204;
1210 -> 1204;
1211 -> 1205;
1211 -> 1210;
1212 -> 1210;
1213 -> 1211;
1213 -> 1212;
1214 -> 1213;
1214 -> 1203;
1214 -> 1212;
1215 -> 1213;
1215 -> 1203;
1215 -> 1214;
1216 -> 1215;
1216 -> 1213;
1216 -> 1214;
1217 -> 1214;
1218 -> 1217;
1218 -> 1213;
1218 -> 1214;
1219 -> 1213;
1219 -> 1215;
1219 -> 1216;
1219 -> 1212;
1220 -> 1219;
1220 -> 1210;
1221 -> 1211;
1221 -> 1215;
1221 -> 1210;
1222 -> 1221;
1222 -> 1204;
1223 -> 1204;
1224 -> 1204;
1225 -> 1206;
1225 -> 1224;
1226 -> 1206;
1226 -> 1224;
1227 -> 1209;
1227 -> 1224;
1228 -> 1222;
1228 -> 1224;
1229 -> 1223;
1229 -> 1224;
1230 -> 1224;
1231 -> 1229;
1231 -> 1230;
1232 -> 1230;
1233 -> 1231;
1233 -> 1232;
1236 -> 1235;
1236 -> 1234;
1237 -> 1234;
1238 -> 1232;
1239 -> 1233;
1239 -> 1238;
1240 -> 0;
1241 -> 0;
1241 -> 1240;
1242 -> 0;
1243 -> 1241;
1243 -> 0;
1243 -> 1242;
1244 -> 1243;
1245 -> 1238;
1246 -> 1239;
1246 -> 1245;
1247 -> 1246;
1247 -> 1245;
1248 -> 1239;
1248 -> 1238;
1249 -> 1232;
1250 -> 1249;
1250 -> 1233;
1250 -> 1232;
1251 -> 1233;
1251 -> 1232;
1252 -> 1231;
1252 -> 1230;
1253 -> 1231;
1253 -> 1230;
1254 -> 1231;
1254 -> 1230;
1255 -> 1231;
1255 -> 1230;
1256 -> 1231;
1256 -> 1230;
1257 -> 1231;
1257 -> 1230;
1258 -> 1231;
1258 -> 1230;
1259 -> 1229;
1259 -> 1224;
1260 -> 1229;
1260 -> 1224;
1261 -> 1229;
1261 -> 1224;
1262 -> 1224;
1263 -> 1225;
1263 -> 1262;
1263 -> 1224;
1264 -> 1224;
1265 -> 1226;
1265 -> 1264;
1265 -> 1224;
1266 -> 1225;
1266 -> 1229;
1266 -> 1224;
1267 -> 1226;
1267 -> 1229;
1267 -> 1224;
1268 -> 1225;
1268 -> 1215;
1268 -> 1216;
1268 -> 1218;
1268 -> 1224;
1269 -> 1224;
1270 -> 1269;
1270 -> 1225;
1270 -> 1215;
1270 -> 1216;
1270 -> 1218;
1270 -> 1224;
1271 -> 1229;
1271 -> 1270;
1273 -> 1272;
1274 -> 1225;
1274 -> 1215;
1274 -> 1269;
1274 -> 1216;
1274 -> 1218;
1274 -> 1270;
1275 -> 1228;
1275 -> 1270;
1276 -> 1269;
1276 -> 1270;
1277 -> 1270;
1278 -> 1270;
1279 -> 1271;
1279 -> 1278;
1280 -> 1274;
1280 -> 1278;
1281 -> 1275;
1281 -> 1278;
1282 -> 1276;
1282 -> 1278;
1283 -> 1277;
1283 -> 1278;
1284 -> 1279;
1284 -> 1278;
1285 -> 1280;
1285 -> 1278;
1286 -> 1281;
1286 -> 1278;
1287 -> 1282;
1287 -> 1278;
1288 -> 1278;
1289 -> 1284;
1289 -> 1288;
1290 -> 1285;
1290 -> 1288;
1291 -> 1286;
1291 -> 1288;
1292 -> 1287;
1292 -> 1288;
1293 -> 1283;
1293 -> 1288;
1294 -> 1288;
1295 -> 1293;
1295 -> 1294;
1296 -> 1294;
1297 -> 1295;
1297 -> 1296;
1298 -> 1296;
1299 -> 1297;
1299 -> 1298;
1300 -> 1299;
1300 -> 1298;
1301 -> 1295;
1301 -> 1294;
1302 -> 1293;
1302 -> 1288;
1303 -> 1293;
1303 -> 1288;
1304 -> 1293;
1304 -> 1288;
1305 -> 1293;
1305 -> 1288;
1306 -> 1293;
1306 -> 1288;
1307 -> 1293;
1307 -> 1288;
1308 -> 1293;
1308 -> 1288;
1309 -> 1288;
1310 -> 1309;
1310 -> 1288;
1311 -> 1273;
1311 -> 1288;
1312 -> 1310;
1312 -> 1311;
1312 -> 1288;
1313 -> 1312;
1313 -> 1293;
1313 -> 1288;
1314 -> 1288;
1315 -> 1314;
1315 -> 1288;
1316 -> 1273;
1316 -> 1288;
1317 -> 1315;
1317 -> 1316;
1317 -> 1288;
1318 -> 1317;
1318 -> 1293;
1318 -> 1288;
1319 -> 1293;
1319 -> 1288;
1320 -> 1293;
1320 -> 1288;
1321 -> 1293;
1321 -> 1288;
1322 -> 1293;
1322 -> 1288;
1323 -> 1288;
1324 -> 1289;
1324 -> 1323;
1324 -> 1288;
1325 -> 1288;
1326 -> 1290;
1326 -> 1325;
1326 -> 1288;
1327 -> 1289;
1327 -> 1293;
1327 -> 1288;
1328 -> 1292;
1328 -> 1293;
1328 -> 1288;
1329 -> 1290;
1329 -> 1293;
1329 -> 1288;
1330 -> 1291;
1330 -> 1293;
1330 -> 1288;
1331 -> 1293;
1331 -> 1288;
1332 -> 1288;
1333 -> 1288;
1334 -> 1331;
1334 -> 1333;
1335 -> 1332;
1335 -> 1333;
1336 -> 1333;
1337 -> 1335;
1337 -> 1336;
1338 -> 1336;
1339 -> 1337;
1339 -> 1338;
1340 -> 1338;
1341 -> 1339;
1341 -> 1340;
1342 -> 1340;
1343 -> 1341;
1343 -> 1342;
1344 -> 1343;
1344 -> 1342;
1345 -> 1339;
1345 -> 1338;
1346 -> 1339;
1346 -> 1338;
1347 -> 1337;
1347 -> 1336;
1348 -> 1337;
1348 -> 1336;
1349 -> 1337;
1349 -> 1336;
1350 -> 1335;
1350 -> 1333;
1351 -> 1333;
1352 -> 1334;
1352 -> 1351;
1352 -> 1333;
1353 -> 1334;
1353 -> 1335;
1353 -> 1333;
1354 -> 1332;
1354 -> 1293;
1354 -> 1288;
1355 -> 1293;
1355 -> 1288;
1356 -> 1355;
1356 -> 1300;
1356 -> 1301;
1356 -> 1327;
1356 -> 1328;
1356 -> 1329;
1356 -> 1354;
1356 -> 1306;
1356 -> 1307;
1356 -> 1308;
1356 -> 1313;
1356 -> 1318;
1356 -> 1330;
1356 -> 1320;
1356 -> 1321;
1356 -> 1322;
1356 -> 1312;
1356 -> 1317;
1356 -> 1247;
1356 -> 1248;
1356 -> 1250;
1356 -> 1251;
1356 -> 1252;
1356 -> 1253;
1356 -> 1254;
1356 -> 1255;
1356 -> 1256;
1356 -> 1257;
1356 -> 1258;
1356 -> 1266;
1356 -> 1267;
1356 -> 1261;
1356 -> 1249;
1356 -> 1274;
1356 -> 1344;
1356 -> 1345;
1356 -> 1346;
1356 -> 1347;
1356 -> 1348;
1356 -> 1349;
1356 -> 1353;
1356 -> 1288;
1357 -> 1356;
1357 -> 1293;
1357 -> 1288;
1358 -> 1278;
1359 -> 1282;
1359 -> 1358;
1359 -> 1278;
1360 -> 1277;
1360 -> 1269;
1360 -> 1268;
1360 -> 1270;
1361 -> 1268;
1361 -> 1224;
1362 -> 1361;
1362 -> 1268;
1362 -> 1360;
1362 -> 1356;
1362 -> 1357;
1362 -> 1224;
1363 -> 1362;
1363 -> 1229;
1363 -> 1224;
1364 -> 1227;
1364 -> 1229;
1364 -> 1224;
1365 -> 1223;
1365 -> 1202;
1366 -> 1365;
1366 -> 1201;
1366 -> 1202;
1367 -> 1199;
1367 -> 1202;
1368 -> 1198;
1368 -> 1367;
1368 -> 1202;
1369 -> 1174;
1369 -> 1199;
1369 -> 1362;
1369 -> 1363;
1369 -> 1364;
1369 -> 1200;
1370 -> 1200;
1371 -> 1369;
1371 -> 1370;
1372 -> 1200;
1373 -> 1201;
1373 -> 1197;
1373 -> 1366;
1373 -> 1372;
1374 -> 1373;
1374 -> 1369;
1374 -> 1372;
1375 -> 1371;
1375 -> 1374;
1375 -> 1200;
1376 -> 1369;
1377 -> 1376;
1377 -> 1369;
1378 -> 1369;
1379 -> 1369;
1380 -> 1369;
1381 -> 1369;
1382 -> 1369;
1383 -> 1369;
1384 -> 1369;
1385 -> 1369;
1386 -> 1369;
1387 -> 1369;
1388 -> 1369;
1389 -> 1369;
1390 -> 1369;
1391 -> 1369;
1392 -> 1369;
1393 -> 1200;
1393 -> 1369;
1394 -> 1198;
1394 -> 1368;
1394 -> 1393;
1394 -> 1369;
1395 -> 1369;
1396 -> 1369;
1397 -> 1369;
1397 -> 1392;
1397 -> 1396;
1398 -> 1397;
1398 -> 1369;
1398 -> 1396;
1399 -> 1395;
1399 -> 1398;
1399 -> 1369;
1400 -> 1395;
1400 -> 1369;
1401 -> 1395;
1401 -> 1369;
1402 -> 1395;
1403 -> 1395;
1404 -> 1395;
1405 -> 1395;
1406 -> 1395;
1407 -> 1395;
1408 -> 1395;
1409 -> 1395;
1410 -> 1395;
1411 -> 1395;
1411 -> 1391;
1411 -> 1369;
1412 -> 1395;
1412 -> 1369;
1413 -> 1369;
1414 -> 1369;
1414 -> 1412;
1414 -> 1396;
1415 -> 1414;
1415 -> 1395;
1415 -> 1396;
1416 -> 1395;
1417 -> 1416;
1417 -> 1395;
1418 -> 1395;
1419 -> 1395;
1420 -> 1395;
1421 -> 1395;
1422 -> 1395;
1423 -> 1395;
1424 -> 1369;
1424 -> 1395;
1425 -> 1198;
1425 -> 1368;
1425 -> 1394;
1425 -> 1424;
1425 -> 1395;
1426 -> 1395;
1427 -> 1395;
1427 -> 1423;
1427 -> 1426;
1428 -> 1427;
1428 -> 1395;
1428 -> 1426;
1429 -> 1395;
1430 -> 972;
1430 -> 971;
1431 -> 973;
1431 -> 1395;
1431 -> 971;
1432 -> 972;
1432 -> 1395;
1432 -> 971;
1433 -> 971;
1435 -> 1094;
1435 -> 971;
1436 -> 971;
1437 -> 1430;
1437 -> 1436;
1438 -> 1431;
1438 -> 1436;
1439 -> 1432;
1439 -> 1436;
1440 -> 1435;
1440 -> 1436;
1441 -> 1433;
1441 -> 1436;
1442 -> 1436;
1443 -> 1441;
1443 -> 1442;
1444 -> 1442;
1445 -> 1443;
1445 -> 1444;
1446 -> 1444;
1447 -> 1445;
1447 -> 1446;
1448 -> 1446;
1449 -> 1447;
1449 -> 1448;
1450 -> 1449;
1450 -> 1448;
1451 -> 1447;
1451 -> 1446;
1452 -> 1444;
1453 -> 1452;
1453 -> 1445;
1453 -> 1444;
1454 -> 1445;
1454 -> 1444;
1455 -> 1443;
1455 -> 1442;
1456 -> 1443;
1456 -> 1442;
1457 -> 1443;
1457 -> 1442;
1458 -> 1443;
1458 -> 1442;
1459 -> 1443;
1459 -> 1442;
1460 -> 1443;
1460 -> 1442;
1461 -> 1443;
1461 -> 1442;
1462 -> 1441;
1462 -> 1436;
1463 -> 1441;
1463 -> 1436;
1464 -> 1441;
1464 -> 1436;
1465 -> 1441;
1465 -> 1436;
1466 -> 1441;
1466 -> 1436;
1467 -> 1441;
1467 -> 1436;
1468 -> 1441;
1468 -> 1436;
1469 -> 1441;
1469 -> 1436;
1470 -> 1441;
1470 -> 1436;
1471 -> 1436;
1472 -> 1471;
1472 -> 1441;
1472 -> 1436;
1473 -> 1436;
1474 -> 1473;
1474 -> 1441;
1474 -> 1436;
1475 -> 1436;
1476 -> 1475;
1476 -> 1441;
1476 -> 1436;
1477 -> 1441;
1477 -> 1436;
1478 -> 1441;
1478 -> 1436;
1479 -> 1436;
1480 -> 1437;
1480 -> 1479;
1480 -> 1436;
1481 -> 1436;
1482 -> 1438;
1482 -> 1481;
1482 -> 1436;
1483 -> 1439;
1483 -> 1436;
1484 -> 1440;
1484 -> 1094;
1484 -> 1436;
1485 -> 1437;
1485 -> 1441;
1485 -> 1436;
1486 -> 1438;
1486 -> 1441;
1486 -> 1436;
1487 -> 1436;
1488 -> 1487;
1488 -> 1440;
1488 -> 1094;
1488 -> 1436;
1489 -> 1441;
1489 -> 1436;
1490 -> 1436;
1491 -> 1437;
1491 -> 1490;
1492 -> 1491;
1492 -> 1432;
1492 -> 1490;
1493 -> 1492;
1493 -> 1436;
1494 -> 1439;
1494 -> 1436;
1495 -> 1436;
1496 -> 1436;
1497 -> 1489;
1497 -> 1496;
1498 -> 1493;
1498 -> 1496;
1499 -> 1494;
1499 -> 1496;
1500 -> 1495;
1500 -> 1496;
1501 -> 1496;
1502 -> 1500;
1502 -> 1501;
1503 -> 1501;
1504 -> 1502;
1504 -> 1503;
1505 -> 1503;
1506 -> 1504;
1506 -> 1505;
1507 -> 1506;
1507 -> 1505;
1508 -> 1502;
1508 -> 1501;
1509 -> 1500;
1509 -> 1496;
1510 -> 0;
1510 -> 1500;
1510 -> 1496;
1511 -> 1500;
1511 -> 1496;
1512 -> 1500;
1512 -> 1496;
1513 -> 1500;
1513 -> 1496;
1514 -> 1500;
1514 -> 1496;
1515 -> 1500;
1515 -> 1496;
1516 -> 1496;
1517 -> 1497;
1517 -> 1516;
1517 -> 1496;
1518 -> 1497;
1518 -> 1500;
1518 -> 1496;
1519 -> 1498;
1519 -> 1500;
1519 -> 1496;
1520 -> 1499;
1520 -> 1500;
1520 -> 1496;
1521 -> 1488;
1521 -> 1495;
1521 -> 1507;
1521 -> 1508;
1521 -> 1518;
1521 -> 1510;
1521 -> 1519;
1521 -> 1512;
1521 -> 1513;
1521 -> 1514;
1521 -> 1520;
1521 -> 1450;
1521 -> 1451;
1521 -> 1453;
1521 -> 1454;
1521 -> 1455;
1521 -> 1456;
1521 -> 1457;
1521 -> 1458;
1521 -> 1459;
1521 -> 1460;
1521 -> 1461;
1521 -> 1485;
1521 -> 1463;
1521 -> 1486;
1521 -> 1465;
1521 -> 1466;
1521 -> 1467;
1521 -> 1468;
1521 -> 1469;
1521 -> 1470;
1521 -> 1472;
1521 -> 1474;
1521 -> 1476;
1521 -> 1477;
1521 -> 1478;
1521 -> 1452;
1521 -> 1492;
1521 -> 1471;
1521 -> 1473;
1521 -> 1475;
1521 -> 1436;
1522 -> 1436;
1523 -> 1437;
1523 -> 1522;
1524 -> 1523;
1524 -> 1521;
1524 -> 1522;
1525 -> 1524;
1525 -> 1436;
1526 -> 1525;
1526 -> 1436;
1527 -> 1440;
1527 -> 1436;
1528 -> 1488;
1528 -> 1521;
1528 -> 1436;
1529 -> 1528;
1529 -> 1441;
1529 -> 1436;
1530 -> 1436;
1531 -> 1437;
1531 -> 1530;
1532 -> 1531;
1532 -> 1521;
1532 -> 1530;
1533 -> 1532;
1533 -> 1436;
1534 -> 1533;
1534 -> 1521;
1534 -> 1529;
1534 -> 1436;
1535 -> 971;
1536 -> 971;
1537 -> 1174;
1537 -> 1536;
1537 -> 971;
1538 -> 1537;
1539 -> 1174;
1539 -> 1521;
1539 -> 1529;
1539 -> 1538;
1540 -> 1539;
1540 -> 971;
1541 -> 971;
1542 -> 1540;
1542 -> 1541;
1543 -> 1433;
1543 -> 1541;
1544 -> 1541;
1545 -> 1543;
1545 -> 1521;
1545 -> 1544;
1545 -> 1541;
1546 -> 1542;
1546 -> 1543;
1546 -> 1541;
1547 -> 971;
1548 -> 971;
1549 -> 971;
1550 -> 1174;
1550 -> 1521;
1550 -> 1549;
1550 -> 971;
1551 -> 971;
1552 -> 1551;
1552 -> 971;
1553 -> 1433;
1553 -> 971;
1554 -> 1094;
1554 -> 971;
1555 -> 1550;
1555 -> 971;
1556 -> 1174;
1556 -> 971;
1557 -> 1548;
1557 -> 971;
1558 -> 1551;
1558 -> 971;
1559 -> 971;
1560 -> 1553;
1560 -> 1559;
1561 -> 1554;
1561 -> 1559;
1562 -> 1555;
1562 -> 1559;
1563 -> 1556;
1563 -> 1559;
1564 -> 1557;
1564 -> 1559;
1565 -> 1558;
1565 -> 1559;
1566 -> 1559;
1567 -> 1560;
1567 -> 1566;
1568 -> 1567;
1568 -> 1521;
1568 -> 1529;
1568 -> 1566;
1569 -> 1568;
1569 -> 1559;
1570 -> 1559;
1571 -> 1570;
1571 -> 1561;
1571 -> 1094;
1571 -> 1559;
1572 -> 1569;
1572 -> 1521;
1572 -> 1528;
1572 -> 1571;
1572 -> 1559;
1573 -> 1559;
1574 -> 1569;
1574 -> 1521;
1574 -> 1528;
1574 -> 1573;
1574 -> 1559;
1575 -> 1574;
1575 -> 1559;
1576 -> 1559;
1577 -> 1559;
1578 -> 1577;
1578 -> 1569;
1578 -> 1521;
1578 -> 1528;
1578 -> 1559;
1579 -> 1578;
1580 -> 1579;
1580 -> 1578;
1581 -> 1562;
1581 -> 1580;
1582 -> 1581;
1582 -> 1578;
1583 -> 1581;
1583 -> 1578;
1584 -> 1578;
1585 -> 1578;
1586 -> 1585;
1586 -> 1581;
1586 -> 1578;
1587 -> 1586;
1588 -> 1563;
1588 -> 1521;
1588 -> 1529;
1588 -> 1546;
1588 -> 1587;
1588 -> 1586;
1589 -> 1586;
1590 -> 1563;
1590 -> 1521;
1590 -> 1529;
1590 -> 1546;
1590 -> 1589;
1590 -> 1586;
1591 -> 1576;
1591 -> 1585;
1591 -> 1586;
1592 -> 1590;
1592 -> 1521;
1592 -> 1529;
1592 -> 1546;
1592 -> 1528;
1592 -> 1591;
1592 -> 1586;
1593 -> 1592;
1593 -> 1521;
1593 -> 1528;
1593 -> 1586;
1594 -> 1592;
1594 -> 1521;
1594 -> 1528;
1594 -> 1586;
1595 -> 1563;
1595 -> 1594;
1596 -> 1592;
1596 -> 1594;
1597 -> 1584;
1597 -> 1594;
1598 -> 1594;
1599 -> 1595;
1599 -> 1598;
1600 -> 1596;
1600 -> 1598;
1601 -> 1597;
1601 -> 1598;
1602 -> 1600;
1602 -> 1521;
1602 -> 1528;
1602 -> 1598;
1603 -> 1600;
1603 -> 1521;
1603 -> 1528;
1603 -> 1598;
1604 -> 1599;
1604 -> 1521;
1604 -> 1529;
1604 -> 1546;
1604 -> 1600;
1604 -> 1528;
1604 -> 1598;
1605 -> 1604;
1605 -> 1598;
1606 -> 1598;
1607 -> 1600;
1607 -> 1521;
1607 -> 1528;
1607 -> 1606;
1607 -> 1598;
1608 -> 1604;
1608 -> 1598;
1609 -> 1608;
1609 -> 1585;
1609 -> 1583;
1609 -> 1594;
1610 -> 1592;
1610 -> 1521;
1610 -> 1528;
1610 -> 1585;
1610 -> 1582;
1610 -> 1586;
1611 -> 1576;
1611 -> 1586;
1612 -> 1590;
1612 -> 1521;
1612 -> 1529;
1612 -> 1546;
1612 -> 1528;
1612 -> 1611;
1612 -> 1586;
1613 -> 1612;
1613 -> 1521;
1613 -> 1528;
1613 -> 1586;
1614 -> 1612;
1614 -> 1521;
1614 -> 1528;
1614 -> 1586;
1615 -> 1563;
1615 -> 1614;
1616 -> 1612;
1616 -> 1614;
1617 -> 1614;
1618 -> 1615;
1618 -> 1617;
1619 -> 1616;
1619 -> 1617;
1620 -> 1619;
1620 -> 1521;
1620 -> 1528;
1620 -> 1617;
1621 -> 1619;
1621 -> 1521;
1621 -> 1528;
1621 -> 1617;
1622 -> 1618;
1622 -> 1521;
1622 -> 1529;
1622 -> 1546;
1622 -> 1619;
1622 -> 1528;
1622 -> 1617;
1623 -> 1622;
1623 -> 1617;
1624 -> 1617;
1625 -> 1619;
1625 -> 1521;
1625 -> 1528;
1625 -> 1624;
1625 -> 1617;
1626 -> 1622;
1626 -> 1617;
1627 -> 1626;
1627 -> 1586;
1627 -> 1583;
1627 -> 1614;
1628 -> 1612;
1628 -> 1521;
1628 -> 1528;
1628 -> 1586;
1628 -> 1582;
1629 -> 1582;
1629 -> 1578;
1630 -> 1629;
1630 -> 1582;
1630 -> 1610;
1630 -> 1628;
1630 -> 1521;
1630 -> 1529;
1630 -> 1546;
1630 -> 1528;
1630 -> 1578;
1631 -> 1583;
1631 -> 1578;
1632 -> 1631;
1632 -> 1583;
1632 -> 1609;
1632 -> 1627;
1632 -> 1630;
1632 -> 1578;
1633 -> 1601;
1633 -> 1578;
1634 -> 1630;
1634 -> 1632;
1634 -> 1633;
1634 -> 1578;
1635 -> 1578;
1636 -> 1569;
1636 -> 1577;
1636 -> 1521;
1636 -> 1529;
1636 -> 1546;
1636 -> 1528;
1636 -> 1634;
1636 -> 1578;
1637 -> 1634;
1637 -> 1578;
1638 -> 1560;
1638 -> 1578;
1639 -> 1578;
1640 -> 1637;
1640 -> 1639;
1641 -> 1638;
1641 -> 1639;
1642 -> 1636;
1642 -> 1639;
1643 -> 1639;
1644 -> 1640;
1644 -> 1643;
1644 -> 1639;
1645 -> 1639;
1646 -> 1642;
1646 -> 1645;
1647 -> 1645;
1648 -> 1646;
1648 -> 1636;
1648 -> 1647;
1648 -> 1645;
1649 -> 1639;
1650 -> 1640;
1650 -> 1642;
1650 -> 1639;
1651 -> 1578;
1652 -> 1576;
1652 -> 1581;
1652 -> 1578;
1653 -> 1575;
1653 -> 1559;
1654 -> 971;
1655 -> 971;
1656 -> 1198;
1656 -> 1368;
1656 -> 1394;
1656 -> 1425;
1656 -> 1655;
1656 -> 971;
1657 -> 1174;
1657 -> 1656;
1658 -> 1198;
1658 -> 1656;
1659 -> 1433;
1659 -> 1656;
1660 -> 1174;
1660 -> 1656;
1661 -> 1564;
1661 -> 1656;
1662 -> 1656;
1663 -> 1658;
1663 -> 1662;
1664 -> 1659;
1664 -> 1662;
1665 -> 1660;
1665 -> 1662;
1666 -> 1660;
1666 -> 1662;
1667 -> 1661;
1667 -> 1662;
1668 -> 1662;
1669 -> 1663;
1669 -> 1198;
1669 -> 1368;
1669 -> 1394;
1669 -> 1425;
1669 -> 1668;
1669 -> 1662;
1670 -> 1662;
1671 -> 1664;
1671 -> 1670;
1672 -> 1671;
1672 -> 1636;
1672 -> 1670;
1673 -> 1672;
1673 -> 1662;
1674 -> 1662;
1675 -> 1673;
1675 -> 1674;
1675 -> 1662;
1676 -> 1663;
1676 -> 1662;
1677 -> 1665;
1677 -> 1676;
1677 -> 1636;
1677 -> 1650;
1678 -> 1676;
1679 -> 1677;
1679 -> 1678;
1679 -> 1676;
1680 -> 1665;
1680 -> 1676;
1680 -> 1677;
1680 -> 1679;
1681 -> 1680;
1681 -> 1679;
1682 -> 1666;
1682 -> 1679;
1683 -> 1666;
1683 -> 1680;
1683 -> 1676;
1683 -> 1679;
1684 -> 1667;
1684 -> 1679;
1685 -> 1664;
1685 -> 1679;
1686 -> 1679;
1687 -> 1681;
1687 -> 1686;
1688 -> 1682;
1688 -> 1686;
1689 -> 1683;
1689 -> 1686;
1690 -> 1684;
1690 -> 1686;
1691 -> 1685;
1691 -> 1686;
1692 -> 1689;
1692 -> 1680;
1692 -> 1686;
1693 -> 1689;
1693 -> 1680;
1693 -> 1686;
1694 -> 1689;
1694 -> 1680;
1694 -> 1686;
1695 -> 1686;
1696 -> 1694;
1696 -> 1695;
1697 -> 1696;
1697 -> 1680;
1697 -> 1695;
1698 -> 1697;
1698 -> 1686;
1699 -> 1698;
1699 -> 1680;
1699 -> 1686;
1700 -> 1686;
1701 -> 1686;
1702 -> 1701;
1702 -> 1699;
1702 -> 1686;
1703 -> 1687;
1703 -> 1680;
1703 -> 1701;
1703 -> 1702;
1704 -> 1703;
1704 -> 1702;
1705 -> 1703;
1705 -> 1702;
1706 -> 1702;
1707 -> 1687;
1707 -> 1706;
1708 -> 1707;
1708 -> 1703;
1708 -> 1706;
1709 -> 1708;
1709 -> 1702;
1710 -> 1700;
1710 -> 1702;
1711 -> 1704;
1711 -> 1702;
1712 -> 1702;
1713 -> 1703;
1713 -> 1702;
1714 -> 1709;
1714 -> 1710;
1714 -> 1711;
1714 -> 1712;
1714 -> 1713;
1714 -> 1703;
1714 -> 1704;
1714 -> 1702;
1715 -> 1702;
1716 -> 1702;
1717 -> 1716;
1717 -> 1703;
1717 -> 1702;
1718 -> 1704;
1718 -> 1702;
1719 -> 1718;
1719 -> 1714;
1719 -> 1702;
1720 -> 1705;
1720 -> 1702;
1721 -> 1715;
1721 -> 1702;
1722 -> 1719;
1722 -> 1720;
1722 -> 1721;
1722 -> 1702;
1723 -> 1698;
1723 -> 1701;
1723 -> 1680;
1723 -> 1722;
1723 -> 1702;
1724 -> 1722;
1724 -> 1702;
1725 -> 1691;
1725 -> 1702;
1726 -> 1702;
1727 -> 1724;
1727 -> 1726;
1728 -> 1725;
1728 -> 1726;
1729 -> 1723;
1729 -> 1726;
1730 -> 1726;
1731 -> 1727;
1731 -> 1730;
1731 -> 1726;
1732 -> 1726;
1733 -> 1729;
1733 -> 1732;
1734 -> 1732;
1735 -> 1733;
1735 -> 1723;
1735 -> 1734;
1735 -> 1732;
1736 -> 1726;
1737 -> 1702;
1738 -> 1700;
1738 -> 1703;
1738 -> 1702;
1739 -> 1679;
1740 -> 1690;
1740 -> 1727;
1741 -> 1664;
1741 -> 1727;
1742 -> 1727;
1743 -> 1741;
1743 -> 1727;
1744 -> 1727;
1745 -> 1727;
1746 -> 1727;
1747 -> 1727;
1747 -> 1746;
1748 -> 1747;
1748 -> 1727;
1748 -> 1746;
1749 -> 1742;
1749 -> 1748;
1750 -> 1747;
1750 -> 1748;
1751 -> 1727;
1751 -> 1748;
1752 -> 1748;
1753 -> 1749;
1753 -> 1752;
1754 -> 1750;
1754 -> 1752;
1755 -> 1751;
1755 -> 1752;
1756 -> 1754;
1756 -> 1727;
1756 -> 1752;
1757 -> 1754;
1757 -> 1727;
1757 -> 1752;
1758 -> 1753;
1758 -> 1752;
1759 -> 1752;
1760 -> 1754;
1760 -> 1727;
1760 -> 1759;
1760 -> 1752;
1761 -> 1753;
1761 -> 1746;
1761 -> 1727;
1761 -> 1748;
1762 -> 1727;
1762 -> 1746;
1762 -> 1748;
1763 -> 1740;
1763 -> 1748;
1764 -> 1748;
1765 -> 1762;
1765 -> 1764;
1766 -> 1763;
1766 -> 1764;
1767 -> 1764;
1768 -> 1764;
1769 -> 1766;
1769 -> 1768;
1769 -> 1764;
1770 -> 1769;
1771 -> 1765;
1771 -> 1764;
1772 -> 1764;
1773 -> 1764;
1774 -> 1771;
1774 -> 1773;
1775 -> 1772;
1775 -> 1773;
1776 -> 1773;
1777 -> 1775;
1777 -> 1773;
1778 -> 1775;
1778 -> 1773;
1779 -> 1773;
1780 -> 1774;
1780 -> 1779;
1780 -> 1773;
1781 -> 1774;
1781 -> 1775;
1781 -> 1773;
1782 -> 1775;
1782 -> 1773;
1783 -> 1773;
1784 -> 1773;
1785 -> 1782;
1785 -> 1784;
1786 -> 1783;
1786 -> 1784;
1787 -> 1783;
1787 -> 1784;
1788 -> 1784;
1789 -> 1787;
1789 -> 1784;
1790 -> 1787;
1790 -> 1784;
1791 -> 1787;
1791 -> 1784;
1792 -> 1784;
1793 -> 1785;
1793 -> 1792;
1793 -> 1784;
1794 -> 1784;
1795 -> 1786;
1795 -> 1794;
1795 -> 1784;
1796 -> 1785;
1796 -> 1787;
1796 -> 1784;
1797 -> 1786;
1797 -> 1787;
1797 -> 1784;
1798 -> 1787;
1798 -> 1784;
1799 -> 1784;
1800 -> 1784;
1801 -> 1798;
1801 -> 1800;
1802 -> 1799;
1802 -> 1800;
1803 -> 1800;
1804 -> 1802;
1804 -> 1800;
1805 -> 1802;
1805 -> 1800;
1806 -> 1800;
1807 -> 1801;
1807 -> 1806;
1807 -> 1800;
1808 -> 1801;
1808 -> 1802;
1808 -> 1800;
1809 -> 0;
1809 -> 1802;
1809 -> 1800;
1810 -> 1799;
1810 -> 1787;
1810 -> 1784;
1811 -> 1783;
1811 -> 1775;
1811 -> 1773;
1812 -> 1765;
1812 -> 1764;
1813 -> 1772;
1813 -> 1764;
1814 -> 1770;
1814 -> 1812;
1814 -> 1813;
1814 -> 1764;
1815 -> 1772;
1815 -> 1764;
1816 -> 1815;
1816 -> 1748;
1817 -> 1816;
1817 -> 1746;
1817 -> 1727;
1817 -> 1748;
1818 -> 1765;
1818 -> 1770;
1819 -> 1767;
1819 -> 1770;
1820 -> 1770;
1820 -> 1818;
1820 -> 1819;
1820 -> 1727;
1820 -> 1814;
1820 -> 1775;
1820 -> 1781;
1820 -> 1811;
1820 -> 1787;
1820 -> 1796;
1820 -> 1797;
1820 -> 1810;
1820 -> 1802;
1820 -> 1809;
1820 -> 1808;
1821 -> 1727;
1821 -> 1761;
1821 -> 1817;
1821 -> 1820;
1822 -> 1743;
1822 -> 1727;
1823 -> 1727;
1824 -> 1821;
1824 -> 1823;
1824 -> 1727;
1825 -> 1727;
1826 -> 1821;
1826 -> 1825;
1827 -> 1825;
1828 -> 1826;
1828 -> 1821;
1828 -> 1827;
1828 -> 1825;
1829 -> 1727;
1830 -> 1727;
1831 -> 1664;
1831 -> 1821;
1832 -> 1831;
1832 -> 1821;
1833 -> 1821;
1834 -> 1821;
1835 -> 1821;
1836 -> 1821;
1837 -> 1821;
1838 -> 1821;
1839 -> 1821;
1840 -> 1839;
1840 -> 1821;
1841 -> 1839;
1841 -> 1821;
1842 -> 1821;
1843 -> 1839;
1843 -> 1842;
1843 -> 1821;
1844 -> 1839;
1844 -> 1821;
1845 -> 1839;
1845 -> 1821;
1846 -> 1839;
1846 -> 1821;
1847 -> 1821;
1848 -> 1839;
1848 -> 1847;
1848 -> 1821;
1849 -> 1821;
1850 -> 1839;
1850 -> 1849;
1850 -> 1821;
1851 -> 1839;
1851 -> 1821;
1852 -> 1839;
1852 -> 1821;
1853 -> 1821;
1854 -> 1839;
1854 -> 1853;
1854 -> 1821;
1855 -> 1839;
1856 -> 1839;
1857 -> 1839;
1858 -> 1839;
1859 -> 1839;
1860 -> 1839;
1861 -> 1839;
1862 -> 1839;
1863 -> 1839;
1864 -> 1839;
1865 -> 1839;
1866 -> 1832;
1866 -> 1821;
1867 -> 1821;
1868 -> 1839;
1868 -> 1867;
1868 -> 1821;
1869 -> 1821;
1870 -> 1839;
1870 -> 1869;
1871 -> 1869;
1872 -> 1870;
1872 -> 1839;
1872 -> 1871;
1872 -> 1869;
1873 -> 1821;
1874 -> 1821;
1875 -> 1664;
1875 -> 1839;
1876 -> 1875;
1876 -> 1839;
1877 -> 1839;
1878 -> 1839;
1879 -> 1839;
1880 -> 1839;
1881 -> 1839;
1882 -> 1839;
1883 -> 1882;
1884 -> 1883;
1885 -> 1839;
1885 -> 1882;
1886 -> 1884;
1886 -> 1885;
1886 -> 1882;
1887 -> 1886;
1888 -> 1886;
1889 -> 1886;
1890 -> 1886;
1891 -> 1886;
1892 -> 1886;
1893 -> 1886;
1894 -> 1886;
1895 -> 1886;
1896 -> 1886;
1897 -> 1886;
1898 -> 1876;
1898 -> 1839;
1899 -> 1839;
1900 -> 1886;
1900 -> 1899;
1900 -> 1839;
1901 -> 1839;
1902 -> 1886;
1902 -> 1901;
1903 -> 1901;
1904 -> 1902;
1904 -> 1886;
1904 -> 1903;
1904 -> 1901;
1905 -> 1839;
1906 -> 1839;
1907 -> 1664;
1907 -> 1886;
1908 -> 1907;
1908 -> 1886;
1909 -> 1886;
1910 -> 1886;
1911 -> 1886;
1912 -> 1886;
1913 -> 1886;
1914 -> 1908;
1914 -> 1886;
1915 -> 1886;
1916 -> 1886;
1917 -> 1886;
1917 -> 1916;
1918 -> 1916;
1919 -> 1917;
1919 -> 1886;
1919 -> 1918;
1919 -> 1916;
1920 -> 1886;
1921 -> 1886;
1922 -> 1662;
1923 -> 1662;
1924 -> 1664;
1924 -> 1923;
1925 -> 1924;
1925 -> 1886;
1925 -> 1923;
1926 -> 1925;
1926 -> 1662;
1927 -> 1662;
1928 -> 1662;
1929 -> 1926;
1929 -> 1928;
1930 -> 1928;
1931 -> 1929;
1931 -> 1930;
1932 -> 1930;
1933 -> 1931;
1933 -> 1926;
1933 -> 1932;
1933 -> 1930;
1934 -> 1928;
1935 -> 1929;
1935 -> 1926;
1935 -> 1928;
1936 -> 1663;
1936 -> 1662;
1937 -> 1666;
1937 -> 1926;
1937 -> 1936;
1938 -> 1937;
1938 -> 1926;
1938 -> 1936;
1939 -> 1937;
1939 -> 1926;
1939 -> 1936;
1940 -> 1665;
1940 -> 1936;
1940 -> 1926;
1941 -> 1936;
1942 -> 1940;
1942 -> 1941;
1943 -> 1922;
1943 -> 1936;
1944 -> 1665;
1944 -> 1936;
1944 -> 1942;
1945 -> 1936;
1946 -> 1944;
1946 -> 1945;
1947 -> 1937;
1947 -> 1926;
1947 -> 1936;
1948 -> 1947;
1948 -> 1944;
1948 -> 1936;
1949 -> 1936;
1950 -> 1922;
1950 -> 1943;
1950 -> 1949;
1950 -> 1936;
1951 -> 1673;
1951 -> 1936;
1952 -> 1936;
1953 -> 1951;
1953 -> 1952;
1954 -> 1937;
1954 -> 1926;
1954 -> 1952;
1955 -> 1952;
1956 -> 1954;
1956 -> 1944;
1956 -> 1955;
1956 -> 1952;
1957 -> 1953;
1957 -> 1954;
1957 -> 1952;
1958 -> 1936;
1959 -> 1666;
1959 -> 1944;
1959 -> 1957;
1959 -> 1936;
1960 -> 1959;
1960 -> 1944;
1960 -> 1936;
1961 -> 1959;
1961 -> 1944;
1961 -> 1936;
1962 -> 1665;
1962 -> 1936;
1962 -> 1944;
1962 -> 1957;
1963 -> 1962;
1963 -> 1945;
1964 -> 1959;
1964 -> 1944;
1964 -> 1936;
1965 -> 1665;
1965 -> 1964;
1965 -> 1962;
1966 -> 1964;
1967 -> 1965;
1967 -> 1966;
1968 -> 1959;
1968 -> 1965;
1968 -> 1955;
1968 -> 1952;
1969 -> 1965;
1969 -> 1936;
1970 -> 1965;
1970 -> 1936;
1971 -> 1965;
1971 -> 1945;
1972 -> 1965;
1973 -> 1965;
1973 -> 1955;
1973 -> 1952;
1974 -> 1922;
1974 -> 1943;
1974 -> 1662;
1975 -> 1662;
1976 -> 1886;
1976 -> 1975;
1976 -> 1662;
1977 -> 1886;
1977 -> 1965;
1977 -> 1976;
1978 -> 1673;
1978 -> 1977;
1979 -> 1977;
1980 -> 1978;
1980 -> 1979;
1981 -> 1979;
1982 -> 1977;
1983 -> 1980;
1984 -> 1656;
1985 -> 972;
1985 -> 1965;
1985 -> 971;
1986 -> 972;
1986 -> 1965;
1986 -> 1985;
1987 -> 973;
1987 -> 1965;
1987 -> 1986;
1988 -> 1198;
1988 -> 1986;
1989 -> 1174;
1989 -> 1986;
1990 -> 1986;
1991 -> 1988;
1991 -> 1990;
1992 -> 1989;
1992 -> 1990;
1993 -> 1989;
1993 -> 1990;
1994 -> 1991;
1994 -> 1990;
1995 -> 1993;
1995 -> 1965;
1995 -> 1980;
1995 -> 1994;
1996 -> 1995;
1996 -> 1965;
1996 -> 1994;
1997 -> 1992;
1997 -> 1994;
1997 -> 1965;
1997 -> 1980;
1998 -> 1994;
1999 -> 1997;
1999 -> 1998;
1999 -> 1994;
2000 -> 1992;
2000 -> 1994;
2000 -> 1997;
2000 -> 1999;
2001 -> 1995;
2001 -> 1965;
2001 -> 1999;
2002 -> 2000;
2002 -> 2001;
2002 -> 1999;
2003 -> 2002;
2003 -> 1994;
2004 -> 1986;
2005 -> 1197;
2005 -> 1986;
2006 -> 1094;
2006 -> 1986;
2007 -> 1174;
2007 -> 1986;
2008 -> 974;
2008 -> 2002;
2008 -> 1986;
2009 -> 1539;
2009 -> 1986;
2010 -> 1433;
2010 -> 1986;
2011 -> 2009;
2011 -> 1986;
2012 -> 1653;
2012 -> 1986;
2013 -> 1986;
2014 -> 1433;
2014 -> 2013;
2015 -> 2013;
2016 -> 2014;
2016 -> 2015;
2017 -> 2016;
2017 -> 2008;
2017 -> 2015;
2018 -> 2017;
2018 -> 2013;
2019 -> 2013;
2020 -> 1986;
2021 -> 2018;
2021 -> 2020;
2022 -> 2020;
2023 -> 2021;
2023 -> 2022;
2024 -> 2022;
2025 -> 2023;
2025 -> 2018;
2025 -> 2024;
2025 -> 2022;
2026 -> 2020;
2027 -> 2021;
2027 -> 2018;
2027 -> 2020;
2028 -> 1986;
2029 -> 1433;
2029 -> 2028;
2030 -> 2028;
2031 -> 2029;
2031 -> 2030;
2032 -> 2031;
2032 -> 2018;
2032 -> 2030;
2033 -> 2028;
2034 -> 1986;
2035 -> 2032;
2035 -> 2034;
2036 -> 2034;
2037 -> 2035;
2037 -> 2036;
2038 -> 2036;
2039 -> 2037;
2039 -> 2032;
2039 -> 2038;
2039 -> 2036;
2040 -> 2034;
2041 -> 2035;
2041 -> 2032;
2041 -> 2034;
2042 -> 973;
2042 -> 2005;
2042 -> 2006;
2042 -> 2007;
2042 -> 2008;
2042 -> 2011;
2042 -> 2012;
2042 -> 2027;
2042 -> 2041;
2042 -> 2032;
2042 -> 2018;
2042 -> 1094;
2042 -> 2002;
2042 -> 1653;
2042 -> 1197;
2042 -> 1986;
2043 -> 972;
2043 -> 2042;
2043 -> 1986;
2044 -> 973;
2044 -> 1986;
2045 -> 973;
2045 -> 972;
2045 -> 1986;
2046 -> 1433;
2046 -> 972;
2046 -> 1986;
2047 -> 971;
2048 -> 974;
2048 -> 2042;
2048 -> 2045;
2048 -> 2046;
2048 -> 971;
2049 -> 975;
2049 -> 2048;
2049 -> 971;
2050 -> 2047;
2050 -> 967;
2051 -> 969;
2051 -> 2049;
2051 -> 2050;
2051 -> 967;
2052 -> 969;
2052 -> 2049;
2052 -> 967;
2053 -> 968;
2053 -> 2052;
2053 -> 967;
2054 -> 965;
2055 -> 964;
2055 -> 2052;
2055 -> 965;
2056 -> 964;
2056 -> 2052;
2056 -> 963;
2057 -> 2056;
2057 -> 961;
2058 -> 962;
2058 -> 2052;
2058 -> 961;
2059 -> 962;
2059 -> 2058;
2059 -> 961;
2060 -> 2059;
2060 -> 959;
2061 -> 2060;
2061 -> 956;
2062 -> 956;
2063 -> 2061;
2063 -> 2062;
2064 -> 957;
2064 -> 2063;
2064 -> 954;
2064 -> 2058;
2064 -> 956;
2065 -> 956;
2066 -> 958;
2066 -> 2065;
2067 -> 2066;
2067 -> 2064;
2067 -> 2065;
2068 -> 2066;
2068 -> 2064;
2068 -> 2065;
2069 -> 2068;
2069 -> 956;
2070 -> 956;
2071 -> 2070;
2071 -> 2069;
2071 -> 2064;
2071 -> 956;
2072 -> 2070;
2072 -> 2071;
2073 -> 2069;
2073 -> 2072;
2073 -> 2070;
2074 -> 2072;
2075 -> 2073;
2075 -> 2074;
2076 -> 953;
2077 -> 952;
2077 -> 953;
2078 -> 953;
2079 -> 953;
2080 -> 2077;
2080 -> 2079;
2081 -> 2078;
2081 -> 2079;
2082 -> 0;
2082 -> 2081;
2082 -> 2079;
2083 -> 2080;
2083 -> 2081;
2083 -> 2079;
2084 -> 2078;
2084 -> 954;
2084 -> 2075;
2084 -> 953;
2085 -> 2084;
2085 -> 2078;
2086 -> 2078;
2087 -> 2085;
2087 -> 2084;
2087 -> 2086;
2087 -> 2078;
2088 -> 2087;
2089 -> 2085;
2089 -> 2087;
2090 -> 2087;
2091 -> 2085;
2091 -> 2090;
2092 -> 2090;
2093 -> 2091;
2093 -> 2084;
2093 -> 2092;
2094 -> 2093;
2094 -> 2084;
2094 -> 2092;
2095 -> 2094;
2095 -> 2090;
2096 -> 2095;
2096 -> 2087;
2097 -> 2087;
2098 -> 2096;
2098 -> 2097;
2099 -> 2097;
2100 -> 2098;
2100 -> 2099;
2101 -> 2100;
2101 -> 2097;
2102 -> 2098;
2102 -> 2097;
2103 -> 2097;
2105 -> 2104;
2107 -> 2106;
2108 -> 2088;
2108 -> 2087;
2109 -> 2087;
2110 -> 2087;
2111 -> 2089;
2111 -> 2110;
2112 -> 2089;
2112 -> 2110;
2113 -> 2101;
2113 -> 2110;
2114 -> 2108;
2114 -> 2110;
2115 -> 2109;
2115 -> 2110;
2116 -> 2110;
2117 -> 2115;
2117 -> 2110;
2118 -> 2115;
2118 -> 2110;
2119 -> 2115;
2119 -> 2110;
2120 -> 2115;
2120 -> 2110;
2121 -> 2115;
2121 -> 2110;
2122 -> 2115;
2122 -> 2110;
2125 -> 2124;
2125 -> 2123;
2127 -> 2126;
2127 -> 2123;
2128 -> 2123;
2131 -> 2130;
2131 -> 2129;
2133 -> 2132;
2133 -> 2129;
2134 -> 2129;
2136 -> 0;
2136 -> 2135;
2138 -> 0;
2138 -> 2137;
2139 -> 2138;
2139 -> 2135;
2140 -> 2135;
2142 -> 0;
2142 -> 2141;
2143 -> 0;
2143 -> 2141;
2144 -> 2141;
2145 -> 2134;
2145 -> 2115;
2145 -> 2110;
2146 -> 2110;
2147 -> 2113;
2147 -> 2146;
2147 -> 2110;
2148 -> 2111;
2148 -> 2115;
2148 -> 2110;
2149 -> 2112;
2149 -> 2115;
2149 -> 2110;
2150 -> 2113;
2150 -> 2115;
2150 -> 2110;
2151 -> 2113;
2151 -> 2101;
2151 -> 2110;
2152 -> 2151;
2152 -> 2101;
2153 -> 2114;
2153 -> 2152;
2153 -> 2088;
2153 -> 2101;
2153 -> 2151;
2154 -> 2088;
2154 -> 2153;
2154 -> 2087;
2155 -> 2088;
2155 -> 2153;
2155 -> 2087;
2156 -> 2085;
2156 -> 2155;
2156 -> 2087;
2157 -> 2109;
2157 -> 2087;
2158 -> 2087;
2159 -> 2156;
2159 -> 2157;
2159 -> 2158;
2159 -> 2115;
2159 -> 2148;
2159 -> 2149;
2159 -> 2150;
2159 -> 2120;
2159 -> 2121;
2159 -> 2122;
2159 -> 2145;
2159 -> 2155;
2159 -> 2131;
2159 -> 2133;
2159 -> 2129;
2159 -> 2087;
2160 -> 2085;
2160 -> 2159;
2160 -> 2078;
2161 -> 2084;
2161 -> 2078;
2162 -> 2161;
2162 -> 2078;
2163 -> 2162;
2163 -> 2160;
2163 -> 2078;
2164 -> 2084;
2164 -> 2078;
2165 -> 2164;
2165 -> 2163;
2165 -> 2078;
2166 -> 953;
2167 -> 2078;
2167 -> 2166;
2168 -> 2078;
2168 -> 2166;
2169 -> 2165;
2169 -> 2166;
2170 -> 2078;
2170 -> 2166;
2171 -> 2166;
2172 -> 2169;
2172 -> 2165;
2172 -> 2171;
2172 -> 2166;
2173 -> 2166;
2174 -> 2169;
2174 -> 2165;
2174 -> 2173;
2174 -> 2166;
2175 -> 2174;
2175 -> 2166;
2176 -> 2167;
2176 -> 2175;
2177 -> 2168;
2177 -> 2175;
2178 -> 2170;
2178 -> 2175;
2179 -> 2175;
2180 -> 2176;
2180 -> 2179;
2181 -> 2177;
2181 -> 2179;
2182 -> 2175;
2182 -> 2179;
2183 -> 2178;
2183 -> 2179;
2184 -> 2175;
2184 -> 2179;
2185 -> 2179;
2186 -> 2184;
2186 -> 2179;
2187 -> 2184;
2187 -> 2179;
2188 -> 2184;
2188 -> 2179;
2189 -> 2180;
2189 -> 2184;
2189 -> 2179;
2190 -> 2182;
2190 -> 2184;
2190 -> 2179;
2191 -> 2181;
2191 -> 2184;
2191 -> 2179;
2192 -> 2184;
2192 -> 2179;
2193 -> 0;
2193 -> 2179;
2194 -> 2192;
2194 -> 2184;
2194 -> 2179;
2195 -> 2183;
2195 -> 2184;
2195 -> 2179;
2196 -> 2182;
2196 -> 2179;
2197 -> 2196;
2198 -> 2196;
2198 -> 2197;
2199 -> 2198;
2199 -> 2197;
2200 -> 2199;
2200 -> 2196;
2201 -> 2196;
2202 -> 954;
2202 -> 2165;
2202 -> 953;
2203 -> 952;
2203 -> 2202;
2203 -> 953;
2204 -> 2175;
2204 -> 953;
2205 -> 953;
2206 -> 2203;
2206 -> 2204;
2206 -> 2205;
2206 -> 2184;
2206 -> 2191;
2206 -> 2195;
2206 -> 2194;
2206 -> 2189;
2206 -> 2190;
2206 -> 2202;
2206 -> 2082;
2206 -> 2083;
2206 -> 2165;
2206 -> 2192;
2206 -> 953;
2207 -> 952;
2207 -> 2206;
2207 -> 951;
2208 -> 2207;
2208 -> 1;
2209 -> 1;
2210 -> 1;
2211 -> 2209;
2211 -> 2210;
2212 -> 2209;
2212 -> 2210;
2213 -> 2208;
2213 -> 2210;
2214 -> 2211;
2214 -> 2210;
2215 -> 2210;
2216 -> 2214;
2216 -> 2215;
2217 -> 2213;
2217 -> 2215;
2218 -> 2217;
2218 -> 2206;
2218 -> 2216;
2218 -> 2215;
2219 -> 2215;
2220 -> 2218;
2220 -> 2219;
2221 -> 2218;
2221 -> 2219;
2222 -> 2219;
2223 -> 2219;
2224 -> 2221;
2224 -> 2218;
2224 -> 2219;
2225 -> 2220;
2225 -> 2224;
2226 -> 2224;
2227 -> 2225;
2227 -> 2226;
2228 -> 2224;
2228 -> 2226;
2229 -> 2226;
2230 -> 2229;
2230 -> 2226;
2231 -> 2226;
2232 -> 2228;
2232 -> 2231;
2233 -> 2231;
2234 -> 2232;
2234 -> 2218;
2234 -> 2233;
2234 -> 2231;
2235 -> 2234;
2236 -> 2232;
2236 -> 2218;
2236 -> 2234;
2237 -> 2235;
2237 -> 2234;
2238 -> 2234;
2239 -> 2237;
2239 -> 2238;
2240 -> 2232;
2240 -> 2238;
2241 -> 2240;
2241 -> 2218;
2241 -> 2238;
2242 -> 2238;
2243 -> 2241;
2243 -> 2242;
2244 -> 2241;
2244 -> 2242;
2245 -> 2243;
2245 -> 2242;
2246 -> 0;
2246 -> 2242;
2247 -> 2245;
2247 -> 2244;
2247 -> 2242;
2248 -> 2240;
2248 -> 2247;
2248 -> 2238;
2249 -> 2248;
2250 -> 2239;
2250 -> 2248;
2251 -> 2248;
2252 -> 2249;
2252 -> 2251;
2253 -> 2250;
2253 -> 2251;
2254 -> 2240;
2254 -> 2251;
2255 -> 2252;
2255 -> 2247;
2255 -> 2251;
2256 -> 2254;
2256 -> 2255;
2257 -> 2252;
2257 -> 2255;
2258 -> 2253;
2258 -> 2255;
2259 -> 2255;
2260 -> 2255;
2261 -> 2256;
2261 -> 2260;
2262 -> 2257;
2262 -> 2260;
2263 -> 2258;
2263 -> 2260;
2264 -> 2259;
2264 -> 2260;
2265 -> 2259;
2265 -> 2260;
2267 -> 2266;
2269 -> 2268;
2271 -> 2270;
2273 -> 2272;
2275 -> 2274;
2277 -> 2276;
2278 -> 0;
2280 -> 2267;
2280 -> 2279;
2281 -> 2269;
2281 -> 2279;
2282 -> 2271;
2282 -> 2279;
2283 -> 2273;
2283 -> 2279;
2284 -> 2275;
2284 -> 2279;
2285 -> 2277;
2285 -> 2279;
2286 -> 2278;
2286 -> 2279;
2287 -> 2279;
2288 -> 2287;
2288 -> 2279;
2289 -> 2287;
2289 -> 2279;
2290 -> 2287;
2290 -> 2279;
2291 -> 2287;
2291 -> 2279;
2292 -> 2287;
2292 -> 2279;
2293 -> 2287;
2293 -> 2279;
2294 -> 2287;
2294 -> 2279;
2295 -> 2281;
2295 -> 2279;
2296 -> 2279;
2297 -> 2280;
2297 -> 2287;
2297 -> 2279;
2298 -> 2281;
2298 -> 2287;
2298 -> 2279;
2299 -> 2282;
2299 -> 2287;
2299 -> 2279;
2300 -> 2283;
2300 -> 2287;
2300 -> 2279;
2301 -> 2284;
2301 -> 2287;
2301 -> 2279;
2302 -> 2285;
2302 -> 2287;
2302 -> 2279;
2303 -> 2286;
2303 -> 2287;
2303 -> 2279;
2304 -> 2287;
2304 -> 2303;
2304 -> 0;
2304 -> 2279;
2305 -> 2279;
2306 -> 2285;
2306 -> 2279;
2307 -> 2279;
2309 -> 2308;
2311 -> 2310;
2313 -> 2312;
2315 -> 2314;
2317 -> 2316;
2319 -> 2318;
2320 -> 0;
2322 -> 2309;
2322 -> 2321;
2323 -> 2311;
2323 -> 2321;
2324 -> 2313;
2324 -> 2321;
2325 -> 2315;
2325 -> 2321;
2326 -> 2317;
2326 -> 2321;
2327 -> 2319;
2327 -> 2321;
2328 -> 2320;
2328 -> 2321;
2329 -> 2321;
2330 -> 2329;
2330 -> 2321;
2331 -> 2329;
2331 -> 2321;
2332 -> 2329;
2332 -> 2321;
2333 -> 2329;
2333 -> 2321;
2334 -> 2329;
2334 -> 2321;
2335 -> 2329;
2335 -> 2321;
2336 -> 2329;
2336 -> 2321;
2337 -> 2323;
2337 -> 2322;
2337 -> 2321;
2338 -> 2321;
2339 -> 2322;
2339 -> 2329;
2339 -> 2321;
2340 -> 2323;
2340 -> 2329;
2340 -> 2321;
2341 -> 2324;
2341 -> 2329;
2341 -> 2321;
2342 -> 2325;
2342 -> 2329;
2342 -> 2321;
2343 -> 2326;
2343 -> 2329;
2343 -> 2321;
2344 -> 2327;
2344 -> 2329;
2344 -> 2321;
2345 -> 2328;
2345 -> 2329;
2345 -> 2321;
2346 -> 2329;
2346 -> 2345;
2346 -> 0;
2346 -> 2321;
2347 -> 2321;
2348 -> 2327;
2348 -> 2321;
2349 -> 2321;
2351 -> 2350;
2353 -> 2352;
2355 -> 2354;
2357 -> 2356;
2359 -> 2358;
2361 -> 2360;
2362 -> 0;
2364 -> 2351;
2364 -> 2363;
2365 -> 2353;
2365 -> 2363;
2366 -> 2355;
2366 -> 2363;
2367 -> 2357;
2367 -> 2363;
2368 -> 2359;
2368 -> 2363;
2369 -> 2361;
2369 -> 2363;
2370 -> 2362;
2370 -> 2363;
2371 -> 2363;
2372 -> 2371;
2372 -> 2363;
2373 -> 2371;
2373 -> 2363;
2374 -> 2371;
2374 -> 2363;
2375 -> 2371;
2375 -> 2363;
2376 -> 2371;
2376 -> 2363;
2377 -> 2371;
2377 -> 2363;
2378 -> 2371;
2378 -> 2363;
2379 -> 2365;
2379 -> 2364;
2379 -> 2363;
2380 -> 2363;
2381 -> 2364;
2381 -> 2371;
2381 -> 2363;
2382 -> 2365;
2382 -> 2371;
2382 -> 2363;
2383 -> 2366;
2383 -> 2371;
2383 -> 2363;
2384 -> 2367;
2384 -> 2371;
2384 -> 2363;
2385 -> 2368;
2385 -> 2371;
2385 -> 2363;
2386 -> 2369;
2386 -> 2371;
2386 -> 2363;
2387 -> 2370;
2387 -> 2371;
2387 -> 2363;
2388 -> 2371;
2388 -> 2387;
2388 -> 0;
2388 -> 2363;
2389 -> 2363;
2390 -> 2369;
2390 -> 2363;
2391 -> 2363;
2393 -> 2392;
2395 -> 2394;
2397 -> 2396;
2399 -> 2398;
2401 -> 2400;
2403 -> 2402;
2404 -> 0;
2406 -> 2393;
2406 -> 2405;
2407 -> 2395;
2407 -> 2405;
2408 -> 2397;
2408 -> 2405;
2409 -> 2399;
2409 -> 2405;
2410 -> 2401;
2410 -> 2405;
2411 -> 2403;
2411 -> 2405;
2412 -> 2404;
2412 -> 2405;
2413 -> 2405;
2414 -> 2413;
2414 -> 2405;
2415 -> 2413;
2415 -> 2405;
2416 -> 2413;
2416 -> 2405;
2417 -> 2413;
2417 -> 2405;
2418 -> 2413;
2418 -> 2405;
2419 -> 2413;
2419 -> 2405;
2420 -> 2413;
2420 -> 2405;
2421 -> 2407;
2421 -> 2406;
2421 -> 2405;
2422 -> 2405;
2423 -> 2406;
2423 -> 2413;
2423 -> 2405;
2424 -> 2407;
2424 -> 2413;
2424 -> 2405;
2425 -> 2408;
2425 -> 2413;
2425 -> 2405;
2426 -> 2409;
2426 -> 2413;
2426 -> 2405;
2427 -> 2410;
2427 -> 2413;
2427 -> 2405;
2428 -> 2411;
2428 -> 2413;
2428 -> 2405;
2429 -> 2412;
2429 -> 2413;
2429 -> 2405;
2430 -> 2413;
2430 -> 2429;
2430 -> 0;
2430 -> 2405;
2431 -> 2405;
2432 -> 2411;
2432 -> 2405;
2433 -> 2413;
2433 -> 2429;
2433 -> 0;
2433 -> 2432;
2434 -> 2433;
2434 -> 2413;
2434 -> 2432;
2435 -> 2405;
2437 -> 2436;
2439 -> 2438;
2441 -> 2440;
2443 -> 2442;
2445 -> 2444;
2447 -> 2446;
2448 -> 0;
2450 -> 2437;
2450 -> 2449;
2451 -> 2439;
2451 -> 2449;
2452 -> 2441;
2452 -> 2449;
2453 -> 2443;
2453 -> 2449;
2454 -> 2445;
2454 -> 2449;
2455 -> 2447;
2455 -> 2449;
2456 -> 2448;
2456 -> 2449;
2457 -> 2449;
2458 -> 2457;
2458 -> 2449;
2459 -> 2457;
2459 -> 2449;
2460 -> 2457;
2460 -> 2449;
2461 -> 2457;
2461 -> 2449;
2462 -> 2457;
2462 -> 2449;
2463 -> 2457;
2463 -> 2449;
2464 -> 2457;
2464 -> 2449;
2465 -> 2451;
2465 -> 2450;
2465 -> 2449;
2466 -> 2449;
2467 -> 2450;
2467 -> 2457;
2467 -> 2449;
2468 -> 2451;
2468 -> 2457;
2468 -> 2449;
2469 -> 2452;
2469 -> 2457;
2469 -> 2449;
2470 -> 2453;
2470 -> 2457;
2470 -> 2449;
2471 -> 2454;
2471 -> 2457;
2471 -> 2449;
2472 -> 2455;
2472 -> 2457;
2472 -> 2449;
2473 -> 2456;
2473 -> 2457;
2473 -> 2449;
2474 -> 2457;
2474 -> 2473;
2474 -> 0;
2474 -> 2449;
2475 -> 2449;
2476 -> 2455;
2476 -> 2449;
2477 -> 2449;
2479 -> 2478;
2481 -> 2480;
2483 -> 2482;
2485 -> 2484;
2487 -> 2486;
2489 -> 2488;
2490 -> 0;
2492 -> 2479;
2492 -> 2491;
2493 -> 2481;
2493 -> 2491;
2494 -> 2483;
2494 -> 2491;
2495 -> 2485;
2495 -> 2491;
2496 -> 2487;
2496 -> 2491;
2497 -> 2489;
2497 -> 2491;
2498 -> 2490;
2498 -> 2491;
2499 -> 2491;
2500 -> 2499;
2500 -> 2491;
2501 -> 2499;
2501 -> 2491;
2502 -> 2499;
2502 -> 2491;
2503 -> 2499;
2503 -> 2491;
2504 -> 2499;
2504 -> 2491;
2505 -> 2499;
2505 -> 2491;
2506 -> 2499;
2506 -> 2491;
2507 -> 2493;
2507 -> 2492;
2507 -> 2491;
2508 -> 2491;
2509 -> 2492;
2509 -> 2499;
2509 -> 2491;
2510 -> 2493;
2510 -> 2499;
2510 -> 2491;
2511 -> 2494;
2511 -> 2499;
2511 -> 2491;
2512 -> 2495;
2512 -> 2499;
2512 -> 2491;
2513 -> 2496;
2513 -> 2499;
2513 -> 2491;
2514 -> 2497;
2514 -> 2499;
2514 -> 2491;
2515 -> 2498;
2515 -> 2499;
2515 -> 2491;
2516 -> 2499;
2516 -> 2515;
2516 -> 0;
2516 -> 2491;
2517 -> 2491;
2518 -> 2497;
2518 -> 2491;
2519 -> 2491;
2521 -> 2520;
2523 -> 2522;
2525 -> 2524;
2527 -> 2526;
2529 -> 2528;
2531 -> 2530;
2532 -> 0;
2534 -> 2521;
2534 -> 2533;
2535 -> 2523;
2535 -> 2533;
2536 -> 2525;
2536 -> 2533;
2537 -> 2527;
2537 -> 2533;
2538 -> 2529;
2538 -> 2533;
2539 -> 2531;
2539 -> 2533;
2540 -> 2532;
2540 -> 2533;
2541 -> 2533;
2542 -> 2541;
2542 -> 2533;
2543 -> 2541;
2543 -> 2533;
2544 -> 2541;
2544 -> 2533;
2545 -> 2541;
2545 -> 2533;
2546 -> 2541;
2546 -> 2533;
2547 -> 2541;
2547 -> 2533;
2548 -> 2541;
2548 -> 2533;
2549 -> 2535;
2549 -> 2533;
2550 -> 2533;
2551 -> 2534;
2551 -> 2541;
2551 -> 2533;
2552 -> 2535;
2552 -> 2541;
2552 -> 2533;
2553 -> 2536;
2553 -> 2541;
2553 -> 2533;
2554 -> 2537;
2554 -> 2541;
2554 -> 2533;
2555 -> 2538;
2555 -> 2541;
2555 -> 2533;
2556 -> 2539;
2556 -> 2541;
2556 -> 2533;
2557 -> 2540;
2557 -> 2541;
2557 -> 2533;
2558 -> 2541;
2558 -> 2557;
2558 -> 0;
2558 -> 2533;
2559 -> 2533;
2560 -> 2539;
2560 -> 2533;
2561 -> 2533;
2563 -> 2562;
2565 -> 2564;
2567 -> 2566;
2569 -> 2568;
2571 -> 2570;
2573 -> 2572;
2574 -> 0;
2575 -> 2574;
2577 -> 2563;
2577 -> 2576;
2578 -> 2565;
2578 -> 2576;
2579 -> 2567;
2579 -> 2576;
2580 -> 2569;
2580 -> 2576;
2581 -> 2571;
2581 -> 2576;
2582 -> 2573;
2582 -> 2576;
2583 -> 2575;
2583 -> 2576;
2584 -> 2576;
2585 -> 2584;
2585 -> 2576;
2586 -> 2584;
2586 -> 2576;
2587 -> 2584;
2587 -> 2576;
2588 -> 2584;
2588 -> 2576;
2589 -> 2584;
2589 -> 2576;
2590 -> 2584;
2590 -> 2576;
2591 -> 2584;
2591 -> 2576;
2592 -> 2578;
2592 -> 2576;
2593 -> 2576;
2594 -> 2577;
2594 -> 2584;
2594 -> 2576;
2595 -> 2578;
2595 -> 2584;
2595 -> 2576;
2596 -> 2579;
2596 -> 2584;
2596 -> 2576;
2597 -> 2580;
2597 -> 2584;
2597 -> 2576;
2598 -> 2581;
2598 -> 2584;
2598 -> 2576;
2599 -> 2582;
2599 -> 2584;
2599 -> 2576;
2600 -> 2583;
2600 -> 2584;
2600 -> 2576;
2601 -> 2584;
2601 -> 2600;
2601 -> 0;
2601 -> 2576;
2602 -> 2576;
2603 -> 2582;
2603 -> 2576;
2604 -> 2584;
2604 -> 2600;
2604 -> 0;
2604 -> 2603;
2605 -> 2604;
2605 -> 2584;
2605 -> 2603;
2606 -> 2576;
2608 -> 2607;
2610 -> 2609;
2612 -> 2611;
2614 -> 2613;
2616 -> 2615;
2618 -> 2617;
2619 -> 0;
2621 -> 2608;
2621 -> 2620;
2622 -> 2610;
2622 -> 2620;
2623 -> 2612;
2623 -> 2620;
2624 -> 2614;
2624 -> 2620;
2625 -> 2616;
2625 -> 2620;
2626 -> 2618;
2626 -> 2620;
2627 -> 2619;
2627 -> 2620;
2628 -> 2620;
2629 -> 2628;
2629 -> 2620;
2630 -> 2628;
2630 -> 2620;
2631 -> 2628;
2631 -> 2620;
2632 -> 2628;
2632 -> 2620;
2633 -> 2628;
2633 -> 2620;
2634 -> 2628;
2634 -> 2620;
2635 -> 2628;
2635 -> 2620;
2636 -> 2622;
2636 -> 2620;
2637 -> 2620;
2638 -> 2621;
2638 -> 2628;
2638 -> 2620;
2639 -> 2622;
2639 -> 2628;
2639 -> 2620;
2640 -> 2623;
2640 -> 2628;
2640 -> 2620;
2641 -> 2624;
2641 -> 2628;
2641 -> 2620;
2642 -> 2625;
2642 -> 2628;
2642 -> 2620;
2643 -> 2626;
2643 -> 2628;
2643 -> 2620;
2644 -> 2627;
2644 -> 2628;
2644 -> 2620;
2645 -> 2628;
2645 -> 2644;
2645 -> 0;
2645 -> 2620;
2646 -> 2620;
2647 -> 2626;
2647 -> 2620;
2648 -> 2628;
2648 -> 2644;
2648 -> 0;
2648 -> 2647;
2649 -> 2648;
2649 -> 2628;
2649 -> 2647;
2650 -> 2620;
2652 -> 2651;
2654 -> 2653;
2656 -> 2655;
2658 -> 2657;
2660 -> 2659;
2662 -> 2661;
2663 -> 0;
2665 -> 2652;
2665 -> 2664;
2666 -> 2654;
2666 -> 2664;
2667 -> 2656;
2667 -> 2664;
2668 -> 2658;
2668 -> 2664;
2669 -> 2660;
2669 -> 2664;
2670 -> 2662;
2670 -> 2664;
2671 -> 2663;
2671 -> 2664;
2672 -> 2664;
2673 -> 2672;
2673 -> 2664;
2674 -> 2672;
2674 -> 2664;
2675 -> 2672;
2675 -> 2664;
2676 -> 2672;
2676 -> 2664;
2677 -> 2672;
2677 -> 2664;
2678 -> 2672;
2678 -> 2664;
2679 -> 2672;
2679 -> 2664;
2680 -> 2666;
2680 -> 2664;
2681 -> 2664;
2682 -> 2665;
2682 -> 2672;
2682 -> 2664;
2683 -> 2666;
2683 -> 2672;
2683 -> 2664;
2684 -> 2667;
2684 -> 2672;
2684 -> 2664;
2685 -> 2668;
2685 -> 2672;
2685 -> 2664;
2686 -> 2669;
2686 -> 2672;
2686 -> 2664;
2687 -> 2670;
2687 -> 2672;
2687 -> 2664;
2688 -> 2671;
2688 -> 2672;
2688 -> 2664;
2689 -> 2672;
2689 -> 2688;
2689 -> 0;
2689 -> 2664;
2690 -> 2664;
2691 -> 2670;
2691 -> 2664;
2692 -> 2664;
2694 -> 2693;
2696 -> 2695;
2698 -> 2697;
2700 -> 2699;
2702 -> 2701;
2704 -> 2703;
2705 -> 0;
2706 -> 2705;
2706 -> 0;
2707 -> 2706;
2709 -> 2694;
2709 -> 2708;
2710 -> 2696;
2710 -> 2708;
2711 -> 2698;
2711 -> 2708;
2712 -> 2700;
2712 -> 2708;
2713 -> 2702;
2713 -> 2708;
2714 -> 2704;
2714 -> 2708;
2715 -> 2707;
2715 -> 2708;
2716 -> 2708;
2717 -> 2716;
2717 -> 2708;
2718 -> 2716;
2718 -> 2708;
2719 -> 2716;
2719 -> 2708;
2720 -> 2716;
2720 -> 2708;
2721 -> 2716;
2721 -> 2708;
2722 -> 2716;
2722 -> 2708;
2723 -> 2716;
2723 -> 2708;
2724 -> 2710;
2724 -> 2708;
2725 -> 2708;
2726 -> 2709;
2726 -> 2716;
2726 -> 2708;
2727 -> 2710;
2727 -> 2716;
2727 -> 2708;
2728 -> 2711;
2728 -> 2716;
2728 -> 2708;
2729 -> 2712;
2729 -> 2716;
2729 -> 2708;
2730 -> 2713;
2730 -> 2716;
2730 -> 2708;
2731 -> 2714;
2731 -> 2716;
2731 -> 2708;
2732 -> 2715;
2732 -> 2716;
2732 -> 2708;
2733 -> 2716;
2733 -> 2732;
2733 -> 0;
2733 -> 2708;
2734 -> 2708;
2735 -> 2714;
2735 -> 2708;
2736 -> 2708;
2738 -> 2737;
2740 -> 2739;
2742 -> 2741;
2744 -> 2743;
2746 -> 2745;
2748 -> 2747;
2749 -> 0;
2750 -> 2749;
2750 -> 0;
2751 -> 2750;
2753 -> 2738;
2753 -> 2752;
2754 -> 2740;
2754 -> 2752;
2755 -> 2742;
2755 -> 2752;
2756 -> 2744;
2756 -> 2752;
2757 -> 2746;
2757 -> 2752;
2758 -> 2748;
2758 -> 2752;
2759 -> 2751;
2759 -> 2752;
2760 -> 2752;
2761 -> 2760;
2761 -> 2752;
2762 -> 2760;
2762 -> 2752;
2763 -> 2760;
2763 -> 2752;
2764 -> 2760;
2764 -> 2752;
2765 -> 2760;
2765 -> 2752;
2766 -> 2760;
2766 -> 2752;
2767 -> 2760;
2767 -> 2752;
2768 -> 2754;
2768 -> 2752;
2769 -> 2752;
2770 -> 2753;
2770 -> 2760;
2770 -> 2752;
2771 -> 2754;
2771 -> 2760;
2771 -> 2752;
2772 -> 2755;
2772 -> 2760;
2772 -> 2752;
2773 -> 2756;
2773 -> 2760;
2773 -> 2752;
2774 -> 2757;
2774 -> 2760;
2774 -> 2752;
2775 -> 2758;
2775 -> 2760;
2775 -> 2752;
2776 -> 2759;
2776 -> 2760;
2776 -> 2752;
2777 -> 2760;
2777 -> 2776;
2777 -> 0;
2777 -> 2752;
2778 -> 2752;
2779 -> 2758;
2779 -> 2752;
2780 -> 2760;
2780 -> 2776;
2780 -> 0;
2780 -> 2779;
2781 -> 2780;
2781 -> 2760;
2781 -> 2779;
2782 -> 2752;
2784 -> 2783;
2786 -> 2785;
2788 -> 2787;
2790 -> 2789;
2792 -> 2791;
2794 -> 2793;
2795 -> 0;
2796 -> 2795;
2796 -> 0;
2797 -> 2796;
2799 -> 2784;
2799 -> 2798;
2800 -> 2786;
2800 -> 2798;
2801 -> 2788;
2801 -> 2798;
2802 -> 2790;
2802 -> 2798;
2803 -> 2792;
2803 -> 2798;
2804 -> 2794;
2804 -> 2798;
2805 -> 2797;
2805 -> 2798;
2806 -> 2798;
2807 -> 2806;
2807 -> 2798;
2808 -> 2806;
2808 -> 2798;
2809 -> 2806;
2809 -> 2798;
2810 -> 2806;
2810 -> 2798;
2811 -> 2806;
2811 -> 2798;
2812 -> 2806;
2812 -> 2798;
2813 -> 2806;
2813 -> 2798;
2814 -> 2800;
2814 -> 2798;
2815 -> 2798;
2816 -> 2799;
2816 -> 2806;
2816 -> 2798;
2817 -> 2800;
2817 -> 2806;
2817 -> 2798;
2818 -> 2801;
2818 -> 2806;
2818 -> 2798;
2819 -> 2802;
2819 -> 2806;
2819 -> 2798;
2820 -> 2803;
2820 -> 2806;
2820 -> 2798;
2821 -> 2804;
2821 -> 2806;
2821 -> 2798;
2822 -> 2805;
2822 -> 2806;
2822 -> 2798;
2823 -> 2806;
2823 -> 2822;
2823 -> 0;
2823 -> 2798;
2824 -> 2798;
2825 -> 2804;
2825 -> 2798;
2826 -> 2806;
2826 -> 2822;
2826 -> 0;
2826 -> 2825;
2827 -> 2826;
2827 -> 2806;
2827 -> 2825;
2828 -> 2798;
2830 -> 2829;
2832 -> 2831;
2834 -> 2833;
2836 -> 2835;
2838 -> 2837;
2840 -> 2839;
2841 -> 0;
2842 -> 2841;
2842 -> 0;
2843 -> 2842;
2845 -> 2830;
2845 -> 2844;
2846 -> 2832;
2846 -> 2844;
2847 -> 2834;
2847 -> 2844;
2848 -> 2836;
2848 -> 2844;
2849 -> 2838;
2849 -> 2844;
2850 -> 2840;
2850 -> 2844;
2851 -> 2843;
2851 -> 2844;
2852 -> 2844;
2853 -> 2852;
2853 -> 2844;
2854 -> 2852;
2854 -> 2844;
2855 -> 2852;
2855 -> 2844;
2856 -> 2852;
2856 -> 2844;
2857 -> 2852;
2857 -> 2844;
2858 -> 2852;
2858 -> 2844;
2859 -> 2852;
2859 -> 2844;
2860 -> 2846;
2860 -> 2844;
2861 -> 2844;
2862 -> 2845;
2862 -> 2852;
2862 -> 2844;
2863 -> 2846;
2863 -> 2852;
2863 -> 2844;
2864 -> 2847;
2864 -> 2852;
2864 -> 2844;
2865 -> 2848;
2865 -> 2852;
2865 -> 2844;
2866 -> 2849;
2866 -> 2852;
2866 -> 2844;
2867 -> 2850;
2867 -> 2852;
2867 -> 2844;
2868 -> 2851;
2868 -> 2852;
2868 -> 2844;
2869 -> 2852;
2869 -> 2868;
2869 -> 0;
2869 -> 2844;
2870 -> 2844;
2871 -> 2850;
2871 -> 2844;
2872 -> 2844;
2874 -> 2873;
2876 -> 2875;
2878 -> 2877;
2880 -> 2879;
2882 -> 2881;
2884 -> 2883;
2885 -> 0;
2886 -> 2885;
2886 -> 0;
2887 -> 2886;
2889 -> 2874;
2889 -> 2888;
2890 -> 2876;
2890 -> 2888;
2891 -> 2878;
2891 -> 2888;
2892 -> 2880;
2892 -> 2888;
2893 -> 2882;
2893 -> 2888;
2894 -> 2884;
2894 -> 2888;
2895 -> 2887;
2895 -> 2888;
2896 -> 2888;
2897 -> 2896;
2897 -> 2888;
2898 -> 2896;
2898 -> 2888;
2899 -> 2896;
2899 -> 2888;
2900 -> 2896;
2900 -> 2888;
2901 -> 2896;
2901 -> 2888;
2902 -> 2896;
2902 -> 2888;
2903 -> 2896;
2903 -> 2888;
2904 -> 2890;
2904 -> 2889;
2904 -> 2888;
2905 -> 2888;
2906 -> 2889;
2906 -> 2896;
2906 -> 2888;
2907 -> 2890;
2907 -> 2896;
2907 -> 2888;
2908 -> 2891;
2908 -> 2896;
2908 -> 2888;
2909 -> 2892;
2909 -> 2896;
2909 -> 2888;
2910 -> 2893;
2910 -> 2896;
2910 -> 2888;
2911 -> 2894;
2911 -> 2896;
2911 -> 2888;
2912 -> 2895;
2912 -> 2896;
2912 -> 2888;
2913 -> 2896;
2913 -> 2912;
2913 -> 0;
2913 -> 2888;
2914 -> 2888;
2915 -> 2894;
2915 -> 2888;
2916 -> 2896;
2916 -> 2912;
2916 -> 0;
2916 -> 2915;
2917 -> 2916;
2917 -> 2896;
2917 -> 2915;
2918 -> 2888;
2920 -> 2919;
2922 -> 2921;
2924 -> 2923;
2926 -> 2925;
2928 -> 2927;
2930 -> 2929;
2931 -> 0;
2932 -> 2931;
2932 -> 0;
2933 -> 2932;
2935 -> 2920;
2935 -> 2934;
2936 -> 2922;
2936 -> 2934;
2937 -> 2924;
2937 -> 2934;
2938 -> 2926;
2938 -> 2934;
2939 -> 2928;
2939 -> 2934;
2940 -> 2930;
2940 -> 2934;
2941 -> 2933;
2941 -> 2934;
2942 -> 2934;
2943 -> 2942;
2943 -> 2934;
2944 -> 2942;
2944 -> 2934;
2945 -> 2942;
2945 -> 2934;
2946 -> 2942;
2946 -> 2934;
2947 -> 2942;
2947 -> 2934;
2948 -> 2942;
2948 -> 2934;
2949 -> 2942;
2949 -> 2934;
2950 -> 2936;
2950 -> 2935;
2950 -> 2934;
2951 -> 2934;
2952 -> 2935;
2952 -> 2942;
2952 -> 2934;
2953 -> 2936;
2953 -> 2942;
2953 -> 2934;
2954 -> 2937;
2954 -> 2942;
2954 -> 2934;
2955 -> 2938;
2955 -> 2942;
2955 -> 2934;
2956 -> 2939;
2956 -> 2942;
2956 -> 2934;
2957 -> 2940;
2957 -> 2942;
2957 -> 2934;
2958 -> 2941;
2958 -> 2942;
2958 -> 2934;
2959 -> 2942;
2959 -> 2958;
2959 -> 0;
2959 -> 2934;
2960 -> 2934;
2961 -> 2940;
2961 -> 2934;
2962 -> 2934;
2964 -> 2963;
2966 -> 2965;
2968 -> 2967;
2970 -> 2969;
2972 -> 2971;
2974 -> 2973;
2975 -> 0;
2976 -> 2975;
2976 -> 0;
2977 -> 2976;
2979 -> 2964;
2979 -> 2978;
2980 -> 2966;
2980 -> 2978;
2981 -> 2968;
2981 -> 2978;
2982 -> 2970;
2982 -> 2978;
2983 -> 2972;
2983 -> 2978;
2984 -> 2974;
2984 -> 2978;
2985 -> 2977;
2985 -> 2978;
2986 -> 2978;
2987 -> 2986;
2987 -> 2978;
2988 -> 2986;
2988 -> 2978;
2989 -> 2986;
2989 -> 2978;
2990 -> 2986;
2990 -> 2978;
2991 -> 2986;
2991 -> 2978;
2992 -> 2986;
2992 -> 2978;
2993 -> 2986;
2993 -> 2978;
2994 -> 2980;
2994 -> 2978;
2995 -> 2978;
2996 -> 2979;
2996 -> 2986;
2996 -> 2978;
2997 -> 2980;
2997 -> 2986;
2997 -> 2978;
2998 -> 2981;
2998 -> 2986;
2998 -> 2978;
2999 -> 2982;
2999 -> 2986;
2999 -> 2978;
3000 -> 2983;
3000 -> 2986;
3000 -> 2978;
3001 -> 2984;
3001 -> 2986;
3001 -> 2978;
3002 -> 2985;
3002 -> 2986;
3002 -> 2978;
3003 -> 2986;
3003 -> 3002;
3003 -> 0;
3003 -> 2978;
3004 -> 2978;
3005 -> 2984;
3005 -> 2978;
3006 -> 2978;
3008 -> 3007;
3010 -> 3009;
3012 -> 3011;
3014 -> 3013;
3016 -> 3015;
3018 -> 3017;
3019 -> 0;
3020 -> 3019;
3020 -> 0;
3021 -> 3020;
3023 -> 3008;
3023 -> 3022;
3024 -> 3010;
3024 -> 3022;
3025 -> 3012;
3025 -> 3022;
3026 -> 3014;
3026 -> 3022;
3027 -> 3016;
3027 -> 3022;
3028 -> 3018;
3028 -> 3022;
3029 -> 3021;
3029 -> 3022;
3030 -> 3022;
3031 -> 3030;
3031 -> 3022;
3032 -> 3030;
3032 -> 3022;
3033 -> 3030;
3033 -> 3022;
3034 -> 3030;
3034 -> 3022;
3035 -> 3030;
3035 -> 3022;
3036 -> 3030;
3036 -> 3022;
3037 -> 3030;
3037 -> 3022;
3038 -> 3024;
3038 -> 3022;
3039 -> 3022;
3040 -> 3023;
3040 -> 3030;
3040 -> 3022;
3041 -> 3024;
3041 -> 3030;
3041 -> 3022;
3042 -> 3025;
3042 -> 3030;
3042 -> 3022;
3043 -> 3026;
3043 -> 3030;
3043 -> 3022;
3044 -> 3027;
3044 -> 3030;
3044 -> 3022;
3045 -> 3028;
3045 -> 3030;
3045 -> 3022;
3046 -> 3029;
3046 -> 3030;
3046 -> 3022;
3047 -> 3030;
3047 -> 3046;
3047 -> 0;
3047 -> 3022;
3048 -> 3022;
3049 -> 3028;
3049 -> 3022;
3050 -> 3022;
3051 -> 2477;
3052 -> 3051;
3052 -> 2467;
3052 -> 2468;
3052 -> 2469;
3052 -> 2470;
3052 -> 2471;
3052 -> 2472;
3052 -> 2473;
3053 -> 3052;
3054 -> 0;
3055 -> 3054;
3056 -> 3055;
3057 -> 0;
3058 -> 3057;
3059 -> 0;
3060 -> 3059;
3061 -> 2261;
3061 -> 2260;
3062 -> 2262;
3062 -> 2260;
3063 -> 2263;
3063 -> 2260;
3064 -> 2264;
3064 -> 2260;
3065 -> 2260;
3066 -> 3061;
3066 -> 3065;
3067 -> 3062;
3067 -> 3065;
3068 -> 3063;
3068 -> 3065;
3069 -> 3064;
3069 -> 3065;
3070 -> 2265;
3070 -> 3065;
3072 -> 3071;
3074 -> 3073;
3076 -> 3075;
3078 -> 3077;
3080 -> 3078;
3080 -> 3079;
3081 -> 3080;
3083 -> 3082;
3085 -> 3084;
3087 -> 3086;
3089 -> 3088;
3099 -> 3091;
3099 -> 3090;
3100 -> 3092;
3100 -> 3090;
3101 -> 3093;
3101 -> 3090;
3102 -> 3094;
3102 -> 3090;
3103 -> 3095;
3103 -> 3090;
3104 -> 3096;
3104 -> 3090;
3105 -> 3097;
3105 -> 3090;
3106 -> 3098;
3106 -> 3090;
3107 -> 3090;
3108 -> 3069;
3108 -> 3065;
3109 -> 3065;
3110 -> 3108;
3110 -> 3109;
3111 -> 3070;
3111 -> 3109;
3113 -> 3112;
3115 -> 0;
3117 -> 3115;
3117 -> 3116;
3118 -> 3116;
3119 -> 3118;
3119 -> 3116;
3120 -> 3117;
3120 -> 3118;
3120 -> 3116;
3121 -> 3116;
3122 -> 0;
3124 -> 3122;
3124 -> 3123;
3125 -> 3123;
3126 -> 3125;
3126 -> 3123;
3127 -> 3124;
3127 -> 3125;
3127 -> 3123;
3128 -> 3123;
3129 -> 0;
3131 -> 3129;
3131 -> 3130;
3132 -> 3130;
3133 -> 3132;
3133 -> 3130;
3134 -> 3131;
3134 -> 3132;
3134 -> 3130;
3135 -> 3130;
3136 -> 0;
3138 -> 3136;
3138 -> 3137;
3139 -> 3137;
3140 -> 3139;
3140 -> 3137;
3141 -> 3138;
3141 -> 3139;
3141 -> 3137;
3142 -> 3137;
3143 -> 0;
3145 -> 3143;
3145 -> 3144;
3146 -> 3144;
3147 -> 3146;
3147 -> 3144;
3148 -> 3145;
3148 -> 3146;
3148 -> 3144;
3149 -> 3144;
3150 -> 0;
3152 -> 3150;
3152 -> 3151;
3153 -> 3151;
3154 -> 3153;
3154 -> 3151;
3155 -> 3152;
3155 -> 3153;
3155 -> 3151;
3156 -> 3151;
3157 -> 0;
3159 -> 3157;
3159 -> 3158;
3160 -> 3158;
3161 -> 3160;
3161 -> 3158;
3162 -> 3159;
3162 -> 3160;
3162 -> 3158;
3163 -> 3158;
3164 -> 0;
3166 -> 3164;
3166 -> 3165;
3167 -> 3165;
3168 -> 3167;
3168 -> 3165;
3169 -> 3166;
3169 -> 3167;
3169 -> 3165;
3170 -> 3165;
3171 -> 3170;
3173 -> 3114;
3173 -> 3171;
3173 -> 3172;
3173 -> 3167;
3173 -> 3168;
3173 -> 3169;
3174 -> 3173;
3176 -> 3175;
3177 -> 3176;
3177 -> 3175;
3178 -> 3176;
3178 -> 3175;
3179 -> 3176;
3179 -> 3175;
3180 -> 3175;
3182 -> 3181;
3183 -> 3109;
3184 -> 3111;
3184 -> 3183;
3185 -> 3183;
3186 -> 3184;
3186 -> 3183;
3187 -> 3184;
3187 -> 3183;
3188 -> 3111;
3188 -> 3109;
3189 -> 3111;
3189 -> 3109;
3190 -> 3111;
3190 -> 3109;
3191 -> 3110;
3191 -> 3111;
3191 -> 3109;
3192 -> 3070;
3192 -> 3065;
3193 -> 3070;
3193 -> 3065;
3194 -> 3070;
3194 -> 3065;
3196 -> 3195;
3197 -> 3196;
3197 -> 3195;
3198 -> 3196;
3198 -> 3195;
3199 -> 3196;
3199 -> 3195;
3200 -> 3196;
3200 -> 3195;
3201 -> 3196;
3201 -> 3195;
3202 -> 3196;
3202 -> 3195;
3203 -> 3195;
3204 -> 3203;
3204 -> 3070;
3204 -> 3065;
3205 -> 3070;
3205 -> 3065;
3206 -> 3070;
3206 -> 3065;
3207 -> 3070;
3207 -> 3065;
3208 -> 3070;
3208 -> 3065;
3209 -> 3070;
3209 -> 3065;
3210 -> 2134;
3210 -> 3070;
3210 -> 3065;
3211 -> 3070;
3211 -> 3065;
3212 -> 3070;
3212 -> 3065;
3213 -> 3066;
3213 -> 3070;
3213 -> 3065;
3214 -> 3067;
3214 -> 3070;
3214 -> 3065;
3215 -> 3067;
3215 -> 2247;
3215 -> 3065;
3216 -> 3065;
3217 -> 3215;
3217 -> 3216;
3218 -> 3217;
3218 -> 3216;
3219 -> 0;
3219 -> 3218;
3220 -> 3219;
3220 -> 3065;
3221 -> 3068;
3221 -> 3065;
3222 -> 3065;
3223 -> 3220;
3223 -> 3222;
3224 -> 3221;
3224 -> 3222;
3225 -> 3070;
3225 -> 3222;
3226 -> 3222;
3227 -> 3225;
3227 -> 3226;
3228 -> 3227;
3228 -> 3213;
3228 -> 3226;
3229 -> 3228;
3229 -> 3222;
3230 -> 3222;
3231 -> 0;
3231 -> 3222;
3232 -> 3222;
3233 -> 3229;
3233 -> 3232;
3234 -> 0;
3234 -> 3232;
3235 -> 3234;
3235 -> 3222;
3236 -> 0;
3236 -> 3235;
3237 -> 3223;
3237 -> 3222;
3238 -> 3222;
3239 -> 3236;
3239 -> 3222;
3240 -> 3231;
3240 -> 3222;
3241 -> 3224;
3241 -> 3222;
3242 -> 3238;
3242 -> 3222;
3243 -> 3222;
3244 -> 3239;
3244 -> 3243;
3245 -> 3240;
3245 -> 3243;
3246 -> 3241;
3246 -> 3243;
3247 -> 3242;
3247 -> 3243;
3248 -> 3225;
3248 -> 3243;
3249 -> 3243;
3250 -> 0;
3250 -> 3243;
3251 -> 3248;
3251 -> 3214;
3251 -> 2247;
3251 -> 3243;
3252 -> 3243;
3253 -> 3243;
3254 -> 3253;
3254 -> 3251;
3254 -> 3243;
3255 -> 3248;
3255 -> 3214;
3255 -> 2247;
3255 -> 3253;
3255 -> 3254;
3256 -> 3255;
3256 -> 3254;
3257 -> 3254;
3258 -> 3249;
3258 -> 3254;
3259 -> 3256;
3259 -> 3258;
3260 -> 3245;
3260 -> 3258;
3261 -> 3248;
3261 -> 3214;
3261 -> 3255;
3261 -> 3253;
3261 -> 3258;
3262 -> 3246;
3262 -> 3258;
3263 -> 3258;
3264 -> 3249;
3264 -> 3258;
3265 -> 3258;
3266 -> 3259;
3266 -> 3265;
3267 -> 3260;
3267 -> 3265;
3268 -> 3261;
3268 -> 3265;
3269 -> 3262;
3269 -> 3265;
3270 -> 3263;
3270 -> 3265;
3271 -> 3264;
3271 -> 3265;
3272 -> 3265;
3273 -> 3266;
3273 -> 3267;
3273 -> 3265;
3274 -> 3266;
3274 -> 3267;
3274 -> 3265;
3275 -> 3273;
3275 -> 0;
3275 -> 3265;
3276 -> 3274;
3276 -> 0;
3276 -> 3265;
3277 -> 3265;
3278 -> 3274;
3278 -> 3265;
3279 -> 3272;
3279 -> 3258;
3280 -> 3278;
3280 -> 3279;
3281 -> 3248;
3281 -> 3279;
3282 -> 3279;
3283 -> 3279;
3284 -> 3280;
3284 -> 3283;
3285 -> 3281;
3285 -> 3283;
3286 -> 3282;
3286 -> 3283;
3287 -> 3284;
3287 -> 3283;
3288 -> 3283;
3289 -> 3287;
3289 -> 3288;
3290 -> 3289;
3290 -> 0;
3290 -> 3288;
3291 -> 3290;
3292 -> 3283;
3293 -> 3285;
3293 -> 3292;
3294 -> 0;
3294 -> 3292;
3295 -> 3294;
3295 -> 3283;
3296 -> 3286;
3296 -> 3295;
3296 -> 3283;
3297 -> 3284;
3297 -> 0;
3297 -> 3283;
3298 -> 3283;
3299 -> 3296;
3299 -> 3297;
3299 -> 3283;
3300 -> 3284;
3300 -> 0;
3300 -> 3299;
3301 -> 3283;
3302 -> 3301;
3302 -> 3279;
3303 -> 3279;
3304 -> 3302;
3304 -> 3303;
3304 -> 3279;
3305 -> 3250;
3305 -> 0;
3305 -> 3254;
3306 -> 3278;
3306 -> 3305;
3307 -> 3306;
3307 -> 0;
3307 -> 3243;
3308 -> 3243;
3309 -> 3252;
3309 -> 3243;
3310 -> 3243;
3311 -> 3248;
3311 -> 3310;
3312 -> 3311;
3312 -> 3214;
3312 -> 3261;
3312 -> 3310;
3313 -> 3312;
3313 -> 3243;
3314 -> 0;
3314 -> 3243;
3315 -> 3306;
3315 -> 3243;
3317 -> 3316;
3318 -> 3225;
3318 -> 3222;
3319 -> 3315;
3319 -> 3222;
3320 -> 3224;
3320 -> 3222;
3321 -> 3222;
3322 -> 3318;
3322 -> 3321;
3323 -> 3319;
3323 -> 3321;
3324 -> 3320;
3324 -> 3321;
3325 -> 3322;
3325 -> 3321;
3326 -> 3323;
3326 -> 3321;
3327 -> 3321;
3328 -> 3322;
3328 -> 3327;
3329 -> 3328;
3329 -> 3214;
3329 -> 3261;
3329 -> 3327;
3330 -> 3329;
3330 -> 3321;
3331 -> 3321;
3332 -> 3324;
3332 -> 3321;
3333 -> 3321;
3334 -> 3325;
3334 -> 3333;
3335 -> 3326;
3335 -> 3333;
3336 -> 3330;
3336 -> 3333;
3337 -> 3332;
3337 -> 3333;
3338 -> 3335;
3338 -> 0;
3338 -> 3333;
3339 -> 3222;
3340 -> 3315;
3340 -> 0;
3340 -> 3222;
3341 -> 3222;
3342 -> 3272;
3342 -> 3340;
3342 -> 3222;
3343 -> 0;
3343 -> 3222;
3344 -> 3315;
3344 -> 3343;
3344 -> 3222;
3345 -> 3272;
3345 -> 3344;
3345 -> 3222;
3346 -> 3223;
3346 -> 3222;
3347 -> 3315;
3347 -> 0;
3347 -> 3346;
3348 -> 3347;
3348 -> 3222;
3349 -> 3067;
3349 -> 3330;
3349 -> 3065;
3350 -> 3349;
3350 -> 3330;
3351 -> 3068;
3351 -> 3350;
3351 -> 2235;
3351 -> 3330;
3351 -> 3349;
3352 -> 3348;
3352 -> 0;
3352 -> 3065;
3353 -> 3065;
3354 -> 3352;
3354 -> 3353;
3354 -> 3065;
3355 -> 3348;
3355 -> 3070;
3355 -> 3065;
3356 -> 3352;
3356 -> 0;
3356 -> 3065;
3357 -> 3356;
3357 -> 3065;
3358 -> 3357;
3359 -> 3070;
3359 -> 3358;
3360 -> 3358;
3361 -> 3359;
3361 -> 3360;
3362 -> 3361;
3362 -> 3213;
3362 -> 3360;
3363 -> 3362;
3363 -> 3358;
3364 -> 3358;
3365 -> 3363;
3365 -> 3364;
3366 -> 0;
3366 -> 3364;
3367 -> 3366;
3367 -> 3358;
3368 -> 3358;
3369 -> 3359;
3369 -> 3368;
3370 -> 3369;
3370 -> 3213;
3370 -> 3368;
3371 -> 3370;
3371 -> 3358;
3372 -> 3358;
3373 -> 3371;
3373 -> 3372;
3374 -> 3372;
3375 -> 3373;
3375 -> 3351;
3375 -> 3374;
3376 -> 3375;
3376 -> 3351;
3376 -> 3374;
3377 -> 3358;
3378 -> 3376;
3378 -> 3377;
3379 -> 3377;
3380 -> 3378;
3380 -> 3379;
3381 -> 3380;
3381 -> 3377;
3382 -> 3378;
3382 -> 3377;
3383 -> 3367;
3383 -> 3381;
3383 -> 3358;
3384 -> 0;
3384 -> 3383;
3386 -> 3385;
3388 -> 3387;
3389 -> 3386;
3389 -> 3388;
3390 -> 3389;
3392 -> 3391;
3393 -> 3390;
3393 -> 3392;
3394 -> 3393;
3396 -> 3395;
3397 -> 3394;
3397 -> 3396;
3398 -> 3397;
3400 -> 3399;
3401 -> 3398;
3401 -> 3400;
3402 -> 3401;
3404 -> 3403;
3405 -> 3402;
3405 -> 3404;
3406 -> 3405;
3408 -> 3407;
3410 -> 3409;
3410 -> 3388;
3412 -> 3410;
3412 -> 3411;
3413 -> 3412;
3415 -> 3414;
3415 -> 3392;
3417 -> 3415;
3417 -> 3416;
3418 -> 3417;
3420 -> 3419;
3420 -> 3404;
3422 -> 3420;
3422 -> 3421;
3423 -> 3422;
3425 -> 3424;
3425 -> 3408;
3427 -> 3425;
3427 -> 3426;
3428 -> 3427;
3430 -> 3429;
3430 -> 3394;
3431 -> 3430;
3433 -> 3432;
3433 -> 3398;
3434 -> 3433;
3435 -> 3413;
3436 -> 3428;
3437 -> 3384;
3437 -> 3065;
3438 -> 3219;
3438 -> 3065;
3439 -> 3065;
3440 -> 3065;
3441 -> 3437;
3441 -> 3440;
3442 -> 3438;
3442 -> 3440;
3443 -> 3439;
3443 -> 3440;
3444 -> 3441;
3444 -> 3413;
3444 -> 3440;
3445 -> 3444;
3445 -> 3386;
3445 -> 3440;
3446 -> 3442;
3446 -> 3423;
3446 -> 3440;
3447 -> 3446;
3447 -> 3402;
3447 -> 3440;
3448 -> 3445;
3448 -> 3447;
3448 -> 3440;
3449 -> 3448;
3449 -> 3443;
3449 -> 3440;
3450 -> 3439;
3450 -> 3070;
3450 -> 3065;
3451 -> 3065;
3452 -> 3070;
3452 -> 3451;
3453 -> 3452;
3453 -> 3213;
3453 -> 3451;
3454 -> 3453;
3454 -> 3065;
3455 -> 3454;
3455 -> 3065;
3456 -> 3065;
3457 -> 0;
3457 -> 3065;
3458 -> 3065;
3459 -> 3457;
3459 -> 3458;
3460 -> 3070;
3460 -> 3458;
3461 -> 3460;
3461 -> 3458;
3462 -> 3459;
3462 -> 3458;
3463 -> 3461;
3463 -> 3462;
3463 -> 3458;
3464 -> 2265;
3464 -> 2260;
3465 -> 2265;
3465 -> 2260;
3466 -> 2265;
3466 -> 2260;
3467 -> 0;
3467 -> 2265;
3467 -> 2260;
3468 -> 2265;
3468 -> 2260;
3470 -> 3469;
3471 -> 3469;
3472 -> 3471;
3473 -> 3471;
3474 -> 3473;
3474 -> 3471;
3475 -> 3474;
3475 -> 3472;
3476 -> 3472;
3477 -> 3476;
3478 -> 3477;
3479 -> 3478;
3480 -> 3479;
3480 -> 3478;
3481 -> 3477;
3481 -> 3476;
3482 -> 3477;
3482 -> 3476;
3483 -> 3476;
3483 -> 3472;
3484 -> 3476;
3484 -> 3472;
3485 -> 3476;
3485 -> 3472;
3486 -> 3475;
3486 -> 3476;
3486 -> 3472;
3487 -> 3471;
3487 -> 3469;
3488 -> 3470;
3488 -> 3471;
3488 -> 3469;
3489 -> 3469;
3490 -> 3489;
3490 -> 2265;
3490 -> 2260;
3491 -> 2265;
3491 -> 2260;
3492 -> 3489;
3492 -> 2265;
3492 -> 2260;
3493 -> 2262;
3493 -> 3351;
3493 -> 2260;
3494 -> 2260;
3495 -> 2261;
3495 -> 3494;
3496 -> 0;
3496 -> 3494;
3497 -> 3496;
3497 -> 2260;
3498 -> 2248;
3499 -> 2259;
3499 -> 3498;
3500 -> 2247;
3500 -> 3498;
3501 -> 3498;
3502 -> 3499;
3502 -> 3501;
3503 -> 3502;
3503 -> 3214;
3503 -> 3351;
3503 -> 3501;
3504 -> 3503;
3504 -> 3498;
3505 -> 3498;
3506 -> 3504;
3506 -> 3498;
3507 -> 3505;
3507 -> 3498;
3508 -> 3500;
3508 -> 2247;
3508 -> 3506;
3508 -> 3507;
3508 -> 3498;
3509 -> 3499;
3509 -> 3504;
3509 -> 3500;
3509 -> 3508;
3510 -> 2238;
3511 -> 2247;
3511 -> 3510;
3512 -> 3511;
3512 -> 2247;
3512 -> 3509;
3512 -> 3508;
3512 -> 3510;
3513 -> 0;
3513 -> 3510;
3514 -> 3511;
3514 -> 2247;
3514 -> 3509;
3514 -> 3510;
3515 -> 3514;
3515 -> 3508;
3516 -> 3514;
3517 -> 3516;
3517 -> 3514;
3518 -> 3515;
3518 -> 3514;
3519 -> 3514;
3520 -> 3518;
3520 -> 3519;
3520 -> 3514;
3521 -> 3515;
3521 -> 3520;
3522 -> 3520;
3523 -> 3521;
3523 -> 3522;
3524 -> 0;
3524 -> 3522;
3525 -> 3524;
3525 -> 3520;
3526 -> 3525;
3526 -> 3520;
3527 -> 3521;
3527 -> 3526;
3528 -> 3514;
3528 -> 3508;
3529 -> 3527;
3529 -> 3514;
3530 -> 3512;
3530 -> 3528;
3530 -> 3529;
3530 -> 3514;
3531 -> 3512;
3531 -> 3510;
3532 -> 3531;
3532 -> 2238;
3533 -> 2240;
3533 -> 2238;
3534 -> 3532;
3534 -> 2238;
3535 -> 2239;
3535 -> 2238;
3536 -> 2238;
3537 -> 3533;
3537 -> 3536;
3538 -> 3534;
3538 -> 3536;
3539 -> 3535;
3539 -> 3536;
3540 -> 3536;
3541 -> 3536;
3542 -> 3536;
3543 -> 3537;
3543 -> 3542;
3544 -> 3542;
3545 -> 3543;
3545 -> 3351;
3545 -> 3544;
3546 -> 3545;
3546 -> 3351;
3546 -> 3544;
3547 -> 3546;
3547 -> 3536;
3548 -> 3536;
3549 -> 3547;
3549 -> 3548;
3550 -> 3536;
3551 -> 3538;
3551 -> 3512;
3551 -> 3536;
3552 -> 3551;
3552 -> 3512;
3552 -> 3530;
3552 -> 3536;
3553 -> 3540;
3553 -> 3552;
3554 -> 3552;
3555 -> 3538;
3555 -> 3552;
3555 -> 3512;
3555 -> 3530;
3555 -> 3351;
3555 -> 3527;
3556 -> 3555;
3557 -> 3555;
3558 -> 3556;
3558 -> 3557;
3558 -> 3555;
3559 -> 3558;
3559 -> 3555;
3560 -> 3559;
3561 -> 3556;
3561 -> 3560;
3562 -> 3561;
3562 -> 3555;
3562 -> 3560;
3563 -> 3562;
3563 -> 3540;
3563 -> 3553;
3563 -> 3555;
3564 -> 3540;
3564 -> 3553;
3564 -> 3562;
3564 -> 3555;
3565 -> 3555;
3566 -> 3564;
3566 -> 3565;
3566 -> 3555;
3567 -> 3541;
3567 -> 3565;
3567 -> 3555;
3568 -> 3566;
3568 -> 3567;
3568 -> 3555;
3569 -> 3555;
3570 -> 3564;
3570 -> 3569;
3570 -> 3555;
3571 -> 3555;
3571 -> 3562;
3571 -> 3540;
3572 -> 3555;
3573 -> 3556;
3573 -> 3572;
3573 -> 3555;
3574 -> 3573;
3575 -> 3556;
3575 -> 3574;
3576 -> 3575;
3576 -> 3555;
3576 -> 3574;
3577 -> 3574;
3578 -> 3576;
3578 -> 3577;
3579 -> 3578;
3579 -> 0;
3579 -> 3577;
3580 -> 0;
3580 -> 3579;
3581 -> 3580;
3581 -> 3573;
3582 -> 3581;
3582 -> 0;
3582 -> 3573;
3583 -> 2238;
3584 -> 3532;
3584 -> 2238;
3585 -> 2234;
3586 -> 2236;
3586 -> 3584;
3586 -> 3585;
3586 -> 3555;
3586 -> 2234;
3587 -> 3586;
3588 -> 2232;
3588 -> 3587;
3589 -> 3587;
3590 -> 3588;
3590 -> 3589;
3591 -> 0;
3591 -> 3589;
3592 -> 3591;
3592 -> 3587;
3593 -> 3587;
3594 -> 3588;
3594 -> 3593;
3595 -> 3594;
3595 -> 3586;
3595 -> 3593;
3596 -> 3595;
3596 -> 3587;
3597 -> 3587;
3598 -> 3596;
3598 -> 3597;
3598 -> 3587;
3599 -> 3598;
3599 -> 3587;
3600 -> 3599;
3601 -> 3600;
3601 -> 3586;
3602 -> 3586;
3603 -> 3601;
3603 -> 3602;
3604 -> 3603;
3604 -> 3586;
3604 -> 3602;
3605 -> 3602;
3606 -> 3603;
3606 -> 3586;
3606 -> 3605;
3606 -> 3602;
3607 -> 3606;
3608 -> 3603;
3608 -> 3586;
3608 -> 3606;
3609 -> 3607;
3609 -> 3606;
3610 -> 3606;
3611 -> 3603;
3611 -> 3609;
3611 -> 3602;
3612 -> 2235;
3612 -> 3586;
3613 -> 3586;
3614 -> 2232;
3614 -> 3613;
3615 -> 3613;
3616 -> 3614;
3616 -> 3615;
3617 -> 3615;
3618 -> 3616;
3618 -> 3611;
3618 -> 3617;
3619 -> 3618;
3619 -> 3611;
3619 -> 3617;
3620 -> 3619;
3620 -> 3613;
3621 -> 3613;
3622 -> 3620;
3622 -> 3621;
3623 -> 3621;
3624 -> 3622;
3624 -> 3623;
3625 -> 3624;
3625 -> 3621;
3626 -> 3622;
3626 -> 3621;
3627 -> 3625;
3627 -> 3613;
3628 -> 3586;
3629 -> 3586;
3630 -> 2232;
3630 -> 3629;
3631 -> 3629;
3632 -> 3630;
3632 -> 3631;
3633 -> 0;
3633 -> 3631;
3634 -> 3633;
3634 -> 3629;
3635 -> 3629;
3636 -> 3630;
3636 -> 3635;
3637 -> 3636;
3637 -> 3611;
3637 -> 3635;
3638 -> 3629;
3639 -> 3637;
3639 -> 3586;
3640 -> 2232;
3640 -> 3586;
3641 -> 3586;
3642 -> 3640;
3642 -> 3641;
3643 -> 3639;
3643 -> 3641;
3644 -> 3643;
3644 -> 3641;
3645 -> 3642;
3645 -> 3641;
3646 -> 3645;
3646 -> 3611;
3646 -> 3641;
3647 -> 3641;
3648 -> 3644;
3648 -> 3646;
3648 -> 3647;
3648 -> 3641;
3649 -> 3586;
3650 -> 0;
3650 -> 3586;
3651 -> 3586;
3652 -> 3650;
3652 -> 3651;
3653 -> 2232;
3653 -> 3648;
3653 -> 3651;
3654 -> 3653;
3654 -> 3648;
3654 -> 3651;
3655 -> 3652;
3655 -> 3651;
3656 -> 3654;
3656 -> 3655;
3656 -> 3651;
3657 -> 3656;
3657 -> 3586;
3658 -> 2235;
3658 -> 3648;
3658 -> 3656;
3658 -> 2234;
3659 -> 2232;
3659 -> 3658;
3659 -> 2231;
3660 -> 3659;
3660 -> 2226;
3661 -> 2227;
3661 -> 2226;
3662 -> 2229;
3662 -> 2226;
3663 -> 3660;
3663 -> 3661;
3663 -> 3662;
3663 -> 3658;
3663 -> 2230;
3663 -> 2226;
3664 -> 3663;
3664 -> 2226;
3665 -> 3664;
3666 -> 3664;
3666 -> 3665;
3667 -> 3665;
3667 -> 3664;
3668 -> 3664;
3668 -> 3667;
3669 -> 2223;
3669 -> 3668;
3669 -> 3664;
3669 -> 3667;
3670 -> 3669;
3671 -> 3669;
3672 -> 3669;
3673 -> 3671;
3673 -> 3672;
3674 -> 3672;
3675 -> 3673;
3675 -> 3669;
3675 -> 3674;
3675 -> 3672;
3676 -> 3675;
3677 -> 3675;
3678 -> 3673;
3678 -> 3669;
3678 -> 3677;
3679 -> 3678;
3679 -> 3669;
3679 -> 3677;
3680 -> 3679;
3680 -> 3675;
3681 -> 0;
3681 -> 3675;
3682 -> 3680;
3682 -> 3675;
3683 -> 3675;
3684 -> 3682;
3684 -> 3683;
3685 -> 3673;
3685 -> 3683;
3686 -> 3683;
3687 -> 3684;
3687 -> 3686;
3687 -> 3683;
3688 -> 3683;
3689 -> 3683;
3690 -> 3683;
3691 -> 3685;
3691 -> 3690;
3692 -> 3690;
3693 -> 3692;
3693 -> 3683;
3694 -> 3693;
3694 -> 3683;
3695 -> 3693;
3695 -> 3683;
3696 -> 3695;
3697 -> 3684;
3697 -> 3683;
3698 -> 0;
3698 -> 3683;
3699 -> 3688;
3699 -> 3683;
3700 -> 3689;
3700 -> 3683;
3701 -> 3694;
3701 -> 3696;
3701 -> 3697;
3701 -> 3698;
3701 -> 3699;
3701 -> 3700;
3701 -> 3680;
3701 -> 3683;
3702 -> 3701;
3702 -> 3683;
3703 -> 3683;
3704 -> 3702;
3704 -> 3703;
3705 -> 3685;
3705 -> 3703;
3706 -> 3703;
3707 -> 3705;
3707 -> 3701;
3707 -> 3706;
3707 -> 3703;
3708 -> 0;
3708 -> 3707;
3709 -> 3704;
3709 -> 3707;
3710 -> 3709;
3710 -> 3701;
3711 -> 3705;
3711 -> 3709;
3712 -> 3709;
3713 -> 3709;
3714 -> 3710;
3714 -> 3713;
3715 -> 3711;
3715 -> 3713;
3716 -> 3710;
3716 -> 3713;
3717 -> 3712;
3717 -> 3713;
3718 -> 3713;
3719 -> 3717;
3719 -> 3713;
3720 -> 3717;
3720 -> 3713;
3721 -> 3717;
3721 -> 3713;
3722 -> 3713;
3723 -> 3714;
3723 -> 3722;
3723 -> 3713;
3724 -> 3713;
3725 -> 3715;
3725 -> 3724;
3725 -> 3713;
3726 -> 3713;
3727 -> 3716;
3727 -> 3726;
3727 -> 3713;
3728 -> 3715;
3728 -> 3717;
3728 -> 3713;
3729 -> 3714;
3729 -> 3717;
3729 -> 3713;
3730 -> 3716;
3730 -> 3717;
3730 -> 3713;
3731 -> 3709;
3732 -> 3712;
3732 -> 3731;
3733 -> 3732;
3733 -> 3729;
3733 -> 3731;
3734 -> 3733;
3734 -> 3709;
3735 -> 3712;
3735 -> 3709;
3736 -> 3708;
3736 -> 3734;
3736 -> 3735;
3736 -> 3709;
3737 -> 3705;
3737 -> 3701;
3737 -> 3707;
3738 -> 3708;
3738 -> 3707;
3739 -> 3707;
3740 -> 3737;
3740 -> 3738;
3740 -> 3739;
3740 -> 3708;
3740 -> 3701;
3740 -> 3736;
3740 -> 3717;
3740 -> 3728;
3740 -> 3729;
3740 -> 3730;
3740 -> 3707;
3741 -> 3683;
3742 -> 3701;
3742 -> 3683;
3743 -> 3683;
3744 -> 3742;
3744 -> 3743;
3745 -> 3685;
3745 -> 3743;
3746 -> 3743;
3747 -> 3745;
3747 -> 3740;
3747 -> 3746;
3747 -> 3743;
3748 -> 3747;
3749 -> 3745;
3749 -> 3748;
3750 -> 3749;
3750 -> 3740;
3750 -> 3748;
3751 -> 3750;
3751 -> 3747;
3752 -> 3747;
3753 -> 3747;
3754 -> 3751;
3754 -> 3753;
3755 -> 3754;
3755 -> 3747;
3756 -> 3747;
3757 -> 3744;
3757 -> 3747;
3758 -> 3757;
3758 -> 3755;
3758 -> 3747;
3759 -> 3758;
3760 -> 3755;
3760 -> 3759;
3761 -> 3751;
3761 -> 3760;
3762 -> 3745;
3762 -> 3760;
3763 -> 3759;
3763 -> 3760;
3764 -> 0;
3765 -> 3764;
3766 -> 3765;
3768 -> 3767;
3769 -> 3768;
3769 -> 3767;
3770 -> 0;
3770 -> 3768;
3770 -> 3767;
3771 -> 0;
3771 -> 3768;
3771 -> 3767;
3772 -> 3768;
3772 -> 3767;
3773 -> 3768;
3773 -> 3767;
3774 -> 3768;
3774 -> 3767;
3775 -> 3768;
3775 -> 3767;
3776 -> 3489;
3776 -> 3768;
3776 -> 3767;
3777 -> 0;
3777 -> 3768;
3777 -> 3767;
3778 -> 3767;
3779 -> 3758;
3779 -> 3755;
3779 -> 3760;
3780 -> 3760;
3781 -> 3761;
3781 -> 3780;
3782 -> 3762;
3782 -> 3780;
3783 -> 3763;
3783 -> 3780;
3784 -> 3779;
3784 -> 3780;
3785 -> 3780;
3786 -> 3785;
3786 -> 3780;
3787 -> 3780;
3788 -> 3780;
3789 -> 3781;
3789 -> 3780;
3790 -> 3783;
3790 -> 3780;
3791 -> 3785;
3791 -> 3780;
3792 -> 3787;
3792 -> 3780;
3793 -> 3788;
3793 -> 3780;
3794 -> 3780;
3795 -> 3789;
3795 -> 3794;
3796 -> 3790;
3796 -> 3794;
3797 -> 3791;
3797 -> 3794;
3798 -> 3792;
3798 -> 3794;
3799 -> 3793;
3799 -> 3794;
3800 -> 3794;
3801 -> 3795;
3801 -> 3800;
3802 -> 3801;
3802 -> 3794;
3803 -> 3796;
3803 -> 3794;
3804 -> 3802;
3804 -> 3803;
3804 -> 3755;
3804 -> 3794;
3805 -> 3804;
3805 -> 3794;
3806 -> 3794;
3807 -> 3780;
3808 -> 3780;
3809 -> 3780;
3810 -> 3780;
3811 -> 3805;
3811 -> 3810;
3811 -> 3780;
3812 -> 3781;
3812 -> 3811;
3813 -> 3782;
3813 -> 3811;
3814 -> 3783;
3814 -> 3811;
3815 -> 3784;
3815 -> 3811;
3816 -> 3808;
3816 -> 3811;
3817 -> 3811;
3818 -> 3811;
3819 -> 3812;
3819 -> 3818;
3820 -> 3813;
3820 -> 3818;
3821 -> 3814;
3821 -> 3818;
3822 -> 3815;
3822 -> 3818;
3823 -> 3816;
3823 -> 3818;
3824 -> 3817;
3824 -> 3818;
3825 -> 3819;
3825 -> 3818;
3826 -> 3820;
3826 -> 3818;
3827 -> 3821;
3827 -> 3818;
3828 -> 3822;
3828 -> 3818;
3829 -> 3818;
3830 -> 3823;
3830 -> 3818;
3831 -> 3818;
3832 -> 3825;
3832 -> 3831;
3833 -> 3826;
3833 -> 3831;
3834 -> 3827;
3834 -> 3831;
3835 -> 3828;
3835 -> 3831;
3836 -> 3829;
3836 -> 3831;
3837 -> 3830;
3837 -> 3831;
3838 -> 3824;
3838 -> 3831;
3839 -> 3831;
3840 -> 3838;
3840 -> 3839;
3841 -> 3839;
3842 -> 3839;
3843 -> 3840;
3843 -> 3842;
3844 -> 3842;
3845 -> 3843;
3845 -> 3842;
3846 -> 3843;
3846 -> 3842;
3847 -> 3840;
3847 -> 3839;
3848 -> 3840;
3848 -> 3839;
3849 -> 3840;
3849 -> 3839;
3850 -> 3841;
3850 -> 3840;
3850 -> 3839;
3851 -> 3838;
3851 -> 3831;
3852 -> 3838;
3852 -> 3831;
3853 -> 3838;
3853 -> 3831;
3854 -> 3838;
3854 -> 3831;
3855 -> 3838;
3855 -> 3831;
3856 -> 3838;
3856 -> 3831;
3857 -> 3838;
3857 -> 3831;
3858 -> 3838;
3858 -> 3831;
3859 -> 3838;
3859 -> 3831;
3860 -> 3489;
3860 -> 3838;
3860 -> 3831;
3861 -> 3831;
3862 -> 3861;
3862 -> 3838;
3862 -> 3831;
3863 -> 3489;
3863 -> 3838;
3863 -> 3831;
3864 -> 3831;
3865 -> 3864;
3865 -> 3838;
3865 -> 3831;
3866 -> 3838;
3866 -> 3831;
3867 -> 0;
3867 -> 3838;
3867 -> 3831;
3868 -> 3838;
3868 -> 3831;
3869 -> 3838;
3869 -> 3831;
3870 -> 3834;
3870 -> 3755;
3870 -> 3831;
3871 -> 3831;
3872 -> 3833;
3872 -> 3871;
3872 -> 3831;
3873 -> 3831;
3874 -> 3836;
3874 -> 3873;
3874 -> 3831;
3875 -> 3831;
3876 -> 3831;
3877 -> 3831;
3878 -> 3832;
3878 -> 3877;
3879 -> 3878;
3879 -> 3831;
3880 -> 3834;
3880 -> 3831;
3881 -> 3879;
3881 -> 3880;
3881 -> 3804;
3881 -> 3755;
3881 -> 3831;
3882 -> 3834;
3882 -> 3838;
3882 -> 3831;
3883 -> 3833;
3883 -> 3838;
3883 -> 3831;
3884 -> 3831;
3885 -> 3832;
3885 -> 3884;
3886 -> 3885;
3886 -> 3881;
3886 -> 3884;
3887 -> 3886;
3887 -> 3831;
3888 -> 3834;
3888 -> 3831;
3889 -> 3887;
3889 -> 3838;
3889 -> 3831;
3890 -> 3831;
3891 -> 3836;
3891 -> 3890;
3891 -> 3831;
3892 -> 3881;
3892 -> 3838;
3892 -> 3891;
3893 -> 3891;
3894 -> 3831;
3895 -> 3835;
3895 -> 3894;
3895 -> 3831;
3896 -> 3831;
3897 -> 3832;
3897 -> 3896;
3898 -> 3897;
3898 -> 3887;
3898 -> 3896;
3899 -> 3898;
3899 -> 3831;
3900 -> 3831;
3901 -> 3899;
3901 -> 3900;
3902 -> 3900;
3903 -> 3901;
3903 -> 3902;
3904 -> 3903;
3904 -> 3900;
3905 -> 3901;
3905 -> 3900;
3906 -> 3901;
3906 -> 3887;
3906 -> 0;
3906 -> 3900;
3907 -> 3895;
3907 -> 3904;
3907 -> 3831;
3908 -> 3831;
3909 -> 3838;
3909 -> 3908;
3910 -> 0;
3910 -> 3908;
3911 -> 3909;
3911 -> 3889;
3911 -> 0;
3911 -> 3908;
3912 -> 0;
3912 -> 3911;
3913 -> 3912;
3913 -> 3908;
3914 -> 3913;
3914 -> 3831;
3915 -> 3907;
3915 -> 3914;
3915 -> 3831;
3916 -> 0;
3916 -> 3838;
3916 -> 3915;
3917 -> 3876;
3917 -> 3831;
3918 -> 3780;
3919 -> 3806;
3919 -> 3918;
3919 -> 3780;
3920 -> 3817;
3920 -> 3780;
3921 -> 3752;
3921 -> 3920;
3921 -> 3843;
3921 -> 3845;
3921 -> 3846;
3921 -> 3847;
3921 -> 3848;
3921 -> 3850;
3921 -> 3883;
3921 -> 3892;
3921 -> 3889;
3921 -> 3916;
3921 -> 3855;
3921 -> 3856;
3921 -> 3857;
3921 -> 3858;
3921 -> 3859;
3921 -> 3860;
3921 -> 3862;
3921 -> 3863;
3921 -> 3865;
3921 -> 3866;
3921 -> 3867;
3921 -> 3868;
3921 -> 3869;
3921 -> 3882;
3921 -> 3480;
3921 -> 3481;
3921 -> 3482;
3921 -> 3483;
3921 -> 3484;
3921 -> 3486;
3921 -> 3488;
3921 -> 3861;
3921 -> 3864;
3921 -> 0;
3921 -> 3755;
3921 -> 3887;
3921 -> 3760;
3922 -> 3921;
3923 -> 3922;
3923 -> 3921;
3924 -> 3921;
3925 -> 3921;
3926 -> 3922;
3926 -> 3921;
3927 -> 3924;
3927 -> 3921;
3928 -> 3925;
3928 -> 3921;
3929 -> 3921;
3930 -> 3921;
3931 -> 3921;
3932 -> 3921;
3933 -> 3930;
3933 -> 3921;
3934 -> 3921;
3935 -> 3932;
3935 -> 3934;
3936 -> 3932;
3936 -> 3934;
3937 -> 3932;
3937 -> 3934;
3938 -> 3932;
3938 -> 3934;
3939 -> 3932;
3939 -> 3934;
3940 -> 3932;
3940 -> 3934;
3941 -> 3933;
3941 -> 3934;
3942 -> 3932;
3942 -> 3934;
3943 -> 3935;
3943 -> 3934;
3944 -> 3936;
3944 -> 3934;
3945 -> 3937;
3945 -> 3934;
3946 -> 3938;
3946 -> 3934;
3947 -> 3940;
3947 -> 3934;
3948 -> 3941;
3948 -> 3934;
3949 -> 3934;
3950 -> 3943;
3950 -> 3949;
3951 -> 3944;
3951 -> 3949;
3952 -> 3945;
3952 -> 3949;
3953 -> 3946;
3953 -> 3949;
3954 -> 3947;
3954 -> 3949;
3955 -> 3948;
3955 -> 3949;
3956 -> 3942;
3956 -> 3949;
3957 -> 3942;
3957 -> 3949;
3958 -> 3942;
3958 -> 3949;
3959 -> 3942;
3959 -> 3949;
3960 -> 3942;
3960 -> 3949;
3961 -> 3952;
3961 -> 3921;
3961 -> 3949;
3962 -> 3949;
3963 -> 3951;
3963 -> 3962;
3963 -> 3949;
3964 -> 3949;
3965 -> 3954;
3965 -> 3964;
3965 -> 3949;
3966 -> 3949;
3967 -> 3949;
3968 -> 3950;
3968 -> 3952;
3968 -> 3921;
3968 -> 3949;
3969 -> 3968;
3969 -> 3954;
3970 -> 3954;
3971 -> 3969;
3971 -> 3942;
3971 -> 3954;
3972 -> 3942;
3972 -> 3971;
3972 -> 3954;
3973 -> 3968;
3973 -> 3954;
3974 -> 3942;
3974 -> 3971;
3974 -> 3968;
3974 -> 3954;
3975 -> 3942;
3975 -> 3971;
3975 -> 3954;
3976 -> 3968;
3976 -> 3954;
3977 -> 3953;
3977 -> 3968;
3977 -> 3949;
3978 -> 0;
3978 -> 3949;
3979 -> 3967;
3979 -> 3949;
3980 -> 3942;
3980 -> 3934;
3981 -> 3942;
3981 -> 3934;
3982 -> 3934;
3983 -> 3939;
3983 -> 3921;
3983 -> 3982;
3983 -> 3934;
3984 -> 3940;
3984 -> 3942;
3984 -> 3934;
3985 -> 3939;
3985 -> 3942;
3985 -> 3934;
3986 -> 3975;
3986 -> 3942;
3986 -> 3934;
3987 -> 3921;
3988 -> 3929;
3988 -> 3987;
3988 -> 3921;
3989 -> 3752;
3989 -> 3932;
3989 -> 3968;
3989 -> 3942;
3989 -> 3951;
3989 -> 3971;
3989 -> 3977;
3989 -> 3952;
3989 -> 3984;
3989 -> 3986;
3989 -> 3985;
3989 -> 3949;
3989 -> 3921;
3990 -> 3989;
3991 -> 3990;
3991 -> 3989;
3992 -> 3989;
3993 -> 3989;
3994 -> 3990;
3994 -> 3989;
3995 -> 3992;
3995 -> 3989;
3996 -> 3993;
3996 -> 3989;
3997 -> 3989;
3998 -> 3989;
3999 -> 3989;
4000 -> 3998;
4000 -> 3989;
4001 -> 4000;
4001 -> 3989;
4002 -> 4001;
4002 -> 3998;
4003 -> 3998;
4004 -> 3998;
4005 -> 3998;
4006 -> 3998;
4007 -> 3998;
4008 -> 3998;
4008 -> 3989;
4009 -> 3998;
4010 -> 3998;
4011 -> 3998;
4012 -> 3998;
4013 -> 3998;
4014 -> 0;
4014 -> 3998;
4015 -> 4012;
4015 -> 3998;
4016 -> 3998;
4016 -> 3989;
4017 -> 3998;
4017 -> 3989;
4018 -> 3989;
4019 -> 3989;
4020 -> 3997;
4020 -> 4019;
4020 -> 3989;
4021 -> 3998;
4022 -> 4021;
4022 -> 3998;
4023 -> 3998;
4024 -> 3998;
4025 -> 4021;
4025 -> 3998;
4026 -> 4023;
4026 -> 3998;
4027 -> 4024;
4027 -> 3998;
4028 -> 3998;
4029 -> 3998;
4030 -> 3998;
4031 -> 4030;
4031 -> 3998;
4032 -> 4031;
4032 -> 3998;
4033 -> 3998;
4034 -> 3998;
4035 -> 3998;
4036 -> 4028;
4036 -> 4035;
4036 -> 3998;
4037 -> 4021;
4038 -> 4037;
4038 -> 4021;
4039 -> 4038;
4039 -> 4021;
4040 -> 4021;
4041 -> 4021;
4042 -> 4021;
4043 -> 4021;
4044 -> 4021;
4045 -> 4021;
4045 -> 3998;
4046 -> 4021;
4047 -> 4021;
4048 -> 4021;
4049 -> 4021;
4050 -> 4021;
4051 -> 0;
4051 -> 4021;
4052 -> 4049;
4052 -> 4021;
4053 -> 4021;
4054 -> 4021;
4055 -> 4021;
4056 -> 4021;
4057 -> 4054;
4057 -> 4021;
4058 -> 4055;
4058 -> 4021;
4059 -> 4021;
4060 -> 4021;
4061 -> 4021;
4062 -> 4021;
4063 -> 4059;
4063 -> 4062;
4063 -> 4021;
4064 -> 4054;
4064 -> 4021;
4065 -> 4054;
4066 -> 4065;
4066 -> 4054;
4067 -> 4066;
4067 -> 4054;
4068 -> 4054;
4069 -> 4054;
4070 -> 4054;
4071 -> 4054;
4072 -> 4054;
4073 -> 4054;
4073 -> 4021;
4074 -> 4054;
4075 -> 4054;
4076 -> 4054;
4077 -> 4054;
4078 -> 4054;
4079 -> 0;
4079 -> 4054;
4080 -> 4077;
4080 -> 4054;
4081 -> 3747;
4082 -> 0;
4082 -> 3747;
4083 -> 4081;
4083 -> 4082;
4083 -> 3752;
4083 -> 4054;
4083 -> 3747;
4084 -> 4083;
4084 -> 4081;
4085 -> 4084;
4085 -> 4083;
4085 -> 4081;
4086 -> 3752;
4086 -> 4085;
4086 -> 3747;
4087 -> 3747;
4088 -> 3756;
4088 -> 4087;
4088 -> 3747;
4089 -> 3745;
4089 -> 4086;
4089 -> 3747;
4090 -> 4085;
4090 -> 3747;
4091 -> 3747;
4092 -> 3747;
4093 -> 4089;
4093 -> 4092;
4093 -> 3747;
4094 -> 4085;
4094 -> 4093;
4095 -> 4093;
4096 -> 4094;
4096 -> 4095;
4097 -> 3751;
4097 -> 4095;
4098 -> 4095;
4099 -> 4097;
4099 -> 4089;
4099 -> 4098;
4099 -> 4095;
4100 -> 4095;
4101 -> 4097;
4101 -> 4089;
4101 -> 4100;
4102 -> 4101;
4102 -> 4095;
4103 -> 4096;
4103 -> 4089;
4103 -> 4095;
4104 -> 4103;
4105 -> 4104;
4106 -> 4104;
4107 -> 4104;
4107 -> 4106;
4108 -> 4107;
4108 -> 4089;
4108 -> 4106;
4109 -> 4108;
4109 -> 4104;
4110 -> 4104;
4111 -> 4097;
4111 -> 4089;
4111 -> 4109;
4111 -> 4110;
4111 -> 4104;
4112 -> 4111;
4112 -> 4104;
4113 -> 4104;
4114 -> 4104;
4114 -> 4113;
4115 -> 4114;
4115 -> 4111;
4115 -> 4113;
4116 -> 4115;
4116 -> 4104;
4117 -> 4102;
4117 -> 4116;
4117 -> 4104;
4118 -> 4111;
4119 -> 4111;
4120 -> 4111;
4121 -> 4111;
4121 -> 4120;
4122 -> 4121;
4122 -> 4111;
4122 -> 4120;
4123 -> 4122;
4123 -> 4111;
4124 -> 4102;
4124 -> 4123;
4124 -> 4111;
4125 -> 4093;
4126 -> 3683;
4127 -> 3675;
4128 -> 3669;
4129 -> 3669;
4130 -> 3669;
4131 -> 4130;
4131 -> 3669;
4132 -> 3670;
4132 -> 3669;
4133 -> 4129;
4133 -> 3669;
4134 -> 3671;
4134 -> 4111;
4134 -> 4132;
4134 -> 4133;
4134 -> 3669;
4135 -> 3670;
4135 -> 4134;
4136 -> 4130;
4136 -> 4134;
4137 -> 3671;
4137 -> 4134;
4137 -> 4135;
4137 -> 4136;
4137 -> 4131;
4138 -> 0;
4138 -> 3669;
4139 -> 4137;
4140 -> 4137;
4141 -> 4137;
4142 -> 4137;
4143 -> 4137;
4144 -> 4137;
4145 -> 4137;
4146 -> 4137;
4147 -> 4137;
4148 -> 4137;
4149 -> 4137;
4150 -> 4137;
4151 -> 4137;
4152 -> 4137;
4153 -> 4150;
4153 -> 4137;
4154 -> 4137;
4155 -> 4137;
4156 -> 4137;
4157 -> 4156;
4157 -> 4137;
4158 -> 4157;
4158 -> 4137;
4159 -> 4137;
4160 -> 4137;
4161 -> 4137;
4162 -> 4137;
4163 -> 4137;
4164 -> 4137;
4165 -> 4137;
4166 -> 4137;
4167 -> 4137;
4168 -> 4137;
4169 -> 4137;
4170 -> 4168;
4170 -> 4137;
4171 -> 4137;
4172 -> 4154;
4172 -> 4171;
4172 -> 4137;
4173 -> 4150;
4173 -> 4137;
4174 -> 4150;
4174 -> 4137;
4175 -> 4150;
4176 -> 4175;
4176 -> 4150;
4177 -> 4176;
4177 -> 4150;
4178 -> 4150;
4179 -> 4150;
4180 -> 4150;
4181 -> 4150;
4182 -> 4150;
4183 -> 4150;
4183 -> 4137;
4184 -> 4150;
4185 -> 4150;
4186 -> 4150;
4187 -> 4150;
4188 -> 4150;
4189 -> 4187;
4189 -> 4150;
4190 -> 4150;
4191 -> 4150;
4192 -> 4150;
4193 -> 4150;
4194 -> 4150;
4195 -> 4150;
4196 -> 4150;
4197 -> 4150;
4198 -> 4194;
4198 -> 4197;
4198 -> 4150;
4199 -> 4137;
4200 -> 4148;
4200 -> 4199;
4200 -> 4137;
4201 -> 4150;
4202 -> 4150;
4203 -> 4202;
4203 -> 4150;
4204 -> 4150;
4205 -> 4150;
4206 -> 4203;
4206 -> 4150;
4207 -> 4137;
4208 -> 0;
4208 -> 4137;
4209 -> 4150;
4210 -> 4150;
4211 -> 4150;
4212 -> 4150;
4213 -> 4150;
4214 -> 4150;
4215 -> 4150;
4216 -> 4150;
4217 -> 4150;
4218 -> 4150;
4219 -> 4150;
4220 -> 4218;
4220 -> 4219;
4220 -> 4150;
4221 -> 4202;
4222 -> 4202;
4223 -> 4202;
4224 -> 4221;
4224 -> 4202;
4225 -> 4150;
4226 -> 0;
4226 -> 4150;
4227 -> 4202;
4228 -> 4202;
4229 -> 4202;
4230 -> 4202;
4231 -> 4202;
4232 -> 4202;
4233 -> 4202;
4234 -> 4202;
4235 -> 4202;
4236 -> 4202;
4237 -> 4202;
4238 -> 4202;
4239 -> 4202;
4240 -> 4202;
4241 -> 4202;
4242 -> 4202;
4243 -> 4202;
4244 -> 4243;
4244 -> 4202;
4245 -> 4244;
4245 -> 4202;
4246 -> 4202;
4247 -> 4202;
4248 -> 4202;
4249 -> 4202;
4250 -> 4202;
4251 -> 4202;
4252 -> 4202;
4253 -> 4202;
4254 -> 4202;
4255 -> 4202;
4256 -> 4202;
4257 -> 4255;
4257 -> 4202;
4258 -> 4202;
4259 -> 4241;
4259 -> 4258;
4259 -> 4202;
4260 -> 4202;
4261 -> 4236;
4261 -> 4260;
4261 -> 4202;
4262 -> 4202;
4263 -> 0;
4263 -> 4202;
4264 -> 2219;
4265 -> 2222;
4265 -> 4264;
4265 -> 2219;
4266 -> 2223;
4266 -> 4202;
4266 -> 2219;
4267 -> 2210;
4268 -> 2212;
4268 -> 2210;
4269 -> 4266;
4269 -> 4267;
4269 -> 4268;
4269 -> 2210;
4270 -> 4269;
4270 -> 4267;
4271 -> 4270;
4271 -> 4269;
4271 -> 4267;
4272 -> 4271;
4272 -> 1;
4273 -> 0;
4273 -> 1;
4274 -> 1;
4275 -> 4271;
4275 -> 4274;
4276 -> 4275;
4276 -> 4271;
4276 -> 4274;
4277 -> 4274;
4278 -> 4276;
4278 -> 4277;
4279 -> 4278;
4279 -> 0;
4279 -> 4277;
4280 -> 0;
4280 -> 4279;
4281 -> 4280;
4281 -> 1;
4282 -> 1;
4283 -> 4271;
4283 -> 4282;
4284 -> 4282;
4285 -> 4283;
4285 -> 4271;
4285 -> 4284;
4286 -> 4285;
4286 -> 4271;
4286 -> 3434;
4286 -> 4284;
4287 -> 4284;
4288 -> 4286;
4288 -> 4282;
4289 -> 4288;
4290 -> 4283;
4290 -> 4289;
4291 -> 4290;
4291 -> 4271;
4291 -> 4289;
4292 -> 4291;
4292 -> 4271;
4292 -> 4289;
4293 -> 4292;
4294 -> 4290;
4294 -> 4293;
4295 -> 0;
4295 -> 4293;
4296 -> 4293;
4297 -> 4295;
4297 -> 4296;
4298 -> 4294;
4298 -> 4271;
4298 -> 4296;
4299 -> 4298;
4299 -> 4271;
4299 -> 4297;
4299 -> 4296;
4300 -> 4293;
4301 -> 4294;
4301 -> 4300;
4302 -> 4300;
4303 -> 4301;
4303 -> 4271;
4303 -> 4302;
4303 -> 4300;
4304 -> 4303;
4305 -> 4304;
4305 -> 4303;
4306 -> 4303;
4307 -> 4305;
4307 -> 4306;
4308 -> 4301;
4308 -> 4306;
4309 -> 4306;
4310 -> 4306;
4311 -> 4308;
4311 -> 4310;
4312 -> 4311;
4312 -> 4271;
4312 -> 4310;
4313 -> 4310;
4314 -> 4312;
4314 -> 4313;
4314 -> 4310;
4315 -> 4310;
4316 -> 4315;
4316 -> 4310;
4317 -> 4310;
4318 -> 4316;
4318 -> 4317;
4319 -> 4311;
4319 -> 4317;
4320 -> 4317;
4321 -> 4319;
4321 -> 4320;
4322 -> 4321;
4322 -> 4271;
4322 -> 4320;
4323 -> 4322;
4323 -> 3203;
4323 -> 4320;
4324 -> 4321;
4324 -> 4271;
4324 -> 4320;
4325 -> 4320;
4326 -> 4325;
4326 -> 4320;
4327 -> 4320;
4328 -> 4326;
4328 -> 4327;
4329 -> 4321;
4329 -> 4327;
4330 -> 4327;
4331 -> 4327;
4332 -> 4330;
4332 -> 4331;
4333 -> 4331;
4334 -> 4333;
4334 -> 4332;
4334 -> 4331;
4335 -> 4331;
4336 -> 4335;
4336 -> 4332;
4336 -> 4331;
4337 -> 4331;
4338 -> 4337;
4338 -> 4332;
4338 -> 4331;
4339 -> 4332;
4339 -> 4331;
4340 -> 4332;
4340 -> 4331;
4341 -> 4332;
4341 -> 4331;
4342 -> 4331;
4343 -> 4342;
4343 -> 4332;
4343 -> 4331;
4344 -> 4332;
4344 -> 4331;
4345 -> 4332;
4345 -> 4331;
4346 -> 4330;
4346 -> 4327;
4347 -> 4328;
4347 -> 4327;
4348 -> 4327;
4349 -> 4346;
4349 -> 4348;
4350 -> 4347;
4350 -> 4348;
4351 -> 4329;
4351 -> 4348;
4352 -> 4351;
4352 -> 4324;
4352 -> 4348;
4353 -> 4352;
4353 -> 4324;
4354 -> 4352;
4355 -> 4352;
4356 -> 4355;
4356 -> 4352;
4357 -> 4349;
4357 -> 4356;
4358 -> 4355;
4358 -> 4356;
4359 -> 4350;
4359 -> 4356;
4360 -> 4356;
4361 -> 4357;
4361 -> 4360;
4362 -> 4358;
4362 -> 4360;
4363 -> 4359;
4363 -> 4360;
4364 -> 4351;
4364 -> 4360;
4365 -> 4360;
4366 -> 4360;
4367 -> 4362;
4367 -> 4356;
4367 -> 4360;
4368 -> 4367;
4369 -> 4367;
4369 -> 4356;
4370 -> 4367;
4371 -> 4369;
4371 -> 4370;
4371 -> 4367;
4372 -> 4364;
4372 -> 4371;
4373 -> 4367;
4373 -> 4371;
4374 -> 4365;
4374 -> 4371;
4375 -> 4366;
4375 -> 4371;
4376 -> 4363;
4376 -> 4371;
4377 -> 4371;
4378 -> 4372;
4378 -> 4377;
4379 -> 4373;
4379 -> 4377;
4380 -> 4374;
4380 -> 4377;
4381 -> 4375;
4381 -> 4377;
4382 -> 4376;
4382 -> 4377;
4383 -> 4377;
4384 -> 4380;
4384 -> 4383;
4384 -> 4377;
4385 -> 4384;
4386 -> 4381;
4386 -> 4385;
4386 -> 4384;
4387 -> 4378;
4387 -> 4384;
4388 -> 4379;
4388 -> 4384;
4389 -> 4382;
4389 -> 4384;
4390 -> 4384;
4391 -> 4384;
4392 -> 4387;
4392 -> 4391;
4393 -> 4388;
4393 -> 4391;
4394 -> 4389;
4394 -> 4391;
4395 -> 4390;
4395 -> 4391;
4396 -> 4392;
4396 -> 4391;
4397 -> 4393;
4397 -> 4391;
4398 -> 4394;
4398 -> 4391;
4399 -> 4391;
4400 -> 4396;
4400 -> 4399;
4401 -> 4397;
4401 -> 4399;
4402 -> 4398;
4402 -> 4399;
4403 -> 4395;
4403 -> 4399;
4404 -> 4400;
4404 -> 4399;
4405 -> 4401;
4405 -> 4356;
4405 -> 4399;
4406 -> 4401;
4406 -> 4356;
4406 -> 4399;
4407 -> 4401;
4407 -> 4406;
4407 -> 4399;
4408 -> 4399;
4409 -> 4407;
4409 -> 4408;
4410 -> 4407;
4410 -> 4408;
4411 -> 4407;
4411 -> 4408;
4412 -> 4407;
4412 -> 4408;
4413 -> 4407;
4413 -> 4408;
4414 -> 4409;
4414 -> 4408;
4415 -> 4408;
4416 -> 4414;
4416 -> 4415;
4417 -> 4413;
4417 -> 4415;
4418 -> 4415;
4419 -> 4417;
4419 -> 4418;
4420 -> 4418;
4421 -> 4419;
4421 -> 4420;
4422 -> 4420;
4423 -> 4421;
4423 -> 4420;
4424 -> 4419;
4424 -> 4418;
4425 -> 4417;
4425 -> 4415;
4426 -> 4415;
4427 -> 4416;
4427 -> 4426;
4427 -> 4415;
4428 -> 4416;
4428 -> 4417;
4428 -> 4415;
4429 -> 4413;
4429 -> 4408;
4430 -> 4413;
4430 -> 4408;
4431 -> 4413;
4431 -> 4408;
4432 -> 4413;
4432 -> 4408;
4433 -> 4413;
4433 -> 4408;
4434 -> 0;
4434 -> 4413;
4434 -> 4408;
4435 -> 0;
4435 -> 4413;
4435 -> 4408;
4436 -> 4408;
4437 -> 4410;
4437 -> 4436;
4437 -> 4408;
4438 -> 4408;
4439 -> 4411;
4439 -> 4438;
4439 -> 4408;
4440 -> 4408;
4441 -> 4412;
4441 -> 4440;
4441 -> 4408;
4442 -> 4410;
4442 -> 4413;
4442 -> 4408;
4443 -> 4411;
4443 -> 4413;
4443 -> 4408;
4444 -> 4412;
4444 -> 4413;
4444 -> 4408;
4445 -> 4407;
4445 -> 4421;
4445 -> 4423;
4445 -> 4424;
4445 -> 4428;
4445 -> 4442;
4445 -> 4444;
4445 -> 4443;
4445 -> 4432;
4445 -> 4433;
4445 -> 4434;
4445 -> 4435;
4445 -> 0;
4445 -> 4399;
4446 -> 4401;
4446 -> 4445;
4446 -> 4399;
4447 -> 4399;
4448 -> 4447;
4448 -> 4404;
4448 -> 4405;
4448 -> 4406;
4448 -> 4446;
4448 -> 4399;
4449 -> 4399;
4450 -> 4447;
4450 -> 4449;
4451 -> 4450;
4451 -> 4448;
4451 -> 4449;
4452 -> 4451;
4452 -> 4399;
4453 -> 4390;
4453 -> 4367;
4454 -> 4361;
4454 -> 4334;
4454 -> 4453;
4454 -> 4333;
4454 -> 4448;
4454 -> 4367;
4455 -> 4367;
4456 -> 4369;
4456 -> 4455;
4456 -> 4367;
4457 -> 4365;
4457 -> 4367;
4458 -> 4456;
4458 -> 4457;
4458 -> 4367;
4459 -> 4390;
4459 -> 4458;
4460 -> 4458;
4461 -> 4454;
4462 -> 4364;
4462 -> 4454;
4463 -> 4454;
4464 -> 4363;
4464 -> 4454;
4465 -> 4454;
4466 -> 4462;
4466 -> 4465;
4467 -> 4463;
4467 -> 4465;
4468 -> 4464;
4468 -> 4465;
4469 -> 4467;
4469 -> 4454;
4469 -> 4465;
4470 -> 4465;
4471 -> 4469;
4471 -> 4470;
4471 -> 4465;
4472 -> 4466;
4472 -> 4465;
4473 -> 4467;
4473 -> 4465;
4474 -> 4469;
4474 -> 4465;
4475 -> 4468;
4475 -> 4465;
4476 -> 4465;
4477 -> 4465;
4478 -> 4472;
4478 -> 4477;
4479 -> 4473;
4479 -> 4477;
4480 -> 4474;
4480 -> 4477;
4481 -> 4475;
4481 -> 4477;
4482 -> 4476;
4482 -> 4477;
4483 -> 4478;
4483 -> 4477;
4484 -> 4479;
4484 -> 4477;
4485 -> 4481;
4485 -> 4477;
4486 -> 4477;
4487 -> 4483;
4487 -> 4486;
4488 -> 4484;
4488 -> 4486;
4489 -> 4485;
4489 -> 4486;
4490 -> 4488;
4490 -> 4486;
4491 -> 4486;
4492 -> 4488;
4492 -> 4491;
4492 -> 4486;
4493 -> 4488;
4493 -> 4486;
4494 -> 4488;
4494 -> 4486;
4495 -> 4488;
4495 -> 4486;
4496 -> 4486;
4497 -> 4488;
4497 -> 4496;
4497 -> 4486;
4498 -> 4486;
4499 -> 4488;
4499 -> 4498;
4499 -> 4486;
4500 -> 4486;
4501 -> 4488;
4501 -> 4500;
4501 -> 4486;
4502 -> 4486;
4502 -> 4487;
4502 -> 4488;
4503 -> 4486;
4504 -> 4486;
4504 -> 4503;
4505 -> 4504;
4505 -> 4502;
4505 -> 4503;
4506 -> 4505;
4506 -> 4486;
4507 -> 4482;
4507 -> 4477;
4508 -> 4480;
4508 -> 4502;
4508 -> 4507;
4508 -> 4477;
4509 -> 4508;
4509 -> 4482;
4509 -> 4477;
4510 -> 4476;
4510 -> 4454;
4511 -> 4454;
4512 -> 4510;
4512 -> 4511;
4513 -> 4511;
4514 -> 4509;
4515 -> 4512;
4515 -> 4509;
4516 -> 4513;
4516 -> 4509;
4517 -> 4363;
4517 -> 4509;
4518 -> 4516;
4518 -> 4509;
4519 -> 4517;
4519 -> 4509;
4520 -> 4515;
4521 -> 4518;
4521 -> 4520;
4521 -> 4515;
4522 -> 4509;
4522 -> 4515;
4523 -> 4515;
4524 -> 4518;
4524 -> 4515;
4525 -> 4519;
4525 -> 4515;
4526 -> 4515;
4527 -> 4522;
4527 -> 4526;
4528 -> 4522;
4528 -> 4526;
4529 -> 4523;
4529 -> 4526;
4530 -> 4524;
4530 -> 4526;
4531 -> 4525;
4531 -> 4526;
4532 -> 4523;
4532 -> 4526;
4533 -> 4527;
4533 -> 4526;
4534 -> 4528;
4534 -> 4526;
4535 -> 4531;
4535 -> 4526;
4536 -> 4526;
4537 -> 4533;
4537 -> 4536;
4538 -> 4534;
4538 -> 4536;
4539 -> 4535;
4539 -> 4536;
4540 -> 4538;
4540 -> 4536;
4541 -> 4536;
4542 -> 4538;
4542 -> 4541;
4542 -> 4536;
4543 -> 4538;
4543 -> 4536;
4544 -> 4538;
4544 -> 4536;
4545 -> 4538;
4545 -> 4536;
4546 -> 4536;
4547 -> 4538;
4547 -> 4546;
4547 -> 4536;
4548 -> 4536;
4549 -> 4538;
4549 -> 4548;
4549 -> 4536;
4550 -> 4536;
4551 -> 4538;
4551 -> 4550;
4551 -> 4536;
4552 -> 4536;
4552 -> 4537;
4552 -> 4538;
4553 -> 4536;
4554 -> 4536;
4554 -> 4553;
4555 -> 4554;
4555 -> 4552;
4555 -> 4553;
4556 -> 4555;
4556 -> 4536;
4557 -> 4532;
4557 -> 4526;
4558 -> 4532;
4558 -> 4526;
4559 -> 4526;
4560 -> 4529;
4560 -> 4559;
4560 -> 4526;
4561 -> 4526;
4562 -> 4530;
4562 -> 4561;
4562 -> 4526;
4563 -> 4529;
4563 -> 4532;
4563 -> 4526;
4564 -> 4530;
4564 -> 4532;
4564 -> 4526;
4565 -> 4361;
4565 -> 4334;
4565 -> 4523;
4565 -> 4552;
4565 -> 4557;
4565 -> 4563;
4565 -> 4558;
4565 -> 4564;
4565 -> 4509;
4566 -> 4509;
4567 -> 4512;
4567 -> 4509;
4568 -> 4513;
4568 -> 4567;
4569 -> 4356;
4570 -> 4327;
4571 -> 4327;
4572 -> 4329;
4572 -> 4571;
4573 -> 4571;
4574 -> 4572;
4574 -> 4565;
4574 -> 4573;
4575 -> 4574;
4575 -> 4565;
4575 -> 3402;
4575 -> 4573;
4576 -> 4575;
4576 -> 3423;
4576 -> 4573;
4577 -> 4576;
4577 -> 4571;
4578 -> 4577;
4578 -> 4327;
4579 -> 4330;
4579 -> 4334;
4579 -> 4578;
4580 -> 4578;
4581 -> 4328;
4581 -> 4578;
4582 -> 4578;
4583 -> 4579;
4583 -> 4582;
4584 -> 4580;
4584 -> 4582;
4585 -> 4581;
4585 -> 4582;
4586 -> 4583;
4586 -> 4582;
4587 -> 4586;
4588 -> 4587;
4588 -> 4586;
4589 -> 4327;
4590 -> 4329;
4590 -> 4589;
4591 -> 4589;
4592 -> 4591;
4592 -> 4589;
4593 -> 4589;
4594 -> 4592;
4594 -> 4593;
4595 -> 4590;
4595 -> 4593;
4596 -> 4593;
4597 -> 4595;
4597 -> 4596;
4598 -> 4596;
4599 -> 4598;
4599 -> 4593;
4600 -> 4593;
4601 -> 4595;
4601 -> 4600;
4602 -> 4601;
4602 -> 4565;
4602 -> 4600;
4603 -> 4602;
4603 -> 4593;
4604 -> 4593;
4605 -> 4603;
4605 -> 4604;
4606 -> 0;
4606 -> 4604;
4607 -> 4606;
4607 -> 4593;
4608 -> 4599;
4608 -> 4607;
4608 -> 4593;
4609 -> 4593;
4610 -> 4595;
4610 -> 4609;
4611 -> 4609;
4612 -> 4610;
4612 -> 4611;
4613 -> 4612;
4613 -> 4565;
4613 -> 4611;
4614 -> 4613;
4614 -> 4609;
4615 -> 4609;
4616 -> 4614;
4617 -> 4614;
4618 -> 4616;
4618 -> 4617;
4618 -> 4614;
4619 -> 4616;
4619 -> 4618;
4620 -> 4619;
4620 -> 4593;
4621 -> 4593;
4622 -> 4620;
4622 -> 4621;
4623 -> 4621;
4624 -> 4622;
4624 -> 4623;
4625 -> 4624;
4625 -> 4565;
4625 -> 4623;
4626 -> 4621;
4627 -> 4625;
4628 -> 4625;
4628 -> 4627;
4629 -> 4628;
4629 -> 4565;
4629 -> 4627;
4630 -> 4629;
4631 -> 4629;
4632 -> 4621;
4633 -> 4632;
4633 -> 4593;
4634 -> 4593;
4635 -> 4608;
4635 -> 4633;
4635 -> 4593;
4636 -> 4593;
4637 -> 4593;
4638 -> 4637;
4638 -> 4327;
4639 -> 4329;
4639 -> 4565;
4639 -> 4327;
4640 -> 4639;
4640 -> 3203;
4640 -> 4327;
4641 -> 4327;
4642 -> 4330;
4642 -> 4641;
4643 -> 4642;
4643 -> 4334;
4643 -> 4639;
4643 -> 4641;
4644 -> 4642;
4644 -> 4336;
4644 -> 4641;
4645 -> 4641;
4646 -> 4644;
4646 -> 4645;
4647 -> 4645;
4648 -> 4646;
4648 -> 4335;
4648 -> 4647;
4648 -> 4645;
4649 -> 4646;
4649 -> 4335;
4649 -> 4648;
4650 -> 0;
4650 -> 4648;
4651 -> 4642;
4651 -> 4338;
4651 -> 4641;
4652 -> 4641;
4653 -> 4651;
4653 -> 4652;
4654 -> 4652;
4655 -> 4653;
4655 -> 4337;
4655 -> 4654;
4655 -> 4652;
4656 -> 4653;
4656 -> 4337;
4656 -> 4655;
4657 -> 0;
4657 -> 4655;
4658 -> 4642;
4658 -> 4339;
4658 -> 4641;
4659 -> 4642;
4659 -> 4340;
4659 -> 4641;
4660 -> 4642;
4660 -> 4341;
4660 -> 4641;
4661 -> 4642;
4661 -> 4343;
4661 -> 4641;
4662 -> 4642;
4662 -> 4344;
4662 -> 4641;
4663 -> 4642;
4663 -> 4345;
4663 -> 4641;
4664 -> 4641;
4665 -> 4641;
4666 -> 4643;
4666 -> 4665;
4667 -> 4650;
4667 -> 4665;
4668 -> 4657;
4668 -> 4665;
4669 -> 4658;
4669 -> 4665;
4670 -> 4659;
4670 -> 4665;
4671 -> 4660;
4671 -> 4665;
4672 -> 4661;
4672 -> 4665;
4673 -> 4662;
4673 -> 4665;
4674 -> 4663;
4674 -> 4665;
4675 -> 4664;
4675 -> 4665;
4676 -> 4675;
4676 -> 4665;
4677 -> 4675;
4677 -> 4665;
4678 -> 4675;
4678 -> 4665;
4679 -> 4675;
4679 -> 4665;
4680 -> 4675;
4680 -> 4665;
4681 -> 4675;
4681 -> 4665;
4682 -> 4666;
4682 -> 4643;
4682 -> 4665;
4683 -> 4667;
4683 -> 0;
4683 -> 4665;
4684 -> 4668;
4684 -> 0;
4684 -> 4665;
4685 -> 4666;
4685 -> 4665;
4686 -> 4665;
4687 -> 4670;
4687 -> 4671;
4687 -> 4665;
4688 -> 4666;
4688 -> 4675;
4688 -> 4665;
4689 -> 4667;
4689 -> 4675;
4689 -> 4665;
4690 -> 4668;
4690 -> 4675;
4690 -> 4665;
4691 -> 4669;
4691 -> 4675;
4691 -> 4665;
4692 -> 4670;
4692 -> 4675;
4692 -> 4665;
4693 -> 4671;
4693 -> 4675;
4693 -> 4665;
4694 -> 4672;
4694 -> 4675;
4694 -> 4665;
4695 -> 4673;
4695 -> 4675;
4695 -> 4665;
4696 -> 4674;
4696 -> 4675;
4696 -> 4665;
4697 -> 4664;
4697 -> 4327;
4698 -> 4697;
4698 -> 4320;
4699 -> 4321;
4699 -> 4685;
4699 -> 4320;
4700 -> 4698;
4700 -> 4320;
4701 -> 3203;
4701 -> 4320;
4702 -> 4699;
4702 -> 4700;
4702 -> 4701;
4702 -> 4691;
4702 -> 4692;
4702 -> 4693;
4702 -> 4694;
4702 -> 4695;
4702 -> 4696;
4702 -> 4688;
4702 -> 4689;
4702 -> 4690;
4702 -> 3197;
4702 -> 3198;
4702 -> 3199;
4702 -> 3200;
4702 -> 3201;
4702 -> 3202;
4702 -> 4685;
4702 -> 4643;
4702 -> 0;
4702 -> 4320;
4703 -> 4702;
4703 -> 3203;
4703 -> 4320;
4704 -> 4325;
4704 -> 4320;
4705 -> 4320;
4706 -> 4704;
4706 -> 4705;
4707 -> 4321;
4707 -> 4705;
4708 -> 4705;
4709 -> 4707;
4709 -> 4708;
4710 -> 4709;
4710 -> 4702;
4710 -> 4708;
4711 -> 4710;
4711 -> 4705;
4712 -> 4706;
4712 -> 4325;
4712 -> 4705;
4713 -> 4320;
4714 -> 4325;
4714 -> 4320;
4715 -> 4698;
4715 -> 4320;
4716 -> 4715;
4716 -> 4317;
4717 -> 4716;
4717 -> 4317;
4718 -> 4716;
4718 -> 4317;
4719 -> 4317;
4720 -> 4317;
4721 -> 4718;
4721 -> 4720;
4722 -> 4719;
4722 -> 4720;
4723 -> 4722;
4723 -> 4720;
4724 -> 4722;
4724 -> 4720;
4725 -> 4722;
4725 -> 4720;
4726 -> 4722;
4726 -> 4720;
4727 -> 4721;
4727 -> 3203;
4727 -> 4720;
4728 -> 4721;
4728 -> 4702;
4728 -> 4722;
4728 -> 4720;
4729 -> 4721;
4729 -> 4702;
4729 -> 4722;
4729 -> 4720;
4730 -> 4719;
4730 -> 4317;
4731 -> 4716;
4731 -> 4317;
4732 -> 4318;
4732 -> 4317;
4733 -> 4317;
4734 -> 4730;
4734 -> 4733;
4735 -> 4731;
4735 -> 4733;
4736 -> 4732;
4736 -> 4733;
4737 -> 4319;
4737 -> 4733;
4738 -> 4733;
4739 -> 4737;
4739 -> 4738;
4740 -> 4738;
4741 -> 4739;
4741 -> 4702;
4741 -> 4740;
4742 -> 4741;
4742 -> 4702;
4742 -> 3402;
4742 -> 4740;
4743 -> 4742;
4743 -> 3423;
4743 -> 4740;
4744 -> 4743;
4744 -> 4738;
4745 -> 4744;
4745 -> 4733;
4746 -> 4734;
4746 -> 4745;
4747 -> 4735;
4747 -> 4745;
4748 -> 4736;
4748 -> 4745;
4749 -> 4745;
4750 -> 4746;
4750 -> 4749;
4751 -> 4747;
4751 -> 4749;
4752 -> 4748;
4752 -> 4749;
4753 -> 4737;
4753 -> 4749;
4754 -> 4753;
4754 -> 4702;
4754 -> 0;
4754 -> 4749;
4755 -> 4754;
4756 -> 4745;
4757 -> 4734;
4757 -> 4745;
4758 -> 4735;
4758 -> 4745;
4759 -> 4736;
4759 -> 4745;
4760 -> 4745;
4761 -> 4757;
4761 -> 4760;
4762 -> 4758;
4762 -> 4760;
4763 -> 4759;
4763 -> 4760;
4764 -> 4737;
4764 -> 4760;
4765 -> 4760;
4766 -> 4760;
4767 -> 4760;
4768 -> 4762;
4768 -> 4760;
4769 -> 4760;
4770 -> 4768;
4770 -> 4769;
4771 -> 4761;
4771 -> 4769;
4772 -> 4770;
4772 -> 4702;
4772 -> 4769;
4773 -> 4772;
4773 -> 4771;
4773 -> 4723;
4773 -> 4769;
4774 -> 4773;
4774 -> 4760;
4775 -> 4774;
4776 -> 4774;
4776 -> 4775;
4777 -> 0;
4777 -> 4775;
4778 -> 4777;
4778 -> 4774;
4779 -> 4765;
4779 -> 4774;
4784 -> 4780;
4784 -> 4783;
4785 -> 4781;
4785 -> 4783;
4786 -> 4782;
4786 -> 4783;
4787 -> 4783;
4788 -> 0;
4789 -> 4788;
4790 -> 0;
4791 -> 4790;
4792 -> 0;
4793 -> 4792;
4794 -> 0;
4795 -> 4794;
4796 -> 4764;
4796 -> 4760;
4797 -> 4760;
4798 -> 4796;
4798 -> 4797;
4799 -> 4797;
4800 -> 4798;
4800 -> 4799;
4800 -> 4797;
4801 -> 4797;
4802 -> 4798;
4802 -> 4801;
4803 -> 4802;
4803 -> 4797;
4804 -> 4766;
4804 -> 4803;
4804 -> 4760;
4805 -> 4760;
4806 -> 4764;
4806 -> 4805;
4807 -> 0;
4807 -> 4805;
4808 -> 4805;
4809 -> 4807;
4809 -> 4808;
4810 -> 4806;
4810 -> 4808;
4811 -> 4810;
4811 -> 4702;
4811 -> 4809;
4811 -> 4808;
4812 -> 4808;
4813 -> 4811;
4813 -> 4812;
4813 -> 4808;
4814 -> 4813;
4814 -> 4760;
4815 -> 4765;
4815 -> 4814;
4815 -> 4760;
4816 -> 4760;
4817 -> 4764;
4817 -> 4816;
4818 -> 4816;
4819 -> 4817;
4819 -> 4818;
4820 -> 4819;
4820 -> 4816;
4821 -> 4820;
4821 -> 4760;
4822 -> 4815;
4822 -> 4821;
4822 -> 4760;
4823 -> 4804;
4823 -> 4822;
4823 -> 4760;
4824 -> 4823;
4825 -> 4824;
4825 -> 4823;
4826 -> 4825;
4826 -> 4823;
4827 -> 4826;
4828 -> 4826;
4828 -> 4827;
4829 -> 4826;
4829 -> 4827;
4830 -> 4827;
4831 -> 4829;
4831 -> 4830;
4833 -> 4832;
4834 -> 4830;
4835 -> 4831;
4835 -> 4834;
4836 -> 4834;
4837 -> 4835;
4837 -> 4834;
4838 -> 4835;
4838 -> 4834;
4839 -> 4831;
4839 -> 4830;
4840 -> 4829;
4840 -> 4827;
4841 -> 4827;
4842 -> 4828;
4842 -> 4841;
4842 -> 4827;
4843 -> 4828;
4843 -> 4829;
4843 -> 4827;
4844 -> 4762;
4844 -> 4823;
4845 -> 4823;
4846 -> 4826;
4846 -> 4845;
4847 -> 4844;
4847 -> 4845;
4848 -> 4761;
4848 -> 4845;
4849 -> 4848;
4849 -> 4723;
4849 -> 4845;
4850 -> 4849;
4851 -> 4847;
4851 -> 4702;
4851 -> 4850;
4851 -> 4849;
4852 -> 4851;
4852 -> 4848;
4852 -> 4849;
4853 -> 4847;
4853 -> 4702;
4853 -> 4849;
4854 -> 4848;
4854 -> 4852;
4854 -> 4853;
4854 -> 4851;
4854 -> 4702;
4854 -> 4849;
4855 -> 4846;
4855 -> 4845;
4856 -> 4848;
4856 -> 4852;
4856 -> 4855;
4856 -> 4854;
4856 -> 4835;
4856 -> 4837;
4856 -> 4838;
4856 -> 4839;
4856 -> 4843;
4856 -> 4845;
4857 -> 4823;
4858 -> 4762;
4858 -> 4856;
4858 -> 4760;
4859 -> 4760;
4860 -> 4858;
4860 -> 4859;
4861 -> 4860;
4861 -> 4859;
4862 -> 4859;
4863 -> 4767;
4863 -> 4861;
4863 -> 4760;
4864 -> 4760;
4865 -> 4764;
4865 -> 4864;
4866 -> 4864;
4867 -> 4865;
4867 -> 4861;
4867 -> 4866;
4867 -> 4864;
4868 -> 4867;
4868 -> 0;
4868 -> 4864;
4869 -> 4868;
4869 -> 4760;
4870 -> 4745;
4871 -> 4317;
4872 -> 4319;
4872 -> 4867;
4872 -> 4317;
4873 -> 4317;
4874 -> 4716;
4874 -> 4317;
4875 -> 4317;
4876 -> 4874;
4876 -> 4875;
4877 -> 4719;
4877 -> 4875;
4878 -> 4877;
4878 -> 4852;
4878 -> 4872;
4878 -> 4875;
4879 -> 4877;
4879 -> 4724;
4879 -> 4875;
4880 -> 4879;
4880 -> 4875;
4881 -> 4876;
4881 -> 4872;
4881 -> 4880;
4882 -> 4878;
4882 -> 4875;
4883 -> 4876;
4883 -> 4872;
4883 -> 4875;
4884 -> 4881;
4884 -> 4875;
4885 -> 4877;
4885 -> 4728;
4885 -> 4875;
4886 -> 4877;
4886 -> 4729;
4886 -> 4875;
4887 -> 4875;
4888 -> 4875;
4889 -> 4882;
4889 -> 4888;
4890 -> 4883;
4890 -> 4888;
4891 -> 4884;
4891 -> 4888;
4892 -> 4883;
4892 -> 4888;
4893 -> 4885;
4893 -> 4888;
4894 -> 4886;
4894 -> 4888;
4895 -> 4887;
4895 -> 4888;
4896 -> 4895;
4896 -> 4888;
4897 -> 4895;
4897 -> 4888;
4898 -> 4895;
4898 -> 4888;
4899 -> 4889;
4899 -> 4878;
4899 -> 4888;
4900 -> 4890;
4900 -> 4872;
4900 -> 4888;
4901 -> 4890;
4901 -> 4888;
4902 -> 4888;
4903 -> 4901;
4903 -> 4902;
4903 -> 4872;
4903 -> 4881;
4903 -> 4888;
4904 -> 4891;
4904 -> 4872;
4904 -> 4888;
4905 -> 4891;
4905 -> 4888;
4906 -> 4888;
4907 -> 4905;
4907 -> 4906;
4907 -> 4872;
4907 -> 4881;
4907 -> 4903;
4907 -> 4888;
4908 -> 4889;
4908 -> 4888;
4909 -> 4888;
4910 -> 4908;
4910 -> 4909;
4910 -> 4878;
4910 -> 4907;
4910 -> 4888;
4911 -> 4889;
4911 -> 4888;
4912 -> 4888;
4913 -> 4911;
4913 -> 4912;
4913 -> 4878;
4913 -> 4910;
4913 -> 4888;
4914 -> 4892;
4914 -> 4913;
4914 -> 4888;
4915 -> 4914;
4915 -> 4912;
4916 -> 4912;
4917 -> 4915;
4917 -> 4916;
4918 -> 0;
4918 -> 4916;
4919 -> 4918;
4919 -> 4912;
4920 -> 4914;
4920 -> 4919;
4920 -> 4888;
4921 -> 4915;
4921 -> 4916;
4922 -> 0;
4922 -> 4916;
4923 -> 4922;
4923 -> 4912;
4924 -> 4914;
4924 -> 4923;
4924 -> 4920;
4924 -> 4888;
4925 -> 4914;
4925 -> 4919;
4925 -> 4923;
4925 -> 4888;
4926 -> 4889;
4926 -> 4895;
4926 -> 4888;
4927 -> 4890;
4927 -> 4895;
4927 -> 4888;
4928 -> 4891;
4928 -> 4895;
4928 -> 4888;
4929 -> 4892;
4929 -> 4895;
4929 -> 4888;
4930 -> 4893;
4930 -> 4895;
4930 -> 4888;
4931 -> 4894;
4931 -> 4895;
4931 -> 4888;
4932 -> 4887;
4932 -> 4317;
4933 -> 4932;
4933 -> 4310;
4934 -> 4311;
4934 -> 4913;
4934 -> 4310;
4935 -> 4933;
4935 -> 4310;
4936 -> 4310;
4937 -> 4934;
4937 -> 4935;
4937 -> 4936;
4937 -> 4929;
4937 -> 4930;
4937 -> 4931;
4937 -> 4926;
4937 -> 4927;
4937 -> 4928;
4937 -> 4913;
4937 -> 4878;
4937 -> 4872;
4937 -> 4881;
4937 -> 4310;
4938 -> 4310;
4939 -> 4937;
4939 -> 4938;
4939 -> 4310;
4940 -> 4315;
4940 -> 4310;
4941 -> 4310;
4942 -> 4940;
4942 -> 4941;
4943 -> 4311;
4943 -> 4941;
4944 -> 4941;
4945 -> 4943;
4945 -> 4944;
4946 -> 4945;
4946 -> 4937;
4946 -> 4944;
4947 -> 4946;
4947 -> 4941;
4948 -> 4942;
4948 -> 4315;
4948 -> 4941;
4949 -> 4310;
4950 -> 4315;
4950 -> 4310;
4951 -> 4310;
4952 -> 4951;
4952 -> 4311;
4952 -> 4310;
4953 -> 4933;
4953 -> 4310;
4954 -> 4953;
4954 -> 4306;
4955 -> 4306;
4956 -> 4308;
4956 -> 4955;
4957 -> 4955;
4958 -> 4957;
4958 -> 4955;
4959 -> 4955;
4960 -> 4958;
4960 -> 4959;
4961 -> 4956;
4961 -> 4959;
4962 -> 4959;
4963 -> 4961;
4963 -> 4962;
4964 -> 4962;
4965 -> 4964;
4965 -> 4959;
4966 -> 4959;
4967 -> 4961;
4967 -> 4966;
4968 -> 4967;
4968 -> 4937;
4968 -> 4966;
4969 -> 4968;
4969 -> 4959;
4970 -> 4959;
4971 -> 4969;
4971 -> 4970;
4972 -> 0;
4972 -> 4970;
4973 -> 4972;
4973 -> 4959;
4974 -> 4965;
4974 -> 4973;
4974 -> 4959;
4975 -> 4959;
4976 -> 4961;
4976 -> 4975;
4977 -> 4975;
4978 -> 4976;
4978 -> 4977;
4979 -> 4978;
4979 -> 4937;
4979 -> 4977;
4980 -> 4979;
4980 -> 4975;
4981 -> 4975;
4982 -> 4980;
4983 -> 4980;
4984 -> 4982;
4984 -> 4983;
4984 -> 4980;
4985 -> 4982;
4985 -> 4984;
4986 -> 4985;
4986 -> 4959;
4987 -> 4959;
4988 -> 4986;
4988 -> 4987;
4989 -> 4987;
4990 -> 4988;
4990 -> 4989;
4991 -> 4990;
4991 -> 4937;
4991 -> 4989;
4992 -> 4987;
4993 -> 4991;
4994 -> 4991;
4994 -> 4993;
4995 -> 4994;
4995 -> 4937;
4995 -> 4993;
4996 -> 4995;
4997 -> 4995;
4998 -> 4987;
4999 -> 4998;
4999 -> 4959;
5000 -> 4959;
5001 -> 4974;
5001 -> 4999;
5001 -> 4959;
5002 -> 4959;
5003 -> 4959;
5004 -> 5003;
5004 -> 4306;
5005 -> 4954;
5005 -> 4937;
5005 -> 5004;
5005 -> 4306;
5006 -> 4954;
5006 -> 4937;
5006 -> 5005;
5007 -> 5005;
5008 -> 0;
5008 -> 5005;
5009 -> 5006;
5009 -> 5007;
5009 -> 5008;
5009 -> 4937;
5009 -> 4952;
5009 -> 5005;
5010 -> 5009;
5010 -> 5007;
5011 -> 5010;
5011 -> 5009;
5011 -> 5007;
5012 -> 5009;
5012 -> 5007;
5013 -> 0;
5013 -> 5007;
5014 -> 5009;
5014 -> 5013;
5014 -> 5011;
5014 -> 5005;
5015 -> 5014;
5015 -> 5005;
5016 -> 5005;
5017 -> 4308;
5017 -> 5016;
5018 -> 5016;
5019 -> 5017;
5019 -> 5014;
5019 -> 5018;
5019 -> 5016;
5020 -> 5019;
5021 -> 5017;
5021 -> 5014;
5021 -> 5019;
5022 -> 5020;
5022 -> 5019;
5023 -> 5019;
5024 -> 5022;
5024 -> 5023;
5025 -> 5017;
5025 -> 5023;
5026 -> 5023;
5027 -> 5023;
5028 -> 5025;
5028 -> 5014;
5028 -> 5023;
5029 -> 5023;
5030 -> 5025;
5030 -> 5029;
5031 -> 5030;
5031 -> 5023;
5032 -> 5023;
5033 -> 3056;
5033 -> 3055;
5033 -> 5032;
5033 -> 5023;
5034 -> 5023;
5035 -> 5026;
5035 -> 5034;
5035 -> 5023;
5036 -> 5035;
5036 -> 5023;
5037 -> 3056;
5037 -> 5036;
5038 -> 5026;
5038 -> 5023;
5039 -> 5037;
5039 -> 5019;
5040 -> 5019;
5041 -> 5020;
5041 -> 5039;
5042 -> 5039;
5043 -> 5041;
5043 -> 5042;
5044 -> 5017;
5044 -> 5042;
5045 -> 5042;
5046 -> 5044;
5046 -> 5045;
5047 -> 5046;
5047 -> 5039;
5047 -> 5045;
5048 -> 5047;
5048 -> 5042;
5049 -> 5043;
5049 -> 5020;
5049 -> 5042;
5050 -> 5039;
5051 -> 0;
5051 -> 5039;
5052 -> 5039;
5053 -> 5051;
5053 -> 5052;
5054 -> 5020;
5054 -> 5019;
5055 -> 5017;
5055 -> 5039;
5055 -> 5016;
5056 -> 5055;
5056 -> 5005;
5057 -> 5005;
5058 -> 5015;
5058 -> 5057;
5059 -> 5056;
5059 -> 5057;
5060 -> 5059;
5060 -> 5057;
5061 -> 5060;
5061 -> 5039;
5061 -> 5053;
5061 -> 5057;
5062 -> 5005;
5063 -> 5014;
5063 -> 4306;
5064 -> 4307;
5064 -> 4306;
5065 -> 4306;
5066 -> 5063;
5066 -> 5065;
5067 -> 5064;
5067 -> 5065;
5068 -> 4308;
5068 -> 5065;
5069 -> 5066;
5069 -> 5039;
5069 -> 5065;
5070 -> 5066;
5070 -> 5039;
5070 -> 5065;
5071 -> 5069;
5071 -> 5070;
5071 -> 5039;
5071 -> 5053;
5071 -> 5065;
5072 -> 2519;
5072 -> 5065;
5073 -> 5069;
5073 -> 5065;
5074 -> 5073;
5074 -> 5071;
5074 -> 5065;
5075 -> 5072;
5075 -> 2509;
5075 -> 2510;
5075 -> 2511;
5075 -> 2512;
5075 -> 2513;
5075 -> 2514;
5075 -> 2515;
5075 -> 5074;
5076 -> 5066;
5076 -> 5074;
5076 -> 5071;
5077 -> 5076;
5078 -> 5077;
5078 -> 5076;
5079 -> 5072;
5079 -> 5075;
5079 -> 5076;
5080 -> 5072;
5080 -> 5075;
5080 -> 5076;
5081 -> 5072;
5081 -> 5080;
5081 -> 5076;
5082 -> 5069;
5082 -> 5076;
5083 -> 4306;
5084 -> 5066;
5084 -> 4306;
5085 -> 5084;
5085 -> 4303;
5086 -> 4301;
5086 -> 5082;
5086 -> 4303;
5087 -> 5085;
5087 -> 4303;
5088 -> 4303;
5089 -> 5086;
5089 -> 5087;
5089 -> 5088;
5089 -> 5082;
5089 -> 4303;
5090 -> 4304;
5090 -> 5089;
5091 -> 5089;
5092 -> 5090;
5092 -> 5091;
5093 -> 4301;
5093 -> 5091;
5094 -> 5091;
5095 -> 5093;
5095 -> 5094;
5096 -> 5095;
5096 -> 5089;
5096 -> 5094;
5097 -> 5096;
5097 -> 5091;
5098 -> 5092;
5098 -> 4304;
5098 -> 5091;
5099 -> 5089;
5100 -> 0;
5100 -> 5089;
5101 -> 5089;
5102 -> 5100;
5102 -> 5101;
5103 -> 4304;
5103 -> 4303;
5104 -> 0;
5104 -> 4300;
5105 -> 4300;
5106 -> 4300;
5107 -> 5104;
5107 -> 5106;
5108 -> 5105;
5108 -> 5106;
5109 -> 4301;
5109 -> 5089;
5109 -> 5106;
5110 -> 5107;
5110 -> 5106;
5111 -> 5106;
5112 -> 5110;
5112 -> 5111;
5113 -> 5109;
5113 -> 5111;
5114 -> 5113;
5114 -> 5089;
5114 -> 5102;
5114 -> 5112;
5114 -> 5111;
5115 -> 5114;
5116 -> 4301;
5116 -> 5089;
5116 -> 4300;
5117 -> 5116;
5117 -> 4293;
5118 -> 5117;
5118 -> 4292;
5119 -> 4292;
5120 -> 5118;
5120 -> 5119;
5120 -> 5089;
5120 -> 5102;
5120 -> 4292;
5121 -> 4290;
5121 -> 5120;
5121 -> 4292;
5122 -> 5120;
5122 -> 4292;
5123 -> 4290;
5123 -> 5121;
5123 -> 4292;
5124 -> 5123;
5124 -> 4289;
5125 -> 5124;
5125 -> 4288;
5126 -> 4288;
5127 -> 5125;
5127 -> 5124;
5127 -> 5126;
5127 -> 4288;
5128 -> 0;
5128 -> 5127;
5129 -> 5127;
5130 -> 5128;
5130 -> 5129;
5131 -> 5128;
5131 -> 5129;
5132 -> 5131;
5132 -> 5129;
5133 -> 5130;
5133 -> 5131;
5133 -> 5129;
5134 -> 5130;
5134 -> 5129;
5135 -> 5129;
5136 -> 5134;
5136 -> 5135;
5137 -> 5131;
5137 -> 5135;
5138 -> 5136;
5138 -> 5135;
5139 -> 5135;
5140 -> 5135;
5141 -> 5138;
5141 -> 5140;
5142 -> 5139;
5142 -> 5140;
5143 -> 5137;
5143 -> 5140;
5144 -> 5141;
5144 -> 5140;
5145 -> 5141;
5145 -> 5140;
5146 -> 5142;
5146 -> 5140;
5147 -> 5140;
5148 -> 5145;
5148 -> 5147;
5149 -> 5146;
5149 -> 5147;
5150 -> 5143;
5150 -> 5147;
5151 -> 5150;
5151 -> 5148;
5151 -> 5147;
5152 -> 5128;
5152 -> 5129;
5153 -> 2140;
5153 -> 5129;
5154 -> 5128;
5154 -> 5153;
5154 -> 5151;
5154 -> 2136;
5154 -> 2139;
5154 -> 2135;
5154 -> 5127;
5155 -> 5128;
5155 -> 5129;
5156 -> 5155;
5156 -> 5154;
5156 -> 5129;
5157 -> 5129;
5158 -> 5155;
5158 -> 5157;
5159 -> 5157;
5160 -> 5158;
5160 -> 5159;
5161 -> 0;
5161 -> 5159;
5162 -> 5161;
5162 -> 5157;
5163 -> 5158;
5163 -> 5157;
5164 -> 5157;
5165 -> 5163;
5165 -> 5164;
5166 -> 5165;
5166 -> 5154;
5166 -> 5164;
5167 -> 5166;
5167 -> 5157;
5168 -> 5157;
5169 -> 5167;
5169 -> 5168;
5169 -> 5157;
5170 -> 5169;
5170 -> 5157;
5171 -> 5170;
5172 -> 5171;
5173 -> 5172;
5173 -> 5154;
5173 -> 5171;
5174 -> 5173;
5174 -> 5129;
5175 -> 5129;
5176 -> 5129;
5177 -> 5156;
5177 -> 5176;
5178 -> 5174;
5178 -> 5176;
5179 -> 5175;
5179 -> 5176;
5180 -> 5177;
5180 -> 5154;
5180 -> 5176;
5181 -> 5177;
5181 -> 5154;
5181 -> 5176;
5182 -> 5178;
5182 -> 5176;
5183 -> 5176;
5184 -> 5180;
5184 -> 5183;
5185 -> 5181;
5185 -> 5183;
5186 -> 5182;
5186 -> 5183;
5187 -> 5179;
5187 -> 5183;
5188 -> 5183;
5189 -> 5184;
5189 -> 5188;
5189 -> 5183;
5190 -> 5184;
5190 -> 5189;
5191 -> 5189;
5192 -> 5190;
5192 -> 5191;
5193 -> 5186;
5193 -> 5191;
5194 -> 5192;
5194 -> 5191;
5195 -> 5191;
5196 -> 5194;
5196 -> 5195;
5197 -> 5193;
5197 -> 5195;
5198 -> 5195;
5199 -> 5196;
5199 -> 5198;
5199 -> 5195;
5200 -> 5197;
5200 -> 5154;
5200 -> 5195;
5201 -> 5196;
5201 -> 5195;
5202 -> 5200;
5202 -> 5201;
5202 -> 5195;
5203 -> 5193;
5203 -> 5202;
5203 -> 5191;
5204 -> 5185;
5204 -> 5183;
5205 -> 5203;
5205 -> 5183;
5206 -> 5204;
5206 -> 5183;
5207 -> 5187;
5207 -> 5183;
5208 -> 5183;
5209 -> 5206;
5209 -> 5208;
5209 -> 5183;
5210 -> 5183;
5211 -> 5205;
5211 -> 5210;
5211 -> 5183;
5212 -> 5205;
5212 -> 5207;
5212 -> 5183;
5213 -> 5206;
5213 -> 5207;
5213 -> 5183;
5214 -> 5128;
5214 -> 5175;
5214 -> 5203;
5214 -> 5212;
5214 -> 5213;
5214 -> 5127;
5215 -> 5129;
5216 -> 5128;
5216 -> 5215;
5217 -> 0;
5217 -> 5215;
5218 -> 5217;
5218 -> 5129;
5219 -> 5128;
5219 -> 5157;
5220 -> 5219;
5220 -> 5164;
5221 -> 5220;
5221 -> 5214;
5221 -> 5164;
5222 -> 5128;
5222 -> 5215;
5223 -> 0;
5223 -> 5215;
5224 -> 5223;
5224 -> 5129;
5225 -> 5219;
5225 -> 5164;
5226 -> 5128;
5226 -> 5129;
5227 -> 5128;
5227 -> 5129;
5228 -> 5129;
5229 -> 5129;
5230 -> 5226;
5230 -> 5229;
5231 -> 5230;
5231 -> 5221;
5231 -> 5229;
5232 -> 5231;
5232 -> 5129;
5233 -> 5129;
5234 -> 5227;
5234 -> 5233;
5235 -> 5234;
5235 -> 5221;
5235 -> 5233;
5236 -> 5235;
5236 -> 5129;
5237 -> 5232;
5237 -> 5236;
5237 -> 5129;
5238 -> 5237;
5239 -> 5238;
5239 -> 5237;
5240 -> 5237;
5241 -> 5239;
5242 -> 5241;
5242 -> 5239;
5243 -> 5239;
5244 -> 5237;
5245 -> 5244;
5245 -> 5237;
5246 -> 5237;
5247 -> 5246;
5247 -> 5237;
5248 -> 5245;
5248 -> 5247;
5248 -> 5237;
5249 -> 5237;
5250 -> 5248;
5250 -> 5249;
5250 -> 5237;
5251 -> 5248;
5251 -> 5237;
5252 -> 5138;
5252 -> 5140;
5253 -> 5139;
5253 -> 5140;
5254 -> 5137;
5254 -> 5140;
5255 -> 5252;
5255 -> 5140;
5256 -> 5252;
5256 -> 5140;
5257 -> 5252;
5257 -> 5140;
5258 -> 5253;
5258 -> 5140;
5259 -> 5140;
5260 -> 5257;
5260 -> 5259;
5261 -> 5258;
5261 -> 5259;
5262 -> 5254;
5262 -> 5259;
5263 -> 5262;
5263 -> 5260;
5263 -> 5259;
5264 -> 5128;
5264 -> 5263;
5264 -> 5251;
5264 -> 5127;
5265 -> 5264;
5265 -> 5208;
5265 -> 5183;
5266 -> 5264;
5266 -> 5210;
5266 -> 5183;
5267 -> 5264;
5268 -> 5267;
5268 -> 5264;
5269 -> 5264;
5270 -> 5268;
5271 -> 5270;
5271 -> 5268;
5272 -> 5268;
5273 -> 5264;
5274 -> 5267;
5274 -> 5273;
5274 -> 5264;
5275 -> 5267;
5275 -> 5208;
5275 -> 5183;
5276 -> 5267;
5276 -> 5210;
5276 -> 5183;
5277 -> 5267;
5278 -> 5277;
5279 -> 5278;
5279 -> 5277;
5280 -> 5277;
5281 -> 5267;
5282 -> 5129;
5283 -> 5226;
5283 -> 5282;
5284 -> 5283;
5284 -> 5267;
5284 -> 5282;
5285 -> 5284;
5285 -> 5129;
5286 -> 5129;
5287 -> 5227;
5287 -> 5286;
5288 -> 5287;
5288 -> 5267;
5288 -> 5286;
5289 -> 5288;
5289 -> 5129;
5290 -> 5285;
5290 -> 5289;
5290 -> 5129;
5291 -> 5290;
5291 -> 5208;
5291 -> 5183;
5292 -> 5290;
5292 -> 5210;
5292 -> 5183;
5293 -> 5290;
5294 -> 5293;
5295 -> 5294;
5295 -> 5293;
5296 -> 5293;
5297 -> 5290;
5298 -> 4283;
5298 -> 5290;
5298 -> 5127;
5299 -> 5290;
5299 -> 5127;
5300 -> 4288;
5301 -> 4283;
5301 -> 5298;
5301 -> 5300;
5302 -> 5301;
5302 -> 5298;
5302 -> 5300;
5303 -> 3434;
5303 -> 5300;
5304 -> 4288;
5305 -> 5290;
5305 -> 4288;
5306 -> 5305;
5306 -> 1;
5307 -> 5306;
5307 -> 5290;
5307 -> 5298;
5307 -> 5302;
5307 -> 1;
5308 -> 1;
5309 -> 5307;
5309 -> 1;
5310 -> 1;
5311 -> 5307;
5311 -> 5310;
5311 -> 1;
5312 -> 1;
5313 -> 5311;
5313 -> 5312;
5314 -> 5310;
5314 -> 5312;
5315 -> 5310;
5315 -> 5312;
5316 -> 196;
5316 -> 5312;
5317 -> 0;
5317 -> 5312;
5318 -> 5312;
5319 -> 5313;
5319 -> 5318;
5320 -> 0;
5320 -> 5318;
5321 -> 5320;
5321 -> 5312;
5322 -> 5314;
5322 -> 5312;
5323 -> 5312;
5324 -> 5313;
5324 -> 5323;
5325 -> 5324;
5325 -> 5312;
5326 -> 5322;
5326 -> 5325;
5326 -> 5312;
5327 -> 5315;
5327 -> 5312;
5328 -> 5312;
5329 -> 5313;
5329 -> 5328;
5330 -> 5328;
5331 -> 5329;
5331 -> 5330;
5332 -> 0;
5332 -> 5330;
5333 -> 5332;
5333 -> 0;
5333 -> 5328;
5334 -> 5328;
5335 -> 5333;
5335 -> 5334;
5335 -> 5328;
5336 -> 5335;
5336 -> 5312;
5337 -> 5327;
5337 -> 5336;
5337 -> 5312;
5338 -> 1;
5339 -> 5307;
5339 -> 5338;
5339 -> 1;
5340 -> 1;
5341 -> 5339;
5341 -> 5340;
5342 -> 5338;
5342 -> 5340;
5343 -> 5338;
5343 -> 5340;
5344 -> 196;
5344 -> 5340;
5345 -> 0;
5345 -> 5340;
5346 -> 5340;
5347 -> 5341;
5347 -> 5346;
5348 -> 0;
5348 -> 5346;
5349 -> 5348;
5349 -> 5340;
5350 -> 5342;
5350 -> 5340;
5351 -> 5340;
5352 -> 5341;
5352 -> 5351;
5353 -> 5352;
5353 -> 5340;
5354 -> 5350;
5354 -> 5353;
5354 -> 5340;
5355 -> 5343;
5355 -> 5340;
5356 -> 5340;
5357 -> 5341;
5357 -> 5356;
5358 -> 5356;
5359 -> 5357;
5359 -> 5358;
5360 -> 0;
5360 -> 5358;
5361 -> 5360;
5361 -> 0;
5361 -> 5356;
5362 -> 5356;
5363 -> 5361;
5363 -> 5362;
5363 -> 5356;
5364 -> 5363;
5364 -> 5340;
5365 -> 5355;
5365 -> 5364;
5365 -> 5340;
5366 -> 1;
5367 -> 5307;
5367 -> 5366;
5367 -> 1;
5368 -> 1;
5369 -> 5367;
5369 -> 5368;
5370 -> 5366;
5370 -> 5368;
5371 -> 5366;
5371 -> 5368;
5372 -> 196;
5372 -> 5368;
5373 -> 0;
5373 -> 5368;
5374 -> 5368;
5375 -> 5369;
5375 -> 5374;
5376 -> 0;
5376 -> 5374;
5377 -> 5376;
5377 -> 5368;
5378 -> 5370;
5378 -> 5368;
5379 -> 5368;
5380 -> 5369;
5380 -> 5379;
5381 -> 5380;
5381 -> 5368;
5382 -> 5378;
5382 -> 5381;
5382 -> 5368;
5383 -> 5371;
5383 -> 5368;
5384 -> 5368;
5385 -> 5369;
5385 -> 5384;
5386 -> 5384;
5387 -> 5385;
5387 -> 5386;
5388 -> 0;
5388 -> 5386;
5389 -> 5388;
5389 -> 0;
5389 -> 5384;
5390 -> 5384;
5391 -> 5389;
5391 -> 5390;
5391 -> 5384;
5392 -> 5391;
5392 -> 5368;
5393 -> 5383;
5393 -> 5392;
5393 -> 5368;
}