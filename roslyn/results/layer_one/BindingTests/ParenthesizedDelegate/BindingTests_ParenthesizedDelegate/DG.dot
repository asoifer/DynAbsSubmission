digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 706572"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 706573"];
3 [label="param BindingTests(this) 706574"];
4 [label="'C' 706575"];
5 [label="DefaultTypeName = 'C' 706576"];
6 [label="'M' 706577"];
7 [label="DefaultMethodName = 'M' 706578"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 706579"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 706580"];
10 [label="param CompilingTestBase(this) 706581"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 706582"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 706583"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 706584"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 706585"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 706586"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 706587"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 706588"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 706589"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 706590"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 706591"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 706592"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 706593"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 706594"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 706595"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 706596"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 706597"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 706598"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 706599"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 706600"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 706601"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 706602"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 706603"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 706604"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 706605"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 706606"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 706607"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 706608"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 706609"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 706610"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 706611"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 706612"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 706613"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 706614"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 706615"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 706616"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 706617"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 706618"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 706619"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 706620"];
50 [label="LazyThreadSafetyMode.PublicationOnly 706621"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 706622"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 706623"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 706624"];
54 [label="LazyThreadSafetyMode.PublicationOnly 706625"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 706626"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 706627"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 706628"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 706629"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 706630"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 706631"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 706632"];
62 [label="LazyThreadSafetyMode.PublicationOnly 706633"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 706634"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 706635"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 706636"];
66 [label="LazyThreadSafetyMode.PublicationOnly 706637"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 706638"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 706639"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 706640"];
70 [label="LazyThreadSafetyMode.PublicationOnly 706641"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 706642"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 706643"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 706644"];
74 [label="LazyThreadSafetyMode.PublicationOnly 706645"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706646"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706647"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 706648"];
78 [label="LazyThreadSafetyMode.PublicationOnly 706649"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706650"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706651"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 706652"];
82 [label="LazyThreadSafetyMode.PublicationOnly 706653"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706654"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706655"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 706656"];
86 [label="LazyThreadSafetyMode.PublicationOnly 706657"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706658"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706659"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 706660"];
90 [label="LazyThreadSafetyMode.PublicationOnly 706661"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706662"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706663"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 706664"];
94 [label="LazyThreadSafetyMode.PublicationOnly 706665"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706666"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706667"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 706668"];
98 [label="LazyThreadSafetyMode.PublicationOnly 706669"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706670"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706671"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 706672"];
102 [label="LazyThreadSafetyMode.PublicationOnly 706673"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 706674"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 706675"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 706676"];
106 [label="LazyThreadSafetyMode.PublicationOnly 706677"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 706678"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 706679"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 706680"];
110 [label="LazyThreadSafetyMode.PublicationOnly 706681"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706682"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706683"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 706684"];
114 [label="LazyThreadSafetyMode.PublicationOnly 706685"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706686"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706687"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 706688"];
118 [label="LazyThreadSafetyMode.PublicationOnly 706689"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706690"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706691"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 706692"];
122 [label="LazyThreadSafetyMode.PublicationOnly 706693"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706694"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706695"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 706696"];
126 [label="LazyThreadSafetyMode.PublicationOnly 706697"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 706698"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 706699"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 706700"];
130 [label="LazyThreadSafetyMode.PublicationOnly 706701"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706702"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706703"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 706704"];
134 [label="LazyThreadSafetyMode.PublicationOnly 706705"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706706"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706707"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 706708"];
138 [label="LazyThreadSafetyMode.PublicationOnly 706709"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706710"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706711"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 706712"];
142 [label="LazyThreadSafetyMode.PublicationOnly 706713"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706714"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706715"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 706716"];
146 [label="LazyThreadSafetyMode.PublicationOnly 706717"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706718"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706719"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 706720"];
150 [label="LazyThreadSafetyMode.PublicationOnly 706721"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706722"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706723"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 706724"];
154 [label="LazyThreadSafetyMode.PublicationOnly 706725"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706726"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706727"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 706728"];
158 [label="LazyThreadSafetyMode.PublicationOnly 706729"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706730"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706731"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 706732"];
162 [label="LazyThreadSafetyMode.PublicationOnly 706733"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706734"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706735"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 706736"];
166 [label="LazyThreadSafetyMode.PublicationOnly 706737"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706738"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706739"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 706740"];
170 [label="LazyThreadSafetyMode.PublicationOnly 706741"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706742"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706743"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 706744"];
174 [label="LazyThreadSafetyMode.PublicationOnly 706745"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706746"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706747"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 706748"];
178 [label="LazyThreadSafetyMode.PublicationOnly 706749"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706750"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 706751"];
181 [label="@'R:\\Invalid.dll' 706752"];
182 [label="fullPath: @'R:\\Invalid.dll' 706753"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 706754"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 706755"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 706756"];
186 [label="MscorlibRef_v4_0_30316_17626 706757"];
187 [label="Net451.mscorlib 706758"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 706759"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 706760"];
190 [label="'/*<bind>*/' 706761"];
191 [label="StartString = '/*<bind>*/' 706762"];
192 [label="'/*</bind>*/' 706763"];
193 [label="EndString = '/*</bind>*/' 706764"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 706765"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 706766"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 706767"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 706768"];
198 [label="param CSharpTestBase(this) 706769"];
199 [label="param CommonTestBase(this) 706770"];
200 [label="param TestBase(this) 706771"];
201 [label="_temp 706772"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 706773"];
203 [label="param ParenthesizedDelegate(this) 706774"];
204 [label="var source =\n@'class C\n{\n    System.Action<object> F = null;\n    void M()\n    {\n        ((this.F))(null);\n        (new C().F)(null, null);\n    }\n}'; 706775"];
205 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 706776"];
206 [label="source 706777"];
207 [label="param operator(string source) 706778"];
208 [label="source 706779"];
209 [label="new CSharpTestSource(source) 706780"];
210 [label="param CSharpTestSource(object value) 706781"];
211 [label="param CSharpTestSource(this) 706782"];
212 [label="Value 706783"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 706784"];
214 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 706785"];
215 [label="CreateCompilation(source) 706786"];
216 [label="param CreateCompilation(CSharpTestSource source) 706787"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 706788"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 706789"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 706790"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 706791"];
221 [label="param CreateCompilation(string assemblyName = '') 706792"];
222 [label="param CreateCompilation(string sourceFileName = '') 706793"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 706794"];
224 [label="source 706795"];
225 [label="targetFramework 706796"];
226 [label="references 706797"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 706798"];
228 [label="param GetReferences(TargetFramework tf) 706799"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 706800"];
230 [label="var references = GetReferences(tf); 706801"];
231 [label="GetReferences(tf) 706802"];
232 [label="param GetReferences(TargetFramework targetFramework) 706803"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 706804"];
234 [label="StandardReferences 706805"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 706806"];
236 [label="Mscorlib46ExtendedReferences 706807"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 706808"];
238 [label="TestBase.ValueTupleRef 706809"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 706810"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 706811"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 706812"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 706813"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 706814"];
244 [label="return references; 706815"];
245 [label="options 706816"];
246 [label="parseOptions 706817"];
247 [label="assemblyName 706818"];
248 [label="sourceFileName 706819"];
249 [label="skipUsesIsNullable 706820"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 706821"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 706822"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 706823"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 706824"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 706825"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 706826"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 706827"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 706828"];
258 [label="source 706829"];
259 [label="references 706830"];
260 [label="options 706831"];
261 [label="parseOptions 706832"];
262 [label="assemblyName 706833"];
263 [label="sourceFileName 706834"];
264 [label="skipUsesIsNullable 706835"];
265 [label="null 706836"];
266 [label="experimentalFeature: null 706837"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 706838"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 706839"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 706840"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 706841"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 706842"];
272 [label="param CreateCompilationCore(string assemblyName) 706843"];
273 [label="param CreateCompilationCore(string sourceFileName) 706844"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 706845"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 706846"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 706847"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 706848"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 706849"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 706850"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 706851"];
281 [label="param GetSyntaxTrees(this) 706852"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 706853"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 706854"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 706855"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 706856"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 706857"];
287 [label="param Parse(string text) 706858"];
288 [label="param Parse(string filename = '') 706859"];
289 [label="param Parse(CSharpParseOptions options = null) 706860"];
290 [label="param Parse(Encoding encoding = null) 706861"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 706862"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 706863"];
293 [label="kind: SourceCodeKind.Regular 706864"];
294 [label="documentationMode: DocumentationMode.Parse 706865"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 706866"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 706867"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 706868"];
298 [label="SourceCodeKind.Script 706869"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 706870"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 706871"];
301 [label="LanguageVersion.CSharp6 706872"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 706873"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 706874"];
304 [label="LanguageVersion.CSharp7 706875"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 706876"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 706877"];
307 [label="LanguageVersion.CSharp7_1 706878"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 706879"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 706880"];
310 [label="LanguageVersion.CSharp7_2 706881"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 706882"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 706883"];
313 [label="LanguageVersion.CSharp7_3 706884"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 706885"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 706886"];
316 [label="LanguageVersion.Default 706887"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 706888"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 706889"];
319 [label="LanguageVersion.Preview 706890"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 706891"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 706892"];
322 [label="LanguageVersion.CSharp8 706893"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706894"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706895"];
325 [label="LanguageVersion.CSharp9 706896"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 706897"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 706898"];
328 [label="DocumentationMode.Diagnose 706899"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 706900"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 706901"];
331 [label="Regular 706902"];
332 [label="'UseLegacyStrongNameProvider' 706903"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 706904"];
334 [label="param WithFeature(this CSharpParseOptions options) 706905"];
335 [label="param WithFeature(string feature) 706906"];
336 [label="param WithFeature(string value = 'true') 706907"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 706908"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 706909"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 706910"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 706911"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 706912"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 706913"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 706914"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 706915"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 706916"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 706917"];
347 [label="1 706918"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 706919"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 706920"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 706921"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 706922"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 706923"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 706924"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 706925"];
355 [label="LanguageVersion.CSharp8 706926"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706927"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706928"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 706929"];
359 [label="new SmallDictionary<string, string> { } 706930"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 706931"];
361 [label="kind: SourceCodeKind.Regular 706932"];
362 [label="documentationMode: DocumentationMode.None 706933"];
363 [label="languageVersion: LanguageVersion.Preview 706934"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 706935"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 706936"];
366 [label="s_experimentalFeatures 706937"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 706938"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 706939"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 706940"];
370 [label="'testV7SwitchBinder' 706941"];
371 [label="'true' 706942"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 706943"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 706944"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 706945"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 706946"];
376 [label="RegularWithRecursivePatterns = Regular8 706947"];
377 [label="RegularWithoutPatternCombinators = Regular8 706948"];
378 [label="RegularWithPatternCombinators = RegularPreview 706949"];
379 [label="OutputKind.DynamicallyLinkedLibrary 706950"];
380 [label="OptimizationLevel.Release 706951"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 706952"];
382 [label="param CreateTestOptions(OutputKind outputKind) 706953"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706954"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 706955"];
385 [label="outputKind 706956"];
386 [label="optimizationLevel: optimizationLevel 706957"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 706958"];
388 [label="allowUnsafe: allowUnsafe 706959"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706960"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706961"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 706962"];
392 [label="OutputKind.ConsoleApplication 706963"];
393 [label="OptimizationLevel.Release 706964"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 706965"];
395 [label="param CreateTestOptions(OutputKind outputKind) 706966"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706967"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 706968"];
398 [label="outputKind 706969"];
399 [label="optimizationLevel: optimizationLevel 706970"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 706971"];
401 [label="allowUnsafe: allowUnsafe 706972"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706973"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706974"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 706975"];
405 [label="true 706976"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 706977"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 706978"];
408 [label="true 706979"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 706980"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 706981"];
411 [label="OutputKind.DynamicallyLinkedLibrary 706982"];
412 [label="OptimizationLevel.Debug 706983"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 706984"];
414 [label="param CreateTestOptions(OutputKind outputKind) 706985"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706986"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 706987"];
417 [label="outputKind 706988"];
418 [label="optimizationLevel: optimizationLevel 706989"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 706990"];
420 [label="allowUnsafe: allowUnsafe 706991"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706992"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706993"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 706994"];
424 [label="OutputKind.ConsoleApplication 706995"];
425 [label="OptimizationLevel.Debug 706996"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 706997"];
427 [label="param CreateTestOptions(OutputKind outputKind) 706998"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706999"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 707000"];
430 [label="outputKind 707001"];
431 [label="optimizationLevel: optimizationLevel 707002"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 707003"];
433 [label="allowUnsafe: allowUnsafe 707004"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707005"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707006"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 707007"];
437 [label="OutputKind.WindowsRuntimeMetadata 707008"];
438 [label="OptimizationLevel.Release 707009"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 707010"];
440 [label="param CreateTestOptions(OutputKind outputKind) 707011"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707012"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 707013"];
443 [label="outputKind 707014"];
444 [label="optimizationLevel: optimizationLevel 707015"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 707016"];
446 [label="allowUnsafe: allowUnsafe 707017"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707018"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707019"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 707020"];
450 [label="OutputKind.WindowsRuntimeMetadata 707021"];
451 [label="OptimizationLevel.Debug 707022"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 707023"];
453 [label="param CreateTestOptions(OutputKind outputKind) 707024"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707025"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 707026"];
456 [label="outputKind 707027"];
457 [label="optimizationLevel: optimizationLevel 707028"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 707029"];
459 [label="allowUnsafe: allowUnsafe 707030"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707031"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707032"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 707033"];
463 [label="OutputKind.NetModule 707034"];
464 [label="OptimizationLevel.Release 707035"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 707036"];
466 [label="param CreateTestOptions(OutputKind outputKind) 707037"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707038"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 707039"];
469 [label="outputKind 707040"];
470 [label="optimizationLevel: optimizationLevel 707041"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 707042"];
472 [label="allowUnsafe: allowUnsafe 707043"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707044"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707045"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 707046"];
476 [label="OutputKind.NetModule 707047"];
477 [label="OptimizationLevel.Debug 707048"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 707049"];
479 [label="param CreateTestOptions(OutputKind outputKind) 707050"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707051"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 707052"];
482 [label="outputKind 707053"];
483 [label="optimizationLevel: optimizationLevel 707054"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 707055"];
485 [label="allowUnsafe: allowUnsafe 707056"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707057"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707058"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 707059"];
489 [label="true 707060"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 707061"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 707062"];
492 [label="true 707063"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 707064"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 707065"];
495 [label="true 707066"];
496 [label="DebugDll.WithAllowUnsafe(true) 707067"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 707068"];
498 [label="true 707069"];
499 [label="DebugExe.WithAllowUnsafe(true) 707070"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 707071"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707072"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707073"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707074"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707075"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707076"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707077"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707078"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707079"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707080"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707081"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707082"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707083"];
513 [label="DebugInformationFormat.Pdb 707084"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 707085"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 707086"];
516 [label="options = TestOptions.Regular; 707087"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707088"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707089"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707090"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707091"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707092"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707093"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707094"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707095"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707096"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707097"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 707098"];
528 [label="param CheckSerializable(SyntaxTree tree) 707099"];
529 [label="var stream = new MemoryStream(); 707100"];
530 [label="var root = tree.GetRoot(); 707101"];
531 [label="var root = tree.GetRoot(); 707102"];
532 [label="root.SerializeTo(stream); 707103"];
533 [label="root.SerializeTo(stream); 707104"];
534 [label="root.SerializeTo(stream); 707105"];
535 [label="stream.Position = 0; 707106"];
536 [label="stream.Position 707107"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 707108"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 707109"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 707110"];
540 [label="return tree; 707111"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 707112"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 707113"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 707114"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 707115"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 707116"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 707117"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 707118"];
548 [label="hasTopLevelStatements 707119"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 707120"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 707121"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 707122"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 707123"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 707124"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 707125"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 707126"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 707127"];
557 [label="return; 707128"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 707129"];
559 [label="var compilation = createCompilationLambda(); 707130"];
560 [label="var compilation = createCompilationLambda(); 707131"];
561 [label="return Guid.NewGuid().ToString('D'); 707132"];
562 [label="var compilation = createCompilationLambda(); 707133"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 707134"];
564 [label="IsNullableEnabled(compilation) 707135"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 707136"];
566 [label="var trees = compilation.SyntaxTrees; 707137"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 707138"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 707139"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 707140"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 707141"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 707142"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 707143"];
573 [label="return compilation; 707144"];
574 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 707145"];
575 [label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)') 707146"];
576 [label="param Diagnostic(object code) 707147"];
577 [label="param Diagnostic(string squiggledText = null) 707148"];
578 [label="param Diagnostic(object[] arguments = null) 707149"];
579 [label="param Diagnostic(LinePosition? startLocation = null) 707150"];
580 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 707151"];
581 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 707152"];
582 [label="param Diagnostic(bool isSuppressed = false) 707153"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707154"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707155"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707156"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707157"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707158"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707159"];
589 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707160"];
590 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 707161"];
591 [label="param Diagnostic(object code) 707162"];
592 [label="param Diagnostic(string squiggledText = null) 707163"];
593 [label="param Diagnostic(object[] arguments = null) 707164"];
594 [label="param Diagnostic(LinePosition? startLocation = null) 707165"];
595 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 707166"];
596 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 707167"];
597 [label="param Diagnostic(bool isSuppressed = false) 707168"];
598 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 707169"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707170"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707171"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707172"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707173"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707174"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707175"];
605 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707176"];
606 [label="{ } 707177"];
607 [label="None = { } 707178"];
608 [label="null 707179"];
609 [label="Any = null 707180"];
610 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 707181"];
611 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 707182"];
612 [label="param DiagnosticDescription(object code) 707183"];
613 [label="param DiagnosticDescription(bool isWarningAsError) 707184"];
614 [label="param DiagnosticDescription(string squiggledText) 707185"];
615 [label="param DiagnosticDescription(object[] arguments) 707186"];
616 [label="param DiagnosticDescription(LinePosition? startLocation) 707187"];
617 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 707188"];
618 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 707189"];
619 [label="param DiagnosticDescription(Type errorCodeType = null) 707190"];
620 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 707191"];
621 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 707192"];
622 [label="param DiagnosticDescription(bool isSuppressed = false) 707193"];
623 [label="param DiagnosticDescription(this) 707194"];
624 [label="_code 707195"];
625 [label="_isWarningAsError 707196"];
626 [label="_isSuppressed 707197"];
627 [label="_squiggledText 707198"];
628 [label="_arguments 707199"];
629 [label="_startPosition 707200"];
630 [label="_argumentOrderDoesNotMatter 707201"];
631 [label="_errorCodeType 707202"];
632 [label="_ignoreArgumentsWhenComparing 707203"];
633 [label="_defaultSeverityOpt 707204"];
634 [label="_effectiveSeverityOpt 707205"];
635 [label="_syntaxPredicate 707206"];
636 [label="_showPredicate 707207"];
637 [label="_location 707208"];
638 [label="_argumentsAsStrings 707209"];
639 [label="_code 707210"];
640 [label="_isWarningAsError 707211"];
641 [label="_squiggledText 707212"];
642 [label="_arguments 707213"];
643 [label="_startPosition 707214"];
644 [label="_syntaxPredicate 707215"];
645 [label="_argumentOrderDoesNotMatter 707216"];
646 [label="_errorCodeType = errorCodeType ?? code.GetType(); 707217"];
647 [label="_errorCodeType 707218"];
648 [label="_defaultSeverityOpt 707219"];
649 [label="_effectiveSeverityOpt 707220"];
650 [label="_isSuppressed 707221"];
651 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 707222"];
652 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 707223"];
653 [label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2') 707224"];
654 [label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2') 707225"];
655 [label="param WithArguments(params object[] arguments) 707226"];
656 [label="param WithArguments(this) 707227"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707228"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707229"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707230"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707231"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707232"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707233"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707234"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707235"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707236"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707237"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707238"];
668 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 707239"];
669 [label="param DiagnosticDescription(object code) 707240"];
670 [label="param DiagnosticDescription(bool isWarningAsError) 707241"];
671 [label="param DiagnosticDescription(string squiggledText) 707242"];
672 [label="param DiagnosticDescription(object[] arguments) 707243"];
673 [label="param DiagnosticDescription(LinePosition? startLocation) 707244"];
674 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 707245"];
675 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 707246"];
676 [label="param DiagnosticDescription(Type errorCodeType = null) 707247"];
677 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 707248"];
678 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 707249"];
679 [label="param DiagnosticDescription(bool isSuppressed = false) 707250"];
680 [label="param DiagnosticDescription(this) 707251"];
681 [label="_code 707252"];
682 [label="_isWarningAsError 707253"];
683 [label="_isSuppressed 707254"];
684 [label="_squiggledText 707255"];
685 [label="_arguments 707256"];
686 [label="_startPosition 707257"];
687 [label="_argumentOrderDoesNotMatter 707258"];
688 [label="_errorCodeType 707259"];
689 [label="_ignoreArgumentsWhenComparing 707260"];
690 [label="_defaultSeverityOpt 707261"];
691 [label="_effectiveSeverityOpt 707262"];
692 [label="_syntaxPredicate 707263"];
693 [label="_showPredicate 707264"];
694 [label="_location 707265"];
695 [label="_argumentsAsStrings 707266"];
696 [label="_arguments 707267"];
697 [label="_argumentOrderDoesNotMatter 707268"];
698 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 707269"];
699 [label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9) 707270"];
700 [label="param WithLocation(int line) 707271"];
701 [label="param WithLocation(int column) 707272"];
702 [label="param WithLocation(this) 707273"];
703 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707274"];
704 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707275"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707276"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707277"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707278"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707279"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707280"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707281"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707282"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707283"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707284"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707285"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707286"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707287"];
717 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 707288"];
718 [label="param DiagnosticDescription(object code) 707289"];
719 [label="param DiagnosticDescription(bool isWarningAsError) 707290"];
720 [label="param DiagnosticDescription(string squiggledText) 707291"];
721 [label="param DiagnosticDescription(object[] arguments) 707292"];
722 [label="param DiagnosticDescription(LinePosition? startLocation) 707293"];
723 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 707294"];
724 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 707295"];
725 [label="param DiagnosticDescription(Type errorCodeType = null) 707296"];
726 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 707297"];
727 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 707298"];
728 [label="param DiagnosticDescription(bool isSuppressed = false) 707299"];
729 [label="param DiagnosticDescription(this) 707300"];
730 [label="_code 707301"];
731 [label="_isWarningAsError 707302"];
732 [label="_isSuppressed 707303"];
733 [label="_squiggledText 707304"];
734 [label="_arguments 707305"];
735 [label="_startPosition 707306"];
736 [label="_argumentOrderDoesNotMatter 707307"];
737 [label="_errorCodeType 707308"];
738 [label="_ignoreArgumentsWhenComparing 707309"];
739 [label="_defaultSeverityOpt 707310"];
740 [label="_effectiveSeverityOpt 707311"];
741 [label="_syntaxPredicate 707312"];
742 [label="_showPredicate 707313"];
743 [label="_location 707314"];
744 [label="_argumentsAsStrings 707315"];
745 [label="_startPosition 707316"];
746 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)); 707317"];
747 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)) 707318"];
748 [label="CreateCompilation(source).VerifyDiagnostics(\n                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action<object>', '2').WithLocation(7, 9)) 707319"];
749 [label="param VerifyDiagnostics(this TCompilation c) 707320"];
750 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 707321"];
751 [label="var diagnostics = c.GetDiagnostics(); 707322"];
752 [label="null 707323"];
753 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 707324"];
754 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 707325"];
755 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 707326"];
756 [label="null 707327"];
757 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 707328"];
758 [label="param Imports(CSharpCompilation compilation) 707329"];
759 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 707330"];
760 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 707331"];
761 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 707332"];
762 [label="param Imports(DiagnosticBag diagnostics) 707333"];
763 [label="param Imports(this) 707334"];
764 [label="_compilation 707335"];
765 [label="_diagnostics 707336"];
766 [label="UsingAliases 707337"];
767 [label="Debug.Assert(usingAliases != null); 707338"];
768 [label="Debug.Assert(usingAliases != null); 707339"];
769 [label="Debug.Assert(!usings.IsDefault); 707340"];
770 [label="Debug.Assert(!externs.IsDefault); 707341"];
771 [label="_compilation 707342"];
772 [label="this.UsingAliases 707343"];
773 [label="this.Usings 707344"];
774 [label="_diagnostics 707345"];
775 [label="this.ExternAliases 707346"];
776 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 707347"];
777 [label="var diagnostics = c.GetDiagnostics(); 707348"];
778 [label="param FromGlobalUsings(CSharpCompilation compilation) 707349"];
779 [label="var usings = compilation.Options.Usings; 707350"];
780 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 707351"];
781 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 707352"];
782 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 707353"];
783 [label="return Empty; 707354"];
784 [label="var diagnostics = c.GetDiagnostics(); 707355"];
785 [label="param Complete(CancellationToken cancellationToken) 707356"];
786 [label="param Complete(this) 707357"];
787 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 707358"];
788 [label="cancellationToken.ThrowIfCancellationRequested(); 707359"];
789 [label="var incompletePart = _state.NextIncompletePart; 707360"];
790 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 707361"];
791 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 707362"];
792 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 707363"];
793 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 707364"];
794 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 707365"];
795 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 707366"];
796 [label="Validate() 707367"];
797 [label="param Validate(this) 707368"];
798 [label="if (this == Empty)\n            {\n                return;\n            } 707369"];
799 [label="return; 707370"];
800 [label="Validate(); 707371"];
801 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 707372"];
802 [label="return; 707373"];
803 [label="param Includes(this BinderFlags self) 707374"];
804 [label="param Includes(BinderFlags other) 707375"];
805 [label="return (self & other) == other; 707376"];
806 [label="var diagnostics = c.GetDiagnostics(); 707377"];
807 [label="0 707378"];
808 [label="ExternalScope = 0 707379"];
809 [label="1 707380"];
810 [label="TopLevelScope = 1 707381"];
811 [label="2 707382"];
812 [label="ValueKindInsignificantBits = 2 707383"];
813 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 707384"];
814 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 707385"];
815 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 707386"];
816 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 707387"];
817 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 707388"];
818 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 707389"];
819 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 707390"];
820 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 707391"];
821 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 707392"];
822 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 707393"];
823 [label="10 707394"];
824 [label="MaxParameterListsForErrorRecovery = 10 707395"];
825 [label="'<>h__TransparentIdentifier' 707396"];
826 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 707397"];
827 [label="s => (MethodSymbol)s 707398"];
828 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 707399"];
829 [label="s => (PropertySymbol)s 707400"];
830 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 707401"];
831 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 707402"];
832 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 707403"];
833 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 707404"];
834 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 707405"];
835 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 707406"];
836 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707407"];
837 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707408"];
838 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707409"];
839 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707410"];
840 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 707411"];
841 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707412"];
842 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707413"];
843 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707414"];
844 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707415"];
845 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707416"];
846 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707417"];
847 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 707418"];
848 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 707419"];
849 [label="param GetWellKnownTypeMember(WellKnownMember member) 707420"];
850 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 707421"];
851 [label="param GetWellKnownTypeMember(Location location = null) 707422"];
852 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 707423"];
853 [label="param GetWellKnownTypeMember(bool isOptional = false) 707424"];
854 [label="Debug.Assert((syntax != null) ^ (location != null)); 707425"];
855 [label="Debug.Assert((syntax != null) ^ (location != null)); 707426"];
856 [label="Debug.Assert((syntax != null) ^ (location != null)); 707427"];
857 [label="Debug.Assert((syntax != null) ^ (location != null)); 707428"];
858 [label="DiagnosticInfo useSiteDiagnostic; 707429"];
859 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707430"];
860 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707431"];
861 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707432"];
862 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707433"];
863 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 707434"];
864 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 707435"];
865 [label="param GetWellKnownTypeMember(WellKnownMember member) 707436"];
866 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 707437"];
867 [label="param GetWellKnownTypeMember(bool isOptional = false) 707438"];
868 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707439"];
869 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707440"];
870 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707441"];
871 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707442"];
872 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707443"];
873 [label="Debug.Assert(symbol is object); 707444"];
874 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 707445"];
875 [label="isInternal = false; 707446"];
876 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707447"];
877 [label="symbol = symbol.ContainingType; 707448"];
878 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 707449"];
879 [label="return true; 707450"];
880 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707451"];
881 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707452"];
882 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707453"];
883 [label="Debug.Assert(symbol is object); 707454"];
884 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 707455"];
885 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707456"];
886 [label="symbol = symbol.ContainingType; 707457"];
887 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 707458"];
888 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707459"];
889 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707460"];
890 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 707461"];
891 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 707462"];
892 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 707463"];
893 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 707464"];
894 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707465"];
895 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707466"];
896 [label="Debug.Assert(symbol is object); 707467"];
897 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 707468"];
898 [label="isInternal = false; 707469"];
899 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707470"];
900 [label="symbol = symbol.ContainingType; 707471"];
901 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 707472"];
902 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707473"];
903 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707474"];
904 [label="Debug.Assert(symbol is object); 707475"];
905 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 707476"];
906 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707477"];
907 [label="symbol = symbol.ContainingType; 707478"];
908 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 707479"];
909 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 707480"];
910 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 707481"];
911 [label="return memberSymbol; 707482"];
912 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 707483"];
913 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 707484"];
914 [label="return memberSymbol; 707485"];
915 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707486"];
916 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707487"];
917 [label="Debug.Assert(symbol is object); 707488"];
918 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 707489"];
919 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707490"];
920 [label="symbol = symbol.ContainingType; 707491"];
921 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 707492"];
922 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707493"];
923 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707494"];
924 [label="Debug.Assert(symbol is object); 707495"];
925 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 707496"];
926 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 707497"];
927 [label="symbol = symbol.ContainingType; 707498"];
928 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 707499"];
929 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 707500"];
930 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 707501"];
931 [label="return memberSymbol; 707502"];
932 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 707503"];
933 [label="return memberSymbol; 707504"];
934 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 707505"];
935 [label="return memberSymbol; 707506"];
936 [label="return memberSymbol; 707507"];
937 [label="param BinderFactory(CSharpCompilation compilation) 707508"];
938 [label="param BinderFactory(SyntaxTree syntaxTree) 707509"];
939 [label="param BinderFactory(bool ignoreAccessibility) 707510"];
940 [label="param BinderFactory(this) 707511"];
941 [label="_binderCache 707512"];
942 [label="_compilation 707513"];
943 [label="_syntaxTree 707514"];
944 [label="_buckStopsHereBinder 707515"];
945 [label="_ignoreAccessibility 707516"];
946 [label="_binderFactoryVisitorPool 707517"];
947 [label="_compilation 707518"];
948 [label="_syntaxTree 707519"];
949 [label="_ignoreAccessibility 707520"];
950 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 707521"];
951 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 707522"];
952 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 707523"];
953 [label="_binderFactoryVisitorPool 707524"];
954 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 707525"];
955 [label="_binderCache 707526"];
956 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 707527"];
957 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 707528"];
958 [label="new BuckStopsHereBinder(compilation) 707529"];
959 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 707530"];
960 [label="param BuckStopsHereBinder(this) 707531"];
961 [label="compilation 707532"];
962 [label="param BuckStopsHereBinder(this) 707533"];
963 [label="param Binder(CSharpCompilation compilation) 707534"];
964 [label="param Binder(this) 707535"];
965 [label="internal CSharpCompilation Compilation { get; } 707536"];
966 [label="Flags 707537"];
967 [label="protected internal Binder? Next { get; } 707538"];
968 [label="_lazyConversions 707539"];
969 [label="_lazyOverloadResolution 707540"];
970 [label="RoslynDebug.Assert(compilation != null); 707541"];
971 [label="RoslynDebug.Assert(compilation != null); 707542"];
972 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 707543"];
973 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 707544"];
974 [label="this.Flags 707545"];
975 [label="this.Compilation 707546"];
976 [label="_buckStopsHereBinder 707547"];
977 [label="var diagnostics = c.GetDiagnostics(); 707548"];
978 [label="param GetBinder(SyntaxNode node) 707549"];
979 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 707550"];
980 [label="param GetBinder(Symbol memberOpt = null) 707551"];
981 [label="param GetBinder(this) 707552"];
982 [label="int position = node.SpanStart; 707553"];
983 [label="InScript 707554"];
984 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 707555"];
985 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 707556"];
986 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 707557"];
987 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 707558"];
988 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 707559"];
989 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 707560"];
990 [label="node = node.Parent; 707561"];
991 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707562"];
992 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707563"];
993 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707564"];
994 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707565"];
995 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 707566"];
996 [label="param GetBinder(SyntaxNode node) 707567"];
997 [label="param GetBinder(int position) 707568"];
998 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 707569"];
999 [label="param GetBinder(Symbol memberOpt = null) 707570"];
1000 [label="param GetBinder(this) 707571"];
1001 [label="Debug.Assert(node != null); 707572"];
1002 [label="Debug.Assert(node != null); 707573"];
1003 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 707574"];
1004 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 707575"];
1005 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 707576"];
1006 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 707577"];
1007 [label="param BinderFactoryVisitor(BinderFactory factory) 707578"];
1008 [label="param BinderFactoryVisitor(this) 707579"];
1009 [label="param BinderFactoryVisitor(this) 707580"];
1010 [label="_position 707581"];
1011 [label="_memberDeclarationOpt 707582"];
1012 [label="_memberOpt 707583"];
1013 [label="_factory 707584"];
1014 [label="_factory 707585"];
1015 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 707586"];
1016 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707587"];
1017 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707588"];
1018 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707589"];
1019 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 707590"];
1020 [label="param Initialize(int position) 707591"];
1021 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 707592"];
1022 [label="param Initialize(Symbol memberOpt) 707593"];
1023 [label="param Initialize(this) 707594"];
1024 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707595"];
1025 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707596"];
1026 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707597"];
1027 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707598"];
1028 [label="_position 707599"];
1029 [label="_memberDeclarationOpt 707600"];
1030 [label="_memberOpt 707601"];
1031 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707602"];
1032 [label="Binder result = visitor.Visit(node); 707603"];
1033 [label="visitor.Visit(node) 707604"];
1034 [label="param Visit(SyntaxNode node) 707605"];
1035 [label="param Visit(this) 707606"];
1036 [label="return VisitCore(node); 707607"];
1037 [label="VisitCore(node) 707608"];
1038 [label="param VisitCore(SyntaxNode node) 707609"];
1039 [label="param VisitCore(this) 707610"];
1040 [label="return ((CSharpSyntaxNode)node).Accept(this); 707611"];
1041 [label="return ((CSharpSyntaxNode)node).Accept(this); 707612"];
1042 [label="return ((CSharpSyntaxNode)node).Accept(this); 707613"];
1043 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 707614"];
1044 [label="param VisitClassDeclaration(this) 707615"];
1045 [label="return VisitTypeDeclarationCore(node); 707616"];
1046 [label="VisitTypeDeclarationCore(node) 707617"];
1047 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 707618"];
1048 [label="param VisitTypeDeclarationCore(this) 707619"];
1049 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 707620"];
1050 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 707621"];
1051 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 707622"];
1052 [label="NodeUsage extraInfo = NodeUsage.Normal; 707623"];
1053 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 707624"];
1054 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 707625"];
1055 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 707626"];
1056 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 707627"];
1057 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 707628"];
1058 [label="return VisitTypeDeclarationCore(parent, extraInfo); 707629"];
1059 [label="return VisitTypeDeclarationCore(parent, extraInfo); 707630"];
1060 [label="VisitTypeDeclarationCore(parent, extraInfo) 707631"];
1061 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 707632"];
1062 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 707633"];
1063 [label="param VisitTypeDeclarationCore(this) 707634"];
1064 [label="var key = CreateBinderCacheKey(parent, extraInfo); 707635"];
1065 [label="var key = CreateBinderCacheKey(parent, extraInfo); 707636"];
1066 [label="CreateBinderCacheKey(parent, extraInfo) 707637"];
1067 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 707638"];
1068 [label="param CreateBinderCacheKey(NodeUsage usage) 707639"];
1069 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707640"];
1070 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707641"];
1071 [label="return new BinderCacheKey(node, usage); 707642"];
1072 [label="return new BinderCacheKey(node, usage); 707643"];
1073 [label="return new BinderCacheKey(node, usage); 707644"];
1074 [label="new BinderCacheKey(node, usage) 707645"];
1075 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 707646"];
1076 [label="param BinderCacheKey(NodeUsage usage) 707647"];
1077 [label="param BinderCacheKey(this) 707648"];
1078 [label="this.syntaxNode 707649"];
1079 [label="this.usage 707650"];
1080 [label="var key = CreateBinderCacheKey(parent, extraInfo); 707651"];
1081 [label="Binder resultBinder; 707652"];
1082 [label="binderCache 707653"];
1083 [label="get\n                {\n                    return _factory._binderCache;\n                } 707654"];
1084 [label="return _factory._binderCache; 707655"];
1085 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 707656"];
1086 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 707657"];
1087 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 707658"];
1088 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 707659"];
1089 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 707660"];
1090 [label="param GetHashCode(this) 707661"];
1091 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 707662"];
1092 [label="resultBinder = VisitCore(parent.Parent); 707663"];
1093 [label="VisitCore(parent.Parent) 707664"];
1094 [label="param VisitCore(SyntaxNode node) 707665"];
1095 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 707666"];
1096 [label="param VisitCompilationUnit(this) 707667"];
1097 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 707668"];
1098 [label="IsInUsing(parent) 707669"];
1099 [label="param IsInUsing(CSharpSyntaxNode containingNode) 707670"];
1100 [label="param IsInUsing(this) 707671"];
1101 [label="TextSpan containingSpan = containingNode.Span; 707672"];
1102 [label="SyntaxToken token; 707673"];
1103 [label="token 707674"];
1104 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 707675"];
1105 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 707676"];
1106 [label="token = containingNode.FindToken(_position); 707677"];
1107 [label="token = containingNode.FindToken(_position); 707678"];
1108 [label="var node = token.Parent; 707679"];
1109 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 707680"];
1110 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 707681"];
1111 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 707682"];
1112 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 707683"];
1113 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 707684"];
1114 [label="node = node.Parent; 707685"];
1115 [label="return false; 707686"];
1116 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 707687"];
1117 [label="InScript 707688"];
1118 [label="get\n                {\n                    return _factory.InScript;\n                } 707689"];
1119 [label="_factory.InScript 707690"];
1120 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 707691"];
1121 [label="return _factory.InScript; 707692"];
1122 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 707693"];
1123 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 707694"];
1124 [label="param VisitCompilationUnit(bool inUsing) 707695"];
1125 [label="param VisitCompilationUnit(bool inScript) 707696"];
1126 [label="param VisitCompilationUnit(this) 707697"];
1127 [label="syntaxTree 707698"];
1128 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 707699"];
1129 [label="return _factory._syntaxTree; 707700"];
1130 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 707701"];
1131 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 707702"];
1132 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 707703"];
1133 [label="inUsing 707704"];
1134 [label="inScript 707705"];
1135 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 707706"];
1136 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 707707"];
1137 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 707708"];
1138 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 707709"];
1139 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 707710"];
1140 [label="param CreateBinderCacheKey(NodeUsage usage) 707711"];
1141 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707712"];
1142 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707713"];
1143 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 707714"];
1144 [label="Binder result; 707715"];
1145 [label="binderCache 707716"];
1146 [label="get\n                {\n                    return _factory._binderCache;\n                } 707717"];
1147 [label="return _factory._binderCache; 707718"];
1148 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 707719"];
1149 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 707720"];
1150 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 707721"];
1151 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 707722"];
1152 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 707723"];
1153 [label="this.buckStopsHereBinder 707724"];
1154 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 707725"];
1155 [label="return _factory._buckStopsHereBinder; 707726"];
1156 [label="result = this.buckStopsHereBinder; 707727"];
1157 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 707728"];
1158 [label="compilation 707729"];
1159 [label="get\n                {\n                    return _factory._compilation;\n                } 707730"];
1160 [label="return _factory._compilation; 707731"];
1161 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707732"];
1162 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707733"];
1163 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707734"];
1164 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707735"];
1165 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707736"];
1166 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 707737"];
1167 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 707738"];
1168 [label="param InContainerBinder(Binder next) 707739"];
1169 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 707740"];
1170 [label="param InContainerBinder(bool inUsing) 707741"];
1171 [label="param InContainerBinder(this) 707742"];
1172 [label="next 707743"];
1173 [label="param InContainerBinder(this) 707744"];
1174 [label="param Binder(Binder next) 707745"];
1175 [label="param Binder(this) 707746"];
1176 [label="param Binder(Conversions? conversions = null) 707747"];
1177 [label="RoslynDebug.Assert(next != null); 707748"];
1178 [label="RoslynDebug.Assert(next != null); 707749"];
1179 [label="Next 707750"];
1180 [label="this.Flags 707751"];
1181 [label="this.Compilation 707752"];
1182 [label="_lazyConversions 707753"];
1183 [label="_container 707754"];
1184 [label="_computeImports 707755"];
1185 [label="_lazyImports 707756"];
1186 [label="_lazyImportChain 707757"];
1187 [label="_lazyQuickAttributeChecker 707758"];
1188 [label="Debug.Assert((object)container != null); 707759"];
1189 [label="Debug.Assert((object)container != null); 707760"];
1190 [label="Debug.Assert(declarationSyntax != null); 707761"];
1191 [label="Debug.Assert(declarationSyntax != null); 707762"];
1192 [label="_container 707763"];
1193 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 707764"];
1194 [label="_computeImports 707765"];
1195 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 707766"];
1196 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 707767"];
1197 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 707768"];
1198 [label="_usingsSyntax 707769"];
1199 [label="compilation 707770"];
1200 [label="get\n                {\n                    return _factory._compilation;\n                } 707771"];
1201 [label="return _factory._compilation; 707772"];
1202 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 707773"];
1203 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 707774"];
1204 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 707775"];
1205 [label="binderCache 707776"];
1206 [label="return _factory._binderCache; 707777"];
1207 [label="binderCache.TryAdd(key, result); 707778"];
1208 [label="binderCache.TryAdd(key, result); 707779"];
1209 [label="binderCache.TryAdd(key, result); 707780"];
1210 [label="binderCache.TryAdd(key, result); 707781"];
1211 [label="binderCache.TryAdd(key, result); 707782"];
1212 [label="return result; 707783"];
1213 [label="return ((CSharpSyntaxNode)node).Accept(this); 707784"];
1214 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 707785"];
1215 [label="resultBinder.ContainingMemberOrLambda 707786"];
1216 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 707787"];
1217 [label="var merged = _container as MergedNamespaceSymbol; 707788"];
1218 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 707789"];
1219 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 707790"];
1220 [label="((object)merged != null) 707791"];
1221 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 707792"];
1222 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 707793"];
1223 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 707794"];
1224 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 707795"];
1225 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 707796"];
1226 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 707797"];
1227 [label="new InContainerBinder(typeSymbol, resultBinder) 707798"];
1228 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 707799"];
1229 [label="param InContainerBinder(Binder next) 707800"];
1230 [label="param InContainerBinder(Imports imports = null) 707801"];
1231 [label="param InContainerBinder(this) 707802"];
1232 [label="next 707803"];
1233 [label="param InContainerBinder(this) 707804"];
1234 [label="param Binder(Binder next) 707805"];
1235 [label="param Binder(this) 707806"];
1236 [label="param Binder(Conversions? conversions = null) 707807"];
1237 [label="RoslynDebug.Assert(next != null); 707808"];
1238 [label="RoslynDebug.Assert(next != null); 707809"];
1239 [label="this.Flags 707810"];
1240 [label="this.Compilation 707811"];
1241 [label="_lazyConversions 707812"];
1242 [label="_container 707813"];
1243 [label="_computeImports 707814"];
1244 [label="_lazyImports 707815"];
1245 [label="_lazyImportChain 707816"];
1246 [label="_lazyQuickAttributeChecker 707817"];
1247 [label="Debug.Assert((object)container != null || imports != null); 707818"];
1248 [label="Debug.Assert((object)container != null || imports != null); 707819"];
1249 [label="_container 707820"];
1250 [label="_lazyImports = imports ?? Imports.Empty; 707821"];
1251 [label="_lazyImports = imports ?? Imports.Empty; 707822"];
1252 [label="_lazyImports 707823"];
1253 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 707824"];
1254 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 707825"];
1255 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 707826"];
1256 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 707827"];
1257 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 707828"];
1258 [label="param WithUnsafeRegionIfNecessary(this) 707829"];
1259 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707830"];
1260 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707831"];
1261 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 707832"];
1262 [label="param Includes(this BinderFlags self) 707833"];
1263 [label="param Includes(BinderFlags other) 707834"];
1264 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707835"];
1265 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707836"];
1266 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 707837"];
1267 [label="binderCache 707838"];
1268 [label="return _factory._binderCache; 707839"];
1269 [label="binderCache.TryAdd(key, resultBinder); 707840"];
1270 [label="binderCache.TryAdd(key, resultBinder); 707841"];
1271 [label="binderCache.TryAdd(key, resultBinder); 707842"];
1272 [label="binderCache.TryAdd(key, resultBinder); 707843"];
1273 [label="binderCache.TryAdd(key, resultBinder); 707844"];
1274 [label="return resultBinder; 707845"];
1275 [label="return ((CSharpSyntaxNode)node).Accept(this); 707846"];
1276 [label="_binderFactoryVisitorPool.Free(visitor); 707847"];
1277 [label="_binderFactoryVisitorPool.Free(visitor); 707848"];
1278 [label="return result; 707849"];
1279 [label="var diagnostics = c.GetDiagnostics(); 707850"];
1280 [label="Debug.Assert(node != null); 707851"];
1281 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 707852"];
1282 [label="container.AssertMemberExposure(memberOpt); 707853"];
1283 [label="container.AssertMemberExposure(memberOpt); 707854"];
1284 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 707855"];
1285 [label="param VisitMethodDeclaration(this) 707856"];
1286 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 707857"];
1287 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 707858"];
1288 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 707859"];
1289 [label="NodeUsage usage; 707860"];
1290 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 707861"];
1291 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 707862"];
1292 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 707863"];
1293 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 707864"];
1294 [label="usage = NodeUsage.Normal; 707865"];
1295 [label="var key = CreateBinderCacheKey(methodDecl, usage); 707866"];
1296 [label="var key = CreateBinderCacheKey(methodDecl, usage); 707867"];
1297 [label="CreateBinderCacheKey(methodDecl, usage) 707868"];
1298 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 707869"];
1299 [label="param CreateBinderCacheKey(NodeUsage usage) 707870"];
1300 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707871"];
1301 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707872"];
1302 [label="return new BinderCacheKey(node, usage); 707873"];
1303 [label="new BinderCacheKey(node, usage) 707874"];
1304 [label="param BinderCacheKey(this) 707875"];
1305 [label="var key = CreateBinderCacheKey(methodDecl, usage); 707876"];
1306 [label="Binder resultBinder; 707877"];
1307 [label="binderCache 707878"];
1308 [label="get\n                {\n                    return _factory._binderCache;\n                } 707879"];
1309 [label="return _factory._binderCache; 707880"];
1310 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 707881"];
1311 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 707882"];
1312 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 707883"];
1313 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 707884"];
1314 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 707885"];
1315 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 707886"];
1316 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 707887"];
1317 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 707888"];
1318 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 707889"];
1319 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 707890"];
1320 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 707891"];
1321 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 707892"];
1322 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 707893"];
1323 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707894"];
1324 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707895"];
1325 [label="SyntaxToken token; 707896"];
1326 [label="token 707897"];
1327 [label="syntaxTree 707898"];
1328 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 707899"];
1329 [label="return _factory._syntaxTree; 707900"];
1330 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 707901"];
1331 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 707902"];
1332 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 707903"];
1333 [label="RoslynDebug.Assert(next != null); 707904"];
1334 [label="_container 707905"];
1335 [label="Debug.Assert((object)container != null); 707906"];
1336 [label="Debug.Assert(declarationSyntax != null); 707907"];
1337 [label="RoslynDebug.Assert(next != null); 707908"];
1338 [label="_container 707909"];
1339 [label="Debug.Assert((object)container != null || imports != null); 707910"];
1340 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 707911"];
1341 [label="SourceMemberMethodSymbol method = null; 707912"];
1342 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 707913"];
1343 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 707914"];
1344 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 707915"];
1345 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 707916"];
1346 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 707917"];
1347 [label="param WithUnsafeRegionIfNecessary(this) 707918"];
1348 [label="binderCache 707919"];
1349 [label="return _factory._binderCache; 707920"];
1350 [label="binderCache.TryAdd(key, resultBinder); 707921"];
1351 [label="binderCache.TryAdd(key, resultBinder); 707922"];
1352 [label="binderCache.TryAdd(key, resultBinder); 707923"];
1353 [label="binderCache.TryAdd(key, resultBinder); 707924"];
1354 [label="return resultBinder; 707925"];
1355 [label="return ((CSharpSyntaxNode)node).Accept(this); 707926"];
1356 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 707927"];
1357 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 707928"];
1358 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 707929"];
1359 [label="Debug.Assert((object)containing != null); 707930"];
1360 [label="Debug.Assert((object)containing != null); 707931"];
1361 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707932"];
1362 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707933"];
1363 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707934"];
1364 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707935"];
1365 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 707936"];
1366 [label="param BinderWithContainingMemberOrLambda(Binder next) 707937"];
1367 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 707938"];
1368 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 707939"];
1369 [label="param BinderWithContainingMemberOrLambda(this) 707940"];
1370 [label="next 707941"];
1371 [label="flags 707942"];
1372 [label="param BinderWithContainingMemberOrLambda(this) 707943"];
1373 [label="param Binder(Binder next) 707944"];
1374 [label="param Binder(BinderFlags flags) 707945"];
1375 [label="param Binder(this) 707946"];
1376 [label="internal CSharpCompilation Compilation { get; } 707947"];
1377 [label="Flags 707948"];
1378 [label="protected internal Binder? Next { get; } 707949"];
1379 [label="_lazyConversions 707950"];
1380 [label="_lazyOverloadResolution 707951"];
1381 [label="RoslynDebug.Assert(next != null); 707952"];
1382 [label="RoslynDebug.Assert(next != null); 707953"];
1383 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 707954"];
1384 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 707955"];
1385 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 707956"];
1386 [label="param Includes(this BinderFlags self) 707957"];
1387 [label="param Includes(BinderFlags other) 707958"];
1388 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 707959"];
1389 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 707960"];
1390 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 707961"];
1391 [label="param Includes(this BinderFlags self) 707962"];
1392 [label="param Includes(BinderFlags other) 707963"];
1393 [label="Next 707964"];
1394 [label="this.Flags 707965"];
1395 [label="this.Compilation 707966"];
1396 [label="_containingMemberOrLambda 707967"];
1397 [label="Debug.Assert(containingMemberOrLambda != null); 707968"];
1398 [label="Debug.Assert(containingMemberOrLambda != null); 707969"];
1399 [label="_containingMemberOrLambda 707970"];
1400 [label="var diagnostics = c.GetDiagnostics(); 707971"];
1401 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 707972"];
1402 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 707973"];
1403 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 707974"];
1404 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 707975"];
1405 [label="param ValidateParameterNameConflicts(this) 707976"];
1406 [label="PooledHashSet<string>? tpNames = null; 707977"];
1407 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 707978"];
1408 [label="PooledHashSet<string>? pNames = null; 707979"];
1409 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 707980"];
1410 [label="tpNames?.Free(); 707981"];
1411 [label="pNames?.Free(); 707982"];
1412 [label="param BindType(ExpressionSyntax syntax) 707983"];
1413 [label="param BindType(DiagnosticBag diagnostics) 707984"];
1414 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 707985"];
1415 [label="param BindType(bool suppressUseSiteDiagnostics = false) 707986"];
1416 [label="param BindType(this) 707987"];
1417 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707988"];
1418 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707989"];
1419 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707990"];
1420 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707991"];
1421 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 707992"];
1422 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 707993"];
1423 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 707994"];
1424 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 707995"];
1425 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 707996"];
1426 [label="param BindTypeOrAlias(this) 707997"];
1427 [label="Debug.Assert(diagnostics != null); 707998"];
1428 [label="Debug.Assert(diagnostics != null); 707999"];
1429 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708000"];
1430 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708001"];
1431 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708002"];
1432 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708003"];
1433 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708004"];
1434 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708005"];
1435 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 708006"];
1436 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 708007"];
1437 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 708008"];
1438 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 708009"];
1439 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 708010"];
1440 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 708011"];
1441 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 708012"];
1442 [label="return bindPredefined(syntax, diagnostics); 708013"];
1443 [label="return bindPredefined(syntax, diagnostics); 708014"];
1444 [label="bindPredefined(syntax, diagnostics) 708015"];
1445 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 708016"];
1446 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 708017"];
1447 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 708018"];
1448 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 708019"];
1449 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 708020"];
1450 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 708021"];
1451 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 708022"];
1452 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 708023"];
1453 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 708024"];
1454 [label="param BindPredefinedTypeSymbol(this) 708025"];
1455 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 708026"];
1456 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 708027"];
1457 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 708028"];
1458 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 708029"];
1459 [label="param GetSpecialType(SpecialType typeId) 708030"];
1460 [label="param GetSpecialType(DiagnosticBag diagnostics) 708031"];
1461 [label="param GetSpecialType(SyntaxNode node) 708032"];
1462 [label="param GetSpecialType(this) 708033"];
1463 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708034"];
1464 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708035"];
1465 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708036"];
1466 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708037"];
1467 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 708038"];
1468 [label="param GetSpecialType(CSharpCompilation compilation) 708039"];
1469 [label="param GetSpecialType(SpecialType typeId) 708040"];
1470 [label="param GetSpecialType(SyntaxNode node) 708041"];
1471 [label="param GetSpecialType(DiagnosticBag diagnostics) 708042"];
1472 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 708043"];
1473 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 708044"];
1474 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 708045"];
1475 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 708046"];
1476 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 708047"];
1477 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 708048"];
1478 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 708049"];
1479 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 708050"];
1480 [label="param ReportUseSiteDiagnostics(Symbol symbol) 708051"];
1481 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 708052"];
1482 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 708053"];
1483 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 708054"];
1484 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 708055"];
1485 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 708056"];
1486 [label="return typeSymbol; 708057"];
1487 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708058"];
1488 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 708059"];
1489 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 708060"];
1490 [label="param AreNullableAnnotationsEnabled(this) 708061"];
1491 [label="RoslynDebug.Assert(token.SyntaxTree is object); 708062"];
1492 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 708063"];
1493 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 708064"];
1494 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 708065"];
1495 [label="param AreNullableAnnotationsEnabled(int position) 708066"];
1496 [label="param AreNullableAnnotationsEnabled(this) 708067"];
1497 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 708068"];
1498 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 708069"];
1499 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 708070"];
1500 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 708071"];
1501 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 708072"];
1502 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 708073"];
1503 [label="AreNullableAnnotationsGloballyEnabled() 708074"];
1504 [label="param AreNullableAnnotationsGloballyEnabled(this) 708075"];
1505 [label="RoslynDebug.Assert(Next is object); 708076"];
1506 [label="Next.AreNullableAnnotationsGloballyEnabled() 708077"];
1507 [label="param AreNullableAnnotationsGloballyEnabled(this) 708078"];
1508 [label="param AreNullableAnnotationsGloballyEnabled(this) 708079"];
1509 [label="GetGlobalAnnotationState() 708080"];
1510 [label="param GetGlobalAnnotationState(this) 708081"];
1511 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 708082"];
1512 [label="return false; 708083"];
1513 [label="return GetGlobalAnnotationState(); 708084"];
1514 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 708085"];
1515 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708086"];
1516 [label="type 708087"];
1517 [label="param operator(TypeWithAnnotations typeWithAnnotations) 708088"];
1518 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 708089"];
1519 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 708090"];
1520 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 708091"];
1521 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 708092"];
1522 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 708093"];
1523 [label="Debug.Assert(typeWithAnnotations.HasType); 708094"];
1524 [label="_typeWithAnnotations 708095"];
1525 [label="_symbol = null; 708096"];
1526 [label="_symbol 708097"];
1527 [label="_isNullableEnabled = false; 708098"];
1528 [label="_isNullableEnabled 708099"];
1529 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708100"];
1530 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708101"];
1531 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708102"];
1532 [label="symbol.IsType 708103"];
1533 [label="=> !_typeWithAnnotations.IsDefault 708104"];
1534 [label="!_typeWithAnnotations.IsDefault 708105"];
1535 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 708106"];
1536 [label="symbol.IsType 708107"];
1537 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 708108"];
1538 [label="symbol.TypeWithAnnotations 708109"];
1539 [label="=> _typeWithAnnotations 708110"];
1540 [label="_typeWithAnnotations 708111"];
1541 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708112"];
1542 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708113"];
1543 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708114"];
1544 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708115"];
1545 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708116"];
1546 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708117"];
1547 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 708118"];
1548 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 708119"];
1549 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 708120"];
1550 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 708121"];
1551 [label="param ReportDiagnosticsIfObsolete(this) 708122"];
1552 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708123"];
1553 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708124"];
1554 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708125"];
1555 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708126"];
1556 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 708127"];
1557 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 708128"];
1558 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 708129"];
1559 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 708130"];
1560 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 708131"];
1561 [label="param ReportDiagnosticsIfObsolete(this) 708132"];
1562 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 708133"];
1563 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708134"];
1564 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708135"];
1565 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708136"];
1566 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708137"];
1567 [label="this.ContainingMemberOrLambda 708138"];
1568 [label="get { return _containingMemberOrLambda; } 708139"];
1569 [label="return _containingMemberOrLambda; 708140"];
1570 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708141"];
1571 [label="this.ContainingType 708142"];
1572 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 708143"];
1573 [label="this.ContainingMemberOrLambda 708144"];
1574 [label="get { return _containingMemberOrLambda; } 708145"];
1575 [label="return _containingMemberOrLambda; 708146"];
1576 [label="var member = this.ContainingMemberOrLambda; 708147"];
1577 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 708148"];
1578 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 708149"];
1579 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 708150"];
1580 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 708151"];
1581 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708152"];
1582 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708153"];
1583 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 708154"];
1584 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 708155"];
1585 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 708156"];
1586 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 708157"];
1587 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 708158"];
1588 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 708159"];
1589 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 708160"];
1590 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 708161"];
1591 [label="RoslynDebug.Assert(symbol is object); 708162"];
1592 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 708163"];
1593 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 708164"];
1594 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 708165"];
1595 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 708166"];
1596 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 708167"];
1597 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 708168"];
1598 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 708169"];
1599 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708170"];
1600 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708171"];
1601 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708172"];
1602 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708173"];
1603 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708174"];
1604 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 708175"];
1605 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 708176"];
1606 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 708177"];
1607 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 708178"];
1608 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 708179"];
1609 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 708180"];
1610 [label="RoslynDebug.Assert(diagnostics != null); 708181"];
1611 [label="RoslynDebug.Assert(diagnostics != null); 708182"];
1612 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708183"];
1613 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708184"];
1614 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708185"];
1615 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708186"];
1616 [label="DiagnosticInfo? info = null; 708187"];
1617 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 708188"];
1618 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 708189"];
1619 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 708190"];
1620 [label="return kind; 708191"];
1621 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 708192"];
1622 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 708193"];
1623 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708194"];
1624 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708195"];
1625 [label="return symbol; 708196"];
1626 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708197"];
1627 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708198"];
1628 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708199"];
1629 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708200"];
1630 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 708201"];
1631 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 708202"];
1632 [label="param UnwrapAlias(DiagnosticBag diagnostics) 708203"];
1633 [label="param UnwrapAlias(SyntaxNode syntax) 708204"];
1634 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 708205"];
1635 [label="param UnwrapAlias(this) 708206"];
1636 [label="symbol.IsAlias 708207"];
1637 [label="=> _symbol?.Kind == SymbolKind.Alias 708208"];
1638 [label="_symbol 708209"];
1639 [label="_symbol?.Kind == SymbolKind.Alias 708210"];
1640 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 708211"];
1641 [label="return symbol; 708212"];
1642 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 708213"];
1643 [label="=> _typeWithAnnotations 708214"];
1644 [label="_typeWithAnnotations 708215"];
1645 [label="var diagnostics = c.GetDiagnostics(); 708216"];
1646 [label="param TypeConversions(AssemblySymbol corLibrary) 708217"];
1647 [label="param TypeConversions(bool includeNullability = false) 708218"];
1648 [label="param TypeConversions(this) 708219"];
1649 [label="corLibrary 708220"];
1650 [label="0 708221"];
1651 [label="includeNullability 708222"];
1652 [label="null 708223"];
1653 [label="param TypeConversions(this) 708224"];
1654 [label="param TypeConversions(AssemblySymbol corLibrary) 708225"];
1655 [label="param TypeConversions(int currentRecursionDepth) 708226"];
1656 [label="param TypeConversions(bool includeNullability) 708227"];
1657 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 708228"];
1658 [label="param TypeConversions(this) 708229"];
1659 [label="50 708230"];
1660 [label="MaximumRecursionDepth = 50 708231"];
1661 [label="false 708232"];
1662 [label="F = false 708233"];
1663 [label="true 708234"];
1664 [label="T = true 708235"];
1665 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 708236"];
1666 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 708237"];
1667 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 708238"];
1668 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 708239"];
1669 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 708240"];
1670 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 708241"];
1671 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 708242"];
1672 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 708243"];
1673 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 708244"];
1674 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 708245"];
1675 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 708246"];
1676 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 708247"];
1677 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 708248"];
1678 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 708249"];
1679 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 708250"];
1680 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 708251"];
1681 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 708252"];
1682 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 708253"];
1683 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708254"];
1684 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708255"];
1685 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708256"];
1686 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708257"];
1687 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708258"];
1688 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708259"];
1689 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 708260"];
1690 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 708261"];
1691 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 708262"];
1692 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 708263"];
1693 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 708264"];
1694 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 708265"];
1695 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708266"];
1696 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708267"];
1697 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708268"];
1698 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708269"];
1699 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708270"];
1700 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708271"];
1701 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708272"];
1702 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708273"];
1703 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708274"];
1704 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708275"];
1705 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708276"];
1706 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708277"];
1707 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708278"];
1708 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708279"];
1709 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708280"];
1710 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708281"];
1711 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708282"];
1712 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 708283"];
1713 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 708284"];
1714 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 708285"];
1715 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 708286"];
1716 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 708287"];
1717 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 708288"];
1718 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 708289"];
1719 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 708290"];
1720 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 708291"];
1721 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 708292"];
1722 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 708293"];
1723 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 708294"];
1724 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 708295"];
1725 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 708296"];
1726 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 708297"];
1727 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 708298"];
1728 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 708299"];
1729 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 708300"];
1730 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 708301"];
1731 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 708302"];
1732 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 708303"];
1733 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 708304"];
1734 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 708305"];
1735 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 708306"];
1736 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 708307"];
1737 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 708308"];
1738 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 708309"];
1739 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 708310"];
1740 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 708311"];
1741 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 708312"];
1742 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 708313"];
1743 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 708314"];
1744 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 708315"];
1745 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 708316"];
1746 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 708317"];
1747 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 708318"];
1748 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 708319"];
1749 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708320"];
1750 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708321"];
1751 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708322"];
1752 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708323"];
1753 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708324"];
1754 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708325"];
1755 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708326"];
1756 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708327"];
1757 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708328"];
1758 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708329"];
1759 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708330"];
1760 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708331"];
1761 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708332"];
1762 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 708333"];
1763 [label="corLibrary 708334"];
1764 [label="currentRecursionDepth 708335"];
1765 [label="includeNullability 708336"];
1766 [label="otherNullabilityOpt 708337"];
1767 [label="param TypeConversions(this) 708338"];
1768 [label="param ConversionsBase(AssemblySymbol corLibrary) 708339"];
1769 [label="param ConversionsBase(int currentRecursionDepth) 708340"];
1770 [label="param ConversionsBase(bool includeNullability) 708341"];
1771 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 708342"];
1772 [label="param ConversionsBase(this) 708343"];
1773 [label="corLibrary 708344"];
1774 [label="currentRecursionDepth 708345"];
1775 [label="IncludeNullability 708346"];
1776 [label="_lazyOtherNullability 708347"];
1777 [label="Debug.Assert((object)corLibrary != null); 708348"];
1778 [label="Debug.Assert((object)corLibrary != null); 708349"];
1779 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 708350"];
1780 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 708351"];
1781 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 708352"];
1782 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 708353"];
1783 [label="this.corLibrary 708354"];
1784 [label="this.currentRecursionDepth 708355"];
1785 [label="IncludeNullability 708356"];
1786 [label="_lazyOtherNullability 708357"];
1787 [label="var diagnostics = c.GetDiagnostics(); 708358"];
1788 [label="Debug.Assert(node != null); 708359"];
1789 [label="param DefaultVisit(SyntaxNode parent) 708360"];
1790 [label="param DefaultVisit(this) 708361"];
1791 [label="return VisitCore(parent.Parent); 708362"];
1792 [label="VisitCore(parent.Parent) 708363"];
1793 [label="param VisitCore(SyntaxNode node) 708364"];
1794 [label="param VisitCore(this) 708365"];
1795 [label="return ((CSharpSyntaxNode)node).Accept(this); 708366"];
1796 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 708367"];
1797 [label="param VisitFieldDeclaration(this) 708368"];
1798 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 708369"];
1799 [label="VisitCore(parent.Parent) 708370"];
1800 [label="param VisitCore(SyntaxNode node) 708371"];
1801 [label="param VisitCore(this) 708372"];
1802 [label="return ((CSharpSyntaxNode)node).Accept(this); 708373"];
1803 [label="VisitTypeDeclarationCore(node) 708374"];
1804 [label="NodeUsage extraInfo = NodeUsage.Normal; 708375"];
1805 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 708376"];
1806 [label="VisitTypeDeclarationCore(parent, extraInfo) 708377"];
1807 [label="CreateBinderCacheKey(parent, extraInfo) 708378"];
1808 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 708379"];
1809 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 708380"];
1810 [label="return new BinderCacheKey(node, usage); 708381"];
1811 [label="new BinderCacheKey(node, usage) 708382"];
1812 [label="param BinderCacheKey(this) 708383"];
1813 [label="var key = CreateBinderCacheKey(parent, extraInfo); 708384"];
1814 [label="Binder resultBinder; 708385"];
1815 [label="binderCache 708386"];
1816 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 708387"];
1817 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 708388"];
1818 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 708389"];
1819 [label="SyntaxToken token; 708390"];
1820 [label="token 708391"];
1821 [label="syntaxTree 708392"];
1822 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 708393"];
1823 [label="return _factory._syntaxTree; 708394"];
1824 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 708395"];
1825 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 708396"];
1826 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 708397"];
1827 [label="RoslynDebug.Assert(next != null); 708398"];
1828 [label="_container 708399"];
1829 [label="Debug.Assert((object)container != null); 708400"];
1830 [label="Debug.Assert(declarationSyntax != null); 708401"];
1831 [label="Debug.Assert((object)container != null || imports != null); 708402"];
1832 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 708403"];
1833 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 708404"];
1834 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 708405"];
1835 [label="param WithUnsafeRegionIfNecessary(this) 708406"];
1836 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 708407"];
1837 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 708408"];
1838 [label="param Includes(BinderFlags other) 708409"];
1839 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 708410"];
1840 [label="param Includes(this BinderFlags self) 708411"];
1841 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 708412"];
1842 [label="param Includes(this BinderFlags self) 708413"];
1843 [label="var node = (QualifiedNameSyntax)syntax; 708414"];
1844 [label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708415"];
1845 [label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708416"];
1846 [label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708417"];
1847 [label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708418"];
1848 [label="BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 708419"];
1849 [label="param BindQualifiedName(ExpressionSyntax leftName) 708420"];
1850 [label="param BindQualifiedName(SimpleNameSyntax rightName) 708421"];
1851 [label="param BindQualifiedName(DiagnosticBag diagnostics) 708422"];
1852 [label="param BindQualifiedName(ConsList<TypeSymbol> basesBeingResolved) 708423"];
1853 [label="param BindQualifiedName(bool suppressUseSiteDiagnostics) 708424"];
1854 [label="param BindQualifiedName(this) 708425"];
1855 [label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708426"];
1856 [label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708427"];
1857 [label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708428"];
1858 [label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708429"];
1859 [label="BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false) 708430"];
1860 [label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 708431"];
1861 [label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 708432"];
1862 [label="param BindNamespaceOrTypeSymbol(ConsList<TypeSymbol> basesBeingResolved) 708433"];
1863 [label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 708434"];
1864 [label="param BindNamespaceOrTypeSymbol(this) 708435"];
1865 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708436"];
1866 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708437"];
1867 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708438"];
1868 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708439"];
1869 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 708440"];
1870 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 708441"];
1871 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 708442"];
1872 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 708443"];
1873 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 708444"];
1874 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 708445"];
1875 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708446"];
1876 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708447"];
1877 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708448"];
1878 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708449"];
1879 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 708450"];
1880 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 708451"];
1881 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 708452"];
1882 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 708453"];
1883 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 708454"];
1884 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 708455"];
1885 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 708456"];
1886 [label="var identifierValueText = node.Identifier.ValueText; 708457"];
1887 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 708458"];
1888 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708459"];
1889 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708460"];
1890 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708461"];
1891 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708462"];
1892 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708463"];
1893 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 708464"];
1894 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 708465"];
1895 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 708466"];
1896 [label="param CreateErrorIfLookupOnTypeParameter(string name) 708467"];
1897 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 708468"];
1898 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 708469"];
1899 [label="param CreateErrorIfLookupOnTypeParameter(this) 708470"];
1900 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 708471"];
1901 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 708472"];
1902 [label="return null; 708473"];
1903 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708474"];
1904 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 708475"];
1905 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 708476"];
1906 [label="CreatePool() 708477"];
1907 [label="ObjectPool<LookupResult> pool = null; 708478"];
1908 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 708479"];
1909 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 708480"];
1910 [label="return pool; 708481"];
1911 [label="s_poolInstance = CreatePool() 708482"];
1912 [label="LookupResult.GetInstance() 708483"];
1913 [label="var instance = s_poolInstance.Allocate(); 708484"];
1914 [label="var instance = s_poolInstance.Allocate(); 708485"];
1915 [label="var instance = s_poolInstance.Allocate(); 708486"];
1916 [label="param LookupResult(ObjectPool<LookupResult> pool) 708487"];
1917 [label="param LookupResult(this) 708488"];
1918 [label="_kind 708489"];
1919 [label="_symbolList 708490"];
1920 [label="_error 708491"];
1921 [label="_pool 708492"];
1922 [label="_pool 708493"];
1923 [label="_kind 708494"];
1924 [label="_symbolList = new ArrayBuilder<Symbol>(); 708495"];
1925 [label="_symbolList 708496"];
1926 [label="_error = null; 708497"];
1927 [label="_error 708498"];
1928 [label="var instance = s_poolInstance.Allocate(); 708499"];
1929 [label="instance.IsClear 708500"];
1930 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 708501"];
1931 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708502"];
1932 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708503"];
1933 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708504"];
1934 [label="Debug.Assert(instance.IsClear); 708505"];
1935 [label="return instance; 708506"];
1936 [label="var result = LookupResult.GetInstance(); 708507"];
1937 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 708508"];
1938 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 708509"];
1939 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 708510"];
1940 [label="param GetSimpleNameLookupOptions(NameSyntax node) 708511"];
1941 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 708512"];
1942 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 708513"];
1943 [label="return LookupOptions.NamespacesOrTypesOnly; 708514"];
1944 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 708515"];
1945 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708516"];
1946 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708517"];
1947 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708518"];
1948 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708519"];
1949 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708520"];
1950 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708521"];
1951 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708522"];
1952 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 708523"];
1953 [label="param LookupSymbolsSimpleName(LookupResult result) 708524"];
1954 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 708525"];
1955 [label="param LookupSymbolsSimpleName(string plainName) 708526"];
1956 [label="param LookupSymbolsSimpleName(int arity) 708527"];
1957 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 708528"];
1958 [label="param LookupSymbolsSimpleName(LookupOptions options) 708529"];
1959 [label="param LookupSymbolsSimpleName(bool diagnose) 708530"];
1960 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708531"];
1961 [label="param LookupSymbolsSimpleName(this) 708532"];
1962 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 708533"];
1963 [label="options.IsAttributeTypeLookup() 708534"];
1964 [label="param IsAttributeTypeLookup(this LookupOptions options) 708535"];
1965 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 708536"];
1966 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708537"];
1967 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708538"];
1968 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708539"];
1969 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708540"];
1970 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708541"];
1971 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708542"];
1972 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708543"];
1973 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708544"];
1974 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708545"];
1975 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 708546"];
1976 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 708547"];
1977 [label="param LookupSymbolsOrMembersInternal(string name) 708548"];
1978 [label="param LookupSymbolsOrMembersInternal(int arity) 708549"];
1979 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 708550"];
1980 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 708551"];
1981 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 708552"];
1982 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708553"];
1983 [label="param LookupSymbolsOrMembersInternal(this) 708554"];
1984 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 708555"];
1985 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 708556"];
1986 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708557"];
1987 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708558"];
1988 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708559"];
1989 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708560"];
1990 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708561"];
1991 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708562"];
1992 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708563"];
1993 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708564"];
1994 [label="param LookupSymbolsInternal(LookupResult result) 708565"];
1995 [label="param LookupSymbolsInternal(string name) 708566"];
1996 [label="param LookupSymbolsInternal(int arity) 708567"];
1997 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 708568"];
1998 [label="param LookupSymbolsInternal(LookupOptions options) 708569"];
1999 [label="param LookupSymbolsInternal(bool diagnose) 708570"];
2000 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708571"];
2001 [label="param LookupSymbolsInternal(this) 708572"];
2002 [label="result.IsClear 708573"];
2003 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 708574"];
2004 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708575"];
2005 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708576"];
2006 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708577"];
2007 [label="Debug.Assert(result.IsClear); 708578"];
2008 [label="Debug.Assert(options.AreValid()); 708579"];
2009 [label="options.AreValid() 708580"];
2010 [label="param AreValid(this LookupOptions options) 708581"];
2011 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 708582"];
2012 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 708583"];
2013 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 708584"];
2014 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 708585"];
2015 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 708586"];
2016 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 708587"];
2017 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 708588"];
2018 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 708589"];
2019 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 708590"];
2020 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 708591"];
2021 [label="return OnlyOneBitSet(onlyOptions); 708592"];
2022 [label="OnlyOneBitSet(onlyOptions) 708593"];
2023 [label="param OnlyOneBitSet(LookupOptions o) 708594"];
2024 [label="return (o & (o - 1)) == 0; 708595"];
2025 [label="return (o & (o - 1)) == 0; 708596"];
2026 [label="Binder binder = null; 708597"];
2027 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 708598"];
2028 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 708599"];
2029 [label="result.IsMultiViable 708600"];
2030 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 708601"];
2031 [label="Kind 708602"];
2032 [label="get\n            {\n                return _kind;\n            } 708603"];
2033 [label="return _kind; 708604"];
2034 [label="return Kind == LookupResultKind.Viable; 708605"];
2035 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 708606"];
2036 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 708607"];
2037 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 708608"];
2038 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 708609"];
2039 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708610"];
2040 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708611"];
2041 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708612"];
2042 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708613"];
2043 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708614"];
2044 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708615"];
2045 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708616"];
2046 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708617"];
2047 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 708618"];
2048 [label="param LookupSymbolsInSingleBinder(LookupResult result) 708619"];
2049 [label="param LookupSymbolsInSingleBinder(string name) 708620"];
2050 [label="param LookupSymbolsInSingleBinder(int arity) 708621"];
2051 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 708622"];
2052 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 708623"];
2053 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 708624"];
2054 [label="param LookupSymbolsInSingleBinder(bool diagnose) 708625"];
2055 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708626"];
2056 [label="param LookupSymbolsInSingleBinder(this) 708627"];
2057 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708628"];
2058 [label="result.IsClear 708629"];
2059 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 708630"];
2060 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708631"];
2061 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708632"];
2062 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708633"];
2063 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 708634"];
2064 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 708635"];
2065 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 708636"];
2066 [label="param LookupSymbolsInSingleBinder(LookupResult result) 708637"];
2067 [label="param LookupSymbolsInSingleBinder(string name) 708638"];
2068 [label="param LookupSymbolsInSingleBinder(int arity) 708639"];
2069 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 708640"];
2070 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 708641"];
2071 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 708642"];
2072 [label="param LookupSymbolsInSingleBinder(bool diagnose) 708643"];
2073 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708644"];
2074 [label="param LookupSymbolsInSingleBinder(this) 708645"];
2075 [label="result.IsClear 708646"];
2076 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 708647"];
2077 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708648"];
2078 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708649"];
2079 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708650"];
2080 [label="Debug.Assert(result.IsClear); 708651"];
2081 [label="IsSubmissionClass 708652"];
2082 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 708653"];
2083 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 708654"];
2084 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 708655"];
2085 [label="var imports = GetImports(basesBeingResolved); 708656"];
2086 [label="GetImports(basesBeingResolved) 708657"];
2087 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 708658"];
2088 [label="param GetImports(this) 708659"];
2089 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 708660"];
2090 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 708661"];
2091 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 708662"];
2092 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 708663"];
2093 [label="return _lazyImports; 708664"];
2094 [label="var imports = GetImports(basesBeingResolved); 708665"];
2095 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 708666"];
2096 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 708667"];
2097 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 708668"];
2098 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 708669"];
2099 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708670"];
2100 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708671"];
2101 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708672"];
2102 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708673"];
2103 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708674"];
2104 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708675"];
2105 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708676"];
2106 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708677"];
2107 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708678"];
2108 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 708679"];
2109 [label="param LookupMembersInternal(LookupResult result) 708680"];
2110 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 708681"];
2111 [label="param LookupMembersInternal(string name) 708682"];
2112 [label="param LookupMembersInternal(int arity) 708683"];
2113 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 708684"];
2114 [label="param LookupMembersInternal(LookupOptions options) 708685"];
2115 [label="param LookupMembersInternal(Binder originalBinder) 708686"];
2116 [label="param LookupMembersInternal(bool diagnose) 708687"];
2117 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708688"];
2118 [label="param LookupMembersInternal(this) 708689"];
2119 [label="Debug.Assert(options.AreValid()); 708690"];
2120 [label="options.AreValid() 708691"];
2121 [label="param AreValid(this LookupOptions options) 708692"];
2122 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 708693"];
2123 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 708694"];
2124 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 708695"];
2125 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 708696"];
2126 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 708697"];
2127 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 708698"];
2128 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 708699"];
2129 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 708700"];
2130 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 708701"];
2131 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 708702"];
2132 [label="return OnlyOneBitSet(onlyOptions); 708703"];
2133 [label="OnlyOneBitSet(onlyOptions) 708704"];
2134 [label="param OnlyOneBitSet(LookupOptions o) 708705"];
2135 [label="return (o & (o - 1)) == 0; 708706"];
2136 [label="return (o & (o - 1)) == 0; 708707"];
2137 [label="Debug.Assert(arity >= 0); 708708"];
2138 [label="Debug.Assert(arity >= 0); 708709"];
2139 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 708710"];
2140 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708711"];
2141 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708712"];
2142 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708713"];
2143 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708714"];
2144 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708715"];
2145 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708716"];
2146 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708717"];
2147 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708718"];
2148 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708719"];
2149 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 708720"];
2150 [label="param LookupMembersInType(LookupResult result) 708721"];
2151 [label="param LookupMembersInType(TypeSymbol type) 708722"];
2152 [label="param LookupMembersInType(string name) 708723"];
2153 [label="param LookupMembersInType(int arity) 708724"];
2154 [label="param LookupMembersInType(ConsList<TypeSymbol> basesBeingResolved) 708725"];
2155 [label="param LookupMembersInType(LookupOptions options) 708726"];
2156 [label="param LookupMembersInType(Binder originalBinder) 708727"];
2157 [label="param LookupMembersInType(bool diagnose) 708728"];
2158 [label="param LookupMembersInType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708729"];
2159 [label="param LookupMembersInType(this) 708730"];
2160 [label="switch (type.TypeKind)\n            {\n                case TypeKind.TypeParameter:\n                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Interface:\n                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Array:\n                case TypeKind.Dynamic:\n                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Submission:\n                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Error:\n                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Pointer:\n                case TypeKind.FunctionPointer:\n                    result.Clear();\n                    break;\n\n                case TypeKind.Unknown:\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 708731"];
2161 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708732"];
2162 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708733"];
2163 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708734"];
2164 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708735"];
2165 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708736"];
2166 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708737"];
2167 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708738"];
2168 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708739"];
2169 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708740"];
2170 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 708741"];
2171 [label="param LookupMembersInClass(LookupResult result) 708742"];
2172 [label="param LookupMembersInClass(TypeSymbol type) 708743"];
2173 [label="param LookupMembersInClass(string name) 708744"];
2174 [label="param LookupMembersInClass(int arity) 708745"];
2175 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 708746"];
2176 [label="param LookupMembersInClass(LookupOptions options) 708747"];
2177 [label="param LookupMembersInClass(Binder originalBinder) 708748"];
2178 [label="param LookupMembersInClass(bool diagnose) 708749"];
2179 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708750"];
2180 [label="param LookupMembersInClass(this) 708751"];
2181 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708752"];
2182 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708753"];
2183 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708754"];
2184 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708755"];
2185 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708756"];
2186 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708757"];
2187 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708758"];
2188 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708759"];
2189 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708760"];
2190 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 708761"];
2191 [label="param LookupMembersInClass(LookupResult result) 708762"];
2192 [label="param LookupMembersInClass(TypeSymbol type) 708763"];
2193 [label="param LookupMembersInClass(string name) 708764"];
2194 [label="param LookupMembersInClass(int arity) 708765"];
2195 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 708766"];
2196 [label="param LookupMembersInClass(LookupOptions options) 708767"];
2197 [label="param LookupMembersInClass(Binder originalBinder) 708768"];
2198 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 708769"];
2199 [label="param LookupMembersInClass(bool diagnose) 708770"];
2200 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708771"];
2201 [label="param LookupMembersInClass(this) 708772"];
2202 [label="Debug.Assert((object)type != null); 708773"];
2203 [label="Debug.Assert((object)type != null); 708774"];
2204 [label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 708775"];
2205 [label="TypeSymbol currentType = type; 708776"];
2206 [label="LookupResult.GetInstance() 708777"];
2207 [label="_kind 708778"];
2208 [label="_symbolList 708779"];
2209 [label="_error 708780"];
2210 [label="_pool 708781"];
2211 [label="instance.IsClear 708782"];
2212 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 708783"];
2213 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708784"];
2214 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708785"];
2215 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708786"];
2216 [label="Debug.Assert(instance.IsClear); 708787"];
2217 [label="var tmp = LookupResult.GetInstance(); 708788"];
2218 [label="PooledHashSet<NamedTypeSymbol> visited = null; 708789"];
2219 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 708790"];
2220 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 708791"];
2221 [label="tmp.Clear() 708792"];
2222 [label="param Clear(this) 708793"];
2223 [label="_kind 708794"];
2224 [label="_symbolList.Clear(); 708795"];
2225 [label="_error = null; 708796"];
2226 [label="_error 708797"];
2227 [label="tmp.Clear(); 708798"];
2228 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708799"];
2229 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708800"];
2230 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708801"];
2231 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708802"];
2232 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708803"];
2233 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708804"];
2234 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708805"];
2235 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708806"];
2236 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708807"];
2237 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708808"];
2238 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 708809"];
2239 [label="param LookupMembersWithoutInheritance(LookupResult result) 708810"];
2240 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 708811"];
2241 [label="param LookupMembersWithoutInheritance(string name) 708812"];
2242 [label="param LookupMembersWithoutInheritance(int arity) 708813"];
2243 [label="param LookupMembersWithoutInheritance(LookupOptions options) 708814"];
2244 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 708815"];
2245 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 708816"];
2246 [label="param LookupMembersWithoutInheritance(bool diagnose) 708817"];
2247 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708818"];
2248 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 708819"];
2249 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 708820"];
2250 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 708821"];
2251 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 708822"];
2252 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 708823"];
2253 [label="GetCandidateMembers(type, name, options, originalBinder) 708824"];
2254 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 708825"];
2255 [label="param GetCandidateMembers(string name) 708826"];
2256 [label="param GetCandidateMembers(LookupOptions options) 708827"];
2257 [label="param GetCandidateMembers(Binder originalBinder) 708828"];
2258 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 708829"];
2259 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 708830"];
2260 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 708831"];
2261 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 708832"];
2262 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 708833"];
2263 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 708834"];
2264 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708835"];
2265 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708836"];
2266 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708837"];
2267 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708838"];
2268 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708839"];
2269 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708840"];
2270 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708841"];
2271 [label="param MergePrioritized(LookupResult other) 708842"];
2272 [label="param MergePrioritized(this) 708843"];
2273 [label="other.Kind 708844"];
2274 [label="get\n            {\n                return _kind;\n            } 708845"];
2275 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 708846"];
2276 [label="Kind 708847"];
2277 [label="get\n            {\n                return _kind;\n            } 708848"];
2278 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 708849"];
2279 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 708850"];
2280 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 708851"];
2281 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 708852"];
2282 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 708853"];
2283 [label="tmp.IsMultiViable 708854"];
2284 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 708855"];
2285 [label="return _kind; 708856"];
2286 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 708857"];
2287 [label="result.IsMultiViable 708858"];
2288 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 708859"];
2289 [label="return _kind; 708860"];
2290 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 708861"];
2291 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 708862"];
2292 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 708863"];
2293 [label="originalBinder.InCrefButNotParameterOrReturnType 708864"];
2294 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 708865"];
2295 [label="InCref 708866"];
2296 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 708867"];
2297 [label="return this.Flags.Includes(BinderFlags.Cref); 708868"];
2298 [label="return this.Flags.Includes(BinderFlags.Cref); 708869"];
2299 [label="this.Flags.Includes(BinderFlags.Cref) 708870"];
2300 [label="param Includes(this BinderFlags self) 708871"];
2301 [label="param Includes(BinderFlags other) 708872"];
2302 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 708873"];
2303 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 708874"];
2304 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708875"];
2305 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708876"];
2306 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708877"];
2307 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708878"];
2308 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708879"];
2309 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 708880"];
2310 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 708881"];
2311 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 708882"];
2312 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 708883"];
2313 [label="tmp.Clear(); 708884"];
2314 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708885"];
2315 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708886"];
2316 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708887"];
2317 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708888"];
2318 [label="param LookupMembersWithoutInheritance(LookupResult result) 708889"];
2319 [label="param LookupMembersWithoutInheritance(int arity) 708890"];
2320 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 708891"];
2321 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 708892"];
2322 [label="param LookupMembersWithoutInheritance(bool diagnose) 708893"];
2323 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 708894"];
2324 [label="param GetCandidateMembers(Binder originalBinder) 708895"];
2325 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 708896"];
2326 [label="param MergePrioritized(LookupResult other) 708897"];
2327 [label="param MergePrioritized(this) 708898"];
2328 [label="other.Kind 708899"];
2329 [label="get\n            {\n                return _kind;\n            } 708900"];
2330 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 708901"];
2331 [label="Kind 708902"];
2332 [label="get\n            {\n                return _kind;\n            } 708903"];
2333 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 708904"];
2334 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 708905"];
2335 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 708906"];
2336 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 708907"];
2337 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 708908"];
2338 [label="tmp.IsMultiViable 708909"];
2339 [label="return _kind; 708910"];
2340 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 708911"];
2341 [label="result.IsMultiViable 708912"];
2342 [label="return _kind; 708913"];
2343 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 708914"];
2344 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 708915"];
2345 [label="originalBinder.InCrefButNotParameterOrReturnType 708916"];
2346 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 708917"];
2347 [label="InCref 708918"];
2348 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 708919"];
2349 [label="return this.Flags.Includes(BinderFlags.Cref); 708920"];
2350 [label="return this.Flags.Includes(BinderFlags.Cref); 708921"];
2351 [label="this.Flags.Includes(BinderFlags.Cref) 708922"];
2352 [label="param Includes(this BinderFlags self) 708923"];
2353 [label="param Includes(BinderFlags other) 708924"];
2354 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 708925"];
2355 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 708926"];
2356 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 708927"];
2357 [label="visited?.Free(); 708928"];
2358 [label="tmp.Free() 708929"];
2359 [label="param Free(this) 708930"];
2360 [label="this.Clear() 708931"];
2361 [label="param Clear(this) 708932"];
2362 [label="_kind 708933"];
2363 [label="_symbolList.Clear(); 708934"];
2364 [label="_error = null; 708935"];
2365 [label="_error 708936"];
2366 [label="this.Clear(); 708937"];
2367 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 708938"];
2368 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 708939"];
2369 [label="_pool.Free(this); 708940"];
2370 [label="tmp.Free(); 708941"];
2371 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708942"];
2372 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708943"];
2373 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708944"];
2374 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708945"];
2375 [label="result.IsMultiViable 708946"];
2376 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 708947"];
2377 [label="return _kind; 708948"];
2378 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 708949"];
2379 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708950"];
2380 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708951"];
2381 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708952"];
2382 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708953"];
2383 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708954"];
2384 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708955"];
2385 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708956"];
2386 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708957"];
2387 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708958"];
2388 [label="param LookupSymbol(Binder originalBinder) 708959"];
2389 [label="param LookupSymbol(LookupResult result) 708960"];
2390 [label="param LookupSymbol(string name) 708961"];
2391 [label="param LookupSymbol(int arity) 708962"];
2392 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 708963"];
2393 [label="param LookupSymbol(LookupOptions options) 708964"];
2394 [label="param LookupSymbol(bool diagnose) 708965"];
2395 [label="param LookupSymbol(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708966"];
2396 [label="param LookupSymbol(this) 708967"];
2397 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708968"];
2398 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708969"];
2399 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708970"];
2400 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708971"];
2401 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708972"];
2402 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708973"];
2403 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708974"];
2404 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708975"];
2405 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708976"];
2406 [label="param LookupSymbolInAliases(Binder originalBinder) 708977"];
2407 [label="param LookupSymbolInAliases(LookupResult result) 708978"];
2408 [label="param LookupSymbolInAliases(string name) 708979"];
2409 [label="param LookupSymbolInAliases(int arity) 708980"];
2410 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 708981"];
2411 [label="param LookupSymbolInAliases(LookupOptions options) 708982"];
2412 [label="param LookupSymbolInAliases(bool diagnose) 708983"];
2413 [label="param LookupSymbolInAliases(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 708984"];
2414 [label="param LookupSymbolInAliases(this) 708985"];
2415 [label="originalBinder.IsSemanticModelBinder 708986"];
2416 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 708987"];
2417 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 708988"];
2418 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 708989"];
2419 [label="this.Flags.Includes(BinderFlags.SemanticModel) 708990"];
2420 [label="param Includes(this BinderFlags self) 708991"];
2421 [label="param Includes(BinderFlags other) 708992"];
2422 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 708993"];
2423 [label="AliasAndUsingDirective alias; 708994"];
2424 [label="alias 708995"];
2425 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 708996"];
2426 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 708997"];
2427 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 708998"];
2428 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 708999"];
2429 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709000"];
2430 [label="result.IsMultiViable 709001"];
2431 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 709002"];
2432 [label="return _kind; 709003"];
2433 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 709004"];
2434 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 709005"];
2435 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 709006"];
2436 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 709007"];
2437 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709008"];
2438 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709009"];
2439 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709010"];
2440 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709011"];
2441 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709012"];
2442 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709013"];
2443 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709014"];
2444 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709015"];
2445 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709016"];
2446 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 709017"];
2447 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 709018"];
2448 [label="param LookupSymbolInUsings(Binder originalBinder) 709019"];
2449 [label="param LookupSymbolInUsings(LookupResult result) 709020"];
2450 [label="param LookupSymbolInUsings(string name) 709021"];
2451 [label="param LookupSymbolInUsings(int arity) 709022"];
2452 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 709023"];
2453 [label="param LookupSymbolInUsings(LookupOptions options) 709024"];
2454 [label="param LookupSymbolInUsings(bool diagnose) 709025"];
2455 [label="param LookupSymbolInUsings(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709026"];
2456 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 709027"];
2457 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 709028"];
2458 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 709029"];
2459 [label="param Includes(this BinderFlags self) 709030"];
2460 [label="param Includes(BinderFlags other) 709031"];
2461 [label="originalBinder.IsSemanticModelBinder 709032"];
2462 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 709033"];
2463 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 709034"];
2464 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 709035"];
2465 [label="this.Flags.Includes(BinderFlags.SemanticModel) 709036"];
2466 [label="param Includes(this BinderFlags self) 709037"];
2467 [label="param Includes(BinderFlags other) 709038"];
2468 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 709039"];
2469 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 709040"];
2470 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709041"];
2471 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709042"];
2472 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709043"];
2473 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709044"];
2474 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 709045"];
2475 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709046"];
2476 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709047"];
2477 [label="param LookupSymbolsInSingleBinder(int arity) 709048"];
2478 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 709049"];
2479 [label="param LookupSymbolsInSingleBinder(bool diagnose) 709050"];
2480 [label="result.IsClear 709051"];
2481 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 709052"];
2482 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709053"];
2483 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709054"];
2484 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709055"];
2485 [label="Debug.Assert(result.IsClear); 709056"];
2486 [label="IsSubmissionClass 709057"];
2487 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 709058"];
2488 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 709059"];
2489 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 709060"];
2490 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 709061"];
2491 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 709062"];
2492 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 709063"];
2493 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 709064"];
2494 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 709065"];
2495 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 709066"];
2496 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 709067"];
2497 [label="param FromSyntax(InContainerBinder binder) 709068"];
2498 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 709069"];
2499 [label="param FromSyntax(bool inUsing) 709070"];
2500 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 709071"];
2501 [label="usingDirectives 709072"];
2502 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 709073"];
2503 [label="externAliasDirectives 709074"];
2504 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 709075"];
2505 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 709076"];
2506 [label="inUsing 709077"];
2507 [label="compilationUnit.Usings 709078"];
2508 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 709079"];
2509 [label="externAliasDirectives = compilationUnit.Externs; 709080"];
2510 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 709081"];
2511 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 709082"];
2512 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 709083"];
2513 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 709084"];
2514 [label="return Empty; 709085"];
2515 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709086"];
2516 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709087"];
2517 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709088"];
2518 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709089"];
2519 [label="param LookupMembersInternal(int arity) 709090"];
2520 [label="param LookupMembersInternal(Binder originalBinder) 709091"];
2521 [label="param LookupMembersInternal(bool diagnose) 709092"];
2522 [label="Debug.Assert(options.AreValid()); 709093"];
2523 [label="options.AreValid() 709094"];
2524 [label="param AreValid(this LookupOptions options) 709095"];
2525 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 709096"];
2526 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 709097"];
2527 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 709098"];
2528 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 709099"];
2529 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 709100"];
2530 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 709101"];
2531 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 709102"];
2532 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 709103"];
2533 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 709104"];
2534 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 709105"];
2535 [label="return OnlyOneBitSet(onlyOptions); 709106"];
2536 [label="OnlyOneBitSet(onlyOptions) 709107"];
2537 [label="param OnlyOneBitSet(LookupOptions o) 709108"];
2538 [label="return (o & (o - 1)) == 0; 709109"];
2539 [label="return (o & (o - 1)) == 0; 709110"];
2540 [label="Debug.Assert(arity >= 0); 709111"];
2541 [label="Debug.Assert(arity >= 0); 709112"];
2542 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709113"];
2543 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709114"];
2544 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709115"];
2545 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709116"];
2546 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709117"];
2547 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 709118"];
2548 [label="param LookupMembersInNamespace(LookupResult result) 709119"];
2549 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 709120"];
2550 [label="param LookupMembersInNamespace(string name) 709121"];
2551 [label="param LookupMembersInNamespace(int arity) 709122"];
2552 [label="param LookupMembersInNamespace(LookupOptions options) 709123"];
2553 [label="param LookupMembersInNamespace(Binder originalBinder) 709124"];
2554 [label="param LookupMembersInNamespace(bool diagnose) 709125"];
2555 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709126"];
2556 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709127"];
2557 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709128"];
2558 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709129"];
2559 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709130"];
2560 [label="GetCandidateMembers(ns, name, options, originalBinder) 709131"];
2561 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 709132"];
2562 [label="param GetCandidateMembers(string name) 709133"];
2563 [label="param GetCandidateMembers(LookupOptions options) 709134"];
2564 [label="param GetCandidateMembers(Binder originalBinder) 709135"];
2565 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 709136"];
2566 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 709137"];
2567 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 709138"];
2568 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 709139"];
2569 [label="return nsOrType.GetMembers(name); 709140"];
2570 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 709141"];
2571 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709142"];
2572 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709143"];
2573 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709144"];
2574 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709145"];
2575 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709146"];
2576 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 709147"];
2577 [label="param CheckViability(Symbol symbol) 709148"];
2578 [label="param CheckViability(int arity) 709149"];
2579 [label="param CheckViability(LookupOptions options) 709150"];
2580 [label="param CheckViability(TypeSymbol accessThroughType) 709151"];
2581 [label="param CheckViability(bool diagnose) 709152"];
2582 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709153"];
2583 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709154"];
2584 [label="param CheckViability(this) 709155"];
2585 [label="bool inaccessibleViaQualifier; 709156"];
2586 [label="DiagnosticInfo diagInfo; 709157"];
2587 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 709158"];
2588 [label="symbol.Kind == SymbolKind.Alias 709159"];
2589 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709160"];
2590 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709161"];
2591 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709162"];
2592 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709163"];
2593 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709164"];
2594 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709165"];
2595 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709166"];
2596 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709167"];
2597 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 709168"];
2598 [label="param WrongArity(Symbol symbol) 709169"];
2599 [label="param WrongArity(int arity) 709170"];
2600 [label="param WrongArity(bool diagnose) 709171"];
2601 [label="param WrongArity(LookupOptions options) 709172"];
2602 [label="param WrongArity(out DiagnosticInfo diagInfo) 709173"];
2603 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 709174"];
2604 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 709175"];
2605 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 709176"];
2606 [label="diagInfo = null; 709177"];
2607 [label="return false; 709178"];
2608 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709179"];
2609 [label="InCref 709180"];
2610 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 709181"];
2611 [label="return this.Flags.Includes(BinderFlags.Cref); 709182"];
2612 [label="return this.Flags.Includes(BinderFlags.Cref); 709183"];
2613 [label="this.Flags.Includes(BinderFlags.Cref) 709184"];
2614 [label="param Includes(this BinderFlags self) 709185"];
2615 [label="param Includes(BinderFlags other) 709186"];
2616 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709187"];
2617 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709188"];
2618 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709189"];
2619 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709190"];
2620 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709191"];
2621 [label="InCref 709192"];
2622 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709193"];
2623 [label="InCref 709194"];
2624 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709195"];
2625 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709196"];
2626 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709197"];
2627 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709198"];
2628 [label="RefineAccessThroughType(options, accessThroughType) 709199"];
2629 [label="param RefineAccessThroughType(LookupOptions options) 709200"];
2630 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 709201"];
2631 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 709202"];
2632 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 709203"];
2633 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 709204"];
2634 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 709205"];
2635 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709206"];
2636 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709207"];
2637 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709208"];
2638 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 709209"];
2639 [label="param IsAccessible(Symbol symbol) 709210"];
2640 [label="param IsAccessible(TypeSymbol accessThroughType) 709211"];
2641 [label="param IsAccessible(out bool failedThroughTypeCheck) 709212"];
2642 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709213"];
2643 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 709214"];
2644 [label="param IsAccessible(this) 709215"];
2645 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709216"];
2646 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709217"];
2647 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709218"];
2648 [label="param Includes(this BinderFlags self) 709219"];
2649 [label="param Includes(BinderFlags other) 709220"];
2650 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709221"];
2651 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709222"];
2652 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709223"];
2653 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709224"];
2654 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709225"];
2655 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 709226"];
2656 [label="param IsAccessibleHelper(Symbol symbol) 709227"];
2657 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709228"];
2658 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709229"];
2659 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709230"];
2660 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 709231"];
2661 [label="param IsAccessibleHelper(this) 709232"];
2662 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709233"];
2663 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709234"];
2664 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709235"];
2665 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709236"];
2666 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709237"];
2667 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 709238"];
2668 [label="param IsAccessibleHelper(Symbol symbol) 709239"];
2669 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709240"];
2670 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709241"];
2671 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709242"];
2672 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 709243"];
2673 [label="param IsAccessibleHelper(this) 709244"];
2674 [label="var type = _container as NamedTypeSymbol; 709245"];
2675 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 709246"];
2676 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 709247"];
2677 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709248"];
2678 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709249"];
2679 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709250"];
2680 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709251"];
2681 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709252"];
2682 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709253"];
2683 [label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 709254"];
2684 [label="param IsSymbolAccessibleConditional(Symbol symbol) 709255"];
2685 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 709256"];
2686 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 709257"];
2687 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 709258"];
2688 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 709259"];
2689 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 709260"];
2690 [label="param IsSymbolAccessibleConditional(this) 709261"];
2691 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709262"];
2692 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709263"];
2693 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709264"];
2694 [label="param Includes(this BinderFlags self) 709265"];
2695 [label="param Includes(BinderFlags other) 709266"];
2696 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709267"];
2697 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709268"];
2698 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709269"];
2699 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709270"];
2700 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709271"];
2701 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709272"];
2702 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 709273"];
2703 [label="param IsSymbolAccessible(Symbol symbol) 709274"];
2704 [label="param IsSymbolAccessible(NamedTypeSymbol within) 709275"];
2705 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 709276"];
2706 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 709277"];
2707 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709278"];
2708 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 709279"];
2709 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709280"];
2710 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709281"];
2711 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709282"];
2712 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709283"];
2713 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709284"];
2714 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709285"];
2715 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709286"];
2716 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 709287"];
2717 [label="param IsSymbolAccessibleCore(Symbol symbol) 709288"];
2718 [label="param IsSymbolAccessibleCore(Symbol within) 709289"];
2719 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 709290"];
2720 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 709291"];
2721 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 709292"];
2722 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709293"];
2723 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 709294"];
2724 [label="Debug.Assert((object)symbol != null); 709295"];
2725 [label="Debug.Assert((object)symbol != null); 709296"];
2726 [label="Debug.Assert((object)within != null); 709297"];
2727 [label="Debug.Assert((object)within != null); 709298"];
2728 [label="Debug.Assert(within.IsDefinition); 709299"];
2729 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709300"];
2730 [label="failedThroughTypeCheck = false; 709301"];
2731 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 709302"];
2732 [label="return true; 709303"];
2733 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709304"];
2734 [label="InCref 709305"];
2735 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709306"];
2736 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709307"];
2737 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709308"];
2738 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709309"];
2739 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709310"];
2740 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709311"];
2741 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709312"];
2742 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709313"];
2743 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709314"];
2744 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709315"];
2745 [label="return LookupResult.Good(symbol); 709316"];
2746 [label="LookupResult.Good(symbol) 709317"];
2747 [label="param Good(Symbol symbol) 709318"];
2748 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 709319"];
2749 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 709320"];
2750 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 709321"];
2751 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 709322"];
2752 [label="param SingleLookupResult(LookupResultKind kind) 709323"];
2753 [label="param SingleLookupResult(Symbol symbol) 709324"];
2754 [label="param SingleLookupResult(DiagnosticInfo error) 709325"];
2755 [label="param SingleLookupResult(this) 709326"];
2756 [label="this.Kind 709327"];
2757 [label="this.Symbol 709328"];
2758 [label="this.Error 709329"];
2759 [label="return LookupResult.Good(symbol); 709330"];
2760 [label="result.MergeEqual(resultOfThisMember); 709331"];
2761 [label="result.MergeEqual(resultOfThisMember) 709332"];
2762 [label="param MergeEqual(SingleLookupResult result) 709333"];
2763 [label="param MergeEqual(this) 709334"];
2764 [label="Kind 709335"];
2765 [label="get\n            {\n                return _kind;\n            } 709336"];
2766 [label="return _kind; 709337"];
2767 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709338"];
2768 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709339"];
2769 [label="Kind 709340"];
2770 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709341"];
2771 [label="this.SetFrom(result); 709342"];
2772 [label="this.SetFrom(result) 709343"];
2773 [label="param SetFrom(SingleLookupResult other) 709344"];
2774 [label="param SetFrom(this) 709345"];
2775 [label="_kind 709346"];
2776 [label="_symbolList.Clear(); 709347"];
2777 [label="_symbolList.Add(other.Symbol); 709348"];
2778 [label="_symbolList.Add(other.Symbol); 709349"];
2779 [label="_error 709350"];
2780 [label="this.SetFrom(result); 709351"];
2781 [label="result.MergeEqual(resultOfThisMember); 709352"];
2782 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 709353"];
2783 [label="result.IsMultiViable 709354"];
2784 [label="return _kind; 709355"];
2785 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 709356"];
2786 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 709357"];
2787 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 709358"];
2788 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 709359"];
2789 [label="originalBinder.IsSemanticModelBinder 709360"];
2790 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 709361"];
2791 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 709362"];
2792 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 709363"];
2793 [label="this.Flags.Includes(BinderFlags.SemanticModel) 709364"];
2794 [label="param Includes(this BinderFlags self) 709365"];
2795 [label="param Includes(BinderFlags other) 709366"];
2796 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 709367"];
2797 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 709368"];
2798 [label="param IsUsingAlias(string name) 709369"];
2799 [label="param IsUsingAlias(bool callerIsSemanticModel) 709370"];
2800 [label="param IsUsingAlias(this) 709371"];
2801 [label="AliasAndUsingDirective node; 709372"];
2802 [label="node 709373"];
2803 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 709374"];
2804 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 709375"];
2805 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 709376"];
2806 [label="return false; 709377"];
2807 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 709378"];
2808 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 709379"];
2809 [label="return; 709380"];
2810 [label="result.IsClear 709381"];
2811 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 709382"];
2812 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709383"];
2813 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 709384"];
2814 [label="binder = scope; 709385"];
2815 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 709386"];
2816 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 709387"];
2817 [label="return binder; 709388"];
2818 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709389"];
2819 [label="diagnostics.Add(node, useSiteDiagnostics); 709390"];
2820 [label="diagnostics.Add(node, useSiteDiagnostics); 709391"];
2821 [label="diagnostics.Add(node, useSiteDiagnostics); 709392"];
2822 [label="diagnostics.Add(node, useSiteDiagnostics); 709393"];
2823 [label="Symbol bindingResult = null; 709394"];
2824 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 709395"];
2825 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 709396"];
2826 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 709397"];
2827 [label="IsViableType(result) 709398"];
2828 [label="param IsViableType(LookupResult result) 709399"];
2829 [label="result.IsMultiViable 709400"];
2830 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 709401"];
2831 [label="Kind 709402"];
2832 [label="get\n            {\n                return _kind;\n            } 709403"];
2833 [label="return _kind; 709404"];
2834 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 709405"];
2835 [label="result.Symbols 709406"];
2836 [label="get\n            {\n                return _symbolList;\n            } 709407"];
2837 [label="return _symbolList; 709408"];
2838 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 709409"];
2839 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 709410"];
2840 [label="return false; 709411"];
2841 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 709412"];
2842 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 709413"];
2843 [label="if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                } 709414"];
2844 [label="if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                } 709415"];
2845 [label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 709416"];
2846 [label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 709417"];
2847 [label="BindNativeIntegerSymbolIfAny(node, diagnostics) 709418"];
2848 [label="param BindNativeIntegerSymbolIfAny(IdentifierNameSyntax node) 709419"];
2849 [label="param BindNativeIntegerSymbolIfAny(DiagnosticBag diagnostics) 709420"];
2850 [label="param BindNativeIntegerSymbolIfAny(this) 709421"];
2851 [label="SpecialType specialType; 709422"];
2852 [label="switch (node.Identifier.Text)\n            {\n                case 'nint':\n                    specialType = SpecialType.System_IntPtr;\n                    break;\n                case 'nuint':\n                    specialType = SpecialType.System_UIntPtr;\n                    break;\n                default:\n                    return null;\n            } 709423"];
2853 [label="return null; 709424"];
2854 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 709425"];
2855 [label="bool wasError; 709426"];
2856 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709427"];
2857 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709428"];
2858 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709429"];
2859 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709430"];
2860 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709431"];
2861 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709432"];
2862 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709433"];
2863 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709434"];
2864 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709435"];
2865 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 709436"];
2866 [label="param ResultSymbol(LookupResult result) 709437"];
2867 [label="param ResultSymbol(string simpleName) 709438"];
2868 [label="param ResultSymbol(int arity) 709439"];
2869 [label="param ResultSymbol(SyntaxNode where) 709440"];
2870 [label="param ResultSymbol(DiagnosticBag diagnostics) 709441"];
2871 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 709442"];
2872 [label="param ResultSymbol(out bool wasError) 709443"];
2873 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 709444"];
2874 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 709445"];
2875 [label="param ResultSymbol(this) 709446"];
2876 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709447"];
2877 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709448"];
2878 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709449"];
2879 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709450"];
2880 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709451"];
2881 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709452"];
2882 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709453"];
2883 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709454"];
2884 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709455"];
2885 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 709456"];
2886 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709457"];
2887 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709458"];
2888 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709459"];
2889 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709460"];
2890 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709461"];
2891 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709462"];
2892 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709463"];
2893 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709464"];
2894 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709465"];
2895 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 709466"];
2896 [label="Debug.Assert(where != null); 709467"];
2897 [label="Debug.Assert(where != null); 709468"];
2898 [label="Debug.Assert(diagnostics != null); 709469"];
2899 [label="Debug.Assert(diagnostics != null); 709470"];
2900 [label="result.Symbols 709471"];
2901 [label="get\n            {\n                return _symbolList;\n            } 709472"];
2902 [label="return _symbolList; 709473"];
2903 [label="var symbols = result.Symbols; 709474"];
2904 [label="wasError = false; 709475"];
2905 [label="result.IsMultiViable 709476"];
2906 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 709477"];
2907 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 709478"];
2908 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 709479"];
2909 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 709480"];
2910 [label="var singleResult = symbols[0]; 709481"];
2911 [label="var singleType = singleResult as TypeSymbol; 709482"];
2912 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 709483"];
2913 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 709484"];
2914 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 709485"];
2915 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 709486"];
2916 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 709487"];
2917 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 709488"];
2918 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 709489"];
2919 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 709490"];
2920 [label="param ReportUseSiteDiagnostics(Symbol symbol) 709491"];
2921 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 709492"];
2922 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 709493"];
2923 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 709494"];
2924 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 709495"];
2925 [label="return singleResult; 709496"];
2926 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 709497"];
2927 [label="return symbol; 709498"];
2928 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 709499"];
2929 [label="result.Free() 709500"];
2930 [label="param Free(this) 709501"];
2931 [label="this.Clear() 709502"];
2932 [label="param Clear(this) 709503"];
2933 [label="_kind 709504"];
2934 [label="_symbolList.Clear(); 709505"];
2935 [label="_error = null; 709506"];
2936 [label="_error 709507"];
2937 [label="this.Clear(); 709508"];
2938 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 709509"];
2939 [label="result.Free(); 709510"];
2940 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 709511"];
2941 [label="AreNullableAnnotationsEnabled(node.Identifier) 709512"];
2942 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 709513"];
2943 [label="param AreNullableAnnotationsEnabled(this) 709514"];
2944 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 709515"];
2945 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 709516"];
2946 [label="param CreateUnannotated(bool isNullableEnabled) 709517"];
2947 [label="param CreateUnannotated(Symbol symbol) 709518"];
2948 [label="if (symbol is null)\n                {\n                    return default;\n                } 709519"];
2949 [label="var type = symbol as TypeSymbol; 709520"];
2950 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 709521"];
2951 [label="type is null 709522"];
2952 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 709523"];
2953 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 709524"];
2954 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 709525"];
2955 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 709526"];
2956 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 709527"];
2957 [label="Debug.Assert(!(symbol is TypeSymbol)); 709528"];
2958 [label="_typeWithAnnotations = default; 709529"];
2959 [label="_typeWithAnnotations 709530"];
2960 [label="_symbol 709531"];
2961 [label="_isNullableEnabled 709532"];
2962 [label="result.IsDefault 709533"];
2963 [label="=> !_typeWithAnnotations.HasType && _symbol is null 709534"];
2964 [label="_symbol is null 709535"];
2965 [label="!_typeWithAnnotations.HasType && _symbol is null 709536"];
2966 [label="Debug.Assert(!result.IsDefault); 709537"];
2967 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709538"];
2968 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709539"];
2969 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709540"];
2970 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709541"];
2971 [label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 709542"];
2972 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 709543"];
2973 [label="param UnwrapAlias(DiagnosticBag diagnostics) 709544"];
2974 [label="param UnwrapAlias(SyntaxNode syntax) 709545"];
2975 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 709546"];
2976 [label="param UnwrapAlias(this) 709547"];
2977 [label="symbol.IsAlias 709548"];
2978 [label="=> _symbol?.Kind == SymbolKind.Alias 709549"];
2979 [label="_symbol?.Kind == SymbolKind.Alias 709550"];
2980 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 709551"];
2981 [label="BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol 709552"];
2982 [label="=> Symbol as NamespaceOrTypeSymbol 709553"];
2983 [label="Symbol 709554"];
2984 [label="=> _symbol ?? TypeWithAnnotations.Type 709555"];
2985 [label="_symbol ?? TypeWithAnnotations.Type 709556"];
2986 [label="Symbol as NamespaceOrTypeSymbol 709557"];
2987 [label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709558"];
2988 [label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709559"];
2989 [label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709560"];
2990 [label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709561"];
2991 [label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false) 709562"];
2992 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 709563"];
2993 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 709564"];
2994 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 709565"];
2995 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 709566"];
2996 [label="param ReportDiagnosticsIfObsolete(this) 709567"];
2997 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 709568"];
2998 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 709569"];
2999 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 709570"];
3000 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 709571"];
3001 [label="bool isLeftUnboundGenericType = left.Kind == SymbolKind.NamedType &&\n                ((NamedTypeSymbol)left).IsUnboundGenericType; 709572"];
3002 [label="if (isLeftUnboundGenericType)\n            {\n                // If left name bound to an unbound generic type,\n                // we want to perform right name lookup within\n                // left's original named type definition.\n                left = ((NamedTypeSymbol)left).OriginalDefinition;\n            } 709573"];
3003 [label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709574"];
3004 [label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709575"];
3005 [label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709576"];
3006 [label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709577"];
3007 [label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709578"];
3008 [label="this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left) 709579"];
3009 [label="param BindSimpleNamespaceOrTypeOrAliasSymbol(SimpleNameSyntax syntax) 709580"];
3010 [label="param BindSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 709581"];
3011 [label="param BindSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 709582"];
3012 [label="param BindSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 709583"];
3013 [label="param BindSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 709584"];
3014 [label="param BindSimpleNamespaceOrTypeOrAliasSymbol(this) 709585"];
3015 [label="switch (syntax.Kind())\n            {\n                default:\n                    return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(qualifierOpt ?? this.Compilation.Assembly.GlobalNamespace, string.Empty, arity: 0, errorInfo: null));\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt);\n            } 709586"];
3016 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709587"];
3017 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709588"];
3018 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709589"];
3019 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709590"];
3020 [label="BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt) 709591"];
3021 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(GenericNameSyntax node) 709592"];
3022 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 709593"];
3023 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 709594"];
3024 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 709595"];
3025 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 709596"];
3026 [label="var plainName = node.Identifier.ValueText; 709597"];
3027 [label="SeparatedSyntaxList<TypeSyntax> typeArguments = node.TypeArgumentList.Arguments; 709598"];
3028 [label="bool isUnboundTypeExpr = node.IsUnboundGenericName; 709599"];
3029 [label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 709600"];
3030 [label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 709601"];
3031 [label="GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false) 709602"];
3032 [label="param GetSimpleNameLookupOptions(NameSyntax node) 709603"];
3033 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 709604"];
3034 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709605"];
3035 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709606"];
3036 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709607"];
3037 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709608"];
3038 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709609"];
3039 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709610"];
3040 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709611"];
3041 [label="LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options) 709612"];
3042 [label="param LookupGenericTypeName(DiagnosticBag diagnostics) 709613"];
3043 [label="param LookupGenericTypeName(ConsList<TypeSymbol> basesBeingResolved) 709614"];
3044 [label="param LookupGenericTypeName(NamespaceOrTypeSymbol qualifierOpt) 709615"];
3045 [label="param LookupGenericTypeName(GenericNameSyntax node) 709616"];
3046 [label="param LookupGenericTypeName(string plainName) 709617"];
3047 [label="param LookupGenericTypeName(int arity) 709618"];
3048 [label="param LookupGenericTypeName(LookupOptions options) 709619"];
3049 [label="param LookupGenericTypeName(this) 709620"];
3050 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709621"];
3051 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709622"];
3052 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709623"];
3053 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709624"];
3054 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709625"];
3055 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics) 709626"];
3056 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 709627"];
3057 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 709628"];
3058 [label="param CreateErrorIfLookupOnTypeParameter(string name) 709629"];
3059 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 709630"];
3060 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 709631"];
3061 [label="param CreateErrorIfLookupOnTypeParameter(this) 709632"];
3062 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 709633"];
3063 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 709634"];
3064 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 709635"];
3065 [label="return null; 709636"];
3066 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709637"];
3067 [label="if ((object)errorResult != null)\n            {\n                return errorResult;\n            } 709638"];
3068 [label="if ((object)errorResult != null)\n            {\n                return errorResult;\n            } 709639"];
3069 [label="LookupResult.GetInstance() 709640"];
3070 [label="var instance = s_poolInstance.Allocate(); 709641"];
3071 [label="instance.IsClear 709642"];
3072 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 709643"];
3073 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709644"];
3074 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709645"];
3075 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709646"];
3076 [label="Debug.Assert(instance.IsClear); 709647"];
3077 [label="var lookupResult = LookupResult.GetInstance(); 709648"];
3078 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 709649"];
3079 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709650"];
3080 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709651"];
3081 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709652"];
3082 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709653"];
3083 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709654"];
3084 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709655"];
3085 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709656"];
3086 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709657"];
3087 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 709658"];
3088 [label="param LookupSymbolsSimpleName(LookupResult result) 709659"];
3089 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 709660"];
3090 [label="param LookupSymbolsSimpleName(string plainName) 709661"];
3091 [label="param LookupSymbolsSimpleName(int arity) 709662"];
3092 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 709663"];
3093 [label="param LookupSymbolsSimpleName(LookupOptions options) 709664"];
3094 [label="param LookupSymbolsSimpleName(bool diagnose) 709665"];
3095 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709666"];
3096 [label="param LookupSymbolsSimpleName(this) 709667"];
3097 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709668"];
3098 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709669"];
3099 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709670"];
3100 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709671"];
3101 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709672"];
3102 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709673"];
3103 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709674"];
3104 [label="param LookupSymbolsOrMembersInternal(int arity) 709675"];
3105 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 709676"];
3106 [label="param LookupSymbolsOrMembersInternal(this) 709677"];
3107 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709678"];
3108 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709679"];
3109 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709680"];
3110 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709681"];
3111 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709682"];
3112 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709683"];
3113 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709684"];
3114 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709685"];
3115 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709686"];
3116 [label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 709687"];
3117 [label="param LookupMembersInternal(LookupResult result) 709688"];
3118 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 709689"];
3119 [label="param LookupMembersInternal(string name) 709690"];
3120 [label="param LookupMembersInternal(int arity) 709691"];
3121 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 709692"];
3122 [label="param LookupMembersInternal(LookupOptions options) 709693"];
3123 [label="param LookupMembersInternal(Binder originalBinder) 709694"];
3124 [label="param LookupMembersInternal(bool diagnose) 709695"];
3125 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709696"];
3126 [label="param LookupMembersInternal(this) 709697"];
3127 [label="Debug.Assert(options.AreValid()); 709698"];
3128 [label="options.AreValid() 709699"];
3129 [label="param AreValid(this LookupOptions options) 709700"];
3130 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 709701"];
3131 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 709702"];
3132 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 709703"];
3133 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 709704"];
3134 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 709705"];
3135 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 709706"];
3136 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 709707"];
3137 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 709708"];
3138 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 709709"];
3139 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 709710"];
3140 [label="return OnlyOneBitSet(onlyOptions); 709711"];
3141 [label="OnlyOneBitSet(onlyOptions) 709712"];
3142 [label="param OnlyOneBitSet(LookupOptions o) 709713"];
3143 [label="return (o & (o - 1)) == 0; 709714"];
3144 [label="return (o & (o - 1)) == 0; 709715"];
3145 [label="Debug.Assert(arity >= 0); 709716"];
3146 [label="Debug.Assert(arity >= 0); 709717"];
3147 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 709718"];
3148 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709719"];
3149 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709720"];
3150 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709721"];
3151 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709722"];
3152 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709723"];
3153 [label="param LookupMembersInNamespace(int arity) 709724"];
3154 [label="param LookupMembersInNamespace(bool diagnose) 709725"];
3155 [label="param GetCandidateMembers(Binder originalBinder) 709726"];
3156 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709727"];
3157 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709728"];
3158 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709729"];
3159 [label="param CheckViability(int arity) 709730"];
3160 [label="param CheckViability(TypeSymbol accessThroughType) 709731"];
3161 [label="param CheckViability(bool diagnose) 709732"];
3162 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709733"];
3163 [label="param CheckViability(this) 709734"];
3164 [label="bool inaccessibleViaQualifier; 709735"];
3165 [label="DiagnosticInfo diagInfo; 709736"];
3166 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709737"];
3167 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709738"];
3168 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709739"];
3169 [label="param WrongArity(Symbol symbol) 709740"];
3170 [label="param WrongArity(int arity) 709741"];
3171 [label="param WrongArity(bool diagnose) 709742"];
3172 [label="param WrongArity(LookupOptions options) 709743"];
3173 [label="param WrongArity(out DiagnosticInfo diagInfo) 709744"];
3174 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 709745"];
3175 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 709746"];
3176 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 709747"];
3177 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 709748"];
3178 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709749"];
3179 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709750"];
3180 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 709751"];
3181 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 709752"];
3182 [label="options.IsAttributeTypeLookup() 709753"];
3183 [label="param IsAttributeTypeLookup(this LookupOptions options) 709754"];
3184 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 709755"];
3185 [label="diagInfo = null; 709756"];
3186 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709757"];
3187 [label="RefineAccessThroughType(options, accessThroughType) 709758"];
3188 [label="param RefineAccessThroughType(LookupOptions options) 709759"];
3189 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 709760"];
3190 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 709761"];
3191 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 709762"];
3192 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 709763"];
3193 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 709764"];
3194 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709765"];
3195 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709766"];
3196 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 709767"];
3197 [label="param IsAccessible(TypeSymbol accessThroughType) 709768"];
3198 [label="param IsAccessible(out bool failedThroughTypeCheck) 709769"];
3199 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 709770"];
3200 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709771"];
3201 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709772"];
3202 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709773"];
3203 [label="param Includes(this BinderFlags self) 709774"];
3204 [label="param Includes(BinderFlags other) 709775"];
3205 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709776"];
3206 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709777"];
3207 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 709778"];
3208 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709779"];
3209 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709780"];
3210 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 709781"];
3211 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 709782"];
3212 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 709783"];
3213 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 709784"];
3214 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 709785"];
3215 [label="param IsSymbolAccessibleConditional(this) 709786"];
3216 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709787"];
3217 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 709788"];
3218 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709789"];
3219 [label="param Includes(this BinderFlags self) 709790"];
3220 [label="param Includes(BinderFlags other) 709791"];
3221 [label="param IsSymbolAccessible(NamedTypeSymbol within) 709792"];
3222 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 709793"];
3223 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 709794"];
3224 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 709795"];
3225 [label="param IsSymbolAccessibleCore(Symbol within) 709796"];
3226 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 709797"];
3227 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 709798"];
3228 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 709799"];
3229 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 709800"];
3230 [label="Debug.Assert((object)symbol != null); 709801"];
3231 [label="Debug.Assert((object)within != null); 709802"];
3232 [label="Debug.Assert((object)within != null); 709803"];
3233 [label="Debug.Assert(within.IsDefinition); 709804"];
3234 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709805"];
3235 [label="failedThroughTypeCheck = false; 709806"];
3236 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709807"];
3237 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709808"];
3238 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709809"];
3239 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709810"];
3240 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 709811"];
3241 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 709812"];
3242 [label="param IsNamedTypeAccessible(Symbol within) 709813"];
3243 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 709814"];
3244 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 709815"];
3245 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709816"];
3246 [label="Debug.Assert((object)type != null); 709817"];
3247 [label="Debug.Assert((object)type != null); 709818"];
3248 [label="var compilation = within.DeclaringCompilation; 709819"];
3249 [label="bool unused; 709820"];
3250 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 709821"];
3251 [label="var containingType = type.ContainingType; 709822"];
3252 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 709823"];
3253 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 709824"];
3254 [label="(object)containingType == null 709825"];
3255 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 709826"];
3256 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 709827"];
3257 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 709828"];
3258 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 709829"];
3259 [label="param IsNonNestedTypeAccessible(Symbol within) 709830"];
3260 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709831"];
3261 [label="Debug.Assert((object)assembly != null); 709832"];
3262 [label="Debug.Assert((object)assembly != null); 709833"];
3263 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 709834"];
3264 [label="return true; 709835"];
3265 [label="param MergeEqual(this) 709836"];
3266 [label="return _kind; 709837"];
3267 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709838"];
3268 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709839"];
3269 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709840"];
3270 [label="param CheckViability(int arity) 709841"];
3271 [label="param CheckViability(TypeSymbol accessThroughType) 709842"];
3272 [label="param CheckViability(bool diagnose) 709843"];
3273 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709844"];
3274 [label="bool inaccessibleViaQualifier; 709845"];
3275 [label="DiagnosticInfo diagInfo; 709846"];
3276 [label="param WrongArity(Symbol symbol) 709847"];
3277 [label="param WrongArity(int arity) 709848"];
3278 [label="param WrongArity(bool diagnose) 709849"];
3279 [label="param WrongArity(LookupOptions options) 709850"];
3280 [label="param WrongArity(out DiagnosticInfo diagInfo) 709851"];
3281 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 709852"];
3282 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 709853"];
3283 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 709854"];
3284 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 709855"];
3285 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709856"];
3286 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709857"];
3287 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 709858"];
3288 [label="if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            } 709859"];
3289 [label="diagnose 709860"];
3290 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 709861"];
3291 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 709862"];
3292 [label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 709863"];
3293 [label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 709864"];
3294 [label="return true; 709865"];
3295 [label="return LookupResult.WrongArity(symbol, diagInfo); 709866"];
3296 [label="return LookupResult.WrongArity(symbol, diagInfo); 709867"];
3297 [label="LookupResult.WrongArity(symbol, diagInfo) 709868"];
3298 [label="param WrongArity(Symbol symbol) 709869"];
3299 [label="param WrongArity(DiagnosticInfo error) 709870"];
3300 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709871"];
3301 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709872"];
3302 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709873"];
3303 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709874"];
3304 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709875"];
3305 [label="param SingleLookupResult(LookupResultKind kind) 709876"];
3306 [label="param SingleLookupResult(Symbol symbol) 709877"];
3307 [label="param SingleLookupResult(DiagnosticInfo error) 709878"];
3308 [label="param SingleLookupResult(this) 709879"];
3309 [label="return LookupResult.WrongArity(symbol, diagInfo); 709880"];
3310 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709881"];
3311 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709882"];
3312 [label="param CheckViability(TypeSymbol accessThroughType) 709883"];
3313 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709884"];
3314 [label="bool inaccessibleViaQualifier; 709885"];
3315 [label="DiagnosticInfo diagInfo; 709886"];
3316 [label="param WrongArity(LookupOptions options) 709887"];
3317 [label="param WrongArity(out DiagnosticInfo diagInfo) 709888"];
3318 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709889"];
3319 [label="diagnose 709890"];
3320 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 709891"];
3321 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 709892"];
3322 [label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 709893"];
3323 [label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 709894"];
3324 [label="return true; 709895"];
3325 [label="return LookupResult.WrongArity(symbol, diagInfo); 709896"];
3326 [label="return LookupResult.WrongArity(symbol, diagInfo); 709897"];
3327 [label="LookupResult.WrongArity(symbol, diagInfo) 709898"];
3328 [label="param WrongArity(Symbol symbol) 709899"];
3329 [label="param WrongArity(DiagnosticInfo error) 709900"];
3330 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709901"];
3331 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709902"];
3332 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709903"];
3333 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709904"];
3334 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709905"];
3335 [label="param SingleLookupResult(LookupResultKind kind) 709906"];
3336 [label="param SingleLookupResult(Symbol symbol) 709907"];
3337 [label="param SingleLookupResult(DiagnosticInfo error) 709908"];
3338 [label="param SingleLookupResult(this) 709909"];
3339 [label="return LookupResult.WrongArity(symbol, diagInfo); 709910"];
3340 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709911"];
3341 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709912"];
3342 [label="param CheckViability(TypeSymbol accessThroughType) 709913"];
3343 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709914"];
3344 [label="bool inaccessibleViaQualifier; 709915"];
3345 [label="DiagnosticInfo diagInfo; 709916"];
3346 [label="param WrongArity(LookupOptions options) 709917"];
3347 [label="param WrongArity(out DiagnosticInfo diagInfo) 709918"];
3348 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709919"];
3349 [label="return true; 709920"];
3350 [label="return LookupResult.WrongArity(symbol, diagInfo); 709921"];
3351 [label="LookupResult.WrongArity(symbol, diagInfo) 709922"];
3352 [label="param WrongArity(Symbol symbol) 709923"];
3353 [label="param WrongArity(DiagnosticInfo error) 709924"];
3354 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709925"];
3355 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709926"];
3356 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709927"];
3357 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709928"];
3358 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709929"];
3359 [label="param SingleLookupResult(LookupResultKind kind) 709930"];
3360 [label="param SingleLookupResult(Symbol symbol) 709931"];
3361 [label="param SingleLookupResult(DiagnosticInfo error) 709932"];
3362 [label="param SingleLookupResult(this) 709933"];
3363 [label="return LookupResult.WrongArity(symbol, diagInfo); 709934"];
3364 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709935"];
3365 [label="param WrongArity(LookupOptions options) 709936"];
3366 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709937"];
3367 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709938"];
3368 [label="return true; 709939"];
3369 [label="return LookupResult.WrongArity(symbol, diagInfo); 709940"];
3370 [label="return LookupResult.WrongArity(symbol, diagInfo); 709941"];
3371 [label="LookupResult.WrongArity(symbol, diagInfo) 709942"];
3372 [label="param WrongArity(Symbol symbol) 709943"];
3373 [label="param WrongArity(DiagnosticInfo error) 709944"];
3374 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709945"];
3375 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709946"];
3376 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709947"];
3377 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709948"];
3378 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709949"];
3379 [label="param SingleLookupResult(LookupResultKind kind) 709950"];
3380 [label="param SingleLookupResult(Symbol symbol) 709951"];
3381 [label="param SingleLookupResult(DiagnosticInfo error) 709952"];
3382 [label="param SingleLookupResult(this) 709953"];
3383 [label="return LookupResult.WrongArity(symbol, diagInfo); 709954"];
3384 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709955"];
3385 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709956"];
3386 [label="param CheckViability(TypeSymbol accessThroughType) 709957"];
3387 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709958"];
3388 [label="bool inaccessibleViaQualifier; 709959"];
3389 [label="param WrongArity(LookupOptions options) 709960"];
3390 [label="param WrongArity(out DiagnosticInfo diagInfo) 709961"];
3391 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709962"];
3392 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709963"];
3393 [label="return LookupResult.WrongArity(symbol, diagInfo); 709964"];
3394 [label="param WrongArity(Symbol symbol) 709965"];
3395 [label="param WrongArity(DiagnosticInfo error) 709966"];
3396 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709967"];
3397 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709968"];
3398 [label="param SingleLookupResult(Symbol symbol) 709969"];
3399 [label="param SingleLookupResult(DiagnosticInfo error) 709970"];
3400 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709971"];
3401 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709972"];
3402 [label="param CheckViability(TypeSymbol accessThroughType) 709973"];
3403 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 709974"];
3404 [label="bool inaccessibleViaQualifier; 709975"];
3405 [label="param WrongArity(LookupOptions options) 709976"];
3406 [label="param WrongArity(out DiagnosticInfo diagInfo) 709977"];
3407 [label="param WrongArity(Symbol symbol) 709978"];
3408 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709979"];
3409 [label="param SingleLookupResult(Symbol symbol) 709980"];
3410 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 709981"];
3411 [label="diagnostics.Add(node, useSiteDiagnostics); 709982"];
3412 [label="diagnostics.Add(node, useSiteDiagnostics); 709983"];
3413 [label="diagnostics.Add(node, useSiteDiagnostics); 709984"];
3414 [label="diagnostics.Add(node, useSiteDiagnostics); 709985"];
3415 [label="bool wasError; 709986"];
3416 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709987"];
3417 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709988"];
3418 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709989"];
3419 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709990"];
3420 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709991"];
3421 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709992"];
3422 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709993"];
3423 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709994"];
3424 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709995"];
3425 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709996"];
3426 [label="ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options) 709997"];
3427 [label="param ResultSymbol(LookupResult result) 709998"];
3428 [label="param ResultSymbol(string simpleName) 709999"];
3429 [label="param ResultSymbol(int arity) 710000"];
3430 [label="param ResultSymbol(SyntaxNode where) 710001"];
3431 [label="param ResultSymbol(DiagnosticBag diagnostics) 710002"];
3432 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 710003"];
3433 [label="param ResultSymbol(out bool wasError) 710004"];
3434 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 710005"];
3435 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 710006"];
3436 [label="param ResultSymbol(this) 710007"];
3437 [label="Debug.Assert(where != null); 710008"];
3438 [label="Debug.Assert(where != null); 710009"];
3439 [label="Debug.Assert(diagnostics != null); 710010"];
3440 [label="Debug.Assert(diagnostics != null); 710011"];
3441 [label="return _symbolList; 710012"];
3442 [label="wasError = false; 710013"];
3443 [label="return _kind; 710014"];
3444 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 710015"];
3445 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 710016"];
3446 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 710017"];
3447 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 710018"];
3448 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 710019"];
3449 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 710020"];
3450 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 710021"];
3451 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 710022"];
3452 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 710023"];
3453 [label="Debug.Assert(symbol is object); 710024"];
3454 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 710025"];
3455 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 710026"];
3456 [label="symbol = symbol.ContainingType; 710027"];
3457 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 710028"];
3458 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 710029"];
3459 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 710030"];
3460 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710031"];
3461 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710032"];
3462 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710033"];
3463 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710034"];
3464 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 710035"];
3465 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 710036"];
3466 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 710037"];
3467 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 710038"];
3468 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 710039"];
3469 [label="param CheckRuntimeSupportForSymbolAccess(this) 710040"];
3470 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 710041"];
3471 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 710042"];
3472 [label="NamedTypeSymbol type = lookupResultSymbol as NamedTypeSymbol; 710043"];
3473 [label="if ((object)type == null)\n            {\n                // We did a lookup with a generic arity, filtered to types and namespaces. If\n                // we got back something other than a type, there had better be an error info\n                // for us.\n                Debug.Assert(lookupResult.Error != null);\n                type = new ExtendedErrorTypeSymbol(\n                    GetContainingNamespaceOrType(lookupResultSymbol),\n                    ImmutableArray.Create<Symbol>(lookupResultSymbol),\n                    lookupResult.Kind,\n                    lookupResult.Error,\n                    arity);\n            } 710044"];
3474 [label="if ((object)type == null)\n            {\n                // We did a lookup with a generic arity, filtered to types and namespaces. If\n                // we got back something other than a type, there had better be an error info\n                // for us.\n                Debug.Assert(lookupResult.Error != null);\n                type = new ExtendedErrorTypeSymbol(\n                    GetContainingNamespaceOrType(lookupResultSymbol),\n                    ImmutableArray.Create<Symbol>(lookupResultSymbol),\n                    lookupResult.Kind,\n                    lookupResult.Error,\n                    arity);\n            } 710045"];
3475 [label="lookupResult.Free() 710046"];
3476 [label="param Free(this) 710047"];
3477 [label="_symbolList.Clear(); 710048"];
3478 [label="this.Clear(); 710049"];
3479 [label="lookupResult.Free(); 710050"];
3480 [label="return type; 710051"];
3481 [label="NamedTypeSymbol resultType; 710052"];
3482 [label="if (isUnboundTypeExpr)\n            {\n                if (!IsUnboundTypeAllowed(node))\n                {\n                    // If we already have an error type then skip reporting that the unbound type is illegal.\n                    if (!unconstructedType.IsErrorType())\n                    {\n                        // error CS7003: Unexpected use of an unbound generic name\n                        diagnostics.Add(ErrorCode.ERR_UnexpectedUnboundGenericName, node.Location);\n                    }\n\n                    resultType = unconstructedType.Construct(\n                        UnboundArgumentErrorTypeSymbol.CreateTypeArguments(\n                            unconstructedType.TypeParameters,\n                            node.Arity,\n                            errorInfo: null),\n                        unbound: false);\n                }\n                else\n                {\n                    resultType = unconstructedType.AsUnboundGenericType();\n                }\n            }\n            else if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)\n            {\n                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));\n            }\n            else\n            {\n                // It's not an unbound type expression, so we must have type arguments, and we have a\n                // generic type of the correct arity in hand (possibly an error type). Bind the type\n                // arguments and construct the final result.\n                resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics);\n            } 710053"];
3483 [label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)\n            {\n                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));\n            }\n            else\n            {\n                // It's not an unbound type expression, so we must have type arguments, and we have a\n                // generic type of the correct arity in hand (possibly an error type). Bind the type\n                // arguments and construct the final result.\n                resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics);\n            } 710054"];
3484 [label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)\n            {\n                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));\n            }\n            else\n            {\n                // It's not an unbound type expression, so we must have type arguments, and we have a\n                // generic type of the correct arity in hand (possibly an error type). Bind the type\n                // arguments and construct the final result.\n                resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics);\n            } 710055"];
3485 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 710056"];
3486 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 710057"];
3487 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 710058"];
3488 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 710059"];
3489 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 710060"];
3490 [label="BindTypeArguments(typeArguments, diagnostics, basesBeingResolved) 710061"];
3491 [label="param BindTypeArguments(SeparatedSyntaxList<TypeSyntax> typeArguments) 710062"];
3492 [label="param BindTypeArguments(DiagnosticBag diagnostics) 710063"];
3493 [label="param BindTypeArguments(ConsList<TypeSymbol> basesBeingResolved = null) 710064"];
3494 [label="param BindTypeArguments(this) 710065"];
3495 [label="Debug.Assert(typeArguments.Count > 0); 710066"];
3496 [label="Debug.Assert(typeArguments.Count > 0); 710067"];
3497 [label="var args = ArrayBuilder<TypeWithAnnotations>.GetInstance(); 710068"];
3498 [label="foreach (var argSyntax in typeArguments)\n            {\n                args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved));\n            } 710069"];
3499 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710070"];
3500 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710071"];
3501 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710072"];
3502 [label="BindTypeArgument(argSyntax, diagnostics, basesBeingResolved) 710073"];
3503 [label="param BindTypeArgument(TypeSyntax typeArgument) 710074"];
3504 [label="param BindTypeArgument(DiagnosticBag diagnostics) 710075"];
3505 [label="param BindTypeArgument(ConsList<TypeSymbol> basesBeingResolved = null) 710076"];
3506 [label="param BindTypeArgument(this) 710077"];
3507 [label="var binder = this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics); 710078"];
3508 [label="this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics) 710079"];
3509 [label="param WithAdditionalFlags(BinderFlags flags) 710080"];
3510 [label="param WithAdditionalFlags(this) 710081"];
3511 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 710082"];
3512 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 710083"];
3513 [label="this.Flags.Includes(flags) 710084"];
3514 [label="param Includes(this BinderFlags self) 710085"];
3515 [label="param Includes(BinderFlags other) 710086"];
3516 [label="return (self & other) == other; 710087"];
3517 [label="new Binder(this, this.Flags | flags) 710088"];
3518 [label="RoslynDebug.Assert(next != null); 710089"];
3519 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 710090"];
3520 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 710091"];
3521 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 710092"];
3522 [label="param Includes(this BinderFlags self) 710093"];
3523 [label="param Includes(BinderFlags other) 710094"];
3524 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 710095"];
3525 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 710096"];
3526 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 710097"];
3527 [label="param Includes(this BinderFlags self) 710098"];
3528 [label="param Includes(BinderFlags other) 710099"];
3529 [label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument\n                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)\n                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 710100"];
3530 [label="typeArgument.Kind() == SyntaxKind.OmittedTypeArgument 710101"];
3531 [label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument\n                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)\n                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 710102"];
3532 [label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument\n                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)\n                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 710103"];
3533 [label="binder.BindType(typeArgument, diagnostics, basesBeingResolved) 710104"];
3534 [label="param BindType(DiagnosticBag diagnostics) 710105"];
3535 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 710106"];
3536 [label="param BindType(bool suppressUseSiteDiagnostics = false) 710107"];
3537 [label="param BindType(this) 710108"];
3538 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 710109"];
3539 [label="Debug.Assert(diagnostics != null); 710110"];
3540 [label="Debug.Assert(diagnostics != null); 710111"];
3541 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 710112"];
3542 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 710113"];
3543 [label="param GetSpecialType(DiagnosticBag diagnostics) 710114"];
3544 [label="param GetSpecialType(SyntaxNode node) 710115"];
3545 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 710116"];
3546 [label="param GetSpecialType(SyntaxNode node) 710117"];
3547 [label="param GetSpecialType(DiagnosticBag diagnostics) 710118"];
3548 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 710119"];
3549 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 710120"];
3550 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 710121"];
3551 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 710122"];
3552 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 710123"];
3553 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 710124"];
3554 [label="Debug.Assert(typeWithAnnotations.HasType); 710125"];
3555 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 710126"];
3556 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710127"];
3557 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 710128"];
3558 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710129"];
3559 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710130"];
3560 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710131"];
3561 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710132"];
3562 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 710133"];
3563 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 710134"];
3564 [label="get\n            {\n                RoslynDebug.Assert(Next is object);\n                return Next.ContainingMemberOrLambda;\n            } 710135"];
3565 [label="RoslynDebug.Assert(Next is object); 710136"];
3566 [label="Next.ContainingMemberOrLambda 710137"];
3567 [label="get { return _containingMemberOrLambda; } 710138"];
3568 [label="return Next.ContainingMemberOrLambda; 710139"];
3569 [label="get\n            {\n                RoslynDebug.Assert(Next is object);\n                return Next.ContainingMemberOrLambda;\n            } 710140"];
3570 [label="get { return _containingMemberOrLambda; } 710141"];
3571 [label="return Next.ContainingMemberOrLambda; 710142"];
3572 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710143"];
3573 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710144"];
3574 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 710145"];
3575 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710146"];
3576 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710147"];
3577 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710148"];
3578 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 710149"];
3579 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 710150"];
3580 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 710151"];
3581 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 710152"];
3582 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 710153"];
3583 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 710154"];
3584 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 710155"];
3585 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 710156"];
3586 [label="RoslynDebug.Assert(diagnostics != null); 710157"];
3587 [label="RoslynDebug.Assert(diagnostics != null); 710158"];
3588 [label="DiagnosticInfo? info = null; 710159"];
3589 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 710160"];
3590 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 710161"];
3591 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 710162"];
3592 [label="return kind; 710163"];
3593 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 710164"];
3594 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 710165"];
3595 [label="param UnwrapAlias(DiagnosticBag diagnostics) 710166"];
3596 [label="param UnwrapAlias(SyntaxNode syntax) 710167"];
3597 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 710168"];
3598 [label="param UnwrapAlias(this) 710169"];
3599 [label="symbol.IsAlias 710170"];
3600 [label="=> _symbol?.Kind == SymbolKind.Alias 710171"];
3601 [label="_symbol 710172"];
3602 [label="_symbol?.Kind == SymbolKind.Alias 710173"];
3603 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 710174"];
3604 [label="return arg; 710175"];
3605 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710176"];
3606 [label="return args.ToImmutableAndFree(); 710177"];
3607 [label="ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics) 710178"];
3608 [label="param ConstructNamedType(NamedTypeSymbol type) 710179"];
3609 [label="param ConstructNamedType(SyntaxNode typeSyntax) 710180"];
3610 [label="param ConstructNamedType(SeparatedSyntaxList<TypeSyntax> typeArgumentsSyntax) 710181"];
3611 [label="param ConstructNamedType(ImmutableArray<TypeWithAnnotations> typeArguments) 710182"];
3612 [label="param ConstructNamedType(ConsList<TypeSymbol> basesBeingResolved) 710183"];
3613 [label="param ConstructNamedType(DiagnosticBag diagnostics) 710184"];
3614 [label="param ConstructNamedType(this) 710185"];
3615 [label="Debug.Assert(!typeArguments.IsEmpty); 710186"];
3616 [label="type = type.Construct(typeArguments); 710187"];
3617 [label="type = type.Construct(typeArguments); 710188"];
3618 [label="ShouldCheckConstraints 710189"];
3619 [label="get\n            {\n                return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks);\n            } 710190"];
3620 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 710191"];
3621 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 710192"];
3622 [label="this.Flags.Includes(BinderFlags.SuppressConstraintChecks) 710193"];
3623 [label="param Includes(this BinderFlags self) 710194"];
3624 [label="param Includes(BinderFlags other) 710195"];
3625 [label="if (ShouldCheckConstraints && ConstraintsHelper.RequiresChecking(type))\n            {\n                bool includeNullability = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes);\n                type.CheckConstraintsForNamedType(this.Conversions, includeNullability, typeSyntax, typeArgumentsSyntax, this.Compilation, basesBeingResolved, diagnostics);\n            } 710196"];
3626 [label="return type; 710197"];
3627 [label="if (options.IsAttributeTypeLookup())\n            {\n                // Generic type cannot be an attribute type.\n                // Parser error has already been reported, just wrap the result type with error type symbol.\n                Debug.Assert(unconstructedType.IsErrorType());\n                Debug.Assert(resultType.IsErrorType());\n                resultType = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(resultType), resultType,\n                    LookupResultKind.NotAnAttributeType, errorInfo: null);\n            } 710198"];
3628 [label="options.IsAttributeTypeLookup() 710199"];
3629 [label="param IsAttributeTypeLookup(this LookupOptions options) 710200"];
3630 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710201"];
3631 [label="AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken) 710202"];
3632 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 710203"];
3633 [label="param AreNullableAnnotationsEnabled(this) 710204"];
3634 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710205"];
3635 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710206"];
3636 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710207"];
3637 [label="Debug.Assert(typeWithAnnotations.HasType); 710208"];
3638 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 710209"];
3639 [label="if (isLeftUnboundGenericType)\n            {\n                return convertToUnboundGenericType();\n            } 710210"];
3640 [label="return right; 710211"];
3641 [label="!_typeWithAnnotations.IsDefault 710212"];
3642 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 710213"];
3643 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710214"];
3644 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710215"];
3645 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710216"];
3646 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710217"];
3647 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710218"];
3648 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710219"];
3649 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 710220"];
3650 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710221"];
3651 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710222"];
3652 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710223"];
3653 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 710224"];
3654 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 710225"];
3655 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 710226"];
3656 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 710227"];
3657 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 710228"];
3658 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 710229"];
3659 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 710230"];
3660 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 710231"];
3661 [label="RoslynDebug.Assert(diagnostics != null); 710232"];
3662 [label="RoslynDebug.Assert(diagnostics != null); 710233"];
3663 [label="DiagnosticInfo? info = null; 710234"];
3664 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 710235"];
3665 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 710236"];
3666 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 710237"];
3667 [label="return kind; 710238"];
3668 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 710239"];
3669 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 710240"];
3670 [label="=> _symbol?.Kind == SymbolKind.Alias 710241"];
3671 [label="_symbol 710242"];
3672 [label="_symbol?.Kind == SymbolKind.Alias 710243"];
3673 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 710244"];
3674 [label="null 710245"];
3675 [label="null 710246"];
3676 [label="new ConstantFieldsInProgress(null, null) 710247"];
3677 [label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 710248"];
3678 [label="param ConstantFieldsInProgress(HashSet<SourceFieldSymbolWithSyntaxReference> dependencies) 710249"];
3679 [label="param ConstantFieldsInProgress(this) 710250"];
3680 [label="_fieldOpt 710251"];
3681 [label="_dependencies 710252"];
3682 [label="_fieldOpt 710253"];
3683 [label="_dependencies 710254"];
3684 [label="Empty = new ConstantFieldsInProgress(null, null) 710255"];
3685 [label="get { return (object)_fieldOpt == null; } 710256"];
3686 [label="return (object)_fieldOpt == null; 710257"];
3687 [label="return (object)_fieldOpt == null; 710258"];
3688 [label="diagnostics.Verify(expected); 710259"];
3689 [label="diagnostics.Verify(expected); 710260"];
3690 [label="diagnostics.Verify(expected) 710261"];
3691 [label="param Verify(this ImmutableArray<Diagnostic> actual) 710262"];
3692 [label="param Verify(params DiagnosticDescription[] expected) 710263"];
3693 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 710264"];
3694 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 710265"];
3695 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 710266"];
3696 [label="param Verify(this IEnumerable<Diagnostic> actual) 710267"];
3697 [label="param Verify(params DiagnosticDescription[] expected) 710268"];
3698 [label="Verify(actual, expected, errorCodeOnly: false); 710269"];
3699 [label="Verify(actual, expected, errorCodeOnly: false); 710270"];
3700 [label="Verify(actual, expected, errorCodeOnly: false); 710271"];
3701 [label="Verify(actual, expected, errorCodeOnly: false) 710272"];
3702 [label="param Verify(IEnumerable<Diagnostic> actual) 710273"];
3703 [label="param Verify(DiagnosticDescription[] expected) 710274"];
3704 [label="param Verify(bool errorCodeOnly) 710275"];
3705 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 710276"];
3706 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 710277"];
3707 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 710278"];
3708 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 710279"];
3709 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 710280"];
3710 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 710281"];
3711 [label="=> _defaultSeverityOpt 710282"];
3712 [label="_defaultSeverityOpt 710283"];
3713 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 710284"];
3714 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 710285"];
3715 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 710286"];
3716 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 710287"];
3717 [label="=> _effectiveSeverityOpt 710288"];
3718 [label="_effectiveSeverityOpt 710289"];
3719 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 710290"];
3720 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 710291"];
3721 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 710292"];
3722 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 710293"];
3723 [label="param DiagnosticDescription(Diagnostic d) 710294"];
3724 [label="param DiagnosticDescription(bool errorCodeOnly) 710295"];
3725 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 710296"];
3726 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 710297"];
3727 [label="param DiagnosticDescription(this) 710298"];
3728 [label="_code 710299"];
3729 [label="_isWarningAsError 710300"];
3730 [label="_isSuppressed 710301"];
3731 [label="_squiggledText 710302"];
3732 [label="_arguments 710303"];
3733 [label="_startPosition 710304"];
3734 [label="_argumentOrderDoesNotMatter 710305"];
3735 [label="_errorCodeType 710306"];
3736 [label="_defaultSeverityOpt 710307"];
3737 [label="_effectiveSeverityOpt 710308"];
3738 [label="_syntaxPredicate 710309"];
3739 [label="_code 710310"];
3740 [label="_isWarningAsError 710311"];
3741 [label="_isSuppressed 710312"];
3742 [label="_location 710313"];
3743 [label="includeDefaultSeverity 710314"];
3744 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 710315"];
3745 [label="_defaultSeverityOpt 710316"];
3746 [label="includeEffectiveSeverity 710317"];
3747 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 710318"];
3748 [label="_effectiveSeverityOpt 710319"];
3749 [label="DiagnosticWithInfo dinfo = null; 710320"];
3750 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 710321"];
3751 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 710322"];
3752 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 710323"];
3753 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 710324"];
3754 [label="dinfo = d as DiagnosticWithInfo; 710325"];
3755 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 710326"];
3756 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 710327"];
3757 [label="_errorCodeType 710328"];
3758 [label="_code 710329"];
3759 [label="_ignoreArgumentsWhenComparing 710330"];
3760 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 710331"];
3761 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 710332"];
3762 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 710333"];
3763 [label="_squiggledText 710334"];
3764 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 710335"];
3765 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 710336"];
3766 [label="_arguments 710337"];
3767 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 710338"];
3768 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 710339"];
3769 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 710340"];
3770 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 710341"];
3771 [label="_startPosition 710342"];
3772 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 710343"];
3773 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 710344"];
3774 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 710345"];
3775 [label="int index = unmatched.IndexOf(d); 710346"];
3776 [label="int index = unmatched.IndexOf(d); 710347"];
3777 [label="param Equals(object obj) 710348"];
3778 [label="param Equals(this) 710349"];
3779 [label="var d = obj as DiagnosticDescription; 710350"];
3780 [label="if (d == null)\n                return false; 710351"];
3781 [label="if (d == null)\n                return false; 710352"];
3782 [label="if (!_code.Equals(d._code))\n                return false; 710353"];
3783 [label="if (!_code.Equals(d._code))\n                return false; 710354"];
3784 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 710355"];
3785 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 710356"];
3786 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 710357"];
3787 [label="if (_squiggledText != d._squiggledText)\n                    return false; 710358"];
3788 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 710359"];
3789 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 710360"];
3790 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 710361"];
3791 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 710362"];
3792 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 710363"];
3793 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 710364"];
3794 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 710365"];
3795 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 710366"];
3796 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 710367"];
3797 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 710368"];
3798 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 710369"];
3799 [label="if (d._arguments == null)\n                    return false; 710370"];
3800 [label="GetArgumentsAsStrings() 710371"];
3801 [label="param GetArgumentsAsStrings(this) 710372"];
3802 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 710373"];
3803 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 710374"];
3804 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 710375"];
3805 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 710376"];
3806 [label="_argumentsAsStrings 710377"];
3807 [label="return _argumentsAsStrings; 710378"];
3808 [label="var args1 = GetArgumentsAsStrings(); 710379"];
3809 [label="d.GetArgumentsAsStrings() 710380"];
3810 [label="param GetArgumentsAsStrings(this) 710381"];
3811 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 710382"];
3812 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 710383"];
3813 [label="return _argumentsAsStrings; 710384"];
3814 [label="var args2 = d.GetArgumentsAsStrings(); 710385"];
3815 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 710386"];
3816 [label="if (!args1.SequenceEqual(args2))\n                        return false; 710387"];
3817 [label="if (!args1.SequenceEqual(args2))\n                        return false; 710388"];
3818 [label="if (!args1.SequenceEqual(args2))\n                        return false; 710389"];
3819 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 710390"];
3820 [label="return true; 710391"];
3821 [label="int index = unmatched.IndexOf(d); 710392"];
3822 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 710393"];
3823 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 710394"];
3824 [label="unmatched.RemoveAt(index); 710395"];
3825 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 710396"];
3826 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 710397"];
3827 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 710398"];
3828 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 710399"];
3829 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 710400"];
3830 [label="DiagnosticDescription.GetAssertText(expected, actual) 710401"];
3831 [label="param GetAssertText(DiagnosticDescription[] expected) 710402"];
3832 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 710403"];
3833 [label="const int CSharp = 1; 710404"];
3834 [label="const int VisualBasic = 2; 710405"];
3835 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710406"];
3836 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710407"];
3837 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710408"];
3838 [label="actual.Any() && actual.First() is CSDiagnostic 710409"];
3839 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710410"];
3840 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 710411"];
3841 [label="int indentDepth = (language == CSharp) ? 4 : 1; 710412"];
3842 [label="(language == CSharp) 710413"];
3843 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 710414"];
3844 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 710415"];
3845 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 710416"];
3846 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 710417"];
3847 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 710418"];
3848 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 710419"];
3849 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 710420"];
3850 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 710421"];
3851 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 710422"];
3852 [label="IsSortedOrEmpty(expected) 710423"];
3853 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 710424"];
3854 [label="new LinePositionComparer() 710425"];
3855 [label="param LinePositionComparer(this) 710426"];
3856 [label="Instance = new LinePositionComparer() 710427"];
3857 [label="var comparer = LinePositionComparer.Instance; 710428"];
3858 [label="DiagnosticDescription last = null; 710429"];
3859 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 710430"];
3860 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 710431"];
3861 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 710432"];
3862 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 710433"];
3863 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 710434"];
3864 [label="last = diagnostic; 710435"];
3865 [label="return true; 710436"];
3866 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 710437"];
3867 [label="actual = Sort(actual); 710438"];
3868 [label="Sort(actual) 710439"];
3869 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 710440"];
3870 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710441"];
3871 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710442"];
3872 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710443"];
3873 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710444"];
3874 [label="var assertText = new StringBuilder(); 710445"];
3875 [label="assertText.AppendLine(); 710446"];
3876 [label="int i; 710447"];
3877 [label="assertText.AppendLine('Expected:'); 710448"];
3878 [label="assertText.AppendLine('Expected:'); 710449"];
3879 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 710450"];
3880 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 710451"];
3881 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 710452"];
3882 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 710453"];
3883 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 710454"];
3884 [label="GetDiagnosticDescription(d, indentDepth) 710455"];
3885 [label="param GetDiagnosticDescription(DiagnosticDescription d) 710456"];
3886 [label="param GetDiagnosticDescription(int indentDepth) 710457"];
3887 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710458"];
3888 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710459"];
3889 [label="d.ToString() 710460"];
3890 [label="param ToString(this) 710461"];
3891 [label="var sb = new StringBuilder(); 710462"];
3892 [label="sb.Append('Diagnostic('); 710463"];
3893 [label="sb.Append('Diagnostic('); 710464"];
3894 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 710465"];
3895 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 710466"];
3896 [label="sb.Append(_errorCodeType.Name); 710467"];
3897 [label="sb.Append(_errorCodeType.Name); 710468"];
3898 [label="sb.Append('.'); 710469"];
3899 [label="sb.Append('.'); 710470"];
3900 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710471"];
3901 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710472"];
3902 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 710473"];
3903 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 710474"];
3904 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 710475"];
3905 [label="sb.Append(', \\''); 710476"];
3906 [label="sb.Append(', \\''); 710477"];
3907 [label="sb.Append(_squiggledText); 710478"];
3908 [label="sb.Append(_squiggledText); 710479"];
3909 [label="sb.Append('''); 710480"];
3910 [label="sb.Append('''); 710481"];
3911 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 710482"];
3912 [label="sb.Append(')'); 710483"];
3913 [label="sb.Append(')'); 710484"];
3914 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 710485"];
3915 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 710486"];
3916 [label="sb.Append('.WithArguments('); 710487"];
3917 [label="sb.Append('.WithArguments('); 710488"];
3918 [label="GetArgumentsAsStrings() 710489"];
3919 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 710490"];
3920 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 710491"];
3921 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 710492"];
3922 [label="sb.Append('\\''); 710493"];
3923 [label="sb.Append('\\''); 710494"];
3924 [label="sb.Append(argumentStrings.Current); 710495"];
3925 [label="sb.Append(argumentStrings.Current); 710496"];
3926 [label="sb.Append('\\''); 710497"];
3927 [label="sb.Append('\\''); 710498"];
3928 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 710499"];
3929 [label="sb.Append(', '); 710500"];
3930 [label="sb.Append(', '); 710501"];
3931 [label="sb.Append(')'); 710502"];
3932 [label="sb.Append(')'); 710503"];
3933 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 710504"];
3934 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 710505"];
3935 [label="sb.Append('.WithLocation('); 710506"];
3936 [label="sb.Append('.WithLocation('); 710507"];
3937 [label="sb.Append(_startPosition.Value.Line + 1); 710508"];
3938 [label="sb.Append(_startPosition.Value.Line + 1); 710509"];
3939 [label="sb.Append(', '); 710510"];
3940 [label="sb.Append(', '); 710511"];
3941 [label="sb.Append(_startPosition.Value.Character + 1); 710512"];
3942 [label="sb.Append(_startPosition.Value.Character + 1); 710513"];
3943 [label="sb.Append(')'); 710514"];
3944 [label="sb.Append(')'); 710515"];
3945 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 710516"];
3946 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 710517"];
3947 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 710518"];
3948 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 710519"];
3949 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 710520"];
3950 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 710521"];
3951 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 710522"];
3952 [label="return sb.ToString(); 710523"];
3953 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710524"];
3954 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710525"];
3955 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 710526"];
3956 [label="GetCommaSeparatedLines(assertText, expectedText); 710527"];
3957 [label="GetCommaSeparatedLines(assertText, expectedText); 710528"];
3958 [label="GetCommaSeparatedLines(assertText, expectedText) 710529"];
3959 [label="param GetCommaSeparatedLines(StringBuilder sb) 710530"];
3960 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 710531"];
3961 [label="int n = lines.Count; 710532"];
3962 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 710533"];
3963 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 710534"];
3964 [label="sb.Append(lines[i]); 710535"];
3965 [label="sb.Append(lines[i]); 710536"];
3966 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 710537"];
3967 [label="sb.AppendLine(); 710538"];
3968 [label="GetCommaSeparatedLines(assertText, expectedText); 710539"];
3969 [label="assertText.AppendLine('Actual:'); 710540"];
3970 [label="assertText.AppendLine('Actual:'); 710541"];
3971 [label="var actualText = ArrayBuilder<string>.GetInstance(); 710542"];
3972 [label="var e = actual.GetEnumerator(); 710543"];
3973 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 710544"];
3974 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 710545"];
3975 [label="param Compare(LinePosition? x) 710546"];
3976 [label="param Compare(LinePosition? y) 710547"];
3977 [label="param Compare(this) 710548"];
3978 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 710549"];
3979 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 710550"];
3980 [label="if (y == null)\n                {\n                    return 1;\n                } 710551"];
3981 [label="if (y == null)\n                {\n                    return 1;\n                } 710552"];
3982 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 710553"];
3983 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 710554"];
3984 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 710555"];
3985 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 710556"];
3986 [label="return x.Value.Character.CompareTo(y.Value.Character); 710557"];
3987 [label="return x.Value.Character.CompareTo(y.Value.Character); 710558"];
3988 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 710559"];
3989 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 710560"];
3990 [label="Diagnostic d = e.Current; 710561"];
3991 [label="string message = d.ToString(); 710562"];
3992 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 710563"];
3993 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 710564"];
3994 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 710565"];
3995 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 710566"];
3996 [label="Indent(assertText, indentDepth); 710567"];
3997 [label="Indent(assertText, indentDepth); 710568"];
3998 [label="Indent(assertText, indentDepth) 710569"];
3999 [label="param Indent(StringBuilder sb) 710570"];
4000 [label="param Indent(int count) 710571"];
4001 [label="sb.Append(' ', 4 * count); 710572"];
4002 [label="sb.Append(' ', 4 * count); 710573"];
4003 [label="sb.Append(' ', 4 * count); 710574"];
4004 [label="Indent(assertText, indentDepth); 710575"];
4005 [label="assertText.Append('// '); 710576"];
4006 [label="assertText.Append('// '); 710577"];
4007 [label="assertText.AppendLine(d.ToString()); 710578"];
4008 [label="assertText.AppendLine(d.ToString()); 710579"];
4009 [label="var l = d.Location; 710580"];
4010 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 710581"];
4011 [label="Indent(assertText, indentDepth); 710582"];
4012 [label="Indent(assertText, indentDepth); 710583"];
4013 [label="Indent(assertText, indentDepth) 710584"];
4014 [label="param Indent(StringBuilder sb) 710585"];
4015 [label="param Indent(int count) 710586"];
4016 [label="sb.Append(' ', 4 * count); 710587"];
4017 [label="sb.Append(' ', 4 * count); 710588"];
4018 [label="sb.Append(' ', 4 * count); 710589"];
4019 [label="Indent(assertText, indentDepth); 710590"];
4020 [label="assertText.Append('// '); 710591"];
4021 [label="assertText.Append('// '); 710592"];
4022 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 710593"];
4023 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 710594"];
4024 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710595"];
4025 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710596"];
4026 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710597"];
4027 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710598"];
4028 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 710599"];
4029 [label="param DiagnosticDescription(Diagnostic d) 710600"];
4030 [label="param DiagnosticDescription(bool errorCodeOnly) 710601"];
4031 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 710602"];
4032 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 710603"];
4033 [label="param DiagnosticDescription(this) 710604"];
4034 [label="_code 710605"];
4035 [label="_isWarningAsError 710606"];
4036 [label="_isSuppressed 710607"];
4037 [label="_squiggledText 710608"];
4038 [label="_arguments 710609"];
4039 [label="_startPosition 710610"];
4040 [label="_errorCodeType 710611"];
4041 [label="_defaultSeverityOpt 710612"];
4042 [label="_effectiveSeverityOpt 710613"];
4043 [label="_code 710614"];
4044 [label="_isWarningAsError 710615"];
4045 [label="_isSuppressed 710616"];
4046 [label="_location 710617"];
4047 [label="DiagnosticWithInfo dinfo = null; 710618"];
4048 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 710619"];
4049 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 710620"];
4050 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 710621"];
4051 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 710622"];
4052 [label="var diffDescription = description; 710623"];
4053 [label="var idx = Array.IndexOf(expected, description); 710624"];
4054 [label="var idx = Array.IndexOf(expected, description); 710625"];
4055 [label="var idx = Array.IndexOf(expected, description); 710626"];
4056 [label="var idx = Array.IndexOf(expected, description); 710627"];
4057 [label="if (d == null)\n                return false; 710628"];
4058 [label="if (d == null)\n                return false; 710629"];
4059 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 710630"];
4060 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 710631"];
4061 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 710632"];
4062 [label="if (_squiggledText != d._squiggledText)\n                    return false; 710633"];
4063 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 710634"];
4064 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 710635"];
4065 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 710636"];
4066 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 710637"];
4067 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 710638"];
4068 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 710639"];
4069 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 710640"];
4070 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 710641"];
4071 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 710642"];
4072 [label="if (d._arguments == null)\n                    return false; 710643"];
4073 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 710644"];
4074 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 710645"];
4075 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 710646"];
4076 [label="diffDescription = expected[idx]; 710647"];
4077 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 710648"];
4078 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 710649"];
4079 [label="GetDiagnosticDescription(description, indentDepth) 710650"];
4080 [label="param GetDiagnosticDescription(DiagnosticDescription d) 710651"];
4081 [label="param GetDiagnosticDescription(int indentDepth) 710652"];
4082 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710653"];
4083 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710654"];
4084 [label="var sb = new StringBuilder(); 710655"];
4085 [label="sb.Append('Diagnostic('); 710656"];
4086 [label="sb.Append('Diagnostic('); 710657"];
4087 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 710658"];
4088 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 710659"];
4089 [label="sb.Append(_errorCodeType.Name); 710660"];
4090 [label="sb.Append(_errorCodeType.Name); 710661"];
4091 [label="sb.Append('.'); 710662"];
4092 [label="sb.Append('.'); 710663"];
4093 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710664"];
4094 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710665"];
4095 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 710666"];
4096 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 710667"];
4097 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 710668"];
4098 [label="sb.Append(', \\''); 710669"];
4099 [label="sb.Append(', \\''); 710670"];
4100 [label="sb.Append(_squiggledText); 710671"];
4101 [label="sb.Append(_squiggledText); 710672"];
4102 [label="sb.Append('''); 710673"];
4103 [label="sb.Append('''); 710674"];
4104 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 710675"];
4105 [label="sb.Append(')'); 710676"];
4106 [label="sb.Append(')'); 710677"];
4107 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 710678"];
4108 [label="sb.Append('.WithArguments('); 710679"];
4109 [label="sb.Append('.WithArguments('); 710680"];
4110 [label="sb.Append('\\''); 710681"];
4111 [label="sb.Append('\\''); 710682"];
4112 [label="sb.Append(argumentStrings.Current); 710683"];
4113 [label="sb.Append(argumentStrings.Current); 710684"];
4114 [label="sb.Append('\\''); 710685"];
4115 [label="sb.Append('\\''); 710686"];
4116 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 710687"];
4117 [label="sb.Append(', '); 710688"];
4118 [label="sb.Append(', '); 710689"];
4119 [label="sb.Append(')'); 710690"];
4120 [label="sb.Append(')'); 710691"];
4121 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 710692"];
4122 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 710693"];
4123 [label="sb.Append('.WithLocation('); 710694"];
4124 [label="sb.Append('.WithLocation('); 710695"];
4125 [label="sb.Append(_startPosition.Value.Line + 1); 710696"];
4126 [label="sb.Append(_startPosition.Value.Line + 1); 710697"];
4127 [label="sb.Append(', '); 710698"];
4128 [label="sb.Append(', '); 710699"];
4129 [label="sb.Append(_startPosition.Value.Character + 1); 710700"];
4130 [label="sb.Append(_startPosition.Value.Character + 1); 710701"];
4131 [label="sb.Append(')'); 710702"];
4132 [label="sb.Append(')'); 710703"];
4133 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 710704"];
4134 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 710705"];
4135 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 710706"];
4136 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 710707"];
4137 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 710708"];
4138 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 710709"];
4139 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 710710"];
4140 [label="return sb.ToString(); 710711"];
4141 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710712"];
4142 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710713"];
4143 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 710714"];
4144 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 710715"];
4145 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 710716"];
4146 [label="GetDiagnosticDescription(diffDescription, indentDepth) 710717"];
4147 [label="param GetDiagnosticDescription(DiagnosticDescription d) 710718"];
4148 [label="param GetDiagnosticDescription(int indentDepth) 710719"];
4149 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710720"];
4150 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710721"];
4151 [label="var sb = new StringBuilder(); 710722"];
4152 [label="sb.Append('Diagnostic('); 710723"];
4153 [label="sb.Append('Diagnostic('); 710724"];
4154 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 710725"];
4155 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 710726"];
4156 [label="sb.Append(_errorCodeType.Name); 710727"];
4157 [label="sb.Append(_errorCodeType.Name); 710728"];
4158 [label="sb.Append('.'); 710729"];
4159 [label="sb.Append('.'); 710730"];
4160 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710731"];
4161 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710732"];
4162 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 710733"];
4163 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 710734"];
4164 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 710735"];
4165 [label="sb.Append(', \\''); 710736"];
4166 [label="sb.Append(', \\''); 710737"];
4167 [label="sb.Append(_squiggledText); 710738"];
4168 [label="sb.Append(_squiggledText); 710739"];
4169 [label="sb.Append('''); 710740"];
4170 [label="sb.Append('''); 710741"];
4171 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 710742"];
4172 [label="sb.Append(')'); 710743"];
4173 [label="sb.Append(')'); 710744"];
4174 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 710745"];
4175 [label="sb.Append('.WithArguments('); 710746"];
4176 [label="sb.Append('.WithArguments('); 710747"];
4177 [label="sb.Append('\\''); 710748"];
4178 [label="sb.Append('\\''); 710749"];
4179 [label="sb.Append(argumentStrings.Current); 710750"];
4180 [label="sb.Append(argumentStrings.Current); 710751"];
4181 [label="sb.Append('\\''); 710752"];
4182 [label="sb.Append('\\''); 710753"];
4183 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 710754"];
4184 [label="sb.Append(', '); 710755"];
4185 [label="sb.Append(', '); 710756"];
4186 [label="sb.Append(')'); 710757"];
4187 [label="sb.Append(')'); 710758"];
4188 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 710759"];
4189 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 710760"];
4190 [label="sb.Append('.WithLocation('); 710761"];
4191 [label="sb.Append('.WithLocation('); 710762"];
4192 [label="sb.Append(_startPosition.Value.Line + 1); 710763"];
4193 [label="sb.Append(_startPosition.Value.Line + 1); 710764"];
4194 [label="sb.Append(', '); 710765"];
4195 [label="sb.Append(', '); 710766"];
4196 [label="sb.Append(_startPosition.Value.Character + 1); 710767"];
4197 [label="sb.Append(_startPosition.Value.Character + 1); 710768"];
4198 [label="sb.Append(')'); 710769"];
4199 [label="sb.Append(')'); 710770"];
4200 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 710771"];
4201 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 710772"];
4202 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 710773"];
4203 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 710774"];
4204 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 710775"];
4205 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 710776"];
4206 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 710777"];
4207 [label="return sb.ToString(); 710778"];
4208 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710779"];
4209 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 710780"];
4210 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 710781"];
4211 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 710782"];
4212 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 710783"];
4213 [label="assertText.AppendLine(); 710784"];
4214 [label="assertText.AppendLine('Diff:'); 710785"];
4215 [label="assertText.AppendLine('Diff:'); 710786"];
4216 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710787"];
4217 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710788"];
4218 [label="new[] { '\\r', '\\n' } 710789"];
4219 [label="'\\r' 710790"];
4220 [label="'\\n' 710791"];
4221 [label="new[] { '\\r', '\\n' } 710792"];
4222 [label="new[] { '\\r', '\\n' } 710793"];
4223 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 710794"];
4224 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710795"];
4225 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710796"];
4226 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 710797"];
4227 [label="param DiffReport(IEnumerable<T> expected) 710798"];
4228 [label="param DiffReport(IEnumerable<T> actual) 710799"];
4229 [label="param DiffReport(string separator) 710800"];
4230 [label="param DiffReport(IEqualityComparer<T> comparer = null) 710801"];
4231 [label="param DiffReport(Func<T, string> toString = null) 710802"];
4232 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 710803"];
4233 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 710804"];
4234 [label="(comparer != null) 710805"];
4235 [label="EqualityComparer<T>.Default 710806"];
4236 [label="new LCS<T>(EqualityComparer<T>.Default) 710807"];
4237 [label="param LCS(IEqualityComparer<T> comparer) 710808"];
4238 [label="param LCS(this) 710809"];
4239 [label="1 710810"];
4240 [label="DeleteCost = 1 710811"];
4241 [label="1 710812"];
4242 [label="InsertCost = 1 710813"];
4243 [label="2 710814"];
4244 [label="UpdateCost = 2 710815"];
4245 [label="param LongestCommonSubsequence(this) 710816"];
4246 [label="_comparer 710817"];
4247 [label="_comparer 710818"];
4248 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 710819"];
4249 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 710820"];
4250 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 710821"];
4251 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 710822"];
4252 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 710823"];
4253 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710824"];
4254 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710825"];
4255 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710826"];
4256 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710827"];
4257 [label="lcs.CalculateDiff(expectedList, actualList, toString) 710828"];
4258 [label="param CalculateDiff(IList<T> sequenceA) 710829"];
4259 [label="param CalculateDiff(IList<T> sequenceB) 710830"];
4260 [label="param CalculateDiff(Func<T, string> toString) 710831"];
4261 [label="param CalculateDiff(this) 710832"];
4262 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 710833"];
4263 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 710834"];
4264 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 710835"];
4265 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 710836"];
4266 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 710837"];
4267 [label="param GetEdits(TSequence sequenceA) 710838"];
4268 [label="param GetEdits(int lengthA) 710839"];
4269 [label="param GetEdits(TSequence sequenceB) 710840"];
4270 [label="param GetEdits(int lengthB) 710841"];
4271 [label="param GetEdits(this) 710842"];
4272 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710843"];
4273 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710844"];
4274 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710845"];
4275 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710846"];
4276 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 710847"];
4277 [label="param ComputeCostMatrix(TSequence sequenceA) 710848"];
4278 [label="param ComputeCostMatrix(int lengthA) 710849"];
4279 [label="param ComputeCostMatrix(TSequence sequenceB) 710850"];
4280 [label="param ComputeCostMatrix(int lengthB) 710851"];
4281 [label="param ComputeCostMatrix(this) 710852"];
4282 [label="var la = lengthA + 1; 710853"];
4283 [label="var la = lengthA + 1; 710854"];
4284 [label="var lb = lengthB + 1; 710855"];
4285 [label="var lb = lengthB + 1; 710856"];
4286 [label="var d = new int[la, lb]; 710857"];
4287 [label="d[0, 0] = 0; 710858"];
4288 [label="d[0, 0] 710859"];
4289 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 710860"];
4290 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 710861"];
4291 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 710862"];
4292 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 710863"];
4293 [label="d[i, 0] 710864"];
4294 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 710865"];
4295 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 710866"];
4296 [label="d[0, j] = d[0, j - 1] + InsertCost; 710867"];
4297 [label="d[0, j] = d[0, j - 1] + InsertCost; 710868"];
4298 [label="d[0, j] 710869"];
4299 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 710870"];
4300 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 710871"];
4301 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 710872"];
4302 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 710873"];
4303 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710874"];
4304 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710875"];
4305 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710876"];
4306 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710877"];
4307 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 710878"];
4308 [label="param ItemsEqual(IList<T> sequenceA) 710879"];
4309 [label="param ItemsEqual(int indexA) 710880"];
4310 [label="param ItemsEqual(IList<T> sequenceB) 710881"];
4311 [label="param ItemsEqual(int indexB) 710882"];
4312 [label="param ItemsEqual(this) 710883"];
4313 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 710884"];
4314 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 710885"];
4315 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 710886"];
4316 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710887"];
4317 [label="int m2 = d[i - 1, j] + DeleteCost; 710888"];
4318 [label="int m2 = d[i - 1, j] + DeleteCost; 710889"];
4319 [label="int m3 = d[i, j - 1] + InsertCost; 710890"];
4320 [label="int m3 = d[i, j - 1] + InsertCost; 710891"];
4321 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710892"];
4322 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710893"];
4323 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710894"];
4324 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710895"];
4325 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710896"];
4326 [label="d[i, j] 710897"];
4327 [label="return d; 710898"];
4328 [label="int i = lengthA; 710899"];
4329 [label="int j = lengthB; 710900"];
4330 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 710901"];
4331 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 710902"];
4332 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 710903"];
4333 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 710904"];
4334 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 710905"];
4335 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 710906"];
4336 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 710907"];
4337 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 710908"];
4338 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 710909"];
4339 [label="i--; 710910"];
4340 [label="j--; 710911"];
4341 [label="yield return new Edit(EditKind.Update, i, j); 710912"];
4342 [label="yield return new Edit(EditKind.Update, i, j); 710913"];
4343 [label="yield return new Edit(EditKind.Update, i, j); 710914"];
4344 [label="yield return new Edit(EditKind.Update, i, j); 710915"];
4345 [label="new Edit(EditKind.Update, i, j) 710916"];
4346 [label="param Edit(EditKind kind) 710917"];
4347 [label="param Edit(int indexA) 710918"];
4348 [label="param Edit(int indexB) 710919"];
4349 [label="param Edit(this) 710920"];
4350 [label="this.Kind 710921"];
4351 [label="this.IndexA 710922"];
4352 [label="this.IndexB 710923"];
4353 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 710924"];
4354 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 710925"];
4355 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 710926"];
4356 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 710927"];
4357 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 710928"];
4358 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 710929"];
4359 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 710930"];
4360 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 710931"];
4361 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 710932"];
4362 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710933"];
4363 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710934"];
4364 [label="actualText.Free(); 710935"];
4365 [label="expectedText.Free(); 710936"];
4366 [label="return assertText.ToString(); 710937"];
4367 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 710938"];
4368 [label="diagnostics.Verify(expected); 710939"];
4369 [label="VerifyAssemblyIds(c, diagnostics); 710940"];
4370 [label="VerifyAssemblyIds(c, diagnostics); 710941"];
4371 [label="VerifyAssemblyIds(c, diagnostics) 710942"];
4372 [label="param VerifyAssemblyIds(TCompilation c) 710943"];
4373 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 710944"];
4374 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 710945"];
4375 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 710946"];
4376 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 710947"];
4377 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 710948"];
4378 [label="CustomAssert.True(assemblyIds.IsEmpty); 710949"];
4379 [label="VerifyAssemblyIds(c, diagnostics); 710950"];
4380 [label="return c; 710951"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 0;
574 -> 1;
575 -> 1;
576 -> 574;
576 -> 575;
577 -> 214;
577 -> 575;
578 -> 214;
578 -> 575;
579 -> 214;
579 -> 575;
580 -> 214;
580 -> 575;
581 -> 214;
581 -> 575;
582 -> 214;
582 -> 575;
583 -> 576;
583 -> 575;
584 -> 577;
584 -> 575;
585 -> 578;
585 -> 575;
586 -> 579;
586 -> 575;
587 -> 580;
587 -> 575;
588 -> 581;
588 -> 575;
589 -> 582;
589 -> 575;
590 -> 575;
591 -> 583;
591 -> 590;
592 -> 584;
592 -> 590;
593 -> 585;
593 -> 590;
594 -> 586;
594 -> 590;
595 -> 587;
595 -> 590;
596 -> 588;
596 -> 590;
597 -> 589;
597 -> 590;
598 -> 591;
598 -> 590;
599 -> 591;
599 -> 590;
600 -> 590;
601 -> 592;
601 -> 590;
602 -> 593;
602 -> 590;
603 -> 594;
603 -> 590;
604 -> 595;
604 -> 590;
605 -> 596;
605 -> 590;
607 -> 606;
609 -> 608;
610 -> 597;
610 -> 590;
611 -> 590;
612 -> 599;
612 -> 611;
613 -> 600;
613 -> 611;
614 -> 601;
614 -> 611;
615 -> 602;
615 -> 611;
616 -> 603;
616 -> 611;
617 -> 604;
617 -> 611;
618 -> 605;
618 -> 611;
619 -> 599;
619 -> 611;
620 -> 610;
620 -> 611;
621 -> 600;
621 -> 611;
622 -> 600;
622 -> 611;
623 -> 600;
623 -> 611;
624 -> 623;
624 -> 611;
625 -> 623;
625 -> 611;
626 -> 623;
626 -> 611;
627 -> 623;
627 -> 611;
628 -> 623;
628 -> 611;
629 -> 623;
629 -> 611;
630 -> 623;
630 -> 611;
631 -> 623;
631 -> 611;
632 -> 623;
632 -> 611;
633 -> 623;
633 -> 611;
634 -> 623;
634 -> 611;
635 -> 623;
635 -> 611;
636 -> 623;
636 -> 611;
637 -> 623;
637 -> 611;
638 -> 623;
638 -> 611;
639 -> 612;
639 -> 623;
639 -> 611;
640 -> 613;
640 -> 623;
640 -> 611;
641 -> 614;
641 -> 623;
641 -> 611;
642 -> 615;
642 -> 623;
642 -> 611;
643 -> 616;
643 -> 623;
643 -> 611;
644 -> 617;
644 -> 623;
644 -> 611;
645 -> 618;
645 -> 623;
645 -> 611;
646 -> 619;
646 -> 611;
647 -> 646;
647 -> 623;
647 -> 611;
648 -> 620;
648 -> 623;
648 -> 611;
649 -> 621;
649 -> 623;
649 -> 611;
650 -> 622;
650 -> 623;
650 -> 611;
651 -> 600;
651 -> 575;
652 -> 651;
652 -> 1;
653 -> 214;
653 -> 1;
654 -> 1;
655 -> 214;
655 -> 654;
656 -> 652;
656 -> 654;
657 -> 656;
657 -> 639;
657 -> 654;
658 -> 656;
658 -> 640;
658 -> 654;
659 -> 656;
659 -> 641;
659 -> 654;
660 -> 655;
660 -> 654;
661 -> 656;
661 -> 643;
661 -> 654;
662 -> 656;
662 -> 644;
662 -> 654;
663 -> 654;
664 -> 656;
664 -> 647;
664 -> 654;
665 -> 656;
665 -> 648;
665 -> 654;
666 -> 656;
666 -> 649;
666 -> 654;
667 -> 656;
667 -> 650;
667 -> 654;
668 -> 654;
669 -> 657;
669 -> 668;
670 -> 658;
670 -> 668;
671 -> 659;
671 -> 668;
672 -> 660;
672 -> 668;
673 -> 661;
673 -> 668;
674 -> 662;
674 -> 668;
675 -> 663;
675 -> 668;
676 -> 664;
676 -> 668;
677 -> 665;
677 -> 668;
678 -> 666;
678 -> 668;
679 -> 667;
679 -> 668;
680 -> 663;
680 -> 668;
681 -> 680;
681 -> 668;
682 -> 680;
682 -> 668;
683 -> 680;
683 -> 668;
684 -> 680;
684 -> 668;
685 -> 680;
685 -> 668;
686 -> 680;
686 -> 668;
687 -> 680;
687 -> 668;
688 -> 680;
688 -> 668;
689 -> 680;
689 -> 668;
690 -> 680;
690 -> 668;
691 -> 680;
691 -> 668;
692 -> 680;
692 -> 668;
693 -> 680;
693 -> 668;
694 -> 680;
694 -> 668;
695 -> 680;
695 -> 668;
696 -> 672;
696 -> 680;
696 -> 668;
697 -> 675;
697 -> 680;
697 -> 668;
698 -> 663;
698 -> 1;
699 -> 1;
700 -> 214;
700 -> 699;
701 -> 214;
701 -> 699;
702 -> 698;
702 -> 699;
703 -> 702;
703 -> 669;
703 -> 699;
704 -> 702;
704 -> 670;
704 -> 699;
705 -> 702;
705 -> 671;
705 -> 699;
706 -> 702;
706 -> 696;
706 -> 699;
707 -> 699;
708 -> 700;
708 -> 707;
708 -> 699;
709 -> 701;
709 -> 707;
709 -> 699;
710 -> 708;
710 -> 709;
710 -> 699;
711 -> 702;
711 -> 674;
711 -> 699;
712 -> 702;
712 -> 697;
712 -> 699;
713 -> 702;
713 -> 676;
713 -> 699;
714 -> 702;
714 -> 677;
714 -> 699;
715 -> 702;
715 -> 678;
715 -> 699;
716 -> 702;
716 -> 679;
716 -> 699;
717 -> 699;
718 -> 703;
718 -> 717;
719 -> 704;
719 -> 717;
720 -> 705;
720 -> 717;
721 -> 706;
721 -> 717;
722 -> 710;
722 -> 717;
723 -> 711;
723 -> 717;
724 -> 712;
724 -> 717;
725 -> 713;
725 -> 717;
726 -> 714;
726 -> 717;
727 -> 715;
727 -> 717;
728 -> 716;
728 -> 717;
729 -> 707;
729 -> 717;
730 -> 729;
730 -> 717;
731 -> 729;
731 -> 717;
732 -> 729;
732 -> 717;
733 -> 729;
733 -> 717;
734 -> 729;
734 -> 717;
735 -> 729;
735 -> 717;
736 -> 729;
736 -> 717;
737 -> 729;
737 -> 717;
738 -> 729;
738 -> 717;
739 -> 729;
739 -> 717;
740 -> 729;
740 -> 717;
741 -> 729;
741 -> 717;
742 -> 729;
742 -> 717;
743 -> 729;
743 -> 717;
744 -> 729;
744 -> 717;
745 -> 722;
745 -> 729;
745 -> 717;
746 -> 707;
746 -> 1;
747 -> 746;
747 -> 214;
747 -> 1;
748 -> 1;
749 -> 573;
749 -> 748;
750 -> 214;
750 -> 748;
751 -> 748;
753 -> 0;
754 -> 0;
755 -> 0;
758 -> 752;
758 -> 757;
759 -> 753;
759 -> 757;
760 -> 754;
760 -> 757;
761 -> 755;
761 -> 757;
762 -> 756;
762 -> 757;
763 -> 757;
764 -> 763;
764 -> 757;
765 -> 763;
765 -> 757;
766 -> 763;
766 -> 757;
767 -> 757;
768 -> 759;
768 -> 767;
768 -> 757;
769 -> 760;
769 -> 0;
769 -> 757;
770 -> 761;
770 -> 0;
770 -> 757;
771 -> 758;
771 -> 763;
771 -> 757;
772 -> 759;
772 -> 763;
772 -> 757;
773 -> 760;
773 -> 763;
773 -> 757;
774 -> 762;
774 -> 763;
774 -> 757;
775 -> 761;
775 -> 763;
775 -> 757;
776 -> 757;
777 -> 751;
777 -> 749;
777 -> 571;
777 -> 748;
778 -> 777;
778 -> 751;
779 -> 778;
779 -> 777;
779 -> 751;
780 -> 751;
781 -> 779;
781 -> 777;
781 -> 780;
781 -> 751;
782 -> 778;
782 -> 777;
782 -> 780;
782 -> 751;
783 -> 776;
783 -> 781;
784 -> 777;
784 -> 783;
784 -> 771;
784 -> 774;
784 -> 772;
784 -> 773;
784 -> 775;
784 -> 0;
784 -> 748;
785 -> 777;
785 -> 751;
786 -> 777;
786 -> 751;
787 -> 751;
788 -> 785;
788 -> 784;
788 -> 787;
789 -> 786;
789 -> 788;
789 -> 787;
790 -> 789;
790 -> 787;
791 -> 0;
791 -> 790;
792 -> 789;
792 -> 787;
793 -> 785;
793 -> 787;
794 -> 786;
794 -> 791;
794 -> 792;
794 -> 793;
794 -> 787;
795 -> 0;
795 -> 794;
796 -> 795;
797 -> 786;
797 -> 796;
798 -> 797;
798 -> 776;
798 -> 796;
799 -> 798;
800 -> 795;
801 -> 0;
801 -> 795;
802 -> 801;
803 -> 777;
803 -> 751;
804 -> 777;
804 -> 751;
805 -> 803;
805 -> 804;
805 -> 751;
806 -> 777;
806 -> 805;
806 -> 801;
806 -> 748;
808 -> 807;
810 -> 809;
812 -> 811;
815 -> 814;
816 -> 0;
817 -> 0;
818 -> 0;
819 -> 818;
821 -> 816;
821 -> 817;
821 -> 819;
821 -> 820;
822 -> 821;
824 -> 823;
826 -> 825;
828 -> 827;
830 -> 829;
831 -> 777;
831 -> 751;
832 -> 777;
832 -> 751;
833 -> 777;
833 -> 751;
834 -> 777;
834 -> 751;
835 -> 777;
835 -> 751;
836 -> 751;
837 -> 834;
837 -> 836;
837 -> 751;
838 -> 835;
838 -> 836;
838 -> 751;
839 -> 837;
839 -> 838;
839 -> 751;
840 -> 832;
840 -> 751;
841 -> 831;
841 -> 751;
842 -> 832;
842 -> 751;
843 -> 833;
843 -> 751;
844 -> 834;
844 -> 751;
845 -> 835;
845 -> 751;
846 -> 840;
846 -> 751;
847 -> 751;
848 -> 841;
848 -> 847;
849 -> 842;
849 -> 847;
850 -> 843;
850 -> 847;
851 -> 844;
851 -> 847;
852 -> 845;
852 -> 847;
853 -> 846;
853 -> 847;
854 -> 847;
855 -> 852;
855 -> 854;
855 -> 847;
856 -> 851;
856 -> 854;
856 -> 847;
857 -> 855;
857 -> 856;
857 -> 847;
858 -> 847;
859 -> 848;
859 -> 847;
860 -> 849;
860 -> 847;
861 -> 858;
861 -> 847;
862 -> 853;
862 -> 847;
863 -> 847;
864 -> 859;
864 -> 863;
865 -> 860;
865 -> 863;
866 -> 861;
866 -> 863;
867 -> 862;
867 -> 863;
868 -> 865;
868 -> 863;
869 -> 868;
869 -> 864;
869 -> 806;
869 -> 863;
870 -> 863;
871 -> 869;
871 -> 870;
872 -> 869;
872 -> 870;
873 -> 871;
873 -> 870;
874 -> 871;
874 -> 869;
874 -> 870;
875 -> 870;
876 -> 871;
876 -> 869;
876 -> 870;
877 -> 871;
877 -> 869;
877 -> 870;
878 -> 877;
878 -> 870;
879 -> 870;
880 -> 875;
880 -> 879;
880 -> 863;
881 -> 875;
881 -> 870;
882 -> 875;
882 -> 870;
883 -> 881;
883 -> 870;
884 -> 881;
884 -> 870;
885 -> 881;
885 -> 870;
886 -> 881;
886 -> 870;
887 -> 886;
887 -> 870;
888 -> 886;
888 -> 887;
889 -> 864;
889 -> 868;
889 -> 869;
889 -> 879;
889 -> 863;
890 -> 863;
891 -> 889;
891 -> 890;
891 -> 863;
892 -> 889;
892 -> 891;
893 -> 891;
894 -> 892;
894 -> 893;
895 -> 892;
895 -> 893;
896 -> 894;
896 -> 893;
897 -> 894;
897 -> 892;
897 -> 893;
898 -> 893;
899 -> 894;
899 -> 892;
899 -> 893;
900 -> 894;
900 -> 892;
900 -> 893;
901 -> 900;
901 -> 893;
902 -> 898;
902 -> 893;
903 -> 898;
903 -> 893;
904 -> 902;
904 -> 893;
905 -> 902;
905 -> 893;
906 -> 902;
906 -> 893;
907 -> 902;
907 -> 893;
908 -> 907;
908 -> 893;
909 -> 891;
910 -> 893;
910 -> 909;
910 -> 891;
911 -> 889;
911 -> 863;
912 -> 847;
913 -> 893;
913 -> 912;
913 -> 847;
914 -> 911;
914 -> 847;
915 -> 893;
915 -> 870;
916 -> 893;
916 -> 870;
917 -> 915;
917 -> 870;
918 -> 915;
918 -> 893;
918 -> 870;
919 -> 915;
919 -> 893;
919 -> 870;
920 -> 915;
920 -> 893;
920 -> 870;
921 -> 920;
921 -> 870;
922 -> 898;
923 -> 898;
924 -> 922;
924 -> 898;
925 -> 922;
925 -> 898;
926 -> 922;
926 -> 898;
927 -> 922;
927 -> 898;
928 -> 927;
928 -> 898;
929 -> 893;
930 -> 898;
930 -> 929;
930 -> 893;
931 -> 893;
931 -> 863;
932 -> 898;
932 -> 912;
932 -> 847;
933 -> 931;
933 -> 847;
934 -> 898;
935 -> 898;
935 -> 863;
936 -> 935;
936 -> 847;
937 -> 777;
937 -> 751;
938 -> 777;
938 -> 751;
939 -> 777;
939 -> 751;
940 -> 777;
940 -> 751;
941 -> 940;
941 -> 751;
942 -> 940;
942 -> 751;
943 -> 940;
943 -> 751;
944 -> 940;
944 -> 751;
945 -> 940;
945 -> 751;
946 -> 940;
946 -> 751;
947 -> 937;
947 -> 940;
947 -> 751;
948 -> 938;
948 -> 940;
948 -> 751;
949 -> 939;
949 -> 940;
949 -> 751;
950 -> 940;
950 -> 751;
951 -> 751;
952 -> 950;
952 -> 951;
952 -> 941;
952 -> 947;
952 -> 948;
952 -> 944;
952 -> 949;
952 -> 946;
952 -> 898;
952 -> 751;
953 -> 952;
953 -> 940;
953 -> 751;
954 -> 751;
955 -> 954;
955 -> 940;
955 -> 751;
956 -> 937;
956 -> 751;
957 -> 751;
958 -> 751;
959 -> 956;
959 -> 958;
960 -> 957;
960 -> 958;
961 -> 959;
961 -> 958;
962 -> 958;
963 -> 961;
963 -> 962;
964 -> 960;
964 -> 962;
965 -> 964;
965 -> 962;
966 -> 964;
966 -> 962;
967 -> 964;
967 -> 962;
968 -> 964;
968 -> 962;
969 -> 964;
969 -> 962;
970 -> 962;
971 -> 963;
971 -> 970;
971 -> 962;
972 -> 964;
972 -> 962;
973 -> 972;
973 -> 965;
973 -> 966;
973 -> 967;
973 -> 968;
973 -> 969;
973 -> 962;
974 -> 963;
974 -> 952;
974 -> 953;
974 -> 955;
974 -> 964;
974 -> 962;
975 -> 963;
975 -> 964;
975 -> 962;
976 -> 957;
976 -> 940;
976 -> 751;
977 -> 777;
977 -> 952;
977 -> 953;
977 -> 955;
977 -> 976;
977 -> 954;
977 -> 973;
977 -> 974;
977 -> 975;
977 -> 748;
978 -> 777;
978 -> 751;
979 -> 777;
979 -> 751;
980 -> 777;
980 -> 751;
981 -> 777;
981 -> 751;
982 -> 978;
982 -> 977;
982 -> 751;
983 -> 751;
984 -> 981;
984 -> 983;
985 -> 984;
985 -> 977;
985 -> 0;
985 -> 983;
986 -> 985;
986 -> 751;
987 -> 751;
988 -> 978;
988 -> 977;
988 -> 987;
988 -> 751;
989 -> 986;
989 -> 988;
989 -> 751;
990 -> 978;
990 -> 977;
990 -> 989;
991 -> 990;
991 -> 751;
992 -> 982;
992 -> 751;
993 -> 979;
993 -> 751;
994 -> 980;
994 -> 751;
995 -> 751;
996 -> 991;
996 -> 995;
997 -> 992;
997 -> 995;
998 -> 993;
998 -> 995;
999 -> 994;
999 -> 995;
1000 -> 981;
1000 -> 995;
1001 -> 995;
1002 -> 996;
1002 -> 1001;
1002 -> 995;
1003 -> 999;
1003 -> 995;
1004 -> 999;
1004 -> 977;
1004 -> 995;
1005 -> 1000;
1005 -> 977;
1005 -> 995;
1006 -> 995;
1007 -> 1005;
1007 -> 1006;
1008 -> 1005;
1008 -> 1006;
1009 -> 1006;
1010 -> 1009;
1010 -> 1006;
1011 -> 1009;
1011 -> 1006;
1012 -> 1009;
1012 -> 1006;
1013 -> 1009;
1013 -> 1006;
1014 -> 1007;
1014 -> 1009;
1014 -> 1006;
1015 -> 1005;
1015 -> 1009;
1015 -> 1010;
1015 -> 1011;
1015 -> 1012;
1015 -> 1013;
1015 -> 1014;
1015 -> 995;
1016 -> 997;
1016 -> 995;
1017 -> 998;
1017 -> 995;
1018 -> 999;
1018 -> 995;
1019 -> 995;
1020 -> 1016;
1020 -> 1019;
1021 -> 1017;
1021 -> 1019;
1022 -> 1018;
1022 -> 1019;
1023 -> 1015;
1023 -> 1019;
1024 -> 1019;
1025 -> 1021;
1025 -> 1024;
1025 -> 1019;
1026 -> 1022;
1026 -> 1024;
1026 -> 1019;
1027 -> 1025;
1027 -> 1026;
1027 -> 1019;
1028 -> 1020;
1028 -> 1023;
1028 -> 1019;
1029 -> 1021;
1029 -> 1023;
1029 -> 1019;
1030 -> 1022;
1030 -> 1023;
1030 -> 1019;
1031 -> 995;
1032 -> 996;
1032 -> 995;
1033 -> 995;
1034 -> 1032;
1034 -> 1033;
1035 -> 1015;
1035 -> 1033;
1036 -> 1034;
1036 -> 1033;
1037 -> 1033;
1038 -> 1036;
1038 -> 1037;
1039 -> 1035;
1039 -> 1037;
1040 -> 1039;
1040 -> 1037;
1041 -> 1040;
1041 -> 1038;
1041 -> 1015;
1041 -> 1028;
1041 -> 1029;
1041 -> 1030;
1041 -> 1037;
1042 -> 1037;
1043 -> 1041;
1043 -> 1042;
1044 -> 1041;
1044 -> 1042;
1045 -> 1043;
1045 -> 1042;
1046 -> 1042;
1047 -> 1045;
1047 -> 1046;
1048 -> 1044;
1048 -> 1046;
1049 -> 1048;
1049 -> 1041;
1049 -> 1046;
1050 -> 1047;
1050 -> 1046;
1051 -> 1049;
1051 -> 1050;
1051 -> 1041;
1051 -> 1046;
1052 -> 0;
1052 -> 1046;
1053 -> 1046;
1054 -> 1047;
1054 -> 1051;
1054 -> 1053;
1054 -> 1046;
1055 -> 1048;
1055 -> 1051;
1055 -> 1046;
1056 -> 1047;
1056 -> 1051;
1056 -> 1046;
1057 -> 0;
1057 -> 1054;
1058 -> 1047;
1058 -> 1046;
1059 -> 1057;
1059 -> 1046;
1060 -> 1046;
1061 -> 1058;
1061 -> 1060;
1062 -> 1059;
1062 -> 1060;
1063 -> 1048;
1063 -> 1060;
1064 -> 1061;
1064 -> 1060;
1065 -> 1062;
1065 -> 1060;
1066 -> 1060;
1067 -> 1064;
1067 -> 1066;
1068 -> 1065;
1068 -> 1066;
1069 -> 1068;
1069 -> 1066;
1070 -> 1066;
1071 -> 1067;
1071 -> 1066;
1072 -> 1068;
1072 -> 1066;
1073 -> 1066;
1074 -> 1066;
1075 -> 1071;
1075 -> 1074;
1076 -> 1072;
1076 -> 1074;
1077 -> 1073;
1077 -> 1074;
1078 -> 1075;
1078 -> 1077;
1078 -> 1074;
1079 -> 1076;
1079 -> 1077;
1079 -> 1074;
1080 -> 1073;
1080 -> 1060;
1081 -> 1060;
1082 -> 1060;
1083 -> 1063;
1083 -> 1082;
1084 -> 1083;
1084 -> 1055;
1084 -> 1082;
1085 -> 1084;
1085 -> 1060;
1086 -> 1080;
1086 -> 1060;
1087 -> 1081;
1087 -> 1060;
1088 -> 1086;
1088 -> 1087;
1088 -> 1085;
1088 -> 1078;
1088 -> 1079;
1088 -> 1055;
1088 -> 1060;
1089 -> 1060;
1090 -> 1088;
1090 -> 1089;
1091 -> 1090;
1091 -> 1088;
1091 -> 1089;
1092 -> 1061;
1092 -> 1091;
1093 -> 1091;
1094 -> 1092;
1094 -> 1093;
1095 -> 1094;
1095 -> 1093;
1096 -> 1094;
1096 -> 1093;
1097 -> 1095;
1097 -> 1093;
1098 -> 1093;
1099 -> 1097;
1099 -> 1098;
1100 -> 1096;
1100 -> 1098;
1101 -> 1099;
1101 -> 1094;
1101 -> 1098;
1102 -> 1098;
1103 -> 1102;
1103 -> 1098;
1104 -> 1099;
1104 -> 1094;
1104 -> 1098;
1105 -> 1100;
1105 -> 1104;
1105 -> 1101;
1105 -> 1094;
1106 -> 1100;
1106 -> 1104;
1106 -> 1105;
1107 -> 1105;
1108 -> 1106;
1108 -> 1098;
1109 -> 1098;
1110 -> 1108;
1110 -> 1109;
1110 -> 1098;
1111 -> 1108;
1111 -> 1099;
1111 -> 1098;
1112 -> 1108;
1112 -> 1110;
1113 -> 0;
1113 -> 1110;
1114 -> 1108;
1114 -> 1112;
1114 -> 1110;
1115 -> 1098;
1116 -> 1115;
1116 -> 1093;
1117 -> 1093;
1118 -> 1096;
1118 -> 1117;
1119 -> 1117;
1120 -> 1118;
1120 -> 1114;
1120 -> 1119;
1121 -> 1120;
1121 -> 1117;
1122 -> 1093;
1123 -> 1097;
1123 -> 1122;
1124 -> 1116;
1124 -> 1122;
1125 -> 1121;
1125 -> 1122;
1126 -> 1096;
1126 -> 1122;
1127 -> 1122;
1128 -> 1126;
1128 -> 1127;
1129 -> 1128;
1129 -> 1114;
1129 -> 1127;
1130 -> 1129;
1130 -> 1122;
1131 -> 1122;
1132 -> 1123;
1132 -> 1130;
1132 -> 1122;
1133 -> 1124;
1133 -> 1122;
1134 -> 1125;
1134 -> 1133;
1135 -> 0;
1135 -> 1134;
1136 -> 1123;
1136 -> 1122;
1137 -> 1135;
1137 -> 1122;
1138 -> 1122;
1139 -> 1136;
1139 -> 1138;
1140 -> 1137;
1140 -> 1138;
1141 -> 1140;
1141 -> 1138;
1142 -> 1138;
1143 -> 1138;
1143 -> 1122;
1144 -> 1122;
1145 -> 1122;
1146 -> 1126;
1146 -> 1145;
1147 -> 1146;
1147 -> 1114;
1147 -> 1145;
1148 -> 1147;
1148 -> 1122;
1149 -> 1143;
1149 -> 1122;
1150 -> 1144;
1150 -> 1122;
1151 -> 1149;
1151 -> 1150;
1151 -> 1148;
1151 -> 1139;
1151 -> 1140;
1151 -> 1114;
1151 -> 1122;
1152 -> 1122;
1153 -> 1151;
1154 -> 1126;
1154 -> 1153;
1155 -> 1154;
1155 -> 1151;
1155 -> 1153;
1156 -> 1155;
1156 -> 1151;
1157 -> 1125;
1157 -> 1151;
1158 -> 1157;
1159 -> 1126;
1159 -> 1158;
1160 -> 1159;
1160 -> 1151;
1160 -> 1158;
1161 -> 1160;
1161 -> 1157;
1162 -> 1156;
1162 -> 1157;
1163 -> 1123;
1163 -> 1157;
1164 -> 1124;
1164 -> 1157;
1165 -> 1157;
1166 -> 1157;
1167 -> 1161;
1167 -> 1166;
1168 -> 1162;
1168 -> 1166;
1169 -> 1163;
1169 -> 1166;
1170 -> 1164;
1170 -> 1166;
1171 -> 1165;
1171 -> 1166;
1172 -> 1168;
1172 -> 1166;
1173 -> 1166;
1174 -> 1172;
1174 -> 1173;
1175 -> 1171;
1175 -> 1173;
1176 -> 1173;
1177 -> 1173;
1178 -> 1174;
1178 -> 1177;
1178 -> 1173;
1179 -> 1174;
1179 -> 1175;
1179 -> 1173;
1180 -> 1174;
1180 -> 1151;
1180 -> 1175;
1180 -> 1173;
1181 -> 1174;
1181 -> 1151;
1181 -> 1175;
1181 -> 1173;
1182 -> 1176;
1182 -> 1175;
1182 -> 1173;
1183 -> 1171;
1183 -> 1166;
1184 -> 1171;
1184 -> 1166;
1185 -> 1171;
1185 -> 1166;
1186 -> 1171;
1186 -> 1166;
1187 -> 1171;
1187 -> 1166;
1188 -> 1166;
1189 -> 1167;
1189 -> 1188;
1189 -> 1166;
1190 -> 1166;
1191 -> 1169;
1191 -> 1190;
1191 -> 1166;
1192 -> 1167;
1192 -> 1171;
1192 -> 1166;
1193 -> 1169;
1193 -> 1171;
1193 -> 1170;
1193 -> 1166;
1194 -> 1193;
1194 -> 1171;
1194 -> 1166;
1195 -> 1170;
1195 -> 1166;
1196 -> 1169;
1196 -> 1151;
1196 -> 1195;
1197 -> 1169;
1197 -> 1196;
1198 -> 1197;
1198 -> 1196;
1198 -> 1171;
1199 -> 1157;
1200 -> 1126;
1200 -> 1199;
1201 -> 1200;
1201 -> 1196;
1201 -> 1199;
1202 -> 1201;
1202 -> 1157;
1203 -> 1123;
1203 -> 1157;
1204 -> 1157;
1205 -> 1151;
1206 -> 1205;
1206 -> 1202;
1207 -> 1206;
1207 -> 1151;
1208 -> 1143;
1208 -> 1151;
1209 -> 1165;
1209 -> 1151;
1210 -> 1208;
1210 -> 1209;
1210 -> 1207;
1210 -> 1139;
1210 -> 1140;
1210 -> 1181;
1210 -> 1180;
1210 -> 1179;
1210 -> 1182;
1210 -> 1175;
1210 -> 1192;
1210 -> 1194;
1210 -> 1185;
1210 -> 1186;
1210 -> 1187;
1210 -> 1198;
1210 -> 1202;
1210 -> 1193;
1210 -> 1196;
1210 -> 1151;
1211 -> 1151;
1212 -> 1165;
1212 -> 1122;
1213 -> 1094;
1213 -> 1212;
1213 -> 1210;
1213 -> 1093;
1214 -> 1062;
1214 -> 1135;
1214 -> 1091;
1215 -> 1214;
1216 -> 1213;
1216 -> 1215;
1217 -> 1216;
1217 -> 1213;
1217 -> 1215;
1218 -> 1215;
1219 -> 1217;
1219 -> 1218;
1219 -> 1215;
1220 -> 1219;
1220 -> 1215;
1221 -> 1220;
1221 -> 1214;
1222 -> 1061;
1222 -> 1214;
1223 -> 1062;
1223 -> 0;
1223 -> 1214;
1224 -> 1221;
1224 -> 1223;
1225 -> 1213;
1225 -> 1223;
1226 -> 1223;
1227 -> 1223;
1228 -> 1224;
1228 -> 1227;
1229 -> 1225;
1229 -> 1227;
1230 -> 1226;
1230 -> 1227;
1231 -> 1226;
1231 -> 1227;
1232 -> 1229;
1232 -> 1227;
1233 -> 1227;
1234 -> 1232;
1234 -> 1233;
1235 -> 1231;
1235 -> 1233;
1236 -> 1233;
1237 -> 1233;
1238 -> 1234;
1238 -> 1237;
1238 -> 1233;
1239 -> 1234;
1239 -> 1221;
1239 -> 1235;
1239 -> 1233;
1240 -> 1234;
1240 -> 1221;
1240 -> 1235;
1240 -> 1233;
1241 -> 1236;
1241 -> 1235;
1241 -> 1233;
1242 -> 1231;
1242 -> 1227;
1243 -> 1231;
1243 -> 1227;
1244 -> 1231;
1244 -> 1227;
1245 -> 1231;
1245 -> 1227;
1246 -> 1231;
1246 -> 1227;
1247 -> 1227;
1248 -> 1228;
1248 -> 1247;
1248 -> 1227;
1249 -> 1228;
1249 -> 1231;
1249 -> 1227;
1250 -> 776;
1250 -> 1227;
1251 -> 1250;
1251 -> 1230;
1251 -> 1227;
1252 -> 1251;
1252 -> 1231;
1252 -> 1227;
1253 -> 1223;
1254 -> 1061;
1254 -> 1221;
1254 -> 1253;
1254 -> 1223;
1255 -> 1061;
1255 -> 1221;
1255 -> 1091;
1256 -> 1091;
1257 -> 1255;
1257 -> 1256;
1258 -> 1226;
1258 -> 1256;
1259 -> 1258;
1259 -> 1239;
1259 -> 1256;
1260 -> 0;
1260 -> 1256;
1261 -> 1256;
1262 -> 1259;
1262 -> 1261;
1263 -> 1260;
1263 -> 1261;
1264 -> 1257;
1264 -> 1256;
1265 -> 1262;
1265 -> 1264;
1265 -> 1256;
1266 -> 1265;
1266 -> 1256;
1267 -> 1091;
1268 -> 1267;
1268 -> 1264;
1269 -> 1268;
1269 -> 1091;
1270 -> 1080;
1270 -> 1091;
1271 -> 1266;
1271 -> 1091;
1272 -> 1270;
1272 -> 1271;
1272 -> 1269;
1272 -> 1078;
1272 -> 1079;
1272 -> 1240;
1272 -> 1239;
1272 -> 1234;
1272 -> 1241;
1272 -> 1235;
1272 -> 1249;
1272 -> 1243;
1272 -> 1252;
1272 -> 1245;
1272 -> 1246;
1272 -> 1264;
1272 -> 1091;
1273 -> 1091;
1274 -> 1266;
1274 -> 1060;
1275 -> 1041;
1275 -> 1274;
1275 -> 1272;
1275 -> 1037;
1276 -> 1015;
1276 -> 995;
1277 -> 1000;
1277 -> 1275;
1277 -> 1276;
1277 -> 995;
1278 -> 1275;
1278 -> 995;
1279 -> 777;
1279 -> 1278;
1279 -> 1277;
1279 -> 748;
1280 -> 1279;
1280 -> 1001;
1280 -> 995;
1281 -> 999;
1281 -> 1279;
1281 -> 995;
1282 -> 999;
1282 -> 1281;
1283 -> 1281;
1284 -> 1282;
1284 -> 1042;
1285 -> 1282;
1285 -> 1042;
1286 -> 1285;
1286 -> 1282;
1286 -> 1042;
1287 -> 1284;
1287 -> 1042;
1288 -> 1286;
1288 -> 1287;
1288 -> 1282;
1288 -> 1042;
1289 -> 1042;
1290 -> 1285;
1290 -> 1288;
1290 -> 1042;
1291 -> 1284;
1291 -> 1042;
1292 -> 1285;
1292 -> 1290;
1293 -> 1284;
1293 -> 1290;
1294 -> 1135;
1294 -> 1292;
1295 -> 1284;
1295 -> 1042;
1296 -> 1294;
1296 -> 1042;
1297 -> 1042;
1298 -> 1295;
1298 -> 1297;
1299 -> 1296;
1299 -> 1297;
1300 -> 1299;
1300 -> 1297;
1301 -> 1297;
1302 -> 1297;
1303 -> 1297;
1304 -> 1302;
1304 -> 1303;
1305 -> 1302;
1305 -> 1042;
1306 -> 1042;
1307 -> 1042;
1308 -> 1285;
1308 -> 1307;
1309 -> 1308;
1309 -> 1292;
1309 -> 1307;
1310 -> 1309;
1310 -> 1042;
1311 -> 1305;
1311 -> 1042;
1312 -> 1306;
1312 -> 1042;
1313 -> 1311;
1313 -> 1312;
1313 -> 1310;
1313 -> 1298;
1313 -> 1299;
1313 -> 1292;
1313 -> 1042;
1314 -> 1042;
1315 -> 1284;
1315 -> 1313;
1316 -> 1313;
1317 -> 1315;
1317 -> 1316;
1317 -> 1313;
1318 -> 1315;
1318 -> 1317;
1319 -> 0;
1319 -> 1317;
1320 -> 1317;
1321 -> 1318;
1321 -> 1320;
1322 -> 1319;
1322 -> 1320;
1323 -> 1322;
1323 -> 1320;
1324 -> 1320;
1325 -> 1321;
1326 -> 1325;
1326 -> 1321;
1327 -> 1321;
1328 -> 1321;
1328 -> 1327;
1329 -> 1328;
1329 -> 1321;
1329 -> 1327;
1330 -> 1329;
1330 -> 1321;
1331 -> 1321;
1332 -> 1321;
1333 -> 1321;
1334 -> 1321;
1335 -> 1321;
1336 -> 1321;
1337 -> 1322;
1338 -> 1322;
1339 -> 1322;
1340 -> 1322;
1341 -> 1313;
1342 -> 1294;
1342 -> 1321;
1342 -> 1313;
1343 -> 1294;
1343 -> 0;
1343 -> 1313;
1344 -> 1284;
1344 -> 1321;
1344 -> 1313;
1345 -> 1313;
1346 -> 1344;
1346 -> 1345;
1347 -> 1322;
1347 -> 1345;
1348 -> 1313;
1349 -> 1348;
1349 -> 1346;
1350 -> 1349;
1350 -> 1313;
1351 -> 1305;
1351 -> 1313;
1352 -> 1346;
1352 -> 1313;
1353 -> 1313;
1354 -> 1346;
1354 -> 1042;
1355 -> 1282;
1355 -> 1354;
1355 -> 1350;
1355 -> 1037;
1356 -> 777;
1356 -> 751;
1357 -> 777;
1357 -> 751;
1358 -> 777;
1358 -> 751;
1359 -> 751;
1360 -> 1357;
1360 -> 1359;
1360 -> 751;
1361 -> 1358;
1361 -> 751;
1362 -> 1358;
1362 -> 1355;
1362 -> 1356;
1362 -> 751;
1363 -> 1357;
1363 -> 751;
1364 -> 751;
1365 -> 751;
1366 -> 1361;
1366 -> 1365;
1367 -> 1362;
1367 -> 1365;
1368 -> 1363;
1368 -> 1365;
1369 -> 1364;
1369 -> 1365;
1370 -> 1366;
1370 -> 1365;
1371 -> 1367;
1371 -> 1365;
1372 -> 1365;
1373 -> 1370;
1373 -> 1372;
1374 -> 1371;
1374 -> 1372;
1375 -> 1369;
1375 -> 1372;
1376 -> 1375;
1376 -> 1372;
1377 -> 1375;
1377 -> 1372;
1378 -> 1375;
1378 -> 1372;
1379 -> 1375;
1379 -> 1372;
1380 -> 1375;
1380 -> 1372;
1381 -> 1372;
1382 -> 1373;
1382 -> 1381;
1382 -> 1372;
1383 -> 1374;
1383 -> 1372;
1384 -> 0;
1384 -> 1372;
1385 -> 1372;
1386 -> 1383;
1386 -> 1385;
1387 -> 1384;
1387 -> 1385;
1388 -> 1374;
1388 -> 1372;
1389 -> 0;
1389 -> 1372;
1390 -> 1372;
1391 -> 1388;
1391 -> 1390;
1392 -> 1389;
1392 -> 1390;
1393 -> 1373;
1393 -> 1375;
1393 -> 1372;
1394 -> 1374;
1394 -> 1375;
1394 -> 1372;
1395 -> 1373;
1395 -> 1355;
1395 -> 1375;
1395 -> 1372;
1396 -> 1369;
1396 -> 1365;
1397 -> 1365;
1398 -> 1368;
1398 -> 1397;
1398 -> 1365;
1399 -> 1368;
1399 -> 1369;
1399 -> 1365;
1400 -> 777;
1400 -> 1364;
1400 -> 1355;
1400 -> 1395;
1400 -> 1394;
1400 -> 1393;
1400 -> 1379;
1400 -> 1380;
1400 -> 1399;
1400 -> 748;
1401 -> 777;
1401 -> 751;
1402 -> 777;
1402 -> 751;
1403 -> 777;
1403 -> 751;
1404 -> 777;
1404 -> 751;
1405 -> 777;
1405 -> 751;
1406 -> 751;
1407 -> 1401;
1407 -> 1400;
1407 -> 751;
1408 -> 751;
1409 -> 1402;
1409 -> 1400;
1409 -> 751;
1410 -> 1406;
1410 -> 751;
1411 -> 1408;
1411 -> 751;
1412 -> 777;
1412 -> 751;
1413 -> 777;
1413 -> 751;
1414 -> 777;
1414 -> 751;
1415 -> 777;
1415 -> 751;
1416 -> 777;
1416 -> 751;
1417 -> 1412;
1417 -> 751;
1418 -> 1413;
1418 -> 751;
1419 -> 1414;
1419 -> 751;
1420 -> 1415;
1420 -> 751;
1421 -> 751;
1422 -> 1417;
1422 -> 1421;
1423 -> 1418;
1423 -> 1421;
1424 -> 1419;
1424 -> 1421;
1425 -> 1420;
1425 -> 1421;
1426 -> 1416;
1426 -> 1421;
1427 -> 1421;
1428 -> 1423;
1428 -> 1427;
1428 -> 1421;
1429 -> 1422;
1429 -> 1421;
1430 -> 1423;
1430 -> 1421;
1431 -> 1424;
1431 -> 1421;
1432 -> 1421;
1433 -> 1424;
1433 -> 1432;
1433 -> 1421;
1434 -> 1433;
1434 -> 1425;
1434 -> 1421;
1435 -> 1421;
1436 -> 1429;
1436 -> 1435;
1437 -> 1430;
1437 -> 1435;
1438 -> 1431;
1438 -> 1435;
1439 -> 1434;
1439 -> 1435;
1440 -> 1426;
1440 -> 1435;
1441 -> 1436;
1441 -> 1400;
1441 -> 1435;
1442 -> 1436;
1442 -> 1441;
1443 -> 1437;
1443 -> 1441;
1444 -> 1441;
1445 -> 1442;
1445 -> 1444;
1446 -> 1443;
1446 -> 1444;
1447 -> 1440;
1447 -> 1444;
1448 -> 1445;
1448 -> 1444;
1449 -> 1448;
1449 -> 1444;
1450 -> 1446;
1450 -> 1444;
1451 -> 1444;
1452 -> 1449;
1452 -> 1451;
1453 -> 1450;
1453 -> 1451;
1454 -> 1447;
1454 -> 1451;
1455 -> 1452;
1455 -> 1441;
1455 -> 1451;
1456 -> 1453;
1456 -> 1451;
1457 -> 1452;
1457 -> 1451;
1458 -> 1451;
1459 -> 1455;
1459 -> 1458;
1460 -> 1456;
1460 -> 1458;
1461 -> 1457;
1461 -> 1458;
1462 -> 1454;
1462 -> 1458;
1463 -> 1462;
1463 -> 1455;
1463 -> 1458;
1464 -> 1459;
1464 -> 1458;
1465 -> 1461;
1465 -> 1458;
1466 -> 1460;
1466 -> 1458;
1467 -> 1458;
1468 -> 1463;
1468 -> 1467;
1469 -> 1464;
1469 -> 1467;
1470 -> 1465;
1470 -> 1467;
1471 -> 1466;
1471 -> 1467;
1472 -> 1469;
1472 -> 1467;
1473 -> 1468;
1473 -> 1472;
1473 -> 1455;
1473 -> 1467;
1474 -> 1467;
1475 -> 1473;
1475 -> 1474;
1475 -> 1467;
1476 -> 1473;
1476 -> 1467;
1477 -> 1471;
1477 -> 1467;
1478 -> 1470;
1478 -> 1467;
1479 -> 1467;
1480 -> 1476;
1480 -> 1479;
1481 -> 1477;
1481 -> 1479;
1482 -> 1478;
1482 -> 1479;
1483 -> 1480;
1483 -> 1473;
1483 -> 1479;
1484 -> 1479;
1485 -> 1483;
1485 -> 1484;
1485 -> 1479;
1486 -> 1473;
1486 -> 1467;
1487 -> 1448;
1487 -> 1483;
1487 -> 1444;
1488 -> 1444;
1489 -> 1487;
1489 -> 1488;
1490 -> 1447;
1490 -> 1488;
1491 -> 1489;
1491 -> 1483;
1491 -> 1488;
1492 -> 1489;
1492 -> 1483;
1492 -> 1488;
1493 -> 1488;
1494 -> 1492;
1494 -> 1493;
1495 -> 1492;
1495 -> 1493;
1496 -> 1490;
1496 -> 1493;
1497 -> 1494;
1497 -> 1493;
1498 -> 1495;
1498 -> 1493;
1499 -> 1497;
1499 -> 1498;
1499 -> 1491;
1499 -> 1493;
1500 -> 1499;
1500 -> 1493;
1501 -> 1496;
1501 -> 1499;
1501 -> 1500;
1502 -> 0;
1502 -> 1500;
1503 -> 1500;
1504 -> 1496;
1504 -> 1503;
1505 -> 1504;
1505 -> 1501;
1505 -> 1503;
1506 -> 1503;
1507 -> 1504;
1507 -> 1505;
1507 -> 1506;
1508 -> 1507;
1508 -> 1506;
1509 -> 1506;
1510 -> 1508;
1510 -> 1509;
1511 -> 1510;
1511 -> 1507;
1511 -> 1509;
1512 -> 1511;
1513 -> 1512;
1513 -> 1506;
1514 -> 1513;
1514 -> 1506;
1515 -> 1486;
1515 -> 1444;
1516 -> 1444;
1517 -> 1515;
1517 -> 1516;
1518 -> 1517;
1518 -> 1516;
1519 -> 1516;
1520 -> 1516;
1521 -> 1518;
1521 -> 1520;
1522 -> 1519;
1522 -> 1520;
1523 -> 1521;
1523 -> 1520;
1524 -> 1521;
1524 -> 1522;
1524 -> 1520;
1525 -> 1520;
1526 -> 1525;
1526 -> 1522;
1526 -> 1520;
1527 -> 1520;
1528 -> 1527;
1528 -> 1522;
1528 -> 1520;
1529 -> 1519;
1529 -> 1444;
1530 -> 1444;
1531 -> 1514;
1531 -> 1529;
1531 -> 1530;
1531 -> 1524;
1531 -> 1526;
1531 -> 1528;
1531 -> 1444;
1532 -> 1421;
1533 -> 1531;
1533 -> 1532;
1534 -> 1533;
1534 -> 1531;
1534 -> 1532;
1535 -> 1534;
1535 -> 1421;
1536 -> 1535;
1537 -> 1536;
1537 -> 1535;
1538 -> 1537;
1539 -> 1531;
1539 -> 1538;
1540 -> 1539;
1540 -> 1531;
1540 -> 1538;
1541 -> 1540;
1541 -> 1537;
1542 -> 1426;
1542 -> 1537;
1543 -> 1422;
1543 -> 1537;
1544 -> 1423;
1544 -> 1537;
1545 -> 1542;
1545 -> 1543;
1545 -> 1544;
1545 -> 1541;
1545 -> 1507;
1545 -> 1531;
1545 -> 1537;
1546 -> 1537;
1547 -> 1545;
1547 -> 1546;
1548 -> 1545;
1548 -> 1546;
1549 -> 1545;
1549 -> 1546;
1550 -> 1545;
1550 -> 1546;
1551 -> 1545;
1551 -> 1546;
1552 -> 1547;
1552 -> 1546;
1553 -> 1548;
1553 -> 1546;
1554 -> 1549;
1554 -> 1546;
1555 -> 1550;
1555 -> 1546;
1556 -> 1546;
1557 -> 1552;
1557 -> 1556;
1558 -> 1553;
1558 -> 1556;
1559 -> 1554;
1559 -> 1556;
1560 -> 1555;
1560 -> 1556;
1561 -> 1551;
1561 -> 1556;
1562 -> 1558;
1562 -> 1545;
1562 -> 1556;
1563 -> 1557;
1563 -> 1562;
1564 -> 1558;
1564 -> 1562;
1565 -> 1559;
1565 -> 1562;
1566 -> 1560;
1566 -> 1562;
1567 -> 1562;
1568 -> 1561;
1568 -> 1567;
1569 -> 1568;
1569 -> 1545;
1569 -> 1567;
1570 -> 1569;
1570 -> 1562;
1571 -> 1562;
1572 -> 1561;
1572 -> 1571;
1573 -> 1571;
1574 -> 1572;
1574 -> 1573;
1575 -> 1574;
1575 -> 1545;
1575 -> 1573;
1576 -> 1575;
1576 -> 1571;
1577 -> 1576;
1577 -> 1571;
1578 -> 1576;
1578 -> 1545;
1578 -> 0;
1578 -> 1571;
1579 -> 1576;
1579 -> 1571;
1580 -> 1576;
1580 -> 1545;
1580 -> 1571;
1581 -> 1580;
1581 -> 1562;
1582 -> 1561;
1582 -> 1545;
1582 -> 1562;
1583 -> 1562;
1584 -> 1563;
1584 -> 1583;
1585 -> 1564;
1585 -> 1583;
1586 -> 1565;
1586 -> 1583;
1587 -> 1566;
1587 -> 1583;
1588 -> 1570;
1588 -> 1583;
1589 -> 1581;
1589 -> 1583;
1590 -> 1582;
1590 -> 1583;
1591 -> 1585;
1591 -> 1583;
1592 -> 1585;
1592 -> 1591;
1592 -> 0;
1592 -> 1583;
1593 -> 1585;
1593 -> 1591;
1593 -> 0;
1593 -> 1583;
1594 -> 1585;
1594 -> 1583;
1595 -> 1589;
1595 -> 1583;
1596 -> 1594;
1596 -> 1595;
1596 -> 1591;
1596 -> 1583;
1597 -> 1587;
1597 -> 1583;
1598 -> 1597;
1598 -> 1583;
1599 -> 1584;
1599 -> 1583;
1600 -> 1596;
1600 -> 1583;
1601 -> 1586;
1601 -> 1583;
1602 -> 1588;
1602 -> 1583;
1603 -> 1590;
1603 -> 1583;
1604 -> 1583;
1605 -> 1599;
1605 -> 1604;
1606 -> 1600;
1606 -> 1604;
1607 -> 1601;
1607 -> 1604;
1608 -> 1602;
1608 -> 1604;
1609 -> 1603;
1609 -> 1604;
1610 -> 1604;
1611 -> 1605;
1611 -> 1610;
1611 -> 1604;
1612 -> 1606;
1612 -> 1604;
1613 -> 1608;
1613 -> 1604;
1614 -> 1604;
1615 -> 1612;
1615 -> 1613;
1615 -> 1614;
1615 -> 1596;
1615 -> 1604;
1616 -> 1604;
1617 -> 1615;
1617 -> 1604;
1618 -> 1604;
1619 -> 1616;
1619 -> 1618;
1619 -> 1604;
1620 -> 1615;
1620 -> 1604;
1621 -> 1620;
1621 -> 1583;
1622 -> 1597;
1622 -> 1621;
1623 -> 1562;
1624 -> 1546;
1625 -> 1531;
1625 -> 1535;
1626 -> 1625;
1626 -> 751;
1627 -> 1413;
1627 -> 751;
1628 -> 1412;
1628 -> 751;
1629 -> 1414;
1629 -> 751;
1630 -> 751;
1631 -> 1626;
1631 -> 1630;
1632 -> 1627;
1632 -> 1630;
1633 -> 1628;
1633 -> 1630;
1634 -> 1629;
1634 -> 1630;
1635 -> 1416;
1635 -> 1630;
1636 -> 1630;
1637 -> 1631;
1637 -> 1636;
1638 -> 1637;
1638 -> 1531;
1638 -> 1636;
1639 -> 1638;
1639 -> 0;
1639 -> 1636;
1640 -> 1639;
1640 -> 1630;
1641 -> 1631;
1641 -> 1630;
1642 -> 751;
1643 -> 1641;
1643 -> 1642;
1644 -> 1643;
1644 -> 1531;
1644 -> 1642;
1645 -> 777;
1645 -> 1644;
1645 -> 1615;
1645 -> 748;
1646 -> 777;
1646 -> 751;
1647 -> 777;
1647 -> 751;
1648 -> 777;
1648 -> 751;
1649 -> 1646;
1649 -> 751;
1650 -> 751;
1651 -> 1647;
1651 -> 751;
1652 -> 751;
1653 -> 751;
1654 -> 1649;
1654 -> 1653;
1655 -> 1650;
1655 -> 1653;
1656 -> 1651;
1656 -> 1653;
1657 -> 1652;
1657 -> 1653;
1658 -> 1648;
1658 -> 1653;
1660 -> 1659;
1662 -> 1661;
1664 -> 1663;
1666 -> 1662;
1666 -> 1665;
1667 -> 1664;
1667 -> 1665;
1669 -> 1662;
1669 -> 1668;
1670 -> 1664;
1670 -> 1668;
1672 -> 1662;
1672 -> 1671;
1673 -> 1664;
1673 -> 1671;
1675 -> 1662;
1675 -> 1674;
1676 -> 1664;
1676 -> 1674;
1678 -> 1662;
1678 -> 1677;
1679 -> 1664;
1679 -> 1677;
1681 -> 1662;
1681 -> 1680;
1682 -> 1664;
1682 -> 1680;
1684 -> 1662;
1684 -> 1683;
1685 -> 1664;
1685 -> 1683;
1687 -> 1662;
1687 -> 1686;
1688 -> 1664;
1688 -> 1686;
1690 -> 1662;
1690 -> 1689;
1691 -> 1664;
1691 -> 1689;
1693 -> 1662;
1693 -> 1692;
1694 -> 1664;
1694 -> 1692;
1696 -> 1662;
1696 -> 1695;
1698 -> 1662;
1698 -> 1697;
1700 -> 1665;
1700 -> 1699;
1701 -> 1668;
1701 -> 1699;
1702 -> 1671;
1702 -> 1699;
1703 -> 1674;
1703 -> 1699;
1704 -> 1677;
1704 -> 1699;
1705 -> 1680;
1705 -> 1699;
1706 -> 1683;
1706 -> 1699;
1707 -> 1686;
1707 -> 1699;
1708 -> 1689;
1708 -> 1699;
1709 -> 1692;
1709 -> 1699;
1710 -> 1695;
1710 -> 1699;
1711 -> 1697;
1711 -> 1699;
1712 -> 1699;
1714 -> 1662;
1714 -> 1713;
1715 -> 1664;
1715 -> 1713;
1717 -> 1664;
1717 -> 1716;
1718 -> 1662;
1718 -> 1716;
1720 -> 1664;
1720 -> 1719;
1721 -> 1662;
1721 -> 1719;
1723 -> 1664;
1723 -> 1722;
1724 -> 1662;
1724 -> 1722;
1726 -> 1664;
1726 -> 1725;
1727 -> 1662;
1727 -> 1725;
1729 -> 1664;
1729 -> 1728;
1730 -> 1662;
1730 -> 1728;
1732 -> 1664;
1732 -> 1731;
1733 -> 1662;
1733 -> 1731;
1735 -> 1664;
1735 -> 1734;
1736 -> 1662;
1736 -> 1734;
1738 -> 1664;
1738 -> 1737;
1739 -> 1662;
1739 -> 1737;
1741 -> 1664;
1741 -> 1740;
1742 -> 1662;
1742 -> 1740;
1744 -> 1664;
1744 -> 1743;
1745 -> 1662;
1745 -> 1743;
1747 -> 1664;
1747 -> 1746;
1748 -> 1662;
1748 -> 1746;
1750 -> 1713;
1750 -> 1749;
1751 -> 1716;
1751 -> 1749;
1752 -> 1719;
1752 -> 1749;
1753 -> 1722;
1753 -> 1749;
1754 -> 1725;
1754 -> 1749;
1755 -> 1728;
1755 -> 1749;
1756 -> 1731;
1756 -> 1749;
1757 -> 1734;
1757 -> 1749;
1758 -> 1737;
1758 -> 1749;
1759 -> 1740;
1759 -> 1749;
1760 -> 1743;
1760 -> 1749;
1761 -> 1746;
1761 -> 1749;
1762 -> 1749;
1763 -> 1654;
1763 -> 1653;
1764 -> 1655;
1764 -> 1653;
1765 -> 1656;
1765 -> 1653;
1766 -> 1657;
1766 -> 1653;
1767 -> 1653;
1768 -> 1763;
1768 -> 1767;
1769 -> 1764;
1769 -> 1767;
1770 -> 1765;
1770 -> 1767;
1771 -> 1766;
1771 -> 1767;
1772 -> 1658;
1772 -> 1767;
1773 -> 1772;
1773 -> 1767;
1774 -> 1772;
1774 -> 1767;
1775 -> 1772;
1775 -> 1767;
1776 -> 1772;
1776 -> 1767;
1777 -> 1767;
1778 -> 1768;
1778 -> 1777;
1778 -> 1767;
1779 -> 1767;
1780 -> 1771;
1780 -> 1779;
1780 -> 1767;
1781 -> 1767;
1782 -> 1771;
1782 -> 1781;
1782 -> 1767;
1783 -> 1768;
1783 -> 1772;
1783 -> 1767;
1784 -> 1769;
1784 -> 1772;
1784 -> 1767;
1785 -> 1770;
1785 -> 1772;
1785 -> 1767;
1786 -> 1771;
1786 -> 1772;
1786 -> 1767;
1787 -> 777;
1787 -> 1645;
1787 -> 1783;
1787 -> 1784;
1787 -> 1785;
1787 -> 1786;
1787 -> 748;
1788 -> 1787;
1788 -> 1001;
1788 -> 995;
1789 -> 1787;
1789 -> 1042;
1790 -> 1787;
1790 -> 1042;
1791 -> 1789;
1791 -> 1787;
1791 -> 1042;
1792 -> 1042;
1793 -> 1791;
1793 -> 1792;
1794 -> 1790;
1794 -> 1792;
1795 -> 1794;
1795 -> 1793;
1795 -> 1787;
1795 -> 1792;
1796 -> 1795;
1796 -> 1792;
1797 -> 1795;
1797 -> 1792;
1798 -> 1796;
1798 -> 1795;
1798 -> 1792;
1799 -> 1792;
1800 -> 1798;
1800 -> 1799;
1801 -> 1797;
1801 -> 1799;
1802 -> 1801;
1802 -> 1800;
1802 -> 1795;
1802 -> 1799;
1803 -> 1799;
1804 -> 1321;
1804 -> 1803;
1805 -> 1803;
1806 -> 1803;
1807 -> 1806;
1808 -> 1802;
1808 -> 1807;
1809 -> 1807;
1810 -> 1807;
1811 -> 1807;
1812 -> 1810;
1812 -> 1811;
1813 -> 1810;
1813 -> 1806;
1814 -> 1806;
1815 -> 1806;
1816 -> 1813;
1816 -> 1806;
1817 -> 1814;
1817 -> 1806;
1818 -> 1806;
1819 -> 1802;
1820 -> 1819;
1820 -> 1802;
1821 -> 1802;
1822 -> 1802;
1822 -> 1821;
1823 -> 1822;
1823 -> 1802;
1823 -> 1821;
1824 -> 1823;
1824 -> 1802;
1825 -> 1802;
1826 -> 1802;
1827 -> 1802;
1828 -> 1802;
1829 -> 1802;
1830 -> 1802;
1831 -> 1802;
1832 -> 1802;
1833 -> 1792;
1834 -> 1802;
1834 -> 1833;
1835 -> 1802;
1835 -> 1833;
1836 -> 0;
1836 -> 1833;
1837 -> 1833;
1838 -> 1836;
1838 -> 1837;
1839 -> 1835;
1839 -> 1372;
1840 -> 1839;
1840 -> 1385;
1841 -> 1835;
1841 -> 1372;
1842 -> 1841;
1842 -> 1390;
1843 -> 1436;
1843 -> 1835;
1844 -> 1843;
1844 -> 1835;
1845 -> 1437;
1845 -> 1835;
1846 -> 1438;
1846 -> 1835;
1847 -> 1439;
1847 -> 1835;
1848 -> 1835;
1849 -> 1844;
1849 -> 1848;
1850 -> 1844;
1850 -> 1848;
1851 -> 1845;
1851 -> 1848;
1852 -> 1846;
1852 -> 1848;
1853 -> 1847;
1853 -> 1848;
1854 -> 1440;
1854 -> 1848;
1855 -> 1849;
1855 -> 1848;
1856 -> 1851;
1856 -> 1848;
1857 -> 1852;
1857 -> 1848;
1858 -> 1848;
1859 -> 1848;
1860 -> 1855;
1860 -> 1859;
1861 -> 1856;
1861 -> 1859;
1862 -> 1857;
1862 -> 1859;
1863 -> 1858;
1863 -> 1859;
1864 -> 1854;
1864 -> 1859;
1865 -> 1860;
1865 -> 1859;
1866 -> 1861;
1866 -> 1859;
1867 -> 1862;
1867 -> 1859;
1868 -> 1863;
1868 -> 1859;
1869 -> 1859;
1870 -> 1865;
1870 -> 1869;
1871 -> 1866;
1871 -> 1869;
1872 -> 1867;
1872 -> 1869;
1873 -> 1868;
1873 -> 1869;
1874 -> 1864;
1874 -> 1869;
1875 -> 1870;
1876 -> 1871;
1876 -> 1870;
1877 -> 1872;
1877 -> 1870;
1878 -> 1873;
1878 -> 1870;
1879 -> 1870;
1880 -> 1875;
1880 -> 1879;
1881 -> 1876;
1881 -> 1879;
1882 -> 1877;
1882 -> 1879;
1883 -> 1878;
1883 -> 1879;
1884 -> 1875;
1884 -> 1879;
1885 -> 1874;
1885 -> 1879;
1886 -> 1880;
1886 -> 1870;
1886 -> 1879;
1887 -> 1886;
1887 -> 1879;
1888 -> 1880;
1888 -> 1870;
1888 -> 1879;
1889 -> 1884;
1889 -> 1879;
1890 -> 1886;
1890 -> 1879;
1891 -> 1879;
1892 -> 1881;
1892 -> 1879;
1893 -> 1879;
1894 -> 1888;
1894 -> 1893;
1895 -> 1889;
1895 -> 1893;
1896 -> 1890;
1896 -> 1893;
1897 -> 1891;
1897 -> 1893;
1898 -> 1892;
1898 -> 1893;
1899 -> 1885;
1899 -> 1893;
1900 -> 1893;
1901 -> 1895;
1901 -> 1900;
1901 -> 1893;
1902 -> 1893;
1903 -> 1902;
1903 -> 1879;
1904 -> 1879;
1905 -> 1903;
1905 -> 1904;
1905 -> 1879;
1907 -> 1906;
1908 -> 1907;
1908 -> 1906;
1909 -> 1906;
1910 -> 1908;
1910 -> 1906;
1911 -> 1910;
1912 -> 1879;
1913 -> 1911;
1913 -> 1912;
1914 -> 1911;
1914 -> 1908;
1914 -> 1912;
1915 -> 1912;
1916 -> 1914;
1916 -> 1915;
1917 -> 1913;
1917 -> 1915;
1918 -> 1917;
1918 -> 1915;
1919 -> 1917;
1919 -> 1915;
1920 -> 1917;
1920 -> 1915;
1921 -> 1917;
1921 -> 1915;
1922 -> 1916;
1922 -> 1917;
1922 -> 1915;
1923 -> 0;
1923 -> 1917;
1923 -> 1915;
1924 -> 1915;
1925 -> 1924;
1925 -> 1917;
1925 -> 1915;
1926 -> 1915;
1927 -> 1926;
1927 -> 1917;
1927 -> 1915;
1928 -> 1914;
1928 -> 1913;
1928 -> 1923;
1928 -> 1925;
1928 -> 1927;
1928 -> 1922;
1928 -> 1924;
1928 -> 1912;
1929 -> 1912;
1930 -> 1928;
1930 -> 1929;
1931 -> 1930;
1931 -> 1928;
1931 -> 0;
1931 -> 1929;
1932 -> 1929;
1933 -> 1930;
1933 -> 1928;
1933 -> 1932;
1933 -> 1929;
1934 -> 1931;
1934 -> 1912;
1935 -> 1928;
1935 -> 1912;
1936 -> 1935;
1936 -> 1879;
1937 -> 1880;
1937 -> 1879;
1938 -> 1880;
1938 -> 1870;
1938 -> 1879;
1939 -> 1879;
1940 -> 1937;
1940 -> 1939;
1941 -> 1938;
1941 -> 1939;
1942 -> 1940;
1942 -> 1939;
1943 -> 0;
1943 -> 1942;
1944 -> 1879;
1945 -> 1936;
1945 -> 1879;
1946 -> 1884;
1946 -> 1879;
1947 -> 1886;
1947 -> 1879;
1948 -> 1879;
1949 -> 1882;
1949 -> 1879;
1950 -> 1943;
1950 -> 1879;
1951 -> 1944;
1951 -> 1879;
1952 -> 1879;
1953 -> 1945;
1953 -> 1952;
1954 -> 1946;
1954 -> 1952;
1955 -> 1947;
1955 -> 1952;
1956 -> 1948;
1956 -> 1952;
1957 -> 1949;
1957 -> 1952;
1958 -> 1950;
1958 -> 1952;
1959 -> 1948;
1959 -> 1952;
1960 -> 1951;
1960 -> 1952;
1961 -> 1885;
1961 -> 1952;
1962 -> 1958;
1962 -> 1952;
1963 -> 1952;
1964 -> 1962;
1964 -> 1963;
1965 -> 1964;
1965 -> 0;
1965 -> 1963;
1966 -> 1953;
1966 -> 1965;
1967 -> 1954;
1967 -> 1965;
1968 -> 1955;
1968 -> 1965;
1969 -> 1956;
1969 -> 1965;
1970 -> 1957;
1970 -> 1965;
1971 -> 1958;
1971 -> 1965;
1972 -> 1959;
1972 -> 1965;
1973 -> 1960;
1973 -> 1965;
1974 -> 1965;
1975 -> 1966;
1975 -> 1974;
1976 -> 1967;
1976 -> 1974;
1977 -> 1968;
1977 -> 1974;
1978 -> 1969;
1978 -> 1974;
1979 -> 1970;
1979 -> 1974;
1980 -> 1971;
1980 -> 1974;
1981 -> 1972;
1981 -> 1974;
1982 -> 1973;
1982 -> 1974;
1983 -> 1961;
1983 -> 1974;
1984 -> 1974;
1985 -> 1976;
1985 -> 1984;
1985 -> 1974;
1986 -> 1975;
1986 -> 1985;
1987 -> 1977;
1987 -> 1985;
1988 -> 1978;
1988 -> 1985;
1989 -> 1979;
1989 -> 1985;
1990 -> 1980;
1990 -> 1985;
1991 -> 1981;
1991 -> 1985;
1992 -> 1982;
1992 -> 1985;
1993 -> 1985;
1994 -> 1986;
1994 -> 1993;
1995 -> 1987;
1995 -> 1993;
1996 -> 1988;
1996 -> 1993;
1997 -> 1989;
1997 -> 1993;
1998 -> 1990;
1998 -> 1993;
1999 -> 1991;
1999 -> 1993;
2000 -> 1992;
2000 -> 1993;
2001 -> 1983;
2001 -> 1993;
2002 -> 1993;
2003 -> 1994;
2003 -> 2002;
2004 -> 2003;
2004 -> 1928;
2004 -> 0;
2004 -> 2002;
2005 -> 2002;
2006 -> 2003;
2006 -> 1928;
2006 -> 2005;
2006 -> 2002;
2007 -> 2004;
2007 -> 1993;
2008 -> 1998;
2008 -> 1993;
2009 -> 1993;
2010 -> 2008;
2010 -> 2009;
2011 -> 2010;
2011 -> 0;
2011 -> 2009;
2012 -> 2010;
2012 -> 0;
2012 -> 2009;
2013 -> 2009;
2014 -> 0;
2014 -> 2009;
2015 -> 2010;
2015 -> 2014;
2015 -> 2009;
2016 -> 0;
2016 -> 2009;
2017 -> 2010;
2017 -> 2016;
2017 -> 2009;
2018 -> 2009;
2019 -> 0;
2019 -> 2009;
2020 -> 2010;
2020 -> 2019;
2020 -> 2009;
2021 -> 2020;
2021 -> 2009;
2022 -> 2009;
2023 -> 2021;
2023 -> 2022;
2024 -> 2022;
2025 -> 2023;
2025 -> 2024;
2025 -> 2022;
2026 -> 1993;
2027 -> 2001;
2027 -> 1993;
2028 -> 1993;
2029 -> 1993;
2030 -> 1994;
2030 -> 2029;
2031 -> 2029;
2032 -> 2030;
2032 -> 2031;
2033 -> 2032;
2033 -> 1928;
2033 -> 2031;
2034 -> 2033;
2034 -> 2029;
2035 -> 2034;
2035 -> 1993;
2036 -> 2027;
2036 -> 2035;
2036 -> 1993;
2037 -> 2036;
2038 -> 2026;
2038 -> 2037;
2038 -> 2036;
2039 -> 1994;
2039 -> 2038;
2040 -> 1995;
2040 -> 2038;
2041 -> 1996;
2041 -> 2038;
2042 -> 1997;
2042 -> 2038;
2043 -> 1998;
2043 -> 2038;
2044 -> 2001;
2044 -> 2038;
2045 -> 1999;
2045 -> 2038;
2046 -> 2000;
2046 -> 2038;
2047 -> 2038;
2048 -> 2039;
2048 -> 2047;
2049 -> 2040;
2049 -> 2047;
2050 -> 2041;
2050 -> 2047;
2051 -> 2042;
2051 -> 2047;
2052 -> 2043;
2052 -> 2047;
2053 -> 2044;
2053 -> 2047;
2054 -> 2045;
2054 -> 2047;
2055 -> 2046;
2055 -> 2047;
2056 -> 2027;
2056 -> 2047;
2057 -> 2038;
2058 -> 2038;
2059 -> 1994;
2059 -> 2058;
2060 -> 2059;
2060 -> 1928;
2060 -> 0;
2060 -> 2058;
2061 -> 2058;
2062 -> 2059;
2062 -> 1928;
2062 -> 2061;
2062 -> 2058;
2063 -> 2060;
2063 -> 2038;
2064 -> 1998;
2064 -> 0;
2064 -> 2036;
2065 -> 2036;
2066 -> 2039;
2066 -> 2047;
2067 -> 2040;
2067 -> 2047;
2068 -> 2041;
2068 -> 2047;
2069 -> 2042;
2069 -> 2047;
2070 -> 2043;
2070 -> 2047;
2071 -> 2044;
2071 -> 2047;
2072 -> 2045;
2072 -> 2047;
2073 -> 2055;
2073 -> 2047;
2074 -> 2036;
2074 -> 2047;
2075 -> 2047;
2076 -> 2066;
2076 -> 2075;
2077 -> 2076;
2077 -> 1928;
2077 -> 0;
2077 -> 2075;
2078 -> 2075;
2079 -> 2076;
2079 -> 1928;
2079 -> 2078;
2079 -> 2075;
2080 -> 2077;
2080 -> 2047;
2081 -> 2047;
2082 -> 2074;
2082 -> 2081;
2083 -> 2082;
2083 -> 1942;
2083 -> 0;
2083 -> 2081;
2084 -> 2083;
2084 -> 2047;
2085 -> 2069;
2085 -> 2047;
2086 -> 2047;
2087 -> 2085;
2087 -> 2086;
2088 -> 2074;
2088 -> 2086;
2089 -> 2086;
2090 -> 2088;
2090 -> 1942;
2090 -> 2089;
2090 -> 2086;
2091 -> 2086;
2092 -> 2088;
2092 -> 1942;
2092 -> 2091;
2092 -> 2086;
2093 -> 2088;
2093 -> 1942;
2093 -> 2086;
2094 -> 2093;
2094 -> 2047;
2095 -> 2070;
2095 -> 0;
2095 -> 2047;
2096 -> 2047;
2097 -> 2074;
2097 -> 1942;
2097 -> 2096;
2097 -> 2047;
2098 -> 2095;
2098 -> 2097;
2098 -> 2047;
2099 -> 2066;
2099 -> 2098;
2100 -> 2074;
2100 -> 1942;
2100 -> 2098;
2101 -> 2067;
2101 -> 2098;
2102 -> 2068;
2102 -> 2098;
2103 -> 2069;
2103 -> 2098;
2104 -> 2070;
2104 -> 2098;
2105 -> 2071;
2105 -> 2098;
2106 -> 2072;
2106 -> 2098;
2107 -> 2073;
2107 -> 2098;
2108 -> 2098;
2109 -> 2099;
2109 -> 2108;
2110 -> 2100;
2110 -> 2108;
2111 -> 2101;
2111 -> 2108;
2112 -> 2102;
2112 -> 2108;
2113 -> 2103;
2113 -> 2108;
2114 -> 2104;
2114 -> 2108;
2115 -> 2105;
2115 -> 2108;
2116 -> 2106;
2116 -> 2108;
2117 -> 2107;
2117 -> 2108;
2118 -> 2074;
2118 -> 2108;
2119 -> 2114;
2119 -> 2108;
2120 -> 2108;
2121 -> 2119;
2121 -> 2120;
2122 -> 2121;
2122 -> 0;
2122 -> 2120;
2123 -> 2121;
2123 -> 0;
2123 -> 2120;
2124 -> 2120;
2125 -> 0;
2125 -> 2120;
2126 -> 2121;
2126 -> 2125;
2126 -> 2120;
2127 -> 0;
2127 -> 2120;
2128 -> 2121;
2128 -> 2127;
2128 -> 2120;
2129 -> 2120;
2130 -> 0;
2130 -> 2120;
2131 -> 2121;
2131 -> 2130;
2131 -> 2120;
2132 -> 2131;
2132 -> 2120;
2133 -> 2120;
2134 -> 2132;
2134 -> 2133;
2135 -> 2133;
2136 -> 2134;
2136 -> 2135;
2136 -> 2133;
2137 -> 2108;
2138 -> 2112;
2138 -> 2137;
2138 -> 2108;
2139 -> 2110;
2139 -> 1942;
2139 -> 2108;
2140 -> 2109;
2140 -> 2139;
2141 -> 2110;
2141 -> 2139;
2142 -> 2111;
2142 -> 2139;
2143 -> 2112;
2143 -> 2139;
2144 -> 2113;
2144 -> 2139;
2145 -> 2114;
2145 -> 2139;
2146 -> 2115;
2146 -> 2139;
2147 -> 2116;
2147 -> 2139;
2148 -> 2117;
2148 -> 2139;
2149 -> 2139;
2150 -> 2140;
2150 -> 2149;
2151 -> 2141;
2151 -> 2149;
2152 -> 2142;
2152 -> 2149;
2153 -> 2143;
2153 -> 2149;
2154 -> 2144;
2154 -> 2149;
2155 -> 2145;
2155 -> 2149;
2156 -> 2146;
2156 -> 2149;
2157 -> 2147;
2157 -> 2149;
2158 -> 2148;
2158 -> 2149;
2159 -> 2118;
2159 -> 2149;
2160 -> 2151;
2160 -> 1942;
2160 -> 2149;
2161 -> 2150;
2161 -> 2160;
2162 -> 2151;
2162 -> 2160;
2163 -> 2152;
2163 -> 2160;
2164 -> 2153;
2164 -> 2160;
2165 -> 2154;
2165 -> 2160;
2166 -> 2155;
2166 -> 2160;
2167 -> 2156;
2167 -> 2160;
2168 -> 2157;
2168 -> 2160;
2169 -> 2158;
2169 -> 2160;
2170 -> 2160;
2171 -> 2161;
2171 -> 2170;
2172 -> 2162;
2172 -> 2170;
2173 -> 2163;
2173 -> 2170;
2174 -> 2164;
2174 -> 2170;
2175 -> 2165;
2175 -> 2170;
2176 -> 2166;
2176 -> 2170;
2177 -> 2167;
2177 -> 2170;
2178 -> 2168;
2178 -> 2170;
2179 -> 2169;
2179 -> 2170;
2180 -> 2159;
2180 -> 2170;
2181 -> 2171;
2181 -> 2170;
2182 -> 2172;
2182 -> 2170;
2183 -> 2173;
2183 -> 2170;
2184 -> 2174;
2184 -> 2170;
2185 -> 2175;
2185 -> 2170;
2186 -> 2176;
2186 -> 2170;
2187 -> 2177;
2187 -> 2170;
2188 -> 2178;
2188 -> 2170;
2189 -> 2179;
2189 -> 2170;
2190 -> 2170;
2191 -> 2181;
2191 -> 2190;
2192 -> 2182;
2192 -> 2190;
2193 -> 2183;
2193 -> 2190;
2194 -> 2184;
2194 -> 2190;
2195 -> 2185;
2195 -> 2190;
2196 -> 2186;
2196 -> 2190;
2197 -> 2187;
2197 -> 2190;
2198 -> 2182;
2198 -> 2190;
2199 -> 2188;
2199 -> 2190;
2200 -> 2189;
2200 -> 2190;
2201 -> 2180;
2201 -> 2190;
2202 -> 2190;
2203 -> 2192;
2203 -> 2202;
2203 -> 2190;
2204 -> 2192;
2204 -> 2190;
2205 -> 2192;
2205 -> 2190;
2206 -> 2190;
2207 -> 2206;
2208 -> 2206;
2209 -> 2206;
2210 -> 2206;
2211 -> 2206;
2212 -> 2206;
2212 -> 2211;
2213 -> 2212;
2213 -> 2206;
2213 -> 0;
2213 -> 2211;
2214 -> 2211;
2215 -> 2212;
2215 -> 2206;
2215 -> 2214;
2215 -> 2211;
2216 -> 2213;
2216 -> 2206;
2217 -> 2206;
2217 -> 2190;
2218 -> 2190;
2219 -> 2190;
2220 -> 2205;
2220 -> 2219;
2220 -> 2190;
2221 -> 2220;
2222 -> 2217;
2222 -> 2221;
2223 -> 0;
2223 -> 2222;
2223 -> 2221;
2224 -> 2222;
2224 -> 2206;
2224 -> 2223;
2224 -> 2221;
2225 -> 2221;
2226 -> 2225;
2226 -> 2222;
2226 -> 2221;
2227 -> 2220;
2228 -> 2217;
2228 -> 2220;
2229 -> 2205;
2229 -> 2220;
2230 -> 2193;
2230 -> 2220;
2231 -> 2194;
2231 -> 2220;
2232 -> 2196;
2232 -> 2220;
2233 -> 2197;
2233 -> 2220;
2234 -> 2198;
2234 -> 2220;
2235 -> 2199;
2235 -> 2220;
2236 -> 2200;
2236 -> 2220;
2237 -> 2195;
2237 -> 2220;
2238 -> 2220;
2239 -> 2228;
2239 -> 2238;
2240 -> 2229;
2240 -> 2238;
2241 -> 2230;
2241 -> 2238;
2242 -> 2231;
2242 -> 2238;
2243 -> 2232;
2243 -> 2238;
2244 -> 2233;
2244 -> 2238;
2245 -> 2234;
2245 -> 2238;
2246 -> 2235;
2246 -> 2238;
2247 -> 2236;
2247 -> 2238;
2248 -> 2237;
2248 -> 2238;
2249 -> 2240;
2249 -> 2238;
2250 -> 2241;
2250 -> 2238;
2251 -> 2243;
2251 -> 2238;
2252 -> 2244;
2252 -> 2238;
2253 -> 2238;
2254 -> 2249;
2254 -> 2253;
2255 -> 2250;
2255 -> 2253;
2256 -> 2251;
2256 -> 2253;
2257 -> 2252;
2257 -> 2253;
2258 -> 2256;
2258 -> 0;
2258 -> 2253;
2259 -> 2253;
2260 -> 2258;
2260 -> 2254;
2260 -> 2253;
2261 -> 2255;
2261 -> 2260;
2262 -> 2254;
2262 -> 2261;
2262 -> 2204;
2262 -> 2260;
2263 -> 2262;
2263 -> 2238;
2264 -> 2220;
2265 -> 2191;
2265 -> 2220;
2266 -> 2217;
2266 -> 2220;
2267 -> 2195;
2267 -> 2220;
2268 -> 2247;
2268 -> 2220;
2269 -> 2265;
2269 -> 2266;
2269 -> 2267;
2269 -> 2268;
2269 -> 2224;
2269 -> 2226;
2269 -> 2262;
2269 -> 2220;
2270 -> 2220;
2271 -> 2269;
2271 -> 2270;
2272 -> 2269;
2272 -> 2270;
2273 -> 2270;
2274 -> 2271;
2274 -> 2273;
2275 -> 2274;
2275 -> 2270;
2276 -> 2270;
2277 -> 2272;
2277 -> 2276;
2278 -> 2277;
2278 -> 2270;
2279 -> 2275;
2279 -> 2278;
2279 -> 2270;
2280 -> 2205;
2280 -> 2220;
2281 -> 2220;
2282 -> 2280;
2282 -> 2269;
2282 -> 2281;
2282 -> 2220;
2283 -> 2220;
2284 -> 2217;
2284 -> 2283;
2285 -> 2284;
2285 -> 2269;
2285 -> 2283;
2286 -> 2285;
2286 -> 2220;
2287 -> 2220;
2288 -> 2191;
2288 -> 2287;
2289 -> 2288;
2289 -> 2269;
2289 -> 2287;
2290 -> 2289;
2290 -> 2220;
2291 -> 2220;
2292 -> 2195;
2292 -> 2291;
2292 -> 2220;
2293 -> 2220;
2294 -> 2197;
2294 -> 2293;
2295 -> 2293;
2296 -> 2294;
2296 -> 2295;
2297 -> 2296;
2297 -> 2269;
2297 -> 2295;
2298 -> 0;
2298 -> 2295;
2299 -> 2295;
2300 -> 2297;
2300 -> 2299;
2301 -> 2298;
2301 -> 2299;
2302 -> 2300;
2302 -> 2293;
2303 -> 2302;
2303 -> 2220;
2304 -> 2205;
2304 -> 2220;
2305 -> 2195;
2305 -> 2220;
2306 -> 2201;
2306 -> 2269;
2306 -> 2220;
2307 -> 2218;
2307 -> 2220;
2308 -> 2304;
2308 -> 2305;
2308 -> 2306;
2308 -> 2307;
2308 -> 2269;
2308 -> 2220;
2309 -> 2220;
2310 -> 2308;
2310 -> 2309;
2310 -> 2220;
2311 -> 2308;
2311 -> 2310;
2312 -> 2269;
2312 -> 2310;
2313 -> 2308;
2314 -> 2194;
2314 -> 2308;
2315 -> 2197;
2315 -> 2308;
2316 -> 2198;
2316 -> 2308;
2317 -> 2199;
2317 -> 2308;
2318 -> 2308;
2319 -> 2314;
2319 -> 2308;
2320 -> 2315;
2320 -> 2308;
2321 -> 2316;
2321 -> 2308;
2322 -> 2317;
2322 -> 2308;
2323 -> 2308;
2324 -> 2320;
2324 -> 2308;
2325 -> 2311;
2325 -> 2308;
2326 -> 2311;
2326 -> 2308;
2327 -> 2311;
2327 -> 2308;
2328 -> 2308;
2329 -> 2326;
2329 -> 2328;
2330 -> 2329;
2330 -> 2308;
2331 -> 2308;
2332 -> 2327;
2332 -> 2331;
2333 -> 2332;
2333 -> 2308;
2334 -> 2330;
2334 -> 2333;
2334 -> 2308;
2335 -> 2308;
2336 -> 2308;
2337 -> 2335;
2337 -> 2311;
2337 -> 2336;
2337 -> 2308;
2338 -> 2308;
2339 -> 2338;
2339 -> 2311;
2340 -> 2339;
2340 -> 2308;
2341 -> 2308;
2342 -> 2341;
2342 -> 2311;
2343 -> 2342;
2343 -> 2308;
2344 -> 2308;
2345 -> 2308;
2346 -> 2197;
2346 -> 2345;
2347 -> 2345;
2348 -> 2346;
2348 -> 2347;
2349 -> 2348;
2349 -> 2311;
2349 -> 2347;
2350 -> 0;
2350 -> 2347;
2351 -> 2347;
2352 -> 2349;
2352 -> 2351;
2353 -> 2350;
2353 -> 2351;
2354 -> 2352;
2354 -> 2345;
2355 -> 2354;
2355 -> 2308;
2356 -> 2308;
2357 -> 2311;
2357 -> 2190;
2358 -> 2190;
2359 -> 2217;
2359 -> 2358;
2360 -> 2358;
2361 -> 2359;
2361 -> 2360;
2362 -> 0;
2362 -> 2361;
2362 -> 2360;
2363 -> 2361;
2363 -> 2311;
2363 -> 2362;
2363 -> 2360;
2364 -> 2360;
2365 -> 2364;
2365 -> 2361;
2365 -> 2360;
2366 -> 2358;
2367 -> 2358;
2368 -> 2359;
2368 -> 2363;
2368 -> 2367;
2368 -> 2358;
2369 -> 2359;
2369 -> 2368;
2370 -> 2190;
2371 -> 2170;
2372 -> 2160;
2373 -> 2139;
2374 -> 2098;
2375 -> 2098;
2376 -> 2066;
2376 -> 2375;
2377 -> 2376;
2377 -> 2369;
2377 -> 2375;
2378 -> 2377;
2378 -> 2098;
2379 -> 2071;
2379 -> 2047;
2380 -> 2066;
2380 -> 2047;
2381 -> 2067;
2381 -> 2047;
2382 -> 2068;
2382 -> 2047;
2383 -> 2069;
2383 -> 2047;
2384 -> 2070;
2384 -> 2047;
2385 -> 2072;
2385 -> 2047;
2386 -> 2311;
2386 -> 2047;
2387 -> 2047;
2388 -> 2379;
2388 -> 2387;
2389 -> 2380;
2389 -> 2387;
2390 -> 2381;
2390 -> 2387;
2391 -> 2382;
2391 -> 2387;
2392 -> 2383;
2392 -> 2387;
2393 -> 2384;
2393 -> 2387;
2394 -> 2385;
2394 -> 2387;
2395 -> 2386;
2395 -> 2387;
2396 -> 2094;
2396 -> 2387;
2397 -> 2388;
2397 -> 2387;
2398 -> 2389;
2398 -> 2387;
2399 -> 2390;
2399 -> 2387;
2400 -> 2391;
2400 -> 2387;
2401 -> 2392;
2401 -> 2387;
2402 -> 2393;
2402 -> 2387;
2403 -> 2394;
2403 -> 2387;
2404 -> 2395;
2404 -> 2387;
2405 -> 2387;
2406 -> 2397;
2406 -> 2405;
2407 -> 2398;
2407 -> 2405;
2408 -> 2399;
2408 -> 2405;
2409 -> 2400;
2409 -> 2405;
2410 -> 2401;
2410 -> 2405;
2411 -> 2402;
2411 -> 2405;
2412 -> 2403;
2412 -> 2405;
2413 -> 2404;
2413 -> 2405;
2414 -> 2396;
2414 -> 2405;
2415 -> 2405;
2416 -> 2406;
2416 -> 2415;
2417 -> 2416;
2417 -> 2369;
2417 -> 2415;
2418 -> 0;
2418 -> 2415;
2419 -> 2415;
2420 -> 2417;
2420 -> 2419;
2421 -> 2418;
2421 -> 2419;
2422 -> 2420;
2422 -> 2405;
2423 -> 2405;
2424 -> 2423;
2424 -> 2405;
2425 -> 2408;
2425 -> 2405;
2426 -> 2423;
2426 -> 2405;
2427 -> 2414;
2427 -> 2369;
2427 -> 2425;
2427 -> 2426;
2427 -> 2424;
2427 -> 2405;
2428 -> 2414;
2428 -> 2427;
2428 -> 2405;
2429 -> 2387;
2430 -> 2387;
2431 -> 2389;
2431 -> 2430;
2432 -> 2431;
2432 -> 2427;
2432 -> 2430;
2433 -> 2432;
2433 -> 2387;
2434 -> 2393;
2434 -> 0;
2434 -> 2387;
2435 -> 2387;
2436 -> 2433;
2436 -> 2434;
2436 -> 2387;
2437 -> 2396;
2437 -> 2427;
2437 -> 2436;
2438 -> 2388;
2438 -> 2436;
2439 -> 2389;
2439 -> 2436;
2440 -> 2390;
2440 -> 2436;
2441 -> 2391;
2441 -> 2436;
2442 -> 2392;
2442 -> 2436;
2443 -> 2393;
2443 -> 2436;
2444 -> 2394;
2444 -> 2436;
2445 -> 2413;
2445 -> 2436;
2446 -> 2436;
2447 -> 2437;
2447 -> 2446;
2448 -> 2438;
2448 -> 2446;
2449 -> 2439;
2449 -> 2446;
2450 -> 2440;
2450 -> 2446;
2451 -> 2441;
2451 -> 2446;
2452 -> 2442;
2452 -> 2446;
2453 -> 2443;
2453 -> 2446;
2454 -> 2444;
2454 -> 2446;
2455 -> 2445;
2455 -> 2446;
2456 -> 2448;
2456 -> 2427;
2456 -> 2446;
2457 -> 0;
2457 -> 2446;
2458 -> 2446;
2459 -> 2456;
2459 -> 2458;
2460 -> 2457;
2460 -> 2458;
2461 -> 2446;
2462 -> 2448;
2462 -> 2461;
2463 -> 2462;
2463 -> 2427;
2463 -> 2461;
2464 -> 0;
2464 -> 2461;
2465 -> 2461;
2466 -> 2463;
2466 -> 2465;
2467 -> 2464;
2467 -> 2465;
2468 -> 2466;
2468 -> 2446;
2469 -> 2447;
2469 -> 2446;
2470 -> 2436;
2471 -> 2047;
2472 -> 2059;
2472 -> 2427;
2472 -> 0;
2472 -> 2058;
2473 -> 2059;
2473 -> 2427;
2473 -> 2061;
2473 -> 2058;
2474 -> 2472;
2474 -> 2038;
2475 -> 1996;
2475 -> 2427;
2476 -> 1999;
2476 -> 2427;
2477 -> 2475;
2477 -> 2427;
2478 -> 2427;
2479 -> 2476;
2479 -> 2427;
2480 -> 2427;
2481 -> 2427;
2481 -> 2480;
2482 -> 2481;
2482 -> 2427;
2482 -> 0;
2482 -> 2480;
2483 -> 2480;
2484 -> 2481;
2484 -> 2427;
2484 -> 2483;
2484 -> 2480;
2485 -> 2482;
2485 -> 2427;
2486 -> 2427;
2487 -> 2427;
2487 -> 2486;
2488 -> 2487;
2488 -> 2427;
2488 -> 0;
2488 -> 2486;
2489 -> 2488;
2489 -> 2427;
2490 -> 2427;
2491 -> 2427;
2492 -> 2427;
2493 -> 2427;
2493 -> 2492;
2494 -> 2490;
2494 -> 2492;
2495 -> 2492;
2496 -> 2494;
2496 -> 2495;
2497 -> 2494;
2497 -> 2495;
2498 -> 2494;
2498 -> 2495;
2499 -> 2494;
2499 -> 2495;
2500 -> 2495;
2501 -> 2500;
2501 -> 2495;
2502 -> 2495;
2503 -> 2502;
2503 -> 2495;
2504 -> 2496;
2504 -> 2494;
2504 -> 2495;
2505 -> 2496;
2505 -> 2504;
2506 -> 2499;
2506 -> 2504;
2507 -> 2505;
2507 -> 2504;
2507 -> 2506;
2508 -> 2505;
2508 -> 2504;
2508 -> 2507;
2509 -> 2505;
2509 -> 2504;
2510 -> 2495;
2511 -> 2508;
2511 -> 2504;
2511 -> 2510;
2511 -> 2495;
2512 -> 2509;
2512 -> 2504;
2512 -> 2510;
2512 -> 2495;
2513 -> 2511;
2513 -> 2512;
2513 -> 2495;
2514 -> 776;
2514 -> 2513;
2515 -> 2477;
2515 -> 2514;
2516 -> 2478;
2516 -> 2514;
2517 -> 2479;
2517 -> 2514;
2518 -> 2455;
2518 -> 2514;
2519 -> 2515;
2519 -> 2514;
2520 -> 2516;
2520 -> 2514;
2521 -> 2517;
2521 -> 2514;
2522 -> 2514;
2523 -> 2514;
2524 -> 2522;
2524 -> 2523;
2525 -> 2524;
2525 -> 0;
2525 -> 2523;
2526 -> 2524;
2526 -> 0;
2526 -> 2523;
2527 -> 2523;
2528 -> 0;
2528 -> 2523;
2529 -> 2524;
2529 -> 2528;
2529 -> 2523;
2530 -> 0;
2530 -> 2523;
2531 -> 2524;
2531 -> 2530;
2531 -> 2523;
2532 -> 2523;
2533 -> 0;
2533 -> 2523;
2534 -> 2524;
2534 -> 2533;
2534 -> 2523;
2535 -> 2534;
2535 -> 2523;
2536 -> 2523;
2537 -> 2535;
2537 -> 2536;
2538 -> 2536;
2539 -> 2537;
2539 -> 2538;
2539 -> 2536;
2540 -> 2514;
2541 -> 2519;
2541 -> 2540;
2541 -> 2514;
2542 -> 2514;
2543 -> 2519;
2543 -> 2514;
2544 -> 2520;
2544 -> 2514;
2545 -> 2521;
2545 -> 2514;
2546 -> 2518;
2546 -> 2514;
2547 -> 2514;
2548 -> 2542;
2548 -> 2547;
2549 -> 2542;
2549 -> 2547;
2550 -> 2542;
2550 -> 2547;
2551 -> 2543;
2551 -> 2547;
2552 -> 2542;
2552 -> 2547;
2553 -> 2544;
2553 -> 2547;
2554 -> 2545;
2554 -> 2547;
2555 -> 2546;
2555 -> 2547;
2556 -> 2549;
2556 -> 2547;
2557 -> 2550;
2557 -> 2547;
2558 -> 2552;
2558 -> 2547;
2559 -> 2553;
2559 -> 2547;
2560 -> 2547;
2561 -> 2556;
2561 -> 2560;
2562 -> 2557;
2562 -> 2560;
2563 -> 2558;
2563 -> 2560;
2564 -> 2559;
2564 -> 2560;
2565 -> 2563;
2565 -> 2561;
2565 -> 2560;
2566 -> 2561;
2566 -> 2514;
2566 -> 0;
2566 -> 2565;
2567 -> 2563;
2567 -> 0;
2567 -> 2566;
2568 -> 2566;
2569 -> 2562;
2569 -> 2567;
2570 -> 2569;
2570 -> 2547;
2571 -> 2570;
2572 -> 2551;
2572 -> 2570;
2573 -> 2552;
2573 -> 2570;
2574 -> 2554;
2574 -> 2570;
2575 -> 2555;
2575 -> 2570;
2576 -> 2570;
2577 -> 2571;
2577 -> 2576;
2578 -> 2572;
2578 -> 2576;
2579 -> 2573;
2579 -> 2576;
2580 -> 2571;
2580 -> 2576;
2581 -> 2574;
2581 -> 2576;
2582 -> 2575;
2582 -> 2576;
2583 -> 2571;
2583 -> 2576;
2584 -> 2553;
2584 -> 2576;
2585 -> 2576;
2586 -> 2576;
2587 -> 2577;
2587 -> 2514;
2587 -> 2569;
2587 -> 0;
2587 -> 2576;
2588 -> 2587;
2588 -> 2576;
2589 -> 2588;
2589 -> 2514;
2589 -> 2569;
2589 -> 2576;
2590 -> 2584;
2590 -> 2514;
2590 -> 2589;
2590 -> 2569;
2590 -> 2576;
2591 -> 2588;
2591 -> 2576;
2592 -> 2588;
2592 -> 2590;
2593 -> 2578;
2593 -> 2590;
2594 -> 2581;
2594 -> 2590;
2595 -> 2579;
2595 -> 2590;
2596 -> 2586;
2596 -> 2590;
2597 -> 2590;
2598 -> 2592;
2598 -> 2597;
2599 -> 2593;
2599 -> 2597;
2600 -> 2594;
2600 -> 2597;
2601 -> 2595;
2601 -> 2597;
2602 -> 2596;
2602 -> 2597;
2603 -> 2598;
2603 -> 2590;
2603 -> 2597;
2604 -> 2603;
2605 -> 2599;
2605 -> 2604;
2605 -> 2603;
2606 -> 2597;
2607 -> 2597;
2608 -> 2607;
2608 -> 2590;
2609 -> 2608;
2610 -> 2584;
2610 -> 2609;
2611 -> 2610;
2611 -> 2590;
2611 -> 2609;
2612 -> 0;
2612 -> 2609;
2613 -> 2609;
2614 -> 2611;
2614 -> 2613;
2615 -> 2612;
2615 -> 2613;
2616 -> 2614;
2616 -> 2608;
2617 -> 2579;
2617 -> 0;
2617 -> 2616;
2618 -> 2616;
2619 -> 2579;
2619 -> 0;
2619 -> 2617;
2620 -> 2617;
2621 -> 2619;
2622 -> 2621;
2622 -> 2619;
2623 -> 2622;
2624 -> 2623;
2624 -> 2622;
2625 -> 2588;
2625 -> 2622;
2626 -> 2579;
2626 -> 2622;
2627 -> 2580;
2627 -> 2622;
2628 -> 2622;
2629 -> 2626;
2629 -> 2628;
2630 -> 2627;
2630 -> 2628;
2631 -> 2629;
2631 -> 0;
2631 -> 2628;
2632 -> 2628;
2633 -> 2631;
2633 -> 2628;
2634 -> 2630;
2634 -> 2633;
2635 -> 2585;
2635 -> 2622;
2636 -> 2582;
2636 -> 2622;
2637 -> 2583;
2637 -> 2622;
2638 -> 2622;
2639 -> 2625;
2639 -> 2638;
2640 -> 2634;
2640 -> 2638;
2641 -> 2635;
2641 -> 2638;
2642 -> 2636;
2642 -> 2638;
2643 -> 2637;
2643 -> 2638;
2644 -> 2584;
2644 -> 2638;
2645 -> 2644;
2645 -> 2590;
2645 -> 2638;
2646 -> 0;
2646 -> 2638;
2647 -> 2638;
2648 -> 2645;
2648 -> 2647;
2649 -> 2646;
2649 -> 2647;
2650 -> 2639;
2650 -> 2638;
2651 -> 2640;
2651 -> 2638;
2652 -> 2641;
2652 -> 2638;
2653 -> 2642;
2653 -> 2638;
2654 -> 2643;
2654 -> 2638;
2655 -> 2638;
2656 -> 2650;
2656 -> 2655;
2657 -> 2651;
2657 -> 2655;
2658 -> 2652;
2658 -> 2655;
2659 -> 2653;
2659 -> 2655;
2660 -> 2654;
2660 -> 2655;
2661 -> 2644;
2661 -> 2655;
2662 -> 2656;
2662 -> 2655;
2663 -> 2657;
2663 -> 2655;
2664 -> 2658;
2664 -> 2655;
2665 -> 2659;
2665 -> 2655;
2666 -> 2660;
2666 -> 2655;
2667 -> 2655;
2668 -> 2662;
2668 -> 2667;
2669 -> 2663;
2669 -> 2667;
2670 -> 2664;
2670 -> 2667;
2671 -> 2665;
2671 -> 2667;
2672 -> 2666;
2672 -> 2667;
2673 -> 2661;
2673 -> 2590;
2673 -> 2667;
2674 -> 2673;
2674 -> 2590;
2674 -> 2667;
2675 -> 2667;
2676 -> 2674;
2676 -> 2675;
2676 -> 2667;
2677 -> 2668;
2677 -> 2676;
2678 -> 2674;
2678 -> 2676;
2679 -> 2669;
2679 -> 2676;
2680 -> 2670;
2680 -> 2676;
2681 -> 2671;
2681 -> 2676;
2682 -> 2676;
2683 -> 2676;
2684 -> 2677;
2684 -> 2683;
2685 -> 2678;
2685 -> 2683;
2686 -> 2679;
2686 -> 2683;
2687 -> 2680;
2687 -> 2683;
2688 -> 2681;
2688 -> 2683;
2689 -> 2682;
2689 -> 2683;
2690 -> 2673;
2690 -> 2683;
2691 -> 2690;
2691 -> 2590;
2691 -> 2683;
2692 -> 0;
2692 -> 2683;
2693 -> 2683;
2694 -> 2691;
2694 -> 2693;
2695 -> 2692;
2695 -> 2693;
2696 -> 2684;
2696 -> 2683;
2697 -> 2685;
2697 -> 2683;
2698 -> 2686;
2698 -> 2683;
2699 -> 2687;
2699 -> 2683;
2700 -> 2688;
2700 -> 2683;
2701 -> 2689;
2701 -> 2683;
2702 -> 2683;
2703 -> 2696;
2703 -> 2702;
2704 -> 2697;
2704 -> 2702;
2705 -> 2698;
2705 -> 2702;
2706 -> 2699;
2706 -> 2702;
2707 -> 2700;
2707 -> 2702;
2708 -> 2701;
2708 -> 2702;
2709 -> 2703;
2709 -> 2702;
2710 -> 2704;
2710 -> 2702;
2711 -> 2705;
2711 -> 2702;
2712 -> 2706;
2712 -> 2702;
2713 -> 2704;
2713 -> 2590;
2713 -> 2702;
2714 -> 2707;
2714 -> 2702;
2715 -> 2708;
2715 -> 2702;
2716 -> 2702;
2717 -> 2709;
2717 -> 2716;
2718 -> 2710;
2718 -> 2716;
2719 -> 2711;
2719 -> 2716;
2720 -> 2712;
2720 -> 2716;
2721 -> 2713;
2721 -> 2716;
2722 -> 2714;
2722 -> 2716;
2723 -> 2715;
2723 -> 2716;
2724 -> 2716;
2725 -> 2717;
2725 -> 2724;
2725 -> 2716;
2726 -> 2716;
2727 -> 2718;
2727 -> 2726;
2727 -> 2716;
2728 -> 2718;
2728 -> 2590;
2728 -> 2716;
2729 -> 2718;
2729 -> 2716;
2730 -> 2716;
2731 -> 2717;
2731 -> 2590;
2731 -> 2716;
2732 -> 2731;
2733 -> 2624;
2733 -> 2732;
2733 -> 2622;
2734 -> 2733;
2735 -> 2734;
2735 -> 2733;
2736 -> 2588;
2736 -> 2733;
2737 -> 2579;
2737 -> 0;
2737 -> 2735;
2738 -> 2735;
2739 -> 2579;
2739 -> 0;
2739 -> 2737;
2740 -> 2737;
2741 -> 2579;
2741 -> 0;
2741 -> 2739;
2742 -> 2739;
2743 -> 2579;
2743 -> 0;
2743 -> 2741;
2744 -> 2741;
2745 -> 2588;
2745 -> 2743;
2746 -> 2743;
2747 -> 2745;
2747 -> 2746;
2748 -> 0;
2748 -> 2746;
2749 -> 2747;
2749 -> 2746;
2750 -> 2746;
2751 -> 2746;
2752 -> 2748;
2752 -> 2751;
2753 -> 2749;
2753 -> 2751;
2754 -> 2750;
2754 -> 2751;
2755 -> 2750;
2755 -> 2751;
2756 -> 2752;
2756 -> 2755;
2756 -> 2751;
2757 -> 2753;
2757 -> 2755;
2757 -> 2751;
2758 -> 2754;
2758 -> 2755;
2758 -> 2751;
2759 -> 2750;
2759 -> 2743;
2760 -> 2759;
2760 -> 2570;
2761 -> 2570;
2762 -> 2760;
2762 -> 2761;
2763 -> 2548;
2763 -> 2761;
2764 -> 2761;
2765 -> 2763;
2765 -> 2764;
2766 -> 2765;
2766 -> 2736;
2766 -> 2764;
2767 -> 2766;
2767 -> 2761;
2768 -> 2767;
2768 -> 2762;
2768 -> 2756;
2768 -> 2761;
2769 -> 2768;
2770 -> 2769;
2770 -> 2768;
2771 -> 2762;
2771 -> 2770;
2772 -> 2770;
2773 -> 2771;
2773 -> 2772;
2774 -> 2763;
2774 -> 2772;
2775 -> 2773;
2775 -> 2756;
2775 -> 2774;
2775 -> 2772;
2776 -> 2774;
2776 -> 2736;
2776 -> 2775;
2776 -> 2772;
2777 -> 2773;
2777 -> 2757;
2777 -> 2772;
2778 -> 2774;
2778 -> 2776;
2778 -> 2777;
2778 -> 2772;
2779 -> 2773;
2779 -> 2758;
2779 -> 2774;
2779 -> 2772;
2780 -> 2770;
2781 -> 2570;
2782 -> 2570;
2782 -> 2778;
2782 -> 2779;
2782 -> 2547;
2783 -> 2514;
2784 -> 2783;
2784 -> 2778;
2785 -> 2784;
2785 -> 2514;
2786 -> 2785;
2787 -> 2477;
2787 -> 2786;
2787 -> 2785;
2788 -> 2427;
2788 -> 2785;
2789 -> 2785;
2790 -> 2478;
2790 -> 2789;
2791 -> 2790;
2791 -> 2778;
2791 -> 2789;
2792 -> 0;
2792 -> 2789;
2793 -> 2789;
2794 -> 2791;
2794 -> 2793;
2795 -> 2792;
2795 -> 2793;
2796 -> 2794;
2796 -> 2785;
2797 -> 2785;
2798 -> 2788;
2798 -> 2797;
2799 -> 2796;
2799 -> 2797;
2800 -> 2514;
2800 -> 2797;
2801 -> 2797;
2802 -> 2801;
2802 -> 2797;
2803 -> 2798;
2803 -> 2797;
2804 -> 2801;
2804 -> 2797;
2805 -> 2800;
2805 -> 2778;
2805 -> 2803;
2805 -> 2804;
2805 -> 2779;
2805 -> 2802;
2805 -> 2797;
2806 -> 2797;
2807 -> 2806;
2807 -> 2785;
2808 -> 2787;
2808 -> 2807;
2808 -> 2785;
2809 -> 2785;
2810 -> 2427;
2811 -> 1994;
2811 -> 2810;
2812 -> 2811;
2812 -> 2805;
2812 -> 0;
2812 -> 2810;
2813 -> 2812;
2813 -> 2427;
2814 -> 2427;
2814 -> 2813;
2815 -> 1998;
2815 -> 0;
2815 -> 2427;
2816 -> 2427;
2817 -> 2814;
2817 -> 1993;
2818 -> 1965;
2819 -> 1881;
2819 -> 1879;
2820 -> 1880;
2820 -> 1879;
2821 -> 2722;
2821 -> 1879;
2822 -> 2819;
2822 -> 2820;
2822 -> 2821;
2822 -> 2805;
2822 -> 1879;
2823 -> 1879;
2824 -> 1879;
2825 -> 1884;
2825 -> 2824;
2825 -> 1879;
2826 -> 1936;
2826 -> 1879;
2827 -> 1879;
2828 -> 2826;
2828 -> 2827;
2829 -> 2827;
2830 -> 2828;
2830 -> 2829;
2831 -> 2829;
2832 -> 2830;
2832 -> 2831;
2833 -> 2832;
2833 -> 2822;
2833 -> 2831;
2834 -> 2833;
2834 -> 2827;
2835 -> 2827;
2836 -> 2828;
2836 -> 2835;
2837 -> 2836;
2837 -> 2822;
2837 -> 2835;
2838 -> 2837;
2838 -> 2827;
2839 -> 2838;
2839 -> 2822;
2840 -> 2827;
2841 -> 2840;
2841 -> 1879;
2842 -> 2825;
2842 -> 2841;
2842 -> 1879;
2843 -> 2842;
2844 -> 1880;
2844 -> 2822;
2844 -> 2843;
2844 -> 2842;
2845 -> 1880;
2845 -> 2844;
2846 -> 1881;
2846 -> 2844;
2847 -> 2844;
2848 -> 2845;
2848 -> 2847;
2849 -> 2846;
2849 -> 2847;
2850 -> 1885;
2850 -> 2847;
2851 -> 2847;
2852 -> 2848;
2852 -> 2822;
2852 -> 2847;
2853 -> 2852;
2854 -> 2853;
2854 -> 1879;
2855 -> 2854;
2856 -> 1936;
2856 -> 2854;
2857 -> 1886;
2857 -> 2854;
2858 -> 2854;
2859 -> 1880;
2859 -> 2854;
2860 -> 1881;
2860 -> 2854;
2861 -> 1883;
2861 -> 2854;
2862 -> 2855;
2862 -> 2854;
2863 -> 1884;
2863 -> 2854;
2864 -> 1943;
2864 -> 2854;
2865 -> 2854;
2866 -> 2856;
2866 -> 2865;
2867 -> 2857;
2867 -> 2865;
2868 -> 2858;
2868 -> 2865;
2869 -> 2859;
2869 -> 2865;
2870 -> 2860;
2870 -> 2865;
2871 -> 2861;
2871 -> 2865;
2872 -> 2862;
2872 -> 2865;
2873 -> 2863;
2873 -> 2865;
2874 -> 2864;
2874 -> 2865;
2875 -> 1885;
2875 -> 2865;
2876 -> 2866;
2876 -> 2865;
2877 -> 2867;
2877 -> 2865;
2878 -> 2868;
2878 -> 2865;
2879 -> 2869;
2879 -> 2865;
2880 -> 2870;
2880 -> 2865;
2881 -> 2871;
2881 -> 2865;
2882 -> 2872;
2882 -> 2865;
2883 -> 2873;
2883 -> 2865;
2884 -> 2874;
2884 -> 2865;
2885 -> 2865;
2886 -> 2876;
2886 -> 2885;
2887 -> 2877;
2887 -> 2885;
2888 -> 2878;
2888 -> 2885;
2889 -> 2879;
2889 -> 2885;
2890 -> 2880;
2890 -> 2885;
2891 -> 2881;
2891 -> 2885;
2892 -> 2882;
2892 -> 2885;
2893 -> 2883;
2893 -> 2885;
2894 -> 2884;
2894 -> 2885;
2895 -> 2875;
2895 -> 2885;
2896 -> 2885;
2897 -> 2889;
2897 -> 2896;
2897 -> 2885;
2898 -> 2885;
2899 -> 2890;
2899 -> 2898;
2899 -> 2885;
2900 -> 2885;
2901 -> 2886;
2901 -> 2900;
2902 -> 2901;
2902 -> 2822;
2902 -> 2900;
2903 -> 2902;
2903 -> 2885;
2904 -> 2885;
2905 -> 2885;
2906 -> 2886;
2906 -> 2905;
2907 -> 2906;
2907 -> 2885;
2908 -> 2907;
2909 -> 2903;
2909 -> 2822;
2909 -> 2908;
2909 -> 2907;
2910 -> 2909;
2911 -> 2910;
2911 -> 2909;
2912 -> 2909;
2913 -> 2911;
2913 -> 2912;
2913 -> 2909;
2914 -> 2910;
2914 -> 0;
2914 -> 2913;
2915 -> 2891;
2915 -> 2913;
2916 -> 2910;
2916 -> 2915;
2917 -> 2890;
2917 -> 2915;
2918 -> 2889;
2918 -> 2915;
2919 -> 2915;
2920 -> 2916;
2920 -> 2919;
2921 -> 2917;
2921 -> 2919;
2922 -> 2918;
2922 -> 2919;
2923 -> 2919;
2924 -> 2920;
2924 -> 2923;
2924 -> 2919;
2925 -> 2910;
2925 -> 2909;
2926 -> 2925;
2926 -> 2920;
2926 -> 0;
2926 -> 2865;
2927 -> 2925;
2927 -> 2865;
2928 -> 2927;
2928 -> 2920;
2928 -> 0;
2928 -> 2854;
2929 -> 1879;
2930 -> 1936;
2930 -> 2929;
2931 -> 2929;
2932 -> 2930;
2932 -> 2931;
2933 -> 0;
2933 -> 2932;
2933 -> 2931;
2934 -> 2932;
2934 -> 2920;
2934 -> 2933;
2934 -> 2931;
2935 -> 2931;
2936 -> 2935;
2936 -> 2932;
2936 -> 2931;
2937 -> 2929;
2938 -> 2929;
2939 -> 1879;
2940 -> 1880;
2940 -> 2934;
2940 -> 1879;
2941 -> 1879;
2942 -> 2940;
2942 -> 2941;
2943 -> 1885;
2943 -> 2941;
2944 -> 2927;
2944 -> 1879;
2945 -> 1879;
2946 -> 2942;
2946 -> 2945;
2947 -> 2944;
2947 -> 2945;
2948 -> 2947;
2948 -> 2945;
2949 -> 2947;
2949 -> 2945;
2950 -> 2949;
2950 -> 2945;
2951 -> 2950;
2951 -> 2945;
2952 -> 2946;
2952 -> 2951;
2953 -> 2951;
2954 -> 2951;
2954 -> 2953;
2955 -> 2952;
2955 -> 2953;
2956 -> 2951;
2956 -> 2953;
2957 -> 2954;
2957 -> 2953;
2958 -> 2953;
2959 -> 2958;
2959 -> 2956;
2959 -> 2953;
2960 -> 2954;
2960 -> 2956;
2960 -> 2953;
2961 -> 2955;
2961 -> 2956;
2961 -> 2953;
2962 -> 1859;
2963 -> 2951;
2963 -> 2962;
2964 -> 2963;
2964 -> 2960;
2964 -> 2962;
2965 -> 2963;
2965 -> 2959;
2965 -> 2958;
2965 -> 2964;
2965 -> 2962;
2966 -> 2965;
2966 -> 1859;
2967 -> 2951;
2967 -> 1859;
2968 -> 1861;
2968 -> 1859;
2969 -> 1860;
2969 -> 1859;
2970 -> 1862;
2970 -> 1859;
2971 -> 1859;
2972 -> 2967;
2972 -> 2971;
2973 -> 2968;
2973 -> 2971;
2974 -> 2969;
2974 -> 2971;
2975 -> 2970;
2975 -> 2971;
2976 -> 1864;
2976 -> 2971;
2977 -> 2971;
2978 -> 2972;
2978 -> 2977;
2979 -> 2978;
2979 -> 2960;
2979 -> 2942;
2979 -> 0;
2979 -> 2977;
2980 -> 2979;
2980 -> 2971;
2981 -> 1848;
2982 -> 2972;
2982 -> 2981;
2983 -> 2981;
2984 -> 2982;
2984 -> 2983;
2985 -> 2984;
2985 -> 2960;
2985 -> 2983;
2986 -> 2985;
2986 -> 2981;
2987 -> 1851;
2987 -> 1848;
2988 -> 2986;
2988 -> 1848;
2989 -> 1849;
2989 -> 1848;
2990 -> 1848;
2991 -> 1848;
2992 -> 2987;
2992 -> 2991;
2993 -> 2988;
2993 -> 2991;
2994 -> 2989;
2994 -> 2991;
2995 -> 2990;
2995 -> 2991;
2996 -> 1854;
2996 -> 2991;
2997 -> 2992;
2997 -> 2991;
2998 -> 2994;
2998 -> 2991;
2999 -> 2995;
2999 -> 2991;
3000 -> 2993;
3000 -> 2942;
3000 -> 2991;
3001 -> 2986;
3001 -> 2942;
3001 -> 0;
3001 -> 1848;
3002 -> 3001;
3002 -> 1848;
3003 -> 1850;
3003 -> 1848;
3004 -> 1851;
3004 -> 1848;
3005 -> 1852;
3005 -> 1848;
3006 -> 1853;
3006 -> 1848;
3007 -> 2986;
3007 -> 1848;
3008 -> 1848;
3009 -> 3003;
3009 -> 3008;
3010 -> 3004;
3010 -> 3008;
3011 -> 3005;
3011 -> 3008;
3012 -> 3006;
3012 -> 3008;
3013 -> 3007;
3013 -> 3008;
3014 -> 1854;
3014 -> 3008;
3015 -> 3009;
3015 -> 2942;
3015 -> 3008;
3016 -> 3009;
3016 -> 3015;
3017 -> 3010;
3017 -> 3015;
3018 -> 3011;
3018 -> 3015;
3019 -> 3013;
3019 -> 3015;
3020 -> 3015;
3021 -> 3016;
3021 -> 3020;
3022 -> 3017;
3022 -> 3020;
3023 -> 3018;
3023 -> 3020;
3024 -> 3019;
3024 -> 3020;
3025 -> 3014;
3025 -> 3020;
3026 -> 3021;
3026 -> 3015;
3026 -> 3020;
3027 -> 3021;
3027 -> 3015;
3027 -> 3020;
3028 -> 3021;
3028 -> 3015;
3028 -> 3020;
3029 -> 3021;
3029 -> 3020;
3030 -> 3020;
3031 -> 3020;
3032 -> 3029;
3032 -> 3031;
3033 -> 3030;
3033 -> 3031;
3034 -> 3022;
3034 -> 3020;
3035 -> 3023;
3035 -> 3020;
3036 -> 3024;
3036 -> 3020;
3037 -> 3021;
3037 -> 3020;
3038 -> 3026;
3038 -> 3020;
3039 -> 3021;
3039 -> 3032;
3039 -> 3020;
3040 -> 3032;
3040 -> 3020;
3041 -> 3020;
3042 -> 3034;
3042 -> 3041;
3043 -> 3035;
3043 -> 3041;
3044 -> 3036;
3044 -> 3041;
3045 -> 3037;
3045 -> 3041;
3046 -> 3038;
3046 -> 3041;
3047 -> 3039;
3047 -> 3041;
3048 -> 3040;
3048 -> 3041;
3049 -> 3025;
3049 -> 3041;
3050 -> 3045;
3050 -> 3032;
3050 -> 3041;
3051 -> 3044;
3051 -> 3041;
3052 -> 3046;
3052 -> 3041;
3053 -> 3047;
3053 -> 3041;
3054 -> 3042;
3054 -> 3041;
3055 -> 3041;
3056 -> 3050;
3056 -> 3055;
3057 -> 3051;
3057 -> 3055;
3058 -> 3052;
3058 -> 3055;
3059 -> 3053;
3059 -> 3055;
3060 -> 3054;
3060 -> 3055;
3061 -> 3049;
3061 -> 3055;
3062 -> 3055;
3063 -> 3057;
3063 -> 3062;
3063 -> 3055;
3064 -> 3057;
3064 -> 3032;
3064 -> 0;
3064 -> 3055;
3065 -> 3055;
3066 -> 3065;
3066 -> 3041;
3067 -> 3041;
3068 -> 3066;
3068 -> 3067;
3068 -> 3041;
3069 -> 3041;
3070 -> 1911;
3070 -> 3032;
3070 -> 3069;
3071 -> 3069;
3072 -> 3070;
3072 -> 3071;
3073 -> 3072;
3073 -> 3070;
3073 -> 0;
3073 -> 3071;
3074 -> 3071;
3075 -> 3072;
3075 -> 3070;
3075 -> 3074;
3075 -> 3071;
3076 -> 3073;
3076 -> 3069;
3077 -> 3070;
3077 -> 3041;
3078 -> 3041;
3079 -> 3077;
3079 -> 3041;
3080 -> 3044;
3080 -> 3041;
3081 -> 3046;
3081 -> 3041;
3082 -> 3047;
3082 -> 3041;
3083 -> 3043;
3083 -> 3041;
3084 -> 3048;
3084 -> 3041;
3085 -> 3041;
3086 -> 3078;
3086 -> 3041;
3087 -> 3041;
3088 -> 3079;
3088 -> 3087;
3089 -> 3080;
3089 -> 3087;
3090 -> 3081;
3090 -> 3087;
3091 -> 3082;
3091 -> 3087;
3092 -> 3083;
3092 -> 3087;
3093 -> 3084;
3093 -> 3087;
3094 -> 3085;
3094 -> 3087;
3095 -> 3086;
3095 -> 3087;
3096 -> 3049;
3096 -> 3087;
3097 -> 3088;
3097 -> 3093;
3098 -> 3089;
3098 -> 3093;
3099 -> 3090;
3099 -> 3093;
3100 -> 3091;
3100 -> 3093;
3101 -> 3092;
3101 -> 3093;
3102 -> 3094;
3102 -> 3093;
3103 -> 3095;
3103 -> 3093;
3104 -> 3100;
3104 -> 3093;
3105 -> 3102;
3105 -> 3093;
3106 -> 3096;
3106 -> 3093;
3107 -> 3097;
3107 -> 3098;
3108 -> 3098;
3109 -> 3099;
3109 -> 3098;
3110 -> 3104;
3110 -> 3098;
3111 -> 3101;
3111 -> 3098;
3112 -> 3093;
3112 -> 3098;
3113 -> 3106;
3113 -> 3098;
3114 -> 3105;
3114 -> 3098;
3115 -> 3103;
3115 -> 3098;
3116 -> 3098;
3117 -> 3107;
3117 -> 3116;
3118 -> 3108;
3118 -> 3116;
3119 -> 3109;
3119 -> 3116;
3120 -> 3110;
3120 -> 3116;
3121 -> 3111;
3121 -> 3116;
3122 -> 3112;
3122 -> 3116;
3123 -> 3113;
3123 -> 3116;
3124 -> 3114;
3124 -> 3116;
3125 -> 3115;
3125 -> 3116;
3126 -> 3106;
3126 -> 3116;
3127 -> 3122;
3127 -> 3116;
3128 -> 3116;
3129 -> 3127;
3129 -> 3128;
3130 -> 3129;
3130 -> 0;
3130 -> 3128;
3131 -> 3129;
3131 -> 0;
3131 -> 3128;
3132 -> 3128;
3133 -> 0;
3133 -> 3128;
3134 -> 3129;
3134 -> 3133;
3134 -> 3128;
3135 -> 0;
3135 -> 3128;
3136 -> 3129;
3136 -> 3135;
3136 -> 3128;
3137 -> 3128;
3138 -> 0;
3138 -> 3128;
3139 -> 3129;
3139 -> 3138;
3139 -> 3128;
3140 -> 3139;
3140 -> 3128;
3141 -> 3128;
3142 -> 3140;
3142 -> 3141;
3143 -> 3141;
3144 -> 3142;
3144 -> 3143;
3144 -> 3141;
3145 -> 3116;
3146 -> 3120;
3146 -> 3145;
3146 -> 3116;
3147 -> 3118;
3147 -> 3070;
3147 -> 3116;
3148 -> 3119;
3148 -> 3147;
3149 -> 3120;
3149 -> 3147;
3150 -> 3123;
3150 -> 3147;
3151 -> 3124;
3151 -> 3147;
3152 -> 3125;
3152 -> 3147;
3153 -> 3149;
3153 -> 3147;
3154 -> 3151;
3154 -> 3147;
3155 -> 3150;
3155 -> 3147;
3156 -> 3153;
3156 -> 3148;
3157 -> 3154;
3157 -> 3148;
3158 -> 3152;
3158 -> 3148;
3159 -> 3156;
3159 -> 3148;
3160 -> 3148;
3161 -> 3157;
3161 -> 3148;
3162 -> 3148;
3163 -> 3150;
3163 -> 3148;
3164 -> 3148;
3165 -> 3148;
3166 -> 3159;
3166 -> 3163;
3167 -> 3161;
3167 -> 3163;
3168 -> 3165;
3168 -> 3163;
3169 -> 3163;
3170 -> 3166;
3170 -> 3163;
3171 -> 3167;
3171 -> 3163;
3172 -> 3163;
3173 -> 3168;
3173 -> 3163;
3174 -> 3169;
3174 -> 3163;
3175 -> 3174;
3176 -> 3170;
3176 -> 3175;
3176 -> 3174;
3177 -> 3169;
3177 -> 3176;
3178 -> 3177;
3178 -> 3163;
3178 -> 3176;
3179 -> 3177;
3179 -> 3176;
3180 -> 3177;
3180 -> 3163;
3180 -> 3170;
3180 -> 3176;
3181 -> 3172;
3181 -> 3176;
3182 -> 3176;
3183 -> 3181;
3183 -> 3182;
3184 -> 3180;
3184 -> 3183;
3184 -> 3176;
3185 -> 3163;
3186 -> 3160;
3186 -> 3163;
3187 -> 3163;
3188 -> 3163;
3188 -> 3187;
3189 -> 3186;
3189 -> 3187;
3190 -> 3188;
3190 -> 0;
3190 -> 3187;
3191 -> 3187;
3192 -> 3190;
3192 -> 3187;
3193 -> 3189;
3193 -> 3192;
3194 -> 3164;
3194 -> 3163;
3195 -> 3158;
3195 -> 3163;
3196 -> 3162;
3196 -> 3163;
3197 -> 3193;
3197 -> 3163;
3198 -> 3194;
3198 -> 3163;
3199 -> 3196;
3199 -> 3163;
3200 -> 3163;
3201 -> 0;
3201 -> 3163;
3202 -> 3163;
3203 -> 3200;
3203 -> 3202;
3204 -> 3201;
3204 -> 3202;
3205 -> 3197;
3205 -> 3163;
3206 -> 3198;
3206 -> 3163;
3207 -> 3199;
3207 -> 3163;
3208 -> 3205;
3208 -> 3163;
3209 -> 3206;
3209 -> 3163;
3210 -> 3207;
3210 -> 3163;
3211 -> 3163;
3212 -> 3208;
3212 -> 3163;
3213 -> 3209;
3213 -> 3163;
3214 -> 3163;
3215 -> 3163;
3216 -> 3215;
3216 -> 3163;
3217 -> 0;
3217 -> 3163;
3218 -> 3163;
3219 -> 3216;
3219 -> 3218;
3220 -> 3217;
3220 -> 3218;
3221 -> 3211;
3221 -> 3163;
3222 -> 3212;
3222 -> 3163;
3223 -> 3213;
3223 -> 3163;
3224 -> 3214;
3224 -> 3163;
3225 -> 3221;
3225 -> 3163;
3226 -> 3222;
3226 -> 3163;
3227 -> 3223;
3227 -> 3163;
3228 -> 3221;
3228 -> 3163;
3229 -> 3224;
3229 -> 3163;
3230 -> 3163;
3231 -> 3163;
3232 -> 3225;
3232 -> 3231;
3232 -> 3163;
3233 -> 3225;
3233 -> 3163;
3234 -> 3225;
3234 -> 3163;
3235 -> 3163;
3236 -> 3163;
3237 -> 3225;
3237 -> 3163;
3238 -> 3195;
3238 -> 3163;
3239 -> 3229;
3239 -> 3163;
3240 -> 3163;
3241 -> 3236;
3241 -> 3240;
3242 -> 3237;
3242 -> 3240;
3243 -> 3238;
3243 -> 3240;
3244 -> 3239;
3244 -> 3240;
3245 -> 3242;
3245 -> 3240;
3246 -> 3240;
3247 -> 3241;
3247 -> 3246;
3247 -> 3240;
3248 -> 3242;
3248 -> 3163;
3248 -> 3240;
3249 -> 3240;
3250 -> 3241;
3250 -> 3163;
3250 -> 3240;
3251 -> 3241;
3251 -> 3163;
3251 -> 3240;
3252 -> 3240;
3253 -> 3251;
3253 -> 3252;
3253 -> 3240;
3254 -> 3253;
3254 -> 3240;
3255 -> 3242;
3255 -> 3254;
3256 -> 3254;
3257 -> 3254;
3257 -> 3256;
3258 -> 3254;
3258 -> 3256;
3259 -> 3255;
3259 -> 3256;
3260 -> 3259;
3260 -> 3256;
3261 -> 3256;
3262 -> 3257;
3262 -> 3261;
3262 -> 3256;
3263 -> 3258;
3263 -> 3256;
3264 -> 3263;
3265 -> 3117;
3265 -> 3148;
3266 -> 3265;
3266 -> 3264;
3266 -> 3148;
3267 -> 3153;
3267 -> 3266;
3268 -> 3154;
3268 -> 3266;
3269 -> 3243;
3269 -> 3266;
3270 -> 3267;
3270 -> 3266;
3271 -> 3266;
3272 -> 3268;
3272 -> 3266;
3273 -> 3266;
3274 -> 3266;
3275 -> 3266;
3276 -> 3266;
3277 -> 3270;
3277 -> 3266;
3278 -> 3272;
3278 -> 3266;
3279 -> 3266;
3280 -> 3275;
3280 -> 3266;
3281 -> 3276;
3281 -> 3266;
3282 -> 3281;
3283 -> 3277;
3283 -> 3282;
3283 -> 3281;
3284 -> 3276;
3284 -> 3283;
3285 -> 3284;
3285 -> 3266;
3285 -> 3283;
3286 -> 3284;
3286 -> 3283;
3287 -> 3284;
3287 -> 3266;
3287 -> 3277;
3287 -> 3283;
3288 -> 3287;
3289 -> 3278;
3289 -> 3288;
3290 -> 0;
3290 -> 3289;
3291 -> 3289;
3292 -> 3284;
3292 -> 3291;
3292 -> 3289;
3293 -> 3290;
3293 -> 3291;
3293 -> 3289;
3294 -> 3287;
3295 -> 3266;
3295 -> 3294;
3296 -> 3292;
3296 -> 3294;
3297 -> 3294;
3298 -> 3295;
3298 -> 3297;
3299 -> 3296;
3299 -> 3297;
3300 -> 0;
3300 -> 3297;
3301 -> 3298;
3301 -> 3297;
3302 -> 3299;
3302 -> 3297;
3303 -> 3297;
3304 -> 3297;
3305 -> 3300;
3305 -> 3304;
3306 -> 3301;
3306 -> 3304;
3307 -> 3302;
3307 -> 3304;
3308 -> 3303;
3308 -> 3304;
3309 -> 3303;
3309 -> 3294;
3310 -> 3292;
3310 -> 3309;
3310 -> 3305;
3310 -> 3266;
3311 -> 3269;
3311 -> 3292;
3312 -> 3292;
3313 -> 3292;
3314 -> 3292;
3315 -> 3292;
3316 -> 3292;
3317 -> 3315;
3317 -> 3292;
3318 -> 3292;
3319 -> 3292;
3320 -> 0;
3320 -> 3319;
3321 -> 3319;
3322 -> 3292;
3322 -> 3321;
3322 -> 3319;
3323 -> 3320;
3323 -> 3321;
3323 -> 3319;
3324 -> 3292;
3325 -> 3292;
3325 -> 3324;
3326 -> 3322;
3326 -> 3324;
3327 -> 3324;
3328 -> 3325;
3328 -> 3327;
3329 -> 3326;
3329 -> 3327;
3330 -> 0;
3330 -> 3327;
3331 -> 3328;
3331 -> 3327;
3332 -> 3329;
3332 -> 3327;
3333 -> 3327;
3334 -> 3327;
3335 -> 3330;
3335 -> 3334;
3336 -> 3331;
3336 -> 3334;
3337 -> 3332;
3337 -> 3334;
3338 -> 3333;
3338 -> 3334;
3339 -> 3333;
3339 -> 3324;
3340 -> 3322;
3340 -> 3339;
3340 -> 3335;
3340 -> 3292;
3341 -> 3311;
3341 -> 3322;
3342 -> 3322;
3343 -> 3322;
3344 -> 3322;
3345 -> 3322;
3346 -> 3322;
3347 -> 3345;
3347 -> 3322;
3348 -> 3322;
3349 -> 3322;
3350 -> 3322;
3350 -> 3349;
3351 -> 3349;
3352 -> 3350;
3352 -> 3351;
3353 -> 3350;
3353 -> 3351;
3354 -> 0;
3354 -> 3351;
3355 -> 3352;
3355 -> 3351;
3356 -> 3353;
3356 -> 3351;
3357 -> 3351;
3358 -> 3351;
3359 -> 3354;
3359 -> 3358;
3360 -> 3355;
3360 -> 3358;
3361 -> 3356;
3361 -> 3358;
3362 -> 3357;
3362 -> 3358;
3363 -> 3357;
3363 -> 3349;
3364 -> 3322;
3364 -> 3363;
3364 -> 3359;
3365 -> 3345;
3365 -> 3322;
3366 -> 3345;
3366 -> 3322;
3367 -> 3345;
3368 -> 3345;
3369 -> 3322;
3369 -> 3368;
3370 -> 3345;
3370 -> 3368;
3371 -> 3368;
3372 -> 3369;
3372 -> 3371;
3373 -> 3370;
3373 -> 3371;
3374 -> 0;
3374 -> 3371;
3375 -> 3372;
3375 -> 3371;
3376 -> 3373;
3376 -> 3371;
3377 -> 3371;
3378 -> 3371;
3379 -> 3374;
3379 -> 3378;
3380 -> 3375;
3380 -> 3378;
3381 -> 3376;
3381 -> 3378;
3382 -> 3377;
3382 -> 3378;
3383 -> 3377;
3383 -> 3368;
3384 -> 3345;
3384 -> 3383;
3384 -> 3379;
3384 -> 3322;
3385 -> 3341;
3385 -> 3345;
3386 -> 3345;
3387 -> 3345;
3388 -> 3345;
3389 -> 3368;
3389 -> 3345;
3390 -> 3368;
3390 -> 3345;
3391 -> 3368;
3391 -> 3345;
3392 -> 3368;
3393 -> 3368;
3394 -> 3370;
3394 -> 3371;
3395 -> 3393;
3395 -> 3371;
3396 -> 3394;
3396 -> 3371;
3397 -> 3395;
3397 -> 3371;
3398 -> 3396;
3398 -> 3378;
3399 -> 3397;
3399 -> 3378;
3400 -> 3368;
3400 -> 3383;
3400 -> 3379;
3400 -> 3345;
3401 -> 3385;
3401 -> 3368;
3402 -> 3368;
3403 -> 3368;
3404 -> 3368;
3405 -> 3368;
3406 -> 3368;
3407 -> 3393;
3407 -> 3371;
3408 -> 3407;
3408 -> 3371;
3409 -> 3408;
3409 -> 3378;
3410 -> 3368;
3410 -> 3383;
3410 -> 3379;
3411 -> 3042;
3411 -> 3041;
3412 -> 3045;
3412 -> 3041;
3413 -> 3401;
3413 -> 3041;
3414 -> 3411;
3414 -> 3412;
3414 -> 3413;
3414 -> 3368;
3414 -> 3041;
3415 -> 3041;
3416 -> 3077;
3416 -> 3041;
3417 -> 3046;
3417 -> 3041;
3418 -> 3047;
3418 -> 3041;
3419 -> 3045;
3419 -> 3041;
3420 -> 3042;
3420 -> 3041;
3421 -> 3041;
3422 -> 3043;
3422 -> 3421;
3422 -> 3041;
3423 -> 3415;
3423 -> 3041;
3424 -> 3044;
3424 -> 3041;
3425 -> 3048;
3425 -> 3041;
3426 -> 3041;
3427 -> 3416;
3427 -> 3426;
3428 -> 3417;
3428 -> 3426;
3429 -> 3418;
3429 -> 3426;
3430 -> 3419;
3430 -> 3426;
3431 -> 3420;
3431 -> 3426;
3432 -> 3422;
3432 -> 3426;
3433 -> 3423;
3433 -> 3426;
3434 -> 3424;
3434 -> 3426;
3435 -> 3425;
3435 -> 3426;
3436 -> 3049;
3436 -> 3426;
3437 -> 3426;
3438 -> 3430;
3438 -> 3437;
3438 -> 3426;
3439 -> 3426;
3440 -> 3431;
3440 -> 3439;
3440 -> 3426;
3441 -> 3427;
3441 -> 3414;
3441 -> 3426;
3442 -> 3426;
3443 -> 3427;
3443 -> 3414;
3443 -> 3426;
3444 -> 3441;
3444 -> 0;
3445 -> 3444;
3445 -> 3436;
3445 -> 3441;
3446 -> 3432;
3446 -> 3441;
3447 -> 3431;
3447 -> 3446;
3448 -> 3430;
3448 -> 3446;
3449 -> 3447;
3449 -> 3446;
3450 -> 3448;
3450 -> 3446;
3451 -> 3446;
3452 -> 3446;
3453 -> 3451;
3453 -> 3446;
3454 -> 3451;
3454 -> 3446;
3455 -> 3451;
3455 -> 3446;
3456 -> 3451;
3456 -> 3446;
3457 -> 3456;
3457 -> 3446;
3458 -> 3446;
3459 -> 3441;
3459 -> 3446;
3459 -> 0;
3459 -> 3426;
3460 -> 3430;
3460 -> 3459;
3461 -> 3459;
3462 -> 3441;
3462 -> 3459;
3463 -> 3431;
3463 -> 3459;
3464 -> 3459;
3465 -> 3460;
3465 -> 3464;
3466 -> 3461;
3466 -> 3464;
3467 -> 3462;
3467 -> 3464;
3468 -> 3463;
3468 -> 3464;
3469 -> 3436;
3469 -> 3464;
3470 -> 3467;
3470 -> 3446;
3470 -> 3464;
3471 -> 3464;
3472 -> 3441;
3472 -> 3041;
3473 -> 3041;
3474 -> 3472;
3474 -> 3473;
3474 -> 3041;
3475 -> 3041;
3476 -> 3077;
3476 -> 3475;
3477 -> 3476;
3477 -> 3446;
3477 -> 3475;
3478 -> 3475;
3479 -> 3041;
3480 -> 3472;
3480 -> 3041;
3481 -> 3020;
3482 -> 3028;
3482 -> 3020;
3483 -> 3025;
3483 -> 3477;
3483 -> 0;
3483 -> 3482;
3484 -> 3482;
3485 -> 3480;
3485 -> 3483;
3486 -> 3021;
3486 -> 3483;
3487 -> 3027;
3487 -> 3483;
3488 -> 3022;
3488 -> 3483;
3489 -> 3023;
3489 -> 3483;
3490 -> 3483;
3491 -> 3487;
3491 -> 3490;
3492 -> 3488;
3492 -> 3490;
3493 -> 3489;
3493 -> 3490;
3494 -> 3025;
3494 -> 3490;
3495 -> 3490;
3496 -> 3491;
3496 -> 3015;
3496 -> 3495;
3496 -> 3490;
3497 -> 3490;
3498 -> 3491;
3498 -> 3490;
3499 -> 3498;
3500 -> 3492;
3500 -> 3498;
3501 -> 3493;
3501 -> 3498;
3502 -> 3498;
3503 -> 3499;
3503 -> 3502;
3504 -> 3500;
3504 -> 3502;
3505 -> 3501;
3505 -> 3502;
3506 -> 3494;
3506 -> 3502;
3507 -> 0;
3507 -> 3502;
3508 -> 3502;
3509 -> 3507;
3509 -> 3508;
3510 -> 3506;
3510 -> 3508;
3511 -> 3510;
3511 -> 3477;
3511 -> 3508;
3512 -> 3509;
3512 -> 3508;
3513 -> 3508;
3514 -> 3511;
3514 -> 3513;
3515 -> 3512;
3515 -> 3513;
3516 -> 3514;
3516 -> 3515;
3516 -> 3513;
3517 -> 3516;
3518 -> 3517;
3519 -> 3517;
3520 -> 0;
3520 -> 3517;
3521 -> 3517;
3522 -> 3519;
3522 -> 3521;
3523 -> 3520;
3523 -> 3521;
3524 -> 3517;
3525 -> 0;
3525 -> 3517;
3526 -> 3517;
3527 -> 3524;
3527 -> 3526;
3528 -> 3525;
3528 -> 3526;
3529 -> 3503;
3529 -> 3015;
3529 -> 3477;
3529 -> 3502;
3530 -> 3529;
3530 -> 3502;
3531 -> 3504;
3531 -> 3530;
3532 -> 3505;
3532 -> 3530;
3533 -> 3530;
3534 -> 3531;
3534 -> 3533;
3535 -> 3532;
3535 -> 3533;
3536 -> 3530;
3536 -> 3533;
3537 -> 3516;
3537 -> 3533;
3538 -> 3536;
3538 -> 3533;
3539 -> 3533;
3540 -> 3534;
3540 -> 3539;
3540 -> 3533;
3541 -> 3535;
3541 -> 3538;
3541 -> 3533;
3542 -> 3534;
3542 -> 3533;
3543 -> 3542;
3543 -> 3533;
3544 -> 3533;
3545 -> 3537;
3545 -> 3517;
3545 -> 3533;
3546 -> 3544;
3546 -> 3533;
3547 -> 3543;
3547 -> 3533;
3548 -> 3533;
3549 -> 3545;
3549 -> 3548;
3549 -> 3533;
3550 -> 3547;
3550 -> 3533;
3551 -> 3546;
3551 -> 3533;
3552 -> 3533;
3553 -> 3545;
3553 -> 3552;
3553 -> 3533;
3554 -> 3545;
3554 -> 3533;
3555 -> 3534;
3555 -> 3545;
3556 -> 3555;
3556 -> 3545;
3557 -> 3555;
3557 -> 3545;
3558 -> 3555;
3558 -> 3545;
3559 -> 3556;
3559 -> 3545;
3560 -> 3557;
3560 -> 3545;
3561 -> 3558;
3561 -> 3545;
3562 -> 3560;
3562 -> 3556;
3563 -> 3561;
3563 -> 3556;
3564 -> 3555;
3564 -> 3556;
3565 -> 3564;
3565 -> 3555;
3565 -> 3556;
3566 -> 3556;
3567 -> 3564;
3567 -> 3565;
3567 -> 3566;
3568 -> 3567;
3568 -> 3556;
3569 -> 3556;
3570 -> 3569;
3570 -> 3565;
3570 -> 3566;
3571 -> 3570;
3571 -> 3556;
3572 -> 3571;
3572 -> 3556;
3573 -> 3571;
3573 -> 3565;
3573 -> 0;
3573 -> 3556;
3574 -> 3571;
3574 -> 3556;
3575 -> 3559;
3575 -> 3556;
3576 -> 3562;
3576 -> 3556;
3577 -> 3563;
3577 -> 3556;
3578 -> 3565;
3578 -> 3556;
3579 -> 3556;
3579 -> 3565;
3579 -> 0;
3580 -> 3556;
3580 -> 3565;
3580 -> 0;
3581 -> 3577;
3581 -> 3556;
3582 -> 3581;
3582 -> 3556;
3583 -> 3575;
3583 -> 3556;
3584 -> 3576;
3584 -> 3556;
3585 -> 3578;
3585 -> 3556;
3586 -> 3556;
3587 -> 3583;
3587 -> 3586;
3587 -> 3556;
3588 -> 3556;
3589 -> 3571;
3589 -> 3556;
3590 -> 3556;
3591 -> 3588;
3591 -> 3590;
3591 -> 3556;
3592 -> 3571;
3592 -> 3556;
3593 -> 3592;
3593 -> 3556;
3594 -> 3581;
3594 -> 3593;
3595 -> 3534;
3595 -> 3533;
3596 -> 3533;
3597 -> 3535;
3597 -> 3533;
3598 -> 3537;
3598 -> 3533;
3599 -> 3533;
3600 -> 3545;
3600 -> 3599;
3601 -> 3600;
3601 -> 3545;
3601 -> 3599;
3602 -> 3601;
3602 -> 0;
3602 -> 3599;
3603 -> 3602;
3603 -> 3533;
3604 -> 3545;
3604 -> 3502;
3605 -> 3497;
3605 -> 3604;
3605 -> 3571;
3605 -> 3498;
3606 -> 3497;
3606 -> 3605;
3606 -> 3490;
3607 -> 3483;
3608 -> 3485;
3608 -> 3607;
3609 -> 3486;
3609 -> 3607;
3610 -> 3487;
3610 -> 3607;
3611 -> 3606;
3611 -> 3607;
3612 -> 3489;
3612 -> 3607;
3613 -> 3488;
3613 -> 3607;
3614 -> 3025;
3614 -> 3607;
3615 -> 3611;
3615 -> 3606;
3615 -> 3607;
3616 -> 3611;
3616 -> 3607;
3617 -> 3608;
3617 -> 3616;
3617 -> 3605;
3617 -> 3606;
3617 -> 3607;
3618 -> 3607;
3619 -> 3614;
3619 -> 3618;
3620 -> 3619;
3620 -> 3617;
3620 -> 3618;
3621 -> 0;
3621 -> 3618;
3622 -> 3618;
3623 -> 3620;
3623 -> 3622;
3624 -> 3621;
3624 -> 3622;
3625 -> 3623;
3625 -> 3607;
3626 -> 3617;
3626 -> 3607;
3627 -> 3032;
3627 -> 3020;
3628 -> 3020;
3629 -> 3627;
3629 -> 3628;
3630 -> 3021;
3630 -> 3617;
3630 -> 3020;
3631 -> 3020;
3632 -> 3630;
3632 -> 3631;
3633 -> 3025;
3633 -> 3631;
3634 -> 3626;
3634 -> 3020;
3635 -> 3020;
3636 -> 3632;
3636 -> 3634;
3636 -> 3635;
3636 -> 3020;
3637 -> 3636;
3637 -> 3020;
3638 -> 3020;
3638 -> 3015;
3639 -> 3001;
3639 -> 1848;
3640 -> 3638;
3640 -> 1848;
3641 -> 3640;
3641 -> 3636;
3641 -> 1532;
3642 -> 3641;
3643 -> 3641;
3644 -> 3641;
3645 -> 3642;
3645 -> 3641;
3646 -> 3643;
3646 -> 3641;
3647 -> 3641;
3648 -> 3641;
3648 -> 0;
3649 -> 3641;
3650 -> 3644;
3650 -> 3641;
3651 -> 3645;
3651 -> 3641;
3652 -> 3646;
3652 -> 3641;
3653 -> 3644;
3653 -> 3641;
3654 -> 3644;
3654 -> 0;
3654 -> 3641;
3655 -> 3644;
3655 -> 0;
3655 -> 3641;
3656 -> 3652;
3656 -> 3641;
3657 -> 3656;
3657 -> 3641;
3658 -> 3650;
3658 -> 3641;
3659 -> 3651;
3659 -> 3641;
3660 -> 3653;
3660 -> 3641;
3661 -> 3641;
3662 -> 3658;
3662 -> 3661;
3662 -> 3641;
3663 -> 3641;
3664 -> 3650;
3664 -> 3641;
3665 -> 3641;
3666 -> 3663;
3666 -> 3665;
3666 -> 3641;
3667 -> 3650;
3667 -> 3641;
3668 -> 3667;
3668 -> 3641;
3669 -> 3656;
3669 -> 3668;
3670 -> 3641;
3670 -> 1636;
3671 -> 3670;
3671 -> 3020;
3671 -> 1636;
3672 -> 3671;
3672 -> 0;
3672 -> 1636;
3673 -> 3672;
3673 -> 1630;
3677 -> 3674;
3677 -> 3676;
3678 -> 3675;
3678 -> 3676;
3679 -> 3676;
3680 -> 3679;
3680 -> 3676;
3681 -> 3679;
3681 -> 3676;
3682 -> 3677;
3682 -> 3679;
3682 -> 3676;
3683 -> 3678;
3683 -> 3679;
3683 -> 3676;
3684 -> 3676;
3685 -> 777;
3685 -> 751;
3686 -> 751;
3687 -> 3685;
3687 -> 3650;
3687 -> 3686;
3687 -> 751;
3688 -> 3687;
3688 -> 748;
3689 -> 750;
3689 -> 748;
3690 -> 748;
3691 -> 3688;
3691 -> 3690;
3692 -> 3689;
3692 -> 3690;
3693 -> 3691;
3693 -> 3690;
3694 -> 3692;
3694 -> 3690;
3695 -> 3690;
3696 -> 3693;
3696 -> 3695;
3697 -> 3694;
3697 -> 3695;
3698 -> 3696;
3698 -> 3695;
3699 -> 3697;
3699 -> 3695;
3700 -> 3695;
3701 -> 3695;
3702 -> 3698;
3702 -> 3701;
3703 -> 3699;
3703 -> 3701;
3704 -> 3700;
3704 -> 3701;
3705 -> 3701;
3706 -> 3703;
3706 -> 3705;
3706 -> 3701;
3707 -> 3703;
3707 -> 3701;
3708 -> 3707;
3708 -> 214;
3708 -> 747;
3708 -> 718;
3708 -> 719;
3708 -> 728;
3708 -> 720;
3708 -> 721;
3708 -> 745;
3708 -> 724;
3708 -> 725;
3708 -> 738;
3708 -> 726;
3708 -> 727;
3708 -> 723;
3708 -> 742;
3708 -> 743;
3708 -> 744;
3708 -> 710;
3708 -> 653;
3708 -> 599;
3708 -> 3701;
3709 -> 3701;
3710 -> 3707;
3710 -> 3709;
3710 -> 214;
3710 -> 747;
3710 -> 718;
3710 -> 719;
3710 -> 728;
3710 -> 720;
3710 -> 721;
3710 -> 745;
3710 -> 724;
3710 -> 725;
3710 -> 738;
3710 -> 726;
3710 -> 727;
3710 -> 723;
3710 -> 742;
3710 -> 743;
3710 -> 744;
3710 -> 710;
3710 -> 653;
3710 -> 599;
3710 -> 3701;
3711 -> 3710;
3711 -> 3709;
3712 -> 3711;
3712 -> 3710;
3712 -> 3709;
3713 -> 3703;
3713 -> 3701;
3714 -> 3713;
3714 -> 3712;
3714 -> 3701;
3715 -> 3701;
3716 -> 3713;
3716 -> 3715;
3716 -> 3712;
3716 -> 3701;
3717 -> 3716;
3717 -> 3715;
3718 -> 3717;
3718 -> 3716;
3718 -> 3715;
3719 -> 3702;
3719 -> 3701;
3720 -> 3704;
3720 -> 3712;
3720 -> 3718;
3720 -> 3701;
3721 -> 3719;
3721 -> 3720;
3721 -> 3701;
3722 -> 3701;
3723 -> 3721;
3723 -> 3722;
3724 -> 3721;
3724 -> 3722;
3725 -> 3721;
3725 -> 3722;
3726 -> 3721;
3726 -> 3722;
3727 -> 3721;
3727 -> 3722;
3728 -> 3727;
3728 -> 3722;
3729 -> 3727;
3729 -> 3722;
3730 -> 3727;
3730 -> 3722;
3731 -> 3727;
3731 -> 3722;
3732 -> 3727;
3732 -> 3722;
3733 -> 3727;
3733 -> 3722;
3734 -> 3727;
3734 -> 3722;
3735 -> 3727;
3735 -> 3722;
3736 -> 3727;
3736 -> 3722;
3737 -> 3727;
3737 -> 3722;
3738 -> 3727;
3738 -> 3722;
3739 -> 3723;
3739 -> 3721;
3739 -> 3727;
3739 -> 3722;
3740 -> 3723;
3740 -> 3721;
3740 -> 3727;
3740 -> 3722;
3741 -> 3723;
3741 -> 3721;
3741 -> 3727;
3741 -> 3722;
3742 -> 3723;
3742 -> 3721;
3742 -> 3727;
3742 -> 3722;
3743 -> 3725;
3743 -> 3722;
3744 -> 3743;
3745 -> 3744;
3745 -> 3727;
3745 -> 3722;
3746 -> 3726;
3746 -> 3722;
3747 -> 3746;
3748 -> 3747;
3748 -> 3727;
3748 -> 3722;
3749 -> 3722;
3750 -> 3722;
3751 -> 3723;
3751 -> 3721;
3751 -> 3750;
3751 -> 3722;
3752 -> 3723;
3752 -> 3721;
3752 -> 3722;
3753 -> 0;
3753 -> 3722;
3754 -> 3723;
3754 -> 3751;
3755 -> 3751;
3756 -> 3754;
3756 -> 3755;
3756 -> 3751;
3757 -> 3754;
3757 -> 3752;
3757 -> 3727;
3757 -> 3756;
3758 -> 3723;
3758 -> 3752;
3758 -> 3727;
3758 -> 3756;
3759 -> 3724;
3759 -> 3727;
3759 -> 3722;
3760 -> 3727;
3760 -> 3759;
3760 -> 3722;
3761 -> 3727;
3761 -> 3742;
3761 -> 3752;
3761 -> 3760;
3762 -> 3761;
3763 -> 3762;
3763 -> 3727;
3763 -> 3761;
3764 -> 3760;
3765 -> 3754;
3765 -> 3764;
3765 -> 3760;
3766 -> 3754;
3766 -> 3762;
3766 -> 3727;
3766 -> 3765;
3767 -> 3760;
3768 -> 3727;
3768 -> 3766;
3768 -> 3767;
3768 -> 3760;
3769 -> 3727;
3769 -> 3766;
3769 -> 3762;
3769 -> 3767;
3769 -> 3760;
3770 -> 3727;
3770 -> 3742;
3770 -> 3762;
3770 -> 3722;
3771 -> 3770;
3771 -> 3727;
3771 -> 3722;
3772 -> 3721;
3772 -> 3770;
3772 -> 3758;
3772 -> 3740;
3772 -> 3741;
3772 -> 3763;
3772 -> 3766;
3772 -> 3771;
3772 -> 3734;
3772 -> 3757;
3772 -> 3759;
3772 -> 3745;
3772 -> 3748;
3772 -> 3738;
3772 -> 3727;
3772 -> 3742;
3772 -> 3701;
3773 -> 3703;
3773 -> 3701;
3774 -> 3773;
3774 -> 3718;
3774 -> 3701;
3775 -> 3774;
3776 -> 3775;
3776 -> 3772;
3776 -> 3718;
3776 -> 3774;
3777 -> 3776;
3777 -> 3775;
3778 -> 3776;
3778 -> 3775;
3779 -> 3777;
3779 -> 3775;
3780 -> 3775;
3781 -> 3779;
3781 -> 3780;
3781 -> 3775;
3782 -> 3779;
3782 -> 3776;
3782 -> 3775;
3783 -> 3778;
3783 -> 3776;
3783 -> 3782;
3783 -> 3775;
3784 -> 3778;
3784 -> 3783;
3784 -> 3779;
3784 -> 3775;
3785 -> 3778;
3785 -> 3783;
3785 -> 3779;
3785 -> 3775;
3786 -> 3778;
3786 -> 3783;
3786 -> 3775;
3787 -> 3778;
3787 -> 3783;
3787 -> 3779;
3787 -> 3786;
3788 -> 3775;
3789 -> 3778;
3789 -> 3783;
3789 -> 3788;
3789 -> 3775;
3790 -> 3789;
3791 -> 3778;
3791 -> 3783;
3791 -> 3779;
3791 -> 3790;
3792 -> 3775;
3793 -> 3778;
3793 -> 3783;
3793 -> 3792;
3793 -> 3775;
3794 -> 3775;
3795 -> 3779;
3795 -> 3783;
3795 -> 3794;
3795 -> 3775;
3796 -> 3778;
3796 -> 3783;
3796 -> 3779;
3796 -> 3775;
3797 -> 3775;
3798 -> 3778;
3798 -> 3783;
3798 -> 3797;
3798 -> 3775;
3799 -> 3798;
3800 -> 3798;
3801 -> 3778;
3801 -> 3800;
3802 -> 3800;
3803 -> 3801;
3803 -> 3783;
3803 -> 3802;
3803 -> 3800;
3804 -> 3801;
3804 -> 3783;
3804 -> 3803;
3805 -> 3803;
3806 -> 3804;
3806 -> 3801;
3806 -> 3803;
3807 -> 3801;
3807 -> 3783;
3807 -> 3806;
3807 -> 3800;
3808 -> 3807;
3808 -> 3798;
3809 -> 3798;
3810 -> 3779;
3810 -> 3809;
3811 -> 3809;
3812 -> 3810;
3812 -> 3783;
3812 -> 3806;
3812 -> 3811;
3812 -> 3809;
3813 -> 3810;
3813 -> 3783;
3813 -> 3806;
3813 -> 3812;
3813 -> 3809;
3814 -> 3813;
3814 -> 3798;
3815 -> 3778;
3815 -> 3783;
3815 -> 3779;
3815 -> 3798;
3816 -> 3808;
3816 -> 3815;
3817 -> 3814;
3817 -> 3815;
3818 -> 3816;
3818 -> 3817;
3818 -> 3783;
3818 -> 3806;
3818 -> 3812;
3818 -> 3804;
3818 -> 3805;
3818 -> 3815;
3819 -> 3778;
3819 -> 3818;
3819 -> 3779;
3819 -> 3775;
3820 -> 3775;
3821 -> 3776;
3821 -> 3820;
3821 -> 3818;
3821 -> 3774;
3822 -> 3774;
3823 -> 3821;
3823 -> 3822;
3823 -> 3774;
3824 -> 3821;
3824 -> 3823;
3825 -> 3701;
3826 -> 3772;
3826 -> 3824;
3826 -> 3825;
3826 -> 3701;
3827 -> 3701;
3828 -> 3703;
3828 -> 3701;
3829 -> 3702;
3829 -> 3701;
3830 -> 3701;
3831 -> 3828;
3831 -> 3830;
3832 -> 3829;
3832 -> 3830;
3833 -> 3830;
3834 -> 3830;
3835 -> 3832;
3835 -> 3830;
3836 -> 3835;
3836 -> 3824;
3836 -> 3830;
3837 -> 3824;
3837 -> 3830;
3838 -> 3836;
3838 -> 3830;
3839 -> 3833;
3839 -> 3838;
3840 -> 3839;
3840 -> 3830;
3841 -> 3839;
3841 -> 3830;
3842 -> 3841;
3842 -> 3830;
3843 -> 3831;
3843 -> 3830;
3844 -> 3843;
3844 -> 3824;
3844 -> 3830;
3845 -> 3830;
3846 -> 3843;
3846 -> 3845;
3846 -> 3824;
3846 -> 3830;
3847 -> 3831;
3847 -> 3830;
3848 -> 3847;
3848 -> 3846;
3848 -> 3830;
3849 -> 3830;
3850 -> 3847;
3850 -> 3849;
3850 -> 3846;
3850 -> 3830;
3851 -> 3831;
3851 -> 3830;
3852 -> 3830;
3853 -> 3851;
3853 -> 3852;
3855 -> 3854;
3856 -> 3854;
3857 -> 3856;
3857 -> 3852;
3858 -> 3852;
3859 -> 3853;
3859 -> 3852;
3860 -> 3859;
3860 -> 3850;
3860 -> 3852;
3861 -> 3860;
3862 -> 3860;
3863 -> 3858;
3863 -> 3862;
3863 -> 3860;
3864 -> 3860;
3865 -> 3852;
3866 -> 3865;
3866 -> 3830;
3867 -> 3832;
3867 -> 3866;
3868 -> 3866;
3869 -> 3867;
3869 -> 3868;
3870 -> 3869;
3870 -> 3868;
3871 -> 3868;
3872 -> 3856;
3872 -> 3868;
3873 -> 3870;
3873 -> 3871;
3873 -> 3872;
3873 -> 3850;
3873 -> 3868;
3874 -> 3830;
3875 -> 3874;
3875 -> 3830;
3876 -> 3830;
3877 -> 3830;
3878 -> 3874;
3878 -> 3877;
3878 -> 3875;
3878 -> 3830;
3879 -> 3830;
3880 -> 3831;
3880 -> 3830;
3881 -> 3880;
3881 -> 3873;
3881 -> 3830;
3882 -> 3881;
3883 -> 3842;
3883 -> 3881;
3884 -> 3881;
3885 -> 3882;
3885 -> 3884;
3886 -> 3883;
3886 -> 3884;
3887 -> 3884;
3888 -> 3887;
3888 -> 3886;
3888 -> 3884;
3889 -> 3884;
3890 -> 3885;
3890 -> 3889;
3891 -> 3889;
3892 -> 3889;
3893 -> 3891;
3893 -> 3892;
3893 -> 3889;
3894 -> 3889;
3895 -> 3890;
3895 -> 3873;
3895 -> 3894;
3895 -> 3889;
3896 -> 3890;
3896 -> 3873;
3896 -> 3895;
3897 -> 3891;
3897 -> 3896;
3897 -> 3893;
3897 -> 3895;
3898 -> 3895;
3899 -> 3891;
3899 -> 3898;
3899 -> 3897;
3899 -> 3895;
3900 -> 3890;
3900 -> 3873;
3900 -> 3895;
3901 -> 3891;
3901 -> 3900;
3901 -> 3899;
3901 -> 3895;
3902 -> 3889;
3903 -> 3890;
3903 -> 3873;
3903 -> 3902;
3903 -> 3889;
3904 -> 3903;
3905 -> 3904;
3906 -> 3891;
3906 -> 3905;
3906 -> 3901;
3906 -> 3904;
3907 -> 3890;
3907 -> 3873;
3907 -> 3904;
3908 -> 3891;
3908 -> 3907;
3908 -> 3906;
3908 -> 3904;
3909 -> 3903;
3910 -> 3891;
3910 -> 3909;
3910 -> 3908;
3910 -> 3903;
3911 -> 3890;
3911 -> 3873;
3911 -> 3889;
3912 -> 3889;
3913 -> 3891;
3913 -> 3912;
3913 -> 3910;
3913 -> 3889;
3914 -> 3889;
3915 -> 3890;
3915 -> 3873;
3915 -> 3914;
3915 -> 3889;
3916 -> 3915;
3917 -> 3891;
3917 -> 3916;
3917 -> 3913;
3917 -> 3915;
3918 -> 3915;
3919 -> 3918;
3919 -> 3915;
3920 -> 3915;
3921 -> 3919;
3921 -> 3915;
3922 -> 3921;
3923 -> 3891;
3923 -> 3922;
3923 -> 3917;
3923 -> 3921;
3924 -> 3919;
3924 -> 3921;
3925 -> 3891;
3925 -> 3924;
3925 -> 3923;
3925 -> 3921;
3926 -> 3921;
3927 -> 3891;
3927 -> 3926;
3927 -> 3925;
3927 -> 3921;
3928 -> 3921;
3929 -> 3928;
3930 -> 3891;
3930 -> 3929;
3930 -> 3927;
3930 -> 3928;
3931 -> 3915;
3932 -> 3891;
3932 -> 3931;
3932 -> 3930;
3932 -> 3915;
3933 -> 3889;
3934 -> 3890;
3934 -> 3921;
3934 -> 3933;
3934 -> 3889;
3935 -> 3934;
3936 -> 3891;
3936 -> 3935;
3936 -> 3932;
3936 -> 3934;
3937 -> 3934;
3938 -> 3891;
3938 -> 3937;
3938 -> 3936;
3938 -> 3934;
3939 -> 3934;
3940 -> 3891;
3940 -> 3939;
3940 -> 3938;
3940 -> 3934;
3941 -> 3934;
3942 -> 3891;
3942 -> 3941;
3942 -> 3940;
3942 -> 3934;
3943 -> 3934;
3944 -> 3891;
3944 -> 3943;
3944 -> 3942;
3944 -> 3934;
3945 -> 3890;
3945 -> 3921;
3945 -> 3889;
3946 -> 3889;
3947 -> 3890;
3947 -> 3921;
3947 -> 3946;
3947 -> 3889;
3948 -> 3889;
3949 -> 3890;
3949 -> 3921;
3949 -> 3948;
3949 -> 3889;
3950 -> 3889;
3951 -> 3890;
3951 -> 3921;
3951 -> 3950;
3951 -> 3889;
3952 -> 3891;
3952 -> 3944;
3952 -> 3889;
3953 -> 3952;
3953 -> 3884;
3954 -> 3888;
3954 -> 3953;
3954 -> 3884;
3955 -> 3879;
3955 -> 3954;
3955 -> 3881;
3956 -> 3874;
3956 -> 3830;
3957 -> 3879;
3957 -> 3830;
3958 -> 3830;
3959 -> 3956;
3959 -> 3958;
3960 -> 3957;
3960 -> 3958;
3961 -> 3960;
3961 -> 3955;
3961 -> 3958;
3962 -> 3958;
3963 -> 3962;
3963 -> 3961;
3963 -> 3958;
3964 -> 3960;
3964 -> 3962;
3964 -> 3955;
3964 -> 3963;
3965 -> 3959;
3965 -> 3964;
3965 -> 3878;
3965 -> 3963;
3966 -> 3963;
3967 -> 3959;
3967 -> 3965;
3967 -> 3963;
3968 -> 3830;
3969 -> 3830;
3970 -> 3874;
3970 -> 3969;
3970 -> 3967;
3970 -> 3830;
3971 -> 3830;
3972 -> 3873;
3972 -> 3921;
3972 -> 3830;
3973 -> 3830;
3974 -> 3972;
3974 -> 3830;
3975 -> 3974;
3975 -> 3973;
3976 -> 3974;
3976 -> 3973;
3977 -> 3974;
3977 -> 3973;
3978 -> 3973;
3979 -> 3975;
3979 -> 3978;
3979 -> 3973;
3980 -> 3973;
3981 -> 3976;
3981 -> 3980;
3981 -> 3973;
3982 -> 3976;
3982 -> 3974;
3982 -> 3973;
3983 -> 3975;
3983 -> 3974;
3983 -> 3982;
3983 -> 3973;
3984 -> 3973;
3985 -> 3983;
3985 -> 3984;
3985 -> 3973;
3986 -> 3976;
3986 -> 3974;
3986 -> 3973;
3987 -> 3975;
3987 -> 3974;
3987 -> 3986;
3987 -> 3973;
3988 -> 3976;
3988 -> 3987;
3988 -> 3973;
3989 -> 3988;
3989 -> 3984;
3989 -> 3973;
3990 -> 3972;
3990 -> 3987;
3991 -> 3990;
3991 -> 3987;
3992 -> 3991;
3992 -> 3987;
3993 -> 3987;
3994 -> 3987;
3995 -> 3840;
3995 -> 3987;
3996 -> 3874;
3996 -> 3995;
3997 -> 3842;
3997 -> 3995;
3998 -> 3995;
3999 -> 3996;
3999 -> 3998;
4000 -> 3997;
4000 -> 3998;
4001 -> 3998;
4002 -> 4001;
4002 -> 4000;
4002 -> 3998;
4003 -> 3999;
4003 -> 4001;
4003 -> 4002;
4003 -> 3970;
4003 -> 3998;
4004 -> 3995;
4005 -> 3995;
4006 -> 3874;
4006 -> 4005;
4006 -> 4003;
4006 -> 3995;
4007 -> 3990;
4007 -> 3991;
4007 -> 3995;
4008 -> 3874;
4008 -> 4007;
4008 -> 4006;
4008 -> 3995;
4009 -> 3990;
4009 -> 4007;
4009 -> 3995;
4010 -> 4009;
4010 -> 4007;
4010 -> 3995;
4011 -> 3874;
4011 -> 4010;
4012 -> 3842;
4012 -> 4010;
4013 -> 4010;
4014 -> 4011;
4014 -> 4013;
4015 -> 4012;
4015 -> 4013;
4016 -> 4013;
4017 -> 4016;
4017 -> 4015;
4017 -> 4013;
4018 -> 4014;
4018 -> 4016;
4018 -> 4017;
4018 -> 4008;
4018 -> 4013;
4019 -> 4010;
4020 -> 4010;
4021 -> 3874;
4021 -> 4020;
4021 -> 4018;
4021 -> 4010;
4022 -> 4010;
4023 -> 3874;
4023 -> 4022;
4023 -> 4021;
4023 -> 4010;
4024 -> 3990;
4024 -> 3987;
4025 -> 3987;
4026 -> 3844;
4026 -> 3987;
4027 -> 3848;
4027 -> 3987;
4028 -> 3987;
4029 -> 4024;
4029 -> 4028;
4030 -> 4025;
4030 -> 4028;
4031 -> 4026;
4031 -> 4028;
4032 -> 4027;
4032 -> 4028;
4033 -> 4025;
4033 -> 4028;
4034 -> 4033;
4034 -> 4028;
4035 -> 4033;
4035 -> 4028;
4036 -> 4033;
4036 -> 4028;
4037 -> 4033;
4037 -> 4028;
4038 -> 4033;
4038 -> 4028;
4039 -> 4033;
4039 -> 4028;
4040 -> 4033;
4040 -> 4028;
4041 -> 4033;
4041 -> 4028;
4042 -> 4033;
4042 -> 4028;
4043 -> 4029;
4043 -> 4022;
4043 -> 4033;
4043 -> 4028;
4044 -> 4029;
4044 -> 4022;
4044 -> 4033;
4044 -> 4028;
4045 -> 4029;
4045 -> 4022;
4045 -> 4033;
4045 -> 4028;
4046 -> 4029;
4046 -> 4022;
4046 -> 4033;
4046 -> 4028;
4047 -> 4028;
4048 -> 4029;
4048 -> 4022;
4048 -> 4028;
4049 -> 4033;
4050 -> 4033;
4050 -> 4048;
4050 -> 4049;
4051 -> 4033;
4051 -> 4048;
4051 -> 4046;
4051 -> 4049;
4052 -> 4025;
4052 -> 3987;
4053 -> 3831;
4053 -> 3987;
4054 -> 4025;
4054 -> 3987;
4055 -> 4053;
4055 -> 4054;
4055 -> 4046;
4055 -> 4048;
4055 -> 4044;
4055 -> 4045;
4055 -> 4033;
4055 -> 4030;
4055 -> 4031;
4055 -> 4032;
4055 -> 3987;
4056 -> 3987;
4057 -> 4056;
4058 -> 4055;
4058 -> 4057;
4058 -> 4056;
4059 -> 4055;
4059 -> 4056;
4060 -> 4055;
4060 -> 4056;
4061 -> 4055;
4061 -> 4056;
4062 -> 4055;
4062 -> 4061;
4063 -> 4056;
4064 -> 4055;
4064 -> 4063;
4064 -> 4056;
4065 -> 4064;
4066 -> 4055;
4066 -> 4065;
4067 -> 4056;
4068 -> 4055;
4068 -> 4067;
4068 -> 4056;
4069 -> 4056;
4070 -> 4055;
4070 -> 4069;
4070 -> 4056;
4071 -> 4055;
4071 -> 4056;
4072 -> 4055;
4073 -> 4055;
4073 -> 4056;
4074 -> 3987;
4075 -> 4055;
4075 -> 4074;
4075 -> 3987;
4076 -> 3831;
4076 -> 4055;
4076 -> 4075;
4077 -> 4025;
4077 -> 3987;
4078 -> 3842;
4078 -> 3987;
4079 -> 3987;
4080 -> 4077;
4080 -> 4079;
4081 -> 4078;
4081 -> 4079;
4082 -> 4079;
4083 -> 4082;
4083 -> 4081;
4083 -> 4079;
4084 -> 4079;
4085 -> 4079;
4086 -> 4084;
4086 -> 4085;
4086 -> 4079;
4087 -> 4079;
4088 -> 4080;
4088 -> 4055;
4088 -> 4087;
4088 -> 4079;
4089 -> 4080;
4089 -> 4055;
4089 -> 4088;
4090 -> 4084;
4090 -> 4089;
4090 -> 4086;
4090 -> 4088;
4091 -> 4088;
4092 -> 4084;
4092 -> 4091;
4092 -> 4090;
4092 -> 4088;
4093 -> 4080;
4093 -> 4055;
4093 -> 4088;
4094 -> 4084;
4094 -> 4093;
4094 -> 4092;
4094 -> 4088;
4095 -> 4079;
4096 -> 4080;
4096 -> 4055;
4096 -> 4095;
4096 -> 4079;
4097 -> 4096;
4098 -> 4097;
4099 -> 4084;
4099 -> 4098;
4099 -> 4094;
4099 -> 4097;
4100 -> 4080;
4100 -> 4055;
4100 -> 4097;
4101 -> 4084;
4101 -> 4100;
4101 -> 4099;
4101 -> 4097;
4102 -> 4096;
4103 -> 4084;
4103 -> 4102;
4103 -> 4101;
4103 -> 4096;
4104 -> 4080;
4104 -> 4055;
4104 -> 4079;
4105 -> 4079;
4106 -> 4084;
4106 -> 4105;
4106 -> 4103;
4106 -> 4079;
4107 -> 4080;
4107 -> 4055;
4107 -> 4079;
4108 -> 4107;
4109 -> 4084;
4109 -> 4108;
4109 -> 4106;
4109 -> 4107;
4110 -> 4107;
4111 -> 4084;
4111 -> 4110;
4111 -> 4109;
4111 -> 4107;
4112 -> 4107;
4113 -> 4084;
4113 -> 4112;
4113 -> 4111;
4113 -> 4107;
4114 -> 4107;
4115 -> 4084;
4115 -> 4114;
4115 -> 4113;
4115 -> 4107;
4116 -> 4107;
4117 -> 4116;
4118 -> 4084;
4118 -> 4117;
4118 -> 4115;
4118 -> 4116;
4119 -> 4107;
4120 -> 4084;
4120 -> 4119;
4120 -> 4118;
4120 -> 4107;
4121 -> 4079;
4122 -> 4080;
4122 -> 4107;
4122 -> 4121;
4122 -> 4079;
4123 -> 4122;
4124 -> 4084;
4124 -> 4123;
4124 -> 4120;
4124 -> 4122;
4125 -> 4122;
4126 -> 4084;
4126 -> 4125;
4126 -> 4124;
4126 -> 4122;
4127 -> 4122;
4128 -> 4084;
4128 -> 4127;
4128 -> 4126;
4128 -> 4122;
4129 -> 4122;
4130 -> 4084;
4130 -> 4129;
4130 -> 4128;
4130 -> 4122;
4131 -> 4122;
4132 -> 4084;
4132 -> 4131;
4132 -> 4130;
4132 -> 4122;
4133 -> 4080;
4133 -> 4107;
4133 -> 4079;
4134 -> 4079;
4135 -> 4080;
4135 -> 4107;
4135 -> 4134;
4135 -> 4079;
4136 -> 4079;
4137 -> 4080;
4137 -> 4107;
4137 -> 4136;
4137 -> 4079;
4138 -> 4079;
4139 -> 4080;
4139 -> 4107;
4139 -> 4138;
4139 -> 4079;
4140 -> 4084;
4140 -> 4132;
4140 -> 4079;
4141 -> 4140;
4141 -> 4079;
4142 -> 4083;
4142 -> 4141;
4142 -> 4079;
4143 -> 3874;
4143 -> 4142;
4143 -> 4023;
4143 -> 3987;
4144 -> 4076;
4144 -> 3987;
4145 -> 3842;
4145 -> 3987;
4146 -> 3987;
4147 -> 4144;
4147 -> 4146;
4148 -> 4145;
4148 -> 4146;
4149 -> 4146;
4150 -> 4149;
4150 -> 4148;
4150 -> 4146;
4151 -> 4146;
4152 -> 4146;
4153 -> 4151;
4153 -> 4152;
4153 -> 4146;
4154 -> 4146;
4155 -> 4147;
4155 -> 4107;
4155 -> 4154;
4155 -> 4146;
4156 -> 4147;
4156 -> 4107;
4156 -> 4155;
4157 -> 4151;
4157 -> 4156;
4157 -> 4153;
4157 -> 4155;
4158 -> 4155;
4159 -> 4151;
4159 -> 4158;
4159 -> 4157;
4159 -> 4155;
4160 -> 4147;
4160 -> 4107;
4160 -> 4155;
4161 -> 4151;
4161 -> 4160;
4161 -> 4159;
4161 -> 4155;
4162 -> 4146;
4163 -> 4147;
4163 -> 4107;
4163 -> 4162;
4163 -> 4146;
4164 -> 4163;
4165 -> 4164;
4166 -> 4151;
4166 -> 4165;
4166 -> 4161;
4166 -> 4164;
4167 -> 4147;
4167 -> 4107;
4167 -> 4164;
4168 -> 4151;
4168 -> 4167;
4168 -> 4166;
4168 -> 4164;
4169 -> 4163;
4170 -> 4151;
4170 -> 4169;
4170 -> 4168;
4170 -> 4163;
4171 -> 4147;
4171 -> 4107;
4171 -> 4146;
4172 -> 4146;
4173 -> 4151;
4173 -> 4172;
4173 -> 4170;
4173 -> 4146;
4174 -> 4147;
4174 -> 4107;
4174 -> 4146;
4175 -> 4174;
4176 -> 4151;
4176 -> 4175;
4176 -> 4173;
4176 -> 4174;
4177 -> 4174;
4178 -> 4151;
4178 -> 4177;
4178 -> 4176;
4178 -> 4174;
4179 -> 4174;
4180 -> 4151;
4180 -> 4179;
4180 -> 4178;
4180 -> 4174;
4181 -> 4174;
4182 -> 4151;
4182 -> 4181;
4182 -> 4180;
4182 -> 4174;
4183 -> 4174;
4184 -> 4183;
4185 -> 4151;
4185 -> 4184;
4185 -> 4182;
4185 -> 4183;
4186 -> 4174;
4187 -> 4151;
4187 -> 4186;
4187 -> 4185;
4187 -> 4174;
4188 -> 4146;
4189 -> 4147;
4189 -> 4174;
4189 -> 4188;
4189 -> 4146;
4190 -> 4189;
4191 -> 4151;
4191 -> 4190;
4191 -> 4187;
4191 -> 4189;
4192 -> 4189;
4193 -> 4151;
4193 -> 4192;
4193 -> 4191;
4193 -> 4189;
4194 -> 4189;
4195 -> 4151;
4195 -> 4194;
4195 -> 4193;
4195 -> 4189;
4196 -> 4189;
4197 -> 4151;
4197 -> 4196;
4197 -> 4195;
4197 -> 4189;
4198 -> 4189;
4199 -> 4151;
4199 -> 4198;
4199 -> 4197;
4199 -> 4189;
4200 -> 4147;
4200 -> 4174;
4200 -> 4146;
4201 -> 4146;
4202 -> 4147;
4202 -> 4174;
4202 -> 4201;
4202 -> 4146;
4203 -> 4146;
4204 -> 4147;
4204 -> 4174;
4204 -> 4203;
4204 -> 4146;
4205 -> 4146;
4206 -> 4147;
4206 -> 4174;
4206 -> 4205;
4206 -> 4146;
4207 -> 4151;
4207 -> 4199;
4207 -> 4146;
4208 -> 4207;
4208 -> 4146;
4209 -> 4150;
4209 -> 4208;
4209 -> 4146;
4210 -> 3971;
4210 -> 4209;
4210 -> 3987;
4211 -> 3830;
4212 -> 3987;
4212 -> 4211;
4212 -> 3830;
4213 -> 3874;
4213 -> 4143;
4213 -> 4212;
4214 -> 3830;
4215 -> 3874;
4215 -> 4214;
4215 -> 4213;
4215 -> 3830;
4216 -> 3879;
4216 -> 3830;
4217 -> 3971;
4217 -> 3830;
4221 -> 4219;
4221 -> 4218;
4222 -> 4220;
4222 -> 4218;
4223 -> 4218;
4224 -> 0;
4224 -> 3830;
4225 -> 3830;
4226 -> 3830;
4227 -> 4216;
4227 -> 4226;
4228 -> 4217;
4228 -> 4226;
4229 -> 4224;
4229 -> 4226;
4230 -> 4225;
4230 -> 4226;
4231 -> 4225;
4231 -> 4226;
4232 -> 4226;
4233 -> 4230;
4233 -> 4232;
4233 -> 4226;
4234 -> 4233;
4234 -> 4226;
4235 -> 0;
4237 -> 4235;
4237 -> 4236;
4238 -> 4236;
4240 -> 4239;
4242 -> 4241;
4244 -> 4243;
4245 -> 4238;
4246 -> 4238;
4246 -> 4236;
4247 -> 4237;
4247 -> 4238;
4247 -> 4236;
4248 -> 4236;
4249 -> 4226;
4250 -> 4249;
4250 -> 4231;
4250 -> 4226;
4251 -> 4227;
4251 -> 4226;
4252 -> 4228;
4252 -> 4226;
4253 -> 4229;
4253 -> 4226;
4254 -> 4251;
4254 -> 4226;
4255 -> 4252;
4255 -> 4226;
4256 -> 4250;
4256 -> 4226;
4257 -> 4226;
4258 -> 4254;
4258 -> 4257;
4259 -> 4255;
4259 -> 4257;
4260 -> 4256;
4260 -> 4257;
4261 -> 4234;
4261 -> 4257;
4262 -> 4258;
4262 -> 4257;
4263 -> 4258;
4263 -> 4251;
4263 -> 4257;
4264 -> 4259;
4264 -> 4257;
4265 -> 4259;
4265 -> 4252;
4265 -> 4257;
4266 -> 4257;
4267 -> 4262;
4267 -> 4266;
4268 -> 4263;
4268 -> 4266;
4269 -> 4264;
4269 -> 4266;
4270 -> 4265;
4270 -> 4266;
4271 -> 4261;
4271 -> 4266;
4272 -> 4267;
4272 -> 4266;
4273 -> 4268;
4273 -> 4266;
4274 -> 4269;
4274 -> 4266;
4275 -> 4270;
4275 -> 4266;
4276 -> 4266;
4277 -> 4272;
4277 -> 4276;
4278 -> 4273;
4278 -> 4276;
4279 -> 4274;
4279 -> 4276;
4280 -> 4275;
4280 -> 4276;
4281 -> 4271;
4281 -> 4276;
4282 -> 4276;
4283 -> 4278;
4283 -> 4282;
4283 -> 4276;
4284 -> 4276;
4285 -> 4280;
4285 -> 4284;
4285 -> 4276;
4286 -> 4283;
4286 -> 4285;
4286 -> 4276;
4287 -> 4276;
4288 -> 4287;
4288 -> 4286;
4288 -> 4276;
4289 -> 4276;
4290 -> 4289;
4290 -> 4278;
4290 -> 4276;
4291 -> 4290;
4292 -> 4286;
4292 -> 4288;
4292 -> 4291;
4292 -> 4290;
4293 -> 4292;
4293 -> 4289;
4293 -> 4291;
4293 -> 4286;
4293 -> 4290;
4294 -> 4276;
4295 -> 4294;
4295 -> 4280;
4295 -> 4276;
4296 -> 4295;
4297 -> 4286;
4297 -> 4288;
4297 -> 4293;
4297 -> 4296;
4297 -> 4295;
4298 -> 4297;
4298 -> 4296;
4298 -> 4294;
4298 -> 4286;
4298 -> 4295;
4299 -> 4276;
4300 -> 4299;
4300 -> 4278;
4300 -> 4276;
4301 -> 4300;
4302 -> 4301;
4302 -> 4280;
4302 -> 4300;
4303 -> 4302;
4304 -> 4286;
4304 -> 4288;
4304 -> 4293;
4304 -> 4298;
4304 -> 4303;
4304 -> 4302;
4305 -> 4277;
4305 -> 4302;
4306 -> 4279;
4306 -> 4302;
4307 -> 4302;
4308 -> 4305;
4308 -> 4307;
4309 -> 4303;
4309 -> 4307;
4310 -> 4306;
4310 -> 4307;
4311 -> 4303;
4311 -> 4307;
4312 -> 4281;
4312 -> 4307;
4313 -> 4308;
4313 -> 4251;
4313 -> 4309;
4313 -> 4307;
4314 -> 4310;
4314 -> 4252;
4314 -> 4311;
4314 -> 4307;
4315 -> 4312;
4315 -> 0;
4315 -> 4313;
4315 -> 4314;
4315 -> 4251;
4315 -> 4252;
4315 -> 4307;
4316 -> 4304;
4316 -> 4315;
4316 -> 4302;
4317 -> 4302;
4318 -> 4286;
4318 -> 4288;
4318 -> 4293;
4318 -> 4298;
4318 -> 4317;
4318 -> 4301;
4318 -> 4302;
4319 -> 4302;
4320 -> 4286;
4320 -> 4288;
4320 -> 4293;
4320 -> 4298;
4320 -> 4299;
4320 -> 4319;
4320 -> 4302;
4321 -> 4316;
4321 -> 4302;
4322 -> 4318;
4322 -> 4302;
4323 -> 4321;
4323 -> 4322;
4323 -> 4302;
4324 -> 4320;
4324 -> 4302;
4325 -> 4323;
4325 -> 4324;
4325 -> 4302;
4326 -> 4325;
4326 -> 4299;
4326 -> 4301;
4326 -> 4286;
4326 -> 4302;
4327 -> 4286;
4327 -> 4276;
4328 -> 4268;
4328 -> 4266;
4329 -> 4270;
4329 -> 4266;
4330 -> 4266;
4331 -> 4328;
4331 -> 4330;
4331 -> 4266;
4332 -> 4329;
4332 -> 4330;
4332 -> 4266;
4333 -> 4331;
4333 -> 4332;
4333 -> 4266;
4334 -> 4327;
4334 -> 4286;
4334 -> 4288;
4334 -> 4293;
4334 -> 4298;
4334 -> 4326;
4334 -> 4328;
4334 -> 4329;
4334 -> 4333;
4335 -> 4333;
4336 -> 4327;
4336 -> 4286;
4336 -> 4288;
4336 -> 4293;
4336 -> 4298;
4336 -> 4326;
4336 -> 4335;
4336 -> 4329;
4336 -> 4333;
4337 -> 4327;
4337 -> 4286;
4337 -> 4288;
4337 -> 4293;
4337 -> 4298;
4337 -> 4326;
4337 -> 4328;
4337 -> 4329;
4337 -> 4336;
4338 -> 4336;
4339 -> 4328;
4339 -> 4338;
4340 -> 4329;
4340 -> 4338;
4341 -> 4338;
4342 -> 0;
4342 -> 4338;
4343 -> 4339;
4343 -> 4338;
4344 -> 4340;
4344 -> 4338;
4345 -> 4338;
4346 -> 4342;
4346 -> 4345;
4347 -> 4343;
4347 -> 4345;
4348 -> 4344;
4348 -> 4345;
4349 -> 4341;
4349 -> 4345;
4350 -> 4346;
4350 -> 4349;
4350 -> 4345;
4351 -> 4347;
4351 -> 4349;
4351 -> 4345;
4352 -> 4348;
4352 -> 4349;
4352 -> 4345;
4353 -> 4266;
4354 -> 4339;
4354 -> 4353;
4354 -> 4266;
4355 -> 4266;
4356 -> 4340;
4356 -> 4355;
4356 -> 4266;
4357 -> 4341;
4357 -> 4350;
4357 -> 4351;
4357 -> 4352;
4357 -> 4257;
4358 -> 4357;
4359 -> 4358;
4360 -> 4259;
4360 -> 4252;
4360 -> 4315;
4360 -> 4357;
4360 -> 4358;
4361 -> 4260;
4361 -> 4360;
4361 -> 4249;
4361 -> 4358;
4362 -> 4253;
4362 -> 4359;
4362 -> 4226;
4363 -> 3874;
4363 -> 4362;
4363 -> 4215;
4363 -> 3830;
4364 -> 3971;
4364 -> 4210;
4364 -> 3830;
4365 -> 3879;
4365 -> 3964;
4365 -> 3830;
4366 -> 3874;
4366 -> 4363;
4366 -> 3830;
4367 -> 3690;
4368 -> 748;
4369 -> 749;
4369 -> 748;
4370 -> 3687;
4370 -> 748;
4371 -> 748;
4372 -> 4369;
4372 -> 4371;
4373 -> 4370;
4373 -> 4371;
4374 -> 4373;
4374 -> 4371;
4375 -> 4374;
4375 -> 3687;
4375 -> 4174;
4376 -> 4372;
4376 -> 4375;
4376 -> 4174;
4376 -> 4374;
4377 -> 4374;
4377 -> 4376;
4378 -> 4377;
4378 -> 4376;
4379 -> 748;
4380 -> 749;
4380 -> 748;
}