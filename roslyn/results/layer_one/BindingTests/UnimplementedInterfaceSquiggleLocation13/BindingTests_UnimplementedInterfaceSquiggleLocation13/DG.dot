digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 721348"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 721349"];
3 [label="param BindingTests(this) 721350"];
4 [label="'C' 721351"];
5 [label="DefaultTypeName = 'C' 721352"];
6 [label="'M' 721353"];
7 [label="DefaultMethodName = 'M' 721354"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 721355"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 721356"];
10 [label="param CompilingTestBase(this) 721357"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 721358"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 721359"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 721360"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 721361"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 721362"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 721363"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 721364"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 721365"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 721366"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 721367"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 721368"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 721369"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 721370"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 721371"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 721372"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 721373"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 721374"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 721375"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 721376"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 721377"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 721378"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 721379"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 721380"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 721381"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 721382"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 721383"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 721384"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 721385"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 721386"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 721387"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 721388"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 721389"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 721390"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 721391"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 721392"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 721393"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 721394"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 721395"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 721396"];
50 [label="LazyThreadSafetyMode.PublicationOnly 721397"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 721398"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 721399"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 721400"];
54 [label="LazyThreadSafetyMode.PublicationOnly 721401"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 721402"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 721403"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 721404"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 721405"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 721406"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 721407"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 721408"];
62 [label="LazyThreadSafetyMode.PublicationOnly 721409"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 721410"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 721411"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 721412"];
66 [label="LazyThreadSafetyMode.PublicationOnly 721413"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 721414"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 721415"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 721416"];
70 [label="LazyThreadSafetyMode.PublicationOnly 721417"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 721418"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 721419"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 721420"];
74 [label="LazyThreadSafetyMode.PublicationOnly 721421"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721422"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721423"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 721424"];
78 [label="LazyThreadSafetyMode.PublicationOnly 721425"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721426"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721427"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 721428"];
82 [label="LazyThreadSafetyMode.PublicationOnly 721429"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721430"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721431"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 721432"];
86 [label="LazyThreadSafetyMode.PublicationOnly 721433"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721434"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721435"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 721436"];
90 [label="LazyThreadSafetyMode.PublicationOnly 721437"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721438"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721439"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 721440"];
94 [label="LazyThreadSafetyMode.PublicationOnly 721441"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721442"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721443"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 721444"];
98 [label="LazyThreadSafetyMode.PublicationOnly 721445"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721446"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721447"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 721448"];
102 [label="LazyThreadSafetyMode.PublicationOnly 721449"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 721450"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 721451"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 721452"];
106 [label="LazyThreadSafetyMode.PublicationOnly 721453"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 721454"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 721455"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 721456"];
110 [label="LazyThreadSafetyMode.PublicationOnly 721457"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721458"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721459"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 721460"];
114 [label="LazyThreadSafetyMode.PublicationOnly 721461"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721462"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721463"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 721464"];
118 [label="LazyThreadSafetyMode.PublicationOnly 721465"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721466"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721467"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 721468"];
122 [label="LazyThreadSafetyMode.PublicationOnly 721469"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721470"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721471"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 721472"];
126 [label="LazyThreadSafetyMode.PublicationOnly 721473"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 721474"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 721475"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 721476"];
130 [label="LazyThreadSafetyMode.PublicationOnly 721477"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721478"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721479"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 721480"];
134 [label="LazyThreadSafetyMode.PublicationOnly 721481"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721482"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721483"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 721484"];
138 [label="LazyThreadSafetyMode.PublicationOnly 721485"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721486"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721487"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 721488"];
142 [label="LazyThreadSafetyMode.PublicationOnly 721489"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721490"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721491"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 721492"];
146 [label="LazyThreadSafetyMode.PublicationOnly 721493"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721494"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721495"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 721496"];
150 [label="LazyThreadSafetyMode.PublicationOnly 721497"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721498"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721499"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 721500"];
154 [label="LazyThreadSafetyMode.PublicationOnly 721501"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721502"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721503"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 721504"];
158 [label="LazyThreadSafetyMode.PublicationOnly 721505"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721506"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721507"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 721508"];
162 [label="LazyThreadSafetyMode.PublicationOnly 721509"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721510"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721511"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 721512"];
166 [label="LazyThreadSafetyMode.PublicationOnly 721513"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721514"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721515"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 721516"];
170 [label="LazyThreadSafetyMode.PublicationOnly 721517"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721518"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721519"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 721520"];
174 [label="LazyThreadSafetyMode.PublicationOnly 721521"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721522"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721523"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 721524"];
178 [label="LazyThreadSafetyMode.PublicationOnly 721525"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721526"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 721527"];
181 [label="@'R:\\Invalid.dll' 721528"];
182 [label="fullPath: @'R:\\Invalid.dll' 721529"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 721530"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 721531"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 721532"];
186 [label="MscorlibRef_v4_0_30316_17626 721533"];
187 [label="Net451.mscorlib 721534"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 721535"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 721536"];
190 [label="'/*<bind>*/' 721537"];
191 [label="StartString = '/*<bind>*/' 721538"];
192 [label="'/*</bind>*/' 721539"];
193 [label="EndString = '/*</bind>*/' 721540"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 721541"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 721542"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 721543"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 721544"];
198 [label="param CSharpTestBase(this) 721545"];
199 [label="param CommonTestBase(this) 721546"];
200 [label="param TestBase(this) 721547"];
201 [label="_temp 721548"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 721549"];
203 [label="param UnimplementedInterfaceSquiggleLocation13UnimplementedInterfaceSquiggleLocation_InterfaceInheritanceScenario09(this) 721550"];
204 [label="string scenarioCode = @'\npublic class ITT : IDerived\n{\n    void IBase2.method2()\n    { }\n\n    void IDerived.method3()\n    { }\n}\n\npublic interface IBase\n{\n    void method1();\n}\n\npublic interface IBase2\n{\n    void method2();\n}\npublic interface IDerived : IBase, IBase2\n{\n    void method3();\n}'; 721551"];
205 [label="var testAssembly = CreateCompilation(scenarioCode); 721552"];
206 [label="scenarioCode 721553"];
207 [label="param operator(string source) 721554"];
208 [label="source 721555"];
209 [label="new CSharpTestSource(source) 721556"];
210 [label="param CSharpTestSource(object value) 721557"];
211 [label="param CSharpTestSource(this) 721558"];
212 [label="Value 721559"];
213 [label="var testAssembly = CreateCompilation(scenarioCode); 721560"];
214 [label="var testAssembly = CreateCompilation(scenarioCode); 721561"];
215 [label="CreateCompilation(scenarioCode) 721562"];
216 [label="param CreateCompilation(CSharpTestSource source) 721563"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 721564"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 721565"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 721566"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 721567"];
221 [label="param CreateCompilation(string assemblyName = '') 721568"];
222 [label="param CreateCompilation(string sourceFileName = '') 721569"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 721570"];
224 [label="source 721571"];
225 [label="targetFramework 721572"];
226 [label="references 721573"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 721574"];
228 [label="param GetReferences(TargetFramework tf) 721575"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 721576"];
230 [label="var references = GetReferences(tf); 721577"];
231 [label="GetReferences(tf) 721578"];
232 [label="param GetReferences(TargetFramework targetFramework) 721579"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 721580"];
234 [label="StandardReferences 721581"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 721582"];
236 [label="Mscorlib46ExtendedReferences 721583"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 721584"];
238 [label="TestBase.ValueTupleRef 721585"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 721586"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 721587"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 721588"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 721589"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 721590"];
244 [label="return references; 721591"];
245 [label="options 721592"];
246 [label="parseOptions 721593"];
247 [label="assemblyName 721594"];
248 [label="sourceFileName 721595"];
249 [label="skipUsesIsNullable 721596"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 721597"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 721598"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 721599"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 721600"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 721601"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 721602"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 721603"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 721604"];
258 [label="source 721605"];
259 [label="references 721606"];
260 [label="options 721607"];
261 [label="parseOptions 721608"];
262 [label="assemblyName 721609"];
263 [label="sourceFileName 721610"];
264 [label="skipUsesIsNullable 721611"];
265 [label="null 721612"];
266 [label="experimentalFeature: null 721613"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 721614"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 721615"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 721616"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 721617"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 721618"];
272 [label="param CreateCompilationCore(string assemblyName) 721619"];
273 [label="param CreateCompilationCore(string sourceFileName) 721620"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 721621"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 721622"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 721623"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 721624"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 721625"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 721626"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 721627"];
281 [label="param GetSyntaxTrees(this) 721628"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 721629"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 721630"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 721631"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 721632"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 721633"];
287 [label="param Parse(string text) 721634"];
288 [label="param Parse(string filename = '') 721635"];
289 [label="param Parse(CSharpParseOptions options = null) 721636"];
290 [label="param Parse(Encoding encoding = null) 721637"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 721638"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 721639"];
293 [label="kind: SourceCodeKind.Regular 721640"];
294 [label="documentationMode: DocumentationMode.Parse 721641"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 721642"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 721643"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 721644"];
298 [label="SourceCodeKind.Script 721645"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 721646"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 721647"];
301 [label="LanguageVersion.CSharp6 721648"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 721649"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 721650"];
304 [label="LanguageVersion.CSharp7 721651"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 721652"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 721653"];
307 [label="LanguageVersion.CSharp7_1 721654"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 721655"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 721656"];
310 [label="LanguageVersion.CSharp7_2 721657"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 721658"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 721659"];
313 [label="LanguageVersion.CSharp7_3 721660"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 721661"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 721662"];
316 [label="LanguageVersion.Default 721663"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 721664"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 721665"];
319 [label="LanguageVersion.Preview 721666"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 721667"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 721668"];
322 [label="LanguageVersion.CSharp8 721669"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721670"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721671"];
325 [label="LanguageVersion.CSharp9 721672"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 721673"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 721674"];
328 [label="DocumentationMode.Diagnose 721675"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 721676"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 721677"];
331 [label="Regular 721678"];
332 [label="'UseLegacyStrongNameProvider' 721679"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 721680"];
334 [label="param WithFeature(this CSharpParseOptions options) 721681"];
335 [label="param WithFeature(string feature) 721682"];
336 [label="param WithFeature(string value = 'true') 721683"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 721684"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 721685"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 721686"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 721687"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 721688"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 721689"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 721690"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 721691"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 721692"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 721693"];
347 [label="1 721694"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 721695"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 721696"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 721697"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 721698"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 721699"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 721700"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 721701"];
355 [label="LanguageVersion.CSharp8 721702"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721703"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721704"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 721705"];
359 [label="new SmallDictionary<string, string> { } 721706"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 721707"];
361 [label="kind: SourceCodeKind.Regular 721708"];
362 [label="documentationMode: DocumentationMode.None 721709"];
363 [label="languageVersion: LanguageVersion.Preview 721710"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 721711"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 721712"];
366 [label="s_experimentalFeatures 721713"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 721714"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 721715"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 721716"];
370 [label="'testV7SwitchBinder' 721717"];
371 [label="'true' 721718"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 721719"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 721720"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 721721"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 721722"];
376 [label="RegularWithRecursivePatterns = Regular8 721723"];
377 [label="RegularWithoutPatternCombinators = Regular8 721724"];
378 [label="RegularWithPatternCombinators = RegularPreview 721725"];
379 [label="OutputKind.DynamicallyLinkedLibrary 721726"];
380 [label="OptimizationLevel.Release 721727"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 721728"];
382 [label="param CreateTestOptions(OutputKind outputKind) 721729"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721730"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 721731"];
385 [label="outputKind 721732"];
386 [label="optimizationLevel: optimizationLevel 721733"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 721734"];
388 [label="allowUnsafe: allowUnsafe 721735"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721736"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721737"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 721738"];
392 [label="OutputKind.ConsoleApplication 721739"];
393 [label="OptimizationLevel.Release 721740"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 721741"];
395 [label="param CreateTestOptions(OutputKind outputKind) 721742"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721743"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 721744"];
398 [label="outputKind 721745"];
399 [label="optimizationLevel: optimizationLevel 721746"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 721747"];
401 [label="allowUnsafe: allowUnsafe 721748"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721749"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721750"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 721751"];
405 [label="true 721752"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 721753"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 721754"];
408 [label="true 721755"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 721756"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 721757"];
411 [label="OutputKind.DynamicallyLinkedLibrary 721758"];
412 [label="OptimizationLevel.Debug 721759"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 721760"];
414 [label="param CreateTestOptions(OutputKind outputKind) 721761"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721762"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 721763"];
417 [label="outputKind 721764"];
418 [label="optimizationLevel: optimizationLevel 721765"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 721766"];
420 [label="allowUnsafe: allowUnsafe 721767"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721768"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721769"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 721770"];
424 [label="OutputKind.ConsoleApplication 721771"];
425 [label="OptimizationLevel.Debug 721772"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 721773"];
427 [label="param CreateTestOptions(OutputKind outputKind) 721774"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721775"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 721776"];
430 [label="outputKind 721777"];
431 [label="optimizationLevel: optimizationLevel 721778"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 721779"];
433 [label="allowUnsafe: allowUnsafe 721780"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721781"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721782"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 721783"];
437 [label="OutputKind.WindowsRuntimeMetadata 721784"];
438 [label="OptimizationLevel.Release 721785"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 721786"];
440 [label="param CreateTestOptions(OutputKind outputKind) 721787"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721788"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 721789"];
443 [label="outputKind 721790"];
444 [label="optimizationLevel: optimizationLevel 721791"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 721792"];
446 [label="allowUnsafe: allowUnsafe 721793"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721794"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721795"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 721796"];
450 [label="OutputKind.WindowsRuntimeMetadata 721797"];
451 [label="OptimizationLevel.Debug 721798"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 721799"];
453 [label="param CreateTestOptions(OutputKind outputKind) 721800"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721801"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 721802"];
456 [label="outputKind 721803"];
457 [label="optimizationLevel: optimizationLevel 721804"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 721805"];
459 [label="allowUnsafe: allowUnsafe 721806"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721807"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721808"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 721809"];
463 [label="OutputKind.NetModule 721810"];
464 [label="OptimizationLevel.Release 721811"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 721812"];
466 [label="param CreateTestOptions(OutputKind outputKind) 721813"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721814"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 721815"];
469 [label="outputKind 721816"];
470 [label="optimizationLevel: optimizationLevel 721817"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 721818"];
472 [label="allowUnsafe: allowUnsafe 721819"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721820"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721821"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 721822"];
476 [label="OutputKind.NetModule 721823"];
477 [label="OptimizationLevel.Debug 721824"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 721825"];
479 [label="param CreateTestOptions(OutputKind outputKind) 721826"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721827"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 721828"];
482 [label="outputKind 721829"];
483 [label="optimizationLevel: optimizationLevel 721830"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 721831"];
485 [label="allowUnsafe: allowUnsafe 721832"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721833"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721834"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 721835"];
489 [label="true 721836"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 721837"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 721838"];
492 [label="true 721839"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 721840"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 721841"];
495 [label="true 721842"];
496 [label="DebugDll.WithAllowUnsafe(true) 721843"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 721844"];
498 [label="true 721845"];
499 [label="DebugExe.WithAllowUnsafe(true) 721846"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 721847"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721848"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721849"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721850"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721851"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721852"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721853"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721854"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721855"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721856"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721857"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721858"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721859"];
513 [label="DebugInformationFormat.Pdb 721860"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 721861"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 721862"];
516 [label="options = TestOptions.Regular; 721863"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721864"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721865"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721866"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721867"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721868"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721869"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721870"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721871"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721872"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721873"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 721874"];
528 [label="param CheckSerializable(SyntaxTree tree) 721875"];
529 [label="var stream = new MemoryStream(); 721876"];
530 [label="var root = tree.GetRoot(); 721877"];
531 [label="var root = tree.GetRoot(); 721878"];
532 [label="root.SerializeTo(stream); 721879"];
533 [label="root.SerializeTo(stream); 721880"];
534 [label="root.SerializeTo(stream); 721881"];
535 [label="stream.Position = 0; 721882"];
536 [label="stream.Position 721883"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 721884"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 721885"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 721886"];
540 [label="return tree; 721887"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 721888"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 721889"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 721890"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 721891"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 721892"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 721893"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 721894"];
548 [label="hasTopLevelStatements 721895"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 721896"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 721897"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 721898"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 721899"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 721900"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 721901"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 721902"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 721903"];
557 [label="return; 721904"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 721905"];
559 [label="var compilation = createCompilationLambda(); 721906"];
560 [label="var compilation = createCompilationLambda(); 721907"];
561 [label="return Guid.NewGuid().ToString('D'); 721908"];
562 [label="var compilation = createCompilationLambda(); 721909"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 721910"];
564 [label="IsNullableEnabled(compilation) 721911"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 721912"];
566 [label="var trees = compilation.SyntaxTrees; 721913"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 721914"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 721915"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 721916"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 721917"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 721918"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 721919"];
573 [label="return compilation; 721920"];
574 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 721921"];
575 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 721922"];
576 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 721923"];
577 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived') 721924"];
578 [label="param Diagnostic(object code) 721925"];
579 [label="param Diagnostic(string squiggledText = null) 721926"];
580 [label="param Diagnostic(object[] arguments = null) 721927"];
581 [label="param Diagnostic(LinePosition? startLocation = null) 721928"];
582 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 721929"];
583 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 721930"];
584 [label="param Diagnostic(bool isSuppressed = false) 721931"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721932"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721933"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721934"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721935"];
589 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721936"];
590 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721937"];
591 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 721938"];
592 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 721939"];
593 [label="param Diagnostic(object code) 721940"];
594 [label="param Diagnostic(string squiggledText = null) 721941"];
595 [label="param Diagnostic(object[] arguments = null) 721942"];
596 [label="param Diagnostic(LinePosition? startLocation = null) 721943"];
597 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 721944"];
598 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 721945"];
599 [label="param Diagnostic(bool isSuppressed = false) 721946"];
600 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 721947"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721948"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721949"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721950"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721951"];
605 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721952"];
606 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721953"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721954"];
608 [label="{ } 721955"];
609 [label="None = { } 721956"];
610 [label="null 721957"];
611 [label="Any = null 721958"];
612 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 721959"];
613 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 721960"];
614 [label="param DiagnosticDescription(object code) 721961"];
615 [label="param DiagnosticDescription(bool isWarningAsError) 721962"];
616 [label="param DiagnosticDescription(string squiggledText) 721963"];
617 [label="param DiagnosticDescription(object[] arguments) 721964"];
618 [label="param DiagnosticDescription(LinePosition? startLocation) 721965"];
619 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 721966"];
620 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 721967"];
621 [label="param DiagnosticDescription(Type errorCodeType = null) 721968"];
622 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 721969"];
623 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 721970"];
624 [label="param DiagnosticDescription(bool isSuppressed = false) 721971"];
625 [label="param DiagnosticDescription(this) 721972"];
626 [label="_code 721973"];
627 [label="_isWarningAsError 721974"];
628 [label="_isSuppressed 721975"];
629 [label="_squiggledText 721976"];
630 [label="_arguments 721977"];
631 [label="_startPosition 721978"];
632 [label="_argumentOrderDoesNotMatter 721979"];
633 [label="_errorCodeType 721980"];
634 [label="_ignoreArgumentsWhenComparing 721981"];
635 [label="_defaultSeverityOpt 721982"];
636 [label="_effectiveSeverityOpt 721983"];
637 [label="_syntaxPredicate 721984"];
638 [label="_showPredicate 721985"];
639 [label="_location 721986"];
640 [label="_argumentsAsStrings 721987"];
641 [label="_code 721988"];
642 [label="_isWarningAsError 721989"];
643 [label="_squiggledText 721990"];
644 [label="_arguments 721991"];
645 [label="_startPosition 721992"];
646 [label="_syntaxPredicate 721993"];
647 [label="_argumentOrderDoesNotMatter 721994"];
648 [label="_errorCodeType = errorCodeType ?? code.GetType(); 721995"];
649 [label="_errorCodeType 721996"];
650 [label="_defaultSeverityOpt 721997"];
651 [label="_effectiveSeverityOpt 721998"];
652 [label="_isSuppressed 721999"];
653 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 722000"];
654 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 722001"];
655 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()') 722002"];
656 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()') 722003"];
657 [label="param WithArguments(params object[] arguments) 722004"];
658 [label="param WithArguments(this) 722005"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722006"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722007"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722008"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722009"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722010"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722011"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722012"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722013"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722014"];
668 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722015"];
669 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722016"];
670 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 722017"];
671 [label="param DiagnosticDescription(object code) 722018"];
672 [label="param DiagnosticDescription(bool isWarningAsError) 722019"];
673 [label="param DiagnosticDescription(string squiggledText) 722020"];
674 [label="param DiagnosticDescription(object[] arguments) 722021"];
675 [label="param DiagnosticDescription(LinePosition? startLocation) 722022"];
676 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 722023"];
677 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 722024"];
678 [label="param DiagnosticDescription(Type errorCodeType = null) 722025"];
679 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 722026"];
680 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 722027"];
681 [label="param DiagnosticDescription(bool isSuppressed = false) 722028"];
682 [label="param DiagnosticDescription(this) 722029"];
683 [label="_code 722030"];
684 [label="_isWarningAsError 722031"];
685 [label="_isSuppressed 722032"];
686 [label="_squiggledText 722033"];
687 [label="_arguments 722034"];
688 [label="_startPosition 722035"];
689 [label="_argumentOrderDoesNotMatter 722036"];
690 [label="_errorCodeType 722037"];
691 [label="_ignoreArgumentsWhenComparing 722038"];
692 [label="_defaultSeverityOpt 722039"];
693 [label="_effectiveSeverityOpt 722040"];
694 [label="_syntaxPredicate 722041"];
695 [label="_showPredicate 722042"];
696 [label="_location 722043"];
697 [label="_argumentsAsStrings 722044"];
698 [label="_arguments 722045"];
699 [label="_argumentOrderDoesNotMatter 722046"];
700 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 722047"];
701 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20) 722048"];
702 [label="param WithLocation(int line) 722049"];
703 [label="param WithLocation(int column) 722050"];
704 [label="param WithLocation(this) 722051"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722052"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722053"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722054"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722055"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722056"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722057"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722058"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722059"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722060"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722061"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722062"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722063"];
717 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722064"];
718 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722065"];
719 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 722066"];
720 [label="param DiagnosticDescription(object code) 722067"];
721 [label="param DiagnosticDescription(bool isWarningAsError) 722068"];
722 [label="param DiagnosticDescription(string squiggledText) 722069"];
723 [label="param DiagnosticDescription(object[] arguments) 722070"];
724 [label="param DiagnosticDescription(LinePosition? startLocation) 722071"];
725 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 722072"];
726 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 722073"];
727 [label="param DiagnosticDescription(Type errorCodeType = null) 722074"];
728 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 722075"];
729 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 722076"];
730 [label="param DiagnosticDescription(bool isSuppressed = false) 722077"];
731 [label="param DiagnosticDescription(this) 722078"];
732 [label="_code 722079"];
733 [label="_isWarningAsError 722080"];
734 [label="_isSuppressed 722081"];
735 [label="_squiggledText 722082"];
736 [label="_arguments 722083"];
737 [label="_startPosition 722084"];
738 [label="_argumentOrderDoesNotMatter 722085"];
739 [label="_errorCodeType 722086"];
740 [label="_ignoreArgumentsWhenComparing 722087"];
741 [label="_defaultSeverityOpt 722088"];
742 [label="_effectiveSeverityOpt 722089"];
743 [label="_syntaxPredicate 722090"];
744 [label="_showPredicate 722091"];
745 [label="_location 722092"];
746 [label="_argumentsAsStrings 722093"];
747 [label="_startPosition 722094"];
748 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 722095"];
749 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)) 722096"];
750 [label="testAssembly.VerifyDiagnostics(\n                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'\n                // public class ITT : IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)) 722097"];
751 [label="param VerifyDiagnostics(this TCompilation c) 722098"];
752 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 722099"];
753 [label="var diagnostics = c.GetDiagnostics(); 722100"];
754 [label="null 722101"];
755 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 722102"];
756 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 722103"];
757 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 722104"];
758 [label="null 722105"];
759 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 722106"];
760 [label="param Imports(CSharpCompilation compilation) 722107"];
761 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 722108"];
762 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 722109"];
763 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 722110"];
764 [label="param Imports(DiagnosticBag diagnostics) 722111"];
765 [label="param Imports(this) 722112"];
766 [label="_compilation 722113"];
767 [label="_diagnostics 722114"];
768 [label="UsingAliases 722115"];
769 [label="Debug.Assert(usingAliases != null); 722116"];
770 [label="Debug.Assert(usingAliases != null); 722117"];
771 [label="Debug.Assert(!usings.IsDefault); 722118"];
772 [label="Debug.Assert(!externs.IsDefault); 722119"];
773 [label="_compilation 722120"];
774 [label="this.UsingAliases 722121"];
775 [label="this.Usings 722122"];
776 [label="_diagnostics 722123"];
777 [label="this.ExternAliases 722124"];
778 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 722125"];
779 [label="var diagnostics = c.GetDiagnostics(); 722126"];
780 [label="param FromGlobalUsings(CSharpCompilation compilation) 722127"];
781 [label="var usings = compilation.Options.Usings; 722128"];
782 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 722129"];
783 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 722130"];
784 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 722131"];
785 [label="return Empty; 722132"];
786 [label="var diagnostics = c.GetDiagnostics(); 722133"];
787 [label="param Complete(CancellationToken cancellationToken) 722134"];
788 [label="param Complete(this) 722135"];
789 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 722136"];
790 [label="cancellationToken.ThrowIfCancellationRequested(); 722137"];
791 [label="var incompletePart = _state.NextIncompletePart; 722138"];
792 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 722139"];
793 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 722140"];
794 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 722141"];
795 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 722142"];
796 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 722143"];
797 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 722144"];
798 [label="Validate() 722145"];
799 [label="param Validate(this) 722146"];
800 [label="if (this == Empty)\n            {\n                return;\n            } 722147"];
801 [label="return; 722148"];
802 [label="Validate(); 722149"];
803 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 722150"];
804 [label="return; 722151"];
805 [label="param Includes(this BinderFlags self) 722152"];
806 [label="param Includes(BinderFlags other) 722153"];
807 [label="return (self & other) == other; 722154"];
808 [label="var diagnostics = c.GetDiagnostics(); 722155"];
809 [label="0 722156"];
810 [label="ExternalScope = 0 722157"];
811 [label="1 722158"];
812 [label="TopLevelScope = 1 722159"];
813 [label="2 722160"];
814 [label="ValueKindInsignificantBits = 2 722161"];
815 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 722162"];
816 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 722163"];
817 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 722164"];
818 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 722165"];
819 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 722166"];
820 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 722167"];
821 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 722168"];
822 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 722169"];
823 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 722170"];
824 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 722171"];
825 [label="10 722172"];
826 [label="MaxParameterListsForErrorRecovery = 10 722173"];
827 [label="'<>h__TransparentIdentifier' 722174"];
828 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 722175"];
829 [label="s => (MethodSymbol)s 722176"];
830 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 722177"];
831 [label="s => (PropertySymbol)s 722178"];
832 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 722179"];
833 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 722180"];
834 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 722181"];
835 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 722182"];
836 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 722183"];
837 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 722184"];
838 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722185"];
839 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722186"];
840 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722187"];
841 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722188"];
842 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 722189"];
843 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722190"];
844 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722191"];
845 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722192"];
846 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722193"];
847 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722194"];
848 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722195"];
849 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 722196"];
850 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 722197"];
851 [label="param GetWellKnownTypeMember(WellKnownMember member) 722198"];
852 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 722199"];
853 [label="param GetWellKnownTypeMember(Location location = null) 722200"];
854 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 722201"];
855 [label="param GetWellKnownTypeMember(bool isOptional = false) 722202"];
856 [label="Debug.Assert((syntax != null) ^ (location != null)); 722203"];
857 [label="Debug.Assert((syntax != null) ^ (location != null)); 722204"];
858 [label="Debug.Assert((syntax != null) ^ (location != null)); 722205"];
859 [label="Debug.Assert((syntax != null) ^ (location != null)); 722206"];
860 [label="DiagnosticInfo useSiteDiagnostic; 722207"];
861 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722208"];
862 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722209"];
863 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722210"];
864 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722211"];
865 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 722212"];
866 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 722213"];
867 [label="param GetWellKnownTypeMember(WellKnownMember member) 722214"];
868 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 722215"];
869 [label="param GetWellKnownTypeMember(bool isOptional = false) 722216"];
870 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722217"];
871 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722218"];
872 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722219"];
873 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722220"];
874 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722221"];
875 [label="Debug.Assert(symbol is object); 722222"];
876 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 722223"];
877 [label="isInternal = false; 722224"];
878 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722225"];
879 [label="symbol = symbol.ContainingType; 722226"];
880 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 722227"];
881 [label="return true; 722228"];
882 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722229"];
883 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722230"];
884 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722231"];
885 [label="Debug.Assert(symbol is object); 722232"];
886 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 722233"];
887 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722234"];
888 [label="symbol = symbol.ContainingType; 722235"];
889 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 722236"];
890 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722237"];
891 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722238"];
892 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 722239"];
893 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 722240"];
894 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 722241"];
895 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 722242"];
896 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722243"];
897 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722244"];
898 [label="Debug.Assert(symbol is object); 722245"];
899 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 722246"];
900 [label="isInternal = false; 722247"];
901 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722248"];
902 [label="symbol = symbol.ContainingType; 722249"];
903 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 722250"];
904 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722251"];
905 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722252"];
906 [label="Debug.Assert(symbol is object); 722253"];
907 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 722254"];
908 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722255"];
909 [label="symbol = symbol.ContainingType; 722256"];
910 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 722257"];
911 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 722258"];
912 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 722259"];
913 [label="return memberSymbol; 722260"];
914 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 722261"];
915 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 722262"];
916 [label="return memberSymbol; 722263"];
917 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722264"];
918 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722265"];
919 [label="Debug.Assert(symbol is object); 722266"];
920 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 722267"];
921 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722268"];
922 [label="symbol = symbol.ContainingType; 722269"];
923 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 722270"];
924 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722271"];
925 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722272"];
926 [label="Debug.Assert(symbol is object); 722273"];
927 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 722274"];
928 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 722275"];
929 [label="symbol = symbol.ContainingType; 722276"];
930 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 722277"];
931 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 722278"];
932 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 722279"];
933 [label="return memberSymbol; 722280"];
934 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 722281"];
935 [label="return memberSymbol; 722282"];
936 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 722283"];
937 [label="return memberSymbol; 722284"];
938 [label="return memberSymbol; 722285"];
939 [label="param BinderFactory(CSharpCompilation compilation) 722286"];
940 [label="param BinderFactory(SyntaxTree syntaxTree) 722287"];
941 [label="param BinderFactory(bool ignoreAccessibility) 722288"];
942 [label="param BinderFactory(this) 722289"];
943 [label="_binderCache 722290"];
944 [label="_compilation 722291"];
945 [label="_syntaxTree 722292"];
946 [label="_buckStopsHereBinder 722293"];
947 [label="_ignoreAccessibility 722294"];
948 [label="_binderFactoryVisitorPool 722295"];
949 [label="_compilation 722296"];
950 [label="_syntaxTree 722297"];
951 [label="_ignoreAccessibility 722298"];
952 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 722299"];
953 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 722300"];
954 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 722301"];
955 [label="_binderFactoryVisitorPool 722302"];
956 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 722303"];
957 [label="_binderCache 722304"];
958 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 722305"];
959 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 722306"];
960 [label="new BuckStopsHereBinder(compilation) 722307"];
961 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 722308"];
962 [label="param BuckStopsHereBinder(this) 722309"];
963 [label="compilation 722310"];
964 [label="param BuckStopsHereBinder(this) 722311"];
965 [label="param Binder(CSharpCompilation compilation) 722312"];
966 [label="param Binder(this) 722313"];
967 [label="internal CSharpCompilation Compilation { get; } 722314"];
968 [label="Flags 722315"];
969 [label="protected internal Binder? Next { get; } 722316"];
970 [label="_lazyConversions 722317"];
971 [label="_lazyOverloadResolution 722318"];
972 [label="RoslynDebug.Assert(compilation != null); 722319"];
973 [label="RoslynDebug.Assert(compilation != null); 722320"];
974 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 722321"];
975 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 722322"];
976 [label="this.Flags 722323"];
977 [label="this.Compilation 722324"];
978 [label="_buckStopsHereBinder 722325"];
979 [label="var diagnostics = c.GetDiagnostics(); 722326"];
980 [label="param GetBinder(SyntaxNode node) 722327"];
981 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 722328"];
982 [label="param GetBinder(Symbol memberOpt = null) 722329"];
983 [label="param GetBinder(this) 722330"];
984 [label="int position = node.SpanStart; 722331"];
985 [label="InScript 722332"];
986 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 722333"];
987 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 722334"];
988 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 722335"];
989 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 722336"];
990 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 722337"];
991 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 722338"];
992 [label="node = node.Parent; 722339"];
993 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722340"];
994 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722341"];
995 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722342"];
996 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722343"];
997 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 722344"];
998 [label="param GetBinder(SyntaxNode node) 722345"];
999 [label="param GetBinder(int position) 722346"];
1000 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 722347"];
1001 [label="param GetBinder(Symbol memberOpt = null) 722348"];
1002 [label="param GetBinder(this) 722349"];
1003 [label="Debug.Assert(node != null); 722350"];
1004 [label="Debug.Assert(node != null); 722351"];
1005 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 722352"];
1006 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 722353"];
1007 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 722354"];
1008 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 722355"];
1009 [label="param BinderFactoryVisitor(BinderFactory factory) 722356"];
1010 [label="param BinderFactoryVisitor(this) 722357"];
1011 [label="param BinderFactoryVisitor(this) 722358"];
1012 [label="_position 722359"];
1013 [label="_memberDeclarationOpt 722360"];
1014 [label="_memberOpt 722361"];
1015 [label="_factory 722362"];
1016 [label="_factory 722363"];
1017 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 722364"];
1018 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722365"];
1019 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722366"];
1020 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722367"];
1021 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 722368"];
1022 [label="param Initialize(int position) 722369"];
1023 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 722370"];
1024 [label="param Initialize(Symbol memberOpt) 722371"];
1025 [label="param Initialize(this) 722372"];
1026 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722373"];
1027 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722374"];
1028 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722375"];
1029 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722376"];
1030 [label="_position 722377"];
1031 [label="_memberDeclarationOpt 722378"];
1032 [label="_memberOpt 722379"];
1033 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722380"];
1034 [label="Binder result = visitor.Visit(node); 722381"];
1035 [label="visitor.Visit(node) 722382"];
1036 [label="param Visit(SyntaxNode node) 722383"];
1037 [label="param Visit(this) 722384"];
1038 [label="return VisitCore(node); 722385"];
1039 [label="VisitCore(node) 722386"];
1040 [label="param VisitCore(SyntaxNode node) 722387"];
1041 [label="param VisitCore(this) 722388"];
1042 [label="return ((CSharpSyntaxNode)node).Accept(this); 722389"];
1043 [label="return ((CSharpSyntaxNode)node).Accept(this); 722390"];
1044 [label="return ((CSharpSyntaxNode)node).Accept(this); 722391"];
1045 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 722392"];
1046 [label="param VisitClassDeclaration(this) 722393"];
1047 [label="return VisitTypeDeclarationCore(node); 722394"];
1048 [label="VisitTypeDeclarationCore(node) 722395"];
1049 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 722396"];
1050 [label="param VisitTypeDeclarationCore(this) 722397"];
1051 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 722398"];
1052 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 722399"];
1053 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 722400"];
1054 [label="NodeUsage extraInfo = NodeUsage.Normal; 722401"];
1055 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722402"];
1056 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722403"];
1057 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722404"];
1058 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722405"];
1059 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722406"];
1060 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722407"];
1061 [label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722408"];
1062 [label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 722409"];
1063 [label="extraInfo = NodeUsage.NamedTypeBaseListOrParameterList; 722410"];
1064 [label="return VisitTypeDeclarationCore(parent, extraInfo); 722411"];
1065 [label="return VisitTypeDeclarationCore(parent, extraInfo); 722412"];
1066 [label="VisitTypeDeclarationCore(parent, extraInfo) 722413"];
1067 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 722414"];
1068 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 722415"];
1069 [label="param VisitTypeDeclarationCore(this) 722416"];
1070 [label="var key = CreateBinderCacheKey(parent, extraInfo); 722417"];
1071 [label="var key = CreateBinderCacheKey(parent, extraInfo); 722418"];
1072 [label="CreateBinderCacheKey(parent, extraInfo) 722419"];
1073 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 722420"];
1074 [label="param CreateBinderCacheKey(NodeUsage usage) 722421"];
1075 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 722422"];
1076 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 722423"];
1077 [label="return new BinderCacheKey(node, usage); 722424"];
1078 [label="return new BinderCacheKey(node, usage); 722425"];
1079 [label="return new BinderCacheKey(node, usage); 722426"];
1080 [label="new BinderCacheKey(node, usage) 722427"];
1081 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 722428"];
1082 [label="param BinderCacheKey(NodeUsage usage) 722429"];
1083 [label="param BinderCacheKey(this) 722430"];
1084 [label="this.syntaxNode 722431"];
1085 [label="this.usage 722432"];
1086 [label="var key = CreateBinderCacheKey(parent, extraInfo); 722433"];
1087 [label="Binder resultBinder; 722434"];
1088 [label="binderCache 722435"];
1089 [label="get\n                {\n                    return _factory._binderCache;\n                } 722436"];
1090 [label="return _factory._binderCache; 722437"];
1091 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 722438"];
1092 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 722439"];
1093 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 722440"];
1094 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 722441"];
1095 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 722442"];
1096 [label="param GetHashCode(this) 722443"];
1097 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 722444"];
1098 [label="resultBinder = VisitCore(parent.Parent); 722445"];
1099 [label="VisitCore(parent.Parent) 722446"];
1100 [label="param VisitCore(SyntaxNode node) 722447"];
1101 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 722448"];
1102 [label="param VisitCompilationUnit(this) 722449"];
1103 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 722450"];
1104 [label="IsInUsing(parent) 722451"];
1105 [label="param IsInUsing(CSharpSyntaxNode containingNode) 722452"];
1106 [label="param IsInUsing(this) 722453"];
1107 [label="TextSpan containingSpan = containingNode.Span; 722454"];
1108 [label="SyntaxToken token; 722455"];
1109 [label="token 722456"];
1110 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 722457"];
1111 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 722458"];
1112 [label="token = containingNode.FindToken(_position); 722459"];
1113 [label="token = containingNode.FindToken(_position); 722460"];
1114 [label="var node = token.Parent; 722461"];
1115 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 722462"];
1116 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 722463"];
1117 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 722464"];
1118 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 722465"];
1119 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 722466"];
1120 [label="node = node.Parent; 722467"];
1121 [label="return false; 722468"];
1122 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 722469"];
1123 [label="InScript 722470"];
1124 [label="get\n                {\n                    return _factory.InScript;\n                } 722471"];
1125 [label="_factory.InScript 722472"];
1126 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 722473"];
1127 [label="return _factory.InScript; 722474"];
1128 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 722475"];
1129 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 722476"];
1130 [label="param VisitCompilationUnit(bool inUsing) 722477"];
1131 [label="param VisitCompilationUnit(bool inScript) 722478"];
1132 [label="param VisitCompilationUnit(this) 722479"];
1133 [label="syntaxTree 722480"];
1134 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 722481"];
1135 [label="return _factory._syntaxTree; 722482"];
1136 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 722483"];
1137 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 722484"];
1138 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 722485"];
1139 [label="inUsing 722486"];
1140 [label="inScript 722487"];
1141 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 722488"];
1142 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 722489"];
1143 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 722490"];
1144 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 722491"];
1145 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 722492"];
1146 [label="param CreateBinderCacheKey(NodeUsage usage) 722493"];
1147 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 722494"];
1148 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 722495"];
1149 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 722496"];
1150 [label="Binder result; 722497"];
1151 [label="binderCache 722498"];
1152 [label="get\n                {\n                    return _factory._binderCache;\n                } 722499"];
1153 [label="return _factory._binderCache; 722500"];
1154 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 722501"];
1155 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 722502"];
1156 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 722503"];
1157 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 722504"];
1158 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 722505"];
1159 [label="this.buckStopsHereBinder 722506"];
1160 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 722507"];
1161 [label="return _factory._buckStopsHereBinder; 722508"];
1162 [label="result = this.buckStopsHereBinder; 722509"];
1163 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 722510"];
1164 [label="compilation 722511"];
1165 [label="get\n                {\n                    return _factory._compilation;\n                } 722512"];
1166 [label="return _factory._compilation; 722513"];
1167 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722514"];
1168 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722515"];
1169 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722516"];
1170 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722517"];
1171 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722518"];
1172 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 722519"];
1173 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 722520"];
1174 [label="param InContainerBinder(Binder next) 722521"];
1175 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 722522"];
1176 [label="param InContainerBinder(bool inUsing) 722523"];
1177 [label="param InContainerBinder(this) 722524"];
1178 [label="next 722525"];
1179 [label="param InContainerBinder(this) 722526"];
1180 [label="param Binder(Binder next) 722527"];
1181 [label="param Binder(this) 722528"];
1182 [label="param Binder(Conversions? conversions = null) 722529"];
1183 [label="RoslynDebug.Assert(next != null); 722530"];
1184 [label="RoslynDebug.Assert(next != null); 722531"];
1185 [label="Next 722532"];
1186 [label="this.Flags 722533"];
1187 [label="this.Compilation 722534"];
1188 [label="_lazyConversions 722535"];
1189 [label="_container 722536"];
1190 [label="_computeImports 722537"];
1191 [label="_lazyImports 722538"];
1192 [label="_lazyImportChain 722539"];
1193 [label="_lazyQuickAttributeChecker 722540"];
1194 [label="Debug.Assert((object)container != null); 722541"];
1195 [label="Debug.Assert((object)container != null); 722542"];
1196 [label="Debug.Assert(declarationSyntax != null); 722543"];
1197 [label="Debug.Assert(declarationSyntax != null); 722544"];
1198 [label="_container 722545"];
1199 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 722546"];
1200 [label="_computeImports 722547"];
1201 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 722548"];
1202 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 722549"];
1203 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 722550"];
1204 [label="_usingsSyntax 722551"];
1205 [label="compilation 722552"];
1206 [label="get\n                {\n                    return _factory._compilation;\n                } 722553"];
1207 [label="return _factory._compilation; 722554"];
1208 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 722555"];
1209 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 722556"];
1210 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 722557"];
1211 [label="binderCache 722558"];
1212 [label="return _factory._binderCache; 722559"];
1213 [label="binderCache.TryAdd(key, result); 722560"];
1214 [label="binderCache.TryAdd(key, result); 722561"];
1215 [label="binderCache.TryAdd(key, result); 722562"];
1216 [label="binderCache.TryAdd(key, result); 722563"];
1217 [label="binderCache.TryAdd(key, result); 722564"];
1218 [label="param Equals(BinderCacheKey other) 722565"];
1219 [label="param Equals(this) 722566"];
1220 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 722567"];
1221 [label="return result; 722568"];
1222 [label="return ((CSharpSyntaxNode)node).Accept(this); 722569"];
1223 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 722570"];
1224 [label="resultBinder.ContainingMemberOrLambda 722571"];
1225 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 722572"];
1226 [label="var merged = _container as MergedNamespaceSymbol; 722573"];
1227 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 722574"];
1228 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 722575"];
1229 [label="((object)merged != null) 722576"];
1230 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 722577"];
1231 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 722578"];
1232 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 722579"];
1233 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 722580"];
1234 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 722581"];
1235 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 722582"];
1236 [label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 722583"];
1237 [label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 722584"];
1238 [label="param WithClassTypeParametersBinder(Binder next) 722585"];
1239 [label="param WithClassTypeParametersBinder(this) 722586"];
1240 [label="next 722587"];
1241 [label="param WithClassTypeParametersBinder(this) 722588"];
1242 [label="param WithTypeParametersBinder(Binder next) 722589"];
1243 [label="param WithTypeParametersBinder(this) 722590"];
1244 [label="next 722591"];
1245 [label="param WithTypeParametersBinder(this) 722592"];
1246 [label="param Binder(Binder next) 722593"];
1247 [label="param Binder(this) 722594"];
1248 [label="param Binder(Conversions? conversions = null) 722595"];
1249 [label="RoslynDebug.Assert(next != null); 722596"];
1250 [label="RoslynDebug.Assert(next != null); 722597"];
1251 [label="this.Flags 722598"];
1252 [label="this.Compilation 722599"];
1253 [label="_lazyConversions 722600"];
1254 [label="_namedType 722601"];
1255 [label="_lazyTypeParameterMap 722602"];
1256 [label="Debug.Assert((object)container != null); 722603"];
1257 [label="Debug.Assert((object)container != null); 722604"];
1258 [label="_namedType 722605"];
1259 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 722606"];
1260 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 722607"];
1261 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 722608"];
1262 [label="param WithUnsafeRegionIfNecessary(this) 722609"];
1263 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722610"];
1264 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722611"];
1265 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 722612"];
1266 [label="param Includes(this BinderFlags self) 722613"];
1267 [label="param Includes(BinderFlags other) 722614"];
1268 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722615"];
1269 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722616"];
1270 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 722617"];
1271 [label="binderCache 722618"];
1272 [label="return _factory._binderCache; 722619"];
1273 [label="binderCache.TryAdd(key, resultBinder); 722620"];
1274 [label="binderCache.TryAdd(key, resultBinder); 722621"];
1275 [label="binderCache.TryAdd(key, resultBinder); 722622"];
1276 [label="binderCache.TryAdd(key, resultBinder); 722623"];
1277 [label="binderCache.TryAdd(key, resultBinder); 722624"];
1278 [label="return resultBinder; 722625"];
1279 [label="return ((CSharpSyntaxNode)node).Accept(this); 722626"];
1280 [label="_binderFactoryVisitorPool.Free(visitor); 722627"];
1281 [label="_binderFactoryVisitorPool.Free(visitor); 722628"];
1282 [label="return result; 722629"];
1283 [label="var diagnostics = c.GetDiagnostics(); 722630"];
1284 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 722631"];
1285 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 722632"];
1286 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 722633"];
1287 [label="Debug.Assert((object)containing != null); 722634"];
1288 [label="Debug.Assert((object)containing != null); 722635"];
1289 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722636"];
1290 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722637"];
1291 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722638"];
1292 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722639"];
1293 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 722640"];
1294 [label="param BinderWithContainingMemberOrLambda(Binder next) 722641"];
1295 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 722642"];
1296 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 722643"];
1297 [label="param BinderWithContainingMemberOrLambda(this) 722644"];
1298 [label="next 722645"];
1299 [label="flags 722646"];
1300 [label="param BinderWithContainingMemberOrLambda(this) 722647"];
1301 [label="param Binder(Binder next) 722648"];
1302 [label="param Binder(BinderFlags flags) 722649"];
1303 [label="param Binder(this) 722650"];
1304 [label="internal CSharpCompilation Compilation { get; } 722651"];
1305 [label="Flags 722652"];
1306 [label="protected internal Binder? Next { get; } 722653"];
1307 [label="_lazyConversions 722654"];
1308 [label="_lazyOverloadResolution 722655"];
1309 [label="RoslynDebug.Assert(next != null); 722656"];
1310 [label="RoslynDebug.Assert(next != null); 722657"];
1311 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 722658"];
1312 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 722659"];
1313 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 722660"];
1314 [label="param Includes(this BinderFlags self) 722661"];
1315 [label="param Includes(BinderFlags other) 722662"];
1316 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 722663"];
1317 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 722664"];
1318 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 722665"];
1319 [label="param Includes(this BinderFlags self) 722666"];
1320 [label="param Includes(BinderFlags other) 722667"];
1321 [label="Next 722668"];
1322 [label="this.Flags 722669"];
1323 [label="this.Compilation 722670"];
1324 [label="_containingMemberOrLambda 722671"];
1325 [label="Debug.Assert(containingMemberOrLambda != null); 722672"];
1326 [label="Debug.Assert(containingMemberOrLambda != null); 722673"];
1327 [label="_containingMemberOrLambda 722674"];
1328 [label="var diagnostics = c.GetDiagnostics(); 722675"];
1329 [label="param BindType(ExpressionSyntax syntax) 722676"];
1330 [label="param BindType(DiagnosticBag diagnostics) 722677"];
1331 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 722678"];
1332 [label="param BindType(bool suppressUseSiteDiagnostics = false) 722679"];
1333 [label="param BindType(this) 722680"];
1334 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722681"];
1335 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722682"];
1336 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722683"];
1337 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722684"];
1338 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 722685"];
1339 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 722686"];
1340 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 722687"];
1341 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 722688"];
1342 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 722689"];
1343 [label="param BindTypeOrAlias(this) 722690"];
1344 [label="Debug.Assert(diagnostics != null); 722691"];
1345 [label="Debug.Assert(diagnostics != null); 722692"];
1346 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722693"];
1347 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722694"];
1348 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722695"];
1349 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722696"];
1350 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722697"];
1351 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 722698"];
1352 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 722699"];
1353 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 722700"];
1354 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 722701"];
1355 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 722702"];
1356 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 722703"];
1357 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 722704"];
1358 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722705"];
1359 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722706"];
1360 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722707"];
1361 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722708"];
1362 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722709"];
1363 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 722710"];
1364 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 722711"];
1365 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 722712"];
1366 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 722713"];
1367 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 722714"];
1368 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 722715"];
1369 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 722716"];
1370 [label="var identifierValueText = node.Identifier.ValueText; 722717"];
1371 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 722718"];
1372 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722719"];
1373 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722720"];
1374 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722721"];
1375 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722722"];
1376 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722723"];
1377 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 722724"];
1378 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 722725"];
1379 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 722726"];
1380 [label="param CreateErrorIfLookupOnTypeParameter(string name) 722727"];
1381 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 722728"];
1382 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 722729"];
1383 [label="param CreateErrorIfLookupOnTypeParameter(this) 722730"];
1384 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 722731"];
1385 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 722732"];
1386 [label="return null; 722733"];
1387 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722734"];
1388 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 722735"];
1389 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 722736"];
1390 [label="CreatePool() 722737"];
1391 [label="ObjectPool<LookupResult> pool = null; 722738"];
1392 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 722739"];
1393 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 722740"];
1394 [label="return pool; 722741"];
1395 [label="s_poolInstance = CreatePool() 722742"];
1396 [label="LookupResult.GetInstance() 722743"];
1397 [label="var instance = s_poolInstance.Allocate(); 722744"];
1398 [label="var instance = s_poolInstance.Allocate(); 722745"];
1399 [label="var instance = s_poolInstance.Allocate(); 722746"];
1400 [label="param LookupResult(ObjectPool<LookupResult> pool) 722747"];
1401 [label="param LookupResult(this) 722748"];
1402 [label="_kind 722749"];
1403 [label="_symbolList 722750"];
1404 [label="_error 722751"];
1405 [label="_pool 722752"];
1406 [label="_pool 722753"];
1407 [label="_kind 722754"];
1408 [label="_symbolList = new ArrayBuilder<Symbol>(); 722755"];
1409 [label="_symbolList 722756"];
1410 [label="_error = null; 722757"];
1411 [label="_error 722758"];
1412 [label="var instance = s_poolInstance.Allocate(); 722759"];
1413 [label="instance.IsClear 722760"];
1414 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 722761"];
1415 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722762"];
1416 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722763"];
1417 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722764"];
1418 [label="Debug.Assert(instance.IsClear); 722765"];
1419 [label="return instance; 722766"];
1420 [label="var result = LookupResult.GetInstance(); 722767"];
1421 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 722768"];
1422 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 722769"];
1423 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 722770"];
1424 [label="param GetSimpleNameLookupOptions(NameSyntax node) 722771"];
1425 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 722772"];
1426 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 722773"];
1427 [label="return LookupOptions.NamespacesOrTypesOnly; 722774"];
1428 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 722775"];
1429 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722776"];
1430 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722777"];
1431 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722778"];
1432 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722779"];
1433 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722780"];
1434 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722781"];
1435 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722782"];
1436 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 722783"];
1437 [label="param LookupSymbolsSimpleName(LookupResult result) 722784"];
1438 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 722785"];
1439 [label="param LookupSymbolsSimpleName(string plainName) 722786"];
1440 [label="param LookupSymbolsSimpleName(int arity) 722787"];
1441 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 722788"];
1442 [label="param LookupSymbolsSimpleName(LookupOptions options) 722789"];
1443 [label="param LookupSymbolsSimpleName(bool diagnose) 722790"];
1444 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 722791"];
1445 [label="param LookupSymbolsSimpleName(this) 722792"];
1446 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 722793"];
1447 [label="options.IsAttributeTypeLookup() 722794"];
1448 [label="param IsAttributeTypeLookup(this LookupOptions options) 722795"];
1449 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 722796"];
1450 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722797"];
1451 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722798"];
1452 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722799"];
1453 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722800"];
1454 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722801"];
1455 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722802"];
1456 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722803"];
1457 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722804"];
1458 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 722805"];
1459 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 722806"];
1460 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 722807"];
1461 [label="param LookupSymbolsOrMembersInternal(string name) 722808"];
1462 [label="param LookupSymbolsOrMembersInternal(int arity) 722809"];
1463 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 722810"];
1464 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 722811"];
1465 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 722812"];
1466 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 722813"];
1467 [label="param LookupSymbolsOrMembersInternal(this) 722814"];
1468 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 722815"];
1469 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 722816"];
1470 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722817"];
1471 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722818"];
1472 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722819"];
1473 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722820"];
1474 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722821"];
1475 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722822"];
1476 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722823"];
1477 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 722824"];
1478 [label="param LookupSymbolsInternal(LookupResult result) 722825"];
1479 [label="param LookupSymbolsInternal(string name) 722826"];
1480 [label="param LookupSymbolsInternal(int arity) 722827"];
1481 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 722828"];
1482 [label="param LookupSymbolsInternal(LookupOptions options) 722829"];
1483 [label="param LookupSymbolsInternal(bool diagnose) 722830"];
1484 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 722831"];
1485 [label="param LookupSymbolsInternal(this) 722832"];
1486 [label="result.IsClear 722833"];
1487 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 722834"];
1488 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722835"];
1489 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722836"];
1490 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722837"];
1491 [label="Debug.Assert(result.IsClear); 722838"];
1492 [label="Debug.Assert(options.AreValid()); 722839"];
1493 [label="options.AreValid() 722840"];
1494 [label="param AreValid(this LookupOptions options) 722841"];
1495 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 722842"];
1496 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 722843"];
1497 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 722844"];
1498 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 722845"];
1499 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 722846"];
1500 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 722847"];
1501 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 722848"];
1502 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 722849"];
1503 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 722850"];
1504 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 722851"];
1505 [label="return OnlyOneBitSet(onlyOptions); 722852"];
1506 [label="OnlyOneBitSet(onlyOptions) 722853"];
1507 [label="param OnlyOneBitSet(LookupOptions o) 722854"];
1508 [label="return (o & (o - 1)) == 0; 722855"];
1509 [label="return (o & (o - 1)) == 0; 722856"];
1510 [label="Binder binder = null; 722857"];
1511 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 722858"];
1512 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 722859"];
1513 [label="result.IsMultiViable 722860"];
1514 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 722861"];
1515 [label="Kind 722862"];
1516 [label="get\n            {\n                return _kind;\n            } 722863"];
1517 [label="return _kind; 722864"];
1518 [label="return Kind == LookupResultKind.Viable; 722865"];
1519 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 722866"];
1520 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 722867"];
1521 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 722868"];
1522 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 722869"];
1523 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722870"];
1524 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722871"];
1525 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722872"];
1526 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722873"];
1527 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722874"];
1528 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722875"];
1529 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722876"];
1530 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722877"];
1531 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 722878"];
1532 [label="param LookupSymbolsInSingleBinder(LookupResult result) 722879"];
1533 [label="param LookupSymbolsInSingleBinder(string name) 722880"];
1534 [label="param LookupSymbolsInSingleBinder(int arity) 722881"];
1535 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 722882"];
1536 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 722883"];
1537 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 722884"];
1538 [label="param LookupSymbolsInSingleBinder(bool diagnose) 722885"];
1539 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 722886"];
1540 [label="param LookupSymbolsInSingleBinder(this) 722887"];
1541 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722888"];
1542 [label="result.IsClear 722889"];
1543 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 722890"];
1544 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722891"];
1545 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722892"];
1546 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722893"];
1547 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 722894"];
1548 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 722895"];
1549 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 722896"];
1550 [label="param LookupSymbolsInSingleBinder(LookupResult result) 722897"];
1551 [label="param LookupSymbolsInSingleBinder(string name) 722898"];
1552 [label="param LookupSymbolsInSingleBinder(int arity) 722899"];
1553 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 722900"];
1554 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 722901"];
1555 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 722902"];
1556 [label="param LookupSymbolsInSingleBinder(bool diagnose) 722903"];
1557 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 722904"];
1558 [label="param LookupSymbolsInSingleBinder(this) 722905"];
1559 [label="result.IsClear 722906"];
1560 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 722907"];
1561 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722908"];
1562 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722909"];
1563 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722910"];
1564 [label="Debug.Assert(result.IsClear); 722911"];
1565 [label="LookupMask 722912"];
1566 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 722913"];
1567 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 722914"];
1568 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 722915"];
1569 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 722916"];
1570 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 722917"];
1571 [label="TypeParameterMap 722918"];
1572 [label="get\n            {\n                if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                }\n                return _lazyTypeParameterMap;\n            } 722919"];
1573 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 722920"];
1574 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 722921"];
1575 [label="var result = new MultiDictionary<string, TypeParameterSymbol>(); 722922"];
1576 [label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    } 722923"];
1577 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 722924"];
1578 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 722925"];
1579 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 722926"];
1580 [label="return _lazyTypeParameterMap; 722927"];
1581 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 722928"];
1582 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 722929"];
1583 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722930"];
1584 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722931"];
1585 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722932"];
1586 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722933"];
1587 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722934"];
1588 [label="param LookupSymbolsInSingleBinder(LookupResult result) 722935"];
1589 [label="param LookupSymbolsInSingleBinder(string name) 722936"];
1590 [label="param LookupSymbolsInSingleBinder(int arity) 722937"];
1591 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 722938"];
1592 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 722939"];
1593 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 722940"];
1594 [label="param LookupSymbolsInSingleBinder(bool diagnose) 722941"];
1595 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 722942"];
1596 [label="param LookupSymbolsInSingleBinder(this) 722943"];
1597 [label="result.IsClear 722944"];
1598 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 722945"];
1599 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722946"];
1600 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722947"];
1601 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722948"];
1602 [label="Debug.Assert(result.IsClear); 722949"];
1603 [label="IsSubmissionClass 722950"];
1604 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 722951"];
1605 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 722952"];
1606 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 722953"];
1607 [label="var imports = GetImports(basesBeingResolved); 722954"];
1608 [label="GetImports(basesBeingResolved) 722955"];
1609 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 722956"];
1610 [label="param GetImports(this) 722957"];
1611 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 722958"];
1612 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 722959"];
1613 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 722960"];
1614 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 722961"];
1615 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 722962"];
1616 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 722963"];
1617 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 722964"];
1618 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 722965"];
1619 [label="param FromSyntax(InContainerBinder binder) 722966"];
1620 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 722967"];
1621 [label="param FromSyntax(bool inUsing) 722968"];
1622 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 722969"];
1623 [label="usingDirectives 722970"];
1624 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 722971"];
1625 [label="externAliasDirectives 722972"];
1626 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 722973"];
1627 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 722974"];
1628 [label="inUsing 722975"];
1629 [label="compilationUnit.Usings 722976"];
1630 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 722977"];
1631 [label="externAliasDirectives = compilationUnit.Externs; 722978"];
1632 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 722979"];
1633 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 722980"];
1634 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 722981"];
1635 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 722982"];
1636 [label="return Empty; 722983"];
1637 [label="return _lazyImports; 722984"];
1638 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 722985"];
1639 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 722986"];
1640 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 722987"];
1641 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 722988"];
1642 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722989"];
1643 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722990"];
1644 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722991"];
1645 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722992"];
1646 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722993"];
1647 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722994"];
1648 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722995"];
1649 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722996"];
1650 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722997"];
1651 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 722998"];
1652 [label="param LookupMembersInternal(LookupResult result) 722999"];
1653 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 723000"];
1654 [label="param LookupMembersInternal(string name) 723001"];
1655 [label="param LookupMembersInternal(int arity) 723002"];
1656 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 723003"];
1657 [label="param LookupMembersInternal(LookupOptions options) 723004"];
1658 [label="param LookupMembersInternal(Binder originalBinder) 723005"];
1659 [label="param LookupMembersInternal(bool diagnose) 723006"];
1660 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723007"];
1661 [label="param LookupMembersInternal(this) 723008"];
1662 [label="Debug.Assert(options.AreValid()); 723009"];
1663 [label="options.AreValid() 723010"];
1664 [label="param AreValid(this LookupOptions options) 723011"];
1665 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 723012"];
1666 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 723013"];
1667 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 723014"];
1668 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 723015"];
1669 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 723016"];
1670 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723017"];
1671 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723018"];
1672 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723019"];
1673 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 723020"];
1674 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 723021"];
1675 [label="return OnlyOneBitSet(onlyOptions); 723022"];
1676 [label="OnlyOneBitSet(onlyOptions) 723023"];
1677 [label="param OnlyOneBitSet(LookupOptions o) 723024"];
1678 [label="return (o & (o - 1)) == 0; 723025"];
1679 [label="return (o & (o - 1)) == 0; 723026"];
1680 [label="Debug.Assert(arity >= 0); 723027"];
1681 [label="Debug.Assert(arity >= 0); 723028"];
1682 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 723029"];
1683 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723030"];
1684 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723031"];
1685 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723032"];
1686 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723033"];
1687 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723034"];
1688 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723035"];
1689 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723036"];
1690 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723037"];
1691 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 723038"];
1692 [label="param LookupMembersInNamespace(LookupResult result) 723039"];
1693 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 723040"];
1694 [label="param LookupMembersInNamespace(string name) 723041"];
1695 [label="param LookupMembersInNamespace(int arity) 723042"];
1696 [label="param LookupMembersInNamespace(LookupOptions options) 723043"];
1697 [label="param LookupMembersInNamespace(Binder originalBinder) 723044"];
1698 [label="param LookupMembersInNamespace(bool diagnose) 723045"];
1699 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723046"];
1700 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723047"];
1701 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723048"];
1702 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723049"];
1703 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723050"];
1704 [label="GetCandidateMembers(ns, name, options, originalBinder) 723051"];
1705 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 723052"];
1706 [label="param GetCandidateMembers(string name) 723053"];
1707 [label="param GetCandidateMembers(LookupOptions options) 723054"];
1708 [label="param GetCandidateMembers(Binder originalBinder) 723055"];
1709 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 723056"];
1710 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 723057"];
1711 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 723058"];
1712 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 723059"];
1713 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 723060"];
1714 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 723061"];
1715 [label="return nsOrType.GetMembers(name); 723062"];
1716 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 723063"];
1717 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723064"];
1718 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723065"];
1719 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723066"];
1720 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723067"];
1721 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723068"];
1722 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 723069"];
1723 [label="param CheckViability(Symbol symbol) 723070"];
1724 [label="param CheckViability(int arity) 723071"];
1725 [label="param CheckViability(LookupOptions options) 723072"];
1726 [label="param CheckViability(TypeSymbol accessThroughType) 723073"];
1727 [label="param CheckViability(bool diagnose) 723074"];
1728 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723075"];
1729 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 723076"];
1730 [label="param CheckViability(this) 723077"];
1731 [label="bool inaccessibleViaQualifier; 723078"];
1732 [label="DiagnosticInfo diagInfo; 723079"];
1733 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 723080"];
1734 [label="symbol.Kind == SymbolKind.Alias 723081"];
1735 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723082"];
1736 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723083"];
1737 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723084"];
1738 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723085"];
1739 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723086"];
1740 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723087"];
1741 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723088"];
1742 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 723089"];
1743 [label="param WrongArity(Symbol symbol) 723090"];
1744 [label="param WrongArity(int arity) 723091"];
1745 [label="param WrongArity(bool diagnose) 723092"];
1746 [label="param WrongArity(LookupOptions options) 723093"];
1747 [label="param WrongArity(out DiagnosticInfo diagInfo) 723094"];
1748 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 723095"];
1749 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723096"];
1750 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723097"];
1751 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723098"];
1752 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723099"];
1753 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 723100"];
1754 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723101"];
1755 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723102"];
1756 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 723103"];
1757 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 723104"];
1758 [label="options.IsAttributeTypeLookup() 723105"];
1759 [label="param IsAttributeTypeLookup(this LookupOptions options) 723106"];
1760 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 723107"];
1761 [label="diagInfo = null; 723108"];
1762 [label="return false; 723109"];
1763 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723110"];
1764 [label="InCref 723111"];
1765 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 723112"];
1766 [label="return this.Flags.Includes(BinderFlags.Cref); 723113"];
1767 [label="return this.Flags.Includes(BinderFlags.Cref); 723114"];
1768 [label="this.Flags.Includes(BinderFlags.Cref) 723115"];
1769 [label="param Includes(this BinderFlags self) 723116"];
1770 [label="param Includes(BinderFlags other) 723117"];
1771 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723118"];
1772 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723119"];
1773 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723120"];
1774 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723121"];
1775 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723122"];
1776 [label="InCref 723123"];
1777 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723124"];
1778 [label="InCref 723125"];
1779 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723126"];
1780 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723127"];
1781 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723128"];
1782 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723129"];
1783 [label="RefineAccessThroughType(options, accessThroughType) 723130"];
1784 [label="param RefineAccessThroughType(LookupOptions options) 723131"];
1785 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 723132"];
1786 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 723133"];
1787 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 723134"];
1788 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 723135"];
1789 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 723136"];
1790 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723137"];
1791 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723138"];
1792 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723139"];
1793 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 723140"];
1794 [label="param IsAccessible(Symbol symbol) 723141"];
1795 [label="param IsAccessible(TypeSymbol accessThroughType) 723142"];
1796 [label="param IsAccessible(out bool failedThroughTypeCheck) 723143"];
1797 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723144"];
1798 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 723145"];
1799 [label="param IsAccessible(this) 723146"];
1800 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723147"];
1801 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723148"];
1802 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723149"];
1803 [label="param Includes(this BinderFlags self) 723150"];
1804 [label="param Includes(BinderFlags other) 723151"];
1805 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723152"];
1806 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723153"];
1807 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723154"];
1808 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723155"];
1809 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723156"];
1810 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723157"];
1811 [label="param IsAccessibleHelper(Symbol symbol) 723158"];
1812 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723159"];
1813 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723160"];
1814 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723161"];
1815 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 723162"];
1816 [label="param IsAccessibleHelper(this) 723163"];
1817 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723164"];
1818 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723165"];
1819 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723166"];
1820 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723167"];
1821 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723168"];
1822 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723169"];
1823 [label="param IsAccessibleHelper(Symbol symbol) 723170"];
1824 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723171"];
1825 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723172"];
1826 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723173"];
1827 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 723174"];
1828 [label="param IsAccessibleHelper(this) 723175"];
1829 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723176"];
1830 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723177"];
1831 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723178"];
1832 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723179"];
1833 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723180"];
1834 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723181"];
1835 [label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723182"];
1836 [label="param IsSymbolAccessibleConditional(Symbol symbol) 723183"];
1837 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 723184"];
1838 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 723185"];
1839 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 723186"];
1840 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 723187"];
1841 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 723188"];
1842 [label="param IsSymbolAccessibleConditional(this) 723189"];
1843 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723190"];
1844 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723191"];
1845 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723192"];
1846 [label="param Includes(this BinderFlags self) 723193"];
1847 [label="param Includes(BinderFlags other) 723194"];
1848 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723195"];
1849 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723196"];
1850 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723197"];
1851 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723198"];
1852 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723199"];
1853 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723200"];
1854 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723201"];
1855 [label="param IsSymbolAccessible(Symbol symbol) 723202"];
1856 [label="param IsSymbolAccessible(NamedTypeSymbol within) 723203"];
1857 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 723204"];
1858 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 723205"];
1859 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723206"];
1860 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 723207"];
1861 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723208"];
1862 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723209"];
1863 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723210"];
1864 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723211"];
1865 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723212"];
1866 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723213"];
1867 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723214"];
1868 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 723215"];
1869 [label="param IsSymbolAccessibleCore(Symbol symbol) 723216"];
1870 [label="param IsSymbolAccessibleCore(Symbol within) 723217"];
1871 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 723218"];
1872 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 723219"];
1873 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 723220"];
1874 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723221"];
1875 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 723222"];
1876 [label="Debug.Assert((object)symbol != null); 723223"];
1877 [label="Debug.Assert((object)symbol != null); 723224"];
1878 [label="Debug.Assert((object)within != null); 723225"];
1879 [label="Debug.Assert((object)within != null); 723226"];
1880 [label="Debug.Assert(within.IsDefinition); 723227"];
1881 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723228"];
1882 [label="failedThroughTypeCheck = false; 723229"];
1883 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 723230"];
1884 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723231"];
1885 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723232"];
1886 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723233"];
1887 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723234"];
1888 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 723235"];
1889 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 723236"];
1890 [label="param IsNamedTypeAccessible(Symbol within) 723237"];
1891 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 723238"];
1892 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 723239"];
1893 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723240"];
1894 [label="Debug.Assert((object)type != null); 723241"];
1895 [label="Debug.Assert((object)type != null); 723242"];
1896 [label="var compilation = within.DeclaringCompilation; 723243"];
1897 [label="bool unused; 723244"];
1898 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 723245"];
1899 [label="var containingType = type.ContainingType; 723246"];
1900 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 723247"];
1901 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 723248"];
1902 [label="(object)containingType == null 723249"];
1903 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 723250"];
1904 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 723251"];
1905 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 723252"];
1906 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 723253"];
1907 [label="param IsNonNestedTypeAccessible(Symbol within) 723254"];
1908 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723255"];
1909 [label="Debug.Assert((object)assembly != null); 723256"];
1910 [label="Debug.Assert((object)assembly != null); 723257"];
1911 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 723258"];
1912 [label="return true; 723259"];
1913 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723260"];
1914 [label="InCref 723261"];
1915 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723262"];
1916 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723263"];
1917 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723264"];
1918 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723265"];
1919 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723266"];
1920 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723267"];
1921 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723268"];
1922 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723269"];
1923 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723270"];
1924 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723271"];
1925 [label="return LookupResult.Good(symbol); 723272"];
1926 [label="LookupResult.Good(symbol) 723273"];
1927 [label="param Good(Symbol symbol) 723274"];
1928 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 723275"];
1929 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 723276"];
1930 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 723277"];
1931 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 723278"];
1932 [label="param SingleLookupResult(LookupResultKind kind) 723279"];
1933 [label="param SingleLookupResult(Symbol symbol) 723280"];
1934 [label="param SingleLookupResult(DiagnosticInfo error) 723281"];
1935 [label="param SingleLookupResult(this) 723282"];
1936 [label="this.Kind 723283"];
1937 [label="this.Symbol 723284"];
1938 [label="this.Error 723285"];
1939 [label="return LookupResult.Good(symbol); 723286"];
1940 [label="result.MergeEqual(resultOfThisMember); 723287"];
1941 [label="result.MergeEqual(resultOfThisMember) 723288"];
1942 [label="param MergeEqual(SingleLookupResult result) 723289"];
1943 [label="param MergeEqual(this) 723290"];
1944 [label="Kind 723291"];
1945 [label="get\n            {\n                return _kind;\n            } 723292"];
1946 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 723293"];
1947 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 723294"];
1948 [label="Kind 723295"];
1949 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 723296"];
1950 [label="this.SetFrom(result); 723297"];
1951 [label="this.SetFrom(result) 723298"];
1952 [label="param SetFrom(SingleLookupResult other) 723299"];
1953 [label="param SetFrom(this) 723300"];
1954 [label="_kind 723301"];
1955 [label="_symbolList.Clear(); 723302"];
1956 [label="_symbolList.Add(other.Symbol); 723303"];
1957 [label="_symbolList.Add(other.Symbol); 723304"];
1958 [label="_error 723305"];
1959 [label="this.SetFrom(result); 723306"];
1960 [label="result.MergeEqual(resultOfThisMember); 723307"];
1961 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 723308"];
1962 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723309"];
1963 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 723310"];
1964 [label="result.IsMultiViable 723311"];
1965 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 723312"];
1966 [label="return _kind; 723313"];
1967 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 723314"];
1968 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 723315"];
1969 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 723316"];
1970 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 723317"];
1971 [label="originalBinder.IsSemanticModelBinder 723318"];
1972 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 723319"];
1973 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 723320"];
1974 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 723321"];
1975 [label="this.Flags.Includes(BinderFlags.SemanticModel) 723322"];
1976 [label="param Includes(this BinderFlags self) 723323"];
1977 [label="param Includes(BinderFlags other) 723324"];
1978 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 723325"];
1979 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 723326"];
1980 [label="param IsUsingAlias(string name) 723327"];
1981 [label="param IsUsingAlias(bool callerIsSemanticModel) 723328"];
1982 [label="param IsUsingAlias(this) 723329"];
1983 [label="AliasAndUsingDirective node; 723330"];
1984 [label="node 723331"];
1985 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 723332"];
1986 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 723333"];
1987 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 723334"];
1988 [label="return false; 723335"];
1989 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 723336"];
1990 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 723337"];
1991 [label="return; 723338"];
1992 [label="result.IsClear 723339"];
1993 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 723340"];
1994 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723341"];
1995 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 723342"];
1996 [label="binder = scope; 723343"];
1997 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 723344"];
1998 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 723345"];
1999 [label="return binder; 723346"];
2000 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 723347"];
2001 [label="diagnostics.Add(node, useSiteDiagnostics); 723348"];
2002 [label="diagnostics.Add(node, useSiteDiagnostics); 723349"];
2003 [label="diagnostics.Add(node, useSiteDiagnostics); 723350"];
2004 [label="diagnostics.Add(node, useSiteDiagnostics); 723351"];
2005 [label="Symbol bindingResult = null; 723352"];
2006 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 723353"];
2007 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 723354"];
2008 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 723355"];
2009 [label="IsViableType(result) 723356"];
2010 [label="param IsViableType(LookupResult result) 723357"];
2011 [label="result.IsMultiViable 723358"];
2012 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 723359"];
2013 [label="Kind 723360"];
2014 [label="get\n            {\n                return _kind;\n            } 723361"];
2015 [label="return _kind; 723362"];
2016 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 723363"];
2017 [label="result.Symbols 723364"];
2018 [label="get\n            {\n                return _symbolList;\n            } 723365"];
2019 [label="return _symbolList; 723366"];
2020 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 723367"];
2021 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 723368"];
2022 [label="return true; 723369"];
2023 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 723370"];
2024 [label="bool wasError; 723371"];
2025 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723372"];
2026 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723373"];
2027 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723374"];
2028 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723375"];
2029 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723376"];
2030 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723377"];
2031 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723378"];
2032 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723379"];
2033 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723380"];
2034 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 723381"];
2035 [label="param ResultSymbol(LookupResult result) 723382"];
2036 [label="param ResultSymbol(string simpleName) 723383"];
2037 [label="param ResultSymbol(int arity) 723384"];
2038 [label="param ResultSymbol(SyntaxNode where) 723385"];
2039 [label="param ResultSymbol(DiagnosticBag diagnostics) 723386"];
2040 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 723387"];
2041 [label="param ResultSymbol(out bool wasError) 723388"];
2042 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 723389"];
2043 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 723390"];
2044 [label="param ResultSymbol(this) 723391"];
2045 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723392"];
2046 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723393"];
2047 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723394"];
2048 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723395"];
2049 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723396"];
2050 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723397"];
2051 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723398"];
2052 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723399"];
2053 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723400"];
2054 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 723401"];
2055 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723402"];
2056 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723403"];
2057 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723404"];
2058 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723405"];
2059 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723406"];
2060 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723407"];
2061 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723408"];
2062 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723409"];
2063 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723410"];
2064 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 723411"];
2065 [label="Debug.Assert(where != null); 723412"];
2066 [label="Debug.Assert(where != null); 723413"];
2067 [label="Debug.Assert(diagnostics != null); 723414"];
2068 [label="Debug.Assert(diagnostics != null); 723415"];
2069 [label="result.Symbols 723416"];
2070 [label="get\n            {\n                return _symbolList;\n            } 723417"];
2071 [label="return _symbolList; 723418"];
2072 [label="var symbols = result.Symbols; 723419"];
2073 [label="wasError = false; 723420"];
2074 [label="result.IsMultiViable 723421"];
2075 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 723422"];
2076 [label="Kind 723423"];
2077 [label="get\n            {\n                return _kind;\n            } 723424"];
2078 [label="return _kind; 723425"];
2079 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 723426"];
2080 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 723427"];
2081 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 723428"];
2082 [label="var singleResult = symbols[0]; 723429"];
2083 [label="var singleType = singleResult as TypeSymbol; 723430"];
2084 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 723431"];
2085 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 723432"];
2086 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 723433"];
2087 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 723434"];
2088 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 723435"];
2089 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 723436"];
2090 [label="if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 723437"];
2091 [label="return singleResult; 723438"];
2092 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 723439"];
2093 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723440"];
2094 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723441"];
2095 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723442"];
2096 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723443"];
2097 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 723444"];
2098 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 723445"];
2099 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 723446"];
2100 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 723447"];
2101 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 723448"];
2102 [label="param CheckRuntimeSupportForSymbolAccess(this) 723449"];
2103 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 723450"];
2104 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 723451"];
2105 [label="return symbol; 723452"];
2106 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 723453"];
2107 [label="result.Free() 723454"];
2108 [label="param Free(this) 723455"];
2109 [label="this.Clear() 723456"];
2110 [label="param Clear(this) 723457"];
2111 [label="_kind 723458"];
2112 [label="_symbolList.Clear(); 723459"];
2113 [label="_error = null; 723460"];
2114 [label="_error 723461"];
2115 [label="this.Clear(); 723462"];
2116 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 723463"];
2117 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 723464"];
2118 [label="_pool.Free(this); 723465"];
2119 [label="_pool.Free(this); 723466"];
2120 [label="result.Free(); 723467"];
2121 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 723468"];
2122 [label="AreNullableAnnotationsEnabled(node.Identifier) 723469"];
2123 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 723470"];
2124 [label="param AreNullableAnnotationsEnabled(this) 723471"];
2125 [label="RoslynDebug.Assert(token.SyntaxTree is object); 723472"];
2126 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 723473"];
2127 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 723474"];
2128 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 723475"];
2129 [label="param AreNullableAnnotationsEnabled(int position) 723476"];
2130 [label="param AreNullableAnnotationsEnabled(this) 723477"];
2131 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 723478"];
2132 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 723479"];
2133 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 723480"];
2134 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 723481"];
2135 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 723482"];
2136 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 723483"];
2137 [label="AreNullableAnnotationsGloballyEnabled() 723484"];
2138 [label="param AreNullableAnnotationsGloballyEnabled(this) 723485"];
2139 [label="RoslynDebug.Assert(Next is object); 723486"];
2140 [label="Next.AreNullableAnnotationsGloballyEnabled() 723487"];
2141 [label="param AreNullableAnnotationsGloballyEnabled(this) 723488"];
2142 [label="param AreNullableAnnotationsGloballyEnabled(this) 723489"];
2143 [label="GetGlobalAnnotationState() 723490"];
2144 [label="param GetGlobalAnnotationState(this) 723491"];
2145 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 723492"];
2146 [label="return false; 723493"];
2147 [label="return GetGlobalAnnotationState(); 723494"];
2148 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 723495"];
2149 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 723496"];
2150 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 723497"];
2151 [label="param CreateUnannotated(bool isNullableEnabled) 723498"];
2152 [label="param CreateUnannotated(Symbol symbol) 723499"];
2153 [label="if (symbol is null)\n                {\n                    return default;\n                } 723500"];
2154 [label="var type = symbol as TypeSymbol; 723501"];
2155 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 723502"];
2156 [label="type is null 723503"];
2157 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 723504"];
2158 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 723505"];
2159 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 723506"];
2160 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 723507"];
2161 [label="Debug.Assert(typeWithAnnotations.HasType); 723508"];
2162 [label="_typeWithAnnotations 723509"];
2163 [label="_symbol = null; 723510"];
2164 [label="_symbol 723511"];
2165 [label="_isNullableEnabled = false; 723512"];
2166 [label="_isNullableEnabled 723513"];
2167 [label="symbol.IsType 723514"];
2168 [label="=> !_typeWithAnnotations.IsDefault 723515"];
2169 [label="!_typeWithAnnotations.IsDefault 723516"];
2170 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 723517"];
2171 [label="symbol.IsType 723518"];
2172 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 723519"];
2173 [label="symbol.TypeWithAnnotations 723520"];
2174 [label="=> _typeWithAnnotations 723521"];
2175 [label="_typeWithAnnotations 723522"];
2176 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723523"];
2177 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723524"];
2178 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723525"];
2179 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723526"];
2180 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723527"];
2181 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723528"];
2182 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 723529"];
2183 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 723530"];
2184 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723531"];
2185 [label="param ReportDiagnosticsIfObsolete(this) 723532"];
2186 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723533"];
2187 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723534"];
2188 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723535"];
2189 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723536"];
2190 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 723537"];
2191 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723538"];
2192 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 723539"];
2193 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723540"];
2194 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723541"];
2195 [label="param ReportDiagnosticsIfObsolete(this) 723542"];
2196 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 723543"];
2197 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723544"];
2198 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723545"];
2199 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723546"];
2200 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723547"];
2201 [label="this.ContainingMemberOrLambda 723548"];
2202 [label="get { return _containingMemberOrLambda; } 723549"];
2203 [label="return _containingMemberOrLambda; 723550"];
2204 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723551"];
2205 [label="this.ContainingType 723552"];
2206 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 723553"];
2207 [label="this.ContainingMemberOrLambda 723554"];
2208 [label="get { return _containingMemberOrLambda; } 723555"];
2209 [label="return _containingMemberOrLambda; 723556"];
2210 [label="var member = this.ContainingMemberOrLambda; 723557"];
2211 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723558"];
2212 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723559"];
2213 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 723560"];
2214 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 723561"];
2215 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723562"];
2216 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723563"];
2217 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 723564"];
2218 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723565"];
2219 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 723566"];
2220 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723567"];
2221 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723568"];
2222 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 723569"];
2223 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 723570"];
2224 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 723571"];
2225 [label="RoslynDebug.Assert(symbol is object); 723572"];
2226 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 723573"];
2227 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 723574"];
2228 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 723575"];
2229 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 723576"];
2230 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 723577"];
2231 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 723578"];
2232 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 723579"];
2233 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723580"];
2234 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723581"];
2235 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723582"];
2236 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723583"];
2237 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723584"];
2238 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 723585"];
2239 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 723586"];
2240 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 723587"];
2241 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 723588"];
2242 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 723589"];
2243 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 723590"];
2244 [label="RoslynDebug.Assert(diagnostics != null); 723591"];
2245 [label="RoslynDebug.Assert(diagnostics != null); 723592"];
2246 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723593"];
2247 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723594"];
2248 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723595"];
2249 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723596"];
2250 [label="DiagnosticInfo? info = null; 723597"];
2251 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 723598"];
2252 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 723599"];
2253 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 723600"];
2254 [label="return kind; 723601"];
2255 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 723602"];
2256 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 723603"];
2257 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723604"];
2258 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723605"];
2259 [label="return symbol; 723606"];
2260 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723607"];
2261 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723608"];
2262 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723609"];
2263 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723610"];
2264 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 723611"];
2265 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 723612"];
2266 [label="param UnwrapAlias(DiagnosticBag diagnostics) 723613"];
2267 [label="param UnwrapAlias(SyntaxNode syntax) 723614"];
2268 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 723615"];
2269 [label="param UnwrapAlias(this) 723616"];
2270 [label="symbol.IsAlias 723617"];
2271 [label="=> _symbol?.Kind == SymbolKind.Alias 723618"];
2272 [label="_symbol 723619"];
2273 [label="_symbol?.Kind == SymbolKind.Alias 723620"];
2274 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 723621"];
2275 [label="return symbol; 723622"];
2276 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 723623"];
2277 [label="=> _typeWithAnnotations 723624"];
2278 [label="_typeWithAnnotations 723625"];
2279 [label="var diagnostics = c.GetDiagnostics(); 723626"];
2280 [label="Debug.Assert(node != null); 723627"];
2281 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 723628"];
2282 [label="NodeUsage extraInfo = NodeUsage.Normal; 723629"];
2283 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 723630"];
2284 [label="SyntaxToken token; 723631"];
2285 [label="token 723632"];
2286 [label="syntaxTree 723633"];
2287 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 723634"];
2288 [label="return _factory._syntaxTree; 723635"];
2289 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 723636"];
2290 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 723637"];
2291 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 723638"];
2292 [label="RoslynDebug.Assert(next != null); 723639"];
2293 [label="_namedType 723640"];
2294 [label="Debug.Assert((object)container != null); 723641"];
2295 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 723642"];
2296 [label="param Includes(this BinderFlags self) 723643"];
2297 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 723644"];
2298 [label="param Includes(this BinderFlags self) 723645"];
2299 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 723646"];
2300 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 723647"];
2301 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 723648"];
2302 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 723649"];
2303 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 723650"];
2304 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 723651"];
2305 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 723652"];
2306 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 723653"];
2307 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 723654"];
2308 [label="param CreateErrorIfLookupOnTypeParameter(string name) 723655"];
2309 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 723656"];
2310 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 723657"];
2311 [label="param CreateErrorIfLookupOnTypeParameter(this) 723658"];
2312 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 723659"];
2313 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 723660"];
2314 [label="return null; 723661"];
2315 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 723662"];
2316 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 723663"];
2317 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 723664"];
2318 [label="instance.IsClear 723665"];
2319 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 723666"];
2320 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723667"];
2321 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723668"];
2322 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723669"];
2323 [label="Debug.Assert(instance.IsClear); 723670"];
2324 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 723671"];
2325 [label="param LookupSymbolsSimpleName(int arity) 723672"];
2326 [label="param LookupSymbolsSimpleName(bool diagnose) 723673"];
2327 [label="param LookupSymbolsOrMembersInternal(int arity) 723674"];
2328 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 723675"];
2329 [label="param LookupSymbolsInternal(int arity) 723676"];
2330 [label="param LookupSymbolsInternal(bool diagnose) 723677"];
2331 [label="result.IsClear 723678"];
2332 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 723679"];
2333 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723680"];
2334 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723681"];
2335 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723682"];
2336 [label="Debug.Assert(result.IsClear); 723683"];
2337 [label="Debug.Assert(options.AreValid()); 723684"];
2338 [label="options.AreValid() 723685"];
2339 [label="param AreValid(this LookupOptions options) 723686"];
2340 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 723687"];
2341 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 723688"];
2342 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 723689"];
2343 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 723690"];
2344 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 723691"];
2345 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723692"];
2346 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723693"];
2347 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723694"];
2348 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 723695"];
2349 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 723696"];
2350 [label="return OnlyOneBitSet(onlyOptions); 723697"];
2351 [label="OnlyOneBitSet(onlyOptions) 723698"];
2352 [label="param OnlyOneBitSet(LookupOptions o) 723699"];
2353 [label="return (o & (o - 1)) == 0; 723700"];
2354 [label="return (o & (o - 1)) == 0; 723701"];
2355 [label="param LookupSymbolsInSingleBinder(LookupResult result) 723702"];
2356 [label="param LookupSymbolsInSingleBinder(string name) 723703"];
2357 [label="param LookupSymbolsInSingleBinder(int arity) 723704"];
2358 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 723705"];
2359 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 723706"];
2360 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 723707"];
2361 [label="param LookupSymbolsInSingleBinder(bool diagnose) 723708"];
2362 [label="param LookupSymbolsInSingleBinder(this) 723709"];
2363 [label="result.IsClear 723710"];
2364 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 723711"];
2365 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723712"];
2366 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723713"];
2367 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723714"];
2368 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 723715"];
2369 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 723716"];
2370 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 723717"];
2371 [label="param LookupSymbolsInSingleBinder(LookupResult result) 723718"];
2372 [label="param LookupSymbolsInSingleBinder(int arity) 723719"];
2373 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 723720"];
2374 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 723721"];
2375 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 723722"];
2376 [label="param LookupSymbolsInSingleBinder(bool diagnose) 723723"];
2377 [label="result.IsClear 723724"];
2378 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 723725"];
2379 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723726"];
2380 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723727"];
2381 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723728"];
2382 [label="Debug.Assert(result.IsClear); 723729"];
2383 [label="LookupMask 723730"];
2384 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 723731"];
2385 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 723732"];
2386 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 723733"];
2387 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 723734"];
2388 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 723735"];
2389 [label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    } 723736"];
2390 [label="param LookupSymbolsInSingleBinder(int arity) 723737"];
2391 [label="param LookupSymbolsInSingleBinder(bool diagnose) 723738"];
2392 [label="result.IsClear 723739"];
2393 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 723740"];
2394 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723741"];
2395 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723742"];
2396 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723743"];
2397 [label="Debug.Assert(result.IsClear); 723744"];
2398 [label="IsSubmissionClass 723745"];
2399 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 723746"];
2400 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 723747"];
2401 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 723748"];
2402 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 723749"];
2403 [label="param FromSyntax(InContainerBinder binder) 723750"];
2404 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 723751"];
2405 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 723752"];
2406 [label="usingDirectives 723753"];
2407 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 723754"];
2408 [label="externAliasDirectives 723755"];
2409 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 723756"];
2410 [label="param LookupMembersInternal(int arity) 723757"];
2411 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 723758"];
2412 [label="param LookupMembersInternal(bool diagnose) 723759"];
2413 [label="param LookupMembersInternal(this) 723760"];
2414 [label="Debug.Assert(options.AreValid()); 723761"];
2415 [label="options.AreValid() 723762"];
2416 [label="param AreValid(this LookupOptions options) 723763"];
2417 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 723764"];
2418 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 723765"];
2419 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 723766"];
2420 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 723767"];
2421 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 723768"];
2422 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723769"];
2423 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723770"];
2424 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 723771"];
2425 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 723772"];
2426 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 723773"];
2427 [label="return OnlyOneBitSet(onlyOptions); 723774"];
2428 [label="OnlyOneBitSet(onlyOptions) 723775"];
2429 [label="param OnlyOneBitSet(LookupOptions o) 723776"];
2430 [label="return (o & (o - 1)) == 0; 723777"];
2431 [label="return (o & (o - 1)) == 0; 723778"];
2432 [label="Debug.Assert(arity >= 0); 723779"];
2433 [label="Debug.Assert(arity >= 0); 723780"];
2434 [label="param LookupMembersInNamespace(int arity) 723781"];
2435 [label="param LookupMembersInNamespace(bool diagnose) 723782"];
2436 [label="param GetCandidateMembers(Binder originalBinder) 723783"];
2437 [label="param CheckViability(int arity) 723784"];
2438 [label="param CheckViability(TypeSymbol accessThroughType) 723785"];
2439 [label="param CheckViability(bool diagnose) 723786"];
2440 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 723787"];
2441 [label="bool inaccessibleViaQualifier; 723788"];
2442 [label="DiagnosticInfo diagInfo; 723789"];
2443 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723790"];
2444 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723791"];
2445 [label="param WrongArity(Symbol symbol) 723792"];
2446 [label="param WrongArity(int arity) 723793"];
2447 [label="param WrongArity(bool diagnose) 723794"];
2448 [label="param WrongArity(LookupOptions options) 723795"];
2449 [label="param WrongArity(out DiagnosticInfo diagInfo) 723796"];
2450 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 723797"];
2451 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723798"];
2452 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723799"];
2453 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723800"];
2454 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 723801"];
2455 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 723802"];
2456 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723803"];
2457 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723804"];
2458 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 723805"];
2459 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 723806"];
2460 [label="options.IsAttributeTypeLookup() 723807"];
2461 [label="param IsAttributeTypeLookup(this LookupOptions options) 723808"];
2462 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 723809"];
2463 [label="diagInfo = null; 723810"];
2464 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723811"];
2465 [label="RefineAccessThroughType(options, accessThroughType) 723812"];
2466 [label="param RefineAccessThroughType(LookupOptions options) 723813"];
2467 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 723814"];
2468 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 723815"];
2469 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 723816"];
2470 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 723817"];
2471 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 723818"];
2472 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723819"];
2473 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 723820"];
2474 [label="param IsAccessible(TypeSymbol accessThroughType) 723821"];
2475 [label="param IsAccessible(out bool failedThroughTypeCheck) 723822"];
2476 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 723823"];
2477 [label="param IsAccessible(this) 723824"];
2478 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723825"];
2479 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723826"];
2480 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723827"];
2481 [label="param Includes(this BinderFlags self) 723828"];
2482 [label="param Includes(BinderFlags other) 723829"];
2483 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723830"];
2484 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723831"];
2485 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 723832"];
2486 [label="param IsAccessibleHelper(this) 723833"];
2487 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723834"];
2488 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723835"];
2489 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 723836"];
2490 [label="param IsAccessibleHelper(this) 723837"];
2491 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 723838"];
2492 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 723839"];
2493 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 723840"];
2494 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 723841"];
2495 [label="param IsSymbolAccessibleConditional(this) 723842"];
2496 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723843"];
2497 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 723844"];
2498 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723845"];
2499 [label="param Includes(this BinderFlags self) 723846"];
2500 [label="param Includes(BinderFlags other) 723847"];
2501 [label="param IsSymbolAccessible(NamedTypeSymbol within) 723848"];
2502 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 723849"];
2503 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 723850"];
2504 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 723851"];
2505 [label="param IsSymbolAccessibleCore(Symbol within) 723852"];
2506 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 723853"];
2507 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 723854"];
2508 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 723855"];
2509 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 723856"];
2510 [label="Debug.Assert((object)symbol != null); 723857"];
2511 [label="Debug.Assert((object)within != null); 723858"];
2512 [label="Debug.Assert((object)within != null); 723859"];
2513 [label="Debug.Assert(within.IsDefinition); 723860"];
2514 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723861"];
2515 [label="failedThroughTypeCheck = false; 723862"];
2516 [label="param IsNamedTypeAccessible(Symbol within) 723863"];
2517 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 723864"];
2518 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723865"];
2519 [label="Debug.Assert((object)type != null); 723866"];
2520 [label="var compilation = within.DeclaringCompilation; 723867"];
2521 [label="bool unused; 723868"];
2522 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 723869"];
2523 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 723870"];
2524 [label="param IsNonNestedTypeAccessible(Symbol within) 723871"];
2525 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723872"];
2526 [label="Debug.Assert((object)assembly != null); 723873"];
2527 [label="Debug.Assert((object)assembly != null); 723874"];
2528 [label="originalBinder.IsSemanticModelBinder 723875"];
2529 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 723876"];
2530 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 723877"];
2531 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 723878"];
2532 [label="this.Flags.Includes(BinderFlags.SemanticModel) 723879"];
2533 [label="param Includes(this BinderFlags self) 723880"];
2534 [label="param Includes(BinderFlags other) 723881"];
2535 [label="param IsUsingAlias(bool callerIsSemanticModel) 723882"];
2536 [label="return false; 723883"];
2537 [label="return; 723884"];
2538 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723885"];
2539 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 723886"];
2540 [label="binder = scope; 723887"];
2541 [label="return binder; 723888"];
2542 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 723889"];
2543 [label="IsViableType(result) 723890"];
2544 [label="param IsViableType(LookupResult result) 723891"];
2545 [label="result.IsMultiViable 723892"];
2546 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 723893"];
2547 [label="return _kind; 723894"];
2548 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 723895"];
2549 [label="result.Symbols 723896"];
2550 [label="get\n            {\n                return _symbolList;\n            } 723897"];
2551 [label="return _symbolList; 723898"];
2552 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 723899"];
2553 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 723900"];
2554 [label="return true; 723901"];
2555 [label="bool wasError; 723902"];
2556 [label="param ResultSymbol(string simpleName) 723903"];
2557 [label="param ResultSymbol(int arity) 723904"];
2558 [label="param ResultSymbol(SyntaxNode where) 723905"];
2559 [label="param ResultSymbol(DiagnosticBag diagnostics) 723906"];
2560 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 723907"];
2561 [label="param ResultSymbol(out bool wasError) 723908"];
2562 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 723909"];
2563 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 723910"];
2564 [label="param ResultSymbol(this) 723911"];
2565 [label="Debug.Assert(where != null); 723912"];
2566 [label="Debug.Assert(where != null); 723913"];
2567 [label="Debug.Assert(diagnostics != null); 723914"];
2568 [label="Debug.Assert(diagnostics != null); 723915"];
2569 [label="wasError = false; 723916"];
2570 [label="var singleType = singleResult as TypeSymbol; 723917"];
2571 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 723918"];
2572 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 723919"];
2573 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 723920"];
2574 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 723921"];
2575 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 723922"];
2576 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 723923"];
2577 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 723924"];
2578 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 723925"];
2579 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 723926"];
2580 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 723927"];
2581 [label="param ReportUseSiteDiagnostics(Symbol symbol) 723928"];
2582 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 723929"];
2583 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 723930"];
2584 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 723931"];
2585 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 723932"];
2586 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 723933"];
2587 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 723934"];
2588 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723935"];
2589 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723936"];
2590 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723937"];
2591 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723938"];
2592 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 723939"];
2593 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 723940"];
2594 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 723941"];
2595 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 723942"];
2596 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 723943"];
2597 [label="param CheckRuntimeSupportForSymbolAccess(this) 723944"];
2598 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 723945"];
2599 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 723946"];
2600 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 723947"];
2601 [label="this.Clear(); 723948"];
2602 [label="result.Free(); 723949"];
2603 [label="if (symbol is null)\n                {\n                    return default;\n                } 723950"];
2604 [label="Debug.Assert(typeWithAnnotations.HasType); 723951"];
2605 [label="_symbol = null; 723952"];
2606 [label="_symbol 723953"];
2607 [label="_isNullableEnabled = false; 723954"];
2608 [label="_isNullableEnabled 723955"];
2609 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723956"];
2610 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 723957"];
2611 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723958"];
2612 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723959"];
2613 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723960"];
2614 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723961"];
2615 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723962"];
2616 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723963"];
2617 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723964"];
2618 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723965"];
2619 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 723966"];
2620 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723967"];
2621 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723968"];
2622 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723969"];
2623 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 723970"];
2624 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 723971"];
2625 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 723972"];
2626 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 723973"];
2627 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 723974"];
2628 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 723975"];
2629 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 723976"];
2630 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 723977"];
2631 [label="RoslynDebug.Assert(diagnostics != null); 723978"];
2632 [label="RoslynDebug.Assert(diagnostics != null); 723979"];
2633 [label="DiagnosticInfo? info = null; 723980"];
2634 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 723981"];
2635 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 723982"];
2636 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 723983"];
2637 [label="return kind; 723984"];
2638 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 723985"];
2639 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 723986"];
2640 [label="=> _symbol?.Kind == SymbolKind.Alias 723987"];
2641 [label="_symbol 723988"];
2642 [label="_symbol?.Kind == SymbolKind.Alias 723989"];
2643 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 723990"];
2644 [label="param TypeConversions(AssemblySymbol corLibrary) 723991"];
2645 [label="param TypeConversions(bool includeNullability = false) 723992"];
2646 [label="param TypeConversions(this) 723993"];
2647 [label="corLibrary 723994"];
2648 [label="0 723995"];
2649 [label="includeNullability 723996"];
2650 [label="null 723997"];
2651 [label="param TypeConversions(this) 723998"];
2652 [label="param TypeConversions(AssemblySymbol corLibrary) 723999"];
2653 [label="param TypeConversions(int currentRecursionDepth) 724000"];
2654 [label="param TypeConversions(bool includeNullability) 724001"];
2655 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 724002"];
2656 [label="param TypeConversions(this) 724003"];
2657 [label="50 724004"];
2658 [label="MaximumRecursionDepth = 50 724005"];
2659 [label="false 724006"];
2660 [label="F = false 724007"];
2661 [label="true 724008"];
2662 [label="T = true 724009"];
2663 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 724010"];
2664 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 724011"];
2665 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 724012"];
2666 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 724013"];
2667 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 724014"];
2668 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 724015"];
2669 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 724016"];
2670 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 724017"];
2671 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 724018"];
2672 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 724019"];
2673 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 724020"];
2674 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 724021"];
2675 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 724022"];
2676 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 724023"];
2677 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 724024"];
2678 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 724025"];
2679 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 724026"];
2680 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 724027"];
2681 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724028"];
2682 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724029"];
2683 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724030"];
2684 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724031"];
2685 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724032"];
2686 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724033"];
2687 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 724034"];
2688 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 724035"];
2689 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 724036"];
2690 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 724037"];
2691 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 724038"];
2692 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 724039"];
2693 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724040"];
2694 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724041"];
2695 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724042"];
2696 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724043"];
2697 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724044"];
2698 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724045"];
2699 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724046"];
2700 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724047"];
2701 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724048"];
2702 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724049"];
2703 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724050"];
2704 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724051"];
2705 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724052"];
2706 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724053"];
2707 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724054"];
2708 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724055"];
2709 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724056"];
2710 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 724057"];
2711 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 724058"];
2712 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 724059"];
2713 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 724060"];
2714 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 724061"];
2715 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 724062"];
2716 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 724063"];
2717 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 724064"];
2718 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 724065"];
2719 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 724066"];
2720 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 724067"];
2721 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 724068"];
2722 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 724069"];
2723 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 724070"];
2724 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 724071"];
2725 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 724072"];
2726 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 724073"];
2727 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 724074"];
2728 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 724075"];
2729 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 724076"];
2730 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 724077"];
2731 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 724078"];
2732 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 724079"];
2733 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 724080"];
2734 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 724081"];
2735 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 724082"];
2736 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 724083"];
2737 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 724084"];
2738 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 724085"];
2739 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 724086"];
2740 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 724087"];
2741 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 724088"];
2742 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 724089"];
2743 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 724090"];
2744 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 724091"];
2745 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 724092"];
2746 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 724093"];
2747 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724094"];
2748 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724095"];
2749 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724096"];
2750 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724097"];
2751 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724098"];
2752 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724099"];
2753 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724100"];
2754 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724101"];
2755 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724102"];
2756 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724103"];
2757 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724104"];
2758 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724105"];
2759 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724106"];
2760 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 724107"];
2761 [label="corLibrary 724108"];
2762 [label="currentRecursionDepth 724109"];
2763 [label="includeNullability 724110"];
2764 [label="otherNullabilityOpt 724111"];
2765 [label="param TypeConversions(this) 724112"];
2766 [label="param ConversionsBase(AssemblySymbol corLibrary) 724113"];
2767 [label="param ConversionsBase(int currentRecursionDepth) 724114"];
2768 [label="param ConversionsBase(bool includeNullability) 724115"];
2769 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 724116"];
2770 [label="param ConversionsBase(this) 724117"];
2771 [label="corLibrary 724118"];
2772 [label="currentRecursionDepth 724119"];
2773 [label="IncludeNullability 724120"];
2774 [label="_lazyOtherNullability 724121"];
2775 [label="Debug.Assert((object)corLibrary != null); 724122"];
2776 [label="Debug.Assert((object)corLibrary != null); 724123"];
2777 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 724124"];
2778 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 724125"];
2779 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 724126"];
2780 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 724127"];
2781 [label="this.corLibrary 724128"];
2782 [label="this.currentRecursionDepth 724129"];
2783 [label="IncludeNullability 724130"];
2784 [label="_lazyOtherNullability 724131"];
2785 [label="var diagnostics = c.GetDiagnostics(); 724132"];
2786 [label="Debug.Assert(node != null); 724133"];
2787 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 724134"];
2788 [label="NodeUsage extraInfo = NodeUsage.Normal; 724135"];
2789 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 724136"];
2790 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 724137"];
2791 [label="SyntaxToken token; 724138"];
2792 [label="token 724139"];
2793 [label="syntaxTree 724140"];
2794 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 724141"];
2795 [label="return _factory._syntaxTree; 724142"];
2796 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 724143"];
2797 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 724144"];
2798 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 724145"];
2799 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 724146"];
2800 [label="new InContainerBinder(typeSymbol, resultBinder) 724147"];
2801 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 724148"];
2802 [label="param InContainerBinder(Binder next) 724149"];
2803 [label="param InContainerBinder(Imports imports = null) 724150"];
2804 [label="param InContainerBinder(this) 724151"];
2805 [label="next 724152"];
2806 [label="param InContainerBinder(this) 724153"];
2807 [label="param Binder(Binder next) 724154"];
2808 [label="RoslynDebug.Assert(next != null); 724155"];
2809 [label="RoslynDebug.Assert(next != null); 724156"];
2810 [label="_container 724157"];
2811 [label="_computeImports 724158"];
2812 [label="Debug.Assert((object)container != null || imports != null); 724159"];
2813 [label="Debug.Assert((object)container != null || imports != null); 724160"];
2814 [label="_container 724161"];
2815 [label="_lazyImports = imports ?? Imports.Empty; 724162"];
2816 [label="_lazyImports = imports ?? Imports.Empty; 724163"];
2817 [label="_lazyImports 724164"];
2818 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 724165"];
2819 [label="binderCache.TryAdd(key, resultBinder); 724166"];
2820 [label="param WithAdditionalFlags(BinderFlags flags) 724167"];
2821 [label="param WithAdditionalFlags(this) 724168"];
2822 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 724169"];
2823 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 724170"];
2824 [label="this.Flags.Includes(flags) 724171"];
2825 [label="param Includes(this BinderFlags self) 724172"];
2826 [label="param Includes(BinderFlags other) 724173"];
2827 [label="return (self & other) == other; 724174"];
2828 [label="new Binder(this, this.Flags | flags) 724175"];
2829 [label="RoslynDebug.Assert(next != null); 724176"];
2830 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724177"];
2831 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724178"];
2832 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 724179"];
2833 [label="param Includes(this BinderFlags self) 724180"];
2834 [label="param Includes(BinderFlags other) 724181"];
2835 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724182"];
2836 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724183"];
2837 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 724184"];
2838 [label="param Includes(this BinderFlags self) 724185"];
2839 [label="param Includes(BinderFlags other) 724186"];
2840 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 724187"];
2841 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724188"];
2842 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 724189"];
2843 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 724190"];
2844 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 724191"];
2845 [label="param CreateErrorIfLookupOnTypeParameter(string name) 724192"];
2846 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 724193"];
2847 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 724194"];
2848 [label="param CreateErrorIfLookupOnTypeParameter(this) 724195"];
2849 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 724196"];
2850 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 724197"];
2851 [label="return null; 724198"];
2852 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724199"];
2853 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 724200"];
2854 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 724201"];
2855 [label="instance.IsClear 724202"];
2856 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724203"];
2857 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724204"];
2858 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724205"];
2859 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724206"];
2860 [label="Debug.Assert(instance.IsClear); 724207"];
2861 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 724208"];
2862 [label="param LookupSymbolsSimpleName(bool diagnose) 724209"];
2863 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 724210"];
2864 [label="param LookupSymbolsInternal(bool diagnose) 724211"];
2865 [label="result.IsClear 724212"];
2866 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724213"];
2867 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724214"];
2868 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724215"];
2869 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724216"];
2870 [label="Debug.Assert(result.IsClear); 724217"];
2871 [label="Debug.Assert(options.AreValid()); 724218"];
2872 [label="options.AreValid() 724219"];
2873 [label="param AreValid(this LookupOptions options) 724220"];
2874 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 724221"];
2875 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724222"];
2876 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724223"];
2877 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724224"];
2878 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 724225"];
2879 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724226"];
2880 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724227"];
2881 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724228"];
2882 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724229"];
2883 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724230"];
2884 [label="return OnlyOneBitSet(onlyOptions); 724231"];
2885 [label="OnlyOneBitSet(onlyOptions) 724232"];
2886 [label="param OnlyOneBitSet(LookupOptions o) 724233"];
2887 [label="return (o & (o - 1)) == 0; 724234"];
2888 [label="return (o & (o - 1)) == 0; 724235"];
2889 [label="param LookupSymbolsInSingleBinder(LookupResult result) 724236"];
2890 [label="param LookupSymbolsInSingleBinder(string name) 724237"];
2891 [label="param LookupSymbolsInSingleBinder(int arity) 724238"];
2892 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 724239"];
2893 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 724240"];
2894 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 724241"];
2895 [label="param LookupSymbolsInSingleBinder(bool diagnose) 724242"];
2896 [label="param LookupSymbolsInSingleBinder(this) 724243"];
2897 [label="result.IsClear 724244"];
2898 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724245"];
2899 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724246"];
2900 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724247"];
2901 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724248"];
2902 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 724249"];
2903 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 724250"];
2904 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 724251"];
2905 [label="param LookupSymbolsInSingleBinder(bool diagnose) 724252"];
2906 [label="result.IsClear 724253"];
2907 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724254"];
2908 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724255"];
2909 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724256"];
2910 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724257"];
2911 [label="Debug.Assert(result.IsClear); 724258"];
2912 [label="IsSubmissionClass 724259"];
2913 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 724260"];
2914 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 724261"];
2915 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 724262"];
2916 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 724263"];
2917 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 724264"];
2918 [label="param LookupMembersInternal(bool diagnose) 724265"];
2919 [label="param LookupMembersInternal(this) 724266"];
2920 [label="Debug.Assert(options.AreValid()); 724267"];
2921 [label="options.AreValid() 724268"];
2922 [label="param AreValid(this LookupOptions options) 724269"];
2923 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 724270"];
2924 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724271"];
2925 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724272"];
2926 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724273"];
2927 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 724274"];
2928 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724275"];
2929 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724276"];
2930 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724277"];
2931 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724278"];
2932 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724279"];
2933 [label="return OnlyOneBitSet(onlyOptions); 724280"];
2934 [label="OnlyOneBitSet(onlyOptions) 724281"];
2935 [label="param OnlyOneBitSet(LookupOptions o) 724282"];
2936 [label="return (o & (o - 1)) == 0; 724283"];
2937 [label="return (o & (o - 1)) == 0; 724284"];
2938 [label="Debug.Assert(arity >= 0); 724285"];
2939 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724286"];
2940 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724287"];
2941 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724288"];
2942 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724289"];
2943 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 724290"];
2944 [label="param LookupMembersInType(LookupResult result) 724291"];
2945 [label="param LookupMembersInType(TypeSymbol type) 724292"];
2946 [label="param LookupMembersInType(string name) 724293"];
2947 [label="param LookupMembersInType(int arity) 724294"];
2948 [label="param LookupMembersInType(ConsList<TypeSymbol> basesBeingResolved) 724295"];
2949 [label="param LookupMembersInType(LookupOptions options) 724296"];
2950 [label="param LookupMembersInType(Binder originalBinder) 724297"];
2951 [label="param LookupMembersInType(bool diagnose) 724298"];
2952 [label="param LookupMembersInType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724299"];
2953 [label="param LookupMembersInType(this) 724300"];
2954 [label="switch (type.TypeKind)\n            {\n                case TypeKind.TypeParameter:\n                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Interface:\n                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Array:\n                case TypeKind.Dynamic:\n                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Submission:\n                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Error:\n                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Pointer:\n                case TypeKind.FunctionPointer:\n                    result.Clear();\n                    break;\n\n                case TypeKind.Unknown:\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 724301"];
2955 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724302"];
2956 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724303"];
2957 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724304"];
2958 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724305"];
2959 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724306"];
2960 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724307"];
2961 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724308"];
2962 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724309"];
2963 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724310"];
2964 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 724311"];
2965 [label="param LookupMembersInClass(LookupResult result) 724312"];
2966 [label="param LookupMembersInClass(TypeSymbol type) 724313"];
2967 [label="param LookupMembersInClass(string name) 724314"];
2968 [label="param LookupMembersInClass(int arity) 724315"];
2969 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 724316"];
2970 [label="param LookupMembersInClass(LookupOptions options) 724317"];
2971 [label="param LookupMembersInClass(Binder originalBinder) 724318"];
2972 [label="param LookupMembersInClass(bool diagnose) 724319"];
2973 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724320"];
2974 [label="param LookupMembersInClass(this) 724321"];
2975 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724322"];
2976 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724323"];
2977 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724324"];
2978 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724325"];
2979 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724326"];
2980 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724327"];
2981 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724328"];
2982 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724329"];
2983 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724330"];
2984 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 724331"];
2985 [label="param LookupMembersInClass(LookupResult result) 724332"];
2986 [label="param LookupMembersInClass(TypeSymbol type) 724333"];
2987 [label="param LookupMembersInClass(string name) 724334"];
2988 [label="param LookupMembersInClass(int arity) 724335"];
2989 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 724336"];
2990 [label="param LookupMembersInClass(LookupOptions options) 724337"];
2991 [label="param LookupMembersInClass(Binder originalBinder) 724338"];
2992 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 724339"];
2993 [label="param LookupMembersInClass(bool diagnose) 724340"];
2994 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724341"];
2995 [label="param LookupMembersInClass(this) 724342"];
2996 [label="Debug.Assert((object)type != null); 724343"];
2997 [label="Debug.Assert((object)type != null); 724344"];
2998 [label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 724345"];
2999 [label="TypeSymbol currentType = type; 724346"];
3000 [label="LookupResult.GetInstance() 724347"];
3001 [label="var instance = s_poolInstance.Allocate(); 724348"];
3002 [label="instance.IsClear 724349"];
3003 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724350"];
3004 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724351"];
3005 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724352"];
3006 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724353"];
3007 [label="Debug.Assert(instance.IsClear); 724354"];
3008 [label="var tmp = LookupResult.GetInstance(); 724355"];
3009 [label="PooledHashSet<NamedTypeSymbol> visited = null; 724356"];
3010 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 724357"];
3011 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 724358"];
3012 [label="tmp.Clear() 724359"];
3013 [label="param Clear(this) 724360"];
3014 [label="tmp.Clear(); 724361"];
3015 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724362"];
3016 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724363"];
3017 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724364"];
3018 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724365"];
3019 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724366"];
3020 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724367"];
3021 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724368"];
3022 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724369"];
3023 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724370"];
3024 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724371"];
3025 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 724372"];
3026 [label="param LookupMembersWithoutInheritance(LookupResult result) 724373"];
3027 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 724374"];
3028 [label="param LookupMembersWithoutInheritance(string name) 724375"];
3029 [label="param LookupMembersWithoutInheritance(int arity) 724376"];
3030 [label="param LookupMembersWithoutInheritance(LookupOptions options) 724377"];
3031 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 724378"];
3032 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724379"];
3033 [label="param LookupMembersWithoutInheritance(bool diagnose) 724380"];
3034 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724381"];
3035 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 724382"];
3036 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 724383"];
3037 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 724384"];
3038 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 724385"];
3039 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 724386"];
3040 [label="GetCandidateMembers(type, name, options, originalBinder) 724387"];
3041 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 724388"];
3042 [label="param GetCandidateMembers(string name) 724389"];
3043 [label="param GetCandidateMembers(LookupOptions options) 724390"];
3044 [label="param GetCandidateMembers(Binder originalBinder) 724391"];
3045 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 724392"];
3046 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 724393"];
3047 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 724394"];
3048 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 724395"];
3049 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724396"];
3050 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724397"];
3051 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724398"];
3052 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724399"];
3053 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724400"];
3054 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724401"];
3055 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724402"];
3056 [label="param MergePrioritized(LookupResult other) 724403"];
3057 [label="param MergePrioritized(this) 724404"];
3058 [label="other.Kind 724405"];
3059 [label="get\n            {\n                return _kind;\n            } 724406"];
3060 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724407"];
3061 [label="Kind 724408"];
3062 [label="get\n            {\n                return _kind;\n            } 724409"];
3063 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724410"];
3064 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724411"];
3065 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 724412"];
3066 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 724413"];
3067 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 724414"];
3068 [label="tmp.IsMultiViable 724415"];
3069 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 724416"];
3070 [label="return _kind; 724417"];
3071 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 724418"];
3072 [label="result.IsMultiViable 724419"];
3073 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 724420"];
3074 [label="return _kind; 724421"];
3075 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 724422"];
3076 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 724423"];
3077 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 724424"];
3078 [label="originalBinder.InCrefButNotParameterOrReturnType 724425"];
3079 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 724426"];
3080 [label="InCref 724427"];
3081 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 724428"];
3082 [label="return this.Flags.Includes(BinderFlags.Cref); 724429"];
3083 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 724430"];
3084 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 724431"];
3085 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724432"];
3086 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724433"];
3087 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724434"];
3088 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724435"];
3089 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724436"];
3090 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 724437"];
3091 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 724438"];
3092 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 724439"];
3093 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 724440"];
3094 [label="tmp.Clear(); 724441"];
3095 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724442"];
3096 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724443"];
3097 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724444"];
3098 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724445"];
3099 [label="param LookupMembersWithoutInheritance(LookupResult result) 724446"];
3100 [label="param LookupMembersWithoutInheritance(int arity) 724447"];
3101 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 724448"];
3102 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724449"];
3103 [label="param LookupMembersWithoutInheritance(bool diagnose) 724450"];
3104 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 724451"];
3105 [label="param GetCandidateMembers(Binder originalBinder) 724452"];
3106 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 724453"];
3107 [label="param MergePrioritized(LookupResult other) 724454"];
3108 [label="param MergePrioritized(this) 724455"];
3109 [label="other.Kind 724456"];
3110 [label="get\n            {\n                return _kind;\n            } 724457"];
3111 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724458"];
3112 [label="Kind 724459"];
3113 [label="get\n            {\n                return _kind;\n            } 724460"];
3114 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724461"];
3115 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724462"];
3116 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 724463"];
3117 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 724464"];
3118 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 724465"];
3119 [label="tmp.IsMultiViable 724466"];
3120 [label="return _kind; 724467"];
3121 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 724468"];
3122 [label="result.IsMultiViable 724469"];
3123 [label="return _kind; 724470"];
3124 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 724471"];
3125 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 724472"];
3126 [label="originalBinder.InCrefButNotParameterOrReturnType 724473"];
3127 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 724474"];
3128 [label="InCref 724475"];
3129 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 724476"];
3130 [label="return this.Flags.Includes(BinderFlags.Cref); 724477"];
3131 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 724478"];
3132 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 724479"];
3133 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 724480"];
3134 [label="visited?.Free(); 724481"];
3135 [label="tmp.Free() 724482"];
3136 [label="param Free(this) 724483"];
3137 [label="_symbolList.Clear(); 724484"];
3138 [label="this.Clear(); 724485"];
3139 [label="tmp.Free(); 724486"];
3140 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724487"];
3141 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724488"];
3142 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724489"];
3143 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724490"];
3144 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724491"];
3145 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 724492"];
3146 [label="param LookupSymbol(Binder originalBinder) 724493"];
3147 [label="param LookupSymbol(LookupResult result) 724494"];
3148 [label="param LookupSymbol(string name) 724495"];
3149 [label="param LookupSymbol(int arity) 724496"];
3150 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 724497"];
3151 [label="param LookupSymbol(LookupOptions options) 724498"];
3152 [label="param LookupSymbol(bool diagnose) 724499"];
3153 [label="param LookupSymbol(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724500"];
3154 [label="param LookupSymbol(this) 724501"];
3155 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724502"];
3156 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724503"];
3157 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724504"];
3158 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724505"];
3159 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724506"];
3160 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724507"];
3161 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724508"];
3162 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724509"];
3163 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 724510"];
3164 [label="param LookupSymbolInAliases(Binder originalBinder) 724511"];
3165 [label="param LookupSymbolInAliases(LookupResult result) 724512"];
3166 [label="param LookupSymbolInAliases(string name) 724513"];
3167 [label="param LookupSymbolInAliases(int arity) 724514"];
3168 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 724515"];
3169 [label="param LookupSymbolInAliases(LookupOptions options) 724516"];
3170 [label="param LookupSymbolInAliases(bool diagnose) 724517"];
3171 [label="param LookupSymbolInAliases(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724518"];
3172 [label="param LookupSymbolInAliases(this) 724519"];
3173 [label="originalBinder.IsSemanticModelBinder 724520"];
3174 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 724521"];
3175 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 724522"];
3176 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 724523"];
3177 [label="this.Flags.Includes(BinderFlags.SemanticModel) 724524"];
3178 [label="param Includes(this BinderFlags self) 724525"];
3179 [label="param Includes(BinderFlags other) 724526"];
3180 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 724527"];
3181 [label="AliasAndUsingDirective alias; 724528"];
3182 [label="alias 724529"];
3183 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 724530"];
3184 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 724531"];
3185 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 724532"];
3186 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 724533"];
3187 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724534"];
3188 [label="result.IsMultiViable 724535"];
3189 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 724536"];
3190 [label="return _kind; 724537"];
3191 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 724538"];
3192 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 724539"];
3193 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 724540"];
3194 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 724541"];
3195 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724542"];
3196 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724543"];
3197 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724544"];
3198 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724545"];
3199 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724546"];
3200 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724547"];
3201 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724548"];
3202 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724549"];
3203 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724550"];
3204 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 724551"];
3205 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 724552"];
3206 [label="param LookupSymbolInUsings(Binder originalBinder) 724553"];
3207 [label="param LookupSymbolInUsings(LookupResult result) 724554"];
3208 [label="param LookupSymbolInUsings(string name) 724555"];
3209 [label="param LookupSymbolInUsings(int arity) 724556"];
3210 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 724557"];
3211 [label="param LookupSymbolInUsings(LookupOptions options) 724558"];
3212 [label="param LookupSymbolInUsings(bool diagnose) 724559"];
3213 [label="param LookupSymbolInUsings(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724560"];
3214 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 724561"];
3215 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 724562"];
3216 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 724563"];
3217 [label="param Includes(this BinderFlags self) 724564"];
3218 [label="param Includes(BinderFlags other) 724565"];
3219 [label="originalBinder.IsSemanticModelBinder 724566"];
3220 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 724567"];
3221 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 724568"];
3222 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 724569"];
3223 [label="this.Flags.Includes(BinderFlags.SemanticModel) 724570"];
3224 [label="param Includes(this BinderFlags self) 724571"];
3225 [label="param Includes(BinderFlags other) 724572"];
3226 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 724573"];
3227 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 724574"];
3228 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724575"];
3229 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724576"];
3230 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724577"];
3231 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 724578"];
3232 [label="result.IsClear 724579"];
3233 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724580"];
3234 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724581"];
3235 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724582"];
3236 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724583"];
3237 [label="Debug.Assert(result.IsClear); 724584"];
3238 [label="IsSubmissionClass 724585"];
3239 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 724586"];
3240 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 724587"];
3241 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 724588"];
3242 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 724589"];
3243 [label="param LookupMembersInternal(bool diagnose) 724590"];
3244 [label="Debug.Assert(options.AreValid()); 724591"];
3245 [label="options.AreValid() 724592"];
3246 [label="param AreValid(this LookupOptions options) 724593"];
3247 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 724594"];
3248 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724595"];
3249 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724596"];
3250 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724597"];
3251 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 724598"];
3252 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724599"];
3253 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724600"];
3254 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724601"];
3255 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724602"];
3256 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724603"];
3257 [label="return OnlyOneBitSet(onlyOptions); 724604"];
3258 [label="OnlyOneBitSet(onlyOptions) 724605"];
3259 [label="param OnlyOneBitSet(LookupOptions o) 724606"];
3260 [label="return (o & (o - 1)) == 0; 724607"];
3261 [label="return (o & (o - 1)) == 0; 724608"];
3262 [label="Debug.Assert(arity >= 0); 724609"];
3263 [label="param LookupMembersInNamespace(bool diagnose) 724610"];
3264 [label="param GetCandidateMembers(Binder originalBinder) 724611"];
3265 [label="param CheckViability(int arity) 724612"];
3266 [label="param CheckViability(TypeSymbol accessThroughType) 724613"];
3267 [label="param CheckViability(bool diagnose) 724614"];
3268 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 724615"];
3269 [label="bool inaccessibleViaQualifier; 724616"];
3270 [label="DiagnosticInfo diagInfo; 724617"];
3271 [label="param WrongArity(Symbol symbol) 724618"];
3272 [label="param WrongArity(int arity) 724619"];
3273 [label="param WrongArity(bool diagnose) 724620"];
3274 [label="param WrongArity(LookupOptions options) 724621"];
3275 [label="param WrongArity(out DiagnosticInfo diagInfo) 724622"];
3276 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 724623"];
3277 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 724624"];
3278 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 724625"];
3279 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 724626"];
3280 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 724627"];
3281 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 724628"];
3282 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 724629"];
3283 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 724630"];
3284 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 724631"];
3285 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 724632"];
3286 [label="options.IsAttributeTypeLookup() 724633"];
3287 [label="param IsAttributeTypeLookup(this LookupOptions options) 724634"];
3288 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 724635"];
3289 [label="diagInfo = null; 724636"];
3290 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 724637"];
3291 [label="RefineAccessThroughType(options, accessThroughType) 724638"];
3292 [label="param RefineAccessThroughType(LookupOptions options) 724639"];
3293 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 724640"];
3294 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 724641"];
3295 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 724642"];
3296 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 724643"];
3297 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 724644"];
3298 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 724645"];
3299 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 724646"];
3300 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 724647"];
3301 [label="param IsAccessible(TypeSymbol accessThroughType) 724648"];
3302 [label="param IsAccessible(out bool failedThroughTypeCheck) 724649"];
3303 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 724650"];
3304 [label="param IsAccessible(this) 724651"];
3305 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 724652"];
3306 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 724653"];
3307 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 724654"];
3308 [label="param Includes(this BinderFlags self) 724655"];
3309 [label="param Includes(BinderFlags other) 724656"];
3310 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 724657"];
3311 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 724658"];
3312 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 724659"];
3313 [label="param IsAccessibleHelper(this) 724660"];
3314 [label="param IsAccessibleHelper(Symbol symbol) 724661"];
3315 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 724662"];
3316 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 724663"];
3317 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 724664"];
3318 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 724665"];
3319 [label="param IsAccessibleHelper(this) 724666"];
3320 [label="var type = _container as NamedTypeSymbol; 724667"];
3321 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 724668"];
3322 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 724669"];
3323 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724670"];
3324 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724671"];
3325 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724672"];
3326 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724673"];
3327 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724674"];
3328 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724675"];
3329 [label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 724676"];
3330 [label="param IsSymbolAccessibleConditional(Symbol symbol) 724677"];
3331 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 724678"];
3332 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 724679"];
3333 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 724680"];
3334 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 724681"];
3335 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 724682"];
3336 [label="param IsSymbolAccessibleConditional(this) 724683"];
3337 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 724684"];
3338 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 724685"];
3339 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 724686"];
3340 [label="param Includes(this BinderFlags self) 724687"];
3341 [label="param Includes(BinderFlags other) 724688"];
3342 [label="param IsSymbolAccessible(NamedTypeSymbol within) 724689"];
3343 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 724690"];
3344 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 724691"];
3345 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 724692"];
3346 [label="param IsSymbolAccessibleCore(Symbol within) 724693"];
3347 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 724694"];
3348 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 724695"];
3349 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 724696"];
3350 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 724697"];
3351 [label="Debug.Assert((object)symbol != null); 724698"];
3352 [label="Debug.Assert((object)symbol != null); 724699"];
3353 [label="Debug.Assert((object)within != null); 724700"];
3354 [label="Debug.Assert((object)within != null); 724701"];
3355 [label="Debug.Assert(within.IsDefinition); 724702"];
3356 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 724703"];
3357 [label="failedThroughTypeCheck = false; 724704"];
3358 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 724705"];
3359 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 724706"];
3360 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 724707"];
3361 [label="param IsNamedTypeAccessible(Symbol within) 724708"];
3362 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 724709"];
3363 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 724710"];
3364 [label="Debug.Assert((object)type != null); 724711"];
3365 [label="var compilation = within.DeclaringCompilation; 724712"];
3366 [label="bool unused; 724713"];
3367 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 724714"];
3368 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 724715"];
3369 [label="param IsNonNestedTypeAccessible(Symbol within) 724716"];
3370 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 724717"];
3371 [label="Debug.Assert((object)assembly != null); 724718"];
3372 [label="Debug.Assert((object)assembly != null); 724719"];
3373 [label="originalBinder.IsSemanticModelBinder 724720"];
3374 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 724721"];
3375 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 724722"];
3376 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 724723"];
3377 [label="this.Flags.Includes(BinderFlags.SemanticModel) 724724"];
3378 [label="param Includes(this BinderFlags self) 724725"];
3379 [label="param Includes(BinderFlags other) 724726"];
3380 [label="param IsUsingAlias(bool callerIsSemanticModel) 724727"];
3381 [label="return false; 724728"];
3382 [label="return; 724729"];
3383 [label="result.IsClear 724730"];
3384 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724731"];
3385 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724732"];
3386 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 724733"];
3387 [label="binder = scope; 724734"];
3388 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 724735"];
3389 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 724736"];
3390 [label="return binder; 724737"];
3391 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 724738"];
3392 [label="IsViableType(result) 724739"];
3393 [label="param IsViableType(LookupResult result) 724740"];
3394 [label="result.IsMultiViable 724741"];
3395 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 724742"];
3396 [label="return _kind; 724743"];
3397 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 724744"];
3398 [label="result.Symbols 724745"];
3399 [label="get\n            {\n                return _symbolList;\n            } 724746"];
3400 [label="return _symbolList; 724747"];
3401 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 724748"];
3402 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 724749"];
3403 [label="return true; 724750"];
3404 [label="bool wasError; 724751"];
3405 [label="param ResultSymbol(string simpleName) 724752"];
3406 [label="param ResultSymbol(int arity) 724753"];
3407 [label="param ResultSymbol(SyntaxNode where) 724754"];
3408 [label="param ResultSymbol(DiagnosticBag diagnostics) 724755"];
3409 [label="param ResultSymbol(out bool wasError) 724756"];
3410 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 724757"];
3411 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 724758"];
3412 [label="param ResultSymbol(this) 724759"];
3413 [label="Debug.Assert(where != null); 724760"];
3414 [label="Debug.Assert(where != null); 724761"];
3415 [label="Debug.Assert(diagnostics != null); 724762"];
3416 [label="Debug.Assert(diagnostics != null); 724763"];
3417 [label="wasError = false; 724764"];
3418 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 724765"];
3419 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 724766"];
3420 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 724767"];
3421 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 724768"];
3422 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 724769"];
3423 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 724770"];
3424 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 724771"];
3425 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 724772"];
3426 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 724773"];
3427 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724774"];
3428 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724775"];
3429 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724776"];
3430 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724777"];
3431 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 724778"];
3432 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 724779"];
3433 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 724780"];
3434 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 724781"];
3435 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 724782"];
3436 [label="param CheckRuntimeSupportForSymbolAccess(this) 724783"];
3437 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 724784"];
3438 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 724785"];
3439 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 724786"];
3440 [label="this.Clear(); 724787"];
3441 [label="result.Free(); 724788"];
3442 [label="if (symbol is null)\n                {\n                    return default;\n                } 724789"];
3443 [label="Debug.Assert(typeWithAnnotations.HasType); 724790"];
3444 [label="_symbol = null; 724791"];
3445 [label="_symbol 724792"];
3446 [label="_isNullableEnabled = false; 724793"];
3447 [label="_isNullableEnabled 724794"];
3448 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 724795"];
3449 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 724796"];
3450 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 724797"];
3451 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 724798"];
3452 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 724799"];
3453 [label="get\n            {\n                RoslynDebug.Assert(Next is object);\n                return Next.ContainingMemberOrLambda;\n            } 724800"];
3454 [label="RoslynDebug.Assert(Next is object); 724801"];
3455 [label="Next.ContainingMemberOrLambda 724802"];
3456 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 724803"];
3457 [label="_container 724804"];
3458 [label="return Next.ContainingMemberOrLambda; 724805"];
3459 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 724806"];
3460 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 724807"];
3461 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 724808"];
3462 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 724809"];
3463 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 724810"];
3464 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 724811"];
3465 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 724812"];
3466 [label="RoslynDebug.Assert(symbol is object); 724813"];
3467 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 724814"];
3468 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 724815"];
3469 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 724816"];
3470 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 724817"];
3471 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 724818"];
3472 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 724819"];
3473 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 724820"];
3474 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 724821"];
3475 [label="RoslynDebug.Assert(diagnostics != null); 724822"];
3476 [label="RoslynDebug.Assert(diagnostics != null); 724823"];
3477 [label="DiagnosticInfo? info = null; 724824"];
3478 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 724825"];
3479 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 724826"];
3480 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 724827"];
3481 [label="return kind; 724828"];
3482 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 724829"];
3483 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 724830"];
3484 [label="=> _symbol?.Kind == SymbolKind.Alias 724831"];
3485 [label="_symbol 724832"];
3486 [label="_symbol?.Kind == SymbolKind.Alias 724833"];
3487 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 724834"];
3488 [label="RoslynDebug.Assert(next != null); 724835"];
3489 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724836"];
3490 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724837"];
3491 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 724838"];
3492 [label="param Includes(this BinderFlags self) 724839"];
3493 [label="param Includes(BinderFlags other) 724840"];
3494 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724841"];
3495 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724842"];
3496 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 724843"];
3497 [label="param Includes(this BinderFlags self) 724844"];
3498 [label="param Includes(BinderFlags other) 724845"];
3499 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 724846"];
3500 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724847"];
3501 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 724848"];
3502 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 724849"];
3503 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 724850"];
3504 [label="param CreateErrorIfLookupOnTypeParameter(string name) 724851"];
3505 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 724852"];
3506 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 724853"];
3507 [label="param CreateErrorIfLookupOnTypeParameter(this) 724854"];
3508 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 724855"];
3509 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 724856"];
3510 [label="return null; 724857"];
3511 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724858"];
3512 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 724859"];
3513 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 724860"];
3514 [label="instance.IsClear 724861"];
3515 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724862"];
3516 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724863"];
3517 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724864"];
3518 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724865"];
3519 [label="Debug.Assert(instance.IsClear); 724866"];
3520 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 724867"];
3521 [label="result.IsClear 724868"];
3522 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724869"];
3523 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724870"];
3524 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724871"];
3525 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724872"];
3526 [label="Debug.Assert(result.IsClear); 724873"];
3527 [label="Debug.Assert(options.AreValid()); 724874"];
3528 [label="options.AreValid() 724875"];
3529 [label="param AreValid(this LookupOptions options) 724876"];
3530 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 724877"];
3531 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724878"];
3532 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724879"];
3533 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724880"];
3534 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 724881"];
3535 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724882"];
3536 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724883"];
3537 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724884"];
3538 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724885"];
3539 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724886"];
3540 [label="return OnlyOneBitSet(onlyOptions); 724887"];
3541 [label="OnlyOneBitSet(onlyOptions) 724888"];
3542 [label="param OnlyOneBitSet(LookupOptions o) 724889"];
3543 [label="return (o & (o - 1)) == 0; 724890"];
3544 [label="return (o & (o - 1)) == 0; 724891"];
3545 [label="param LookupSymbolsInSingleBinder(LookupResult result) 724892"];
3546 [label="param LookupSymbolsInSingleBinder(string name) 724893"];
3547 [label="param LookupSymbolsInSingleBinder(int arity) 724894"];
3548 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 724895"];
3549 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 724896"];
3550 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 724897"];
3551 [label="param LookupSymbolsInSingleBinder(bool diagnose) 724898"];
3552 [label="param LookupSymbolsInSingleBinder(this) 724899"];
3553 [label="result.IsClear 724900"];
3554 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724901"];
3555 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724902"];
3556 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724903"];
3557 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724904"];
3558 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 724905"];
3559 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 724906"];
3560 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 724907"];
3561 [label="result.IsClear 724908"];
3562 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 724909"];
3563 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724910"];
3564 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724911"];
3565 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724912"];
3566 [label="Debug.Assert(result.IsClear); 724913"];
3567 [label="IsSubmissionClass 724914"];
3568 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 724915"];
3569 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 724916"];
3570 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 724917"];
3571 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 724918"];
3572 [label="param LookupMembersInternal(bool diagnose) 724919"];
3573 [label="Debug.Assert(options.AreValid()); 724920"];
3574 [label="options.AreValid() 724921"];
3575 [label="param AreValid(this LookupOptions options) 724922"];
3576 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 724923"];
3577 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724924"];
3578 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 724925"];
3579 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724926"];
3580 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 724927"];
3581 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724928"];
3582 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724929"];
3583 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 724930"];
3584 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724931"];
3585 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 724932"];
3586 [label="return OnlyOneBitSet(onlyOptions); 724933"];
3587 [label="OnlyOneBitSet(onlyOptions) 724934"];
3588 [label="param OnlyOneBitSet(LookupOptions o) 724935"];
3589 [label="return (o & (o - 1)) == 0; 724936"];
3590 [label="return (o & (o - 1)) == 0; 724937"];
3591 [label="Debug.Assert(arity >= 0); 724938"];
3592 [label="param LookupMembersInType(int arity) 724939"];
3593 [label="param LookupMembersInType(Binder originalBinder) 724940"];
3594 [label="param LookupMembersInType(bool diagnose) 724941"];
3595 [label="param LookupMembersInClass(int arity) 724942"];
3596 [label="param LookupMembersInClass(Binder originalBinder) 724943"];
3597 [label="param LookupMembersInClass(bool diagnose) 724944"];
3598 [label="param LookupMembersInClass(int arity) 724945"];
3599 [label="param LookupMembersInClass(Binder originalBinder) 724946"];
3600 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 724947"];
3601 [label="param LookupMembersInClass(bool diagnose) 724948"];
3602 [label="Debug.Assert((object)type != null); 724949"];
3603 [label="tmp.Clear(); 724950"];
3604 [label="param LookupMembersWithoutInheritance(LookupResult result) 724951"];
3605 [label="param LookupMembersWithoutInheritance(int arity) 724952"];
3606 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 724953"];
3607 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724954"];
3608 [label="param LookupMembersWithoutInheritance(bool diagnose) 724955"];
3609 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 724956"];
3610 [label="param GetCandidateMembers(Binder originalBinder) 724957"];
3611 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 724958"];
3612 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724959"];
3613 [label="param MergePrioritized(LookupResult other) 724960"];
3614 [label="param MergePrioritized(this) 724961"];
3615 [label="other.Kind 724962"];
3616 [label="get\n            {\n                return _kind;\n            } 724963"];
3617 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724964"];
3618 [label="Kind 724965"];
3619 [label="get\n            {\n                return _kind;\n            } 724966"];
3620 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724967"];
3621 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 724968"];
3622 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 724969"];
3623 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 724970"];
3624 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 724971"];
3625 [label="tmp.IsMultiViable 724972"];
3626 [label="return _kind; 724973"];
3627 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 724974"];
3628 [label="result.IsMultiViable 724975"];
3629 [label="return _kind; 724976"];
3630 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 724977"];
3631 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 724978"];
3632 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 724979"];
3633 [label="originalBinder.InCrefButNotParameterOrReturnType 724980"];
3634 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 724981"];
3635 [label="InCref 724982"];
3636 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 724983"];
3637 [label="return this.Flags.Includes(BinderFlags.Cref); 724984"];
3638 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 724985"];
3639 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 724986"];
3640 [label="tmp.Clear(); 724987"];
3641 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724988"];
3642 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724989"];
3643 [label="param LookupMembersWithoutInheritance(LookupResult result) 724990"];
3644 [label="param LookupMembersWithoutInheritance(int arity) 724991"];
3645 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 724992"];
3646 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724993"];
3647 [label="param LookupMembersWithoutInheritance(bool diagnose) 724994"];
3648 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 724995"];
3649 [label="param GetCandidateMembers(Binder originalBinder) 724996"];
3650 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 724997"];
3651 [label="param MergePrioritized(LookupResult other) 724998"];
3652 [label="param MergePrioritized(this) 724999"];
3653 [label="other.Kind 725000"];
3654 [label="get\n            {\n                return _kind;\n            } 725001"];
3655 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 725002"];
3656 [label="Kind 725003"];
3657 [label="get\n            {\n                return _kind;\n            } 725004"];
3658 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 725005"];
3659 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 725006"];
3660 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 725007"];
3661 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 725008"];
3662 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 725009"];
3663 [label="tmp.IsMultiViable 725010"];
3664 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 725011"];
3665 [label="result.IsMultiViable 725012"];
3666 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 725013"];
3667 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 725014"];
3668 [label="originalBinder.InCrefButNotParameterOrReturnType 725015"];
3669 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 725016"];
3670 [label="InCref 725017"];
3671 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 725018"];
3672 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 725019"];
3673 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 725020"];
3674 [label="visited?.Free(); 725021"];
3675 [label="this.Clear(); 725022"];
3676 [label="tmp.Free(); 725023"];
3677 [label="param LookupSymbol(Binder originalBinder) 725024"];
3678 [label="param LookupSymbol(int arity) 725025"];
3679 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 725026"];
3680 [label="param LookupSymbol(bool diagnose) 725027"];
3681 [label="param LookupSymbolInAliases(Binder originalBinder) 725028"];
3682 [label="param LookupSymbolInAliases(LookupResult result) 725029"];
3683 [label="param LookupSymbolInAliases(int arity) 725030"];
3684 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 725031"];
3685 [label="param LookupSymbolInAliases(LookupOptions options) 725032"];
3686 [label="param LookupSymbolInAliases(bool diagnose) 725033"];
3687 [label="originalBinder.IsSemanticModelBinder 725034"];
3688 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 725035"];
3689 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725036"];
3690 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725037"];
3691 [label="this.Flags.Includes(BinderFlags.SemanticModel) 725038"];
3692 [label="param Includes(this BinderFlags self) 725039"];
3693 [label="param Includes(BinderFlags other) 725040"];
3694 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 725041"];
3695 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 725042"];
3696 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 725043"];
3697 [label="return _kind; 725044"];
3698 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 725045"];
3699 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 725046"];
3700 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 725047"];
3701 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 725048"];
3702 [label="param LookupSymbolInUsings(Binder originalBinder) 725049"];
3703 [label="param LookupSymbolInUsings(LookupResult result) 725050"];
3704 [label="param LookupSymbolInUsings(string name) 725051"];
3705 [label="param LookupSymbolInUsings(int arity) 725052"];
3706 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 725053"];
3707 [label="param LookupSymbolInUsings(LookupOptions options) 725054"];
3708 [label="param LookupSymbolInUsings(bool diagnose) 725055"];
3709 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 725056"];
3710 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 725057"];
3711 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 725058"];
3712 [label="param Includes(this BinderFlags self) 725059"];
3713 [label="param Includes(BinderFlags other) 725060"];
3714 [label="originalBinder.IsSemanticModelBinder 725061"];
3715 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 725062"];
3716 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725063"];
3717 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725064"];
3718 [label="this.Flags.Includes(BinderFlags.SemanticModel) 725065"];
3719 [label="param Includes(this BinderFlags self) 725066"];
3720 [label="param Includes(BinderFlags other) 725067"];
3721 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 725068"];
3722 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 725069"];
3723 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725070"];
3724 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725071"];
3725 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 725072"];
3726 [label="result.IsClear 725073"];
3727 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725074"];
3728 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725075"];
3729 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725076"];
3730 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725077"];
3731 [label="Debug.Assert(result.IsClear); 725078"];
3732 [label="IsSubmissionClass 725079"];
3733 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 725080"];
3734 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 725081"];
3735 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 725082"];
3736 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 725083"];
3737 [label="Debug.Assert(options.AreValid()); 725084"];
3738 [label="options.AreValid() 725085"];
3739 [label="param AreValid(this LookupOptions options) 725086"];
3740 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 725087"];
3741 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 725088"];
3742 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 725089"];
3743 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 725090"];
3744 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 725091"];
3745 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725092"];
3746 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725093"];
3747 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725094"];
3748 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 725095"];
3749 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 725096"];
3750 [label="return OnlyOneBitSet(onlyOptions); 725097"];
3751 [label="OnlyOneBitSet(onlyOptions) 725098"];
3752 [label="param OnlyOneBitSet(LookupOptions o) 725099"];
3753 [label="return (o & (o - 1)) == 0; 725100"];
3754 [label="return (o & (o - 1)) == 0; 725101"];
3755 [label="Debug.Assert(arity >= 0); 725102"];
3756 [label="param LookupMembersInNamespace(bool diagnose) 725103"];
3757 [label="param GetCandidateMembers(Binder originalBinder) 725104"];
3758 [label="param CheckViability(TypeSymbol accessThroughType) 725105"];
3759 [label="param CheckViability(bool diagnose) 725106"];
3760 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 725107"];
3761 [label="bool inaccessibleViaQualifier; 725108"];
3762 [label="DiagnosticInfo diagInfo; 725109"];
3763 [label="param WrongArity(Symbol symbol) 725110"];
3764 [label="param WrongArity(int arity) 725111"];
3765 [label="param WrongArity(bool diagnose) 725112"];
3766 [label="param WrongArity(LookupOptions options) 725113"];
3767 [label="param WrongArity(out DiagnosticInfo diagInfo) 725114"];
3768 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 725115"];
3769 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725116"];
3770 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725117"];
3771 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725118"];
3772 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725119"];
3773 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 725120"];
3774 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725121"];
3775 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725122"];
3776 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 725123"];
3777 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 725124"];
3778 [label="options.IsAttributeTypeLookup() 725125"];
3779 [label="param IsAttributeTypeLookup(this LookupOptions options) 725126"];
3780 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 725127"];
3781 [label="diagInfo = null; 725128"];
3782 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725129"];
3783 [label="RefineAccessThroughType(options, accessThroughType) 725130"];
3784 [label="param RefineAccessThroughType(LookupOptions options) 725131"];
3785 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 725132"];
3786 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 725133"];
3787 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 725134"];
3788 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 725135"];
3789 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 725136"];
3790 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725137"];
3791 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725138"];
3792 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725139"];
3793 [label="param IsAccessible(TypeSymbol accessThroughType) 725140"];
3794 [label="param IsAccessible(out bool failedThroughTypeCheck) 725141"];
3795 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725142"];
3796 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725143"];
3797 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725144"];
3798 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725145"];
3799 [label="param Includes(this BinderFlags self) 725146"];
3800 [label="param Includes(BinderFlags other) 725147"];
3801 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725148"];
3802 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725149"];
3803 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 725150"];
3804 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725151"];
3805 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725152"];
3806 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 725153"];
3807 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 725154"];
3808 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 725155"];
3809 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 725156"];
3810 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 725157"];
3811 [label="param IsSymbolAccessibleConditional(this) 725158"];
3812 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725159"];
3813 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725160"];
3814 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725161"];
3815 [label="param Includes(this BinderFlags self) 725162"];
3816 [label="param Includes(BinderFlags other) 725163"];
3817 [label="param IsSymbolAccessible(NamedTypeSymbol within) 725164"];
3818 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 725165"];
3819 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 725166"];
3820 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725167"];
3821 [label="param IsSymbolAccessibleCore(Symbol within) 725168"];
3822 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725169"];
3823 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 725170"];
3824 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725171"];
3825 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 725172"];
3826 [label="Debug.Assert((object)symbol != null); 725173"];
3827 [label="Debug.Assert((object)within != null); 725174"];
3828 [label="Debug.Assert((object)within != null); 725175"];
3829 [label="Debug.Assert(within.IsDefinition); 725176"];
3830 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725177"];
3831 [label="failedThroughTypeCheck = false; 725178"];
3832 [label="param IsNamedTypeAccessible(Symbol within) 725179"];
3833 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725180"];
3834 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725181"];
3835 [label="Debug.Assert((object)type != null); 725182"];
3836 [label="var compilation = within.DeclaringCompilation; 725183"];
3837 [label="bool unused; 725184"];
3838 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 725185"];
3839 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725186"];
3840 [label="param IsNonNestedTypeAccessible(Symbol within) 725187"];
3841 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725188"];
3842 [label="Debug.Assert((object)assembly != null); 725189"];
3843 [label="Debug.Assert((object)assembly != null); 725190"];
3844 [label="originalBinder.IsSemanticModelBinder 725191"];
3845 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 725192"];
3846 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725193"];
3847 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725194"];
3848 [label="this.Flags.Includes(BinderFlags.SemanticModel) 725195"];
3849 [label="param Includes(this BinderFlags self) 725196"];
3850 [label="param Includes(BinderFlags other) 725197"];
3851 [label="param IsUsingAlias(bool callerIsSemanticModel) 725198"];
3852 [label="return false; 725199"];
3853 [label="return; 725200"];
3854 [label="result.IsClear 725201"];
3855 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725202"];
3856 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725203"];
3857 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 725204"];
3858 [label="binder = scope; 725205"];
3859 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 725206"];
3860 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 725207"];
3861 [label="return binder; 725208"];
3862 [label="diagnostics.Add(node, useSiteDiagnostics); 725209"];
3863 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 725210"];
3864 [label="IsViableType(result) 725211"];
3865 [label="param IsViableType(LookupResult result) 725212"];
3866 [label="result.IsMultiViable 725213"];
3867 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 725214"];
3868 [label="return _kind; 725215"];
3869 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 725216"];
3870 [label="result.Symbols 725217"];
3871 [label="get\n            {\n                return _symbolList;\n            } 725218"];
3872 [label="return _symbolList; 725219"];
3873 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 725220"];
3874 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 725221"];
3875 [label="return true; 725222"];
3876 [label="bool wasError; 725223"];
3877 [label="param ResultSymbol(int arity) 725224"];
3878 [label="param ResultSymbol(SyntaxNode where) 725225"];
3879 [label="param ResultSymbol(DiagnosticBag diagnostics) 725226"];
3880 [label="param ResultSymbol(out bool wasError) 725227"];
3881 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 725228"];
3882 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 725229"];
3883 [label="param ResultSymbol(this) 725230"];
3884 [label="Debug.Assert(where != null); 725231"];
3885 [label="Debug.Assert(where != null); 725232"];
3886 [label="Debug.Assert(diagnostics != null); 725233"];
3887 [label="Debug.Assert(diagnostics != null); 725234"];
3888 [label="wasError = false; 725235"];
3889 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 725236"];
3890 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 725237"];
3891 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 725238"];
3892 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 725239"];
3893 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 725240"];
3894 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 725241"];
3895 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 725242"];
3896 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725243"];
3897 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 725244"];
3898 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725245"];
3899 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725246"];
3900 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725247"];
3901 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725248"];
3902 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 725249"];
3903 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 725250"];
3904 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 725251"];
3905 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 725252"];
3906 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 725253"];
3907 [label="param CheckRuntimeSupportForSymbolAccess(this) 725254"];
3908 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 725255"];
3909 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 725256"];
3910 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 725257"];
3911 [label="result.Free(); 725258"];
3912 [label="if (symbol is null)\n                {\n                    return default;\n                } 725259"];
3913 [label="Debug.Assert(typeWithAnnotations.HasType); 725260"];
3914 [label="_symbol = null; 725261"];
3915 [label="_symbol 725262"];
3916 [label="_isNullableEnabled = false; 725263"];
3917 [label="_isNullableEnabled 725264"];
3918 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 725265"];
3919 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725266"];
3920 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725267"];
3921 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725268"];
3922 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725269"];
3923 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725270"];
3924 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 725271"];
3925 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 725272"];
3926 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725273"];
3927 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725274"];
3928 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 725275"];
3929 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 725276"];
3930 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 725277"];
3931 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 725278"];
3932 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 725279"];
3933 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 725280"];
3934 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 725281"];
3935 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 725282"];
3936 [label="RoslynDebug.Assert(diagnostics != null); 725283"];
3937 [label="RoslynDebug.Assert(diagnostics != null); 725284"];
3938 [label="DiagnosticInfo? info = null; 725285"];
3939 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 725286"];
3940 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 725287"];
3941 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 725288"];
3942 [label="return kind; 725289"];
3943 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 725290"];
3944 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 725291"];
3945 [label="=> _symbol?.Kind == SymbolKind.Alias 725292"];
3946 [label="_symbol 725293"];
3947 [label="_symbol?.Kind == SymbolKind.Alias 725294"];
3948 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 725295"];
3949 [label="Debug.Assert(node != null); 725296"];
3950 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 725297"];
3951 [label="container.AssertMemberExposure(memberOpt); 725298"];
3952 [label="container.AssertMemberExposure(memberOpt); 725299"];
3953 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 725300"];
3954 [label="param VisitMethodDeclaration(this) 725301"];
3955 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 725302"];
3956 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 725303"];
3957 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 725304"];
3958 [label="NodeUsage usage; 725305"];
3959 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 725306"];
3960 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 725307"];
3961 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 725308"];
3962 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 725309"];
3963 [label="usage = NodeUsage.Normal; 725310"];
3964 [label="var key = CreateBinderCacheKey(methodDecl, usage); 725311"];
3965 [label="var key = CreateBinderCacheKey(methodDecl, usage); 725312"];
3966 [label="CreateBinderCacheKey(methodDecl, usage) 725313"];
3967 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 725314"];
3968 [label="param CreateBinderCacheKey(NodeUsage usage) 725315"];
3969 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725316"];
3970 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725317"];
3971 [label="return new BinderCacheKey(node, usage); 725318"];
3972 [label="new BinderCacheKey(node, usage) 725319"];
3973 [label="param BinderCacheKey(this) 725320"];
3974 [label="var key = CreateBinderCacheKey(methodDecl, usage); 725321"];
3975 [label="Binder resultBinder; 725322"];
3976 [label="binderCache 725323"];
3977 [label="get\n                {\n                    return _factory._binderCache;\n                } 725324"];
3978 [label="return _factory._binderCache; 725325"];
3979 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 725326"];
3980 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 725327"];
3981 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 725328"];
3982 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 725329"];
3983 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 725330"];
3984 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 725331"];
3985 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 725332"];
3986 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 725333"];
3987 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 725334"];
3988 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 725335"];
3989 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 725336"];
3990 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 725337"];
3991 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 725338"];
3992 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725339"];
3993 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725340"];
3994 [label="SourceMemberMethodSymbol method = null; 725341"];
3995 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 725342"];
3996 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 725343"];
3997 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 725344"];
3998 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 725345"];
3999 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 725346"];
4000 [label="param WithUnsafeRegionIfNecessary(this) 725347"];
4001 [label="binderCache 725348"];
4002 [label="return _factory._binderCache; 725349"];
4003 [label="binderCache.TryAdd(key, resultBinder); 725350"];
4004 [label="binderCache.TryAdd(key, resultBinder); 725351"];
4005 [label="binderCache.TryAdd(key, resultBinder); 725352"];
4006 [label="binderCache.TryAdd(key, resultBinder); 725353"];
4007 [label="return resultBinder; 725354"];
4008 [label="return ((CSharpSyntaxNode)node).Accept(this); 725355"];
4009 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 725356"];
4010 [label="param Includes(this BinderFlags self) 725357"];
4011 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 725358"];
4012 [label="param Includes(this BinderFlags self) 725359"];
4013 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 725360"];
4014 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 725361"];
4015 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 725362"];
4016 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 725363"];
4017 [label="param ValidateParameterNameConflicts(this) 725364"];
4018 [label="PooledHashSet<string>? tpNames = null; 725365"];
4019 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 725366"];
4020 [label="PooledHashSet<string>? pNames = null; 725367"];
4021 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 725368"];
4022 [label="tpNames?.Free(); 725369"];
4023 [label="pNames?.Free(); 725370"];
4024 [label="return bindPredefined(syntax, diagnostics); 725371"];
4025 [label="return bindPredefined(syntax, diagnostics); 725372"];
4026 [label="bindPredefined(syntax, diagnostics) 725373"];
4027 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 725374"];
4028 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 725375"];
4029 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 725376"];
4030 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 725377"];
4031 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 725378"];
4032 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 725379"];
4033 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 725380"];
4034 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 725381"];
4035 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 725382"];
4036 [label="param BindPredefinedTypeSymbol(this) 725383"];
4037 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 725384"];
4038 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 725385"];
4039 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 725386"];
4040 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 725387"];
4041 [label="param GetSpecialType(SpecialType typeId) 725388"];
4042 [label="param GetSpecialType(DiagnosticBag diagnostics) 725389"];
4043 [label="param GetSpecialType(SyntaxNode node) 725390"];
4044 [label="param GetSpecialType(this) 725391"];
4045 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725392"];
4046 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725393"];
4047 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725394"];
4048 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725395"];
4049 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 725396"];
4050 [label="param GetSpecialType(CSharpCompilation compilation) 725397"];
4051 [label="param GetSpecialType(SpecialType typeId) 725398"];
4052 [label="param GetSpecialType(SyntaxNode node) 725399"];
4053 [label="param GetSpecialType(DiagnosticBag diagnostics) 725400"];
4054 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 725401"];
4055 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 725402"];
4056 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 725403"];
4057 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 725404"];
4058 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 725405"];
4059 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 725406"];
4060 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 725407"];
4061 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 725408"];
4062 [label="param ReportUseSiteDiagnostics(Symbol symbol) 725409"];
4063 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 725410"];
4064 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 725411"];
4065 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725412"];
4066 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725413"];
4067 [label="return typeSymbol; 725414"];
4068 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725415"];
4069 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 725416"];
4070 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 725417"];
4071 [label="param AreNullableAnnotationsEnabled(this) 725418"];
4072 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725419"];
4073 [label="type 725420"];
4074 [label="param operator(TypeWithAnnotations typeWithAnnotations) 725421"];
4075 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 725422"];
4076 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 725423"];
4077 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 725424"];
4078 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 725425"];
4079 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 725426"];
4080 [label="Debug.Assert(typeWithAnnotations.HasType); 725427"];
4081 [label="_symbol = null; 725428"];
4082 [label="_symbol 725429"];
4083 [label="_isNullableEnabled = false; 725430"];
4084 [label="_isNullableEnabled 725431"];
4085 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725432"];
4086 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725433"];
4087 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725434"];
4088 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 725435"];
4089 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725436"];
4090 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725437"];
4091 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725438"];
4092 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725439"];
4093 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725440"];
4094 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 725441"];
4095 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725442"];
4096 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725443"];
4097 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 725444"];
4098 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 725445"];
4099 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 725446"];
4100 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 725447"];
4101 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 725448"];
4102 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 725449"];
4103 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 725450"];
4104 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 725451"];
4105 [label="RoslynDebug.Assert(diagnostics != null); 725452"];
4106 [label="RoslynDebug.Assert(diagnostics != null); 725453"];
4107 [label="DiagnosticInfo? info = null; 725454"];
4108 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 725455"];
4109 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 725456"];
4110 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 725457"];
4111 [label="return kind; 725458"];
4112 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 725459"];
4113 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 725460"];
4114 [label="=> _symbol?.Kind == SymbolKind.Alias 725461"];
4115 [label="_symbol 725462"];
4116 [label="_symbol?.Kind == SymbolKind.Alias 725463"];
4117 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 725464"];
4118 [label="param IsSymbolAccessible(Symbol symbol) 725465"];
4119 [label="param IsSymbolAccessible(NamedTypeSymbol within) 725466"];
4120 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 725467"];
4121 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 725468"];
4122 [label="bool failedThroughTypeCheck; 725469"];
4123 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725470"];
4124 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725471"];
4125 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725472"];
4126 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725473"];
4127 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725474"];
4128 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725475"];
4129 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725476"];
4130 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 725477"];
4131 [label="param IsSymbolAccessibleCore(Symbol symbol) 725478"];
4132 [label="param IsSymbolAccessibleCore(Symbol within) 725479"];
4133 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725480"];
4134 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 725481"];
4135 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725482"];
4136 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 725483"];
4137 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 725484"];
4138 [label="Debug.Assert((object)symbol != null); 725485"];
4139 [label="Debug.Assert((object)symbol != null); 725486"];
4140 [label="Debug.Assert((object)within != null); 725487"];
4141 [label="Debug.Assert((object)within != null); 725488"];
4142 [label="Debug.Assert(within.IsDefinition); 725489"];
4143 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725490"];
4144 [label="failedThroughTypeCheck = false; 725491"];
4145 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 725492"];
4146 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 725493"];
4147 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 725494"];
4148 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725495"];
4149 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725496"];
4150 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725497"];
4151 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725498"];
4152 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725499"];
4153 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725500"];
4154 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725501"];
4155 [label="IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics) 725502"];
4156 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 725503"];
4157 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 725504"];
4158 [label="param IsMemberAccessible(Symbol within) 725505"];
4159 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 725506"];
4160 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 725507"];
4161 [label="param IsMemberAccessible(CSharpCompilation compilation) 725508"];
4162 [label="param IsMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 725509"];
4163 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725510"];
4164 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725511"];
4165 [label="Debug.Assert((object)containingType != null); 725512"];
4166 [label="Debug.Assert((object)containingType != null); 725513"];
4167 [label="failedThroughTypeCheck = false; 725514"];
4168 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 725515"];
4169 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 725516"];
4170 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 725517"];
4171 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 725518"];
4172 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 725519"];
4173 [label="IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved) 725520"];
4174 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 725521"];
4175 [label="param IsNamedTypeAccessible(Symbol within) 725522"];
4176 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 725523"];
4177 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725524"];
4178 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725525"];
4179 [label="Debug.Assert((object)type != null); 725526"];
4180 [label="Debug.Assert((object)type != null); 725527"];
4181 [label="var compilation = within.DeclaringCompilation; 725528"];
4182 [label="bool unused; 725529"];
4183 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 725530"];
4184 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 725531"];
4185 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725532"];
4186 [label="param IsNonNestedTypeAccessible(Symbol within) 725533"];
4187 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725534"];
4188 [label="Debug.Assert((object)assembly != null); 725535"];
4189 [label="Debug.Assert((object)assembly != null); 725536"];
4190 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 725537"];
4191 [label="return true; 725538"];
4192 [label="var diagnostics = c.GetDiagnostics(); 725539"];
4193 [label="param BuckStopsHereBinder(this) 725540"];
4194 [label="RoslynDebug.Assert(compilation != null); 725541"];
4195 [label="RoslynDebug.Assert(compilation != null); 725542"];
4196 [label="get\n            {\n                if (_lazyConversions == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null);\n                }\n\n                return _lazyConversions;\n            } 725543"];
4197 [label="if (_lazyConversions == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null);\n                } 725544"];
4198 [label="if (_lazyConversions == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null);\n                } 725545"];
4199 [label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725546"];
4200 [label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725547"];
4201 [label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725548"];
4202 [label="new Conversions(this) 725549"];
4203 [label="param Conversions(Binder binder) 725550"];
4204 [label="param Conversions(this) 725551"];
4205 [label="binder 725552"];
4206 [label="0 725553"];
4207 [label="false 725554"];
4208 [label="null 725555"];
4209 [label="param Conversions(this) 725556"];
4210 [label="param Conversions(Binder binder) 725557"];
4211 [label="param Conversions(int currentRecursionDepth) 725558"];
4212 [label="param Conversions(bool includeNullability) 725559"];
4213 [label="param Conversions(Conversions otherNullabilityOpt) 725560"];
4214 [label="param Conversions(this) 725561"];
4215 [label="binder.Compilation.Assembly.CorLibrary 725562"];
4216 [label="currentRecursionDepth 725563"];
4217 [label="includeNullability 725564"];
4218 [label="otherNullabilityOpt 725565"];
4219 [label="param Conversions(this) 725566"];
4220 [label="param ConversionsBase(AssemblySymbol corLibrary) 725567"];
4221 [label="param ConversionsBase(int currentRecursionDepth) 725568"];
4222 [label="param ConversionsBase(bool includeNullability) 725569"];
4223 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 725570"];
4224 [label="corLibrary 725571"];
4225 [label="currentRecursionDepth 725572"];
4226 [label="IncludeNullability 725573"];
4227 [label="_lazyOtherNullability 725574"];
4228 [label="Debug.Assert((object)corLibrary != null); 725575"];
4229 [label="Debug.Assert((object)corLibrary != null); 725576"];
4230 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725577"];
4231 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725578"];
4232 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725579"];
4233 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725580"];
4234 [label="this.currentRecursionDepth 725581"];
4235 [label="IncludeNullability 725582"];
4236 [label="_lazyOtherNullability 725583"];
4237 [label="_binder 725584"];
4238 [label="_binder 725585"];
4239 [label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725586"];
4240 [label="return _lazyConversions; 725587"];
4241 [label="param WithNullability(bool includeNullability) 725588"];
4242 [label="param WithNullability(this) 725589"];
4243 [label="if (IncludeNullability == includeNullability)\n            {\n                return this;\n            } 725590"];
4244 [label="if (_lazyOtherNullability == null)\n            {\n                Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null);\n            } 725591"];
4245 [label="if (_lazyOtherNullability == null)\n            {\n                Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null);\n            } 725592"];
4246 [label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725593"];
4247 [label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725594"];
4248 [label="WithNullabilityCore(includeNullability) 725595"];
4249 [label="param WithNullabilityCore(bool includeNullability) 725596"];
4250 [label="param WithNullabilityCore(this) 725597"];
4251 [label="Debug.Assert(IncludeNullability != includeNullability); 725598"];
4252 [label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725599"];
4253 [label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725600"];
4254 [label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725601"];
4255 [label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725602"];
4256 [label="new Conversions(_binder, currentRecursionDepth, includeNullability, this) 725603"];
4257 [label="param Conversions(Binder binder) 725604"];
4258 [label="param Conversions(int currentRecursionDepth) 725605"];
4259 [label="param Conversions(bool includeNullability) 725606"];
4260 [label="param Conversions(Conversions otherNullabilityOpt) 725607"];
4261 [label="param Conversions(this) 725608"];
4262 [label="corLibrary 725609"];
4263 [label="currentRecursionDepth 725610"];
4264 [label="IncludeNullability 725611"];
4265 [label="_lazyOtherNullability 725612"];
4266 [label="Debug.Assert((object)corLibrary != null); 725613"];
4267 [label="Debug.Assert((object)corLibrary != null); 725614"];
4268 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725615"];
4269 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725616"];
4270 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725617"];
4271 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725618"];
4272 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725619"];
4273 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725620"];
4274 [label="_binder 725621"];
4275 [label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725622"];
4276 [label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725623"];
4277 [label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725624"];
4278 [label="Debug.Assert(_lazyOtherNullability.IncludeNullability == includeNullability); 725625"];
4279 [label="Debug.Assert(_lazyOtherNullability._lazyOtherNullability == this); 725626"];
4280 [label="return _lazyOtherNullability; 725627"];
4281 [label="param ClassifyImplicitConversionFromType(TypeSymbol source) 725628"];
4282 [label="param ClassifyImplicitConversionFromType(TypeSymbol destination) 725629"];
4283 [label="param ClassifyImplicitConversionFromType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 725630"];
4284 [label="param ClassifyImplicitConversionFromType(this) 725631"];
4285 [label="Debug.Assert((object)source != null); 725632"];
4286 [label="Debug.Assert((object)source != null); 725633"];
4287 [label="Debug.Assert((object)destination != null); 725634"];
4288 [label="Debug.Assert((object)destination != null); 725635"];
4289 [label="if (HasIdentityConversionInternal(source, destination))\n            {\n                return Conversion.Identity;\n            } 725636"];
4290 [label="if (HasIdentityConversionInternal(source, destination))\n            {\n                return Conversion.Identity;\n            } 725637"];
4291 [label="HasIdentityConversionInternal(source, destination) 725638"];
4292 [label="param HasIdentityConversionInternal(TypeSymbol type1) 725639"];
4293 [label="param HasIdentityConversionInternal(TypeSymbol type2) 725640"];
4294 [label="param HasIdentityConversionInternal(this) 725641"];
4295 [label="return HasIdentityConversionInternal(type1, type2, IncludeNullability); 725642"];
4296 [label="return HasIdentityConversionInternal(type1, type2, IncludeNullability); 725643"];
4297 [label="return HasIdentityConversionInternal(type1, type2, IncludeNullability); 725644"];
4298 [label="HasIdentityConversionInternal(type1, type2, IncludeNullability) 725645"];
4299 [label="param HasIdentityConversionInternal(TypeSymbol type1) 725646"];
4300 [label="param HasIdentityConversionInternal(TypeSymbol type2) 725647"];
4301 [label="param HasIdentityConversionInternal(bool includeNullability) 725648"];
4302 [label="Debug.Assert((object)type1 != null); 725649"];
4303 [label="Debug.Assert((object)type1 != null); 725650"];
4304 [label="Debug.Assert((object)type2 != null); 725651"];
4305 [label="Debug.Assert((object)type2 != null); 725652"];
4306 [label="includeNullability 725653"];
4307 [label="var compareKind = includeNullability ?\n                TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreNullableModifiersForReferenceTypes :\n                TypeCompareKind.AllIgnoreOptions; 725654"];
4308 [label="return type1.Equals(type2, compareKind); 725655"];
4309 [label="return type1.Equals(type2, compareKind); 725656"];
4310 [label="return type1.Equals(type2, compareKind); 725657"];
4311 [label="Conversion.Identity 725658"];
4312 [label="ConversionKind.Identity 725659"];
4313 [label="new Conversion(ConversionKind.Identity) 725660"];
4314 [label="param Conversion(ConversionKind kind) 725661"];
4315 [label="param Conversion(this) 725662"];
4316 [label="kind 725663"];
4317 [label="null 725664"];
4318 [label="param Conversion(ConversionKind kind) 725665"];
4319 [label="param Conversion(UncommonData? uncommonData) 725666"];
4320 [label="param Conversion(this) 725667"];
4321 [label="_kind 725668"];
4322 [label="_uncommonData 725669"];
4323 [label="return Conversion.Identity; 725670"];
4324 [label="var diagnostics = c.GetDiagnostics(); 725671"];
4325 [label="get\n            {\n                return _kind;\n            } 725672"];
4326 [label="return _kind; 725673"];
4327 [label="Debug.Assert(node != null); 725674"];
4328 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 725675"];
4329 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725676"];
4330 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725677"];
4331 [label="SourceMemberMethodSymbol method = null; 725678"];
4332 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 725679"];
4333 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 725680"];
4334 [label="Debug.Assert((object)containing != null); 725681"];
4335 [label="RoslynDebug.Assert(next != null); 725682"];
4336 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 725683"];
4337 [label="param Includes(this BinderFlags self) 725684"];
4338 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 725685"];
4339 [label="param Includes(this BinderFlags self) 725686"];
4340 [label="Debug.Assert(containingMemberOrLambda != null); 725687"];
4341 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 725688"];
4342 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 725689"];
4343 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 725690"];
4344 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 725691"];
4345 [label="param ValidateParameterNameConflicts(this) 725692"];
4346 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 725693"];
4347 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 725694"];
4348 [label="Debug.Assert(diagnostics != null); 725695"];
4349 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 725696"];
4350 [label="param GetSpecialType(DiagnosticBag diagnostics) 725697"];
4351 [label="param GetSpecialType(SyntaxNode node) 725698"];
4352 [label="param GetSpecialType(SyntaxNode node) 725699"];
4353 [label="param GetSpecialType(DiagnosticBag diagnostics) 725700"];
4354 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 725701"];
4355 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 725702"];
4356 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 725703"];
4357 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725704"];
4358 [label="Debug.Assert(typeWithAnnotations.HasType); 725705"];
4359 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 725706"];
4360 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725707"];
4361 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725708"];
4362 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725709"];
4363 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725710"];
4364 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725711"];
4365 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 725712"];
4366 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725713"];
4367 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725714"];
4368 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 725715"];
4369 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 725716"];
4370 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 725717"];
4371 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 725718"];
4372 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 725719"];
4373 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 725720"];
4374 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 725721"];
4375 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 725722"];
4376 [label="RoslynDebug.Assert(diagnostics != null); 725723"];
4377 [label="RoslynDebug.Assert(diagnostics != null); 725724"];
4378 [label="DiagnosticInfo? info = null; 725725"];
4379 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 725726"];
4380 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 725727"];
4381 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 725728"];
4382 [label="return kind; 725729"];
4383 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 725730"];
4384 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 725731"];
4385 [label="param UnwrapAlias(DiagnosticBag diagnostics) 725732"];
4386 [label="param UnwrapAlias(SyntaxNode syntax) 725733"];
4387 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 725734"];
4388 [label="param UnwrapAlias(this) 725735"];
4389 [label="=> _symbol?.Kind == SymbolKind.Alias 725736"];
4390 [label="_symbol 725737"];
4391 [label="_symbol?.Kind == SymbolKind.Alias 725738"];
4392 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 725739"];
4393 [label="param IsSymbolAccessible(NamedTypeSymbol within) 725740"];
4394 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 725741"];
4395 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725742"];
4396 [label="param IsSymbolAccessibleCore(Symbol within) 725743"];
4397 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725744"];
4398 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725745"];
4399 [label="Debug.Assert((object)symbol != null); 725746"];
4400 [label="Debug.Assert((object)within != null); 725747"];
4401 [label="Debug.Assert(within.IsDefinition); 725748"];
4402 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725749"];
4403 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725750"];
4404 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725751"];
4405 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725752"];
4406 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725753"];
4407 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 725754"];
4408 [label="param IsMemberAccessible(Symbol within) 725755"];
4409 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 725756"];
4410 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 725757"];
4411 [label="param IsMemberAccessible(CSharpCompilation compilation) 725758"];
4412 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725759"];
4413 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725760"];
4414 [label="Debug.Assert((object)containingType != null); 725761"];
4415 [label="Debug.Assert((object)containingType != null); 725762"];
4416 [label="failedThroughTypeCheck = false; 725763"];
4417 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 725764"];
4418 [label="param IsNamedTypeAccessible(Symbol within) 725765"];
4419 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725766"];
4420 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725767"];
4421 [label="Debug.Assert((object)type != null); 725768"];
4422 [label="Debug.Assert((object)type != null); 725769"];
4423 [label="var compilation = within.DeclaringCompilation; 725770"];
4424 [label="bool unused; 725771"];
4425 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 725772"];
4426 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 725773"];
4427 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725774"];
4428 [label="param IsNonNestedTypeAccessible(Symbol within) 725775"];
4429 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725776"];
4430 [label="Debug.Assert((object)assembly != null); 725777"];
4431 [label="Debug.Assert((object)assembly != null); 725778"];
4432 [label="if (IncludeNullability == includeNullability)\n            {\n                return this;\n            } 725779"];
4433 [label="Debug.Assert(_lazyOtherNullability.IncludeNullability == includeNullability); 725780"];
4434 [label="Debug.Assert(_lazyOtherNullability._lazyOtherNullability == this); 725781"];
4435 [label="Debug.Assert((object)source != null); 725782"];
4436 [label="Debug.Assert((object)destination != null); 725783"];
4437 [label="Debug.Assert((object)type1 != null); 725784"];
4438 [label="Debug.Assert((object)type2 != null); 725785"];
4439 [label="Debug.Assert(node != null); 725786"];
4440 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 725787"];
4441 [label="NodeUsage extraInfo = NodeUsage.Normal; 725788"];
4442 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 725789"];
4443 [label="Debug.Assert((object)containing != null); 725790"];
4444 [label="RoslynDebug.Assert(next != null); 725791"];
4445 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 725792"];
4446 [label="param Includes(this BinderFlags self) 725793"];
4447 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 725794"];
4448 [label="param Includes(this BinderFlags self) 725795"];
4449 [label="Debug.Assert(containingMemberOrLambda != null); 725796"];
4450 [label="Debug.Assert(diagnostics != null); 725797"];
4451 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 725798"];
4452 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 725799"];
4453 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 725800"];
4454 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 725801"];
4455 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 725802"];
4456 [label="param CreateErrorIfLookupOnTypeParameter(string name) 725803"];
4457 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 725804"];
4458 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 725805"];
4459 [label="param CreateErrorIfLookupOnTypeParameter(this) 725806"];
4460 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 725807"];
4461 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 725808"];
4462 [label="return null; 725809"];
4463 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 725810"];
4464 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 725811"];
4465 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 725812"];
4466 [label="instance.IsClear 725813"];
4467 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725814"];
4468 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725815"];
4469 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725816"];
4470 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725817"];
4471 [label="Debug.Assert(instance.IsClear); 725818"];
4472 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 725819"];
4473 [label="result.IsClear 725820"];
4474 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725821"];
4475 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725822"];
4476 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725823"];
4477 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725824"];
4478 [label="Debug.Assert(result.IsClear); 725825"];
4479 [label="Debug.Assert(options.AreValid()); 725826"];
4480 [label="options.AreValid() 725827"];
4481 [label="param AreValid(this LookupOptions options) 725828"];
4482 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 725829"];
4483 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 725830"];
4484 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 725831"];
4485 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 725832"];
4486 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 725833"];
4487 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725834"];
4488 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725835"];
4489 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725836"];
4490 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 725837"];
4491 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 725838"];
4492 [label="return OnlyOneBitSet(onlyOptions); 725839"];
4493 [label="OnlyOneBitSet(onlyOptions) 725840"];
4494 [label="param OnlyOneBitSet(LookupOptions o) 725841"];
4495 [label="return (o & (o - 1)) == 0; 725842"];
4496 [label="return (o & (o - 1)) == 0; 725843"];
4497 [label="param LookupSymbolsInSingleBinder(LookupResult result) 725844"];
4498 [label="param LookupSymbolsInSingleBinder(string name) 725845"];
4499 [label="param LookupSymbolsInSingleBinder(int arity) 725846"];
4500 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 725847"];
4501 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 725848"];
4502 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 725849"];
4503 [label="param LookupSymbolsInSingleBinder(bool diagnose) 725850"];
4504 [label="param LookupSymbolsInSingleBinder(this) 725851"];
4505 [label="result.IsClear 725852"];
4506 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725853"];
4507 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725854"];
4508 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725855"];
4509 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725856"];
4510 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 725857"];
4511 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 725858"];
4512 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 725859"];
4513 [label="param LookupSymbolsInSingleBinder(LookupResult result) 725860"];
4514 [label="param LookupSymbolsInSingleBinder(int arity) 725861"];
4515 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 725862"];
4516 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 725863"];
4517 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 725864"];
4518 [label="param LookupSymbolsInSingleBinder(bool diagnose) 725865"];
4519 [label="result.IsClear 725866"];
4520 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725867"];
4521 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725868"];
4522 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725869"];
4523 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725870"];
4524 [label="Debug.Assert(result.IsClear); 725871"];
4525 [label="LookupMask 725872"];
4526 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 725873"];
4527 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 725874"];
4528 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 725875"];
4529 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 725876"];
4530 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 725877"];
4531 [label="result.IsClear 725878"];
4532 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 725879"];
4533 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725880"];
4534 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725881"];
4535 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725882"];
4536 [label="Debug.Assert(result.IsClear); 725883"];
4537 [label="IsSubmissionClass 725884"];
4538 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 725885"];
4539 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 725886"];
4540 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 725887"];
4541 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 725888"];
4542 [label="Debug.Assert(options.AreValid()); 725889"];
4543 [label="options.AreValid() 725890"];
4544 [label="param AreValid(this LookupOptions options) 725891"];
4545 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 725892"];
4546 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 725893"];
4547 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 725894"];
4548 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 725895"];
4549 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 725896"];
4550 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725897"];
4551 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725898"];
4552 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 725899"];
4553 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 725900"];
4554 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 725901"];
4555 [label="return OnlyOneBitSet(onlyOptions); 725902"];
4556 [label="OnlyOneBitSet(onlyOptions) 725903"];
4557 [label="param OnlyOneBitSet(LookupOptions o) 725904"];
4558 [label="return (o & (o - 1)) == 0; 725905"];
4559 [label="return (o & (o - 1)) == 0; 725906"];
4560 [label="Debug.Assert(arity >= 0); 725907"];
4561 [label="param GetCandidateMembers(Binder originalBinder) 725908"];
4562 [label="param CheckViability(TypeSymbol accessThroughType) 725909"];
4563 [label="param CheckViability(bool diagnose) 725910"];
4564 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 725911"];
4565 [label="bool inaccessibleViaQualifier; 725912"];
4566 [label="param WrongArity(Symbol symbol) 725913"];
4567 [label="param WrongArity(int arity) 725914"];
4568 [label="param WrongArity(bool diagnose) 725915"];
4569 [label="param WrongArity(LookupOptions options) 725916"];
4570 [label="param WrongArity(out DiagnosticInfo diagInfo) 725917"];
4571 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 725918"];
4572 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725919"];
4573 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725920"];
4574 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725921"];
4575 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 725922"];
4576 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 725923"];
4577 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725924"];
4578 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725925"];
4579 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 725926"];
4580 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 725927"];
4581 [label="options.IsAttributeTypeLookup() 725928"];
4582 [label="param IsAttributeTypeLookup(this LookupOptions options) 725929"];
4583 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 725930"];
4584 [label="diagInfo = null; 725931"];
4585 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725932"];
4586 [label="RefineAccessThroughType(options, accessThroughType) 725933"];
4587 [label="param RefineAccessThroughType(LookupOptions options) 725934"];
4588 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 725935"];
4589 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 725936"];
4590 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 725937"];
4591 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 725938"];
4592 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 725939"];
4593 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725940"];
4594 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 725941"];
4595 [label="param IsAccessible(TypeSymbol accessThroughType) 725942"];
4596 [label="param IsAccessible(out bool failedThroughTypeCheck) 725943"];
4597 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725944"];
4598 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725945"];
4599 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725946"];
4600 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725947"];
4601 [label="param Includes(this BinderFlags self) 725948"];
4602 [label="param Includes(BinderFlags other) 725949"];
4603 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725950"];
4604 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725951"];
4605 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 725952"];
4606 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725953"];
4607 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725954"];
4608 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 725955"];
4609 [label="param IsAccessibleHelper(this) 725956"];
4610 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 725957"];
4611 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 725958"];
4612 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 725959"];
4613 [label="param IsSymbolAccessibleConditional(this) 725960"];
4614 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725961"];
4615 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 725962"];
4616 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725963"];
4617 [label="param Includes(this BinderFlags self) 725964"];
4618 [label="param Includes(BinderFlags other) 725965"];
4619 [label="param IsSymbolAccessible(NamedTypeSymbol within) 725966"];
4620 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 725967"];
4621 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 725968"];
4622 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725969"];
4623 [label="param IsSymbolAccessibleCore(Symbol within) 725970"];
4624 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725971"];
4625 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 725972"];
4626 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725973"];
4627 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 725974"];
4628 [label="Debug.Assert((object)symbol != null); 725975"];
4629 [label="Debug.Assert((object)within != null); 725976"];
4630 [label="Debug.Assert((object)within != null); 725977"];
4631 [label="Debug.Assert(within.IsDefinition); 725978"];
4632 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725979"];
4633 [label="failedThroughTypeCheck = false; 725980"];
4634 [label="param IsNamedTypeAccessible(Symbol within) 725981"];
4635 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 725982"];
4636 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725983"];
4637 [label="Debug.Assert((object)type != null); 725984"];
4638 [label="var compilation = within.DeclaringCompilation; 725985"];
4639 [label="bool unused; 725986"];
4640 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 725987"];
4641 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725988"];
4642 [label="param IsNonNestedTypeAccessible(Symbol within) 725989"];
4643 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725990"];
4644 [label="Debug.Assert((object)assembly != null); 725991"];
4645 [label="Debug.Assert((object)assembly != null); 725992"];
4646 [label="originalBinder.IsSemanticModelBinder 725993"];
4647 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 725994"];
4648 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725995"];
4649 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 725996"];
4650 [label="this.Flags.Includes(BinderFlags.SemanticModel) 725997"];
4651 [label="param Includes(this BinderFlags self) 725998"];
4652 [label="param Includes(BinderFlags other) 725999"];
4653 [label="param IsUsingAlias(bool callerIsSemanticModel) 726000"];
4654 [label="return false; 726001"];
4655 [label="return; 726002"];
4656 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726003"];
4657 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 726004"];
4658 [label="binder = scope; 726005"];
4659 [label="return binder; 726006"];
4660 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 726007"];
4661 [label="IsViableType(result) 726008"];
4662 [label="param IsViableType(LookupResult result) 726009"];
4663 [label="result.IsMultiViable 726010"];
4664 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 726011"];
4665 [label="return _kind; 726012"];
4666 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 726013"];
4667 [label="result.Symbols 726014"];
4668 [label="get\n            {\n                return _symbolList;\n            } 726015"];
4669 [label="return _symbolList; 726016"];
4670 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 726017"];
4671 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 726018"];
4672 [label="return true; 726019"];
4673 [label="bool wasError; 726020"];
4674 [label="param ResultSymbol(SyntaxNode where) 726021"];
4675 [label="param ResultSymbol(DiagnosticBag diagnostics) 726022"];
4676 [label="param ResultSymbol(out bool wasError) 726023"];
4677 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 726024"];
4678 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 726025"];
4679 [label="param ResultSymbol(this) 726026"];
4680 [label="Debug.Assert(where != null); 726027"];
4681 [label="Debug.Assert(where != null); 726028"];
4682 [label="Debug.Assert(diagnostics != null); 726029"];
4683 [label="Debug.Assert(diagnostics != null); 726030"];
4684 [label="wasError = false; 726031"];
4685 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 726032"];
4686 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 726033"];
4687 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 726034"];
4688 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 726035"];
4689 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 726036"];
4690 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 726037"];
4691 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 726038"];
4692 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 726039"];
4693 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726040"];
4694 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726041"];
4695 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726042"];
4696 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726043"];
4697 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 726044"];
4698 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 726045"];
4699 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 726046"];
4700 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 726047"];
4701 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 726048"];
4702 [label="param CheckRuntimeSupportForSymbolAccess(this) 726049"];
4703 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 726050"];
4704 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 726051"];
4705 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 726052"];
4706 [label="this.Clear(); 726053"];
4707 [label="result.Free(); 726054"];
4708 [label="if (symbol is null)\n                {\n                    return default;\n                } 726055"];
4709 [label="Debug.Assert(typeWithAnnotations.HasType); 726056"];
4710 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 726057"];
4711 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726058"];
4712 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726059"];
4713 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726060"];
4714 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726061"];
4715 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726062"];
4716 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 726063"];
4717 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726064"];
4718 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726065"];
4719 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 726066"];
4720 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 726067"];
4721 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 726068"];
4722 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 726069"];
4723 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 726070"];
4724 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 726071"];
4725 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 726072"];
4726 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 726073"];
4727 [label="RoslynDebug.Assert(diagnostics != null); 726074"];
4728 [label="RoslynDebug.Assert(diagnostics != null); 726075"];
4729 [label="DiagnosticInfo? info = null; 726076"];
4730 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 726077"];
4731 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 726078"];
4732 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 726079"];
4733 [label="return kind; 726080"];
4734 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 726081"];
4735 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 726082"];
4736 [label="param UnwrapAlias(DiagnosticBag diagnostics) 726083"];
4737 [label="param UnwrapAlias(SyntaxNode syntax) 726084"];
4738 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 726085"];
4739 [label="param UnwrapAlias(this) 726086"];
4740 [label="=> _symbol?.Kind == SymbolKind.Alias 726087"];
4741 [label="_symbol 726088"];
4742 [label="_symbol?.Kind == SymbolKind.Alias 726089"];
4743 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 726090"];
4744 [label="Debug.Assert(node != null); 726091"];
4745 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 726092"];
4746 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 726093"];
4747 [label="param Includes(this BinderFlags self) 726094"];
4748 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 726095"];
4749 [label="param Includes(this BinderFlags self) 726096"];
4750 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 726097"];
4751 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 726098"];
4752 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 726099"];
4753 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 726100"];
4754 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 726101"];
4755 [label="param CreateErrorIfLookupOnTypeParameter(string name) 726102"];
4756 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 726103"];
4757 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 726104"];
4758 [label="param CreateErrorIfLookupOnTypeParameter(this) 726105"];
4759 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 726106"];
4760 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 726107"];
4761 [label="return null; 726108"];
4762 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 726109"];
4763 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 726110"];
4764 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 726111"];
4765 [label="instance.IsClear 726112"];
4766 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 726113"];
4767 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726114"];
4768 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726115"];
4769 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726116"];
4770 [label="Debug.Assert(instance.IsClear); 726117"];
4771 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 726118"];
4772 [label="result.IsClear 726119"];
4773 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 726120"];
4774 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726121"];
4775 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726122"];
4776 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726123"];
4777 [label="Debug.Assert(result.IsClear); 726124"];
4778 [label="Debug.Assert(options.AreValid()); 726125"];
4779 [label="options.AreValid() 726126"];
4780 [label="param AreValid(this LookupOptions options) 726127"];
4781 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 726128"];
4782 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 726129"];
4783 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 726130"];
4784 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 726131"];
4785 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 726132"];
4786 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 726133"];
4787 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 726134"];
4788 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 726135"];
4789 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 726136"];
4790 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 726137"];
4791 [label="return OnlyOneBitSet(onlyOptions); 726138"];
4792 [label="OnlyOneBitSet(onlyOptions) 726139"];
4793 [label="param OnlyOneBitSet(LookupOptions o) 726140"];
4794 [label="return (o & (o - 1)) == 0; 726141"];
4795 [label="return (o & (o - 1)) == 0; 726142"];
4796 [label="param LookupSymbolsInSingleBinder(LookupResult result) 726143"];
4797 [label="param LookupSymbolsInSingleBinder(string name) 726144"];
4798 [label="param LookupSymbolsInSingleBinder(int arity) 726145"];
4799 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 726146"];
4800 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 726147"];
4801 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 726148"];
4802 [label="param LookupSymbolsInSingleBinder(bool diagnose) 726149"];
4803 [label="param LookupSymbolsInSingleBinder(this) 726150"];
4804 [label="result.IsClear 726151"];
4805 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 726152"];
4806 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726153"];
4807 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726154"];
4808 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726155"];
4809 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 726156"];
4810 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 726157"];
4811 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 726158"];
4812 [label="param LookupSymbolsInSingleBinder(LookupResult result) 726159"];
4813 [label="param LookupSymbolsInSingleBinder(int arity) 726160"];
4814 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 726161"];
4815 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 726162"];
4816 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 726163"];
4817 [label="param LookupSymbolsInSingleBinder(bool diagnose) 726164"];
4818 [label="result.IsClear 726165"];
4819 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 726166"];
4820 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726167"];
4821 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726168"];
4822 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726169"];
4823 [label="Debug.Assert(result.IsClear); 726170"];
4824 [label="LookupMask 726171"];
4825 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 726172"];
4826 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 726173"];
4827 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 726174"];
4828 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 726175"];
4829 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 726176"];
4830 [label="result.IsClear 726177"];
4831 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 726178"];
4832 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726179"];
4833 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726180"];
4834 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726181"];
4835 [label="Debug.Assert(result.IsClear); 726182"];
4836 [label="IsSubmissionClass 726183"];
4837 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 726184"];
4838 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 726185"];
4839 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 726186"];
4840 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 726187"];
4841 [label="Debug.Assert(options.AreValid()); 726188"];
4842 [label="options.AreValid() 726189"];
4843 [label="param AreValid(this LookupOptions options) 726190"];
4844 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 726191"];
4845 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 726192"];
4846 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 726193"];
4847 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 726194"];
4848 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 726195"];
4849 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 726196"];
4850 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 726197"];
4851 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 726198"];
4852 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 726199"];
4853 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 726200"];
4854 [label="return OnlyOneBitSet(onlyOptions); 726201"];
4855 [label="OnlyOneBitSet(onlyOptions) 726202"];
4856 [label="param OnlyOneBitSet(LookupOptions o) 726203"];
4857 [label="return (o & (o - 1)) == 0; 726204"];
4858 [label="return (o & (o - 1)) == 0; 726205"];
4859 [label="Debug.Assert(arity >= 0); 726206"];
4860 [label="param GetCandidateMembers(Binder originalBinder) 726207"];
4861 [label="param CheckViability(TypeSymbol accessThroughType) 726208"];
4862 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 726209"];
4863 [label="bool inaccessibleViaQualifier; 726210"];
4864 [label="param WrongArity(Symbol symbol) 726211"];
4865 [label="param WrongArity(int arity) 726212"];
4866 [label="param WrongArity(bool diagnose) 726213"];
4867 [label="param WrongArity(LookupOptions options) 726214"];
4868 [label="param WrongArity(out DiagnosticInfo diagInfo) 726215"];
4869 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 726216"];
4870 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 726217"];
4871 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 726218"];
4872 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 726219"];
4873 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 726220"];
4874 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 726221"];
4875 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 726222"];
4876 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 726223"];
4877 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 726224"];
4878 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 726225"];
4879 [label="options.IsAttributeTypeLookup() 726226"];
4880 [label="param IsAttributeTypeLookup(this LookupOptions options) 726227"];
4881 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 726228"];
4882 [label="diagInfo = null; 726229"];
4883 [label="RefineAccessThroughType(options, accessThroughType) 726230"];
4884 [label="param RefineAccessThroughType(LookupOptions options) 726231"];
4885 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 726232"];
4886 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 726233"];
4887 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 726234"];
4888 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 726235"];
4889 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 726236"];
4890 [label="param IsAccessible(TypeSymbol accessThroughType) 726237"];
4891 [label="param IsAccessible(out bool failedThroughTypeCheck) 726238"];
4892 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 726239"];
4893 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 726240"];
4894 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 726241"];
4895 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 726242"];
4896 [label="param Includes(this BinderFlags self) 726243"];
4897 [label="param Includes(BinderFlags other) 726244"];
4898 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 726245"];
4899 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 726246"];
4900 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 726247"];
4901 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 726248"];
4902 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 726249"];
4903 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 726250"];
4904 [label="param IsAccessibleHelper(this) 726251"];
4905 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 726252"];
4906 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 726253"];
4907 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 726254"];
4908 [label="param IsSymbolAccessibleConditional(this) 726255"];
4909 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 726256"];
4910 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 726257"];
4911 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 726258"];
4912 [label="param Includes(this BinderFlags self) 726259"];
4913 [label="param Includes(BinderFlags other) 726260"];
4914 [label="param IsSymbolAccessible(NamedTypeSymbol within) 726261"];
4915 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 726262"];
4916 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 726263"];
4917 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 726264"];
4918 [label="param IsSymbolAccessibleCore(Symbol within) 726265"];
4919 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 726266"];
4920 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 726267"];
4921 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 726268"];
4922 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 726269"];
4923 [label="Debug.Assert((object)symbol != null); 726270"];
4924 [label="Debug.Assert((object)within != null); 726271"];
4925 [label="Debug.Assert((object)within != null); 726272"];
4926 [label="Debug.Assert(within.IsDefinition); 726273"];
4927 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 726274"];
4928 [label="failedThroughTypeCheck = false; 726275"];
4929 [label="param IsNamedTypeAccessible(Symbol within) 726276"];
4930 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 726277"];
4931 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 726278"];
4932 [label="Debug.Assert((object)type != null); 726279"];
4933 [label="var compilation = within.DeclaringCompilation; 726280"];
4934 [label="bool unused; 726281"];
4935 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 726282"];
4936 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 726283"];
4937 [label="param IsNonNestedTypeAccessible(Symbol within) 726284"];
4938 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 726285"];
4939 [label="Debug.Assert((object)assembly != null); 726286"];
4940 [label="Debug.Assert((object)assembly != null); 726287"];
4941 [label="originalBinder.IsSemanticModelBinder 726288"];
4942 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 726289"];
4943 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 726290"];
4944 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 726291"];
4945 [label="this.Flags.Includes(BinderFlags.SemanticModel) 726292"];
4946 [label="param Includes(this BinderFlags self) 726293"];
4947 [label="param Includes(BinderFlags other) 726294"];
4948 [label="param IsUsingAlias(bool callerIsSemanticModel) 726295"];
4949 [label="return false; 726296"];
4950 [label="return; 726297"];
4951 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726298"];
4952 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 726299"];
4953 [label="binder = scope; 726300"];
4954 [label="return binder; 726301"];
4955 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 726302"];
4956 [label="IsViableType(result) 726303"];
4957 [label="param IsViableType(LookupResult result) 726304"];
4958 [label="result.IsMultiViable 726305"];
4959 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 726306"];
4960 [label="return _kind; 726307"];
4961 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 726308"];
4962 [label="result.Symbols 726309"];
4963 [label="get\n            {\n                return _symbolList;\n            } 726310"];
4964 [label="return _symbolList; 726311"];
4965 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 726312"];
4966 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 726313"];
4967 [label="return true; 726314"];
4968 [label="bool wasError; 726315"];
4969 [label="param ResultSymbol(DiagnosticBag diagnostics) 726316"];
4970 [label="param ResultSymbol(out bool wasError) 726317"];
4971 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 726318"];
4972 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 726319"];
4973 [label="param ResultSymbol(this) 726320"];
4974 [label="Debug.Assert(where != null); 726321"];
4975 [label="Debug.Assert(diagnostics != null); 726322"];
4976 [label="Debug.Assert(diagnostics != null); 726323"];
4977 [label="wasError = false; 726324"];
4978 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 726325"];
4979 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 726326"];
4980 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 726327"];
4981 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 726328"];
4982 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 726329"];
4983 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 726330"];
4984 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 726331"];
4985 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726332"];
4986 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726333"];
4987 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726334"];
4988 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726335"];
4989 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 726336"];
4990 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 726337"];
4991 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 726338"];
4992 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 726339"];
4993 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 726340"];
4994 [label="param CheckRuntimeSupportForSymbolAccess(this) 726341"];
4995 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 726342"];
4996 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 726343"];
4997 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 726344"];
4998 [label="this.Clear(); 726345"];
4999 [label="result.Free(); 726346"];
5000 [label="if (symbol is null)\n                {\n                    return default;\n                } 726347"];
5001 [label="Debug.Assert(typeWithAnnotations.HasType); 726348"];
5002 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 726349"];
5003 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726350"];
5004 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726351"];
5005 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726352"];
5006 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726353"];
5007 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726354"];
5008 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 726355"];
5009 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726356"];
5010 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726357"];
5011 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 726358"];
5012 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 726359"];
5013 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 726360"];
5014 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 726361"];
5015 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 726362"];
5016 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 726363"];
5017 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 726364"];
5018 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 726365"];
5019 [label="RoslynDebug.Assert(diagnostics != null); 726366"];
5020 [label="RoslynDebug.Assert(diagnostics != null); 726367"];
5021 [label="DiagnosticInfo? info = null; 726368"];
5022 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 726369"];
5023 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 726370"];
5024 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 726371"];
5025 [label="return kind; 726372"];
5026 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 726373"];
5027 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 726374"];
5028 [label="=> _symbol?.Kind == SymbolKind.Alias 726375"];
5029 [label="_symbol 726376"];
5030 [label="_symbol?.Kind == SymbolKind.Alias 726377"];
5031 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 726378"];
5032 [label="corLibrary 726379"];
5033 [label="currentRecursionDepth 726380"];
5034 [label="IncludeNullability 726381"];
5035 [label="_lazyOtherNullability 726382"];
5036 [label="Debug.Assert((object)corLibrary != null); 726383"];
5037 [label="diagnostics.Verify(expected); 726384"];
5038 [label="diagnostics.Verify(expected); 726385"];
5039 [label="diagnostics.Verify(expected) 726386"];
5040 [label="param Verify(this ImmutableArray<Diagnostic> actual) 726387"];
5041 [label="param Verify(params DiagnosticDescription[] expected) 726388"];
5042 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 726389"];
5043 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 726390"];
5044 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 726391"];
5045 [label="param Verify(this IEnumerable<Diagnostic> actual) 726392"];
5046 [label="param Verify(params DiagnosticDescription[] expected) 726393"];
5047 [label="Verify(actual, expected, errorCodeOnly: false); 726394"];
5048 [label="Verify(actual, expected, errorCodeOnly: false); 726395"];
5049 [label="Verify(actual, expected, errorCodeOnly: false); 726396"];
5050 [label="Verify(actual, expected, errorCodeOnly: false) 726397"];
5051 [label="param Verify(IEnumerable<Diagnostic> actual) 726398"];
5052 [label="param Verify(DiagnosticDescription[] expected) 726399"];
5053 [label="param Verify(bool errorCodeOnly) 726400"];
5054 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 726401"];
5055 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 726402"];
5056 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 726403"];
5057 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 726404"];
5058 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 726405"];
5059 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 726406"];
5060 [label="=> _defaultSeverityOpt 726407"];
5061 [label="_defaultSeverityOpt 726408"];
5062 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 726409"];
5063 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 726410"];
5064 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 726411"];
5065 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 726412"];
5066 [label="=> _effectiveSeverityOpt 726413"];
5067 [label="_effectiveSeverityOpt 726414"];
5068 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 726415"];
5069 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 726416"];
5070 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 726417"];
5071 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 726418"];
5072 [label="param DiagnosticDescription(Diagnostic d) 726419"];
5073 [label="param DiagnosticDescription(bool errorCodeOnly) 726420"];
5074 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 726421"];
5075 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 726422"];
5076 [label="param DiagnosticDescription(this) 726423"];
5077 [label="_code 726424"];
5078 [label="_isWarningAsError 726425"];
5079 [label="_isSuppressed 726426"];
5080 [label="_squiggledText 726427"];
5081 [label="_arguments 726428"];
5082 [label="_startPosition 726429"];
5083 [label="_argumentOrderDoesNotMatter 726430"];
5084 [label="_errorCodeType 726431"];
5085 [label="_defaultSeverityOpt 726432"];
5086 [label="_effectiveSeverityOpt 726433"];
5087 [label="_syntaxPredicate 726434"];
5088 [label="_code 726435"];
5089 [label="_isWarningAsError 726436"];
5090 [label="_isSuppressed 726437"];
5091 [label="_location 726438"];
5092 [label="includeDefaultSeverity 726439"];
5093 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 726440"];
5094 [label="_defaultSeverityOpt 726441"];
5095 [label="includeEffectiveSeverity 726442"];
5096 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 726443"];
5097 [label="_effectiveSeverityOpt 726444"];
5098 [label="DiagnosticWithInfo dinfo = null; 726445"];
5099 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 726446"];
5100 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 726447"];
5101 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 726448"];
5102 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 726449"];
5103 [label="dinfo = d as DiagnosticWithInfo; 726450"];
5104 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 726451"];
5105 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 726452"];
5106 [label="_errorCodeType 726453"];
5107 [label="_code 726454"];
5108 [label="_ignoreArgumentsWhenComparing 726455"];
5109 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 726456"];
5110 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 726457"];
5111 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 726458"];
5112 [label="_squiggledText 726459"];
5113 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 726460"];
5114 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 726461"];
5115 [label="_arguments 726462"];
5116 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 726463"];
5117 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 726464"];
5118 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 726465"];
5119 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 726466"];
5120 [label="_startPosition 726467"];
5121 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 726468"];
5122 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 726469"];
5123 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 726470"];
5124 [label="int index = unmatched.IndexOf(d); 726471"];
5125 [label="int index = unmatched.IndexOf(d); 726472"];
5126 [label="param Equals(object obj) 726473"];
5127 [label="param Equals(this) 726474"];
5128 [label="var d = obj as DiagnosticDescription; 726475"];
5129 [label="if (d == null)\n                return false; 726476"];
5130 [label="if (d == null)\n                return false; 726477"];
5131 [label="if (!_code.Equals(d._code))\n                return false; 726478"];
5132 [label="if (!_code.Equals(d._code))\n                return false; 726479"];
5133 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 726480"];
5134 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 726481"];
5135 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 726482"];
5136 [label="if (_squiggledText != d._squiggledText)\n                    return false; 726483"];
5137 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 726484"];
5138 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 726485"];
5139 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 726486"];
5140 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 726487"];
5141 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 726488"];
5142 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 726489"];
5143 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 726490"];
5144 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 726491"];
5145 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 726492"];
5146 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 726493"];
5147 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 726494"];
5148 [label="if (d._arguments == null)\n                    return false; 726495"];
5149 [label="GetArgumentsAsStrings() 726496"];
5150 [label="param GetArgumentsAsStrings(this) 726497"];
5151 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 726498"];
5152 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 726499"];
5153 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 726500"];
5154 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 726501"];
5155 [label="_argumentsAsStrings 726502"];
5156 [label="return _argumentsAsStrings; 726503"];
5157 [label="var args1 = GetArgumentsAsStrings(); 726504"];
5158 [label="d.GetArgumentsAsStrings() 726505"];
5159 [label="param GetArgumentsAsStrings(this) 726506"];
5160 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 726507"];
5161 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 726508"];
5162 [label="return _argumentsAsStrings; 726509"];
5163 [label="var args2 = d.GetArgumentsAsStrings(); 726510"];
5164 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 726511"];
5165 [label="if (!args1.SequenceEqual(args2))\n                        return false; 726512"];
5166 [label="if (!args1.SequenceEqual(args2))\n                        return false; 726513"];
5167 [label="if (!args1.SequenceEqual(args2))\n                        return false; 726514"];
5168 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 726515"];
5169 [label="return true; 726516"];
5170 [label="int index = unmatched.IndexOf(d); 726517"];
5171 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 726518"];
5172 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 726519"];
5173 [label="unmatched.RemoveAt(index); 726520"];
5174 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 726521"];
5175 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 726522"];
5176 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 726523"];
5177 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 726524"];
5178 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 726525"];
5179 [label="DiagnosticDescription.GetAssertText(expected, actual) 726526"];
5180 [label="param GetAssertText(DiagnosticDescription[] expected) 726527"];
5181 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 726528"];
5182 [label="const int CSharp = 1; 726529"];
5183 [label="const int VisualBasic = 2; 726530"];
5184 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726531"];
5185 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726532"];
5186 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726533"];
5187 [label="actual.Any() && actual.First() is CSDiagnostic 726534"];
5188 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726535"];
5189 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 726536"];
5190 [label="int indentDepth = (language == CSharp) ? 4 : 1; 726537"];
5191 [label="(language == CSharp) 726538"];
5192 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 726539"];
5193 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 726540"];
5194 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 726541"];
5195 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 726542"];
5196 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 726543"];
5197 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 726544"];
5198 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 726545"];
5199 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 726546"];
5200 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 726547"];
5201 [label="IsSortedOrEmpty(expected) 726548"];
5202 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 726549"];
5203 [label="new LinePositionComparer() 726550"];
5204 [label="param LinePositionComparer(this) 726551"];
5205 [label="Instance = new LinePositionComparer() 726552"];
5206 [label="var comparer = LinePositionComparer.Instance; 726553"];
5207 [label="DiagnosticDescription last = null; 726554"];
5208 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 726555"];
5209 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 726556"];
5210 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 726557"];
5211 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 726558"];
5212 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 726559"];
5213 [label="last = diagnostic; 726560"];
5214 [label="return true; 726561"];
5215 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 726562"];
5216 [label="actual = Sort(actual); 726563"];
5217 [label="Sort(actual) 726564"];
5218 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 726565"];
5219 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726566"];
5220 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726567"];
5221 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726568"];
5222 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726569"];
5223 [label="var assertText = new StringBuilder(); 726570"];
5224 [label="assertText.AppendLine(); 726571"];
5225 [label="int i; 726572"];
5226 [label="assertText.AppendLine('Expected:'); 726573"];
5227 [label="assertText.AppendLine('Expected:'); 726574"];
5228 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 726575"];
5229 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 726576"];
5230 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 726577"];
5231 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 726578"];
5232 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 726579"];
5233 [label="GetDiagnosticDescription(d, indentDepth) 726580"];
5234 [label="param GetDiagnosticDescription(DiagnosticDescription d) 726581"];
5235 [label="param GetDiagnosticDescription(int indentDepth) 726582"];
5236 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726583"];
5237 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726584"];
5238 [label="d.ToString() 726585"];
5239 [label="param ToString(this) 726586"];
5240 [label="var sb = new StringBuilder(); 726587"];
5241 [label="sb.Append('Diagnostic('); 726588"];
5242 [label="sb.Append('Diagnostic('); 726589"];
5243 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 726590"];
5244 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 726591"];
5245 [label="sb.Append(_errorCodeType.Name); 726592"];
5246 [label="sb.Append(_errorCodeType.Name); 726593"];
5247 [label="sb.Append('.'); 726594"];
5248 [label="sb.Append('.'); 726595"];
5249 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726596"];
5250 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726597"];
5251 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 726598"];
5252 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 726599"];
5253 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 726600"];
5254 [label="sb.Append(', \\''); 726601"];
5255 [label="sb.Append(', \\''); 726602"];
5256 [label="sb.Append(_squiggledText); 726603"];
5257 [label="sb.Append(_squiggledText); 726604"];
5258 [label="sb.Append('''); 726605"];
5259 [label="sb.Append('''); 726606"];
5260 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 726607"];
5261 [label="sb.Append(')'); 726608"];
5262 [label="sb.Append(')'); 726609"];
5263 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 726610"];
5264 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 726611"];
5265 [label="sb.Append('.WithArguments('); 726612"];
5266 [label="sb.Append('.WithArguments('); 726613"];
5267 [label="GetArgumentsAsStrings() 726614"];
5268 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 726615"];
5269 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 726616"];
5270 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 726617"];
5271 [label="sb.Append('\\''); 726618"];
5272 [label="sb.Append('\\''); 726619"];
5273 [label="sb.Append(argumentStrings.Current); 726620"];
5274 [label="sb.Append(argumentStrings.Current); 726621"];
5275 [label="sb.Append('\\''); 726622"];
5276 [label="sb.Append('\\''); 726623"];
5277 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 726624"];
5278 [label="sb.Append(', '); 726625"];
5279 [label="sb.Append(', '); 726626"];
5280 [label="sb.Append(')'); 726627"];
5281 [label="sb.Append(')'); 726628"];
5282 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 726629"];
5283 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 726630"];
5284 [label="sb.Append('.WithLocation('); 726631"];
5285 [label="sb.Append('.WithLocation('); 726632"];
5286 [label="sb.Append(_startPosition.Value.Line + 1); 726633"];
5287 [label="sb.Append(_startPosition.Value.Line + 1); 726634"];
5288 [label="sb.Append(', '); 726635"];
5289 [label="sb.Append(', '); 726636"];
5290 [label="sb.Append(_startPosition.Value.Character + 1); 726637"];
5291 [label="sb.Append(_startPosition.Value.Character + 1); 726638"];
5292 [label="sb.Append(')'); 726639"];
5293 [label="sb.Append(')'); 726640"];
5294 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 726641"];
5295 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 726642"];
5296 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 726643"];
5297 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 726644"];
5298 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 726645"];
5299 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 726646"];
5300 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 726647"];
5301 [label="return sb.ToString(); 726648"];
5302 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726649"];
5303 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726650"];
5304 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 726651"];
5305 [label="GetCommaSeparatedLines(assertText, expectedText); 726652"];
5306 [label="GetCommaSeparatedLines(assertText, expectedText); 726653"];
5307 [label="GetCommaSeparatedLines(assertText, expectedText) 726654"];
5308 [label="param GetCommaSeparatedLines(StringBuilder sb) 726655"];
5309 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 726656"];
5310 [label="int n = lines.Count; 726657"];
5311 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 726658"];
5312 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 726659"];
5313 [label="sb.Append(lines[i]); 726660"];
5314 [label="sb.Append(lines[i]); 726661"];
5315 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 726662"];
5316 [label="sb.AppendLine(); 726663"];
5317 [label="GetCommaSeparatedLines(assertText, expectedText); 726664"];
5318 [label="assertText.AppendLine('Actual:'); 726665"];
5319 [label="assertText.AppendLine('Actual:'); 726666"];
5320 [label="var actualText = ArrayBuilder<string>.GetInstance(); 726667"];
5321 [label="var e = actual.GetEnumerator(); 726668"];
5322 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 726669"];
5323 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 726670"];
5324 [label="param Compare(LinePosition? x) 726671"];
5325 [label="param Compare(LinePosition? y) 726672"];
5326 [label="param Compare(this) 726673"];
5327 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 726674"];
5328 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 726675"];
5329 [label="if (y == null)\n                {\n                    return 1;\n                } 726676"];
5330 [label="if (y == null)\n                {\n                    return 1;\n                } 726677"];
5331 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 726678"];
5332 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 726679"];
5333 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 726680"];
5334 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 726681"];
5335 [label="return x.Value.Character.CompareTo(y.Value.Character); 726682"];
5336 [label="return x.Value.Character.CompareTo(y.Value.Character); 726683"];
5337 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 726684"];
5338 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 726685"];
5339 [label="Diagnostic d = e.Current; 726686"];
5340 [label="string message = d.ToString(); 726687"];
5341 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 726688"];
5342 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 726689"];
5343 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 726690"];
5344 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 726691"];
5345 [label="Indent(assertText, indentDepth); 726692"];
5346 [label="Indent(assertText, indentDepth); 726693"];
5347 [label="Indent(assertText, indentDepth) 726694"];
5348 [label="param Indent(StringBuilder sb) 726695"];
5349 [label="param Indent(int count) 726696"];
5350 [label="sb.Append(' ', 4 * count); 726697"];
5351 [label="sb.Append(' ', 4 * count); 726698"];
5352 [label="sb.Append(' ', 4 * count); 726699"];
5353 [label="Indent(assertText, indentDepth); 726700"];
5354 [label="assertText.Append('// '); 726701"];
5355 [label="assertText.Append('// '); 726702"];
5356 [label="assertText.AppendLine(d.ToString()); 726703"];
5357 [label="assertText.AppendLine(d.ToString()); 726704"];
5358 [label="var l = d.Location; 726705"];
5359 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 726706"];
5360 [label="Indent(assertText, indentDepth); 726707"];
5361 [label="Indent(assertText, indentDepth); 726708"];
5362 [label="Indent(assertText, indentDepth) 726709"];
5363 [label="param Indent(StringBuilder sb) 726710"];
5364 [label="param Indent(int count) 726711"];
5365 [label="sb.Append(' ', 4 * count); 726712"];
5366 [label="sb.Append(' ', 4 * count); 726713"];
5367 [label="sb.Append(' ', 4 * count); 726714"];
5368 [label="Indent(assertText, indentDepth); 726715"];
5369 [label="assertText.Append('// '); 726716"];
5370 [label="assertText.Append('// '); 726717"];
5371 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 726718"];
5372 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 726719"];
5373 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726720"];
5374 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726721"];
5375 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726722"];
5376 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726723"];
5377 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 726724"];
5378 [label="param DiagnosticDescription(Diagnostic d) 726725"];
5379 [label="param DiagnosticDescription(bool errorCodeOnly) 726726"];
5380 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 726727"];
5381 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 726728"];
5382 [label="param DiagnosticDescription(this) 726729"];
5383 [label="_code 726730"];
5384 [label="_isWarningAsError 726731"];
5385 [label="_isSuppressed 726732"];
5386 [label="_squiggledText 726733"];
5387 [label="_arguments 726734"];
5388 [label="_startPosition 726735"];
5389 [label="_errorCodeType 726736"];
5390 [label="_defaultSeverityOpt 726737"];
5391 [label="_effectiveSeverityOpt 726738"];
5392 [label="_code 726739"];
5393 [label="_isWarningAsError 726740"];
5394 [label="_isSuppressed 726741"];
5395 [label="_location 726742"];
5396 [label="DiagnosticWithInfo dinfo = null; 726743"];
5397 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 726744"];
5398 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 726745"];
5399 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 726746"];
5400 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 726747"];
5401 [label="var diffDescription = description; 726748"];
5402 [label="var idx = Array.IndexOf(expected, description); 726749"];
5403 [label="var idx = Array.IndexOf(expected, description); 726750"];
5404 [label="var idx = Array.IndexOf(expected, description); 726751"];
5405 [label="var idx = Array.IndexOf(expected, description); 726752"];
5406 [label="if (d == null)\n                return false; 726753"];
5407 [label="if (d == null)\n                return false; 726754"];
5408 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 726755"];
5409 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 726756"];
5410 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 726757"];
5411 [label="if (_squiggledText != d._squiggledText)\n                    return false; 726758"];
5412 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 726759"];
5413 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 726760"];
5414 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 726761"];
5415 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 726762"];
5416 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 726763"];
5417 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 726764"];
5418 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 726765"];
5419 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 726766"];
5420 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 726767"];
5421 [label="if (d._arguments == null)\n                    return false; 726768"];
5422 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 726769"];
5423 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 726770"];
5424 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 726771"];
5425 [label="diffDescription = expected[idx]; 726772"];
5426 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 726773"];
5427 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 726774"];
5428 [label="GetDiagnosticDescription(description, indentDepth) 726775"];
5429 [label="param GetDiagnosticDescription(DiagnosticDescription d) 726776"];
5430 [label="param GetDiagnosticDescription(int indentDepth) 726777"];
5431 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726778"];
5432 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726779"];
5433 [label="var sb = new StringBuilder(); 726780"];
5434 [label="sb.Append('Diagnostic('); 726781"];
5435 [label="sb.Append('Diagnostic('); 726782"];
5436 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 726783"];
5437 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 726784"];
5438 [label="sb.Append(_errorCodeType.Name); 726785"];
5439 [label="sb.Append(_errorCodeType.Name); 726786"];
5440 [label="sb.Append('.'); 726787"];
5441 [label="sb.Append('.'); 726788"];
5442 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726789"];
5443 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726790"];
5444 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 726791"];
5445 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 726792"];
5446 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 726793"];
5447 [label="sb.Append(', \\''); 726794"];
5448 [label="sb.Append(', \\''); 726795"];
5449 [label="sb.Append(_squiggledText); 726796"];
5450 [label="sb.Append(_squiggledText); 726797"];
5451 [label="sb.Append('''); 726798"];
5452 [label="sb.Append('''); 726799"];
5453 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 726800"];
5454 [label="sb.Append(')'); 726801"];
5455 [label="sb.Append(')'); 726802"];
5456 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 726803"];
5457 [label="sb.Append('.WithArguments('); 726804"];
5458 [label="sb.Append('.WithArguments('); 726805"];
5459 [label="sb.Append('\\''); 726806"];
5460 [label="sb.Append('\\''); 726807"];
5461 [label="sb.Append(argumentStrings.Current); 726808"];
5462 [label="sb.Append(argumentStrings.Current); 726809"];
5463 [label="sb.Append('\\''); 726810"];
5464 [label="sb.Append('\\''); 726811"];
5465 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 726812"];
5466 [label="sb.Append(', '); 726813"];
5467 [label="sb.Append(', '); 726814"];
5468 [label="sb.Append(')'); 726815"];
5469 [label="sb.Append(')'); 726816"];
5470 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 726817"];
5471 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 726818"];
5472 [label="sb.Append('.WithLocation('); 726819"];
5473 [label="sb.Append('.WithLocation('); 726820"];
5474 [label="sb.Append(_startPosition.Value.Line + 1); 726821"];
5475 [label="sb.Append(_startPosition.Value.Line + 1); 726822"];
5476 [label="sb.Append(', '); 726823"];
5477 [label="sb.Append(', '); 726824"];
5478 [label="sb.Append(_startPosition.Value.Character + 1); 726825"];
5479 [label="sb.Append(_startPosition.Value.Character + 1); 726826"];
5480 [label="sb.Append(')'); 726827"];
5481 [label="sb.Append(')'); 726828"];
5482 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 726829"];
5483 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 726830"];
5484 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 726831"];
5485 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 726832"];
5486 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 726833"];
5487 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 726834"];
5488 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 726835"];
5489 [label="return sb.ToString(); 726836"];
5490 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726837"];
5491 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726838"];
5492 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 726839"];
5493 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 726840"];
5494 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 726841"];
5495 [label="GetDiagnosticDescription(diffDescription, indentDepth) 726842"];
5496 [label="param GetDiagnosticDescription(DiagnosticDescription d) 726843"];
5497 [label="param GetDiagnosticDescription(int indentDepth) 726844"];
5498 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726845"];
5499 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726846"];
5500 [label="var sb = new StringBuilder(); 726847"];
5501 [label="sb.Append('Diagnostic('); 726848"];
5502 [label="sb.Append('Diagnostic('); 726849"];
5503 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 726850"];
5504 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 726851"];
5505 [label="sb.Append(_errorCodeType.Name); 726852"];
5506 [label="sb.Append(_errorCodeType.Name); 726853"];
5507 [label="sb.Append('.'); 726854"];
5508 [label="sb.Append('.'); 726855"];
5509 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726856"];
5510 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726857"];
5511 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 726858"];
5512 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 726859"];
5513 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 726860"];
5514 [label="sb.Append(', \\''); 726861"];
5515 [label="sb.Append(', \\''); 726862"];
5516 [label="sb.Append(_squiggledText); 726863"];
5517 [label="sb.Append(_squiggledText); 726864"];
5518 [label="sb.Append('''); 726865"];
5519 [label="sb.Append('''); 726866"];
5520 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 726867"];
5521 [label="sb.Append(')'); 726868"];
5522 [label="sb.Append(')'); 726869"];
5523 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 726870"];
5524 [label="sb.Append('.WithArguments('); 726871"];
5525 [label="sb.Append('.WithArguments('); 726872"];
5526 [label="sb.Append('\\''); 726873"];
5527 [label="sb.Append('\\''); 726874"];
5528 [label="sb.Append(argumentStrings.Current); 726875"];
5529 [label="sb.Append(argumentStrings.Current); 726876"];
5530 [label="sb.Append('\\''); 726877"];
5531 [label="sb.Append('\\''); 726878"];
5532 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 726879"];
5533 [label="sb.Append(', '); 726880"];
5534 [label="sb.Append(', '); 726881"];
5535 [label="sb.Append(')'); 726882"];
5536 [label="sb.Append(')'); 726883"];
5537 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 726884"];
5538 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 726885"];
5539 [label="sb.Append('.WithLocation('); 726886"];
5540 [label="sb.Append('.WithLocation('); 726887"];
5541 [label="sb.Append(_startPosition.Value.Line + 1); 726888"];
5542 [label="sb.Append(_startPosition.Value.Line + 1); 726889"];
5543 [label="sb.Append(', '); 726890"];
5544 [label="sb.Append(', '); 726891"];
5545 [label="sb.Append(_startPosition.Value.Character + 1); 726892"];
5546 [label="sb.Append(_startPosition.Value.Character + 1); 726893"];
5547 [label="sb.Append(')'); 726894"];
5548 [label="sb.Append(')'); 726895"];
5549 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 726896"];
5550 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 726897"];
5551 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 726898"];
5552 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 726899"];
5553 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 726900"];
5554 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 726901"];
5555 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 726902"];
5556 [label="return sb.ToString(); 726903"];
5557 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726904"];
5558 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 726905"];
5559 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 726906"];
5560 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 726907"];
5561 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 726908"];
5562 [label="assertText.AppendLine(); 726909"];
5563 [label="assertText.AppendLine('Diff:'); 726910"];
5564 [label="assertText.AppendLine('Diff:'); 726911"];
5565 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726912"];
5566 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726913"];
5567 [label="new[] { '\\r', '\\n' } 726914"];
5568 [label="'\\r' 726915"];
5569 [label="'\\n' 726916"];
5570 [label="new[] { '\\r', '\\n' } 726917"];
5571 [label="new[] { '\\r', '\\n' } 726918"];
5572 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 726919"];
5573 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726920"];
5574 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726921"];
5575 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 726922"];
5576 [label="param DiffReport(IEnumerable<T> expected) 726923"];
5577 [label="param DiffReport(IEnumerable<T> actual) 726924"];
5578 [label="param DiffReport(string separator) 726925"];
5579 [label="param DiffReport(IEqualityComparer<T> comparer = null) 726926"];
5580 [label="param DiffReport(Func<T, string> toString = null) 726927"];
5581 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 726928"];
5582 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 726929"];
5583 [label="(comparer != null) 726930"];
5584 [label="EqualityComparer<T>.Default 726931"];
5585 [label="new LCS<T>(EqualityComparer<T>.Default) 726932"];
5586 [label="param LCS(IEqualityComparer<T> comparer) 726933"];
5587 [label="param LCS(this) 726934"];
5588 [label="1 726935"];
5589 [label="DeleteCost = 1 726936"];
5590 [label="1 726937"];
5591 [label="InsertCost = 1 726938"];
5592 [label="2 726939"];
5593 [label="UpdateCost = 2 726940"];
5594 [label="param LongestCommonSubsequence(this) 726941"];
5595 [label="_comparer 726942"];
5596 [label="_comparer 726943"];
5597 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 726944"];
5598 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 726945"];
5599 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 726946"];
5600 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 726947"];
5601 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 726948"];
5602 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726949"];
5603 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726950"];
5604 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726951"];
5605 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726952"];
5606 [label="lcs.CalculateDiff(expectedList, actualList, toString) 726953"];
5607 [label="param CalculateDiff(IList<T> sequenceA) 726954"];
5608 [label="param CalculateDiff(IList<T> sequenceB) 726955"];
5609 [label="param CalculateDiff(Func<T, string> toString) 726956"];
5610 [label="param CalculateDiff(this) 726957"];
5611 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 726958"];
5612 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 726959"];
5613 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 726960"];
5614 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 726961"];
5615 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 726962"];
5616 [label="param GetEdits(TSequence sequenceA) 726963"];
5617 [label="param GetEdits(int lengthA) 726964"];
5618 [label="param GetEdits(TSequence sequenceB) 726965"];
5619 [label="param GetEdits(int lengthB) 726966"];
5620 [label="param GetEdits(this) 726967"];
5621 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726968"];
5622 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726969"];
5623 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726970"];
5624 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726971"];
5625 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 726972"];
5626 [label="param ComputeCostMatrix(TSequence sequenceA) 726973"];
5627 [label="param ComputeCostMatrix(int lengthA) 726974"];
5628 [label="param ComputeCostMatrix(TSequence sequenceB) 726975"];
5629 [label="param ComputeCostMatrix(int lengthB) 726976"];
5630 [label="param ComputeCostMatrix(this) 726977"];
5631 [label="var la = lengthA + 1; 726978"];
5632 [label="var la = lengthA + 1; 726979"];
5633 [label="var lb = lengthB + 1; 726980"];
5634 [label="var lb = lengthB + 1; 726981"];
5635 [label="var d = new int[la, lb]; 726982"];
5636 [label="d[0, 0] = 0; 726983"];
5637 [label="d[0, 0] 726984"];
5638 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 726985"];
5639 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 726986"];
5640 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 726987"];
5641 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 726988"];
5642 [label="d[i, 0] 726989"];
5643 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 726990"];
5644 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 726991"];
5645 [label="d[0, j] = d[0, j - 1] + InsertCost; 726992"];
5646 [label="d[0, j] = d[0, j - 1] + InsertCost; 726993"];
5647 [label="d[0, j] 726994"];
5648 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 726995"];
5649 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 726996"];
5650 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 726997"];
5651 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 726998"];
5652 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 726999"];
5653 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727000"];
5654 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727001"];
5655 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727002"];
5656 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 727003"];
5657 [label="param ItemsEqual(IList<T> sequenceA) 727004"];
5658 [label="param ItemsEqual(int indexA) 727005"];
5659 [label="param ItemsEqual(IList<T> sequenceB) 727006"];
5660 [label="param ItemsEqual(int indexB) 727007"];
5661 [label="param ItemsEqual(this) 727008"];
5662 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 727009"];
5663 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 727010"];
5664 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 727011"];
5665 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727012"];
5666 [label="int m2 = d[i - 1, j] + DeleteCost; 727013"];
5667 [label="int m2 = d[i - 1, j] + DeleteCost; 727014"];
5668 [label="int m3 = d[i, j - 1] + InsertCost; 727015"];
5669 [label="int m3 = d[i, j - 1] + InsertCost; 727016"];
5670 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727017"];
5671 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727018"];
5672 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727019"];
5673 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727020"];
5674 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727021"];
5675 [label="d[i, j] 727022"];
5676 [label="return d; 727023"];
5677 [label="int i = lengthA; 727024"];
5678 [label="int j = lengthB; 727025"];
5679 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 727026"];
5680 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 727027"];
5681 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 727028"];
5682 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 727029"];
5683 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 727030"];
5684 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 727031"];
5685 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 727032"];
5686 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 727033"];
5687 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 727034"];
5688 [label="i--; 727035"];
5689 [label="j--; 727036"];
5690 [label="yield return new Edit(EditKind.Update, i, j); 727037"];
5691 [label="yield return new Edit(EditKind.Update, i, j); 727038"];
5692 [label="yield return new Edit(EditKind.Update, i, j); 727039"];
5693 [label="yield return new Edit(EditKind.Update, i, j); 727040"];
5694 [label="new Edit(EditKind.Update, i, j) 727041"];
5695 [label="param Edit(EditKind kind) 727042"];
5696 [label="param Edit(int indexA) 727043"];
5697 [label="param Edit(int indexB) 727044"];
5698 [label="param Edit(this) 727045"];
5699 [label="this.Kind 727046"];
5700 [label="this.IndexA 727047"];
5701 [label="this.IndexB 727048"];
5702 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 727049"];
5703 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 727050"];
5704 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 727051"];
5705 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 727052"];
5706 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 727053"];
5707 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 727054"];
5708 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 727055"];
5709 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 727056"];
5710 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 727057"];
5711 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 727058"];
5712 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 727059"];
5713 [label="actualText.Free(); 727060"];
5714 [label="expectedText.Free(); 727061"];
5715 [label="return assertText.ToString(); 727062"];
5716 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 727063"];
5717 [label="diagnostics.Verify(expected); 727064"];
5718 [label="VerifyAssemblyIds(c, diagnostics); 727065"];
5719 [label="VerifyAssemblyIds(c, diagnostics); 727066"];
5720 [label="VerifyAssemblyIds(c, diagnostics) 727067"];
5721 [label="param VerifyAssemblyIds(TCompilation c) 727068"];
5722 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 727069"];
5723 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 727070"];
5724 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 727071"];
5725 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 727072"];
5726 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 727073"];
5727 [label="CustomAssert.True(assemblyIds.IsEmpty); 727074"];
5728 [label="VerifyAssemblyIds(c, diagnostics); 727075"];
5729 [label="return c; 727076"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 573;
574 -> 1;
575 -> 1;
576 -> 0;
576 -> 1;
577 -> 1;
578 -> 576;
578 -> 577;
579 -> 575;
579 -> 577;
580 -> 575;
580 -> 577;
581 -> 575;
581 -> 577;
582 -> 575;
582 -> 577;
583 -> 575;
583 -> 577;
584 -> 575;
584 -> 577;
585 -> 578;
585 -> 577;
586 -> 579;
586 -> 577;
587 -> 580;
587 -> 577;
588 -> 581;
588 -> 577;
589 -> 582;
589 -> 577;
590 -> 583;
590 -> 577;
591 -> 584;
591 -> 577;
592 -> 577;
593 -> 585;
593 -> 592;
594 -> 586;
594 -> 592;
595 -> 587;
595 -> 592;
596 -> 588;
596 -> 592;
597 -> 589;
597 -> 592;
598 -> 590;
598 -> 592;
599 -> 591;
599 -> 592;
600 -> 593;
600 -> 592;
601 -> 593;
601 -> 592;
602 -> 592;
603 -> 594;
603 -> 592;
604 -> 595;
604 -> 592;
605 -> 596;
605 -> 592;
606 -> 597;
606 -> 592;
607 -> 598;
607 -> 592;
609 -> 608;
611 -> 610;
612 -> 599;
612 -> 592;
613 -> 592;
614 -> 601;
614 -> 613;
615 -> 602;
615 -> 613;
616 -> 603;
616 -> 613;
617 -> 604;
617 -> 613;
618 -> 605;
618 -> 613;
619 -> 606;
619 -> 613;
620 -> 607;
620 -> 613;
621 -> 601;
621 -> 613;
622 -> 612;
622 -> 613;
623 -> 602;
623 -> 613;
624 -> 602;
624 -> 613;
625 -> 602;
625 -> 613;
626 -> 625;
626 -> 613;
627 -> 625;
627 -> 613;
628 -> 625;
628 -> 613;
629 -> 625;
629 -> 613;
630 -> 625;
630 -> 613;
631 -> 625;
631 -> 613;
632 -> 625;
632 -> 613;
633 -> 625;
633 -> 613;
634 -> 625;
634 -> 613;
635 -> 625;
635 -> 613;
636 -> 625;
636 -> 613;
637 -> 625;
637 -> 613;
638 -> 625;
638 -> 613;
639 -> 625;
639 -> 613;
640 -> 625;
640 -> 613;
641 -> 614;
641 -> 625;
641 -> 613;
642 -> 615;
642 -> 625;
642 -> 613;
643 -> 616;
643 -> 625;
643 -> 613;
644 -> 617;
644 -> 625;
644 -> 613;
645 -> 618;
645 -> 625;
645 -> 613;
646 -> 619;
646 -> 625;
646 -> 613;
647 -> 620;
647 -> 625;
647 -> 613;
648 -> 621;
648 -> 613;
649 -> 648;
649 -> 625;
649 -> 613;
650 -> 622;
650 -> 625;
650 -> 613;
651 -> 623;
651 -> 625;
651 -> 613;
652 -> 624;
652 -> 625;
652 -> 613;
653 -> 602;
653 -> 577;
654 -> 653;
654 -> 1;
655 -> 575;
655 -> 1;
656 -> 1;
657 -> 575;
657 -> 656;
658 -> 654;
658 -> 656;
659 -> 658;
659 -> 641;
659 -> 656;
660 -> 658;
660 -> 642;
660 -> 656;
661 -> 658;
661 -> 643;
661 -> 656;
662 -> 657;
662 -> 656;
663 -> 658;
663 -> 645;
663 -> 656;
664 -> 658;
664 -> 646;
664 -> 656;
665 -> 656;
666 -> 658;
666 -> 649;
666 -> 656;
667 -> 658;
667 -> 650;
667 -> 656;
668 -> 658;
668 -> 651;
668 -> 656;
669 -> 658;
669 -> 652;
669 -> 656;
670 -> 656;
671 -> 659;
671 -> 670;
672 -> 660;
672 -> 670;
673 -> 661;
673 -> 670;
674 -> 662;
674 -> 670;
675 -> 663;
675 -> 670;
676 -> 664;
676 -> 670;
677 -> 665;
677 -> 670;
678 -> 666;
678 -> 670;
679 -> 667;
679 -> 670;
680 -> 668;
680 -> 670;
681 -> 669;
681 -> 670;
682 -> 665;
682 -> 670;
683 -> 682;
683 -> 670;
684 -> 682;
684 -> 670;
685 -> 682;
685 -> 670;
686 -> 682;
686 -> 670;
687 -> 682;
687 -> 670;
688 -> 682;
688 -> 670;
689 -> 682;
689 -> 670;
690 -> 682;
690 -> 670;
691 -> 682;
691 -> 670;
692 -> 682;
692 -> 670;
693 -> 682;
693 -> 670;
694 -> 682;
694 -> 670;
695 -> 682;
695 -> 670;
696 -> 682;
696 -> 670;
697 -> 682;
697 -> 670;
698 -> 674;
698 -> 682;
698 -> 670;
699 -> 677;
699 -> 682;
699 -> 670;
700 -> 665;
700 -> 1;
701 -> 1;
702 -> 575;
702 -> 701;
703 -> 575;
703 -> 701;
704 -> 700;
704 -> 701;
705 -> 704;
705 -> 671;
705 -> 701;
706 -> 704;
706 -> 672;
706 -> 701;
707 -> 704;
707 -> 673;
707 -> 701;
708 -> 704;
708 -> 698;
708 -> 701;
709 -> 701;
710 -> 702;
710 -> 709;
710 -> 701;
711 -> 703;
711 -> 709;
711 -> 701;
712 -> 710;
712 -> 711;
712 -> 701;
713 -> 704;
713 -> 676;
713 -> 701;
714 -> 704;
714 -> 699;
714 -> 701;
715 -> 704;
715 -> 678;
715 -> 701;
716 -> 704;
716 -> 679;
716 -> 701;
717 -> 704;
717 -> 680;
717 -> 701;
718 -> 704;
718 -> 681;
718 -> 701;
719 -> 701;
720 -> 705;
720 -> 719;
721 -> 706;
721 -> 719;
722 -> 707;
722 -> 719;
723 -> 708;
723 -> 719;
724 -> 712;
724 -> 719;
725 -> 713;
725 -> 719;
726 -> 714;
726 -> 719;
727 -> 715;
727 -> 719;
728 -> 716;
728 -> 719;
729 -> 717;
729 -> 719;
730 -> 718;
730 -> 719;
731 -> 709;
731 -> 719;
732 -> 731;
732 -> 719;
733 -> 731;
733 -> 719;
734 -> 731;
734 -> 719;
735 -> 731;
735 -> 719;
736 -> 731;
736 -> 719;
737 -> 731;
737 -> 719;
738 -> 731;
738 -> 719;
739 -> 731;
739 -> 719;
740 -> 731;
740 -> 719;
741 -> 731;
741 -> 719;
742 -> 731;
742 -> 719;
743 -> 731;
743 -> 719;
744 -> 731;
744 -> 719;
745 -> 731;
745 -> 719;
746 -> 731;
746 -> 719;
747 -> 724;
747 -> 731;
747 -> 719;
748 -> 709;
748 -> 1;
749 -> 748;
749 -> 575;
749 -> 1;
750 -> 1;
751 -> 574;
751 -> 750;
752 -> 575;
752 -> 750;
753 -> 750;
755 -> 0;
756 -> 0;
757 -> 0;
760 -> 754;
760 -> 759;
761 -> 755;
761 -> 759;
762 -> 756;
762 -> 759;
763 -> 757;
763 -> 759;
764 -> 758;
764 -> 759;
765 -> 759;
766 -> 765;
766 -> 759;
767 -> 765;
767 -> 759;
768 -> 765;
768 -> 759;
769 -> 759;
770 -> 761;
770 -> 769;
770 -> 759;
771 -> 762;
771 -> 0;
771 -> 759;
772 -> 763;
772 -> 0;
772 -> 759;
773 -> 760;
773 -> 765;
773 -> 759;
774 -> 761;
774 -> 765;
774 -> 759;
775 -> 762;
775 -> 765;
775 -> 759;
776 -> 764;
776 -> 765;
776 -> 759;
777 -> 763;
777 -> 765;
777 -> 759;
778 -> 759;
779 -> 753;
779 -> 751;
779 -> 571;
779 -> 750;
780 -> 779;
780 -> 753;
781 -> 780;
781 -> 779;
781 -> 753;
782 -> 753;
783 -> 781;
783 -> 779;
783 -> 782;
783 -> 753;
784 -> 780;
784 -> 779;
784 -> 782;
784 -> 753;
785 -> 778;
785 -> 783;
786 -> 779;
786 -> 785;
786 -> 773;
786 -> 776;
786 -> 774;
786 -> 775;
786 -> 777;
786 -> 0;
786 -> 750;
787 -> 779;
787 -> 753;
788 -> 779;
788 -> 753;
789 -> 753;
790 -> 787;
790 -> 786;
790 -> 789;
791 -> 788;
791 -> 790;
791 -> 789;
792 -> 791;
792 -> 789;
793 -> 0;
793 -> 792;
794 -> 791;
794 -> 789;
795 -> 787;
795 -> 789;
796 -> 788;
796 -> 793;
796 -> 794;
796 -> 795;
796 -> 789;
797 -> 0;
797 -> 796;
798 -> 797;
799 -> 788;
799 -> 798;
800 -> 799;
800 -> 778;
800 -> 798;
801 -> 800;
802 -> 797;
803 -> 0;
803 -> 797;
804 -> 803;
805 -> 779;
805 -> 753;
806 -> 779;
806 -> 753;
807 -> 805;
807 -> 806;
807 -> 753;
808 -> 779;
808 -> 807;
808 -> 803;
808 -> 750;
810 -> 809;
812 -> 811;
814 -> 813;
817 -> 816;
818 -> 0;
819 -> 0;
820 -> 0;
821 -> 820;
823 -> 818;
823 -> 819;
823 -> 821;
823 -> 822;
824 -> 823;
826 -> 825;
828 -> 827;
830 -> 829;
832 -> 831;
833 -> 779;
833 -> 753;
834 -> 779;
834 -> 753;
835 -> 779;
835 -> 753;
836 -> 779;
836 -> 753;
837 -> 779;
837 -> 753;
838 -> 753;
839 -> 836;
839 -> 838;
839 -> 753;
840 -> 837;
840 -> 838;
840 -> 753;
841 -> 839;
841 -> 840;
841 -> 753;
842 -> 834;
842 -> 753;
843 -> 833;
843 -> 753;
844 -> 834;
844 -> 753;
845 -> 835;
845 -> 753;
846 -> 836;
846 -> 753;
847 -> 837;
847 -> 753;
848 -> 842;
848 -> 753;
849 -> 753;
850 -> 843;
850 -> 849;
851 -> 844;
851 -> 849;
852 -> 845;
852 -> 849;
853 -> 846;
853 -> 849;
854 -> 847;
854 -> 849;
855 -> 848;
855 -> 849;
856 -> 849;
857 -> 854;
857 -> 856;
857 -> 849;
858 -> 853;
858 -> 856;
858 -> 849;
859 -> 857;
859 -> 858;
859 -> 849;
860 -> 849;
861 -> 850;
861 -> 849;
862 -> 851;
862 -> 849;
863 -> 860;
863 -> 849;
864 -> 855;
864 -> 849;
865 -> 849;
866 -> 861;
866 -> 865;
867 -> 862;
867 -> 865;
868 -> 863;
868 -> 865;
869 -> 864;
869 -> 865;
870 -> 867;
870 -> 865;
871 -> 870;
871 -> 866;
871 -> 808;
871 -> 865;
872 -> 865;
873 -> 871;
873 -> 872;
874 -> 871;
874 -> 872;
875 -> 873;
875 -> 872;
876 -> 873;
876 -> 871;
876 -> 872;
877 -> 872;
878 -> 873;
878 -> 871;
878 -> 872;
879 -> 873;
879 -> 871;
879 -> 872;
880 -> 879;
880 -> 872;
881 -> 872;
882 -> 877;
882 -> 881;
882 -> 865;
883 -> 877;
883 -> 872;
884 -> 877;
884 -> 872;
885 -> 883;
885 -> 872;
886 -> 883;
886 -> 872;
887 -> 883;
887 -> 872;
888 -> 883;
888 -> 872;
889 -> 888;
889 -> 872;
890 -> 888;
890 -> 889;
891 -> 866;
891 -> 870;
891 -> 871;
891 -> 881;
891 -> 865;
892 -> 865;
893 -> 891;
893 -> 892;
893 -> 865;
894 -> 891;
894 -> 893;
895 -> 893;
896 -> 894;
896 -> 895;
897 -> 894;
897 -> 895;
898 -> 896;
898 -> 895;
899 -> 896;
899 -> 894;
899 -> 895;
900 -> 895;
901 -> 896;
901 -> 894;
901 -> 895;
902 -> 896;
902 -> 894;
902 -> 895;
903 -> 902;
903 -> 895;
904 -> 900;
904 -> 895;
905 -> 900;
905 -> 895;
906 -> 904;
906 -> 895;
907 -> 904;
907 -> 895;
908 -> 904;
908 -> 895;
909 -> 904;
909 -> 895;
910 -> 909;
910 -> 895;
911 -> 893;
912 -> 895;
912 -> 911;
912 -> 893;
913 -> 891;
913 -> 865;
914 -> 849;
915 -> 895;
915 -> 914;
915 -> 849;
916 -> 913;
916 -> 849;
917 -> 895;
917 -> 872;
918 -> 895;
918 -> 872;
919 -> 917;
919 -> 872;
920 -> 917;
920 -> 895;
920 -> 872;
921 -> 917;
921 -> 895;
921 -> 872;
922 -> 917;
922 -> 895;
922 -> 872;
923 -> 922;
923 -> 872;
924 -> 900;
925 -> 900;
926 -> 924;
926 -> 900;
927 -> 924;
927 -> 900;
928 -> 924;
928 -> 900;
929 -> 924;
929 -> 900;
930 -> 929;
930 -> 900;
931 -> 895;
932 -> 900;
932 -> 931;
932 -> 895;
933 -> 895;
933 -> 865;
934 -> 900;
934 -> 914;
934 -> 849;
935 -> 933;
935 -> 849;
936 -> 900;
937 -> 900;
937 -> 865;
938 -> 937;
938 -> 849;
939 -> 779;
939 -> 753;
940 -> 779;
940 -> 753;
941 -> 779;
941 -> 753;
942 -> 779;
942 -> 753;
943 -> 942;
943 -> 753;
944 -> 942;
944 -> 753;
945 -> 942;
945 -> 753;
946 -> 942;
946 -> 753;
947 -> 942;
947 -> 753;
948 -> 942;
948 -> 753;
949 -> 939;
949 -> 942;
949 -> 753;
950 -> 940;
950 -> 942;
950 -> 753;
951 -> 941;
951 -> 942;
951 -> 753;
952 -> 942;
952 -> 753;
953 -> 753;
954 -> 952;
954 -> 953;
954 -> 943;
954 -> 949;
954 -> 950;
954 -> 946;
954 -> 951;
954 -> 948;
954 -> 900;
954 -> 753;
955 -> 954;
955 -> 942;
955 -> 753;
956 -> 753;
957 -> 956;
957 -> 942;
957 -> 753;
958 -> 939;
958 -> 753;
959 -> 753;
960 -> 753;
961 -> 958;
961 -> 960;
962 -> 959;
962 -> 960;
963 -> 961;
963 -> 960;
964 -> 960;
965 -> 963;
965 -> 964;
966 -> 962;
966 -> 964;
967 -> 966;
967 -> 964;
968 -> 966;
968 -> 964;
969 -> 966;
969 -> 964;
970 -> 966;
970 -> 964;
971 -> 966;
971 -> 964;
972 -> 964;
973 -> 965;
973 -> 972;
973 -> 964;
974 -> 966;
974 -> 964;
975 -> 974;
975 -> 967;
975 -> 968;
975 -> 969;
975 -> 970;
975 -> 971;
975 -> 964;
976 -> 965;
976 -> 954;
976 -> 955;
976 -> 957;
976 -> 966;
976 -> 964;
977 -> 965;
977 -> 966;
977 -> 964;
978 -> 959;
978 -> 942;
978 -> 753;
979 -> 779;
979 -> 954;
979 -> 955;
979 -> 957;
979 -> 978;
979 -> 956;
979 -> 975;
979 -> 976;
979 -> 977;
979 -> 750;
980 -> 779;
980 -> 753;
981 -> 779;
981 -> 753;
982 -> 779;
982 -> 753;
983 -> 779;
983 -> 753;
984 -> 980;
984 -> 979;
984 -> 753;
985 -> 753;
986 -> 983;
986 -> 985;
987 -> 986;
987 -> 979;
987 -> 0;
987 -> 985;
988 -> 987;
988 -> 753;
989 -> 753;
990 -> 980;
990 -> 979;
990 -> 989;
990 -> 753;
991 -> 988;
991 -> 990;
991 -> 753;
992 -> 980;
992 -> 979;
992 -> 991;
993 -> 992;
993 -> 753;
994 -> 984;
994 -> 753;
995 -> 981;
995 -> 753;
996 -> 982;
996 -> 753;
997 -> 753;
998 -> 993;
998 -> 997;
999 -> 994;
999 -> 997;
1000 -> 995;
1000 -> 997;
1001 -> 996;
1001 -> 997;
1002 -> 983;
1002 -> 997;
1003 -> 997;
1004 -> 998;
1004 -> 1003;
1004 -> 997;
1005 -> 1001;
1005 -> 997;
1006 -> 1001;
1006 -> 979;
1006 -> 997;
1007 -> 1002;
1007 -> 979;
1007 -> 997;
1008 -> 997;
1009 -> 1007;
1009 -> 1008;
1010 -> 1007;
1010 -> 1008;
1011 -> 1008;
1012 -> 1011;
1012 -> 1008;
1013 -> 1011;
1013 -> 1008;
1014 -> 1011;
1014 -> 1008;
1015 -> 1011;
1015 -> 1008;
1016 -> 1009;
1016 -> 1011;
1016 -> 1008;
1017 -> 1007;
1017 -> 1011;
1017 -> 1012;
1017 -> 1013;
1017 -> 1014;
1017 -> 1015;
1017 -> 1016;
1017 -> 997;
1018 -> 999;
1018 -> 997;
1019 -> 1000;
1019 -> 997;
1020 -> 1001;
1020 -> 997;
1021 -> 997;
1022 -> 1018;
1022 -> 1021;
1023 -> 1019;
1023 -> 1021;
1024 -> 1020;
1024 -> 1021;
1025 -> 1017;
1025 -> 1021;
1026 -> 1021;
1027 -> 1023;
1027 -> 1026;
1027 -> 1021;
1028 -> 1024;
1028 -> 1026;
1028 -> 1021;
1029 -> 1027;
1029 -> 1028;
1029 -> 1021;
1030 -> 1022;
1030 -> 1025;
1030 -> 1021;
1031 -> 1023;
1031 -> 1025;
1031 -> 1021;
1032 -> 1024;
1032 -> 1025;
1032 -> 1021;
1033 -> 997;
1034 -> 998;
1034 -> 997;
1035 -> 997;
1036 -> 1034;
1036 -> 1035;
1037 -> 1017;
1037 -> 1035;
1038 -> 1036;
1038 -> 1035;
1039 -> 1035;
1040 -> 1038;
1040 -> 1039;
1041 -> 1037;
1041 -> 1039;
1042 -> 1041;
1042 -> 1039;
1043 -> 1042;
1043 -> 1040;
1043 -> 1017;
1043 -> 1030;
1043 -> 1031;
1043 -> 1032;
1043 -> 1039;
1044 -> 1039;
1045 -> 1043;
1045 -> 1044;
1046 -> 1043;
1046 -> 1044;
1047 -> 1045;
1047 -> 1044;
1048 -> 1044;
1049 -> 1047;
1049 -> 1048;
1050 -> 1046;
1050 -> 1048;
1051 -> 1050;
1051 -> 1043;
1051 -> 1048;
1052 -> 1049;
1052 -> 1048;
1053 -> 1051;
1053 -> 1052;
1053 -> 1043;
1053 -> 1048;
1054 -> 0;
1054 -> 1048;
1055 -> 1048;
1056 -> 1049;
1056 -> 1053;
1056 -> 1055;
1056 -> 1048;
1057 -> 1050;
1057 -> 1053;
1057 -> 1048;
1058 -> 1049;
1058 -> 1053;
1058 -> 1048;
1059 -> 1050;
1059 -> 1057;
1059 -> 1056;
1060 -> 1049;
1060 -> 1056;
1061 -> 1050;
1061 -> 1059;
1062 -> 1049;
1062 -> 1059;
1063 -> 0;
1063 -> 1061;
1064 -> 1049;
1064 -> 1048;
1065 -> 1063;
1065 -> 1048;
1066 -> 1048;
1067 -> 1064;
1067 -> 1066;
1068 -> 1065;
1068 -> 1066;
1069 -> 1050;
1069 -> 1066;
1070 -> 1067;
1070 -> 1066;
1071 -> 1068;
1071 -> 1066;
1072 -> 1066;
1073 -> 1070;
1073 -> 1072;
1074 -> 1071;
1074 -> 1072;
1075 -> 1074;
1075 -> 1072;
1076 -> 1072;
1077 -> 1073;
1077 -> 1072;
1078 -> 1074;
1078 -> 1072;
1079 -> 1072;
1080 -> 1072;
1081 -> 1077;
1081 -> 1080;
1082 -> 1078;
1082 -> 1080;
1083 -> 1079;
1083 -> 1080;
1084 -> 1081;
1084 -> 1083;
1084 -> 1080;
1085 -> 1082;
1085 -> 1083;
1085 -> 1080;
1086 -> 1079;
1086 -> 1066;
1087 -> 1066;
1088 -> 1066;
1089 -> 1069;
1089 -> 1088;
1090 -> 1089;
1090 -> 1061;
1090 -> 1088;
1091 -> 1090;
1091 -> 1066;
1092 -> 1086;
1092 -> 1066;
1093 -> 1087;
1093 -> 1066;
1094 -> 1092;
1094 -> 1093;
1094 -> 1091;
1094 -> 1084;
1094 -> 1085;
1094 -> 1061;
1094 -> 1066;
1095 -> 1066;
1096 -> 1094;
1096 -> 1095;
1097 -> 1096;
1097 -> 1094;
1097 -> 1095;
1098 -> 1067;
1098 -> 1097;
1099 -> 1097;
1100 -> 1098;
1100 -> 1099;
1101 -> 1100;
1101 -> 1099;
1102 -> 1100;
1102 -> 1099;
1103 -> 1101;
1103 -> 1099;
1104 -> 1099;
1105 -> 1103;
1105 -> 1104;
1106 -> 1102;
1106 -> 1104;
1107 -> 1105;
1107 -> 1100;
1107 -> 1104;
1108 -> 1104;
1109 -> 1108;
1109 -> 1104;
1110 -> 1105;
1110 -> 1100;
1110 -> 1104;
1111 -> 1106;
1111 -> 1110;
1111 -> 1107;
1111 -> 1100;
1112 -> 1106;
1112 -> 1110;
1112 -> 1111;
1113 -> 1111;
1114 -> 1112;
1114 -> 1104;
1115 -> 1104;
1116 -> 1114;
1116 -> 1115;
1116 -> 1104;
1117 -> 1114;
1117 -> 1105;
1117 -> 1104;
1118 -> 1114;
1118 -> 1116;
1119 -> 0;
1119 -> 1116;
1120 -> 1114;
1120 -> 1118;
1120 -> 1116;
1121 -> 1104;
1122 -> 1121;
1122 -> 1099;
1123 -> 1099;
1124 -> 1102;
1124 -> 1123;
1125 -> 1123;
1126 -> 1124;
1126 -> 1120;
1126 -> 1125;
1127 -> 1126;
1127 -> 1123;
1128 -> 1099;
1129 -> 1103;
1129 -> 1128;
1130 -> 1122;
1130 -> 1128;
1131 -> 1127;
1131 -> 1128;
1132 -> 1102;
1132 -> 1128;
1133 -> 1128;
1134 -> 1132;
1134 -> 1133;
1135 -> 1134;
1135 -> 1120;
1135 -> 1133;
1136 -> 1135;
1136 -> 1128;
1137 -> 1128;
1138 -> 1129;
1138 -> 1136;
1138 -> 1128;
1139 -> 1130;
1139 -> 1128;
1140 -> 1131;
1140 -> 1139;
1141 -> 0;
1141 -> 1140;
1142 -> 1129;
1142 -> 1128;
1143 -> 1141;
1143 -> 1128;
1144 -> 1128;
1145 -> 1142;
1145 -> 1144;
1146 -> 1143;
1146 -> 1144;
1147 -> 1146;
1147 -> 1144;
1148 -> 1144;
1149 -> 1144;
1149 -> 1128;
1150 -> 1128;
1151 -> 1128;
1152 -> 1132;
1152 -> 1151;
1153 -> 1152;
1153 -> 1120;
1153 -> 1151;
1154 -> 1153;
1154 -> 1128;
1155 -> 1149;
1155 -> 1128;
1156 -> 1150;
1156 -> 1128;
1157 -> 1155;
1157 -> 1156;
1157 -> 1154;
1157 -> 1145;
1157 -> 1146;
1157 -> 1120;
1157 -> 1128;
1158 -> 1128;
1159 -> 1157;
1160 -> 1132;
1160 -> 1159;
1161 -> 1160;
1161 -> 1157;
1161 -> 1159;
1162 -> 1161;
1162 -> 1157;
1163 -> 1131;
1163 -> 1157;
1164 -> 1163;
1165 -> 1132;
1165 -> 1164;
1166 -> 1165;
1166 -> 1157;
1166 -> 1164;
1167 -> 1166;
1167 -> 1163;
1168 -> 1162;
1168 -> 1163;
1169 -> 1129;
1169 -> 1163;
1170 -> 1130;
1170 -> 1163;
1171 -> 1163;
1172 -> 1163;
1173 -> 1167;
1173 -> 1172;
1174 -> 1168;
1174 -> 1172;
1175 -> 1169;
1175 -> 1172;
1176 -> 1170;
1176 -> 1172;
1177 -> 1171;
1177 -> 1172;
1178 -> 1174;
1178 -> 1172;
1179 -> 1172;
1180 -> 1178;
1180 -> 1179;
1181 -> 1177;
1181 -> 1179;
1182 -> 1179;
1183 -> 1179;
1184 -> 1180;
1184 -> 1183;
1184 -> 1179;
1185 -> 1180;
1185 -> 1181;
1185 -> 1179;
1186 -> 1180;
1186 -> 1157;
1186 -> 1181;
1186 -> 1179;
1187 -> 1180;
1187 -> 1157;
1187 -> 1181;
1187 -> 1179;
1188 -> 1182;
1188 -> 1181;
1188 -> 1179;
1189 -> 1177;
1189 -> 1172;
1190 -> 1177;
1190 -> 1172;
1191 -> 1177;
1191 -> 1172;
1192 -> 1177;
1192 -> 1172;
1193 -> 1177;
1193 -> 1172;
1194 -> 1172;
1195 -> 1173;
1195 -> 1194;
1195 -> 1172;
1196 -> 1172;
1197 -> 1175;
1197 -> 1196;
1197 -> 1172;
1198 -> 1173;
1198 -> 1177;
1198 -> 1172;
1199 -> 1175;
1199 -> 1177;
1199 -> 1176;
1199 -> 1172;
1200 -> 1199;
1200 -> 1177;
1200 -> 1172;
1201 -> 1176;
1201 -> 1172;
1202 -> 1175;
1202 -> 1157;
1202 -> 1201;
1203 -> 1175;
1203 -> 1202;
1204 -> 1203;
1204 -> 1202;
1204 -> 1177;
1205 -> 1163;
1206 -> 1132;
1206 -> 1205;
1207 -> 1206;
1207 -> 1202;
1207 -> 1205;
1208 -> 1207;
1208 -> 1163;
1209 -> 1129;
1209 -> 1163;
1210 -> 1163;
1211 -> 1157;
1212 -> 1211;
1212 -> 1208;
1213 -> 1212;
1213 -> 1157;
1214 -> 1149;
1214 -> 1157;
1215 -> 1171;
1215 -> 1157;
1216 -> 1214;
1216 -> 1215;
1216 -> 1213;
1216 -> 1145;
1216 -> 1146;
1216 -> 1187;
1216 -> 1186;
1216 -> 1185;
1216 -> 1188;
1216 -> 1181;
1216 -> 1198;
1216 -> 1200;
1216 -> 1191;
1216 -> 1192;
1216 -> 1193;
1216 -> 1204;
1216 -> 1208;
1216 -> 1199;
1216 -> 1202;
1216 -> 1157;
1217 -> 1157;
1218 -> 1216;
1218 -> 1217;
1219 -> 1216;
1219 -> 1217;
1220 -> 1219;
1220 -> 1216;
1220 -> 1218;
1220 -> 1217;
1221 -> 1171;
1221 -> 1128;
1222 -> 1100;
1222 -> 1221;
1222 -> 1220;
1222 -> 1099;
1223 -> 1068;
1223 -> 1141;
1223 -> 1097;
1224 -> 1223;
1225 -> 1222;
1225 -> 1224;
1226 -> 1225;
1226 -> 1222;
1226 -> 1224;
1227 -> 1224;
1228 -> 1226;
1228 -> 1227;
1228 -> 1224;
1229 -> 1228;
1229 -> 1224;
1230 -> 1229;
1230 -> 1223;
1231 -> 1067;
1231 -> 1223;
1232 -> 1068;
1232 -> 0;
1232 -> 1223;
1233 -> 1230;
1233 -> 1232;
1234 -> 1222;
1234 -> 1232;
1235 -> 1232;
1236 -> 1232;
1237 -> 1233;
1237 -> 1236;
1238 -> 1234;
1238 -> 1236;
1239 -> 1235;
1239 -> 1236;
1240 -> 1238;
1240 -> 1236;
1241 -> 1236;
1242 -> 1240;
1242 -> 1241;
1243 -> 1239;
1243 -> 1241;
1244 -> 1242;
1244 -> 1241;
1245 -> 1241;
1246 -> 1244;
1246 -> 1245;
1247 -> 1243;
1247 -> 1245;
1248 -> 1245;
1249 -> 1245;
1250 -> 1246;
1250 -> 1249;
1250 -> 1245;
1251 -> 1246;
1251 -> 1230;
1251 -> 1247;
1251 -> 1245;
1252 -> 1246;
1252 -> 1230;
1252 -> 1247;
1252 -> 1245;
1253 -> 1248;
1253 -> 1247;
1253 -> 1245;
1254 -> 1239;
1254 -> 1236;
1255 -> 1239;
1255 -> 1236;
1256 -> 1236;
1257 -> 1237;
1257 -> 1256;
1257 -> 1236;
1258 -> 1237;
1258 -> 1239;
1258 -> 1236;
1259 -> 1067;
1259 -> 1230;
1259 -> 1097;
1260 -> 1097;
1261 -> 1259;
1261 -> 1260;
1262 -> 1235;
1262 -> 1260;
1263 -> 1262;
1263 -> 1251;
1263 -> 1260;
1264 -> 0;
1264 -> 1260;
1265 -> 1260;
1266 -> 1263;
1266 -> 1265;
1267 -> 1264;
1267 -> 1265;
1268 -> 1261;
1268 -> 1260;
1269 -> 1266;
1269 -> 1268;
1269 -> 1260;
1270 -> 1269;
1270 -> 1260;
1271 -> 1097;
1272 -> 1271;
1272 -> 1268;
1273 -> 1272;
1273 -> 1097;
1274 -> 1086;
1274 -> 1097;
1275 -> 1270;
1275 -> 1097;
1276 -> 1274;
1276 -> 1275;
1276 -> 1273;
1276 -> 1084;
1276 -> 1085;
1276 -> 1252;
1276 -> 1251;
1276 -> 1246;
1276 -> 1253;
1276 -> 1247;
1276 -> 1258;
1276 -> 1255;
1276 -> 1268;
1276 -> 1097;
1277 -> 1097;
1278 -> 1270;
1278 -> 1066;
1279 -> 1043;
1279 -> 1278;
1279 -> 1276;
1279 -> 1039;
1280 -> 1017;
1280 -> 997;
1281 -> 1002;
1281 -> 1279;
1281 -> 1280;
1281 -> 997;
1282 -> 1279;
1282 -> 997;
1283 -> 779;
1283 -> 1282;
1283 -> 1281;
1283 -> 750;
1284 -> 779;
1284 -> 753;
1285 -> 779;
1285 -> 753;
1286 -> 779;
1286 -> 753;
1287 -> 753;
1288 -> 1285;
1288 -> 1287;
1288 -> 753;
1289 -> 1286;
1289 -> 753;
1290 -> 1286;
1290 -> 1283;
1290 -> 1284;
1290 -> 753;
1291 -> 1285;
1291 -> 753;
1292 -> 753;
1293 -> 753;
1294 -> 1289;
1294 -> 1293;
1295 -> 1290;
1295 -> 1293;
1296 -> 1291;
1296 -> 1293;
1297 -> 1292;
1297 -> 1293;
1298 -> 1294;
1298 -> 1293;
1299 -> 1295;
1299 -> 1293;
1300 -> 1293;
1301 -> 1298;
1301 -> 1300;
1302 -> 1299;
1302 -> 1300;
1303 -> 1297;
1303 -> 1300;
1304 -> 1303;
1304 -> 1300;
1305 -> 1303;
1305 -> 1300;
1306 -> 1303;
1306 -> 1300;
1307 -> 1303;
1307 -> 1300;
1308 -> 1303;
1308 -> 1300;
1309 -> 1300;
1310 -> 1301;
1310 -> 1309;
1310 -> 1300;
1311 -> 1302;
1311 -> 1300;
1312 -> 0;
1312 -> 1300;
1313 -> 1300;
1314 -> 1311;
1314 -> 1313;
1315 -> 1312;
1315 -> 1313;
1316 -> 1302;
1316 -> 1300;
1317 -> 0;
1317 -> 1300;
1318 -> 1300;
1319 -> 1316;
1319 -> 1318;
1320 -> 1317;
1320 -> 1318;
1321 -> 1301;
1321 -> 1303;
1321 -> 1300;
1322 -> 1302;
1322 -> 1303;
1322 -> 1300;
1323 -> 1301;
1323 -> 1283;
1323 -> 1303;
1323 -> 1300;
1324 -> 1297;
1324 -> 1293;
1325 -> 1293;
1326 -> 1296;
1326 -> 1325;
1326 -> 1293;
1327 -> 1296;
1327 -> 1297;
1327 -> 1293;
1328 -> 779;
1328 -> 1292;
1328 -> 1283;
1328 -> 1323;
1328 -> 1322;
1328 -> 1321;
1328 -> 1307;
1328 -> 1308;
1328 -> 1327;
1328 -> 750;
1329 -> 779;
1329 -> 753;
1330 -> 779;
1330 -> 753;
1331 -> 779;
1331 -> 753;
1332 -> 779;
1332 -> 753;
1333 -> 779;
1333 -> 753;
1334 -> 1329;
1334 -> 753;
1335 -> 1330;
1335 -> 753;
1336 -> 1331;
1336 -> 753;
1337 -> 1332;
1337 -> 753;
1338 -> 753;
1339 -> 1334;
1339 -> 1338;
1340 -> 1335;
1340 -> 1338;
1341 -> 1336;
1341 -> 1338;
1342 -> 1337;
1342 -> 1338;
1343 -> 1333;
1343 -> 1338;
1344 -> 1338;
1345 -> 1340;
1345 -> 1344;
1345 -> 1338;
1346 -> 1339;
1346 -> 1338;
1347 -> 1340;
1347 -> 1338;
1348 -> 1341;
1348 -> 1338;
1349 -> 1338;
1350 -> 1341;
1350 -> 1349;
1350 -> 1338;
1351 -> 1338;
1352 -> 1346;
1352 -> 1351;
1353 -> 1347;
1353 -> 1351;
1354 -> 1348;
1354 -> 1351;
1355 -> 1350;
1355 -> 1351;
1356 -> 1343;
1356 -> 1351;
1357 -> 1352;
1357 -> 1328;
1357 -> 1351;
1358 -> 1352;
1358 -> 1357;
1359 -> 1353;
1359 -> 1357;
1360 -> 1354;
1360 -> 1357;
1361 -> 1355;
1361 -> 1357;
1362 -> 1357;
1363 -> 1357;
1364 -> 1358;
1364 -> 1363;
1365 -> 1359;
1365 -> 1363;
1366 -> 1360;
1366 -> 1363;
1367 -> 1361;
1367 -> 1363;
1368 -> 1362;
1368 -> 1363;
1369 -> 1356;
1369 -> 1363;
1370 -> 1364;
1370 -> 1357;
1370 -> 1363;
1371 -> 1370;
1371 -> 1363;
1372 -> 1364;
1372 -> 1357;
1372 -> 1363;
1373 -> 1368;
1373 -> 1363;
1374 -> 1370;
1374 -> 1363;
1375 -> 1363;
1376 -> 1365;
1376 -> 1363;
1377 -> 1363;
1378 -> 1372;
1378 -> 1377;
1379 -> 1373;
1379 -> 1377;
1380 -> 1374;
1380 -> 1377;
1381 -> 1375;
1381 -> 1377;
1382 -> 1376;
1382 -> 1377;
1383 -> 1369;
1383 -> 1377;
1384 -> 1377;
1385 -> 1379;
1385 -> 1384;
1385 -> 1377;
1386 -> 1377;
1387 -> 1386;
1387 -> 1363;
1388 -> 1363;
1389 -> 1387;
1389 -> 1388;
1389 -> 1363;
1391 -> 1390;
1392 -> 1391;
1392 -> 1390;
1393 -> 1390;
1394 -> 1392;
1394 -> 1390;
1395 -> 1394;
1396 -> 1363;
1397 -> 1395;
1397 -> 1396;
1398 -> 1395;
1398 -> 1392;
1398 -> 1396;
1399 -> 1396;
1400 -> 1398;
1400 -> 1399;
1401 -> 1397;
1401 -> 1399;
1402 -> 1401;
1402 -> 1399;
1403 -> 1401;
1403 -> 1399;
1404 -> 1401;
1404 -> 1399;
1405 -> 1401;
1405 -> 1399;
1406 -> 1400;
1406 -> 1401;
1406 -> 1399;
1407 -> 0;
1407 -> 1401;
1407 -> 1399;
1408 -> 1399;
1409 -> 1408;
1409 -> 1401;
1409 -> 1399;
1410 -> 1399;
1411 -> 1410;
1411 -> 1401;
1411 -> 1399;
1412 -> 1398;
1412 -> 1397;
1412 -> 1407;
1412 -> 1409;
1412 -> 1411;
1412 -> 1406;
1412 -> 1408;
1412 -> 1396;
1413 -> 1396;
1414 -> 1412;
1414 -> 1413;
1415 -> 1414;
1415 -> 1412;
1415 -> 0;
1415 -> 1413;
1416 -> 1413;
1417 -> 1414;
1417 -> 1412;
1417 -> 1416;
1417 -> 1413;
1418 -> 1415;
1418 -> 1396;
1419 -> 1412;
1419 -> 1396;
1420 -> 1419;
1420 -> 1363;
1421 -> 1364;
1421 -> 1363;
1422 -> 1364;
1422 -> 1357;
1422 -> 1363;
1423 -> 1363;
1424 -> 1421;
1424 -> 1423;
1425 -> 1422;
1425 -> 1423;
1426 -> 1424;
1426 -> 1423;
1427 -> 0;
1427 -> 1426;
1428 -> 1363;
1429 -> 1420;
1429 -> 1363;
1430 -> 1368;
1430 -> 1363;
1431 -> 1370;
1431 -> 1363;
1432 -> 1363;
1433 -> 1366;
1433 -> 1363;
1434 -> 1427;
1434 -> 1363;
1435 -> 1428;
1435 -> 1363;
1436 -> 1363;
1437 -> 1429;
1437 -> 1436;
1438 -> 1430;
1438 -> 1436;
1439 -> 1431;
1439 -> 1436;
1440 -> 1432;
1440 -> 1436;
1441 -> 1433;
1441 -> 1436;
1442 -> 1434;
1442 -> 1436;
1443 -> 1432;
1443 -> 1436;
1444 -> 1435;
1444 -> 1436;
1445 -> 1369;
1445 -> 1436;
1446 -> 1442;
1446 -> 1436;
1447 -> 1436;
1448 -> 1446;
1448 -> 1447;
1449 -> 1448;
1449 -> 0;
1449 -> 1447;
1450 -> 1437;
1450 -> 1449;
1451 -> 1438;
1451 -> 1449;
1452 -> 1439;
1452 -> 1449;
1453 -> 1440;
1453 -> 1449;
1454 -> 1441;
1454 -> 1449;
1455 -> 1442;
1455 -> 1449;
1456 -> 1443;
1456 -> 1449;
1457 -> 1444;
1457 -> 1449;
1458 -> 1449;
1459 -> 1450;
1459 -> 1458;
1460 -> 1451;
1460 -> 1458;
1461 -> 1452;
1461 -> 1458;
1462 -> 1453;
1462 -> 1458;
1463 -> 1454;
1463 -> 1458;
1464 -> 1455;
1464 -> 1458;
1465 -> 1456;
1465 -> 1458;
1466 -> 1457;
1466 -> 1458;
1467 -> 1445;
1467 -> 1458;
1468 -> 1458;
1469 -> 1460;
1469 -> 1468;
1469 -> 1458;
1470 -> 1459;
1470 -> 1469;
1471 -> 1461;
1471 -> 1469;
1472 -> 1462;
1472 -> 1469;
1473 -> 1463;
1473 -> 1469;
1474 -> 1464;
1474 -> 1469;
1475 -> 1465;
1475 -> 1469;
1476 -> 1466;
1476 -> 1469;
1477 -> 1469;
1478 -> 1470;
1478 -> 1477;
1479 -> 1471;
1479 -> 1477;
1480 -> 1472;
1480 -> 1477;
1481 -> 1473;
1481 -> 1477;
1482 -> 1474;
1482 -> 1477;
1483 -> 1475;
1483 -> 1477;
1484 -> 1476;
1484 -> 1477;
1485 -> 1467;
1485 -> 1477;
1486 -> 1477;
1487 -> 1478;
1487 -> 1486;
1488 -> 1487;
1488 -> 1412;
1488 -> 0;
1488 -> 1486;
1489 -> 1486;
1490 -> 1487;
1490 -> 1412;
1490 -> 1489;
1490 -> 1486;
1491 -> 1488;
1491 -> 1477;
1492 -> 1482;
1492 -> 1477;
1493 -> 1477;
1494 -> 1492;
1494 -> 1493;
1495 -> 1494;
1495 -> 0;
1495 -> 1493;
1496 -> 1494;
1496 -> 0;
1496 -> 1493;
1497 -> 1493;
1498 -> 0;
1498 -> 1493;
1499 -> 1494;
1499 -> 1498;
1499 -> 1493;
1500 -> 0;
1500 -> 1493;
1501 -> 1494;
1501 -> 1500;
1501 -> 1493;
1502 -> 1493;
1503 -> 0;
1503 -> 1493;
1504 -> 1494;
1504 -> 1503;
1504 -> 1493;
1505 -> 1504;
1505 -> 1493;
1506 -> 1493;
1507 -> 1505;
1507 -> 1506;
1508 -> 1506;
1509 -> 1507;
1509 -> 1508;
1509 -> 1506;
1510 -> 1477;
1511 -> 1485;
1511 -> 1477;
1512 -> 1477;
1513 -> 1477;
1514 -> 1478;
1514 -> 1513;
1515 -> 1513;
1516 -> 1514;
1516 -> 1515;
1517 -> 1516;
1517 -> 1412;
1517 -> 1515;
1518 -> 1517;
1518 -> 1513;
1519 -> 1518;
1519 -> 1477;
1520 -> 1511;
1520 -> 1519;
1520 -> 1477;
1521 -> 1520;
1522 -> 1510;
1522 -> 1521;
1522 -> 1520;
1523 -> 1478;
1523 -> 1522;
1524 -> 1479;
1524 -> 1522;
1525 -> 1480;
1525 -> 1522;
1526 -> 1481;
1526 -> 1522;
1527 -> 1482;
1527 -> 1522;
1528 -> 1485;
1528 -> 1522;
1529 -> 1483;
1529 -> 1522;
1530 -> 1484;
1530 -> 1522;
1531 -> 1522;
1532 -> 1523;
1532 -> 1531;
1533 -> 1524;
1533 -> 1531;
1534 -> 1525;
1534 -> 1531;
1535 -> 1526;
1535 -> 1531;
1536 -> 1527;
1536 -> 1531;
1537 -> 1528;
1537 -> 1531;
1538 -> 1529;
1538 -> 1531;
1539 -> 1530;
1539 -> 1531;
1540 -> 1511;
1540 -> 1531;
1541 -> 1522;
1542 -> 1522;
1543 -> 1478;
1543 -> 1542;
1544 -> 1543;
1544 -> 1412;
1544 -> 0;
1544 -> 1542;
1545 -> 1542;
1546 -> 1543;
1546 -> 1412;
1546 -> 1545;
1546 -> 1542;
1547 -> 1544;
1547 -> 1522;
1548 -> 1482;
1548 -> 0;
1548 -> 1520;
1549 -> 1520;
1550 -> 1523;
1550 -> 1531;
1551 -> 1524;
1551 -> 1531;
1552 -> 1525;
1552 -> 1531;
1553 -> 1526;
1553 -> 1531;
1554 -> 1527;
1554 -> 1531;
1555 -> 1528;
1555 -> 1531;
1556 -> 1529;
1556 -> 1531;
1557 -> 1539;
1557 -> 1531;
1558 -> 1520;
1558 -> 1531;
1559 -> 1531;
1560 -> 1550;
1560 -> 1559;
1561 -> 1560;
1561 -> 1412;
1561 -> 0;
1561 -> 1559;
1562 -> 1559;
1563 -> 1560;
1563 -> 1412;
1563 -> 1562;
1563 -> 1559;
1564 -> 1561;
1564 -> 1531;
1565 -> 1531;
1566 -> 1558;
1566 -> 1565;
1567 -> 0;
1567 -> 1565;
1568 -> 1567;
1568 -> 1531;
1569 -> 1554;
1569 -> 1568;
1569 -> 1531;
1570 -> 1531;
1571 -> 1531;
1572 -> 1558;
1572 -> 1571;
1573 -> 1571;
1574 -> 1572;
1574 -> 1426;
1574 -> 1573;
1574 -> 1571;
1575 -> 1574;
1576 -> 1572;
1576 -> 1426;
1576 -> 1574;
1577 -> 1572;
1577 -> 1426;
1577 -> 1574;
1578 -> 1575;
1578 -> 1574;
1579 -> 1574;
1580 -> 1572;
1580 -> 1578;
1580 -> 1571;
1581 -> 1580;
1581 -> 1531;
1582 -> 1581;
1582 -> 1551;
1582 -> 1578;
1582 -> 1531;
1583 -> 1480;
1583 -> 1582;
1584 -> 1481;
1584 -> 1582;
1585 -> 1482;
1585 -> 1582;
1586 -> 1483;
1586 -> 1582;
1587 -> 1557;
1587 -> 1582;
1588 -> 1582;
1589 -> 1582;
1590 -> 1583;
1590 -> 1582;
1591 -> 1584;
1591 -> 1582;
1592 -> 1585;
1592 -> 1582;
1593 -> 1582;
1594 -> 1586;
1594 -> 1582;
1595 -> 1587;
1595 -> 1582;
1596 -> 1582;
1597 -> 1582;
1598 -> 1588;
1598 -> 1597;
1599 -> 1598;
1599 -> 1412;
1599 -> 0;
1599 -> 1597;
1600 -> 1597;
1601 -> 1598;
1601 -> 1412;
1601 -> 1600;
1601 -> 1597;
1602 -> 1599;
1602 -> 1582;
1603 -> 1582;
1604 -> 1596;
1604 -> 1603;
1605 -> 1604;
1605 -> 1582;
1605 -> 0;
1605 -> 1603;
1606 -> 1605;
1606 -> 1582;
1607 -> 1591;
1607 -> 1582;
1608 -> 1582;
1609 -> 1607;
1609 -> 1608;
1610 -> 1596;
1610 -> 1608;
1611 -> 1608;
1612 -> 1610;
1612 -> 1582;
1612 -> 1611;
1612 -> 1608;
1613 -> 1608;
1614 -> 1610;
1614 -> 1582;
1614 -> 1613;
1614 -> 1608;
1615 -> 1610;
1615 -> 1582;
1615 -> 1614;
1616 -> 1609;
1616 -> 1614;
1617 -> 1614;
1618 -> 1616;
1618 -> 1617;
1619 -> 1616;
1619 -> 1617;
1620 -> 1616;
1620 -> 1617;
1621 -> 1616;
1621 -> 1617;
1622 -> 1617;
1623 -> 1622;
1623 -> 1617;
1624 -> 1617;
1625 -> 1624;
1625 -> 1617;
1626 -> 1618;
1626 -> 1616;
1626 -> 1617;
1627 -> 1618;
1627 -> 1626;
1628 -> 1621;
1628 -> 1626;
1629 -> 1627;
1629 -> 1626;
1629 -> 1628;
1630 -> 1627;
1630 -> 1626;
1630 -> 1629;
1631 -> 1627;
1631 -> 1626;
1632 -> 1617;
1633 -> 1630;
1633 -> 1626;
1633 -> 1632;
1633 -> 1617;
1634 -> 1631;
1634 -> 1626;
1634 -> 1632;
1634 -> 1617;
1635 -> 1633;
1635 -> 1634;
1635 -> 1617;
1636 -> 778;
1636 -> 1635;
1637 -> 1610;
1637 -> 1636;
1637 -> 1608;
1638 -> 1592;
1638 -> 0;
1638 -> 1582;
1639 -> 1582;
1640 -> 1596;
1640 -> 1636;
1640 -> 1639;
1640 -> 1582;
1641 -> 1638;
1641 -> 1640;
1641 -> 1582;
1642 -> 1588;
1642 -> 1641;
1643 -> 1596;
1643 -> 1636;
1643 -> 1641;
1644 -> 1589;
1644 -> 1641;
1645 -> 1590;
1645 -> 1641;
1646 -> 1591;
1646 -> 1641;
1647 -> 1592;
1647 -> 1641;
1648 -> 1593;
1648 -> 1641;
1649 -> 1594;
1649 -> 1641;
1650 -> 1595;
1650 -> 1641;
1651 -> 1641;
1652 -> 1642;
1652 -> 1651;
1653 -> 1643;
1653 -> 1651;
1654 -> 1644;
1654 -> 1651;
1655 -> 1645;
1655 -> 1651;
1656 -> 1646;
1656 -> 1651;
1657 -> 1647;
1657 -> 1651;
1658 -> 1648;
1658 -> 1651;
1659 -> 1649;
1659 -> 1651;
1660 -> 1650;
1660 -> 1651;
1661 -> 1596;
1661 -> 1651;
1662 -> 1657;
1662 -> 1651;
1663 -> 1651;
1664 -> 1662;
1664 -> 1663;
1665 -> 1664;
1665 -> 0;
1665 -> 1663;
1666 -> 1664;
1666 -> 0;
1666 -> 1663;
1667 -> 1663;
1668 -> 0;
1668 -> 1663;
1669 -> 1664;
1669 -> 1668;
1669 -> 1663;
1670 -> 0;
1670 -> 1663;
1671 -> 1664;
1671 -> 1670;
1671 -> 1663;
1672 -> 1663;
1673 -> 0;
1673 -> 1663;
1674 -> 1664;
1674 -> 1673;
1674 -> 1663;
1675 -> 1674;
1675 -> 1663;
1676 -> 1663;
1677 -> 1675;
1677 -> 1676;
1678 -> 1676;
1679 -> 1677;
1679 -> 1678;
1679 -> 1676;
1680 -> 1651;
1681 -> 1655;
1681 -> 1680;
1681 -> 1651;
1682 -> 1653;
1682 -> 1636;
1682 -> 1651;
1683 -> 1652;
1683 -> 1682;
1684 -> 1653;
1684 -> 1682;
1685 -> 1654;
1685 -> 1682;
1686 -> 1655;
1686 -> 1682;
1687 -> 1657;
1687 -> 1682;
1688 -> 1658;
1688 -> 1682;
1689 -> 1659;
1689 -> 1682;
1690 -> 1660;
1690 -> 1682;
1691 -> 1682;
1692 -> 1683;
1692 -> 1691;
1693 -> 1684;
1693 -> 1691;
1694 -> 1685;
1694 -> 1691;
1695 -> 1686;
1695 -> 1691;
1696 -> 1687;
1696 -> 1691;
1697 -> 1688;
1697 -> 1691;
1698 -> 1689;
1698 -> 1691;
1699 -> 1690;
1699 -> 1691;
1700 -> 1693;
1700 -> 1691;
1701 -> 1694;
1701 -> 1691;
1702 -> 1696;
1702 -> 1691;
1703 -> 1697;
1703 -> 1691;
1704 -> 1691;
1705 -> 1700;
1705 -> 1704;
1706 -> 1701;
1706 -> 1704;
1707 -> 1702;
1707 -> 1704;
1708 -> 1703;
1708 -> 1704;
1709 -> 1707;
1709 -> 0;
1709 -> 1704;
1710 -> 1704;
1711 -> 1709;
1711 -> 1705;
1711 -> 1704;
1712 -> 1705;
1712 -> 1636;
1712 -> 0;
1712 -> 1711;
1713 -> 1707;
1713 -> 0;
1713 -> 1712;
1714 -> 1712;
1715 -> 1706;
1715 -> 1713;
1716 -> 1715;
1716 -> 1691;
1717 -> 1716;
1718 -> 1695;
1718 -> 1716;
1719 -> 1696;
1719 -> 1716;
1720 -> 1698;
1720 -> 1716;
1721 -> 1699;
1721 -> 1716;
1722 -> 1716;
1723 -> 1717;
1723 -> 1722;
1724 -> 1718;
1724 -> 1722;
1725 -> 1719;
1725 -> 1722;
1726 -> 1717;
1726 -> 1722;
1727 -> 1720;
1727 -> 1722;
1728 -> 1721;
1728 -> 1722;
1729 -> 1717;
1729 -> 1722;
1730 -> 1697;
1730 -> 1722;
1731 -> 1722;
1732 -> 1722;
1733 -> 1723;
1733 -> 1636;
1733 -> 1715;
1733 -> 0;
1733 -> 1722;
1734 -> 1733;
1734 -> 1722;
1735 -> 1734;
1735 -> 1636;
1735 -> 1715;
1735 -> 1722;
1736 -> 1730;
1736 -> 1636;
1736 -> 1735;
1736 -> 1715;
1736 -> 1722;
1737 -> 1734;
1737 -> 1736;
1738 -> 1724;
1738 -> 1736;
1739 -> 1727;
1739 -> 1736;
1740 -> 1725;
1740 -> 1736;
1741 -> 1732;
1741 -> 1736;
1742 -> 1736;
1743 -> 1737;
1743 -> 1742;
1744 -> 1738;
1744 -> 1742;
1745 -> 1739;
1745 -> 1742;
1746 -> 1740;
1746 -> 1742;
1747 -> 1741;
1747 -> 1742;
1748 -> 1743;
1748 -> 1636;
1748 -> 1736;
1748 -> 1715;
1748 -> 1742;
1749 -> 1748;
1750 -> 1744;
1750 -> 1749;
1750 -> 1748;
1751 -> 1746;
1751 -> 0;
1751 -> 1748;
1752 -> 1750;
1752 -> 1751;
1752 -> 1748;
1753 -> 1743;
1753 -> 1752;
1754 -> 1753;
1754 -> 1636;
1754 -> 1736;
1754 -> 1715;
1754 -> 1752;
1755 -> 1753;
1755 -> 1752;
1756 -> 1753;
1756 -> 1636;
1756 -> 1736;
1756 -> 1715;
1756 -> 1744;
1756 -> 1752;
1757 -> 1746;
1757 -> 1752;
1758 -> 1752;
1759 -> 1757;
1759 -> 1758;
1760 -> 1756;
1760 -> 1759;
1760 -> 1752;
1761 -> 1742;
1762 -> 1742;
1763 -> 1762;
1763 -> 1736;
1764 -> 1763;
1765 -> 1730;
1765 -> 1764;
1766 -> 1765;
1766 -> 1736;
1766 -> 1764;
1767 -> 0;
1767 -> 1764;
1768 -> 1764;
1769 -> 1766;
1769 -> 1768;
1770 -> 1767;
1770 -> 1768;
1771 -> 1769;
1771 -> 1763;
1772 -> 1725;
1772 -> 0;
1772 -> 1771;
1773 -> 1771;
1774 -> 1725;
1774 -> 0;
1774 -> 1772;
1775 -> 1772;
1776 -> 1774;
1777 -> 1776;
1777 -> 1774;
1778 -> 1777;
1779 -> 1778;
1779 -> 1777;
1780 -> 1734;
1780 -> 1777;
1781 -> 1725;
1781 -> 1777;
1782 -> 1726;
1782 -> 1777;
1783 -> 1777;
1784 -> 1781;
1784 -> 1783;
1785 -> 1782;
1785 -> 1783;
1786 -> 1784;
1786 -> 0;
1786 -> 1783;
1787 -> 1783;
1788 -> 1786;
1788 -> 1783;
1789 -> 1785;
1789 -> 1788;
1790 -> 1731;
1790 -> 1777;
1791 -> 1728;
1791 -> 1777;
1792 -> 1729;
1792 -> 1777;
1793 -> 1777;
1794 -> 1780;
1794 -> 1793;
1795 -> 1789;
1795 -> 1793;
1796 -> 1790;
1796 -> 1793;
1797 -> 1791;
1797 -> 1793;
1798 -> 1792;
1798 -> 1793;
1799 -> 1730;
1799 -> 1793;
1800 -> 1799;
1800 -> 1736;
1800 -> 1793;
1801 -> 0;
1801 -> 1793;
1802 -> 1793;
1803 -> 1800;
1803 -> 1802;
1804 -> 1801;
1804 -> 1802;
1805 -> 1794;
1805 -> 1793;
1806 -> 1795;
1806 -> 1793;
1807 -> 1796;
1807 -> 1793;
1808 -> 1797;
1808 -> 1793;
1809 -> 1798;
1809 -> 1793;
1810 -> 1793;
1811 -> 1805;
1811 -> 1810;
1812 -> 1806;
1812 -> 1810;
1813 -> 1807;
1813 -> 1810;
1814 -> 1808;
1814 -> 1810;
1815 -> 1809;
1815 -> 1810;
1816 -> 1799;
1816 -> 1810;
1817 -> 1811;
1817 -> 1810;
1818 -> 1812;
1818 -> 1810;
1819 -> 1813;
1819 -> 1810;
1820 -> 1814;
1820 -> 1810;
1821 -> 1815;
1821 -> 1810;
1822 -> 1810;
1823 -> 1817;
1823 -> 1822;
1824 -> 1818;
1824 -> 1822;
1825 -> 1819;
1825 -> 1822;
1826 -> 1820;
1826 -> 1822;
1827 -> 1821;
1827 -> 1822;
1828 -> 1816;
1828 -> 1736;
1828 -> 1822;
1829 -> 1823;
1829 -> 1822;
1830 -> 1828;
1830 -> 1736;
1830 -> 1822;
1831 -> 1824;
1831 -> 1822;
1832 -> 1825;
1832 -> 1822;
1833 -> 1826;
1833 -> 1822;
1834 -> 1827;
1834 -> 1822;
1835 -> 1822;
1836 -> 1829;
1836 -> 1835;
1837 -> 1830;
1837 -> 1835;
1838 -> 1831;
1838 -> 1835;
1839 -> 1832;
1839 -> 1835;
1840 -> 1833;
1840 -> 1835;
1841 -> 1834;
1841 -> 1835;
1842 -> 1828;
1842 -> 1835;
1843 -> 1842;
1843 -> 1736;
1843 -> 1835;
1844 -> 0;
1844 -> 1835;
1845 -> 1835;
1846 -> 1843;
1846 -> 1845;
1847 -> 1844;
1847 -> 1845;
1848 -> 1836;
1848 -> 1835;
1849 -> 1837;
1849 -> 1835;
1850 -> 1838;
1850 -> 1835;
1851 -> 1839;
1851 -> 1835;
1852 -> 1840;
1852 -> 1835;
1853 -> 1841;
1853 -> 1835;
1854 -> 1835;
1855 -> 1848;
1855 -> 1854;
1856 -> 1849;
1856 -> 1854;
1857 -> 1850;
1857 -> 1854;
1858 -> 1851;
1858 -> 1854;
1859 -> 1852;
1859 -> 1854;
1860 -> 1853;
1860 -> 1854;
1861 -> 1855;
1861 -> 1854;
1862 -> 1856;
1862 -> 1854;
1863 -> 1857;
1863 -> 1854;
1864 -> 1858;
1864 -> 1854;
1865 -> 1856;
1865 -> 1736;
1865 -> 1854;
1866 -> 1859;
1866 -> 1854;
1867 -> 1860;
1867 -> 1854;
1868 -> 1854;
1869 -> 1861;
1869 -> 1868;
1870 -> 1862;
1870 -> 1868;
1871 -> 1863;
1871 -> 1868;
1872 -> 1864;
1872 -> 1868;
1873 -> 1865;
1873 -> 1868;
1874 -> 1866;
1874 -> 1868;
1875 -> 1867;
1875 -> 1868;
1876 -> 1868;
1877 -> 1869;
1877 -> 1876;
1877 -> 1868;
1878 -> 1868;
1879 -> 1870;
1879 -> 1878;
1879 -> 1868;
1880 -> 1870;
1880 -> 1736;
1880 -> 1868;
1881 -> 1870;
1881 -> 1868;
1882 -> 1868;
1883 -> 1869;
1883 -> 1636;
1883 -> 1736;
1883 -> 1715;
1883 -> 1868;
1884 -> 1869;
1884 -> 1883;
1885 -> 1870;
1885 -> 1883;
1886 -> 1874;
1886 -> 1883;
1887 -> 1875;
1887 -> 1883;
1888 -> 1883;
1889 -> 1884;
1889 -> 1888;
1890 -> 1885;
1890 -> 1888;
1891 -> 1886;
1891 -> 1888;
1892 -> 1887;
1892 -> 1888;
1893 -> 1890;
1893 -> 1888;
1894 -> 1888;
1895 -> 1889;
1895 -> 1894;
1895 -> 1888;
1896 -> 1890;
1896 -> 1736;
1896 -> 1888;
1897 -> 1888;
1898 -> 1889;
1898 -> 1636;
1898 -> 1736;
1898 -> 1715;
1898 -> 1888;
1899 -> 1889;
1899 -> 1636;
1899 -> 1736;
1899 -> 1715;
1899 -> 1888;
1900 -> 1888;
1901 -> 1899;
1901 -> 1900;
1901 -> 1888;
1902 -> 1901;
1902 -> 1888;
1903 -> 1890;
1903 -> 1902;
1904 -> 1902;
1905 -> 1902;
1905 -> 1904;
1906 -> 1902;
1906 -> 1904;
1907 -> 1903;
1907 -> 1904;
1908 -> 1907;
1908 -> 1904;
1909 -> 1904;
1910 -> 1905;
1910 -> 1909;
1910 -> 1904;
1911 -> 1906;
1911 -> 1904;
1912 -> 1911;
1913 -> 1779;
1913 -> 1912;
1913 -> 1777;
1914 -> 1913;
1915 -> 1914;
1915 -> 1913;
1916 -> 1734;
1916 -> 1913;
1917 -> 1725;
1917 -> 0;
1917 -> 1915;
1918 -> 1915;
1919 -> 1725;
1919 -> 0;
1919 -> 1917;
1920 -> 1917;
1921 -> 1725;
1921 -> 0;
1921 -> 1919;
1922 -> 1919;
1923 -> 1725;
1923 -> 0;
1923 -> 1921;
1924 -> 1921;
1925 -> 1734;
1925 -> 1923;
1926 -> 1923;
1927 -> 1925;
1927 -> 1926;
1928 -> 0;
1928 -> 1926;
1929 -> 1927;
1929 -> 1926;
1930 -> 1926;
1931 -> 1926;
1932 -> 1928;
1932 -> 1931;
1933 -> 1929;
1933 -> 1931;
1934 -> 1930;
1934 -> 1931;
1935 -> 1930;
1935 -> 1931;
1936 -> 1932;
1936 -> 1935;
1936 -> 1931;
1937 -> 1933;
1937 -> 1935;
1937 -> 1931;
1938 -> 1934;
1938 -> 1935;
1938 -> 1931;
1939 -> 1930;
1939 -> 1923;
1940 -> 1939;
1940 -> 1716;
1941 -> 1716;
1942 -> 1940;
1942 -> 1941;
1943 -> 1692;
1943 -> 1941;
1944 -> 1941;
1945 -> 1943;
1945 -> 1944;
1946 -> 1945;
1946 -> 1941;
1947 -> 1946;
1947 -> 1942;
1947 -> 1936;
1947 -> 1941;
1948 -> 1947;
1949 -> 1948;
1949 -> 1947;
1950 -> 1942;
1950 -> 1949;
1951 -> 1949;
1952 -> 1950;
1952 -> 1951;
1953 -> 1943;
1953 -> 1951;
1954 -> 1952;
1954 -> 1936;
1954 -> 1953;
1954 -> 1951;
1955 -> 1953;
1955 -> 1412;
1955 -> 1954;
1955 -> 1951;
1956 -> 1952;
1956 -> 1937;
1956 -> 1951;
1957 -> 1953;
1957 -> 1955;
1957 -> 1956;
1957 -> 1916;
1957 -> 1951;
1958 -> 1952;
1958 -> 1938;
1958 -> 1953;
1958 -> 1951;
1959 -> 1949;
1960 -> 1716;
1961 -> 1716;
1961 -> 1957;
1961 -> 1958;
1961 -> 1691;
1962 -> 1682;
1963 -> 1641;
1964 -> 1641;
1965 -> 1588;
1965 -> 1964;
1966 -> 1965;
1966 -> 1957;
1966 -> 1964;
1967 -> 1966;
1967 -> 1641;
1968 -> 1967;
1969 -> 1590;
1969 -> 1968;
1969 -> 1967;
1970 -> 1589;
1970 -> 1967;
1971 -> 1967;
1972 -> 1593;
1972 -> 1971;
1973 -> 1972;
1973 -> 1957;
1973 -> 1971;
1974 -> 0;
1974 -> 1971;
1975 -> 1971;
1976 -> 1973;
1976 -> 1975;
1977 -> 1974;
1977 -> 1975;
1978 -> 1976;
1978 -> 1967;
1979 -> 1967;
1980 -> 1970;
1980 -> 1979;
1981 -> 1978;
1981 -> 1979;
1982 -> 1637;
1982 -> 1979;
1983 -> 1979;
1984 -> 1983;
1984 -> 1979;
1985 -> 1980;
1985 -> 1979;
1986 -> 1983;
1986 -> 1979;
1987 -> 1982;
1987 -> 1957;
1987 -> 1985;
1987 -> 1986;
1987 -> 1958;
1987 -> 1984;
1987 -> 1979;
1988 -> 1979;
1989 -> 1988;
1989 -> 1967;
1990 -> 1969;
1990 -> 1989;
1990 -> 1967;
1991 -> 1967;
1992 -> 1582;
1993 -> 1478;
1993 -> 1992;
1994 -> 1993;
1994 -> 1987;
1994 -> 0;
1994 -> 1992;
1995 -> 1994;
1995 -> 1582;
1996 -> 1582;
1996 -> 1995;
1997 -> 1482;
1997 -> 0;
1997 -> 1582;
1998 -> 1582;
1999 -> 1996;
1999 -> 1477;
2000 -> 1449;
2001 -> 1365;
2001 -> 1363;
2002 -> 1364;
2002 -> 1363;
2003 -> 1891;
2003 -> 1363;
2004 -> 2001;
2004 -> 2002;
2004 -> 2003;
2004 -> 1987;
2004 -> 1363;
2005 -> 1363;
2006 -> 1363;
2007 -> 1368;
2007 -> 2006;
2007 -> 1363;
2008 -> 1420;
2008 -> 1363;
2009 -> 1363;
2010 -> 2008;
2010 -> 2009;
2011 -> 2009;
2012 -> 2010;
2012 -> 2011;
2013 -> 2011;
2014 -> 2012;
2014 -> 2013;
2015 -> 2014;
2015 -> 2004;
2015 -> 2013;
2016 -> 2015;
2016 -> 2009;
2017 -> 2009;
2018 -> 2010;
2018 -> 2017;
2019 -> 2018;
2019 -> 2004;
2019 -> 2017;
2020 -> 2019;
2020 -> 2009;
2021 -> 2020;
2021 -> 2004;
2022 -> 2021;
2023 -> 2005;
2023 -> 1363;
2024 -> 2023;
2025 -> 1420;
2025 -> 2023;
2026 -> 1370;
2026 -> 2023;
2027 -> 2023;
2028 -> 1364;
2028 -> 2023;
2029 -> 1365;
2029 -> 2023;
2030 -> 1367;
2030 -> 2023;
2031 -> 2024;
2031 -> 2023;
2032 -> 1368;
2032 -> 2023;
2033 -> 1427;
2033 -> 2023;
2034 -> 2023;
2035 -> 2025;
2035 -> 2034;
2036 -> 2026;
2036 -> 2034;
2037 -> 2027;
2037 -> 2034;
2038 -> 2028;
2038 -> 2034;
2039 -> 2029;
2039 -> 2034;
2040 -> 2030;
2040 -> 2034;
2041 -> 2031;
2041 -> 2034;
2042 -> 2032;
2042 -> 2034;
2043 -> 2033;
2043 -> 2034;
2044 -> 1369;
2044 -> 2034;
2045 -> 2035;
2045 -> 2034;
2046 -> 2036;
2046 -> 2034;
2047 -> 2037;
2047 -> 2034;
2048 -> 2038;
2048 -> 2034;
2049 -> 2039;
2049 -> 2034;
2050 -> 2040;
2050 -> 2034;
2051 -> 2041;
2051 -> 2034;
2052 -> 2042;
2052 -> 2034;
2053 -> 2043;
2053 -> 2034;
2054 -> 2034;
2055 -> 2045;
2055 -> 2054;
2056 -> 2046;
2056 -> 2054;
2057 -> 2047;
2057 -> 2054;
2058 -> 2048;
2058 -> 2054;
2059 -> 2049;
2059 -> 2054;
2060 -> 2050;
2060 -> 2054;
2061 -> 2051;
2061 -> 2054;
2062 -> 2052;
2062 -> 2054;
2063 -> 2053;
2063 -> 2054;
2064 -> 2044;
2064 -> 2054;
2065 -> 2054;
2066 -> 2058;
2066 -> 2065;
2066 -> 2054;
2067 -> 2054;
2068 -> 2059;
2068 -> 2067;
2068 -> 2054;
2069 -> 2054;
2070 -> 2055;
2070 -> 2069;
2071 -> 2070;
2071 -> 2004;
2071 -> 2069;
2072 -> 2071;
2072 -> 2054;
2073 -> 2054;
2074 -> 2054;
2075 -> 2055;
2075 -> 2074;
2076 -> 2074;
2077 -> 2075;
2077 -> 2076;
2078 -> 2077;
2078 -> 2004;
2078 -> 2076;
2079 -> 2078;
2079 -> 2054;
2080 -> 2079;
2081 -> 2072;
2081 -> 2004;
2081 -> 2080;
2081 -> 2079;
2082 -> 2081;
2083 -> 2082;
2083 -> 2081;
2084 -> 2081;
2085 -> 2083;
2085 -> 2084;
2085 -> 2081;
2086 -> 2083;
2086 -> 2082;
2086 -> 0;
2086 -> 2081;
2087 -> 2082;
2087 -> 0;
2087 -> 2085;
2088 -> 2087;
2088 -> 2064;
2088 -> 2082;
2088 -> 2085;
2089 -> 2060;
2089 -> 2085;
2090 -> 2082;
2090 -> 0;
2090 -> 2089;
2091 -> 2082;
2091 -> 2081;
2092 -> 2091;
2092 -> 2082;
2092 -> 0;
2092 -> 2034;
2093 -> 2038;
2093 -> 2092;
2094 -> 2092;
2095 -> 2091;
2095 -> 2092;
2096 -> 2039;
2096 -> 2092;
2097 -> 2092;
2098 -> 2093;
2098 -> 2097;
2099 -> 2094;
2099 -> 2097;
2100 -> 2095;
2100 -> 2097;
2101 -> 2096;
2101 -> 2097;
2102 -> 2044;
2102 -> 2097;
2103 -> 2100;
2103 -> 2082;
2103 -> 2097;
2104 -> 2097;
2105 -> 2091;
2105 -> 2034;
2106 -> 2105;
2106 -> 2082;
2106 -> 0;
2106 -> 2023;
2107 -> 1363;
2108 -> 1420;
2108 -> 2107;
2109 -> 2107;
2110 -> 2108;
2110 -> 2109;
2111 -> 0;
2111 -> 2110;
2111 -> 2109;
2112 -> 2110;
2112 -> 2082;
2112 -> 2111;
2112 -> 2109;
2113 -> 2109;
2114 -> 2113;
2114 -> 2110;
2114 -> 2109;
2115 -> 2107;
2116 -> 2107;
2117 -> 2108;
2117 -> 2112;
2117 -> 2116;
2117 -> 2107;
2118 -> 2108;
2118 -> 2117;
2119 -> 2108;
2119 -> 2112;
2119 -> 2118;
2119 -> 2114;
2119 -> 2117;
2120 -> 1363;
2121 -> 1364;
2121 -> 2119;
2121 -> 1363;
2122 -> 1363;
2123 -> 2121;
2123 -> 2122;
2124 -> 1369;
2124 -> 2122;
2125 -> 2123;
2125 -> 2119;
2125 -> 2122;
2126 -> 2123;
2126 -> 2119;
2126 -> 2122;
2127 -> 2122;
2128 -> 2126;
2128 -> 2127;
2129 -> 2126;
2129 -> 2127;
2130 -> 2124;
2130 -> 2127;
2131 -> 2128;
2131 -> 2127;
2132 -> 2129;
2132 -> 2127;
2133 -> 2131;
2133 -> 2132;
2133 -> 2125;
2133 -> 2127;
2134 -> 2133;
2134 -> 2127;
2135 -> 2130;
2135 -> 2133;
2135 -> 2134;
2136 -> 0;
2136 -> 2134;
2137 -> 2134;
2138 -> 2130;
2138 -> 2137;
2139 -> 2138;
2139 -> 2135;
2139 -> 2137;
2140 -> 2137;
2141 -> 2138;
2141 -> 2139;
2141 -> 2140;
2142 -> 2141;
2142 -> 2140;
2143 -> 2140;
2144 -> 2142;
2144 -> 2143;
2145 -> 2144;
2145 -> 2141;
2145 -> 2143;
2146 -> 2145;
2147 -> 2146;
2147 -> 2140;
2148 -> 2147;
2148 -> 2140;
2149 -> 2105;
2149 -> 1363;
2150 -> 1363;
2151 -> 2148;
2151 -> 2150;
2152 -> 2149;
2152 -> 2150;
2153 -> 2152;
2153 -> 2150;
2154 -> 2152;
2154 -> 2150;
2155 -> 2154;
2155 -> 2150;
2156 -> 2155;
2156 -> 2150;
2157 -> 2151;
2157 -> 2156;
2158 -> 2156;
2159 -> 2157;
2159 -> 2158;
2160 -> 2156;
2160 -> 2158;
2161 -> 2159;
2161 -> 2157;
2161 -> 2158;
2162 -> 2159;
2162 -> 2160;
2162 -> 2158;
2163 -> 2158;
2164 -> 2163;
2164 -> 2160;
2164 -> 2158;
2165 -> 2158;
2166 -> 2165;
2166 -> 2160;
2166 -> 2158;
2167 -> 1338;
2168 -> 2156;
2168 -> 2167;
2169 -> 2168;
2169 -> 2162;
2169 -> 2157;
2169 -> 2167;
2170 -> 2169;
2170 -> 1338;
2171 -> 2170;
2172 -> 2171;
2172 -> 2170;
2173 -> 2172;
2174 -> 2156;
2174 -> 2173;
2175 -> 2174;
2175 -> 2162;
2175 -> 2173;
2176 -> 2175;
2176 -> 2172;
2177 -> 1343;
2177 -> 2172;
2178 -> 1339;
2178 -> 2172;
2179 -> 1340;
2179 -> 2172;
2180 -> 2172;
2181 -> 2176;
2181 -> 2180;
2182 -> 2176;
2182 -> 2180;
2183 -> 2176;
2183 -> 2180;
2184 -> 2176;
2184 -> 2180;
2185 -> 2176;
2185 -> 2180;
2186 -> 2181;
2186 -> 2180;
2187 -> 2182;
2187 -> 2180;
2188 -> 2183;
2188 -> 2180;
2189 -> 2184;
2189 -> 2180;
2190 -> 2180;
2191 -> 2186;
2191 -> 2190;
2192 -> 2187;
2192 -> 2190;
2193 -> 2188;
2193 -> 2190;
2194 -> 2189;
2194 -> 2190;
2195 -> 2185;
2195 -> 2190;
2196 -> 2192;
2196 -> 2176;
2196 -> 2190;
2197 -> 2191;
2197 -> 2196;
2198 -> 2192;
2198 -> 2196;
2199 -> 2193;
2199 -> 2196;
2200 -> 2194;
2200 -> 2196;
2201 -> 2196;
2202 -> 2195;
2202 -> 2201;
2203 -> 2202;
2203 -> 2176;
2203 -> 2201;
2204 -> 2203;
2204 -> 2196;
2205 -> 2196;
2206 -> 2195;
2206 -> 2205;
2207 -> 2205;
2208 -> 2206;
2208 -> 2207;
2209 -> 2208;
2209 -> 2176;
2209 -> 2207;
2210 -> 2209;
2210 -> 2205;
2211 -> 2210;
2211 -> 2205;
2212 -> 2210;
2212 -> 2176;
2212 -> 0;
2212 -> 2205;
2213 -> 2210;
2213 -> 2205;
2214 -> 2210;
2214 -> 2205;
2215 -> 2214;
2215 -> 2196;
2216 -> 2195;
2216 -> 2176;
2216 -> 2196;
2217 -> 2196;
2218 -> 2197;
2218 -> 2217;
2219 -> 2198;
2219 -> 2217;
2220 -> 2199;
2220 -> 2217;
2221 -> 2200;
2221 -> 2217;
2222 -> 2204;
2222 -> 2217;
2223 -> 2215;
2223 -> 2217;
2224 -> 2216;
2224 -> 2217;
2225 -> 2219;
2225 -> 2217;
2226 -> 2219;
2226 -> 2225;
2226 -> 0;
2226 -> 2217;
2227 -> 2219;
2227 -> 2225;
2227 -> 0;
2227 -> 2217;
2228 -> 2219;
2228 -> 2217;
2229 -> 2223;
2229 -> 2217;
2230 -> 2228;
2230 -> 2229;
2230 -> 2225;
2230 -> 2217;
2231 -> 2221;
2231 -> 2217;
2232 -> 2231;
2232 -> 2217;
2233 -> 2218;
2233 -> 2217;
2234 -> 2230;
2234 -> 2217;
2235 -> 2220;
2235 -> 2217;
2236 -> 2222;
2236 -> 2217;
2237 -> 2224;
2237 -> 2217;
2238 -> 2217;
2239 -> 2233;
2239 -> 2238;
2240 -> 2234;
2240 -> 2238;
2241 -> 2235;
2241 -> 2238;
2242 -> 2236;
2242 -> 2238;
2243 -> 2237;
2243 -> 2238;
2244 -> 2238;
2245 -> 2239;
2245 -> 2244;
2245 -> 2238;
2246 -> 2240;
2246 -> 2238;
2247 -> 2242;
2247 -> 2238;
2248 -> 2238;
2249 -> 2246;
2249 -> 2247;
2249 -> 2248;
2249 -> 2230;
2249 -> 2238;
2250 -> 2238;
2251 -> 2249;
2251 -> 2238;
2252 -> 2238;
2253 -> 2250;
2253 -> 2252;
2253 -> 2238;
2254 -> 2249;
2254 -> 2238;
2255 -> 2254;
2255 -> 2217;
2256 -> 2231;
2256 -> 2255;
2257 -> 2196;
2258 -> 2180;
2259 -> 2156;
2259 -> 2170;
2260 -> 2259;
2260 -> 753;
2261 -> 1330;
2261 -> 753;
2262 -> 1329;
2262 -> 753;
2263 -> 1331;
2263 -> 753;
2264 -> 753;
2265 -> 2260;
2265 -> 2264;
2266 -> 2261;
2266 -> 2264;
2267 -> 2262;
2267 -> 2264;
2268 -> 2263;
2268 -> 2264;
2269 -> 1333;
2269 -> 2264;
2270 -> 2264;
2271 -> 2265;
2271 -> 2270;
2272 -> 2271;
2272 -> 2164;
2272 -> 2270;
2273 -> 2272;
2273 -> 0;
2273 -> 2270;
2274 -> 2273;
2274 -> 2264;
2275 -> 2265;
2275 -> 2264;
2276 -> 753;
2277 -> 2275;
2277 -> 2276;
2278 -> 2277;
2278 -> 2162;
2278 -> 2276;
2279 -> 779;
2279 -> 2278;
2279 -> 2249;
2279 -> 2157;
2279 -> 750;
2280 -> 2279;
2280 -> 1003;
2280 -> 997;
2281 -> 1001;
2281 -> 2279;
2281 -> 997;
2282 -> 1141;
2282 -> 1048;
2283 -> 2279;
2283 -> 1072;
2284 -> 2279;
2285 -> 2284;
2285 -> 2279;
2286 -> 2279;
2287 -> 2279;
2287 -> 2286;
2288 -> 2287;
2288 -> 2279;
2288 -> 2286;
2289 -> 2288;
2289 -> 2279;
2290 -> 2279;
2291 -> 2279;
2292 -> 2279;
2293 -> 2279;
2294 -> 2279;
2295 -> 2279;
2295 -> 1300;
2296 -> 2295;
2296 -> 1313;
2297 -> 2279;
2297 -> 1300;
2298 -> 2297;
2298 -> 1318;
2299 -> 1350;
2299 -> 1342;
2299 -> 1338;
2300 -> 2299;
2300 -> 1351;
2301 -> 2300;
2301 -> 2279;
2302 -> 2301;
2302 -> 2279;
2303 -> 2279;
2304 -> 2279;
2305 -> 2279;
2306 -> 2304;
2306 -> 2305;
2307 -> 2304;
2307 -> 2305;
2308 -> 2304;
2308 -> 2305;
2309 -> 2304;
2309 -> 2305;
2310 -> 2304;
2310 -> 2305;
2311 -> 2279;
2311 -> 2305;
2312 -> 2305;
2313 -> 2307;
2313 -> 2312;
2313 -> 2305;
2314 -> 2305;
2315 -> 2314;
2315 -> 2279;
2316 -> 2279;
2317 -> 2315;
2317 -> 2316;
2317 -> 2279;
2318 -> 2279;
2319 -> 2279;
2319 -> 2318;
2320 -> 2319;
2320 -> 2279;
2320 -> 0;
2320 -> 2318;
2321 -> 2318;
2322 -> 2319;
2322 -> 2279;
2322 -> 2321;
2322 -> 2318;
2323 -> 2320;
2323 -> 2279;
2324 -> 2279;
2325 -> 2279;
2326 -> 2279;
2327 -> 2325;
2327 -> 2279;
2328 -> 2326;
2328 -> 2279;
2329 -> 2327;
2329 -> 2279;
2330 -> 2328;
2330 -> 2279;
2331 -> 2279;
2332 -> 2279;
2332 -> 2331;
2333 -> 2332;
2333 -> 2279;
2333 -> 0;
2333 -> 2331;
2334 -> 2331;
2335 -> 2332;
2335 -> 2279;
2335 -> 2334;
2335 -> 2331;
2336 -> 2333;
2336 -> 2279;
2337 -> 2327;
2337 -> 2279;
2338 -> 2279;
2339 -> 2337;
2339 -> 2338;
2340 -> 2339;
2340 -> 0;
2340 -> 2338;
2341 -> 2339;
2341 -> 0;
2341 -> 2338;
2342 -> 2338;
2343 -> 0;
2343 -> 2338;
2344 -> 2339;
2344 -> 2343;
2344 -> 2338;
2345 -> 0;
2345 -> 2338;
2346 -> 2339;
2346 -> 2345;
2346 -> 2338;
2347 -> 2338;
2348 -> 0;
2348 -> 2338;
2349 -> 2339;
2349 -> 2348;
2349 -> 2338;
2350 -> 2349;
2350 -> 2338;
2351 -> 2338;
2352 -> 2350;
2352 -> 2351;
2353 -> 2351;
2354 -> 2352;
2354 -> 2353;
2354 -> 2351;
2355 -> 2279;
2356 -> 2279;
2357 -> 2329;
2357 -> 2279;
2358 -> 2329;
2358 -> 2279;
2359 -> 2329;
2359 -> 2279;
2360 -> 2279;
2361 -> 2330;
2361 -> 2279;
2362 -> 2279;
2363 -> 2279;
2364 -> 2279;
2364 -> 2363;
2365 -> 2364;
2365 -> 2279;
2365 -> 0;
2365 -> 2363;
2366 -> 2363;
2367 -> 2364;
2367 -> 2279;
2367 -> 2366;
2367 -> 2363;
2368 -> 2365;
2368 -> 2279;
2369 -> 2327;
2369 -> 0;
2369 -> 2279;
2370 -> 2279;
2371 -> 2279;
2372 -> 2329;
2372 -> 2279;
2373 -> 2329;
2373 -> 2279;
2374 -> 2329;
2374 -> 2279;
2375 -> 2279;
2376 -> 2330;
2376 -> 2279;
2377 -> 2279;
2378 -> 2371;
2378 -> 2377;
2379 -> 2378;
2379 -> 2279;
2379 -> 0;
2379 -> 2377;
2380 -> 2377;
2381 -> 2378;
2381 -> 2279;
2381 -> 2380;
2381 -> 2377;
2382 -> 2379;
2382 -> 2279;
2383 -> 2279;
2384 -> 2279;
2384 -> 2383;
2385 -> 0;
2385 -> 2383;
2386 -> 2385;
2386 -> 2279;
2387 -> 2374;
2387 -> 2386;
2387 -> 2279;
2388 -> 2279;
2389 -> 2279;
2390 -> 2329;
2390 -> 2279;
2391 -> 2330;
2391 -> 2279;
2392 -> 2279;
2393 -> 2279;
2393 -> 2392;
2394 -> 2393;
2394 -> 2279;
2394 -> 0;
2394 -> 2392;
2395 -> 2392;
2396 -> 2393;
2396 -> 2279;
2396 -> 2395;
2396 -> 2392;
2397 -> 2394;
2397 -> 2279;
2398 -> 2279;
2399 -> 2279;
2399 -> 2398;
2400 -> 2399;
2400 -> 2279;
2400 -> 0;
2400 -> 2398;
2401 -> 2400;
2401 -> 2279;
2402 -> 2279;
2403 -> 2329;
2403 -> 2279;
2404 -> 2329;
2404 -> 2279;
2405 -> 2279;
2406 -> 2405;
2406 -> 2279;
2407 -> 2279;
2408 -> 2407;
2408 -> 2279;
2409 -> 2391;
2409 -> 2329;
2410 -> 2390;
2410 -> 2329;
2411 -> 2329;
2412 -> 2409;
2412 -> 2329;
2413 -> 2279;
2413 -> 2329;
2414 -> 2329;
2415 -> 2329;
2416 -> 2414;
2416 -> 2415;
2417 -> 2416;
2417 -> 0;
2417 -> 2415;
2418 -> 2416;
2418 -> 0;
2418 -> 2415;
2419 -> 2415;
2420 -> 0;
2420 -> 2415;
2421 -> 2416;
2421 -> 2420;
2421 -> 2415;
2422 -> 0;
2422 -> 2415;
2423 -> 2416;
2423 -> 2422;
2423 -> 2415;
2424 -> 2415;
2425 -> 0;
2425 -> 2415;
2426 -> 2416;
2426 -> 2425;
2426 -> 2415;
2427 -> 2426;
2427 -> 2415;
2428 -> 2415;
2429 -> 2427;
2429 -> 2428;
2430 -> 2428;
2431 -> 2429;
2431 -> 2430;
2431 -> 2428;
2432 -> 2329;
2433 -> 2410;
2433 -> 2432;
2433 -> 2329;
2434 -> 2410;
2434 -> 2329;
2435 -> 2412;
2435 -> 2329;
2436 -> 2410;
2436 -> 2329;
2437 -> 2434;
2437 -> 2329;
2438 -> 2329;
2439 -> 2435;
2439 -> 2329;
2440 -> 2329;
2441 -> 2329;
2442 -> 2329;
2443 -> 2439;
2443 -> 2410;
2444 -> 2442;
2444 -> 2410;
2445 -> 2410;
2446 -> 2437;
2446 -> 2410;
2447 -> 2443;
2447 -> 2410;
2448 -> 2410;
2449 -> 2444;
2449 -> 2410;
2450 -> 2445;
2450 -> 2329;
2450 -> 2410;
2451 -> 2450;
2452 -> 2446;
2452 -> 2451;
2452 -> 2450;
2453 -> 2448;
2453 -> 0;
2453 -> 2450;
2454 -> 2452;
2454 -> 2453;
2454 -> 2450;
2455 -> 2445;
2455 -> 2454;
2456 -> 2455;
2456 -> 2329;
2456 -> 2410;
2456 -> 2454;
2457 -> 2455;
2457 -> 2454;
2458 -> 2455;
2458 -> 2329;
2458 -> 2410;
2458 -> 2446;
2458 -> 2454;
2459 -> 2448;
2459 -> 2454;
2460 -> 2454;
2461 -> 2459;
2461 -> 2460;
2462 -> 2458;
2462 -> 2461;
2462 -> 2454;
2463 -> 2410;
2464 -> 2438;
2464 -> 2410;
2465 -> 2410;
2466 -> 2410;
2466 -> 2465;
2467 -> 2464;
2467 -> 2465;
2468 -> 2466;
2468 -> 0;
2468 -> 2465;
2469 -> 2465;
2470 -> 2468;
2470 -> 2465;
2471 -> 2467;
2471 -> 2470;
2472 -> 2441;
2472 -> 2410;
2473 -> 2440;
2473 -> 2410;
2474 -> 2471;
2474 -> 2410;
2475 -> 2472;
2475 -> 2410;
2476 -> 2473;
2476 -> 2410;
2477 -> 2410;
2478 -> 2477;
2478 -> 2410;
2479 -> 0;
2479 -> 2410;
2480 -> 2410;
2481 -> 2478;
2481 -> 2480;
2482 -> 2479;
2482 -> 2480;
2483 -> 2474;
2483 -> 2410;
2484 -> 2475;
2484 -> 2410;
2485 -> 2476;
2485 -> 2410;
2486 -> 2477;
2486 -> 2410;
2487 -> 2483;
2487 -> 2410;
2488 -> 2484;
2488 -> 2410;
2489 -> 2485;
2489 -> 2410;
2490 -> 2486;
2490 -> 2410;
2491 -> 2490;
2491 -> 2410;
2492 -> 2487;
2492 -> 2410;
2493 -> 2488;
2493 -> 2410;
2494 -> 2489;
2494 -> 2410;
2495 -> 2490;
2495 -> 2410;
2496 -> 2495;
2496 -> 2410;
2497 -> 0;
2497 -> 2410;
2498 -> 2410;
2499 -> 2496;
2499 -> 2498;
2500 -> 2497;
2500 -> 2498;
2501 -> 2491;
2501 -> 2410;
2502 -> 2492;
2502 -> 2410;
2503 -> 2493;
2503 -> 2410;
2504 -> 2494;
2504 -> 2410;
2505 -> 2501;
2505 -> 2410;
2506 -> 2502;
2506 -> 2410;
2507 -> 2503;
2507 -> 2410;
2508 -> 2501;
2508 -> 2410;
2509 -> 2504;
2509 -> 2410;
2510 -> 2410;
2511 -> 2410;
2512 -> 2505;
2512 -> 2511;
2512 -> 2410;
2513 -> 2505;
2513 -> 2410;
2514 -> 2505;
2514 -> 2410;
2515 -> 2410;
2516 -> 2505;
2516 -> 2410;
2517 -> 2509;
2517 -> 2410;
2518 -> 2516;
2518 -> 2410;
2519 -> 2410;
2520 -> 2516;
2520 -> 2410;
2521 -> 2410;
2522 -> 2410;
2522 -> 2329;
2523 -> 2410;
2524 -> 2516;
2524 -> 2410;
2525 -> 2524;
2525 -> 2410;
2526 -> 2410;
2527 -> 2523;
2527 -> 2526;
2527 -> 2410;
2528 -> 2434;
2529 -> 2279;
2529 -> 2528;
2530 -> 2529;
2530 -> 2434;
2530 -> 2528;
2531 -> 0;
2531 -> 2528;
2532 -> 2528;
2533 -> 2530;
2533 -> 2532;
2534 -> 2531;
2534 -> 2532;
2535 -> 2533;
2535 -> 2434;
2536 -> 2434;
2537 -> 2434;
2538 -> 2364;
2538 -> 2434;
2538 -> 0;
2538 -> 2363;
2539 -> 2538;
2539 -> 2279;
2540 -> 2279;
2540 -> 2539;
2541 -> 2540;
2541 -> 2279;
2542 -> 2279;
2543 -> 2279;
2544 -> 2542;
2544 -> 2543;
2545 -> 2543;
2546 -> 2544;
2546 -> 2545;
2547 -> 2546;
2547 -> 2434;
2547 -> 2545;
2548 -> 2547;
2548 -> 2543;
2549 -> 2543;
2550 -> 2544;
2550 -> 2549;
2551 -> 2550;
2551 -> 2434;
2551 -> 2549;
2552 -> 2551;
2552 -> 2543;
2553 -> 2552;
2553 -> 2434;
2554 -> 2553;
2555 -> 2279;
2556 -> 2279;
2557 -> 2279;
2558 -> 2279;
2559 -> 2279;
2560 -> 2302;
2560 -> 2279;
2561 -> 2555;
2561 -> 2279;
2562 -> 2555;
2562 -> 2279;
2563 -> 2555;
2563 -> 2279;
2564 -> 2279;
2565 -> 2279;
2566 -> 2558;
2566 -> 2565;
2566 -> 2279;
2567 -> 2279;
2568 -> 2559;
2568 -> 2567;
2568 -> 2279;
2569 -> 2279;
2570 -> 2434;
2571 -> 2434;
2572 -> 2570;
2572 -> 2571;
2572 -> 2434;
2573 -> 2570;
2573 -> 2434;
2573 -> 0;
2574 -> 2434;
2574 -> 0;
2574 -> 2572;
2575 -> 2574;
2575 -> 2564;
2575 -> 2434;
2575 -> 2572;
2576 -> 2560;
2576 -> 2572;
2577 -> 2434;
2577 -> 2576;
2578 -> 2559;
2578 -> 2576;
2579 -> 2558;
2579 -> 2576;
2580 -> 2576;
2581 -> 2577;
2581 -> 2580;
2582 -> 2578;
2582 -> 2580;
2583 -> 2579;
2583 -> 2580;
2584 -> 2581;
2584 -> 2434;
2584 -> 2580;
2585 -> 2580;
2586 -> 2584;
2586 -> 2585;
2586 -> 2580;
2587 -> 2434;
2587 -> 2584;
2587 -> 0;
2587 -> 2279;
2588 -> 2558;
2588 -> 2587;
2589 -> 2587;
2590 -> 2434;
2590 -> 2587;
2591 -> 2559;
2591 -> 2587;
2592 -> 2587;
2593 -> 2588;
2593 -> 2592;
2594 -> 2589;
2594 -> 2592;
2595 -> 2590;
2595 -> 2592;
2596 -> 2591;
2596 -> 2592;
2597 -> 2564;
2597 -> 2592;
2598 -> 2595;
2598 -> 2584;
2598 -> 2592;
2599 -> 2592;
2600 -> 2434;
2600 -> 2584;
2600 -> 0;
2600 -> 2279;
2601 -> 2279;
2602 -> 2279;
2603 -> 2434;
2603 -> 2279;
2604 -> 2584;
2604 -> 2434;
2605 -> 2434;
2606 -> 2605;
2606 -> 2434;
2607 -> 2434;
2608 -> 2607;
2608 -> 2434;
2609 -> 2584;
2610 -> 2584;
2611 -> 2584;
2612 -> 2609;
2612 -> 2584;
2613 -> 2610;
2613 -> 2584;
2614 -> 2611;
2614 -> 2584;
2615 -> 2613;
2615 -> 2609;
2616 -> 2614;
2616 -> 2609;
2617 -> 2609;
2618 -> 2609;
2618 -> 2584;
2618 -> 0;
2619 -> 2609;
2620 -> 2612;
2620 -> 2609;
2621 -> 2615;
2621 -> 2609;
2622 -> 2616;
2622 -> 2609;
2623 -> 2612;
2623 -> 2609;
2624 -> 2609;
2624 -> 0;
2625 -> 2609;
2625 -> 0;
2626 -> 2622;
2626 -> 2609;
2627 -> 2626;
2627 -> 2609;
2628 -> 2620;
2628 -> 2609;
2629 -> 2621;
2629 -> 2609;
2630 -> 2623;
2630 -> 2609;
2631 -> 2609;
2632 -> 2628;
2632 -> 2631;
2632 -> 2609;
2633 -> 2609;
2634 -> 2609;
2635 -> 2609;
2636 -> 2633;
2636 -> 2635;
2636 -> 2609;
2637 -> 2609;
2638 -> 2637;
2638 -> 2609;
2639 -> 2626;
2639 -> 2638;
2640 -> 2584;
2640 -> 2270;
2641 -> 2640;
2641 -> 2606;
2641 -> 2270;
2642 -> 2641;
2642 -> 0;
2642 -> 2270;
2643 -> 2642;
2643 -> 2264;
2644 -> 779;
2644 -> 753;
2645 -> 779;
2645 -> 753;
2646 -> 779;
2646 -> 753;
2647 -> 2644;
2647 -> 753;
2648 -> 753;
2649 -> 2645;
2649 -> 753;
2650 -> 753;
2651 -> 753;
2652 -> 2647;
2652 -> 2651;
2653 -> 2648;
2653 -> 2651;
2654 -> 2649;
2654 -> 2651;
2655 -> 2650;
2655 -> 2651;
2656 -> 2646;
2656 -> 2651;
2658 -> 2657;
2660 -> 2659;
2662 -> 2661;
2664 -> 2660;
2664 -> 2663;
2665 -> 2662;
2665 -> 2663;
2667 -> 2660;
2667 -> 2666;
2668 -> 2662;
2668 -> 2666;
2670 -> 2660;
2670 -> 2669;
2671 -> 2662;
2671 -> 2669;
2673 -> 2660;
2673 -> 2672;
2674 -> 2662;
2674 -> 2672;
2676 -> 2660;
2676 -> 2675;
2677 -> 2662;
2677 -> 2675;
2679 -> 2660;
2679 -> 2678;
2680 -> 2662;
2680 -> 2678;
2682 -> 2660;
2682 -> 2681;
2683 -> 2662;
2683 -> 2681;
2685 -> 2660;
2685 -> 2684;
2686 -> 2662;
2686 -> 2684;
2688 -> 2660;
2688 -> 2687;
2689 -> 2662;
2689 -> 2687;
2691 -> 2660;
2691 -> 2690;
2692 -> 2662;
2692 -> 2690;
2694 -> 2660;
2694 -> 2693;
2696 -> 2660;
2696 -> 2695;
2698 -> 2663;
2698 -> 2697;
2699 -> 2666;
2699 -> 2697;
2700 -> 2669;
2700 -> 2697;
2701 -> 2672;
2701 -> 2697;
2702 -> 2675;
2702 -> 2697;
2703 -> 2678;
2703 -> 2697;
2704 -> 2681;
2704 -> 2697;
2705 -> 2684;
2705 -> 2697;
2706 -> 2687;
2706 -> 2697;
2707 -> 2690;
2707 -> 2697;
2708 -> 2693;
2708 -> 2697;
2709 -> 2695;
2709 -> 2697;
2710 -> 2697;
2712 -> 2660;
2712 -> 2711;
2713 -> 2662;
2713 -> 2711;
2715 -> 2662;
2715 -> 2714;
2716 -> 2660;
2716 -> 2714;
2718 -> 2662;
2718 -> 2717;
2719 -> 2660;
2719 -> 2717;
2721 -> 2662;
2721 -> 2720;
2722 -> 2660;
2722 -> 2720;
2724 -> 2662;
2724 -> 2723;
2725 -> 2660;
2725 -> 2723;
2727 -> 2662;
2727 -> 2726;
2728 -> 2660;
2728 -> 2726;
2730 -> 2662;
2730 -> 2729;
2731 -> 2660;
2731 -> 2729;
2733 -> 2662;
2733 -> 2732;
2734 -> 2660;
2734 -> 2732;
2736 -> 2662;
2736 -> 2735;
2737 -> 2660;
2737 -> 2735;
2739 -> 2662;
2739 -> 2738;
2740 -> 2660;
2740 -> 2738;
2742 -> 2662;
2742 -> 2741;
2743 -> 2660;
2743 -> 2741;
2745 -> 2662;
2745 -> 2744;
2746 -> 2660;
2746 -> 2744;
2748 -> 2711;
2748 -> 2747;
2749 -> 2714;
2749 -> 2747;
2750 -> 2717;
2750 -> 2747;
2751 -> 2720;
2751 -> 2747;
2752 -> 2723;
2752 -> 2747;
2753 -> 2726;
2753 -> 2747;
2754 -> 2729;
2754 -> 2747;
2755 -> 2732;
2755 -> 2747;
2756 -> 2735;
2756 -> 2747;
2757 -> 2738;
2757 -> 2747;
2758 -> 2741;
2758 -> 2747;
2759 -> 2744;
2759 -> 2747;
2760 -> 2747;
2761 -> 2652;
2761 -> 2651;
2762 -> 2653;
2762 -> 2651;
2763 -> 2654;
2763 -> 2651;
2764 -> 2655;
2764 -> 2651;
2765 -> 2651;
2766 -> 2761;
2766 -> 2765;
2767 -> 2762;
2767 -> 2765;
2768 -> 2763;
2768 -> 2765;
2769 -> 2764;
2769 -> 2765;
2770 -> 2656;
2770 -> 2765;
2771 -> 2770;
2771 -> 2765;
2772 -> 2770;
2772 -> 2765;
2773 -> 2770;
2773 -> 2765;
2774 -> 2770;
2774 -> 2765;
2775 -> 2765;
2776 -> 2766;
2776 -> 2775;
2776 -> 2765;
2777 -> 2765;
2778 -> 2769;
2778 -> 2777;
2778 -> 2765;
2779 -> 2765;
2780 -> 2769;
2780 -> 2779;
2780 -> 2765;
2781 -> 2766;
2781 -> 2770;
2781 -> 2765;
2782 -> 2767;
2782 -> 2770;
2782 -> 2765;
2783 -> 2768;
2783 -> 2770;
2783 -> 2765;
2784 -> 2769;
2784 -> 2770;
2784 -> 2765;
2785 -> 779;
2785 -> 2609;
2785 -> 2781;
2785 -> 2782;
2785 -> 2783;
2785 -> 2784;
2785 -> 750;
2786 -> 2785;
2786 -> 1003;
2786 -> 997;
2787 -> 1001;
2787 -> 2785;
2787 -> 997;
2788 -> 2279;
2788 -> 1048;
2789 -> 0;
2789 -> 2785;
2790 -> 2789;
2790 -> 1072;
2791 -> 2789;
2792 -> 2791;
2792 -> 2789;
2793 -> 2789;
2794 -> 2789;
2794 -> 2793;
2795 -> 2794;
2795 -> 2789;
2795 -> 2793;
2796 -> 2795;
2796 -> 2789;
2797 -> 2789;
2798 -> 2789;
2799 -> 2789;
2800 -> 2789;
2801 -> 2799;
2801 -> 2800;
2802 -> 2799;
2802 -> 2800;
2803 -> 2799;
2803 -> 2800;
2804 -> 2799;
2804 -> 2800;
2805 -> 2802;
2805 -> 2800;
2806 -> 2800;
2807 -> 2805;
2807 -> 2806;
2808 -> 2806;
2809 -> 2807;
2809 -> 2808;
2809 -> 2806;
2810 -> 2804;
2810 -> 2800;
2811 -> 2804;
2811 -> 2800;
2812 -> 2800;
2813 -> 2801;
2813 -> 2812;
2813 -> 2800;
2814 -> 2801;
2814 -> 2804;
2814 -> 2800;
2815 -> 778;
2815 -> 2800;
2816 -> 2815;
2816 -> 2803;
2816 -> 2800;
2817 -> 2816;
2817 -> 2804;
2817 -> 2800;
2818 -> 2789;
2819 -> 2789;
2819 -> 2807;
2819 -> 2785;
2819 -> 2804;
2819 -> 2814;
2819 -> 2811;
2819 -> 2817;
2820 -> 779;
2820 -> 753;
2821 -> 779;
2821 -> 753;
2822 -> 2821;
2822 -> 2819;
2822 -> 753;
2823 -> 2820;
2823 -> 753;
2824 -> 753;
2825 -> 2822;
2825 -> 2824;
2826 -> 2823;
2826 -> 2824;
2827 -> 2825;
2827 -> 2826;
2827 -> 2824;
2828 -> 2827;
2829 -> 2828;
2830 -> 2828;
2831 -> 0;
2831 -> 2828;
2832 -> 2828;
2833 -> 2830;
2833 -> 2832;
2834 -> 2831;
2834 -> 2832;
2835 -> 2828;
2836 -> 0;
2836 -> 2828;
2837 -> 2828;
2838 -> 2835;
2838 -> 2837;
2839 -> 2836;
2839 -> 2837;
2840 -> 2828;
2841 -> 2828;
2842 -> 2828;
2843 -> 2841;
2843 -> 2842;
2844 -> 2841;
2844 -> 2842;
2845 -> 2841;
2845 -> 2842;
2846 -> 2841;
2846 -> 2842;
2847 -> 2841;
2847 -> 2842;
2848 -> 2828;
2848 -> 2842;
2849 -> 2842;
2850 -> 2844;
2850 -> 2849;
2850 -> 2842;
2851 -> 2842;
2852 -> 2851;
2852 -> 2828;
2853 -> 2828;
2854 -> 2852;
2854 -> 2853;
2854 -> 2828;
2855 -> 2828;
2856 -> 2828;
2856 -> 2855;
2857 -> 2856;
2857 -> 2828;
2857 -> 0;
2857 -> 2855;
2858 -> 2855;
2859 -> 2856;
2859 -> 2828;
2859 -> 2858;
2859 -> 2855;
2860 -> 2857;
2860 -> 2828;
2861 -> 2828;
2862 -> 2828;
2863 -> 2862;
2863 -> 2828;
2864 -> 2863;
2864 -> 2828;
2865 -> 2828;
2866 -> 2828;
2866 -> 2865;
2867 -> 2866;
2867 -> 2828;
2867 -> 0;
2867 -> 2865;
2868 -> 2865;
2869 -> 2866;
2869 -> 2828;
2869 -> 2868;
2869 -> 2865;
2870 -> 2867;
2870 -> 2828;
2871 -> 2828;
2872 -> 2828;
2873 -> 2871;
2873 -> 2872;
2874 -> 2873;
2874 -> 0;
2874 -> 2872;
2875 -> 2873;
2875 -> 0;
2875 -> 2872;
2876 -> 2872;
2877 -> 0;
2877 -> 2872;
2878 -> 2873;
2878 -> 2877;
2878 -> 2872;
2879 -> 0;
2879 -> 2872;
2880 -> 2873;
2880 -> 2879;
2880 -> 2872;
2881 -> 2872;
2882 -> 0;
2882 -> 2872;
2883 -> 2873;
2883 -> 2882;
2883 -> 2872;
2884 -> 2883;
2884 -> 2872;
2885 -> 2872;
2886 -> 2884;
2886 -> 2885;
2887 -> 2885;
2888 -> 2886;
2888 -> 2887;
2888 -> 2885;
2889 -> 2828;
2890 -> 2828;
2891 -> 2828;
2892 -> 2828;
2893 -> 2828;
2894 -> 2828;
2895 -> 2864;
2895 -> 2828;
2896 -> 2828;
2897 -> 2828;
2898 -> 2828;
2898 -> 2897;
2899 -> 2898;
2899 -> 2828;
2899 -> 0;
2899 -> 2897;
2900 -> 2897;
2901 -> 2898;
2901 -> 2828;
2901 -> 2900;
2901 -> 2897;
2902 -> 2899;
2902 -> 2828;
2903 -> 2828;
2903 -> 0;
2904 -> 2828;
2905 -> 2864;
2905 -> 2828;
2906 -> 2828;
2907 -> 2828;
2907 -> 2906;
2908 -> 2907;
2908 -> 2828;
2908 -> 0;
2908 -> 2906;
2909 -> 2906;
2910 -> 2907;
2910 -> 2828;
2910 -> 2909;
2910 -> 2906;
2911 -> 2908;
2911 -> 2828;
2912 -> 2828;
2913 -> 2828;
2913 -> 2912;
2914 -> 2913;
2914 -> 2828;
2914 -> 0;
2914 -> 2912;
2915 -> 2914;
2915 -> 2828;
2916 -> 2828;
2917 -> 2828;
2918 -> 2905;
2918 -> 2828;
2919 -> 2828;
2920 -> 2828;
2921 -> 2828;
2922 -> 2920;
2922 -> 2921;
2923 -> 2922;
2923 -> 0;
2923 -> 2921;
2924 -> 2922;
2924 -> 0;
2924 -> 2921;
2925 -> 2921;
2926 -> 0;
2926 -> 2921;
2927 -> 2922;
2927 -> 2926;
2927 -> 2921;
2928 -> 0;
2928 -> 2921;
2929 -> 2922;
2929 -> 2928;
2929 -> 2921;
2930 -> 2921;
2931 -> 0;
2931 -> 2921;
2932 -> 2922;
2932 -> 2931;
2932 -> 2921;
2933 -> 2932;
2933 -> 2921;
2934 -> 2921;
2935 -> 2933;
2935 -> 2934;
2936 -> 2934;
2937 -> 2935;
2937 -> 2936;
2937 -> 2934;
2938 -> 2828;
2939 -> 2828;
2940 -> 2917;
2940 -> 2828;
2941 -> 2918;
2941 -> 2828;
2942 -> 2905;
2942 -> 2828;
2943 -> 2828;
2944 -> 2939;
2944 -> 2943;
2945 -> 2939;
2945 -> 2943;
2946 -> 2939;
2946 -> 2943;
2947 -> 2939;
2947 -> 2943;
2948 -> 2940;
2948 -> 2943;
2949 -> 2939;
2949 -> 2943;
2950 -> 2939;
2950 -> 2943;
2951 -> 2941;
2951 -> 2943;
2952 -> 2942;
2952 -> 2943;
2953 -> 2919;
2953 -> 2943;
2954 -> 2945;
2954 -> 2828;
2954 -> 2943;
2955 -> 2944;
2955 -> 2954;
2956 -> 2945;
2956 -> 2954;
2957 -> 2946;
2957 -> 2954;
2958 -> 2947;
2958 -> 2954;
2959 -> 2948;
2959 -> 2954;
2960 -> 2949;
2960 -> 2954;
2961 -> 2950;
2961 -> 2954;
2962 -> 2951;
2962 -> 2954;
2963 -> 2952;
2963 -> 2954;
2964 -> 2954;
2965 -> 2955;
2965 -> 2964;
2966 -> 2956;
2966 -> 2964;
2967 -> 2957;
2967 -> 2964;
2968 -> 2958;
2968 -> 2964;
2969 -> 2959;
2969 -> 2964;
2970 -> 2960;
2970 -> 2964;
2971 -> 2961;
2971 -> 2964;
2972 -> 2962;
2972 -> 2964;
2973 -> 2963;
2973 -> 2964;
2974 -> 2953;
2974 -> 2964;
2975 -> 2965;
2975 -> 2964;
2976 -> 2966;
2976 -> 2964;
2977 -> 2967;
2977 -> 2964;
2978 -> 2968;
2978 -> 2964;
2979 -> 2969;
2979 -> 2964;
2980 -> 2970;
2980 -> 2964;
2981 -> 2971;
2981 -> 2964;
2982 -> 2972;
2982 -> 2964;
2983 -> 2973;
2983 -> 2964;
2984 -> 2964;
2985 -> 2975;
2985 -> 2984;
2986 -> 2976;
2986 -> 2984;
2987 -> 2977;
2987 -> 2984;
2988 -> 2978;
2988 -> 2984;
2989 -> 2979;
2989 -> 2984;
2990 -> 2980;
2990 -> 2984;
2991 -> 2981;
2991 -> 2984;
2992 -> 2976;
2992 -> 2984;
2993 -> 2982;
2993 -> 2984;
2994 -> 2983;
2994 -> 2984;
2995 -> 2974;
2995 -> 2984;
2996 -> 2984;
2997 -> 2986;
2997 -> 2996;
2997 -> 2984;
2998 -> 2986;
2998 -> 2984;
2999 -> 2986;
2999 -> 2984;
3000 -> 2984;
3001 -> 1395;
3001 -> 2998;
3001 -> 3000;
3002 -> 3000;
3003 -> 3001;
3003 -> 3002;
3004 -> 3003;
3004 -> 3001;
3004 -> 0;
3004 -> 3002;
3005 -> 3002;
3006 -> 3003;
3006 -> 3001;
3006 -> 3005;
3006 -> 3002;
3007 -> 3004;
3007 -> 3000;
3008 -> 3001;
3008 -> 2984;
3009 -> 2984;
3010 -> 2984;
3011 -> 2999;
3011 -> 3010;
3011 -> 2984;
3012 -> 3011;
3013 -> 3008;
3013 -> 3012;
3014 -> 3011;
3015 -> 3008;
3015 -> 3011;
3016 -> 2999;
3016 -> 3011;
3017 -> 2987;
3017 -> 3011;
3018 -> 2988;
3018 -> 3011;
3019 -> 2990;
3019 -> 3011;
3020 -> 2991;
3020 -> 3011;
3021 -> 2992;
3021 -> 3011;
3022 -> 2993;
3022 -> 3011;
3023 -> 2994;
3023 -> 3011;
3024 -> 2989;
3024 -> 3011;
3025 -> 3011;
3026 -> 3015;
3026 -> 3025;
3027 -> 3016;
3027 -> 3025;
3028 -> 3017;
3028 -> 3025;
3029 -> 3018;
3029 -> 3025;
3030 -> 3019;
3030 -> 3025;
3031 -> 3020;
3031 -> 3025;
3032 -> 3021;
3032 -> 3025;
3033 -> 3022;
3033 -> 3025;
3034 -> 3023;
3034 -> 3025;
3035 -> 3024;
3035 -> 3025;
3036 -> 3027;
3036 -> 3025;
3037 -> 3028;
3037 -> 3025;
3038 -> 3030;
3038 -> 3025;
3039 -> 3031;
3039 -> 3025;
3040 -> 3025;
3041 -> 3036;
3041 -> 3040;
3042 -> 3037;
3042 -> 3040;
3043 -> 3038;
3043 -> 3040;
3044 -> 3039;
3044 -> 3040;
3045 -> 3043;
3045 -> 3041;
3045 -> 3040;
3046 -> 3042;
3046 -> 3045;
3047 -> 3041;
3047 -> 3046;
3047 -> 3013;
3047 -> 3045;
3048 -> 3047;
3048 -> 3025;
3049 -> 3011;
3050 -> 2985;
3050 -> 3011;
3051 -> 3008;
3051 -> 3011;
3052 -> 2989;
3052 -> 3011;
3053 -> 3034;
3053 -> 3011;
3054 -> 3050;
3054 -> 3051;
3054 -> 3052;
3054 -> 3053;
3054 -> 3047;
3054 -> 3011;
3055 -> 3011;
3056 -> 3054;
3056 -> 3055;
3057 -> 3054;
3057 -> 3055;
3058 -> 3055;
3059 -> 3056;
3059 -> 3058;
3060 -> 3059;
3060 -> 3055;
3061 -> 3055;
3062 -> 3057;
3062 -> 3061;
3063 -> 3062;
3063 -> 3055;
3064 -> 3060;
3064 -> 3063;
3064 -> 3055;
3065 -> 2999;
3065 -> 3011;
3066 -> 3011;
3067 -> 3065;
3067 -> 3054;
3067 -> 3066;
3067 -> 3011;
3068 -> 3011;
3069 -> 3008;
3069 -> 3068;
3070 -> 3069;
3070 -> 3054;
3070 -> 3068;
3071 -> 3070;
3071 -> 3011;
3072 -> 3011;
3073 -> 2985;
3073 -> 3072;
3074 -> 3073;
3074 -> 3054;
3074 -> 3072;
3075 -> 3074;
3075 -> 3011;
3076 -> 3011;
3077 -> 2989;
3077 -> 3076;
3077 -> 3011;
3078 -> 3011;
3079 -> 2991;
3079 -> 3078;
3080 -> 3078;
3081 -> 3079;
3081 -> 3080;
3082 -> 3081;
3082 -> 3054;
3082 -> 3080;
3083 -> 3082;
3083 -> 3078;
3084 -> 3083;
3084 -> 3011;
3085 -> 2999;
3085 -> 3011;
3086 -> 2989;
3086 -> 3011;
3087 -> 2995;
3087 -> 3054;
3087 -> 3011;
3088 -> 3009;
3088 -> 3011;
3089 -> 3085;
3089 -> 3086;
3089 -> 3087;
3089 -> 3088;
3089 -> 3054;
3089 -> 3011;
3090 -> 3011;
3091 -> 3089;
3091 -> 3090;
3091 -> 3011;
3092 -> 3089;
3092 -> 3091;
3093 -> 3054;
3093 -> 3091;
3094 -> 3089;
3095 -> 2988;
3095 -> 3089;
3096 -> 2991;
3096 -> 3089;
3097 -> 2992;
3097 -> 3089;
3098 -> 2993;
3098 -> 3089;
3099 -> 3089;
3100 -> 3095;
3100 -> 3089;
3101 -> 3096;
3101 -> 3089;
3102 -> 3097;
3102 -> 3089;
3103 -> 3098;
3103 -> 3089;
3104 -> 3089;
3105 -> 3101;
3105 -> 3089;
3106 -> 3092;
3106 -> 3089;
3107 -> 3092;
3107 -> 3089;
3108 -> 3092;
3108 -> 3089;
3109 -> 3089;
3110 -> 3107;
3110 -> 3109;
3111 -> 3110;
3111 -> 3089;
3112 -> 3089;
3113 -> 3108;
3113 -> 3112;
3114 -> 3113;
3114 -> 3089;
3115 -> 3111;
3115 -> 3114;
3115 -> 3089;
3116 -> 3089;
3117 -> 3089;
3118 -> 3116;
3118 -> 3092;
3118 -> 3117;
3118 -> 3089;
3119 -> 3089;
3120 -> 3119;
3120 -> 3092;
3121 -> 3120;
3121 -> 3089;
3122 -> 3089;
3123 -> 3122;
3123 -> 3092;
3124 -> 3123;
3124 -> 3089;
3125 -> 3089;
3126 -> 3089;
3127 -> 2991;
3127 -> 3126;
3128 -> 3126;
3129 -> 3127;
3129 -> 3128;
3130 -> 3129;
3130 -> 3092;
3130 -> 3128;
3131 -> 3130;
3131 -> 3126;
3132 -> 3131;
3132 -> 3089;
3133 -> 3089;
3134 -> 3092;
3134 -> 2984;
3135 -> 2984;
3136 -> 3008;
3136 -> 3135;
3137 -> 3136;
3137 -> 3092;
3137 -> 3135;
3138 -> 3135;
3139 -> 2984;
3140 -> 2964;
3141 -> 2954;
3142 -> 2828;
3143 -> 2905;
3143 -> 2828;
3144 -> 3092;
3144 -> 2828;
3145 -> 2828;
3146 -> 3142;
3146 -> 3145;
3147 -> 3142;
3147 -> 3145;
3148 -> 3142;
3148 -> 3145;
3149 -> 3142;
3149 -> 3145;
3150 -> 3142;
3150 -> 3145;
3151 -> 3142;
3151 -> 3145;
3152 -> 3143;
3152 -> 3145;
3153 -> 3144;
3153 -> 3145;
3154 -> 2828;
3154 -> 3145;
3155 -> 3146;
3155 -> 3145;
3156 -> 3147;
3156 -> 3145;
3157 -> 3148;
3157 -> 3145;
3158 -> 3149;
3158 -> 3145;
3159 -> 3150;
3159 -> 3145;
3160 -> 3151;
3160 -> 3145;
3161 -> 3152;
3161 -> 3145;
3162 -> 3153;
3162 -> 3145;
3163 -> 3145;
3164 -> 3155;
3164 -> 3163;
3165 -> 3156;
3165 -> 3163;
3166 -> 3157;
3166 -> 3163;
3167 -> 3158;
3167 -> 3163;
3168 -> 3159;
3168 -> 3163;
3169 -> 3160;
3169 -> 3163;
3170 -> 3161;
3170 -> 3163;
3171 -> 3162;
3171 -> 3163;
3172 -> 3154;
3172 -> 3163;
3173 -> 3163;
3174 -> 3164;
3174 -> 3173;
3175 -> 3174;
3175 -> 3137;
3175 -> 3173;
3176 -> 0;
3176 -> 3173;
3177 -> 3173;
3178 -> 3175;
3178 -> 3177;
3179 -> 3176;
3179 -> 3177;
3180 -> 3178;
3180 -> 3163;
3181 -> 3163;
3182 -> 3181;
3182 -> 3163;
3183 -> 3166;
3183 -> 3163;
3184 -> 3181;
3184 -> 3163;
3185 -> 3172;
3185 -> 3137;
3185 -> 3183;
3185 -> 3184;
3185 -> 3182;
3185 -> 3163;
3186 -> 3172;
3186 -> 3185;
3186 -> 3163;
3187 -> 3145;
3188 -> 3145;
3189 -> 3147;
3189 -> 3188;
3190 -> 3189;
3190 -> 3185;
3190 -> 3188;
3191 -> 3190;
3191 -> 3145;
3192 -> 3151;
3192 -> 0;
3192 -> 3145;
3193 -> 3145;
3194 -> 3191;
3194 -> 3192;
3194 -> 3145;
3195 -> 3154;
3195 -> 3185;
3195 -> 3194;
3196 -> 3146;
3196 -> 3194;
3197 -> 3147;
3197 -> 3194;
3198 -> 3148;
3198 -> 3194;
3199 -> 3149;
3199 -> 3194;
3200 -> 3150;
3200 -> 3194;
3201 -> 3151;
3201 -> 3194;
3202 -> 3152;
3202 -> 3194;
3203 -> 3171;
3203 -> 3194;
3204 -> 3194;
3205 -> 3195;
3205 -> 3204;
3206 -> 3196;
3206 -> 3204;
3207 -> 3197;
3207 -> 3204;
3208 -> 3198;
3208 -> 3204;
3209 -> 3199;
3209 -> 3204;
3210 -> 3200;
3210 -> 3204;
3211 -> 3201;
3211 -> 3204;
3212 -> 3202;
3212 -> 3204;
3213 -> 3203;
3213 -> 3204;
3214 -> 3206;
3214 -> 3185;
3214 -> 3204;
3215 -> 0;
3215 -> 3204;
3216 -> 3204;
3217 -> 3214;
3217 -> 3216;
3218 -> 3215;
3218 -> 3216;
3219 -> 3204;
3220 -> 3206;
3220 -> 3219;
3221 -> 3220;
3221 -> 3185;
3221 -> 3219;
3222 -> 0;
3222 -> 3219;
3223 -> 3219;
3224 -> 3221;
3224 -> 3223;
3225 -> 3222;
3225 -> 3223;
3226 -> 3224;
3226 -> 3204;
3227 -> 3205;
3227 -> 3204;
3228 -> 3194;
3229 -> 2898;
3229 -> 3185;
3229 -> 0;
3229 -> 2897;
3230 -> 2898;
3230 -> 3185;
3230 -> 2900;
3230 -> 2897;
3231 -> 3229;
3231 -> 2828;
3232 -> 3185;
3233 -> 3185;
3233 -> 3232;
3234 -> 3233;
3234 -> 3185;
3234 -> 0;
3234 -> 3232;
3235 -> 3232;
3236 -> 3233;
3236 -> 3185;
3236 -> 3235;
3236 -> 3232;
3237 -> 3234;
3237 -> 3185;
3238 -> 3185;
3239 -> 3185;
3239 -> 3238;
3240 -> 3239;
3240 -> 3185;
3240 -> 0;
3240 -> 3238;
3241 -> 3240;
3241 -> 3185;
3242 -> 3185;
3243 -> 3185;
3244 -> 3185;
3245 -> 3185;
3246 -> 3244;
3246 -> 3245;
3247 -> 3246;
3247 -> 0;
3247 -> 3245;
3248 -> 3246;
3248 -> 0;
3248 -> 3245;
3249 -> 3245;
3250 -> 0;
3250 -> 3245;
3251 -> 3246;
3251 -> 3250;
3251 -> 3245;
3252 -> 0;
3252 -> 3245;
3253 -> 3246;
3253 -> 3252;
3253 -> 3245;
3254 -> 3245;
3255 -> 0;
3255 -> 3245;
3256 -> 3246;
3256 -> 3255;
3256 -> 3245;
3257 -> 3256;
3257 -> 3245;
3258 -> 3245;
3259 -> 3257;
3259 -> 3258;
3260 -> 3258;
3261 -> 3259;
3261 -> 3260;
3261 -> 3258;
3262 -> 3185;
3263 -> 3243;
3263 -> 3185;
3264 -> 3185;
3265 -> 3185;
3266 -> 3185;
3267 -> 3263;
3267 -> 3185;
3268 -> 3185;
3269 -> 3185;
3270 -> 3185;
3271 -> 3185;
3272 -> 3265;
3272 -> 3185;
3273 -> 3267;
3273 -> 3185;
3274 -> 3265;
3274 -> 3185;
3275 -> 3270;
3275 -> 3185;
3276 -> 3271;
3276 -> 3185;
3277 -> 3276;
3278 -> 3272;
3278 -> 3277;
3278 -> 3276;
3279 -> 3274;
3279 -> 0;
3279 -> 3276;
3280 -> 3278;
3280 -> 3279;
3280 -> 3276;
3281 -> 3271;
3281 -> 3280;
3282 -> 3281;
3282 -> 3185;
3282 -> 3280;
3283 -> 3281;
3283 -> 3280;
3284 -> 3281;
3284 -> 3185;
3284 -> 3272;
3284 -> 3280;
3285 -> 3274;
3285 -> 3280;
3286 -> 3280;
3287 -> 3285;
3287 -> 3286;
3288 -> 3284;
3288 -> 3287;
3288 -> 3280;
3289 -> 3185;
3290 -> 3266;
3290 -> 3265;
3291 -> 3265;
3292 -> 3265;
3292 -> 3291;
3293 -> 3290;
3293 -> 3291;
3294 -> 3292;
3294 -> 0;
3294 -> 3291;
3295 -> 3291;
3296 -> 3294;
3296 -> 3291;
3297 -> 3293;
3297 -> 3296;
3298 -> 3269;
3298 -> 3265;
3299 -> 3213;
3299 -> 3265;
3300 -> 3268;
3300 -> 3265;
3301 -> 3297;
3301 -> 3265;
3302 -> 3298;
3302 -> 3265;
3303 -> 3300;
3303 -> 3265;
3304 -> 3185;
3304 -> 3265;
3305 -> 3304;
3305 -> 3185;
3305 -> 3265;
3306 -> 0;
3306 -> 3265;
3307 -> 3265;
3308 -> 3305;
3308 -> 3307;
3309 -> 3306;
3309 -> 3307;
3310 -> 3301;
3310 -> 3265;
3311 -> 3302;
3311 -> 3265;
3312 -> 3303;
3312 -> 3265;
3313 -> 3304;
3313 -> 3265;
3314 -> 3265;
3315 -> 3310;
3315 -> 3265;
3316 -> 3311;
3316 -> 3265;
3317 -> 3299;
3317 -> 3265;
3318 -> 3312;
3318 -> 3265;
3319 -> 3313;
3319 -> 3185;
3319 -> 3265;
3320 -> 3319;
3320 -> 3185;
3320 -> 3265;
3321 -> 3265;
3322 -> 3320;
3322 -> 3321;
3322 -> 3265;
3323 -> 3314;
3323 -> 3322;
3324 -> 3320;
3324 -> 3322;
3325 -> 3315;
3325 -> 3322;
3326 -> 3316;
3326 -> 3322;
3327 -> 3317;
3327 -> 3322;
3328 -> 3322;
3329 -> 3322;
3330 -> 3323;
3330 -> 3329;
3331 -> 3324;
3331 -> 3329;
3332 -> 3325;
3332 -> 3329;
3333 -> 3326;
3333 -> 3329;
3334 -> 3327;
3334 -> 3329;
3335 -> 3328;
3335 -> 3329;
3336 -> 3319;
3336 -> 3329;
3337 -> 3336;
3337 -> 3185;
3337 -> 3329;
3338 -> 0;
3338 -> 3329;
3339 -> 3329;
3340 -> 3337;
3340 -> 3339;
3341 -> 3338;
3341 -> 3339;
3342 -> 3331;
3342 -> 3329;
3343 -> 3332;
3343 -> 3329;
3344 -> 3333;
3344 -> 3329;
3345 -> 3335;
3345 -> 3329;
3346 -> 3342;
3346 -> 3329;
3347 -> 3343;
3347 -> 3329;
3348 -> 3344;
3348 -> 3329;
3349 -> 3342;
3349 -> 3329;
3350 -> 3345;
3350 -> 3329;
3351 -> 3329;
3352 -> 3330;
3352 -> 3351;
3352 -> 3329;
3353 -> 3329;
3354 -> 3346;
3354 -> 3353;
3354 -> 3329;
3355 -> 3346;
3355 -> 3185;
3355 -> 3329;
3356 -> 3346;
3356 -> 3329;
3357 -> 3329;
3358 -> 3346;
3358 -> 3330;
3359 -> 3334;
3359 -> 3330;
3360 -> 3350;
3360 -> 3330;
3361 -> 3358;
3361 -> 3330;
3362 -> 3360;
3362 -> 3330;
3363 -> 3361;
3363 -> 3330;
3364 -> 3330;
3365 -> 3361;
3365 -> 3185;
3365 -> 3330;
3366 -> 3330;
3367 -> 3330;
3367 -> 3185;
3368 -> 3330;
3369 -> 3361;
3369 -> 3330;
3370 -> 3369;
3370 -> 3330;
3371 -> 3330;
3372 -> 3368;
3372 -> 3371;
3372 -> 3330;
3373 -> 3330;
3374 -> 3185;
3374 -> 3373;
3375 -> 3374;
3375 -> 3330;
3375 -> 3373;
3376 -> 0;
3376 -> 3373;
3377 -> 3373;
3378 -> 3375;
3378 -> 3377;
3379 -> 3376;
3379 -> 3377;
3380 -> 3378;
3380 -> 3330;
3381 -> 3330;
3382 -> 3330;
3383 -> 3185;
3384 -> 2828;
3384 -> 3383;
3385 -> 3384;
3385 -> 3330;
3385 -> 0;
3385 -> 3383;
3386 -> 3385;
3386 -> 3185;
3387 -> 3185;
3387 -> 3386;
3388 -> 2828;
3388 -> 0;
3388 -> 3185;
3389 -> 3185;
3390 -> 3387;
3390 -> 2828;
3391 -> 2828;
3392 -> 2828;
3393 -> 3391;
3393 -> 3392;
3394 -> 3392;
3395 -> 3393;
3395 -> 3394;
3396 -> 3395;
3396 -> 3359;
3396 -> 3394;
3397 -> 3396;
3397 -> 3392;
3398 -> 3392;
3399 -> 3393;
3399 -> 3398;
3400 -> 3399;
3400 -> 3359;
3400 -> 3398;
3401 -> 3400;
3401 -> 3392;
3402 -> 3401;
3402 -> 3359;
3403 -> 3402;
3404 -> 2828;
3405 -> 2828;
3406 -> 2828;
3407 -> 2828;
3408 -> 2828;
3409 -> 3404;
3409 -> 2828;
3410 -> 3404;
3410 -> 2828;
3411 -> 3404;
3411 -> 2828;
3412 -> 2828;
3413 -> 2828;
3414 -> 3407;
3414 -> 3413;
3414 -> 2828;
3415 -> 2828;
3416 -> 3408;
3416 -> 3415;
3416 -> 2828;
3417 -> 2828;
3418 -> 3359;
3418 -> 0;
3419 -> 3418;
3419 -> 3412;
3419 -> 3359;
3420 -> 3405;
3420 -> 3359;
3421 -> 3408;
3421 -> 3420;
3422 -> 3407;
3422 -> 3420;
3423 -> 3421;
3423 -> 3420;
3424 -> 3422;
3424 -> 3420;
3425 -> 3420;
3426 -> 3359;
3426 -> 3420;
3426 -> 0;
3426 -> 2828;
3427 -> 3407;
3427 -> 3426;
3428 -> 3426;
3429 -> 3359;
3429 -> 3426;
3430 -> 3408;
3430 -> 3426;
3431 -> 3426;
3432 -> 3427;
3432 -> 3431;
3433 -> 3428;
3433 -> 3431;
3434 -> 3429;
3434 -> 3431;
3435 -> 3430;
3435 -> 3431;
3436 -> 3412;
3436 -> 3431;
3437 -> 3434;
3437 -> 3420;
3437 -> 3431;
3438 -> 3431;
3439 -> 3359;
3439 -> 3420;
3439 -> 0;
3439 -> 2828;
3440 -> 2828;
3441 -> 2828;
3442 -> 3359;
3442 -> 2828;
3443 -> 3420;
3443 -> 3359;
3444 -> 3359;
3445 -> 3444;
3445 -> 3359;
3446 -> 3359;
3447 -> 3446;
3447 -> 3359;
3448 -> 3420;
3449 -> 3420;
3450 -> 3420;
3451 -> 3448;
3451 -> 3420;
3452 -> 3449;
3452 -> 3420;
3453 -> 3420;
3454 -> 3453;
3454 -> 3420;
3455 -> 3420;
3456 -> 3453;
3456 -> 3454;
3456 -> 3455;
3457 -> 3456;
3457 -> 3454;
3458 -> 3457;
3458 -> 3420;
3459 -> 3458;
3459 -> 3420;
3460 -> 3458;
3460 -> 3457;
3460 -> 0;
3460 -> 3420;
3461 -> 3458;
3461 -> 3420;
3462 -> 3450;
3462 -> 3420;
3463 -> 3451;
3463 -> 3420;
3464 -> 3452;
3464 -> 3420;
3465 -> 3458;
3465 -> 3420;
3466 -> 3450;
3466 -> 3457;
3466 -> 3420;
3467 -> 3450;
3467 -> 3466;
3467 -> 0;
3467 -> 3420;
3468 -> 3450;
3468 -> 3466;
3468 -> 0;
3468 -> 3420;
3469 -> 3450;
3469 -> 3458;
3469 -> 3466;
3469 -> 3420;
3470 -> 3464;
3470 -> 3420;
3471 -> 3470;
3471 -> 3420;
3472 -> 3462;
3472 -> 3420;
3473 -> 3463;
3473 -> 3420;
3474 -> 3465;
3474 -> 3420;
3475 -> 3420;
3476 -> 3472;
3476 -> 3475;
3476 -> 3420;
3477 -> 3420;
3478 -> 3469;
3478 -> 3420;
3479 -> 3420;
3480 -> 3477;
3480 -> 3479;
3480 -> 3420;
3481 -> 3469;
3481 -> 3420;
3482 -> 3481;
3482 -> 3420;
3483 -> 3470;
3483 -> 3482;
3484 -> 3420;
3484 -> 2270;
3485 -> 3484;
3485 -> 3445;
3485 -> 2270;
3486 -> 3485;
3486 -> 0;
3486 -> 2270;
3487 -> 3486;
3487 -> 2264;
3488 -> 3469;
3489 -> 3469;
3490 -> 0;
3490 -> 3469;
3491 -> 3469;
3492 -> 3489;
3492 -> 3491;
3493 -> 3490;
3493 -> 3491;
3494 -> 3469;
3495 -> 0;
3495 -> 3469;
3496 -> 3469;
3497 -> 3494;
3497 -> 3496;
3498 -> 3495;
3498 -> 3496;
3499 -> 3469;
3500 -> 3469;
3501 -> 3469;
3502 -> 3500;
3502 -> 3501;
3503 -> 3500;
3503 -> 3501;
3504 -> 3500;
3504 -> 3501;
3505 -> 3500;
3505 -> 3501;
3506 -> 3500;
3506 -> 3501;
3507 -> 3469;
3507 -> 3501;
3508 -> 3501;
3509 -> 3503;
3509 -> 3508;
3509 -> 3501;
3510 -> 3501;
3511 -> 3510;
3511 -> 3469;
3512 -> 3469;
3513 -> 3511;
3513 -> 3512;
3513 -> 3469;
3514 -> 3469;
3515 -> 3469;
3515 -> 3514;
3516 -> 3515;
3516 -> 3469;
3516 -> 0;
3516 -> 3514;
3517 -> 3514;
3518 -> 3515;
3518 -> 3469;
3518 -> 3517;
3518 -> 3514;
3519 -> 3516;
3519 -> 3469;
3520 -> 3469;
3521 -> 3469;
3522 -> 3469;
3522 -> 3521;
3523 -> 3522;
3523 -> 3469;
3523 -> 0;
3523 -> 3521;
3524 -> 3521;
3525 -> 3522;
3525 -> 3469;
3525 -> 3524;
3525 -> 3521;
3526 -> 3523;
3526 -> 3469;
3527 -> 3469;
3528 -> 3469;
3529 -> 3527;
3529 -> 3528;
3530 -> 3529;
3530 -> 0;
3530 -> 3528;
3531 -> 3529;
3531 -> 0;
3531 -> 3528;
3532 -> 3528;
3533 -> 0;
3533 -> 3528;
3534 -> 3529;
3534 -> 3533;
3534 -> 3528;
3535 -> 0;
3535 -> 3528;
3536 -> 3529;
3536 -> 3535;
3536 -> 3528;
3537 -> 3528;
3538 -> 0;
3538 -> 3528;
3539 -> 3529;
3539 -> 3538;
3539 -> 3528;
3540 -> 3539;
3540 -> 3528;
3541 -> 3528;
3542 -> 3540;
3542 -> 3541;
3543 -> 3541;
3544 -> 3542;
3544 -> 3543;
3544 -> 3541;
3545 -> 3469;
3546 -> 3469;
3547 -> 3469;
3548 -> 3469;
3549 -> 3469;
3550 -> 3469;
3551 -> 3469;
3552 -> 3469;
3553 -> 3469;
3554 -> 3469;
3554 -> 3553;
3555 -> 3554;
3555 -> 3469;
3555 -> 0;
3555 -> 3553;
3556 -> 3553;
3557 -> 3554;
3557 -> 3469;
3557 -> 3556;
3557 -> 3553;
3558 -> 3555;
3558 -> 3469;
3559 -> 3469;
3559 -> 0;
3560 -> 3469;
3561 -> 3469;
3562 -> 3469;
3562 -> 3561;
3563 -> 3562;
3563 -> 3469;
3563 -> 0;
3563 -> 3561;
3564 -> 3561;
3565 -> 3562;
3565 -> 3469;
3565 -> 3564;
3565 -> 3561;
3566 -> 3563;
3566 -> 3469;
3567 -> 3469;
3568 -> 3469;
3568 -> 3567;
3569 -> 3568;
3569 -> 3469;
3569 -> 0;
3569 -> 3567;
3570 -> 3569;
3570 -> 3469;
3571 -> 3469;
3572 -> 3469;
3573 -> 3469;
3574 -> 3469;
3575 -> 3573;
3575 -> 3574;
3576 -> 3575;
3576 -> 0;
3576 -> 3574;
3577 -> 3575;
3577 -> 0;
3577 -> 3574;
3578 -> 3574;
3579 -> 0;
3579 -> 3574;
3580 -> 3575;
3580 -> 3579;
3580 -> 3574;
3581 -> 0;
3581 -> 3574;
3582 -> 3575;
3582 -> 3581;
3582 -> 3574;
3583 -> 3574;
3584 -> 0;
3584 -> 3574;
3585 -> 3575;
3585 -> 3584;
3585 -> 3574;
3586 -> 3585;
3586 -> 3574;
3587 -> 3574;
3588 -> 3586;
3588 -> 3587;
3589 -> 3587;
3590 -> 3588;
3590 -> 3589;
3590 -> 3587;
3591 -> 3469;
3592 -> 3469;
3593 -> 3469;
3594 -> 3572;
3594 -> 3469;
3595 -> 3592;
3595 -> 3469;
3596 -> 3593;
3596 -> 3469;
3597 -> 3594;
3597 -> 3469;
3598 -> 3595;
3598 -> 3469;
3599 -> 3596;
3599 -> 3469;
3600 -> 3469;
3601 -> 3597;
3601 -> 3469;
3602 -> 3469;
3603 -> 3469;
3604 -> 3469;
3605 -> 3598;
3605 -> 3469;
3606 -> 3599;
3606 -> 3469;
3607 -> 3600;
3607 -> 3469;
3608 -> 3601;
3608 -> 3469;
3609 -> 3598;
3609 -> 3469;
3610 -> 3606;
3610 -> 3469;
3611 -> 3598;
3611 -> 3469;
3612 -> 3469;
3612 -> 3595;
3612 -> 3601;
3612 -> 3598;
3613 -> 3612;
3613 -> 3469;
3614 -> 3612;
3614 -> 3469;
3615 -> 3469;
3616 -> 3613;
3616 -> 3615;
3617 -> 3616;
3617 -> 3469;
3618 -> 3469;
3619 -> 3614;
3619 -> 3618;
3620 -> 3619;
3620 -> 3469;
3621 -> 3617;
3621 -> 3620;
3621 -> 3469;
3622 -> 3469;
3623 -> 3469;
3624 -> 3622;
3624 -> 3612;
3624 -> 3623;
3624 -> 3469;
3625 -> 3469;
3626 -> 3625;
3626 -> 3612;
3627 -> 3626;
3627 -> 3469;
3628 -> 3469;
3629 -> 3628;
3629 -> 3612;
3630 -> 3629;
3630 -> 3469;
3631 -> 3469;
3632 -> 3595;
3632 -> 3631;
3632 -> 3469;
3633 -> 3469;
3634 -> 3599;
3634 -> 3633;
3635 -> 3633;
3636 -> 3634;
3636 -> 3635;
3637 -> 3636;
3637 -> 3612;
3637 -> 3635;
3638 -> 3637;
3638 -> 3633;
3639 -> 3638;
3639 -> 3469;
3640 -> 3612;
3641 -> 3599;
3641 -> 3612;
3642 -> 3600;
3642 -> 3612;
3643 -> 3612;
3644 -> 3612;
3645 -> 3641;
3645 -> 3612;
3646 -> 3642;
3646 -> 3612;
3647 -> 3612;
3648 -> 3612;
3649 -> 3645;
3649 -> 3612;
3650 -> 3612;
3651 -> 3612;
3652 -> 3612;
3653 -> 3612;
3654 -> 3651;
3654 -> 3653;
3655 -> 3654;
3655 -> 3612;
3656 -> 3612;
3657 -> 3652;
3657 -> 3656;
3658 -> 3657;
3658 -> 3612;
3659 -> 3655;
3659 -> 3658;
3659 -> 3612;
3660 -> 3612;
3661 -> 3612;
3662 -> 3660;
3662 -> 3612;
3662 -> 3661;
3663 -> 3612;
3664 -> 3663;
3664 -> 3612;
3665 -> 3612;
3666 -> 3665;
3666 -> 3612;
3667 -> 3612;
3668 -> 3612;
3669 -> 3599;
3669 -> 3668;
3670 -> 3668;
3671 -> 3669;
3671 -> 3670;
3672 -> 3671;
3672 -> 3668;
3673 -> 3672;
3673 -> 3612;
3674 -> 3612;
3674 -> 3469;
3675 -> 3469;
3676 -> 3469;
3677 -> 3469;
3678 -> 3469;
3679 -> 3469;
3680 -> 3469;
3681 -> 3677;
3681 -> 3469;
3682 -> 3677;
3682 -> 3469;
3683 -> 3678;
3683 -> 3469;
3684 -> 3679;
3684 -> 3469;
3685 -> 3677;
3685 -> 3469;
3686 -> 3680;
3686 -> 3469;
3687 -> 3469;
3688 -> 3681;
3688 -> 3687;
3689 -> 3688;
3689 -> 3612;
3689 -> 3687;
3690 -> 0;
3690 -> 3687;
3691 -> 3687;
3692 -> 3689;
3692 -> 3691;
3693 -> 3690;
3693 -> 3691;
3694 -> 3692;
3694 -> 3469;
3695 -> 3469;
3695 -> 3612;
3695 -> 3677;
3696 -> 3469;
3696 -> 3695;
3697 -> 3625;
3697 -> 3695;
3698 -> 3678;
3698 -> 3697;
3699 -> 3679;
3699 -> 3697;
3700 -> 3680;
3700 -> 3697;
3701 -> 3697;
3702 -> 3697;
3703 -> 3697;
3704 -> 3697;
3705 -> 3698;
3705 -> 3697;
3706 -> 3699;
3706 -> 3697;
3707 -> 3697;
3708 -> 3700;
3708 -> 3697;
3709 -> 3702;
3709 -> 3695;
3709 -> 3697;
3710 -> 0;
3710 -> 3697;
3711 -> 3697;
3712 -> 3709;
3712 -> 3711;
3713 -> 3710;
3713 -> 3711;
3714 -> 3697;
3715 -> 3702;
3715 -> 3714;
3716 -> 3715;
3716 -> 3695;
3716 -> 3714;
3717 -> 0;
3717 -> 3714;
3718 -> 3714;
3719 -> 3716;
3719 -> 3718;
3720 -> 3717;
3720 -> 3718;
3721 -> 3719;
3721 -> 3697;
3722 -> 3701;
3722 -> 3697;
3723 -> 3554;
3723 -> 3695;
3723 -> 0;
3723 -> 3553;
3724 -> 3554;
3724 -> 3695;
3724 -> 3556;
3724 -> 3553;
3725 -> 3723;
3725 -> 3469;
3726 -> 3697;
3727 -> 3697;
3727 -> 3726;
3728 -> 3727;
3728 -> 3695;
3728 -> 0;
3728 -> 3726;
3729 -> 3726;
3730 -> 3727;
3730 -> 3695;
3730 -> 3729;
3730 -> 3726;
3731 -> 3728;
3731 -> 3697;
3732 -> 3697;
3733 -> 3697;
3733 -> 3732;
3734 -> 3733;
3734 -> 3695;
3734 -> 0;
3734 -> 3732;
3735 -> 3734;
3735 -> 3697;
3736 -> 3697;
3737 -> 3697;
3738 -> 3697;
3739 -> 3737;
3739 -> 3738;
3740 -> 3739;
3740 -> 0;
3740 -> 3738;
3741 -> 3739;
3741 -> 0;
3741 -> 3738;
3742 -> 3738;
3743 -> 0;
3743 -> 3738;
3744 -> 3739;
3744 -> 3743;
3744 -> 3738;
3745 -> 0;
3745 -> 3738;
3746 -> 3739;
3746 -> 3745;
3746 -> 3738;
3747 -> 3738;
3748 -> 0;
3748 -> 3738;
3749 -> 3739;
3749 -> 3748;
3749 -> 3738;
3750 -> 3749;
3750 -> 3738;
3751 -> 3738;
3752 -> 3750;
3752 -> 3751;
3753 -> 3751;
3754 -> 3752;
3754 -> 3753;
3754 -> 3751;
3755 -> 3697;
3756 -> 3697;
3757 -> 3697;
3758 -> 3697;
3759 -> 3756;
3759 -> 3697;
3760 -> 3756;
3760 -> 3697;
3761 -> 3697;
3762 -> 3697;
3763 -> 3697;
3764 -> 3697;
3765 -> 3759;
3765 -> 3697;
3766 -> 3697;
3767 -> 3762;
3767 -> 3697;
3768 -> 3763;
3768 -> 3695;
3768 -> 3697;
3769 -> 3768;
3770 -> 3764;
3770 -> 3769;
3770 -> 3768;
3771 -> 3766;
3771 -> 0;
3771 -> 3768;
3772 -> 3770;
3772 -> 3771;
3772 -> 3768;
3773 -> 3763;
3773 -> 3772;
3774 -> 3773;
3774 -> 3695;
3774 -> 3697;
3774 -> 3772;
3775 -> 3773;
3775 -> 3772;
3776 -> 3773;
3776 -> 3695;
3776 -> 3697;
3776 -> 3764;
3776 -> 3772;
3777 -> 3766;
3777 -> 3772;
3778 -> 3772;
3779 -> 3777;
3779 -> 3778;
3780 -> 3776;
3780 -> 3779;
3780 -> 3772;
3781 -> 3697;
3782 -> 3758;
3782 -> 3762;
3783 -> 3762;
3784 -> 3762;
3784 -> 3783;
3785 -> 3782;
3785 -> 3783;
3786 -> 3784;
3786 -> 0;
3786 -> 3783;
3787 -> 3783;
3788 -> 3786;
3788 -> 3783;
3789 -> 3785;
3789 -> 3788;
3790 -> 3761;
3790 -> 3762;
3791 -> 3756;
3791 -> 3762;
3792 -> 3760;
3792 -> 3762;
3793 -> 3789;
3793 -> 3762;
3794 -> 3790;
3794 -> 3762;
3795 -> 3792;
3795 -> 3762;
3796 -> 3762;
3796 -> 3697;
3797 -> 0;
3797 -> 3762;
3798 -> 3762;
3799 -> 3796;
3799 -> 3798;
3800 -> 3797;
3800 -> 3798;
3801 -> 3793;
3801 -> 3762;
3802 -> 3794;
3802 -> 3762;
3803 -> 3795;
3803 -> 3762;
3804 -> 3801;
3804 -> 3762;
3805 -> 3802;
3805 -> 3762;
3806 -> 3803;
3806 -> 3762;
3807 -> 3762;
3808 -> 3804;
3808 -> 3762;
3809 -> 3805;
3809 -> 3762;
3810 -> 3762;
3811 -> 3762;
3812 -> 3811;
3812 -> 3697;
3812 -> 3762;
3813 -> 0;
3813 -> 3762;
3814 -> 3762;
3815 -> 3812;
3815 -> 3814;
3816 -> 3813;
3816 -> 3814;
3817 -> 3807;
3817 -> 3762;
3818 -> 3808;
3818 -> 3762;
3819 -> 3809;
3819 -> 3762;
3820 -> 3810;
3820 -> 3762;
3821 -> 3817;
3821 -> 3762;
3822 -> 3818;
3822 -> 3762;
3823 -> 3819;
3823 -> 3762;
3824 -> 3817;
3824 -> 3762;
3825 -> 3820;
3825 -> 3762;
3826 -> 3762;
3827 -> 3762;
3828 -> 3821;
3828 -> 3827;
3828 -> 3762;
3829 -> 3821;
3829 -> 3697;
3829 -> 3762;
3830 -> 3821;
3830 -> 3762;
3831 -> 3762;
3832 -> 3821;
3832 -> 3762;
3833 -> 3825;
3833 -> 3762;
3834 -> 3832;
3834 -> 3762;
3835 -> 3762;
3836 -> 3832;
3836 -> 3697;
3836 -> 3762;
3837 -> 3762;
3838 -> 3762;
3838 -> 3695;
3838 -> 3697;
3839 -> 3762;
3840 -> 3832;
3840 -> 3762;
3841 -> 3840;
3841 -> 3762;
3842 -> 3762;
3843 -> 3839;
3843 -> 3842;
3843 -> 3762;
3844 -> 3807;
3845 -> 3697;
3845 -> 3844;
3846 -> 3845;
3846 -> 3807;
3846 -> 3844;
3847 -> 0;
3847 -> 3844;
3848 -> 3844;
3849 -> 3846;
3849 -> 3848;
3850 -> 3847;
3850 -> 3848;
3851 -> 3849;
3851 -> 3807;
3852 -> 3807;
3853 -> 3807;
3854 -> 3697;
3855 -> 3469;
3855 -> 3854;
3856 -> 3855;
3856 -> 3807;
3856 -> 0;
3856 -> 3854;
3857 -> 3856;
3857 -> 3697;
3858 -> 3695;
3858 -> 3857;
3859 -> 3469;
3859 -> 0;
3859 -> 3697;
3860 -> 3697;
3861 -> 3858;
3861 -> 3469;
3862 -> 3469;
3862 -> 3791;
3862 -> 3807;
3863 -> 3469;
3864 -> 3469;
3865 -> 3863;
3865 -> 3864;
3866 -> 3864;
3867 -> 3865;
3867 -> 3866;
3868 -> 3867;
3868 -> 3862;
3868 -> 3866;
3869 -> 3868;
3869 -> 3864;
3870 -> 3864;
3871 -> 3865;
3871 -> 3870;
3872 -> 3871;
3872 -> 3862;
3872 -> 3870;
3873 -> 3872;
3873 -> 3864;
3874 -> 3873;
3874 -> 3862;
3875 -> 3874;
3876 -> 3469;
3877 -> 3469;
3878 -> 3469;
3879 -> 3469;
3880 -> 3876;
3880 -> 3469;
3881 -> 3876;
3881 -> 3469;
3882 -> 3876;
3882 -> 3469;
3883 -> 3469;
3884 -> 3469;
3885 -> 3878;
3885 -> 3884;
3885 -> 3469;
3886 -> 3469;
3887 -> 3879;
3887 -> 3886;
3887 -> 3469;
3888 -> 3469;
3889 -> 3862;
3889 -> 0;
3890 -> 3889;
3890 -> 3883;
3890 -> 3862;
3891 -> 3877;
3891 -> 3862;
3892 -> 3879;
3892 -> 3891;
3893 -> 3878;
3893 -> 3891;
3894 -> 3892;
3894 -> 3891;
3895 -> 3893;
3895 -> 3891;
3896 -> 3891;
3897 -> 3862;
3897 -> 3891;
3897 -> 0;
3897 -> 3469;
3898 -> 3878;
3898 -> 3897;
3899 -> 3897;
3900 -> 3862;
3900 -> 3897;
3901 -> 3879;
3901 -> 3897;
3902 -> 3897;
3903 -> 3898;
3903 -> 3902;
3904 -> 3899;
3904 -> 3902;
3905 -> 3900;
3905 -> 3902;
3906 -> 3901;
3906 -> 3902;
3907 -> 3883;
3907 -> 3902;
3908 -> 3905;
3908 -> 3891;
3908 -> 3902;
3909 -> 3902;
3910 -> 3862;
3910 -> 3891;
3910 -> 0;
3910 -> 3469;
3911 -> 3469;
3912 -> 3862;
3912 -> 3469;
3913 -> 3891;
3913 -> 3862;
3914 -> 3862;
3915 -> 3914;
3915 -> 3862;
3916 -> 3862;
3917 -> 3916;
3917 -> 3862;
3918 -> 3891;
3919 -> 3891;
3920 -> 3918;
3920 -> 3891;
3921 -> 3919;
3921 -> 3891;
3922 -> 3891;
3923 -> 3891;
3923 -> 0;
3924 -> 3891;
3925 -> 3891;
3926 -> 3920;
3926 -> 3891;
3927 -> 3921;
3927 -> 3891;
3928 -> 3891;
3929 -> 3891;
3929 -> 0;
3930 -> 3891;
3930 -> 0;
3931 -> 3927;
3931 -> 3891;
3932 -> 3931;
3932 -> 3891;
3933 -> 3925;
3933 -> 3891;
3934 -> 3926;
3934 -> 3891;
3935 -> 3928;
3935 -> 3891;
3936 -> 3891;
3937 -> 3933;
3937 -> 3936;
3937 -> 3891;
3938 -> 3891;
3939 -> 3925;
3939 -> 3891;
3940 -> 3891;
3941 -> 3938;
3941 -> 3940;
3941 -> 3891;
3942 -> 3925;
3942 -> 3891;
3943 -> 3942;
3943 -> 3891;
3944 -> 3931;
3944 -> 3943;
3945 -> 3891;
3945 -> 2270;
3946 -> 3945;
3946 -> 3915;
3946 -> 2270;
3947 -> 3946;
3947 -> 0;
3947 -> 2270;
3948 -> 3947;
3948 -> 2264;
3949 -> 3925;
3949 -> 1003;
3949 -> 997;
3950 -> 1001;
3950 -> 3925;
3950 -> 997;
3951 -> 1001;
3951 -> 3950;
3952 -> 3950;
3953 -> 3951;
3953 -> 1044;
3954 -> 3951;
3954 -> 1044;
3955 -> 3954;
3955 -> 3951;
3955 -> 1044;
3956 -> 3953;
3956 -> 1044;
3957 -> 3955;
3957 -> 3956;
3957 -> 3951;
3957 -> 1044;
3958 -> 1044;
3959 -> 3954;
3959 -> 3957;
3959 -> 1044;
3960 -> 3953;
3960 -> 1044;
3961 -> 3954;
3961 -> 3959;
3962 -> 3953;
3962 -> 3959;
3963 -> 2789;
3963 -> 3961;
3964 -> 3953;
3964 -> 1044;
3965 -> 3963;
3965 -> 1044;
3966 -> 1044;
3967 -> 3964;
3967 -> 3966;
3968 -> 3965;
3968 -> 3966;
3969 -> 3968;
3969 -> 3966;
3970 -> 3966;
3971 -> 3966;
3972 -> 3966;
3973 -> 3971;
3973 -> 3972;
3974 -> 3971;
3974 -> 1044;
3975 -> 1044;
3976 -> 1044;
3977 -> 3954;
3977 -> 3976;
3978 -> 3977;
3978 -> 3961;
3978 -> 3976;
3979 -> 3978;
3979 -> 1044;
3980 -> 3974;
3980 -> 1044;
3981 -> 3975;
3981 -> 1044;
3982 -> 3980;
3982 -> 3981;
3982 -> 3979;
3982 -> 3967;
3982 -> 3968;
3982 -> 3961;
3982 -> 1044;
3983 -> 1044;
3984 -> 3953;
3984 -> 3982;
3985 -> 3982;
3986 -> 3984;
3986 -> 3985;
3986 -> 3982;
3987 -> 3984;
3987 -> 3986;
3988 -> 0;
3988 -> 3986;
3989 -> 3986;
3990 -> 3987;
3990 -> 3989;
3991 -> 3988;
3991 -> 3989;
3992 -> 3991;
3992 -> 3989;
3993 -> 3989;
3994 -> 3982;
3995 -> 3963;
3995 -> 2789;
3995 -> 3982;
3996 -> 3963;
3996 -> 0;
3996 -> 3982;
3997 -> 3953;
3997 -> 3990;
3997 -> 3982;
3998 -> 3982;
3999 -> 3997;
3999 -> 3998;
4000 -> 3990;
4000 -> 3998;
4001 -> 3982;
4002 -> 4001;
4002 -> 3999;
4003 -> 4002;
4003 -> 3982;
4004 -> 3974;
4004 -> 3982;
4005 -> 3999;
4005 -> 3982;
4006 -> 3982;
4007 -> 3999;
4007 -> 1044;
4008 -> 3951;
4008 -> 4007;
4008 -> 4003;
4008 -> 1039;
4009 -> 4008;
4009 -> 1300;
4010 -> 4009;
4010 -> 1313;
4011 -> 4008;
4011 -> 1300;
4012 -> 4011;
4012 -> 1318;
4013 -> 779;
4013 -> 753;
4014 -> 779;
4014 -> 753;
4015 -> 779;
4015 -> 753;
4016 -> 779;
4016 -> 753;
4017 -> 779;
4017 -> 753;
4018 -> 753;
4019 -> 4013;
4019 -> 4008;
4019 -> 753;
4020 -> 753;
4021 -> 4014;
4021 -> 4008;
4021 -> 753;
4022 -> 4018;
4022 -> 753;
4023 -> 4020;
4023 -> 753;
4024 -> 1352;
4024 -> 4008;
4025 -> 1353;
4025 -> 4008;
4026 -> 4008;
4027 -> 4024;
4027 -> 4026;
4028 -> 4025;
4028 -> 4026;
4029 -> 1356;
4029 -> 4026;
4030 -> 4027;
4030 -> 4026;
4031 -> 4030;
4031 -> 4026;
4032 -> 4028;
4032 -> 4026;
4033 -> 4026;
4034 -> 4031;
4034 -> 4033;
4035 -> 4032;
4035 -> 4033;
4036 -> 4029;
4036 -> 4033;
4037 -> 4034;
4037 -> 4008;
4037 -> 4033;
4038 -> 4035;
4038 -> 4033;
4039 -> 4034;
4039 -> 4033;
4040 -> 4033;
4041 -> 4037;
4041 -> 4040;
4042 -> 4038;
4042 -> 4040;
4043 -> 4039;
4043 -> 4040;
4044 -> 4036;
4044 -> 4040;
4045 -> 4044;
4045 -> 4037;
4045 -> 4040;
4046 -> 4041;
4046 -> 4040;
4047 -> 4043;
4047 -> 4040;
4048 -> 4042;
4048 -> 4040;
4049 -> 4040;
4050 -> 4045;
4050 -> 4049;
4051 -> 4046;
4051 -> 4049;
4052 -> 4047;
4052 -> 4049;
4053 -> 4048;
4053 -> 4049;
4054 -> 4051;
4054 -> 4049;
4055 -> 4050;
4055 -> 4054;
4055 -> 4037;
4055 -> 4049;
4056 -> 4049;
4057 -> 4055;
4057 -> 4056;
4057 -> 4049;
4058 -> 4055;
4058 -> 4049;
4059 -> 4053;
4059 -> 4049;
4060 -> 4052;
4060 -> 4049;
4061 -> 4049;
4062 -> 4058;
4062 -> 4061;
4063 -> 4059;
4063 -> 4061;
4064 -> 4060;
4064 -> 4061;
4065 -> 4061;
4066 -> 4062;
4066 -> 4065;
4066 -> 4061;
4067 -> 4055;
4067 -> 4049;
4068 -> 4030;
4068 -> 4062;
4068 -> 4026;
4069 -> 4026;
4070 -> 4068;
4070 -> 4069;
4071 -> 4029;
4071 -> 4069;
4072 -> 4067;
4072 -> 4026;
4073 -> 4026;
4074 -> 4072;
4074 -> 4073;
4075 -> 4074;
4075 -> 4073;
4076 -> 4073;
4077 -> 4073;
4078 -> 4075;
4078 -> 4077;
4079 -> 4076;
4079 -> 4077;
4080 -> 4078;
4080 -> 4077;
4081 -> 4077;
4082 -> 4081;
4082 -> 4079;
4082 -> 4077;
4083 -> 4077;
4084 -> 4083;
4084 -> 4079;
4084 -> 4077;
4085 -> 4076;
4085 -> 4026;
4086 -> 4026;
4087 -> 4070;
4087 -> 4085;
4087 -> 4086;
4087 -> 4078;
4087 -> 4082;
4087 -> 4084;
4087 -> 4026;
4088 -> 4087;
4089 -> 4087;
4090 -> 4088;
4090 -> 4087;
4091 -> 4089;
4091 -> 4087;
4092 -> 4087;
4093 -> 4087;
4093 -> 0;
4094 -> 4087;
4095 -> 4090;
4095 -> 4087;
4096 -> 4091;
4096 -> 4087;
4097 -> 4087;
4098 -> 4087;
4098 -> 0;
4099 -> 4087;
4099 -> 0;
4100 -> 4096;
4100 -> 4087;
4101 -> 4100;
4101 -> 4087;
4102 -> 4087;
4103 -> 4095;
4103 -> 4087;
4104 -> 4097;
4104 -> 4087;
4105 -> 4087;
4106 -> 4102;
4106 -> 4105;
4106 -> 4087;
4107 -> 4087;
4108 -> 4087;
4109 -> 4087;
4110 -> 4107;
4110 -> 4109;
4110 -> 4087;
4111 -> 4087;
4112 -> 4111;
4112 -> 4087;
4113 -> 4100;
4113 -> 4112;
4114 -> 4087;
4114 -> 2270;
4115 -> 4114;
4115 -> 4087;
4115 -> 2270;
4116 -> 4115;
4116 -> 0;
4116 -> 2270;
4117 -> 4116;
4117 -> 2264;
4118 -> 779;
4118 -> 753;
4119 -> 779;
4119 -> 753;
4120 -> 779;
4120 -> 753;
4121 -> 779;
4121 -> 753;
4122 -> 753;
4123 -> 4118;
4123 -> 753;
4124 -> 4119;
4124 -> 753;
4125 -> 4121;
4125 -> 753;
4126 -> 4122;
4126 -> 753;
4127 -> 4119;
4127 -> 4087;
4127 -> 753;
4128 -> 4120;
4128 -> 753;
4129 -> 753;
4130 -> 753;
4131 -> 4123;
4131 -> 4130;
4132 -> 4124;
4132 -> 4130;
4133 -> 4125;
4133 -> 4130;
4134 -> 4126;
4134 -> 4130;
4135 -> 4127;
4135 -> 4130;
4136 -> 4128;
4136 -> 4130;
4137 -> 4129;
4137 -> 4130;
4138 -> 4130;
4139 -> 4131;
4139 -> 4138;
4139 -> 4130;
4140 -> 4130;
4141 -> 4132;
4141 -> 4140;
4141 -> 4130;
4142 -> 4132;
4142 -> 4087;
4142 -> 4130;
4143 -> 4132;
4143 -> 4130;
4144 -> 4130;
4145 -> 4131;
4145 -> 4087;
4145 -> 4130;
4146 -> 4131;
4146 -> 4087;
4146 -> 0;
4146 -> 4130;
4147 -> 4131;
4147 -> 4146;
4148 -> 4131;
4148 -> 4147;
4148 -> 4146;
4149 -> 4132;
4149 -> 4146;
4150 -> 4133;
4150 -> 4146;
4151 -> 4144;
4151 -> 4146;
4152 -> 4135;
4152 -> 4146;
4153 -> 4136;
4153 -> 4146;
4154 -> 4146;
4155 -> 4146;
4156 -> 4148;
4156 -> 4155;
4157 -> 4148;
4157 -> 4155;
4158 -> 4149;
4158 -> 4155;
4159 -> 4150;
4159 -> 4155;
4160 -> 4151;
4160 -> 4155;
4161 -> 4152;
4161 -> 4155;
4162 -> 4153;
4162 -> 4155;
4163 -> 4154;
4163 -> 4155;
4164 -> 4158;
4164 -> 4155;
4165 -> 4155;
4166 -> 4156;
4166 -> 4165;
4166 -> 4155;
4167 -> 4155;
4168 -> 4156;
4168 -> 4158;
4168 -> 4155;
4169 -> 4156;
4169 -> 4155;
4170 -> 4158;
4170 -> 4155;
4171 -> 4162;
4171 -> 4155;
4172 -> 4163;
4172 -> 4155;
4173 -> 4155;
4174 -> 4169;
4174 -> 4173;
4175 -> 4170;
4175 -> 4173;
4176 -> 4171;
4176 -> 4173;
4177 -> 4172;
4177 -> 4173;
4178 -> 4175;
4178 -> 4173;
4179 -> 4173;
4180 -> 4174;
4180 -> 4179;
4180 -> 4173;
4181 -> 4175;
4181 -> 4147;
4181 -> 4173;
4182 -> 4173;
4183 -> 4174;
4183 -> 4147;
4183 -> 4173;
4184 -> 4175;
4184 -> 4174;
4185 -> 4174;
4186 -> 4184;
4186 -> 4174;
4187 -> 4186;
4187 -> 4174;
4188 -> 4174;
4189 -> 4185;
4189 -> 4188;
4189 -> 4174;
4190 -> 4157;
4190 -> 0;
4190 -> 4155;
4191 -> 4190;
4192 -> 4176;
4192 -> 4191;
4192 -> 4147;
4192 -> 750;
4193 -> 753;
4194 -> 4193;
4195 -> 4176;
4195 -> 4194;
4195 -> 4193;
4196 -> 4176;
4196 -> 753;
4197 -> 753;
4198 -> 4196;
4198 -> 4192;
4198 -> 4197;
4198 -> 753;
4199 -> 4196;
4199 -> 4192;
4199 -> 4198;
4200 -> 4196;
4200 -> 4198;
4201 -> 4198;
4202 -> 4198;
4203 -> 4200;
4203 -> 4202;
4204 -> 4201;
4204 -> 4202;
4205 -> 4203;
4205 -> 4202;
4206 -> 4202;
4207 -> 4202;
4208 -> 4202;
4209 -> 4202;
4210 -> 4205;
4210 -> 4209;
4211 -> 4206;
4211 -> 4209;
4212 -> 4207;
4212 -> 4209;
4213 -> 4208;
4213 -> 4209;
4214 -> 4204;
4214 -> 4209;
4215 -> 4210;
4215 -> 4192;
4215 -> 4209;
4216 -> 4211;
4216 -> 4209;
4217 -> 4212;
4217 -> 4209;
4218 -> 4213;
4218 -> 4209;
4219 -> 4209;
4220 -> 4215;
4220 -> 4219;
4221 -> 4216;
4221 -> 4219;
4222 -> 4217;
4222 -> 4219;
4223 -> 4218;
4223 -> 4219;
4224 -> 4214;
4224 -> 4219;
4225 -> 4214;
4225 -> 4219;
4226 -> 4214;
4226 -> 4219;
4227 -> 4214;
4227 -> 4219;
4228 -> 4219;
4229 -> 4220;
4229 -> 4228;
4229 -> 4219;
4230 -> 4219;
4231 -> 4223;
4231 -> 4230;
4231 -> 4219;
4232 -> 4219;
4233 -> 4223;
4233 -> 4232;
4233 -> 4219;
4234 -> 4221;
4234 -> 4214;
4234 -> 4219;
4235 -> 4222;
4235 -> 4214;
4235 -> 4219;
4236 -> 4223;
4236 -> 4214;
4236 -> 4219;
4237 -> 4214;
4237 -> 4209;
4238 -> 4210;
4238 -> 4214;
4238 -> 4209;
4239 -> 4199;
4239 -> 4201;
4239 -> 4220;
4239 -> 4234;
4239 -> 4235;
4239 -> 4236;
4239 -> 4238;
4239 -> 4192;
4239 -> 4198;
4240 -> 4196;
4240 -> 4239;
4240 -> 753;
4241 -> 4176;
4241 -> 753;
4242 -> 4176;
4242 -> 753;
4243 -> 4242;
4243 -> 4240;
4243 -> 4241;
4243 -> 753;
4244 -> 753;
4245 -> 4242;
4245 -> 4240;
4245 -> 4244;
4245 -> 753;
4246 -> 4242;
4246 -> 4240;
4246 -> 4245;
4247 -> 4241;
4247 -> 4245;
4248 -> 4245;
4249 -> 4247;
4249 -> 4248;
4250 -> 4242;
4250 -> 4248;
4251 -> 4250;
4251 -> 4240;
4251 -> 4249;
4251 -> 4248;
4252 -> 4250;
4252 -> 4240;
4252 -> 4248;
4253 -> 4249;
4253 -> 4248;
4254 -> 4250;
4254 -> 4248;
4255 -> 4248;
4256 -> 4248;
4257 -> 4252;
4257 -> 4256;
4258 -> 4252;
4258 -> 4256;
4259 -> 4253;
4259 -> 4256;
4260 -> 4254;
4260 -> 4256;
4261 -> 4255;
4261 -> 4256;
4262 -> 4261;
4262 -> 4256;
4263 -> 4261;
4263 -> 4256;
4264 -> 4261;
4264 -> 4256;
4265 -> 4261;
4265 -> 4256;
4266 -> 4256;
4267 -> 4257;
4267 -> 4266;
4267 -> 4256;
4268 -> 4256;
4269 -> 4260;
4269 -> 4268;
4269 -> 4256;
4270 -> 4259;
4270 -> 4260;
4270 -> 4240;
4270 -> 4256;
4271 -> 4256;
4272 -> 4260;
4272 -> 4271;
4272 -> 4256;
4273 -> 4258;
4273 -> 4260;
4273 -> 4240;
4273 -> 4256;
4274 -> 4261;
4274 -> 4256;
4275 -> 4255;
4275 -> 4245;
4276 -> 4245;
4277 -> 4246;
4277 -> 4275;
4277 -> 4276;
4277 -> 4257;
4277 -> 4258;
4277 -> 4259;
4277 -> 4260;
4277 -> 4240;
4277 -> 4245;
4278 -> 4242;
4278 -> 4277;
4278 -> 4241;
4278 -> 753;
4279 -> 4242;
4279 -> 4277;
4279 -> 753;
4280 -> 4242;
4280 -> 4277;
4280 -> 753;
4281 -> 4176;
4281 -> 753;
4282 -> 4176;
4282 -> 753;
4283 -> 4176;
4283 -> 753;
4284 -> 4176;
4284 -> 753;
4285 -> 753;
4286 -> 4281;
4286 -> 4285;
4286 -> 753;
4287 -> 753;
4288 -> 4282;
4288 -> 4287;
4288 -> 753;
4289 -> 4281;
4289 -> 753;
4290 -> 4282;
4290 -> 753;
4291 -> 753;
4292 -> 4289;
4292 -> 4291;
4293 -> 4290;
4293 -> 4291;
4294 -> 4284;
4294 -> 4291;
4295 -> 4292;
4295 -> 4291;
4296 -> 4293;
4296 -> 4291;
4297 -> 4294;
4297 -> 4280;
4297 -> 4291;
4298 -> 4291;
4299 -> 4295;
4299 -> 4298;
4300 -> 4296;
4300 -> 4298;
4301 -> 4297;
4301 -> 4298;
4302 -> 4298;
4303 -> 4299;
4303 -> 4302;
4303 -> 4298;
4304 -> 4298;
4305 -> 4300;
4305 -> 4304;
4305 -> 4298;
4306 -> 4301;
4306 -> 4298;
4307 -> 0;
4307 -> 4306;
4308 -> 4300;
4308 -> 4298;
4309 -> 4307;
4309 -> 4298;
4310 -> 4299;
4310 -> 4308;
4310 -> 4309;
4310 -> 4280;
4310 -> 4298;
4311 -> 4310;
4312 -> 0;
4312 -> 4311;
4313 -> 4311;
4314 -> 4312;
4314 -> 4313;
4315 -> 4313;
4316 -> 4314;
4316 -> 4313;
4317 -> 4313;
4318 -> 4316;
4318 -> 4315;
4319 -> 4317;
4319 -> 4315;
4320 -> 4315;
4321 -> 4318;
4321 -> 4320;
4321 -> 4315;
4322 -> 4319;
4322 -> 4320;
4322 -> 4315;
4323 -> 4313;
4323 -> 4310;
4324 -> 4283;
4324 -> 4323;
4324 -> 4310;
4324 -> 4321;
4324 -> 4322;
4324 -> 750;
4325 -> 4283;
4325 -> 753;
4326 -> 4325;
4326 -> 4324;
4326 -> 753;
4327 -> 4326;
4327 -> 1003;
4327 -> 997;
4328 -> 4283;
4328 -> 1026;
4328 -> 1021;
4329 -> 4326;
4329 -> 3966;
4330 -> 4326;
4331 -> 4326;
4332 -> 4326;
4332 -> 2789;
4333 -> 4326;
4333 -> 0;
4334 -> 4283;
4334 -> 1287;
4334 -> 753;
4335 -> 4283;
4335 -> 1309;
4335 -> 1300;
4336 -> 4326;
4336 -> 1300;
4337 -> 4336;
4337 -> 1313;
4338 -> 4326;
4338 -> 1300;
4339 -> 4338;
4339 -> 1318;
4340 -> 4283;
4340 -> 1325;
4340 -> 1293;
4341 -> 4283;
4341 -> 753;
4342 -> 4283;
4342 -> 753;
4343 -> 4283;
4343 -> 753;
4344 -> 4283;
4344 -> 753;
4345 -> 4283;
4345 -> 753;
4346 -> 4341;
4346 -> 4326;
4346 -> 753;
4347 -> 4342;
4347 -> 4326;
4347 -> 753;
4348 -> 4283;
4348 -> 1344;
4348 -> 1338;
4349 -> 4326;
4350 -> 4349;
4350 -> 4326;
4351 -> 4349;
4351 -> 4326;
4352 -> 4351;
4352 -> 4326;
4353 -> 4350;
4353 -> 4326;
4354 -> 4326;
4355 -> 4353;
4355 -> 4326;
4356 -> 4352;
4356 -> 4326;
4357 -> 4326;
4358 -> 4349;
4358 -> 4326;
4359 -> 4349;
4360 -> 4349;
4361 -> 4359;
4361 -> 4349;
4362 -> 4360;
4362 -> 4349;
4363 -> 4349;
4364 -> 4349;
4364 -> 0;
4365 -> 4349;
4366 -> 4361;
4366 -> 4349;
4367 -> 4362;
4367 -> 4349;
4368 -> 4349;
4369 -> 4349;
4369 -> 0;
4370 -> 4349;
4370 -> 0;
4371 -> 4367;
4371 -> 4349;
4372 -> 4371;
4372 -> 4349;
4373 -> 4349;
4374 -> 4366;
4374 -> 4349;
4375 -> 4368;
4375 -> 4349;
4376 -> 4349;
4377 -> 4373;
4377 -> 4376;
4377 -> 4349;
4378 -> 4349;
4379 -> 4349;
4380 -> 4349;
4381 -> 4378;
4381 -> 4380;
4381 -> 4349;
4382 -> 4349;
4383 -> 4382;
4383 -> 4349;
4384 -> 4371;
4384 -> 4383;
4385 -> 4283;
4385 -> 2264;
4386 -> 4283;
4386 -> 2264;
4387 -> 4283;
4387 -> 2264;
4388 -> 4283;
4388 -> 2264;
4389 -> 4349;
4389 -> 2270;
4390 -> 4389;
4390 -> 4349;
4390 -> 2270;
4391 -> 4390;
4391 -> 0;
4391 -> 2270;
4392 -> 4391;
4392 -> 2264;
4393 -> 4283;
4393 -> 753;
4394 -> 4283;
4394 -> 753;
4395 -> 4393;
4395 -> 4349;
4395 -> 753;
4396 -> 4393;
4396 -> 4130;
4397 -> 4394;
4397 -> 4130;
4398 -> 4395;
4398 -> 4130;
4399 -> 4283;
4399 -> 4138;
4399 -> 4130;
4400 -> 4396;
4400 -> 4140;
4400 -> 4130;
4401 -> 4396;
4401 -> 4349;
4401 -> 4130;
4402 -> 4396;
4402 -> 4130;
4403 -> 4396;
4403 -> 4349;
4404 -> 4397;
4404 -> 4349;
4405 -> 4144;
4405 -> 4349;
4406 -> 4393;
4406 -> 4349;
4407 -> 4349;
4408 -> 4403;
4408 -> 4349;
4409 -> 4404;
4409 -> 4349;
4410 -> 4405;
4410 -> 4349;
4411 -> 4398;
4411 -> 4349;
4412 -> 4349;
4413 -> 4408;
4413 -> 4349;
4414 -> 4349;
4415 -> 4407;
4415 -> 4414;
4415 -> 4349;
4416 -> 4349;
4417 -> 4407;
4417 -> 4408;
4417 -> 4349;
4418 -> 4408;
4418 -> 4349;
4419 -> 4412;
4419 -> 4349;
4420 -> 4418;
4420 -> 4349;
4421 -> 4349;
4422 -> 4407;
4422 -> 4421;
4422 -> 4349;
4423 -> 4418;
4423 -> 4349;
4424 -> 4349;
4425 -> 4407;
4425 -> 4349;
4426 -> 4418;
4426 -> 4407;
4427 -> 4407;
4428 -> 4426;
4428 -> 4407;
4429 -> 4428;
4429 -> 4407;
4430 -> 4407;
4431 -> 4427;
4431 -> 4430;
4431 -> 4407;
4432 -> 4406;
4432 -> 753;
4433 -> 4406;
4433 -> 753;
4434 -> 4406;
4434 -> 753;
4435 -> 4406;
4435 -> 4285;
4435 -> 753;
4436 -> 4406;
4436 -> 4287;
4436 -> 753;
4437 -> 4406;
4437 -> 4302;
4437 -> 4298;
4438 -> 4406;
4438 -> 4304;
4438 -> 4298;
4439 -> 4406;
4439 -> 1003;
4439 -> 997;
4440 -> 4406;
4440 -> 1026;
4440 -> 1021;
4441 -> 2789;
4441 -> 1048;
4442 -> 4406;
4442 -> 1072;
4443 -> 4406;
4443 -> 1287;
4443 -> 753;
4444 -> 4406;
4444 -> 1309;
4444 -> 1300;
4445 -> 4406;
4445 -> 1300;
4446 -> 4445;
4446 -> 1313;
4447 -> 4406;
4447 -> 1300;
4448 -> 4447;
4448 -> 1318;
4449 -> 4406;
4449 -> 1325;
4449 -> 1293;
4450 -> 4406;
4450 -> 1344;
4450 -> 1338;
4451 -> 4406;
4452 -> 4406;
4453 -> 4406;
4454 -> 4452;
4454 -> 4453;
4455 -> 4452;
4455 -> 4453;
4456 -> 4452;
4456 -> 4453;
4457 -> 4452;
4457 -> 4453;
4458 -> 4452;
4458 -> 4453;
4459 -> 4406;
4459 -> 4453;
4460 -> 4453;
4461 -> 4455;
4461 -> 4460;
4461 -> 4453;
4462 -> 4453;
4463 -> 4462;
4463 -> 4406;
4464 -> 4406;
4465 -> 4463;
4465 -> 4464;
4465 -> 4406;
4466 -> 4406;
4467 -> 4406;
4467 -> 4466;
4468 -> 4467;
4468 -> 4406;
4468 -> 0;
4468 -> 4466;
4469 -> 4466;
4470 -> 4467;
4470 -> 4406;
4470 -> 4469;
4470 -> 4466;
4471 -> 4468;
4471 -> 4406;
4472 -> 4406;
4473 -> 4406;
4474 -> 4406;
4474 -> 4473;
4475 -> 4474;
4475 -> 4406;
4475 -> 0;
4475 -> 4473;
4476 -> 4473;
4477 -> 4474;
4477 -> 4406;
4477 -> 4476;
4477 -> 4473;
4478 -> 4475;
4478 -> 4406;
4479 -> 4406;
4480 -> 4406;
4481 -> 4479;
4481 -> 4480;
4482 -> 4481;
4482 -> 0;
4482 -> 4480;
4483 -> 4481;
4483 -> 0;
4483 -> 4480;
4484 -> 4480;
4485 -> 0;
4485 -> 4480;
4486 -> 4481;
4486 -> 4485;
4486 -> 4480;
4487 -> 0;
4487 -> 4480;
4488 -> 4481;
4488 -> 4487;
4488 -> 4480;
4489 -> 4480;
4490 -> 0;
4490 -> 4480;
4491 -> 4481;
4491 -> 4490;
4491 -> 4480;
4492 -> 4491;
4492 -> 4480;
4493 -> 4480;
4494 -> 4492;
4494 -> 4493;
4495 -> 4493;
4496 -> 4494;
4496 -> 4495;
4496 -> 4493;
4497 -> 4406;
4498 -> 4406;
4499 -> 4406;
4500 -> 4406;
4501 -> 4406;
4502 -> 4406;
4503 -> 4406;
4504 -> 4406;
4505 -> 4406;
4506 -> 4406;
4506 -> 4505;
4507 -> 4506;
4507 -> 4406;
4507 -> 0;
4507 -> 4505;
4508 -> 4505;
4509 -> 4506;
4509 -> 4406;
4509 -> 4508;
4509 -> 4505;
4510 -> 4507;
4510 -> 4406;
4511 -> 4406;
4511 -> 0;
4512 -> 4406;
4513 -> 4406;
4514 -> 4406;
4515 -> 4406;
4516 -> 4406;
4517 -> 4406;
4518 -> 4406;
4519 -> 4406;
4520 -> 4513;
4520 -> 4519;
4521 -> 4520;
4521 -> 4406;
4521 -> 0;
4521 -> 4519;
4522 -> 4519;
4523 -> 4520;
4523 -> 4406;
4523 -> 4522;
4523 -> 4519;
4524 -> 4521;
4524 -> 4406;
4525 -> 4406;
4526 -> 4406;
4526 -> 4525;
4527 -> 0;
4527 -> 4525;
4528 -> 4527;
4528 -> 4406;
4529 -> 4516;
4529 -> 4528;
4529 -> 4406;
4530 -> 4406;
4531 -> 4406;
4532 -> 4406;
4532 -> 4531;
4533 -> 4532;
4533 -> 4406;
4533 -> 0;
4533 -> 4531;
4534 -> 4531;
4535 -> 4532;
4535 -> 4406;
4535 -> 4534;
4535 -> 4531;
4536 -> 4533;
4536 -> 4406;
4537 -> 4406;
4538 -> 4406;
4538 -> 4537;
4539 -> 4538;
4539 -> 4406;
4539 -> 0;
4539 -> 4537;
4540 -> 4539;
4540 -> 4406;
4541 -> 4406;
4542 -> 4406;
4543 -> 4406;
4544 -> 4542;
4544 -> 4543;
4545 -> 4544;
4545 -> 0;
4545 -> 4543;
4546 -> 4544;
4546 -> 0;
4546 -> 4543;
4547 -> 4543;
4548 -> 0;
4548 -> 4543;
4549 -> 4544;
4549 -> 4548;
4549 -> 4543;
4550 -> 0;
4550 -> 4543;
4551 -> 4544;
4551 -> 4550;
4551 -> 4543;
4552 -> 4543;
4553 -> 0;
4553 -> 4543;
4554 -> 4544;
4554 -> 4553;
4554 -> 4543;
4555 -> 4554;
4555 -> 4543;
4556 -> 4543;
4557 -> 4555;
4557 -> 4556;
4558 -> 4556;
4559 -> 4557;
4559 -> 4558;
4559 -> 4556;
4560 -> 4406;
4561 -> 4406;
4562 -> 4406;
4563 -> 4406;
4564 -> 4406;
4565 -> 4406;
4566 -> 4406;
4567 -> 4406;
4568 -> 4563;
4568 -> 4406;
4569 -> 4563;
4569 -> 4406;
4570 -> 4563;
4570 -> 4406;
4571 -> 4566;
4571 -> 4406;
4572 -> 4571;
4573 -> 4567;
4573 -> 4572;
4573 -> 4571;
4574 -> 4569;
4574 -> 0;
4574 -> 4571;
4575 -> 4573;
4575 -> 4574;
4575 -> 4571;
4576 -> 4566;
4576 -> 4575;
4577 -> 4576;
4577 -> 4406;
4577 -> 4575;
4578 -> 4576;
4578 -> 4575;
4579 -> 4576;
4579 -> 4406;
4579 -> 4567;
4579 -> 4575;
4580 -> 4569;
4580 -> 4575;
4581 -> 4575;
4582 -> 4580;
4582 -> 4581;
4583 -> 4579;
4583 -> 4582;
4583 -> 4575;
4584 -> 4406;
4585 -> 4562;
4585 -> 4563;
4586 -> 4563;
4587 -> 4563;
4587 -> 4586;
4588 -> 4585;
4588 -> 4586;
4589 -> 4587;
4589 -> 0;
4589 -> 4586;
4590 -> 4586;
4591 -> 4589;
4591 -> 4586;
4592 -> 4588;
4592 -> 4591;
4593 -> 4565;
4593 -> 4563;
4594 -> 4564;
4594 -> 4563;
4595 -> 4592;
4595 -> 4563;
4596 -> 4593;
4596 -> 4563;
4597 -> 4594;
4597 -> 4563;
4598 -> 4563;
4598 -> 4406;
4599 -> 0;
4599 -> 4563;
4600 -> 4563;
4601 -> 4598;
4601 -> 4600;
4602 -> 4599;
4602 -> 4600;
4603 -> 4595;
4603 -> 4563;
4604 -> 4596;
4604 -> 4563;
4605 -> 4597;
4605 -> 4563;
4606 -> 4603;
4606 -> 4563;
4607 -> 4604;
4607 -> 4563;
4608 -> 4605;
4608 -> 4563;
4609 -> 4563;
4609 -> 4406;
4610 -> 4606;
4610 -> 4563;
4611 -> 4607;
4611 -> 4563;
4612 -> 4608;
4612 -> 4563;
4613 -> 4609;
4613 -> 4563;
4614 -> 4613;
4614 -> 4406;
4614 -> 4563;
4615 -> 0;
4615 -> 4563;
4616 -> 4563;
4617 -> 4614;
4617 -> 4616;
4618 -> 4615;
4618 -> 4616;
4619 -> 4609;
4619 -> 4563;
4620 -> 4610;
4620 -> 4563;
4621 -> 4611;
4621 -> 4563;
4622 -> 4612;
4622 -> 4563;
4623 -> 4619;
4623 -> 4563;
4624 -> 4620;
4624 -> 4563;
4625 -> 4621;
4625 -> 4563;
4626 -> 4619;
4626 -> 4563;
4627 -> 4622;
4627 -> 4563;
4628 -> 4563;
4629 -> 4563;
4630 -> 4623;
4630 -> 4629;
4630 -> 4563;
4631 -> 4623;
4631 -> 4406;
4631 -> 4563;
4632 -> 4623;
4632 -> 4563;
4633 -> 4563;
4634 -> 4623;
4634 -> 4563;
4635 -> 4627;
4635 -> 4563;
4636 -> 4634;
4636 -> 4563;
4637 -> 4563;
4638 -> 4634;
4638 -> 4406;
4638 -> 4563;
4639 -> 4563;
4640 -> 4563;
4640 -> 4406;
4641 -> 4563;
4642 -> 4634;
4642 -> 4563;
4643 -> 4642;
4643 -> 4563;
4644 -> 4563;
4645 -> 4641;
4645 -> 4644;
4645 -> 4563;
4646 -> 4563;
4647 -> 4406;
4647 -> 4646;
4648 -> 4647;
4648 -> 4563;
4648 -> 4646;
4649 -> 0;
4649 -> 4646;
4650 -> 4646;
4651 -> 4648;
4651 -> 4650;
4652 -> 4649;
4652 -> 4650;
4653 -> 4651;
4653 -> 4563;
4654 -> 4563;
4655 -> 4563;
4656 -> 4506;
4656 -> 4563;
4656 -> 0;
4656 -> 4505;
4657 -> 4656;
4657 -> 4406;
4658 -> 4406;
4658 -> 4657;
4659 -> 4658;
4659 -> 4406;
4660 -> 4406;
4661 -> 4406;
4662 -> 4660;
4662 -> 4661;
4663 -> 4661;
4664 -> 4662;
4664 -> 4663;
4665 -> 4664;
4665 -> 4563;
4665 -> 4663;
4666 -> 4665;
4666 -> 4661;
4667 -> 4661;
4668 -> 4662;
4668 -> 4667;
4669 -> 4668;
4669 -> 4563;
4669 -> 4667;
4670 -> 4669;
4670 -> 4661;
4671 -> 4670;
4671 -> 4563;
4672 -> 4671;
4673 -> 4406;
4674 -> 4406;
4675 -> 4406;
4676 -> 4673;
4676 -> 4406;
4677 -> 4673;
4677 -> 4406;
4678 -> 4673;
4678 -> 4406;
4679 -> 4406;
4680 -> 4406;
4681 -> 4674;
4681 -> 4680;
4681 -> 4406;
4682 -> 4406;
4683 -> 4675;
4683 -> 4682;
4683 -> 4406;
4684 -> 4406;
4685 -> 4563;
4685 -> 0;
4686 -> 4685;
4686 -> 4679;
4686 -> 4563;
4687 -> 4674;
4687 -> 4563;
4688 -> 4675;
4688 -> 4687;
4689 -> 4688;
4689 -> 4687;
4690 -> 4687;
4691 -> 4687;
4692 -> 4563;
4692 -> 4687;
4692 -> 0;
4692 -> 4406;
4693 -> 4674;
4693 -> 4692;
4694 -> 4692;
4695 -> 4563;
4695 -> 4692;
4696 -> 4675;
4696 -> 4692;
4697 -> 4692;
4698 -> 4693;
4698 -> 4697;
4699 -> 4694;
4699 -> 4697;
4700 -> 4695;
4700 -> 4697;
4701 -> 4696;
4701 -> 4697;
4702 -> 4679;
4702 -> 4697;
4703 -> 4700;
4703 -> 4687;
4703 -> 4697;
4704 -> 4697;
4705 -> 4563;
4705 -> 4687;
4705 -> 0;
4705 -> 4406;
4706 -> 4406;
4707 -> 4406;
4708 -> 4563;
4708 -> 4406;
4709 -> 4687;
4709 -> 4563;
4710 -> 4687;
4711 -> 4687;
4712 -> 4710;
4712 -> 4687;
4713 -> 4711;
4713 -> 4687;
4714 -> 4687;
4715 -> 4687;
4715 -> 0;
4716 -> 4687;
4717 -> 4712;
4717 -> 4687;
4718 -> 4713;
4718 -> 4687;
4719 -> 4687;
4720 -> 4687;
4720 -> 0;
4721 -> 4687;
4721 -> 0;
4722 -> 4718;
4722 -> 4687;
4723 -> 4722;
4723 -> 4687;
4724 -> 4687;
4725 -> 4717;
4725 -> 4687;
4726 -> 4719;
4726 -> 4687;
4727 -> 4687;
4728 -> 4724;
4728 -> 4727;
4728 -> 4687;
4729 -> 4687;
4730 -> 4687;
4731 -> 4687;
4732 -> 4729;
4732 -> 4731;
4732 -> 4687;
4733 -> 4687;
4734 -> 4733;
4734 -> 4687;
4735 -> 4722;
4735 -> 4734;
4736 -> 4406;
4736 -> 2264;
4737 -> 4406;
4737 -> 2264;
4738 -> 4406;
4738 -> 2264;
4739 -> 4406;
4739 -> 2264;
4740 -> 4687;
4740 -> 2270;
4741 -> 4740;
4741 -> 4563;
4741 -> 2270;
4742 -> 4741;
4742 -> 0;
4742 -> 2270;
4743 -> 4742;
4743 -> 2264;
4744 -> 4687;
4744 -> 1003;
4744 -> 997;
4745 -> 4687;
4745 -> 1072;
4746 -> 4687;
4746 -> 1300;
4747 -> 4746;
4747 -> 1313;
4748 -> 4687;
4748 -> 1300;
4749 -> 4748;
4749 -> 1318;
4750 -> 4687;
4751 -> 4687;
4752 -> 4687;
4753 -> 4751;
4753 -> 4752;
4754 -> 4751;
4754 -> 4752;
4755 -> 4751;
4755 -> 4752;
4756 -> 4751;
4756 -> 4752;
4757 -> 4751;
4757 -> 4752;
4758 -> 4687;
4758 -> 4752;
4759 -> 4752;
4760 -> 4754;
4760 -> 4759;
4760 -> 4752;
4761 -> 4752;
4762 -> 4761;
4762 -> 4687;
4763 -> 4687;
4764 -> 4762;
4764 -> 4763;
4764 -> 4687;
4765 -> 4687;
4766 -> 4687;
4766 -> 4765;
4767 -> 4766;
4767 -> 4687;
4767 -> 0;
4767 -> 4765;
4768 -> 4765;
4769 -> 4766;
4769 -> 4687;
4769 -> 4768;
4769 -> 4765;
4770 -> 4767;
4770 -> 4687;
4771 -> 4687;
4772 -> 4687;
4773 -> 4687;
4773 -> 4772;
4774 -> 4773;
4774 -> 4687;
4774 -> 0;
4774 -> 4772;
4775 -> 4772;
4776 -> 4773;
4776 -> 4687;
4776 -> 4775;
4776 -> 4772;
4777 -> 4774;
4777 -> 4687;
4778 -> 4687;
4779 -> 4687;
4780 -> 4778;
4780 -> 4779;
4781 -> 4780;
4781 -> 0;
4781 -> 4779;
4782 -> 4780;
4782 -> 0;
4782 -> 4779;
4783 -> 4779;
4784 -> 0;
4784 -> 4779;
4785 -> 4780;
4785 -> 4784;
4785 -> 4779;
4786 -> 0;
4786 -> 4779;
4787 -> 4780;
4787 -> 4786;
4787 -> 4779;
4788 -> 4779;
4789 -> 0;
4789 -> 4779;
4790 -> 4780;
4790 -> 4789;
4790 -> 4779;
4791 -> 4790;
4791 -> 4779;
4792 -> 4779;
4793 -> 4791;
4793 -> 4792;
4794 -> 4792;
4795 -> 4793;
4795 -> 4794;
4795 -> 4792;
4796 -> 4687;
4797 -> 4687;
4798 -> 4687;
4799 -> 4687;
4800 -> 4687;
4801 -> 4687;
4802 -> 4687;
4803 -> 4687;
4804 -> 4687;
4805 -> 4687;
4805 -> 4804;
4806 -> 4805;
4806 -> 4687;
4806 -> 0;
4806 -> 4804;
4807 -> 4804;
4808 -> 4805;
4808 -> 4687;
4808 -> 4807;
4808 -> 4804;
4809 -> 4806;
4809 -> 4687;
4810 -> 4687;
4810 -> 0;
4811 -> 4687;
4812 -> 4687;
4813 -> 4687;
4814 -> 4687;
4815 -> 4687;
4816 -> 4687;
4817 -> 4687;
4818 -> 4687;
4819 -> 4812;
4819 -> 4818;
4820 -> 4819;
4820 -> 4687;
4820 -> 0;
4820 -> 4818;
4821 -> 4818;
4822 -> 4819;
4822 -> 4687;
4822 -> 4821;
4822 -> 4818;
4823 -> 4820;
4823 -> 4687;
4824 -> 4687;
4825 -> 4687;
4825 -> 4824;
4826 -> 0;
4826 -> 4824;
4827 -> 4826;
4827 -> 4687;
4828 -> 4815;
4828 -> 4827;
4828 -> 4687;
4829 -> 4687;
4830 -> 4687;
4831 -> 4687;
4831 -> 4830;
4832 -> 4831;
4832 -> 4687;
4832 -> 0;
4832 -> 4830;
4833 -> 4830;
4834 -> 4831;
4834 -> 4687;
4834 -> 4833;
4834 -> 4830;
4835 -> 4832;
4835 -> 4687;
4836 -> 4687;
4837 -> 4687;
4837 -> 4836;
4838 -> 4837;
4838 -> 4687;
4838 -> 0;
4838 -> 4836;
4839 -> 4838;
4839 -> 4687;
4840 -> 4687;
4841 -> 4687;
4842 -> 4687;
4843 -> 4841;
4843 -> 4842;
4844 -> 4843;
4844 -> 0;
4844 -> 4842;
4845 -> 4843;
4845 -> 0;
4845 -> 4842;
4846 -> 4842;
4847 -> 0;
4847 -> 4842;
4848 -> 4843;
4848 -> 4847;
4848 -> 4842;
4849 -> 0;
4849 -> 4842;
4850 -> 4843;
4850 -> 4849;
4850 -> 4842;
4851 -> 4842;
4852 -> 0;
4852 -> 4842;
4853 -> 4843;
4853 -> 4852;
4853 -> 4842;
4854 -> 4853;
4854 -> 4842;
4855 -> 4842;
4856 -> 4854;
4856 -> 4855;
4857 -> 4855;
4858 -> 4856;
4858 -> 4857;
4858 -> 4855;
4859 -> 4687;
4860 -> 4687;
4861 -> 4687;
4862 -> 4687;
4863 -> 4687;
4864 -> 4687;
4865 -> 4687;
4866 -> 4687;
4867 -> 4687;
4868 -> 4687;
4869 -> 4864;
4869 -> 4687;
4870 -> 4869;
4871 -> 4865;
4871 -> 4870;
4871 -> 4869;
4872 -> 4867;
4872 -> 0;
4872 -> 4869;
4873 -> 4871;
4873 -> 4872;
4873 -> 4869;
4874 -> 4864;
4874 -> 4873;
4875 -> 4874;
4875 -> 4687;
4875 -> 4873;
4876 -> 4874;
4876 -> 4873;
4877 -> 4874;
4877 -> 4687;
4877 -> 4865;
4877 -> 4873;
4878 -> 4867;
4878 -> 4873;
4879 -> 4873;
4880 -> 4878;
4880 -> 4879;
4881 -> 4877;
4881 -> 4880;
4881 -> 4873;
4882 -> 4687;
4883 -> 4687;
4884 -> 4687;
4884 -> 4883;
4885 -> 4861;
4885 -> 4883;
4886 -> 4884;
4886 -> 0;
4886 -> 4883;
4887 -> 4883;
4888 -> 4886;
4888 -> 4883;
4889 -> 4885;
4889 -> 4888;
4890 -> 4889;
4890 -> 4687;
4891 -> 4863;
4891 -> 4687;
4892 -> 4862;
4892 -> 4687;
4893 -> 4687;
4894 -> 0;
4894 -> 4687;
4895 -> 4687;
4896 -> 4893;
4896 -> 4895;
4897 -> 4894;
4897 -> 4895;
4898 -> 4890;
4898 -> 4687;
4899 -> 4891;
4899 -> 4687;
4900 -> 4892;
4900 -> 4687;
4901 -> 4898;
4901 -> 4687;
4902 -> 4899;
4902 -> 4687;
4903 -> 4900;
4903 -> 4687;
4904 -> 4687;
4905 -> 4901;
4905 -> 4687;
4906 -> 4902;
4906 -> 4687;
4907 -> 4903;
4907 -> 4687;
4908 -> 4904;
4908 -> 4687;
4909 -> 4908;
4909 -> 4687;
4910 -> 0;
4910 -> 4687;
4911 -> 4687;
4912 -> 4909;
4912 -> 4911;
4913 -> 4910;
4913 -> 4911;
4914 -> 4904;
4914 -> 4687;
4915 -> 4905;
4915 -> 4687;
4916 -> 4906;
4916 -> 4687;
4917 -> 4907;
4917 -> 4687;
4918 -> 4914;
4918 -> 4687;
4919 -> 4915;
4919 -> 4687;
4920 -> 4916;
4920 -> 4687;
4921 -> 4914;
4921 -> 4687;
4922 -> 4917;
4922 -> 4687;
4923 -> 4687;
4924 -> 4687;
4925 -> 4918;
4925 -> 4924;
4925 -> 4687;
4926 -> 4918;
4926 -> 4687;
4927 -> 4918;
4927 -> 4687;
4928 -> 4687;
4929 -> 4918;
4929 -> 4687;
4930 -> 4922;
4930 -> 4687;
4931 -> 4929;
4931 -> 4687;
4932 -> 4687;
4933 -> 4929;
4933 -> 4687;
4934 -> 4687;
4935 -> 4687;
4936 -> 4687;
4937 -> 4929;
4937 -> 4687;
4938 -> 4937;
4938 -> 4687;
4939 -> 4687;
4940 -> 4936;
4940 -> 4939;
4940 -> 4687;
4941 -> 4861;
4942 -> 4687;
4942 -> 4941;
4943 -> 4942;
4943 -> 4861;
4943 -> 4941;
4944 -> 0;
4944 -> 4941;
4945 -> 4941;
4946 -> 4943;
4946 -> 4945;
4947 -> 4944;
4947 -> 4945;
4948 -> 4946;
4948 -> 4861;
4949 -> 4861;
4950 -> 4861;
4951 -> 4805;
4951 -> 4861;
4951 -> 0;
4951 -> 4804;
4952 -> 4951;
4952 -> 4687;
4953 -> 4687;
4953 -> 4952;
4954 -> 4953;
4954 -> 4687;
4955 -> 4687;
4956 -> 4687;
4957 -> 4955;
4957 -> 4956;
4958 -> 4956;
4959 -> 4957;
4959 -> 4958;
4960 -> 4959;
4960 -> 4861;
4960 -> 4958;
4961 -> 4960;
4961 -> 4956;
4962 -> 4956;
4963 -> 4957;
4963 -> 4962;
4964 -> 4963;
4964 -> 4861;
4964 -> 4962;
4965 -> 4964;
4965 -> 4956;
4966 -> 4965;
4966 -> 4861;
4967 -> 4966;
4968 -> 4687;
4969 -> 4687;
4970 -> 4968;
4970 -> 4687;
4971 -> 4968;
4971 -> 4687;
4972 -> 4968;
4972 -> 4687;
4973 -> 4687;
4974 -> 4687;
4975 -> 4687;
4976 -> 4969;
4976 -> 4975;
4976 -> 4687;
4977 -> 4687;
4978 -> 4861;
4978 -> 0;
4979 -> 4978;
4979 -> 4973;
4979 -> 4861;
4980 -> 4969;
4980 -> 4861;
4981 -> 4980;
4982 -> 4980;
4983 -> 4980;
4984 -> 4861;
4984 -> 4980;
4984 -> 0;
4984 -> 4687;
4985 -> 4687;
4985 -> 4984;
4986 -> 4984;
4987 -> 4861;
4987 -> 4984;
4988 -> 4969;
4988 -> 4984;
4989 -> 4984;
4990 -> 4985;
4990 -> 4989;
4991 -> 4986;
4991 -> 4989;
4992 -> 4987;
4992 -> 4989;
4993 -> 4988;
4993 -> 4989;
4994 -> 4973;
4994 -> 4989;
4995 -> 4992;
4995 -> 4980;
4995 -> 4989;
4996 -> 4989;
4997 -> 4861;
4997 -> 4980;
4997 -> 0;
4997 -> 4687;
4998 -> 4687;
4999 -> 4687;
5000 -> 4861;
5000 -> 4687;
5001 -> 4980;
5001 -> 4861;
5002 -> 4980;
5003 -> 4980;
5004 -> 5002;
5004 -> 4980;
5005 -> 5003;
5005 -> 4980;
5006 -> 4980;
5007 -> 4980;
5007 -> 0;
5008 -> 4980;
5009 -> 5004;
5009 -> 4980;
5010 -> 5005;
5010 -> 4980;
5011 -> 4980;
5012 -> 4980;
5012 -> 0;
5013 -> 4980;
5013 -> 0;
5014 -> 5010;
5014 -> 4980;
5015 -> 5014;
5015 -> 4980;
5016 -> 4980;
5017 -> 5009;
5017 -> 4980;
5018 -> 5011;
5018 -> 4980;
5019 -> 4980;
5020 -> 5016;
5020 -> 5019;
5020 -> 4980;
5021 -> 4980;
5022 -> 4980;
5023 -> 4980;
5024 -> 5021;
5024 -> 5023;
5024 -> 4980;
5025 -> 4980;
5026 -> 5025;
5026 -> 4980;
5027 -> 5014;
5027 -> 5026;
5028 -> 4980;
5028 -> 2270;
5029 -> 5028;
5029 -> 4861;
5029 -> 2270;
5030 -> 5029;
5030 -> 0;
5030 -> 2270;
5031 -> 5030;
5031 -> 2264;
5032 -> 4406;
5032 -> 2765;
5033 -> 4406;
5033 -> 2765;
5034 -> 4406;
5034 -> 2765;
5035 -> 4406;
5035 -> 2765;
5036 -> 4406;
5036 -> 2775;
5036 -> 2765;
5037 -> 4980;
5037 -> 750;
5038 -> 752;
5038 -> 750;
5039 -> 750;
5040 -> 5037;
5040 -> 5039;
5041 -> 5038;
5041 -> 5039;
5042 -> 5040;
5042 -> 5039;
5043 -> 5041;
5043 -> 5039;
5044 -> 5039;
5045 -> 5042;
5045 -> 5044;
5046 -> 5043;
5046 -> 5044;
5047 -> 5045;
5047 -> 5044;
5048 -> 5046;
5048 -> 5044;
5049 -> 5044;
5050 -> 5044;
5051 -> 5047;
5051 -> 5050;
5052 -> 5048;
5052 -> 5050;
5053 -> 5049;
5053 -> 5050;
5054 -> 5050;
5055 -> 5052;
5055 -> 5054;
5055 -> 5050;
5056 -> 5052;
5056 -> 5050;
5057 -> 5056;
5057 -> 575;
5057 -> 749;
5057 -> 720;
5057 -> 721;
5057 -> 730;
5057 -> 722;
5057 -> 723;
5057 -> 747;
5057 -> 726;
5057 -> 727;
5057 -> 740;
5057 -> 728;
5057 -> 729;
5057 -> 725;
5057 -> 744;
5057 -> 745;
5057 -> 746;
5057 -> 712;
5057 -> 655;
5057 -> 601;
5057 -> 5050;
5058 -> 5050;
5059 -> 5056;
5059 -> 5058;
5059 -> 575;
5059 -> 749;
5059 -> 720;
5059 -> 721;
5059 -> 730;
5059 -> 722;
5059 -> 723;
5059 -> 747;
5059 -> 726;
5059 -> 727;
5059 -> 740;
5059 -> 728;
5059 -> 729;
5059 -> 725;
5059 -> 744;
5059 -> 745;
5059 -> 746;
5059 -> 712;
5059 -> 655;
5059 -> 601;
5059 -> 5050;
5060 -> 5059;
5060 -> 5058;
5061 -> 5060;
5061 -> 5059;
5061 -> 5058;
5062 -> 5052;
5062 -> 5050;
5063 -> 5062;
5063 -> 5061;
5063 -> 5050;
5064 -> 5050;
5065 -> 5062;
5065 -> 5064;
5065 -> 5061;
5065 -> 5050;
5066 -> 5065;
5066 -> 5064;
5067 -> 5066;
5067 -> 5065;
5067 -> 5064;
5068 -> 5051;
5068 -> 5050;
5069 -> 5053;
5069 -> 5061;
5069 -> 5067;
5069 -> 5050;
5070 -> 5068;
5070 -> 5069;
5070 -> 5050;
5071 -> 5050;
5072 -> 5070;
5072 -> 5071;
5073 -> 5070;
5073 -> 5071;
5074 -> 5070;
5074 -> 5071;
5075 -> 5070;
5075 -> 5071;
5076 -> 5070;
5076 -> 5071;
5077 -> 5076;
5077 -> 5071;
5078 -> 5076;
5078 -> 5071;
5079 -> 5076;
5079 -> 5071;
5080 -> 5076;
5080 -> 5071;
5081 -> 5076;
5081 -> 5071;
5082 -> 5076;
5082 -> 5071;
5083 -> 5076;
5083 -> 5071;
5084 -> 5076;
5084 -> 5071;
5085 -> 5076;
5085 -> 5071;
5086 -> 5076;
5086 -> 5071;
5087 -> 5076;
5087 -> 5071;
5088 -> 5072;
5088 -> 5070;
5088 -> 5076;
5088 -> 5071;
5089 -> 5072;
5089 -> 5070;
5089 -> 5076;
5089 -> 5071;
5090 -> 5072;
5090 -> 5070;
5090 -> 5076;
5090 -> 5071;
5091 -> 5072;
5091 -> 5070;
5091 -> 5076;
5091 -> 5071;
5092 -> 5074;
5092 -> 5071;
5093 -> 5092;
5094 -> 5093;
5094 -> 5076;
5094 -> 5071;
5095 -> 5075;
5095 -> 5071;
5096 -> 5095;
5097 -> 5096;
5097 -> 5076;
5097 -> 5071;
5098 -> 5071;
5099 -> 5071;
5100 -> 5072;
5100 -> 5070;
5100 -> 5099;
5100 -> 5071;
5101 -> 5072;
5101 -> 5070;
5101 -> 5071;
5102 -> 0;
5102 -> 5071;
5103 -> 5072;
5103 -> 5100;
5104 -> 5100;
5105 -> 5103;
5105 -> 5104;
5105 -> 5100;
5106 -> 5103;
5106 -> 5101;
5106 -> 5076;
5106 -> 5105;
5107 -> 5072;
5107 -> 5101;
5107 -> 5076;
5107 -> 5105;
5108 -> 5073;
5108 -> 5076;
5108 -> 5071;
5109 -> 5076;
5109 -> 5108;
5109 -> 5071;
5110 -> 5076;
5110 -> 5091;
5110 -> 5101;
5110 -> 5109;
5111 -> 5110;
5112 -> 5111;
5112 -> 5076;
5112 -> 5110;
5113 -> 5109;
5114 -> 5103;
5114 -> 5113;
5114 -> 5109;
5115 -> 5103;
5115 -> 5111;
5115 -> 5076;
5115 -> 5114;
5116 -> 5109;
5117 -> 5076;
5117 -> 5115;
5117 -> 5116;
5117 -> 5109;
5118 -> 5076;
5118 -> 5115;
5118 -> 5111;
5118 -> 5116;
5118 -> 5109;
5119 -> 5076;
5119 -> 5091;
5119 -> 5111;
5119 -> 5071;
5120 -> 5119;
5120 -> 5076;
5120 -> 5071;
5121 -> 5070;
5121 -> 5119;
5121 -> 5107;
5121 -> 5089;
5121 -> 5090;
5121 -> 5112;
5121 -> 5115;
5121 -> 5120;
5121 -> 5083;
5121 -> 5106;
5121 -> 5108;
5121 -> 5094;
5121 -> 5097;
5121 -> 5087;
5121 -> 5076;
5121 -> 5091;
5121 -> 5050;
5122 -> 5052;
5122 -> 5050;
5123 -> 5122;
5123 -> 5067;
5123 -> 5050;
5124 -> 5123;
5125 -> 5124;
5125 -> 5121;
5125 -> 5067;
5125 -> 5123;
5126 -> 5125;
5126 -> 5124;
5127 -> 5125;
5127 -> 5124;
5128 -> 5126;
5128 -> 5124;
5129 -> 5124;
5130 -> 5128;
5130 -> 5129;
5130 -> 5124;
5131 -> 5128;
5131 -> 5125;
5131 -> 5124;
5132 -> 5127;
5132 -> 5125;
5132 -> 5131;
5132 -> 5124;
5133 -> 5127;
5133 -> 5132;
5133 -> 5128;
5133 -> 5124;
5134 -> 5127;
5134 -> 5132;
5134 -> 5128;
5134 -> 5124;
5135 -> 5127;
5135 -> 5132;
5135 -> 5124;
5136 -> 5127;
5136 -> 5132;
5136 -> 5128;
5136 -> 5135;
5137 -> 5124;
5138 -> 5127;
5138 -> 5132;
5138 -> 5137;
5138 -> 5124;
5139 -> 5138;
5140 -> 5127;
5140 -> 5132;
5140 -> 5128;
5140 -> 5139;
5141 -> 5124;
5142 -> 5127;
5142 -> 5132;
5142 -> 5141;
5142 -> 5124;
5143 -> 5124;
5144 -> 5128;
5144 -> 5132;
5144 -> 5143;
5144 -> 5124;
5145 -> 5127;
5145 -> 5132;
5145 -> 5128;
5145 -> 5124;
5146 -> 5124;
5147 -> 5127;
5147 -> 5132;
5147 -> 5146;
5147 -> 5124;
5148 -> 5147;
5149 -> 5147;
5150 -> 5127;
5150 -> 5149;
5151 -> 5149;
5152 -> 5150;
5152 -> 5132;
5152 -> 5151;
5152 -> 5149;
5153 -> 5150;
5153 -> 5132;
5153 -> 5152;
5154 -> 5152;
5155 -> 5153;
5155 -> 5150;
5155 -> 5152;
5156 -> 5150;
5156 -> 5132;
5156 -> 5155;
5156 -> 5149;
5157 -> 5156;
5157 -> 5147;
5158 -> 5147;
5159 -> 5128;
5159 -> 5158;
5160 -> 5158;
5161 -> 5159;
5161 -> 5132;
5161 -> 5155;
5161 -> 5160;
5161 -> 5158;
5162 -> 5159;
5162 -> 5132;
5162 -> 5155;
5162 -> 5161;
5162 -> 5158;
5163 -> 5162;
5163 -> 5147;
5164 -> 5127;
5164 -> 5132;
5164 -> 5128;
5164 -> 5147;
5165 -> 5157;
5165 -> 5164;
5166 -> 5163;
5166 -> 5164;
5167 -> 5165;
5167 -> 5166;
5167 -> 5132;
5167 -> 5155;
5167 -> 5161;
5167 -> 5153;
5167 -> 5154;
5167 -> 5164;
5168 -> 5127;
5168 -> 5167;
5168 -> 5128;
5168 -> 5124;
5169 -> 5124;
5170 -> 5125;
5170 -> 5169;
5170 -> 5167;
5170 -> 5123;
5171 -> 5123;
5172 -> 5170;
5172 -> 5171;
5172 -> 5123;
5173 -> 5170;
5173 -> 5172;
5174 -> 5050;
5175 -> 5121;
5175 -> 5173;
5175 -> 5174;
5175 -> 5050;
5176 -> 5050;
5177 -> 5052;
5177 -> 5050;
5178 -> 5051;
5178 -> 5050;
5179 -> 5050;
5180 -> 5177;
5180 -> 5179;
5181 -> 5178;
5181 -> 5179;
5182 -> 5179;
5183 -> 5179;
5184 -> 5181;
5184 -> 5179;
5185 -> 5184;
5185 -> 5173;
5185 -> 5179;
5186 -> 5173;
5186 -> 5179;
5187 -> 5185;
5187 -> 5179;
5188 -> 5182;
5188 -> 5187;
5189 -> 5188;
5189 -> 5179;
5190 -> 5188;
5190 -> 5179;
5191 -> 5190;
5191 -> 5179;
5192 -> 5180;
5192 -> 5179;
5193 -> 5192;
5193 -> 5173;
5193 -> 5179;
5194 -> 5179;
5195 -> 5192;
5195 -> 5194;
5195 -> 5173;
5195 -> 5179;
5196 -> 5180;
5196 -> 5179;
5197 -> 5196;
5197 -> 5195;
5197 -> 5179;
5198 -> 5179;
5199 -> 5196;
5199 -> 5198;
5199 -> 5195;
5199 -> 5179;
5200 -> 5180;
5200 -> 5179;
5201 -> 5179;
5202 -> 5200;
5202 -> 5201;
5204 -> 5203;
5205 -> 5203;
5206 -> 5205;
5206 -> 5201;
5207 -> 5201;
5208 -> 5202;
5208 -> 5201;
5209 -> 5208;
5209 -> 5199;
5209 -> 5201;
5210 -> 5209;
5211 -> 5209;
5212 -> 5207;
5212 -> 5211;
5212 -> 5209;
5213 -> 5209;
5214 -> 5201;
5215 -> 5214;
5215 -> 5179;
5216 -> 5181;
5216 -> 5215;
5217 -> 5215;
5218 -> 5216;
5218 -> 5217;
5219 -> 5218;
5219 -> 5217;
5220 -> 5217;
5221 -> 5205;
5221 -> 5217;
5222 -> 5219;
5222 -> 5220;
5222 -> 5221;
5222 -> 5199;
5222 -> 5217;
5223 -> 5179;
5224 -> 5223;
5224 -> 5179;
5225 -> 5179;
5226 -> 5179;
5227 -> 5223;
5227 -> 5226;
5227 -> 5224;
5227 -> 5179;
5228 -> 5179;
5229 -> 5180;
5229 -> 5179;
5230 -> 5229;
5230 -> 5222;
5230 -> 5179;
5231 -> 5230;
5232 -> 5191;
5232 -> 5230;
5233 -> 5230;
5234 -> 5231;
5234 -> 5233;
5235 -> 5232;
5235 -> 5233;
5236 -> 5233;
5237 -> 5236;
5237 -> 5235;
5237 -> 5233;
5238 -> 5233;
5239 -> 5234;
5239 -> 5238;
5240 -> 5238;
5241 -> 5238;
5242 -> 5240;
5242 -> 5241;
5242 -> 5238;
5243 -> 5238;
5244 -> 5239;
5244 -> 5222;
5244 -> 5243;
5244 -> 5238;
5245 -> 5239;
5245 -> 5222;
5245 -> 5244;
5246 -> 5240;
5246 -> 5245;
5246 -> 5242;
5246 -> 5244;
5247 -> 5244;
5248 -> 5240;
5248 -> 5247;
5248 -> 5246;
5248 -> 5244;
5249 -> 5239;
5249 -> 5222;
5249 -> 5244;
5250 -> 5240;
5250 -> 5249;
5250 -> 5248;
5250 -> 5244;
5251 -> 5238;
5252 -> 5239;
5252 -> 5222;
5252 -> 5251;
5252 -> 5238;
5253 -> 5252;
5254 -> 5253;
5255 -> 5240;
5255 -> 5254;
5255 -> 5250;
5255 -> 5253;
5256 -> 5239;
5256 -> 5222;
5256 -> 5253;
5257 -> 5240;
5257 -> 5256;
5257 -> 5255;
5257 -> 5253;
5258 -> 5252;
5259 -> 5240;
5259 -> 5258;
5259 -> 5257;
5259 -> 5252;
5260 -> 5239;
5260 -> 5222;
5260 -> 5238;
5261 -> 5238;
5262 -> 5240;
5262 -> 5261;
5262 -> 5259;
5262 -> 5238;
5263 -> 5238;
5264 -> 5239;
5264 -> 5222;
5264 -> 5263;
5264 -> 5238;
5265 -> 5264;
5266 -> 5240;
5266 -> 5265;
5266 -> 5262;
5266 -> 5264;
5267 -> 5264;
5268 -> 5267;
5268 -> 5264;
5269 -> 5264;
5270 -> 5268;
5270 -> 5264;
5271 -> 5270;
5272 -> 5240;
5272 -> 5271;
5272 -> 5266;
5272 -> 5270;
5273 -> 5268;
5273 -> 5270;
5274 -> 5240;
5274 -> 5273;
5274 -> 5272;
5274 -> 5270;
5275 -> 5270;
5276 -> 5240;
5276 -> 5275;
5276 -> 5274;
5276 -> 5270;
5277 -> 5270;
5278 -> 5277;
5279 -> 5240;
5279 -> 5278;
5279 -> 5276;
5279 -> 5277;
5280 -> 5264;
5281 -> 5240;
5281 -> 5280;
5281 -> 5279;
5281 -> 5264;
5282 -> 5238;
5283 -> 5239;
5283 -> 5270;
5283 -> 5282;
5283 -> 5238;
5284 -> 5283;
5285 -> 5240;
5285 -> 5284;
5285 -> 5281;
5285 -> 5283;
5286 -> 5283;
5287 -> 5240;
5287 -> 5286;
5287 -> 5285;
5287 -> 5283;
5288 -> 5283;
5289 -> 5240;
5289 -> 5288;
5289 -> 5287;
5289 -> 5283;
5290 -> 5283;
5291 -> 5240;
5291 -> 5290;
5291 -> 5289;
5291 -> 5283;
5292 -> 5283;
5293 -> 5240;
5293 -> 5292;
5293 -> 5291;
5293 -> 5283;
5294 -> 5239;
5294 -> 5270;
5294 -> 5238;
5295 -> 5238;
5296 -> 5239;
5296 -> 5270;
5296 -> 5295;
5296 -> 5238;
5297 -> 5238;
5298 -> 5239;
5298 -> 5270;
5298 -> 5297;
5298 -> 5238;
5299 -> 5238;
5300 -> 5239;
5300 -> 5270;
5300 -> 5299;
5300 -> 5238;
5301 -> 5240;
5301 -> 5293;
5301 -> 5238;
5302 -> 5301;
5302 -> 5233;
5303 -> 5237;
5303 -> 5302;
5303 -> 5233;
5304 -> 5228;
5304 -> 5303;
5304 -> 5230;
5305 -> 5223;
5305 -> 5179;
5306 -> 5228;
5306 -> 5179;
5307 -> 5179;
5308 -> 5305;
5308 -> 5307;
5309 -> 5306;
5309 -> 5307;
5310 -> 5309;
5310 -> 5304;
5310 -> 5307;
5311 -> 5307;
5312 -> 5311;
5312 -> 5310;
5312 -> 5307;
5313 -> 5309;
5313 -> 5311;
5313 -> 5304;
5313 -> 5312;
5314 -> 5308;
5314 -> 5313;
5314 -> 5227;
5314 -> 5312;
5315 -> 5312;
5316 -> 5308;
5316 -> 5314;
5316 -> 5312;
5317 -> 5179;
5318 -> 5179;
5319 -> 5223;
5319 -> 5318;
5319 -> 5316;
5319 -> 5179;
5320 -> 5179;
5321 -> 5222;
5321 -> 5270;
5321 -> 5179;
5322 -> 5179;
5323 -> 5321;
5323 -> 5179;
5324 -> 5323;
5324 -> 5322;
5325 -> 5323;
5325 -> 5322;
5326 -> 5323;
5326 -> 5322;
5327 -> 5322;
5328 -> 5324;
5328 -> 5327;
5328 -> 5322;
5329 -> 5322;
5330 -> 5325;
5330 -> 5329;
5330 -> 5322;
5331 -> 5325;
5331 -> 5323;
5331 -> 5322;
5332 -> 5324;
5332 -> 5323;
5332 -> 5331;
5332 -> 5322;
5333 -> 5322;
5334 -> 5332;
5334 -> 5333;
5334 -> 5322;
5335 -> 5325;
5335 -> 5323;
5335 -> 5322;
5336 -> 5324;
5336 -> 5323;
5336 -> 5335;
5336 -> 5322;
5337 -> 5325;
5337 -> 5336;
5337 -> 5322;
5338 -> 5337;
5338 -> 5333;
5338 -> 5322;
5339 -> 5321;
5339 -> 5336;
5340 -> 5339;
5340 -> 5336;
5341 -> 5340;
5341 -> 5336;
5342 -> 5336;
5343 -> 5336;
5344 -> 5189;
5344 -> 5336;
5345 -> 5223;
5345 -> 5344;
5346 -> 5191;
5346 -> 5344;
5347 -> 5344;
5348 -> 5345;
5348 -> 5347;
5349 -> 5346;
5349 -> 5347;
5350 -> 5347;
5351 -> 5350;
5351 -> 5349;
5351 -> 5347;
5352 -> 5348;
5352 -> 5350;
5352 -> 5351;
5352 -> 5319;
5352 -> 5347;
5353 -> 5344;
5354 -> 5344;
5355 -> 5223;
5355 -> 5354;
5355 -> 5352;
5355 -> 5344;
5356 -> 5339;
5356 -> 5340;
5356 -> 5344;
5357 -> 5223;
5357 -> 5356;
5357 -> 5355;
5357 -> 5344;
5358 -> 5339;
5358 -> 5356;
5358 -> 5344;
5359 -> 5358;
5359 -> 5356;
5359 -> 5344;
5360 -> 5223;
5360 -> 5359;
5361 -> 5191;
5361 -> 5359;
5362 -> 5359;
5363 -> 5360;
5363 -> 5362;
5364 -> 5361;
5364 -> 5362;
5365 -> 5362;
5366 -> 5365;
5366 -> 5364;
5366 -> 5362;
5367 -> 5363;
5367 -> 5365;
5367 -> 5366;
5367 -> 5357;
5367 -> 5362;
5368 -> 5359;
5369 -> 5359;
5370 -> 5223;
5370 -> 5369;
5370 -> 5367;
5370 -> 5359;
5371 -> 5359;
5372 -> 5223;
5372 -> 5371;
5372 -> 5370;
5372 -> 5359;
5373 -> 5339;
5373 -> 5336;
5374 -> 5336;
5375 -> 5193;
5375 -> 5336;
5376 -> 5197;
5376 -> 5336;
5377 -> 5336;
5378 -> 5373;
5378 -> 5377;
5379 -> 5374;
5379 -> 5377;
5380 -> 5375;
5380 -> 5377;
5381 -> 5376;
5381 -> 5377;
5382 -> 5374;
5382 -> 5377;
5383 -> 5382;
5383 -> 5377;
5384 -> 5382;
5384 -> 5377;
5385 -> 5382;
5385 -> 5377;
5386 -> 5382;
5386 -> 5377;
5387 -> 5382;
5387 -> 5377;
5388 -> 5382;
5388 -> 5377;
5389 -> 5382;
5389 -> 5377;
5390 -> 5382;
5390 -> 5377;
5391 -> 5382;
5391 -> 5377;
5392 -> 5378;
5392 -> 5371;
5392 -> 5382;
5392 -> 5377;
5393 -> 5378;
5393 -> 5371;
5393 -> 5382;
5393 -> 5377;
5394 -> 5378;
5394 -> 5371;
5394 -> 5382;
5394 -> 5377;
5395 -> 5378;
5395 -> 5371;
5395 -> 5382;
5395 -> 5377;
5396 -> 5377;
5397 -> 5378;
5397 -> 5371;
5397 -> 5377;
5398 -> 5382;
5399 -> 5382;
5399 -> 5397;
5399 -> 5398;
5400 -> 5382;
5400 -> 5397;
5400 -> 5395;
5400 -> 5398;
5401 -> 5374;
5401 -> 5336;
5402 -> 5180;
5402 -> 5336;
5403 -> 5374;
5403 -> 5336;
5404 -> 5402;
5404 -> 5403;
5404 -> 5395;
5404 -> 5397;
5404 -> 5393;
5404 -> 5394;
5404 -> 5382;
5404 -> 5379;
5404 -> 5380;
5404 -> 5381;
5404 -> 5336;
5405 -> 5336;
5406 -> 5405;
5407 -> 5404;
5407 -> 5406;
5407 -> 5405;
5408 -> 5404;
5408 -> 5405;
5409 -> 5404;
5409 -> 5405;
5410 -> 5404;
5410 -> 5405;
5411 -> 5404;
5411 -> 5410;
5412 -> 5405;
5413 -> 5404;
5413 -> 5412;
5413 -> 5405;
5414 -> 5413;
5415 -> 5404;
5415 -> 5414;
5416 -> 5405;
5417 -> 5404;
5417 -> 5416;
5417 -> 5405;
5418 -> 5405;
5419 -> 5404;
5419 -> 5418;
5419 -> 5405;
5420 -> 5404;
5420 -> 5405;
5421 -> 5404;
5422 -> 5404;
5422 -> 5405;
5423 -> 5336;
5424 -> 5404;
5424 -> 5423;
5424 -> 5336;
5425 -> 5180;
5425 -> 5404;
5425 -> 5424;
5426 -> 5374;
5426 -> 5336;
5427 -> 5191;
5427 -> 5336;
5428 -> 5336;
5429 -> 5426;
5429 -> 5428;
5430 -> 5427;
5430 -> 5428;
5431 -> 5428;
5432 -> 5431;
5432 -> 5430;
5432 -> 5428;
5433 -> 5428;
5434 -> 5428;
5435 -> 5433;
5435 -> 5434;
5435 -> 5428;
5436 -> 5428;
5437 -> 5429;
5437 -> 5404;
5437 -> 5436;
5437 -> 5428;
5438 -> 5429;
5438 -> 5404;
5438 -> 5437;
5439 -> 5433;
5439 -> 5438;
5439 -> 5435;
5439 -> 5437;
5440 -> 5437;
5441 -> 5433;
5441 -> 5440;
5441 -> 5439;
5441 -> 5437;
5442 -> 5429;
5442 -> 5404;
5442 -> 5437;
5443 -> 5433;
5443 -> 5442;
5443 -> 5441;
5443 -> 5437;
5444 -> 5428;
5445 -> 5429;
5445 -> 5404;
5445 -> 5444;
5445 -> 5428;
5446 -> 5445;
5447 -> 5446;
5448 -> 5433;
5448 -> 5447;
5448 -> 5443;
5448 -> 5446;
5449 -> 5429;
5449 -> 5404;
5449 -> 5446;
5450 -> 5433;
5450 -> 5449;
5450 -> 5448;
5450 -> 5446;
5451 -> 5445;
5452 -> 5433;
5452 -> 5451;
5452 -> 5450;
5452 -> 5445;
5453 -> 5429;
5453 -> 5404;
5453 -> 5428;
5454 -> 5428;
5455 -> 5433;
5455 -> 5454;
5455 -> 5452;
5455 -> 5428;
5456 -> 5429;
5456 -> 5404;
5456 -> 5428;
5457 -> 5456;
5458 -> 5433;
5458 -> 5457;
5458 -> 5455;
5458 -> 5456;
5459 -> 5456;
5460 -> 5433;
5460 -> 5459;
5460 -> 5458;
5460 -> 5456;
5461 -> 5456;
5462 -> 5433;
5462 -> 5461;
5462 -> 5460;
5462 -> 5456;
5463 -> 5456;
5464 -> 5433;
5464 -> 5463;
5464 -> 5462;
5464 -> 5456;
5465 -> 5456;
5466 -> 5465;
5467 -> 5433;
5467 -> 5466;
5467 -> 5464;
5467 -> 5465;
5468 -> 5456;
5469 -> 5433;
5469 -> 5468;
5469 -> 5467;
5469 -> 5456;
5470 -> 5428;
5471 -> 5429;
5471 -> 5456;
5471 -> 5470;
5471 -> 5428;
5472 -> 5471;
5473 -> 5433;
5473 -> 5472;
5473 -> 5469;
5473 -> 5471;
5474 -> 5471;
5475 -> 5433;
5475 -> 5474;
5475 -> 5473;
5475 -> 5471;
5476 -> 5471;
5477 -> 5433;
5477 -> 5476;
5477 -> 5475;
5477 -> 5471;
5478 -> 5471;
5479 -> 5433;
5479 -> 5478;
5479 -> 5477;
5479 -> 5471;
5480 -> 5471;
5481 -> 5433;
5481 -> 5480;
5481 -> 5479;
5481 -> 5471;
5482 -> 5429;
5482 -> 5456;
5482 -> 5428;
5483 -> 5428;
5484 -> 5429;
5484 -> 5456;
5484 -> 5483;
5484 -> 5428;
5485 -> 5428;
5486 -> 5429;
5486 -> 5456;
5486 -> 5485;
5486 -> 5428;
5487 -> 5428;
5488 -> 5429;
5488 -> 5456;
5488 -> 5487;
5488 -> 5428;
5489 -> 5433;
5489 -> 5481;
5489 -> 5428;
5490 -> 5489;
5490 -> 5428;
5491 -> 5432;
5491 -> 5490;
5491 -> 5428;
5492 -> 5223;
5492 -> 5491;
5492 -> 5372;
5492 -> 5336;
5493 -> 5425;
5493 -> 5336;
5494 -> 5191;
5494 -> 5336;
5495 -> 5336;
5496 -> 5493;
5496 -> 5495;
5497 -> 5494;
5497 -> 5495;
5498 -> 5495;
5499 -> 5498;
5499 -> 5497;
5499 -> 5495;
5500 -> 5495;
5501 -> 5495;
5502 -> 5500;
5502 -> 5501;
5502 -> 5495;
5503 -> 5495;
5504 -> 5496;
5504 -> 5456;
5504 -> 5503;
5504 -> 5495;
5505 -> 5496;
5505 -> 5456;
5505 -> 5504;
5506 -> 5500;
5506 -> 5505;
5506 -> 5502;
5506 -> 5504;
5507 -> 5504;
5508 -> 5500;
5508 -> 5507;
5508 -> 5506;
5508 -> 5504;
5509 -> 5496;
5509 -> 5456;
5509 -> 5504;
5510 -> 5500;
5510 -> 5509;
5510 -> 5508;
5510 -> 5504;
5511 -> 5495;
5512 -> 5496;
5512 -> 5456;
5512 -> 5511;
5512 -> 5495;
5513 -> 5512;
5514 -> 5513;
5515 -> 5500;
5515 -> 5514;
5515 -> 5510;
5515 -> 5513;
5516 -> 5496;
5516 -> 5456;
5516 -> 5513;
5517 -> 5500;
5517 -> 5516;
5517 -> 5515;
5517 -> 5513;
5518 -> 5512;
5519 -> 5500;
5519 -> 5518;
5519 -> 5517;
5519 -> 5512;
5520 -> 5496;
5520 -> 5456;
5520 -> 5495;
5521 -> 5495;
5522 -> 5500;
5522 -> 5521;
5522 -> 5519;
5522 -> 5495;
5523 -> 5496;
5523 -> 5456;
5523 -> 5495;
5524 -> 5523;
5525 -> 5500;
5525 -> 5524;
5525 -> 5522;
5525 -> 5523;
5526 -> 5523;
5527 -> 5500;
5527 -> 5526;
5527 -> 5525;
5527 -> 5523;
5528 -> 5523;
5529 -> 5500;
5529 -> 5528;
5529 -> 5527;
5529 -> 5523;
5530 -> 5523;
5531 -> 5500;
5531 -> 5530;
5531 -> 5529;
5531 -> 5523;
5532 -> 5523;
5533 -> 5532;
5534 -> 5500;
5534 -> 5533;
5534 -> 5531;
5534 -> 5532;
5535 -> 5523;
5536 -> 5500;
5536 -> 5535;
5536 -> 5534;
5536 -> 5523;
5537 -> 5495;
5538 -> 5496;
5538 -> 5523;
5538 -> 5537;
5538 -> 5495;
5539 -> 5538;
5540 -> 5500;
5540 -> 5539;
5540 -> 5536;
5540 -> 5538;
5541 -> 5538;
5542 -> 5500;
5542 -> 5541;
5542 -> 5540;
5542 -> 5538;
5543 -> 5538;
5544 -> 5500;
5544 -> 5543;
5544 -> 5542;
5544 -> 5538;
5545 -> 5538;
5546 -> 5500;
5546 -> 5545;
5546 -> 5544;
5546 -> 5538;
5547 -> 5538;
5548 -> 5500;
5548 -> 5547;
5548 -> 5546;
5548 -> 5538;
5549 -> 5496;
5549 -> 5523;
5549 -> 5495;
5550 -> 5495;
5551 -> 5496;
5551 -> 5523;
5551 -> 5550;
5551 -> 5495;
5552 -> 5495;
5553 -> 5496;
5553 -> 5523;
5553 -> 5552;
5553 -> 5495;
5554 -> 5495;
5555 -> 5496;
5555 -> 5523;
5555 -> 5554;
5555 -> 5495;
5556 -> 5500;
5556 -> 5548;
5556 -> 5495;
5557 -> 5556;
5557 -> 5495;
5558 -> 5499;
5558 -> 5557;
5558 -> 5495;
5559 -> 5320;
5559 -> 5558;
5559 -> 5336;
5560 -> 5179;
5561 -> 5336;
5561 -> 5560;
5561 -> 5179;
5562 -> 5223;
5562 -> 5492;
5562 -> 5561;
5563 -> 5179;
5564 -> 5223;
5564 -> 5563;
5564 -> 5562;
5564 -> 5179;
5565 -> 5228;
5565 -> 5179;
5566 -> 5320;
5566 -> 5179;
5570 -> 5568;
5570 -> 5567;
5571 -> 5569;
5571 -> 5567;
5572 -> 5567;
5573 -> 0;
5573 -> 5179;
5574 -> 5179;
5575 -> 5179;
5576 -> 5565;
5576 -> 5575;
5577 -> 5566;
5577 -> 5575;
5578 -> 5573;
5578 -> 5575;
5579 -> 5574;
5579 -> 5575;
5580 -> 5574;
5580 -> 5575;
5581 -> 5575;
5582 -> 5579;
5582 -> 5581;
5582 -> 5575;
5583 -> 5582;
5583 -> 5575;
5584 -> 0;
5586 -> 5584;
5586 -> 5585;
5587 -> 5585;
5589 -> 5588;
5591 -> 5590;
5593 -> 5592;
5594 -> 5587;
5595 -> 5587;
5595 -> 5585;
5596 -> 5586;
5596 -> 5587;
5596 -> 5585;
5597 -> 5585;
5598 -> 5575;
5599 -> 5598;
5599 -> 5580;
5599 -> 5575;
5600 -> 5576;
5600 -> 5575;
5601 -> 5577;
5601 -> 5575;
5602 -> 5578;
5602 -> 5575;
5603 -> 5600;
5603 -> 5575;
5604 -> 5601;
5604 -> 5575;
5605 -> 5599;
5605 -> 5575;
5606 -> 5575;
5607 -> 5603;
5607 -> 5606;
5608 -> 5604;
5608 -> 5606;
5609 -> 5605;
5609 -> 5606;
5610 -> 5583;
5610 -> 5606;
5611 -> 5607;
5611 -> 5606;
5612 -> 5607;
5612 -> 5600;
5612 -> 5606;
5613 -> 5608;
5613 -> 5606;
5614 -> 5608;
5614 -> 5601;
5614 -> 5606;
5615 -> 5606;
5616 -> 5611;
5616 -> 5615;
5617 -> 5612;
5617 -> 5615;
5618 -> 5613;
5618 -> 5615;
5619 -> 5614;
5619 -> 5615;
5620 -> 5610;
5620 -> 5615;
5621 -> 5616;
5621 -> 5615;
5622 -> 5617;
5622 -> 5615;
5623 -> 5618;
5623 -> 5615;
5624 -> 5619;
5624 -> 5615;
5625 -> 5615;
5626 -> 5621;
5626 -> 5625;
5627 -> 5622;
5627 -> 5625;
5628 -> 5623;
5628 -> 5625;
5629 -> 5624;
5629 -> 5625;
5630 -> 5620;
5630 -> 5625;
5631 -> 5625;
5632 -> 5627;
5632 -> 5631;
5632 -> 5625;
5633 -> 5625;
5634 -> 5629;
5634 -> 5633;
5634 -> 5625;
5635 -> 5632;
5635 -> 5634;
5635 -> 5625;
5636 -> 5625;
5637 -> 5636;
5637 -> 5635;
5637 -> 5625;
5638 -> 5625;
5639 -> 5638;
5639 -> 5627;
5639 -> 5625;
5640 -> 5639;
5641 -> 5635;
5641 -> 5637;
5641 -> 5640;
5641 -> 5639;
5642 -> 5641;
5642 -> 5638;
5642 -> 5640;
5642 -> 5635;
5642 -> 5639;
5643 -> 5625;
5644 -> 5643;
5644 -> 5629;
5644 -> 5625;
5645 -> 5644;
5646 -> 5635;
5646 -> 5637;
5646 -> 5642;
5646 -> 5645;
5646 -> 5644;
5647 -> 5646;
5647 -> 5645;
5647 -> 5643;
5647 -> 5635;
5647 -> 5644;
5648 -> 5625;
5649 -> 5648;
5649 -> 5627;
5649 -> 5625;
5650 -> 5649;
5651 -> 5650;
5651 -> 5629;
5651 -> 5649;
5652 -> 5651;
5653 -> 5635;
5653 -> 5637;
5653 -> 5642;
5653 -> 5647;
5653 -> 5652;
5653 -> 5651;
5654 -> 5626;
5654 -> 5651;
5655 -> 5628;
5655 -> 5651;
5656 -> 5651;
5657 -> 5654;
5657 -> 5656;
5658 -> 5652;
5658 -> 5656;
5659 -> 5655;
5659 -> 5656;
5660 -> 5652;
5660 -> 5656;
5661 -> 5630;
5661 -> 5656;
5662 -> 5657;
5662 -> 5600;
5662 -> 5658;
5662 -> 5656;
5663 -> 5659;
5663 -> 5601;
5663 -> 5660;
5663 -> 5656;
5664 -> 5661;
5664 -> 0;
5664 -> 5662;
5664 -> 5663;
5664 -> 5600;
5664 -> 5601;
5664 -> 5656;
5665 -> 5653;
5665 -> 5664;
5665 -> 5651;
5666 -> 5651;
5667 -> 5635;
5667 -> 5637;
5667 -> 5642;
5667 -> 5647;
5667 -> 5666;
5667 -> 5650;
5667 -> 5651;
5668 -> 5651;
5669 -> 5635;
5669 -> 5637;
5669 -> 5642;
5669 -> 5647;
5669 -> 5648;
5669 -> 5668;
5669 -> 5651;
5670 -> 5665;
5670 -> 5651;
5671 -> 5667;
5671 -> 5651;
5672 -> 5670;
5672 -> 5671;
5672 -> 5651;
5673 -> 5669;
5673 -> 5651;
5674 -> 5672;
5674 -> 5673;
5674 -> 5651;
5675 -> 5674;
5675 -> 5648;
5675 -> 5650;
5675 -> 5635;
5675 -> 5651;
5676 -> 5635;
5676 -> 5625;
5677 -> 5617;
5677 -> 5615;
5678 -> 5619;
5678 -> 5615;
5679 -> 5615;
5680 -> 5677;
5680 -> 5679;
5680 -> 5615;
5681 -> 5678;
5681 -> 5679;
5681 -> 5615;
5682 -> 5680;
5682 -> 5681;
5682 -> 5615;
5683 -> 5676;
5683 -> 5635;
5683 -> 5637;
5683 -> 5642;
5683 -> 5647;
5683 -> 5675;
5683 -> 5677;
5683 -> 5678;
5683 -> 5682;
5684 -> 5682;
5685 -> 5676;
5685 -> 5635;
5685 -> 5637;
5685 -> 5642;
5685 -> 5647;
5685 -> 5675;
5685 -> 5684;
5685 -> 5678;
5685 -> 5682;
5686 -> 5676;
5686 -> 5635;
5686 -> 5637;
5686 -> 5642;
5686 -> 5647;
5686 -> 5675;
5686 -> 5677;
5686 -> 5678;
5686 -> 5685;
5687 -> 5685;
5688 -> 5677;
5688 -> 5687;
5689 -> 5678;
5689 -> 5687;
5690 -> 5687;
5691 -> 0;
5691 -> 5687;
5692 -> 5688;
5692 -> 5687;
5693 -> 5689;
5693 -> 5687;
5694 -> 5687;
5695 -> 5691;
5695 -> 5694;
5696 -> 5692;
5696 -> 5694;
5697 -> 5693;
5697 -> 5694;
5698 -> 5690;
5698 -> 5694;
5699 -> 5695;
5699 -> 5698;
5699 -> 5694;
5700 -> 5696;
5700 -> 5698;
5700 -> 5694;
5701 -> 5697;
5701 -> 5698;
5701 -> 5694;
5702 -> 5615;
5703 -> 5688;
5703 -> 5702;
5703 -> 5615;
5704 -> 5615;
5705 -> 5689;
5705 -> 5704;
5705 -> 5615;
5706 -> 5690;
5706 -> 5699;
5706 -> 5700;
5706 -> 5701;
5706 -> 5606;
5707 -> 5706;
5708 -> 5707;
5709 -> 5608;
5709 -> 5601;
5709 -> 5664;
5709 -> 5706;
5709 -> 5707;
5710 -> 5609;
5710 -> 5709;
5710 -> 5598;
5710 -> 5707;
5711 -> 5602;
5711 -> 5708;
5711 -> 5575;
5712 -> 5223;
5712 -> 5711;
5712 -> 5564;
5712 -> 5179;
5713 -> 5320;
5713 -> 5559;
5713 -> 5179;
5714 -> 5228;
5714 -> 5313;
5714 -> 5179;
5715 -> 5223;
5715 -> 5712;
5715 -> 5179;
5716 -> 5039;
5717 -> 750;
5718 -> 751;
5718 -> 750;
5719 -> 4980;
5719 -> 750;
5720 -> 750;
5721 -> 5718;
5721 -> 5720;
5722 -> 5719;
5722 -> 5720;
5723 -> 5722;
5723 -> 5720;
5724 -> 5723;
5724 -> 4980;
5724 -> 5523;
5725 -> 5721;
5725 -> 5724;
5725 -> 5523;
5725 -> 5723;
5726 -> 5723;
5726 -> 5725;
5727 -> 5726;
5727 -> 5725;
5728 -> 750;
5729 -> 751;
5729 -> 750;
}