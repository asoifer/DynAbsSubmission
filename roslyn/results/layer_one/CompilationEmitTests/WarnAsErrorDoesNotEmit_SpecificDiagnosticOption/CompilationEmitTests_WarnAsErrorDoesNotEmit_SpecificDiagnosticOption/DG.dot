digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 859524"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 859525"];
3 [label="param CompilationEmitTests(this) 859526"];
4 [label="param EmitMetadataTestBase(this) 859527"];
5 [label="param CSharpTestBase(this) 859528"];
6 [label="param CommonTestBase(this) 859529"];
7 [label="param TestBase(this) 859530"];
8 [label="_temp 859531"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 859532"];
10 [label="param WarnAsErrorDoesNotEmit_SpecificDiagnosticOption(this) 859533"];
11 [label="var options = TestOptions.DebugDll.WithSpecificDiagnosticOptions('CS0169', ReportDiagnostic.Error); 859534"];
12 [label="var options = TestOptions.DebugDll.WithSpecificDiagnosticOptions('CS0169', ReportDiagnostic.Error); 859535"];
13 [label="TestOptions.DebugDll.WithSpecificDiagnosticOptions('CS0169', ReportDiagnostic.Error) 859536"];
14 [label="param WithSpecificDiagnosticOptions(this CSharpCompilationOptions options) 859537"];
15 [label="param WithSpecificDiagnosticOptions(string key) 859538"];
16 [label="param WithSpecificDiagnosticOptions(ReportDiagnostic value) 859539"];
17 [label="return options.WithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic>.Empty.Add(key, value)); 859540"];
18 [label="return options.WithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic>.Empty.Add(key, value)); 859541"];
19 [label="return options.WithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic>.Empty.Add(key, value)); 859542"];
20 [label="return options.WithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic>.Empty.Add(key, value)); 859543"];
21 [label="TestWarnAsErrorDoesNotEmitCore(options); 859544"];
22 [label="TestWarnAsErrorDoesNotEmitCore(options) 859545"];
23 [label="param TestWarnAsErrorDoesNotEmitCore(CSharpCompilationOptions options) 859546"];
24 [label="param TestWarnAsErrorDoesNotEmitCore(this) 859547"];
25 [label="string source = @'\nclass X\n{\n    int _f;\n}'; 859548"];
26 [label="var compilation = CreateCompilation(source, options: options); 859549"];
27 [label="source 859550"];
28 [label="param operator(string source) 859551"];
29 [label="source 859552"];
30 [label="new CSharpTestSource(source) 859553"];
31 [label="param CSharpTestSource(object value) 859554"];
32 [label="param CSharpTestSource(this) 859555"];
33 [label="Value 859556"];
34 [label="var compilation = CreateCompilation(source, options: options); 859557"];
35 [label="var compilation = CreateCompilation(source, options: options); 859558"];
36 [label="var compilation = CreateCompilation(source, options: options); 859559"];
37 [label="CreateCompilation(source, options: options) 859560"];
38 [label="param CreateCompilation(CSharpTestSource source) 859561"];
39 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 859562"];
40 [label="param CreateCompilation(CSharpCompilationOptions options = null) 859563"];
41 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 859564"];
42 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 859565"];
43 [label="param CreateCompilation(string assemblyName = '') 859566"];
44 [label="param CreateCompilation(string sourceFileName = '') 859567"];
45 [label="param CreateCompilation(bool skipUsesIsNullable = false) 859568"];
46 [label="source 859569"];
47 [label="targetFramework 859570"];
48 [label="references 859571"];
49 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 859572"];
50 [label="param GetReferences(TargetFramework tf) 859573"];
51 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 859574"];
52 [label="var references = GetReferences(tf); 859575"];
53 [label="GetReferences(tf) 859576"];
54 [label="param GetReferences(TargetFramework targetFramework) 859577"];
55 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 859578"];
56 [label="StandardReferences 859579"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 859580"];
58 [label="Mscorlib46ExtendedReferences 859581"];
59 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 859582"];
60 [label="TestBase.ValueTupleRef 859583"];
61 [label="TestReferences.NetFx.ValueTuple.tuplelib 859584"];
62 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 859585"];
63 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 859586"];
64 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 859587"];
65 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 859588"];
66 [label="return references; 859589"];
67 [label="options 859590"];
68 [label="parseOptions 859591"];
69 [label="assemblyName 859592"];
70 [label="sourceFileName 859593"];
71 [label="skipUsesIsNullable 859594"];
72 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 859595"];
73 [label="param CreateEmptyCompilation(CSharpTestSource source) 859596"];
74 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 859597"];
75 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 859598"];
76 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 859599"];
77 [label="param CreateEmptyCompilation(string assemblyName = '') 859600"];
78 [label="param CreateEmptyCompilation(string sourceFileName = '') 859601"];
79 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 859602"];
80 [label="source 859603"];
81 [label="references 859604"];
82 [label="options 859605"];
83 [label="parseOptions 859606"];
84 [label="assemblyName 859607"];
85 [label="sourceFileName 859608"];
86 [label="skipUsesIsNullable 859609"];
87 [label="null 859610"];
88 [label="experimentalFeature: null 859611"];
89 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 859612"];
90 [label="param CreateCompilationCore(CSharpTestSource source) 859613"];
91 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 859614"];
92 [label="param CreateCompilationCore(CSharpCompilationOptions options) 859615"];
93 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 859616"];
94 [label="param CreateCompilationCore(string assemblyName) 859617"];
95 [label="param CreateCompilationCore(string sourceFileName) 859618"];
96 [label="param CreateCompilationCore(bool skipUsesIsNullable) 859619"];
97 [label="param CreateCompilationCore(MessageID? experimentalFeature) 859620"];
98 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 859621"];
99 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 859622"];
100 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 859623"];
101 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 859624"];
102 [label="param GetSyntaxTrees(string sourceFileName = '') 859625"];
103 [label="param GetSyntaxTrees(this) 859626"];
104 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 859627"];
105 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 859628"];
106 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 859629"];
107 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 859630"];
108 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 859631"];
109 [label="param Parse(string text) 859632"];
110 [label="param Parse(string filename = '') 859633"];
111 [label="param Parse(CSharpParseOptions options = null) 859634"];
112 [label="param Parse(Encoding encoding = null) 859635"];
113 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 859636"];
114 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 859637"];
115 [label="options = TestOptions.Regular; 859638"];
116 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 859639"];
117 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 859640"];
118 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 859641"];
119 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 859642"];
120 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 859643"];
121 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 859644"];
122 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 859645"];
123 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 859646"];
124 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 859647"];
125 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 859648"];
126 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 859649"];
127 [label="param CheckSerializable(SyntaxTree tree) 859650"];
128 [label="var stream = new MemoryStream(); 859651"];
129 [label="var root = tree.GetRoot(); 859652"];
130 [label="var root = tree.GetRoot(); 859653"];
131 [label="root.SerializeTo(stream); 859654"];
132 [label="root.SerializeTo(stream); 859655"];
133 [label="root.SerializeTo(stream); 859656"];
134 [label="stream.Position = 0; 859657"];
135 [label="stream.Position 859658"];
136 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 859659"];
137 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 859660"];
138 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 859661"];
139 [label="return tree; 859662"];
140 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 859663"];
141 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 859664"];
142 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 859665"];
143 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 859666"];
144 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 859667"];
145 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 859668"];
146 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 859669"];
147 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 859670"];
148 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 859671"];
149 [label="param ValidateIOperations(Func<Compilation> createCompilation) 859672"];
150 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 859673"];
151 [label="return; 859674"];
152 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 859675"];
153 [label="var compilation = createCompilationLambda(); 859676"];
154 [label="var compilation = createCompilationLambda(); 859677"];
155 [label="return Guid.NewGuid().ToString('D'); 859678"];
156 [label="var compilation = createCompilationLambda(); 859679"];
157 [label="OutputKind.ConsoleApplication 859680"];
158 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 859681"];
159 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 859682"];
160 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 859683"];
161 [label="OutputKind.DynamicallyLinkedLibrary 859684"];
162 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 859685"];
163 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 859686"];
164 [label="true 859687"];
165 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 859688"];
166 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 859689"];
167 [label="param Create(string? assemblyName) 859690"];
168 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 859691"];
169 [label="param Create(IEnumerable<MetadataReference>? references = null) 859692"];
170 [label="param Create(CSharpCompilationOptions? options = null) 859693"];
171 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 859694"];
172 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 859695"];
173 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 859696"];
174 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 859697"];
175 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 859698"];
176 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 859699"];
177 [label="param Create(string? assemblyName) 859700"];
178 [label="param Create(CSharpCompilationOptions options) 859701"];
179 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 859702"];
180 [label="param Create(IEnumerable<MetadataReference>? references) 859703"];
181 [label="param Create(CSharpCompilation? previousSubmission) 859704"];
182 [label="param Create(Type? returnType) 859705"];
183 [label="param Create(Type? hostObjectType) 859706"];
184 [label="param Create(bool isSubmission) 859707"];
185 [label="RoslynDebug.Assert(options != null); 859708"];
186 [label="RoslynDebug.Assert(options != null); 859709"];
187 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 859710"];
188 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 859711"];
189 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 859712"];
190 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859713"];
191 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859714"];
192 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859715"];
193 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859716"];
194 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859717"];
195 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859718"];
196 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859719"];
197 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859720"];
198 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859721"];
199 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 859722"];
200 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 859723"];
201 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 859724"];
202 [label="param SyntaxAndDeclarationManager(string scriptClassName) 859725"];
203 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 859726"];
204 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 859727"];
205 [label="param SyntaxAndDeclarationManager(bool isSubmission) 859728"];
206 [label="param SyntaxAndDeclarationManager(State state) 859729"];
207 [label="param SyntaxAndDeclarationManager(this) 859730"];
208 [label="externalSyntaxTrees 859731"];
209 [label="scriptClassName 859732"];
210 [label="resolver 859733"];
211 [label="messageProvider 859734"];
212 [label="isSubmission 859735"];
213 [label="param SyntaxAndDeclarationManager(this) 859736"];
214 [label="param SyntaxAndDeclarationManager(this) 859737"];
215 [label="_lazyState 859738"];
216 [label="_lazyState 859739"];
217 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 859740"];
218 [label="param CSharpCompilation(string? assemblyName) 859741"];
219 [label="param CSharpCompilation(CSharpCompilationOptions options) 859742"];
220 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 859743"];
221 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 859744"];
222 [label="param CSharpCompilation(Type? submissionReturnType) 859745"];
223 [label="param CSharpCompilation(Type? hostObjectType) 859746"];
224 [label="param CSharpCompilation(bool isSubmission) 859747"];
225 [label="param CSharpCompilation(ReferenceManager? referenceManager) 859748"];
226 [label="param CSharpCompilation(bool reuseReferenceManager) 859749"];
227 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 859750"];
228 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 859751"];
229 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 859752"];
230 [label="param CSharpCompilation(this) 859753"];
231 [label="assemblyName 859754"];
232 [label="options 859755"];
233 [label="references 859756"];
234 [label="previousSubmission 859757"];
235 [label="submissionReturnType 859758"];
236 [label="hostObjectType 859759"];
237 [label="isSubmission 859760"];
238 [label="referenceManager 859761"];
239 [label="reuseReferenceManager 859762"];
240 [label="syntaxAndDeclarations 859763"];
241 [label="syntaxAndDeclarations.ExternalSyntaxTrees 859764"];
242 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 859765"];
243 [label="semanticModelProvider 859766"];
244 [label="eventQueue 859767"];
245 [label="param CSharpCompilation(this) 859768"];
246 [label="param CSharpCompilation(string? assemblyName) 859769"];
247 [label="param CSharpCompilation(CSharpCompilationOptions options) 859770"];
248 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 859771"];
249 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 859772"];
250 [label="param CSharpCompilation(Type? submissionReturnType) 859773"];
251 [label="param CSharpCompilation(Type? hostObjectType) 859774"];
252 [label="param CSharpCompilation(bool isSubmission) 859775"];
253 [label="param CSharpCompilation(ReferenceManager? referenceManager) 859776"];
254 [label="param CSharpCompilation(bool reuseReferenceManager) 859777"];
255 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 859778"];
256 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 859779"];
257 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 859780"];
258 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 859781"];
259 [label="param CSharpCompilation(this) 859782"];
260 [label="assemblyName 859783"];
261 [label="references 859784"];
262 [label="features 859785"];
263 [label="isSubmission 859786"];
264 [label="semanticModelProvider 859787"];
265 [label="eventQueue 859788"];
266 [label="param CSharpCompilation(this) 859789"];
267 [label="param CSharpCompilation(this) 859790"];
268 [label="_options 859791"];
269 [label="_globalImports 859792"];
270 [label="_previousSubmissionImports 859793"];
271 [label="_globalNamespaceAlias 859794"];
272 [label="_scriptClass 859795"];
273 [label="_lazyHostObjectTypeSymbol 859796"];
274 [label="_lazyImportInfos 859797"];
275 [label="_conversions 859798"];
276 [label="_anonymousTypeManager 859799"];
277 [label="_lazyGlobalNamespace 859800"];
278 [label="builtInOperators 859801"];
279 [label="_lazyAssemblySymbol 859802"];
280 [label="_referenceManager 859803"];
281 [label="_syntaxAndDeclarations 859804"];
282 [label="_lazyEntryPoint 859805"];
283 [label="_lazyEmitNullablePublicOnly 859806"];
284 [label="_lazyCompilationUnitCompletedTrees 859807"];
285 [label="NullableAnalysisData 859808"];
286 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 859809"];
287 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 859810"];
288 [label="_externAliasTargets 859811"];
289 [label="_moduleInitializerMethods 859812"];
290 [label="_binderFactories 859813"];
291 [label="_ignoreAccessibilityBinderFactories 859814"];
292 [label="_lazyDeclarationDiagnostics 859815"];
293 [label="_declarationDiagnosticsFrozen 859816"];
294 [label="new DiagnosticBag() 859817"];
295 [label="_additionalCodegenWarnings = new DiagnosticBag() 859818"];
296 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 859819"];
297 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 859820"];
298 [label="WellKnownMemberSignatureComparer 859821"];
299 [label="_options 859822"];
300 [label="this.builtInOperators = new BuiltInOperators(this); 859823"];
301 [label="this.builtInOperators = new BuiltInOperators(this); 859824"];
302 [label="new BuiltInOperators(this) 859825"];
303 [label="param BuiltInOperators(CSharpCompilation compilation) 859826"];
304 [label="param BuiltInOperators(this) 859827"];
305 [label="_compilation 859828"];
306 [label="_builtInUnaryOperators 859829"];
307 [label="_builtInOperators 859830"];
308 [label="_compilation 859831"];
309 [label="this.builtInOperators 859832"];
310 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 859833"];
311 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 859834"];
312 [label="_scriptClass 859835"];
313 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 859836"];
314 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 859837"];
315 [label="_globalImports 859838"];
316 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 859839"];
317 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 859840"];
318 [label="_previousSubmissionImports 859841"];
319 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 859842"];
320 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 859843"];
321 [label="_globalNamespaceAlias 859844"];
322 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 859845"];
323 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 859846"];
324 [label="_anonymousTypeManager 859847"];
325 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 859848"];
326 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 859849"];
327 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 859850"];
328 [label="LanguageVersion? result = null; 859851"];
329 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 859852"];
330 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 859853"];
331 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 859854"];
332 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 859855"];
333 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 859856"];
334 [label="this.LanguageVersion 859857"];
335 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 859858"];
336 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 859859"];
337 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 859860"];
338 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 859861"];
339 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 859862"];
340 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 859863"];
341 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 859864"];
342 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 859865"];
343 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 859866"];
344 [label="this.Options 859867"];
345 [label="get\n            {\n                return _options;\n            } 859868"];
346 [label="return _options; 859869"];
347 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 859870"];
348 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 859871"];
349 [label="_referenceManager 859872"];
350 [label="_syntaxAndDeclarations 859873"];
351 [label="Debug.Assert(_lazyAssemblySymbol is null); 859874"];
352 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 859875"];
353 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 859876"];
354 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 859877"];
355 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 859878"];
356 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 859879"];
357 [label="compilation.AddSyntaxTrees(syntaxTrees) 859880"];
358 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 859881"];
359 [label="param AddSyntaxTrees(this) 859882"];
360 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 859883"];
361 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 859884"];
362 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 859885"];
363 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 859886"];
364 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 859887"];
365 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 859888"];
366 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 859889"];
367 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 859890"];
368 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 859891"];
369 [label="bool reuseReferenceManager = true; 859892"];
370 [label="int i = 0; 859893"];
371 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 859894"];
372 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 859895"];
373 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 859896"];
374 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 859897"];
375 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 859898"];
376 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 859899"];
377 [label="externalSyntaxTrees.Add(tree); 859900"];
378 [label="externalSyntaxTrees.Add(tree); 859901"];
379 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 859902"];
380 [label="i++; 859903"];
381 [label="externalSyntaxTrees.Free(); 859904"];
382 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 859905"];
383 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 859906"];
384 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 859907"];
385 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 859908"];
386 [label="param AddSyntaxTrees(this) 859909"];
387 [label="var scriptClassName = this.ScriptClassName; 859910"];
388 [label="var resolver = this.Resolver; 859911"];
389 [label="var messageProvider = this.MessageProvider; 859912"];
390 [label="var isSubmission = this.IsSubmission; 859913"];
391 [label="var state = _lazyState; 859914"];
392 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 859915"];
393 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 859916"];
394 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 859917"];
395 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 859918"];
396 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 859919"];
397 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 859920"];
398 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 859921"];
399 [label="param WithExternalSyntaxTrees(this) 859922"];
400 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 859923"];
401 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 859924"];
402 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 859925"];
403 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 859926"];
404 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 859927"];
405 [label="param SyntaxAndDeclarationManager(string scriptClassName) 859928"];
406 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 859929"];
407 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 859930"];
408 [label="param SyntaxAndDeclarationManager(bool isSubmission) 859931"];
409 [label="param SyntaxAndDeclarationManager(State state) 859932"];
410 [label="param SyntaxAndDeclarationManager(this) 859933"];
411 [label="param SyntaxAndDeclarationManager(this) 859934"];
412 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 859935"];
413 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 859936"];
414 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 859937"];
415 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 859938"];
416 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 859939"];
417 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 859940"];
418 [label="param Update(ReferenceManager referenceManager) 859941"];
419 [label="param Update(bool reuseReferenceManager) 859942"];
420 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 859943"];
421 [label="param Update(this) 859944"];
422 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859945"];
423 [label="this.PreviousSubmission 859946"];
424 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 859947"];
425 [label="ScriptCompilationInfo 859948"];
426 [label="ScriptCompilationInfo?.PreviousScriptCompilation 859949"];
427 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859950"];
428 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859951"];
429 [label="this.SubmissionReturnType 859952"];
430 [label="=> ScriptCompilationInfo 859953"];
431 [label="ScriptCompilationInfo 859954"];
432 [label="this.HostObjectType 859955"];
433 [label="=> ScriptCompilationInfo 859956"];
434 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859957"];
435 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859958"];
436 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859959"];
437 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 859960"];
438 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 859961"];
439 [label="param CSharpCompilation(string? assemblyName) 859962"];
440 [label="param CSharpCompilation(CSharpCompilationOptions options) 859963"];
441 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 859964"];
442 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 859965"];
443 [label="param CSharpCompilation(Type? submissionReturnType) 859966"];
444 [label="param CSharpCompilation(Type? hostObjectType) 859967"];
445 [label="param CSharpCompilation(bool isSubmission) 859968"];
446 [label="param CSharpCompilation(ReferenceManager? referenceManager) 859969"];
447 [label="param CSharpCompilation(bool reuseReferenceManager) 859970"];
448 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 859971"];
449 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 859972"];
450 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 859973"];
451 [label="param CSharpCompilation(this) 859974"];
452 [label="previousSubmission 859975"];
453 [label="submissionReturnType 859976"];
454 [label="hostObjectType 859977"];
455 [label="syntaxAndDeclarations.ExternalSyntaxTrees 859978"];
456 [label="eventQueue 859979"];
457 [label="param CSharpCompilation(this) 859980"];
458 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 859981"];
459 [label="param CSharpCompilation(Type? submissionReturnType) 859982"];
460 [label="param CSharpCompilation(Type? hostObjectType) 859983"];
461 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 859984"];
462 [label="param CSharpCompilation(this) 859985"];
463 [label="eventQueue 859986"];
464 [label="param CSharpCompilation(this) 859987"];
465 [label="_options 859988"];
466 [label="_globalImports 859989"];
467 [label="_previousSubmissionImports 859990"];
468 [label="_globalNamespaceAlias 859991"];
469 [label="_scriptClass 859992"];
470 [label="_lazyHostObjectTypeSymbol 859993"];
471 [label="_lazyImportInfos 859994"];
472 [label="_conversions 859995"];
473 [label="_anonymousTypeManager 859996"];
474 [label="_lazyGlobalNamespace 859997"];
475 [label="builtInOperators 859998"];
476 [label="_lazyAssemblySymbol 859999"];
477 [label="_referenceManager 860000"];
478 [label="_syntaxAndDeclarations 860001"];
479 [label="_lazyEntryPoint 860002"];
480 [label="_lazyEmitNullablePublicOnly 860003"];
481 [label="_lazyCompilationUnitCompletedTrees 860004"];
482 [label="NullableAnalysisData 860005"];
483 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 860006"];
484 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 860007"];
485 [label="_externAliasTargets 860008"];
486 [label="_moduleInitializerMethods 860009"];
487 [label="_binderFactories 860010"];
488 [label="_ignoreAccessibilityBinderFactories 860011"];
489 [label="_lazyDeclarationDiagnostics 860012"];
490 [label="_declarationDiagnosticsFrozen 860013"];
491 [label="new DiagnosticBag() 860014"];
492 [label="_additionalCodegenWarnings = new DiagnosticBag() 860015"];
493 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 860016"];
494 [label="this.builtInOperators = new BuiltInOperators(this); 860017"];
495 [label="this.builtInOperators = new BuiltInOperators(this); 860018"];
496 [label="new BuiltInOperators(this) 860019"];
497 [label="param BuiltInOperators(CSharpCompilation compilation) 860020"];
498 [label="param BuiltInOperators(this) 860021"];
499 [label="_compilation 860022"];
500 [label="_builtInUnaryOperators 860023"];
501 [label="_builtInOperators 860024"];
502 [label="_compilation 860025"];
503 [label="this.builtInOperators 860026"];
504 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 860027"];
505 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 860028"];
506 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 860029"];
507 [label="LanguageVersion? result = null; 860030"];
508 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 860031"];
509 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 860032"];
510 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 860033"];
511 [label="result = version; 860034"];
512 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 860035"];
513 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 860036"];
514 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 860037"];
515 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 860038"];
516 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 860039"];
517 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 860040"];
518 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 860041"];
519 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 860042"];
520 [label="referenceManager.AssertCanReuseForCompilation(this); 860043"];
521 [label="referenceManager.AssertCanReuseForCompilation(this); 860044"];
522 [label="_referenceManager 860045"];
523 [label="Debug.Assert(_lazyAssemblySymbol is null); 860046"];
524 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 860047"];
525 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 860048"];
526 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 860049"];
527 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 860050"];
528 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 860051"];
529 [label="return compilation; 860052"];
530 [label="var compilation = createCompilationLambda(); 860053"];
531 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 860054"];
532 [label="IsNullableEnabled(compilation) 860055"];
533 [label="param IsNullableEnabled(CSharpCompilation compilation) 860056"];
534 [label="compilation.SyntaxTrees 860057"];
535 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 860058"];
536 [label="_syntaxAndDeclarations.GetLazyState() 860059"];
537 [label="param GetLazyState(this) 860060"];
538 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860061"];
539 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860062"];
540 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 860063"];
541 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 860064"];
542 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 860065"];
543 [label="param CreateState(string scriptClassName) 860066"];
544 [label="param CreateState(SourceReferenceResolver resolver) 860067"];
545 [label="param CreateState(CommonMessageProvider messageProvider) 860068"];
546 [label="param CreateState(bool isSubmission) 860069"];
547 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 860070"];
548 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 860071"];
549 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 860072"];
550 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 860073"];
551 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 860074"];
552 [label="var declTable = DeclarationTable.Empty; 860075"];
553 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 860076"];
554 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860077"];
555 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860078"];
556 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860079"];
557 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860080"];
558 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860081"];
559 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860082"];
560 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860083"];
561 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860084"];
562 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860085"];
563 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860086"];
564 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 860087"];
565 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 860088"];
566 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 860089"];
567 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 860090"];
568 [label="param AppendAllSyntaxTrees(string scriptClassName) 860091"];
569 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 860092"];
570 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 860093"];
571 [label="param AppendAllSyntaxTrees(bool isSubmission) 860094"];
572 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 860095"];
573 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 860096"];
574 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 860097"];
575 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 860098"];
576 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 860099"];
577 [label="var sourceCodeKind = tree.Options.Kind; 860100"];
578 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 860101"];
579 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 860102"];
580 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 860103"];
581 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 860104"];
582 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 860105"];
583 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 860106"];
584 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 860107"];
585 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 860108"];
586 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 860109"];
587 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 860110"];
588 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 860111"];
589 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 860112"];
590 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 860113"];
591 [label="declMapBuilder.Add(tree, lazyRoot); 860114"];
592 [label="declMapBuilder.Add(tree, lazyRoot); 860115"];
593 [label="declMapBuilder.Add(tree, lazyRoot); 860116"];
594 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 860117"];
595 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 860118"];
596 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 860119"];
597 [label="treesBuilder.Add(tree); 860120"];
598 [label="treesBuilder.Add(tree); 860121"];
599 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 860122"];
600 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 860123"];
601 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 860124"];
602 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 860125"];
603 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 860126"];
604 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 860127"];
605 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 860128"];
606 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 860129"];
607 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 860130"];
608 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 860131"];
609 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 860132"];
610 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 860133"];
611 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 860134"];
612 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 860135"];
613 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 860136"];
614 [label="param State(DeclarationTable declarationTable) 860137"];
615 [label="param State(this) 860138"];
616 [label="OrdinalMap 860139"];
617 [label="LoadDirectiveMap 860140"];
618 [label="LoadedSyntaxTreeMap 860141"];
619 [label="RootNamespaces 860142"];
620 [label="DeclarationTable 860143"];
621 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 860144"];
622 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 860145"];
623 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 860146"];
624 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 860147"];
625 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 860148"];
626 [label="this.SyntaxTrees 860149"];
627 [label="this.OrdinalMap 860150"];
628 [label="this.LoadDirectiveMap 860151"];
629 [label="this.LoadedSyntaxTreeMap 860152"];
630 [label="this.RootNamespaces 860153"];
631 [label="this.DeclarationTable 860154"];
632 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 860155"];
633 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 860156"];
634 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 860157"];
635 [label="return _lazyState; 860158"];
636 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 860159"];
637 [label="var trees = compilation.SyntaxTrees; 860160"];
638 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 860161"];
639 [label="var options = (CSharpParseOptions)trees[0].Options; 860162"];
640 [label="var options = (CSharpParseOptions)trees[0].Options; 860163"];
641 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 860164"];
642 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 860165"];
643 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 860166"];
644 [label="return compilation; 860167"];
645 [label="using var output = new MemoryStream(); 860168"];
646 [label="using var pdbStream = new MemoryStream(); 860169"];
647 [label="using var xmlDocumentationStream = new MemoryStream(); 860170"];
648 [label="using var win32ResourcesStream = compilation.CreateDefaultWin32Resources(versionResource: true, noManifest: false, manifestContents: null, iconInIcoFormat: null); 860171"];
649 [label="using var win32ResourcesStream = compilation.CreateDefaultWin32Resources(versionResource: true, noManifest: false, manifestContents: null, iconInIcoFormat: null); 860172"];
650 [label="param AppendDefaultVersionResource(Stream resourceStream) 860173"];
651 [label="param AppendDefaultVersionResource(this) 860174"];
652 [label="SourceAssembly 860175"];
653 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 860176"];
654 [label="GetBoundReferenceManager() 860177"];
655 [label="param GetBoundReferenceManager(this) 860178"];
656 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860179"];
657 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 860180"];
658 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 860181"];
659 [label="get { return this.Declarations.ReferenceDirectives; } 860182"];
660 [label="this.Declarations 860183"];
661 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 860184"];
662 [label="_syntaxAndDeclarations.GetLazyState() 860185"];
663 [label="param GetLazyState(this) 860186"];
664 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 860187"];
665 [label="return this.Declarations.ReferenceDirectives; 860188"];
666 [label="get { return _options; } 860189"];
667 [label="return _options; 860190"];
668 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 860191"];
669 [label="_syntaxAndDeclarations.GetLazyState() 860192"];
670 [label="Debug.Assert(_lazyAssemblySymbol is object); 860193"];
671 [label="return _referenceManager; 860194"];
672 [label="GetBoundReferenceManager(); 860195"];
673 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860196"];
674 [label="return _lazyAssemblySymbol; 860197"];
675 [label="var sourceAssembly = SourceAssembly; 860198"];
676 [label="string fileVersion = sourceAssembly.FileVersion ?? sourceAssembly.Identity.Version.ToString(); 860199"];
677 [label="sourceAssembly.FileVersion 860200"];
678 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 860201"];
679 [label="Declarations 860202"];
680 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 860203"];
681 [label="_syntaxAndDeclarations.GetLazyState() 860204"];
682 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860205"];
683 [label="return Declarations.GetMergedRoot(this); 860206"];
684 [label="return Declarations.GetMergedRoot(this); 860207"];
685 [label="return Declarations.GetMergedRoot(this); 860208"];
686 [label="_syntaxAndDeclarations.GetLazyState() 860209"];
687 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860210"];
688 [label="get\n            {\n                return _options;\n            } 860211"];
689 [label="sourceAssembly.Identity 860212"];
690 [label="get\n            {\n                return _options;\n            } 860213"];
691 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860214"];
692 [label="this.Options 860215"];
693 [label="get\n            {\n                return _options;\n            } 860216"];
694 [label="return _options; 860217"];
695 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860218"];
696 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860219"];
697 [label="this.SourceModule 860220"];
698 [label="get\n            {\n                return Assembly.Modules[0];\n            } 860221"];
699 [label="Assembly 860222"];
700 [label="get\n            {\n                return SourceAssembly;\n            } 860223"];
701 [label="SourceAssembly 860224"];
702 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 860225"];
703 [label="GetBoundReferenceManager() 860226"];
704 [label="param GetBoundReferenceManager(this) 860227"];
705 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860228"];
706 [label="return _referenceManager; 860229"];
707 [label="GetBoundReferenceManager(); 860230"];
708 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860231"];
709 [label="return SourceAssembly; 860232"];
710 [label="return Assembly.Modules[0]; 860233"];
711 [label="return Assembly.Modules[0]; 860234"];
712 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860235"];
713 [label="this.SourceModule 860236"];
714 [label="get\n            {\n                return Assembly.Modules[0];\n            } 860237"];
715 [label="Assembly 860238"];
716 [label="get\n            {\n                return SourceAssembly;\n            } 860239"];
717 [label="SourceAssembly 860240"];
718 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 860241"];
719 [label="GetBoundReferenceManager() 860242"];
720 [label="param GetBoundReferenceManager(this) 860243"];
721 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860244"];
722 [label="return _referenceManager; 860245"];
723 [label="GetBoundReferenceManager(); 860246"];
724 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860247"];
725 [label="return Assembly.Modules[0]; 860248"];
726 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860249"];
727 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860250"];
728 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860251"];
729 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860252"];
730 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860253"];
731 [label="Win32ResourceConversions.AppendVersionToResourceStream(resourceStream,\n                !this.Options.OutputKind.IsApplication(),\n                fileVersion: fileVersion,\n                originalFileName: this.SourceModule.Name,\n                internalName: this.SourceModule.Name,\n                productVersion: sourceAssembly.InformationalVersion ?? fileVersion,\n                fileDescription: sourceAssembly.Title ?? ' ', //alink would give this a blank if nothing was supplied.\n                assemblyVersion: sourceAssembly.Identity.Version,\n                legalCopyright: sourceAssembly.Copyright ?? ' ', //alink would give this a blank if nothing was supplied.\n                legalTrademarks: sourceAssembly.Trademark,\n                productName: sourceAssembly.Product,\n                comments: sourceAssembly.Description,\n                companyName: sourceAssembly.Company); 860254"];
732 [label="get { return _options; } 860255"];
733 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860256"];
734 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860257"];
735 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860258"];
736 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860259"];
737 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860260"];
738 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860261"];
739 [label="get { return _syntaxAndDeclarations.MessageProvider; } 860262"];
740 [label="return _syntaxAndDeclarations.MessageProvider; 860263"];
741 [label="param CreateModuleBuilder(EmitOptions emitOptions) 860264"];
742 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 860265"];
743 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 860266"];
744 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 860267"];
745 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 860268"];
746 [label="param CreateModuleBuilder(CompilationTestData? testData) 860269"];
747 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 860270"];
748 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 860271"];
749 [label="param CreateModuleBuilder(this) 860272"];
750 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 860273"];
751 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 860274"];
752 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 860275"];
753 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 860276"];
754 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 860277"];
755 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 860278"];
756 [label="param GetRuntimeMetadataVersion(this) 860279"];
757 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 860280"];
758 [label="GetRuntimeMetadataVersion(emitOptions) 860281"];
759 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 860282"];
760 [label="param GetRuntimeMetadataVersion(this) 860283"];
761 [label="Assembly 860284"];
762 [label="get\n            {\n                return SourceAssembly;\n            } 860285"];
763 [label="SourceAssembly 860286"];
764 [label="GetBoundReferenceManager() 860287"];
765 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860288"];
766 [label="return _referenceManager; 860289"];
767 [label="GetBoundReferenceManager(); 860290"];
768 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860291"];
769 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 860292"];
770 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 860293"];
771 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 860294"];
772 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 860295"];
773 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 860296"];
774 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 860297"];
775 [label="return runtimeMDVersion; 860298"];
776 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 860299"];
777 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 860300"];
778 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 860301"];
779 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 860302"];
780 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 860303"];
781 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 860304"];
782 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 860305"];
783 [label="get { return SourceAssembly.IsDelaySigned; } 860306"];
784 [label="SourceAssembly 860307"];
785 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 860308"];
786 [label="GetBoundReferenceManager() 860309"];
787 [label="return _referenceManager; 860310"];
788 [label="GetBoundReferenceManager(); 860311"];
789 [label="return SourceAssembly.IsDelaySigned; 860312"];
790 [label="SourceAssembly.IsDelaySigned 860313"];
791 [label="get\n            {\n                return _options;\n            } 860314"];
792 [label="get { return SourceAssembly.StrongNameKeys; } 860315"];
793 [label="SourceAssembly 860316"];
794 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 860317"];
795 [label="GetBoundReferenceManager() 860318"];
796 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860319"];
797 [label="return _referenceManager; 860320"];
798 [label="GetBoundReferenceManager(); 860321"];
799 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860322"];
800 [label="return SourceAssembly.StrongNameKeys; 860323"];
801 [label="=> 0x30 860324"];
802 [label="0x30 860325"];
803 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 860326"];
804 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 860327"];
805 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 860328"];
806 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 860329"];
807 [label="PEModuleBuilder moduleBeingBuilt; 860330"];
808 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 860331"];
809 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 860332"];
810 [label="_options.OutputKind.IsValid() 860333"];
811 [label="_options.OutputKind 860334"];
812 [label="SourceAssembly 860335"];
813 [label="return _referenceManager; 860336"];
814 [label="GetBoundReferenceManager(); 860337"];
815 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860338"];
816 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 860339"];
817 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 860340"];
818 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 860341"];
819 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 860342"];
820 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 860343"];
821 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 860344"];
822 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 860345"];
823 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 860346"];
824 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 860347"];
825 [label="param PEAssemblyBuilder(OutputKind outputKind) 860348"];
826 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 860349"];
827 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 860350"];
828 [label="param PEAssemblyBuilder(this) 860351"];
829 [label="sourceAssembly 860352"];
830 [label="emitOptions 860353"];
831 [label="outputKind 860354"];
832 [label="serializationProperties 860355"];
833 [label="manifestResources 860356"];
834 [label="ImmutableArray<NamedTypeSymbol>.Empty 860357"];
835 [label="param PEAssemblyBuilder(this) 860358"];
836 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 860359"];
837 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 860360"];
838 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 860361"];
839 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 860362"];
840 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 860363"];
841 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 860364"];
842 [label="param PEAssemblyBuilderBase(this) 860365"];
843 [label="0 860366"];
844 [label="sourceAssembly.Modules[0] 860367"];
845 [label="emitOptions 860368"];
846 [label="outputKind 860369"];
847 [label="serializationProperties 860370"];
848 [label="manifestResources 860371"];
849 [label="param PEAssemblyBuilderBase(this) 860372"];
850 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 860373"];
851 [label="param PEModuleBuilder(EmitOptions emitOptions) 860374"];
852 [label="param PEModuleBuilder(OutputKind outputKind) 860375"];
853 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 860376"];
854 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 860377"];
855 [label="param PEModuleBuilder(this) 860378"];
856 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 860379"];
857 [label="sourceModule 860380"];
858 [label="serializationProperties 860381"];
859 [label="manifestResources 860382"];
860 [label="outputKind 860383"];
861 [label="emitOptions 860384"];
862 [label="new ModuleCompilationState() 860385"];
863 [label="param ModuleCompilationState(this) 860386"];
864 [label="param PEModuleBuilder(this) 860387"];
865 [label="param PEModuleBuilder(this) 860388"];
866 [label="get\n            {\n                return true;\n            } 860389"];
867 [label="return true; 860390"];
868 [label="param PEModuleBuilder(this) 860391"];
869 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 860392"];
870 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 860393"];
871 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 860394"];
872 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 860395"];
873 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 860396"];
874 [label="new ConcurrentSet<TypeSymbol>() 860397"];
875 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 860398"];
876 [label="_embeddedTypesManagerOpt 860399"];
877 [label="_metadataName 860400"];
878 [label="_fixedImplementationTypes 860401"];
879 [label="_needsGeneratedAttributes 860402"];
880 [label="_needsGeneratedAttributes_IsFrozen 860403"];
881 [label="var specifiedName = sourceModule.MetadataName; 860404"];
882 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 860405"];
883 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 860406"];
884 [label="_metadataName 860407"];
885 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 860408"];
886 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 860409"];
887 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 860410"];
888 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 860411"];
889 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 860412"];
890 [label="_sourceAssembly 860413"];
891 [label="_lazyEmbeddedAttribute 860414"];
892 [label="_lazyIsReadOnlyAttribute 860415"];
893 [label="_lazyIsByRefLikeAttribute 860416"];
894 [label="_lazyIsUnmanagedAttribute 860417"];
895 [label="_lazyNullableAttribute 860418"];
896 [label="_lazyNullableContextAttribute 860419"];
897 [label="_lazyNullablePublicOnlyAttribute 860420"];
898 [label="_lazyNativeIntegerAttribute 860421"];
899 [label="_metadataName 860422"];
900 [label="Debug.Assert(sourceAssembly is object); 860423"];
901 [label="_sourceAssembly 860424"];
902 [label="_additionalTypes = additionalTypes.NullToEmpty(); 860425"];
903 [label="_additionalTypes 860426"];
904 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 860427"];
905 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 860428"];
906 [label="(emitOptions.OutputNameOverride == null) 860429"];
907 [label="sourceAssembly.MetadataName 860430"];
908 [label="_metadataName 860431"];
909 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 860432"];
910 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 860433"];
911 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 860434"];
912 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 860435"];
913 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 860436"];
914 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 860437"];
915 [label="moduleBeingBuilt.SourceLinkStreamOpt 860438"];
916 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 860439"];
917 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 860440"];
918 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 860441"];
919 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 860442"];
920 [label="return moduleBeingBuilt; 860443"];
921 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 860444"];
922 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 860445"];
923 [label="param CompileMethods(bool emittingPdb) 860446"];
924 [label="param CompileMethods(bool emitMetadataOnly) 860447"];
925 [label="param CompileMethods(bool emitTestCoverageData) 860448"];
926 [label="param CompileMethods(DiagnosticBag diagnostics) 860449"];
927 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 860450"];
928 [label="param CompileMethods(CancellationToken cancellationToken) 860451"];
929 [label="param CompileMethods(this) 860452"];
930 [label="PooledHashSet<int>? excludeDiagnostics = null; 860453"];
931 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 860454"];
932 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 860455"];
933 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 860456"];
934 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 860457"];
935 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 860458"];
936 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 860459"];
937 [label="param GetDiagnostics(CompilationStage stage) 860460"];
938 [label="param GetDiagnostics(bool includeEarlierStages) 860461"];
939 [label="param GetDiagnostics(CancellationToken cancellationToken) 860462"];
940 [label="param GetDiagnostics(this) 860463"];
941 [label="var diagnostics = DiagnosticBag.GetInstance(); 860464"];
942 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 860465"];
943 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 860466"];
944 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 860467"];
945 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 860468"];
946 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 860469"];
947 [label="param GetDiagnostics(CompilationStage stage) 860470"];
948 [label="param GetDiagnostics(bool includeEarlierStages) 860471"];
949 [label="param GetDiagnostics(DiagnosticBag diagnostics) 860472"];
950 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 860473"];
951 [label="param GetDiagnostics(this) 860474"];
952 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 860475"];
953 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 860476"];
954 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 860477"];
955 [label="this.SyntaxTrees 860478"];
956 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 860479"];
957 [label="_syntaxAndDeclarations.GetLazyState() 860480"];
958 [label="param GetLazyState(this) 860481"];
959 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860482"];
960 [label="var syntaxTrees = this.SyntaxTrees; 860483"];
961 [label="this.Options 860484"];
962 [label="get\n            {\n                return _options;\n            } 860485"];
963 [label="return _options; 860486"];
964 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 860487"];
965 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 860488"];
966 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 860489"];
967 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 860490"];
968 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 860491"];
969 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 860492"];
970 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 860493"];
971 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 860494"];
972 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 860495"];
973 [label="ImmutableArray<LoadDirective> loadDirectives; 860496"];
974 [label="loadDirectives 860497"];
975 [label="syntaxAndDeclarations.GetLazyState() 860498"];
976 [label="param GetLazyState(this) 860499"];
977 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 860500"];
978 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 860501"];
979 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 860502"];
980 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 860503"];
981 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 860504"];
982 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 860505"];
983 [label="cancellationToken.ThrowIfCancellationRequested(); 860506"];
984 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 860507"];
985 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 860508"];
986 [label="CheckAssemblyName(builder); 860509"];
987 [label="CheckAssemblyName(builder); 860510"];
988 [label="CheckAssemblyName(builder); 860511"];
989 [label="Options 860512"];
990 [label="get\n            {\n                return _options;\n            } 860513"];
991 [label="return _options; 860514"];
992 [label="builder.AddRange(Options.Errors); 860515"];
993 [label="Options 860516"];
994 [label="get\n            {\n                return _options;\n            } 860517"];
995 [label="return _options; 860518"];
996 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 860519"];
997 [label="cancellationToken.ThrowIfCancellationRequested(); 860520"];
998 [label="GetBoundReferenceManager() 860521"];
999 [label="param GetBoundReferenceManager(this) 860522"];
1000 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860523"];
1001 [label="return _referenceManager; 860524"];
1002 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 860525"];
1003 [label="cancellationToken.ThrowIfCancellationRequested(); 860526"];
1004 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 860527"];
1005 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 860528"];
1006 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 860529"];
1007 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 860530"];
1008 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 860531"];
1009 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 860532"];
1010 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 860533"];
1011 [label="param GetSourceDeclarationDiagnostics(this) 860534"];
1012 [label="GlobalImports 860535"];
1013 [label="=> _globalImports.Value 860536"];
1014 [label="_globalImports.Value 860537"];
1015 [label="_globalImports.Value 860538"];
1016 [label="=> Imports.FromGlobalUsings(this) 860539"];
1017 [label="this 860540"];
1018 [label="Imports.FromGlobalUsings(this) 860541"];
1019 [label="Imports.FromGlobalUsings(this) 860542"];
1020 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 860543"];
1021 [label="ScriptCompilationInfo 860544"];
1022 [label="ScriptCompilationInfo?.PreviousScriptCompilation 860545"];
1023 [label="GlobalImports.Complete(cancellationToken); 860546"];
1024 [label="GlobalImports.Complete(cancellationToken); 860547"];
1025 [label="GlobalImports.Complete(cancellationToken); 860548"];
1026 [label="SourceLocation? location = null; 860549"];
1027 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 860550"];
1028 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 860551"];
1029 [label="Assembly 860552"];
1030 [label="get\n            {\n                return SourceAssembly;\n            } 860553"];
1031 [label="SourceAssembly 860554"];
1032 [label="GetBoundReferenceManager() 860555"];
1033 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860556"];
1034 [label="return _referenceManager; 860557"];
1035 [label="GetBoundReferenceManager(); 860558"];
1036 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860559"];
1037 [label="Assembly.ForceComplete(location, cancellationToken); 860560"];
1038 [label="Assembly.ForceComplete(location, cancellationToken); 860561"];
1039 [label="Assembly.ForceComplete(location, cancellationToken); 860562"];
1040 [label="Assembly.ForceComplete(location, cancellationToken); 860563"];
1041 [label="Assembly.ForceComplete(location, cancellationToken); 860564"];
1042 [label="SourceAssembly 860565"];
1043 [label="GetBoundReferenceManager() 860566"];
1044 [label="GetBoundReferenceManager(); 860567"];
1045 [label="Declarations 860568"];
1046 [label="_syntaxAndDeclarations.GetLazyState() 860569"];
1047 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860570"];
1048 [label="return Declarations.GetMergedRoot(this); 860571"];
1049 [label="_syntaxAndDeclarations.GetLazyState() 860572"];
1050 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860573"];
1051 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 860574"];
1052 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 860575"];
1053 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 860576"];
1054 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 860577"];
1055 [label="var diagnostics = new DiagnosticBag(); 860578"];
1056 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 860579"];
1057 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 860580"];
1058 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 860581"];
1059 [label="return _lazyDeclarationDiagnostics; 860582"];
1060 [label="param SymbolDeclaredEvent(Symbol symbol) 860583"];
1061 [label="param SymbolDeclaredEvent(this) 860584"];
1062 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 860585"];
1063 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 860586"];
1064 [label="param GetUnaliasedReferencedAssemblies(this) 860587"];
1065 [label="GetBoundReferenceManager() 860588"];
1066 [label="param GetBoundReferenceManager(this) 860589"];
1067 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860590"];
1068 [label="return _referenceManager; 860591"];
1069 [label="var referenceManager = GetBoundReferenceManager(); 860592"];
1070 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 860593"];
1071 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 860594"];
1072 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 860595"];
1073 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 860596"];
1074 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 860597"];
1075 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 860598"];
1076 [label="return _additionalCodegenWarnings; 860599"];
1077 [label="GetBoundReferenceManager(); 860600"];
1078 [label="param GetSpecialType(SpecialType specialType) 860601"];
1079 [label="param GetSpecialType(this) 860602"];
1080 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 860603"];
1081 [label="NamedTypeSymbol result; 860604"];
1082 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 860605"];
1083 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 860606"];
1084 [label="Assembly 860607"];
1085 [label="GetBoundReferenceManager(); 860608"];
1086 [label="result = Assembly.GetSpecialType(specialType); 860609"];
1087 [label="result = Assembly.GetSpecialType(specialType); 860610"];
1088 [label="Debug.Assert(result.SpecialType == specialType); 860611"];
1089 [label="return result; 860612"];
1090 [label="param GetBinder(CSharpSyntaxNode syntax) 860613"];
1091 [label="param GetBinder(this) 860614"];
1092 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 860615"];
1093 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 860616"];
1094 [label="GetBinderFactory(syntax.SyntaxTree) 860617"];
1095 [label="param GetBinderFactory(SyntaxTree syntaxTree) 860618"];
1096 [label="param GetBinderFactory(bool ignoreAccessibility = false) 860619"];
1097 [label="param GetBinderFactory(this) 860620"];
1098 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 860621"];
1099 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 860622"];
1100 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 860623"];
1101 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 860624"];
1102 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 860625"];
1103 [label="param GetBinderFactory(SyntaxTree syntaxTree) 860626"];
1104 [label="param GetBinderFactory(bool ignoreAccessibility) 860627"];
1105 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 860628"];
1106 [label="param GetBinderFactory(this) 860629"];
1107 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 860630"];
1108 [label="ignoreAccessibility 860631"];
1109 [label="_binderFactories 860632"];
1110 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 860633"];
1111 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 860634"];
1112 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 860635"];
1113 [label="GetSyntaxTreeOrdinal(syntaxTree) 860636"];
1114 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 860637"];
1115 [label="param GetSyntaxTreeOrdinal(this) 860638"];
1116 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 860639"];
1117 [label="this.ContainsSyntaxTree(tree) 860640"];
1118 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 860641"];
1119 [label="param ContainsSyntaxTree(this) 860642"];
1120 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860643"];
1121 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860644"];
1122 [label="_syntaxAndDeclarations.GetLazyState() 860645"];
1123 [label="param GetLazyState(this) 860646"];
1124 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860647"];
1125 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860648"];
1126 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860649"];
1127 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860650"];
1128 [label="_syntaxAndDeclarations.GetLazyState() 860651"];
1129 [label="param GetLazyState(this) 860652"];
1130 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860653"];
1131 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 860654"];
1132 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 860655"];
1133 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 860656"];
1134 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 860657"];
1135 [label="this.SyntaxTrees 860658"];
1136 [label="param GetLazyState(this) 860659"];
1137 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 860660"];
1138 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 860661"];
1139 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 860662"];
1140 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 860663"];
1141 [label="BinderFactory? previousFactory; 860664"];
1142 [label="var previousWeakReference = binderFactories[treeNum]; 860665"];
1143 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 860666"];
1144 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 860667"];
1145 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 860668"];
1146 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 860669"];
1147 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 860670"];
1148 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 860671"];
1149 [label="param AddNewFactory(SyntaxTree syntaxTree) 860672"];
1150 [label="param AddNewFactory(bool ignoreAccessibility) 860673"];
1151 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 860674"];
1152 [label="param AddNewFactory(this) 860675"];
1153 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860676"];
1154 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860677"];
1155 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860678"];
1156 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860679"];
1157 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860680"];
1158 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 860681"];
1159 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 860682"];
1160 [label="BinderFactory? previousFactory; 860683"];
1161 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 860684"];
1162 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 860685"];
1163 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 860686"];
1164 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 860687"];
1165 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 860688"];
1166 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 860689"];
1167 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 860690"];
1168 [label="return newFactory; 860691"];
1169 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 860692"];
1170 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 860693"];
1171 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 860694"];
1172 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 860695"];
1173 [label="GetAllUnaliasedModules(modules); 860696"];
1174 [label="GetAllUnaliasedModules(modules) 860697"];
1175 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 860698"];
1176 [label="param GetAllUnaliasedModules(this) 860699"];
1177 [label="Assembly 860700"];
1178 [label="get\n            {\n                return SourceAssembly;\n            } 860701"];
1179 [label="GetBoundReferenceManager(); 860702"];
1180 [label="modules.AddRange(Assembly.Modules); 860703"];
1181 [label="modules.AddRange(Assembly.Modules); 860704"];
1182 [label="GetBoundReferenceManager() 860705"];
1183 [label="param GetBoundReferenceManager(this) 860706"];
1184 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860707"];
1185 [label="return _referenceManager; 860708"];
1186 [label="var referenceManager = GetBoundReferenceManager(); 860709"];
1187 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 860710"];
1188 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 860711"];
1189 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 860712"];
1190 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 860713"];
1191 [label="GetAllUnaliasedModules(modules); 860714"];
1192 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 860715"];
1193 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 860716"];
1194 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 860717"];
1195 [label="modules.Free(); 860718"];
1196 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 860719"];
1197 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 860720"];
1198 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 860721"];
1199 [label="return _lazyGlobalNamespace; 860722"];
1200 [label="Assembly 860723"];
1201 [label="SourceAssembly 860724"];
1202 [label="GetBoundReferenceManager() 860725"];
1203 [label="GetBoundReferenceManager(); 860726"];
1204 [label="return Assembly.Modules[0]; 860727"];
1205 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 860728"];
1206 [label="param IsNullableAnalysisEnabledIn(this) 860729"];
1207 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 860730"];
1208 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 860731"];
1209 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 860732"];
1210 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 860733"];
1211 [label="param IsNullableAnalysisEnabledIn(this) 860734"];
1212 [label="GetNullableAnalysisValue() 860735"];
1213 [label="param GetNullableAnalysisValue(this) 860736"];
1214 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 860737"];
1215 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 860738"];
1216 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 860739"];
1217 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 860740"];
1218 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 860741"];
1219 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 860742"];
1220 [label="Options 860743"];
1221 [label="get\n            {\n                return _options;\n            } 860744"];
1222 [label="return _options; 860745"];
1223 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 860746"];
1224 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 860747"];
1225 [label="param GetBinderFactory(SyntaxTree syntaxTree) 860748"];
1226 [label="param GetBinderFactory(bool ignoreAccessibility = false) 860749"];
1227 [label="param GetBinderFactory(this) 860750"];
1228 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 860751"];
1229 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 860752"];
1230 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 860753"];
1231 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 860754"];
1232 [label="param GetBinderFactory(SyntaxTree syntaxTree) 860755"];
1233 [label="param GetBinderFactory(bool ignoreAccessibility) 860756"];
1234 [label="param GetBinderFactory(this) 860757"];
1235 [label="ignoreAccessibility 860758"];
1236 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 860759"];
1237 [label="GetSyntaxTreeOrdinal(syntaxTree) 860760"];
1238 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 860761"];
1239 [label="param GetSyntaxTreeOrdinal(this) 860762"];
1240 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 860763"];
1241 [label="this.ContainsSyntaxTree(tree) 860764"];
1242 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 860765"];
1243 [label="param ContainsSyntaxTree(this) 860766"];
1244 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860767"];
1245 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860768"];
1246 [label="_syntaxAndDeclarations.GetLazyState() 860769"];
1247 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860770"];
1248 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 860771"];
1249 [label="_syntaxAndDeclarations.GetLazyState() 860772"];
1250 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860773"];
1251 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 860774"];
1252 [label="BinderFactory? previousFactory; 860775"];
1253 [label="var previousWeakReference = binderFactories[treeNum]; 860776"];
1254 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 860777"];
1255 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 860778"];
1256 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 860779"];
1257 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 860780"];
1258 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 860781"];
1259 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 860782"];
1260 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 860783"];
1261 [label="param AddNewFactory(SyntaxTree syntaxTree) 860784"];
1262 [label="param AddNewFactory(bool ignoreAccessibility) 860785"];
1263 [label="param AddNewFactory(this) 860786"];
1264 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860787"];
1265 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860788"];
1266 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860789"];
1267 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 860790"];
1268 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 860791"];
1269 [label="BinderFactory? previousFactory; 860792"];
1270 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 860793"];
1271 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 860794"];
1272 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 860795"];
1273 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 860796"];
1274 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 860797"];
1275 [label="Assembly 860798"];
1276 [label="SourceAssembly 860799"];
1277 [label="GetBoundReferenceManager() 860800"];
1278 [label="GetBoundReferenceManager(); 860801"];
1279 [label="return Assembly.Modules[0]; 860802"];
1280 [label="GetBoundReferenceManager(); 860803"];
1281 [label="Debug.Assert(result.SpecialType == specialType); 860804"];
1282 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 860805"];
1283 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 860806"];
1284 [label="param IsFeatureEnabled(MessageID feature) 860807"];
1285 [label="compilation.SyntaxTrees 860808"];
1286 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 860809"];
1287 [label="_syntaxAndDeclarations.GetLazyState() 860810"];
1288 [label="param GetLazyState(this) 860811"];
1289 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 860812"];
1290 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 860813"];
1291 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 860814"];
1292 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 860815"];
1293 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 860816"];
1294 [label="param ShouldEmitNullableAttributes(Symbol symbol) 860817"];
1295 [label="param ShouldEmitNullableAttributes(this) 860818"];
1296 [label="RoslynDebug.Assert(symbol is object); 860819"];
1297 [label="RoslynDebug.Assert(symbol is object); 860820"];
1298 [label="Debug.Assert(symbol.IsDefinition); 860821"];
1299 [label="SourceModule 860822"];
1300 [label="get\n            {\n                return Assembly.Modules[0];\n            } 860823"];
1301 [label="Assembly 860824"];
1302 [label="SourceAssembly 860825"];
1303 [label="GetBoundReferenceManager() 860826"];
1304 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860827"];
1305 [label="return _referenceManager; 860828"];
1306 [label="GetBoundReferenceManager(); 860829"];
1307 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860830"];
1308 [label="return Assembly.Modules[0]; 860831"];
1309 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 860832"];
1310 [label="EmitNullablePublicOnly 860833"];
1311 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 860834"];
1312 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 860835"];
1313 [label="SyntaxTrees 860836"];
1314 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 860837"];
1315 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 860838"];
1316 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 860839"];
1317 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 860840"];
1318 [label="_lazyEmitNullablePublicOnly 860841"];
1319 [label="return _lazyEmitNullablePublicOnly.Value(); 860842"];
1320 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 860843"];
1321 [label="return true; 860844"];
1322 [label="Debug.Assert(symbol.IsDefinition); 860845"];
1323 [label="GetBoundReferenceManager(); 860846"];
1324 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 860847"];
1325 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 860848"];
1326 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 860849"];
1327 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 860850"];
1328 [label="_declarationDiagnosticsFrozen = true; 860851"];
1329 [label="_declarationDiagnosticsFrozen 860852"];
1330 [label="_needsGeneratedAttributes_IsFrozen = true; 860853"];
1331 [label="_needsGeneratedAttributes_IsFrozen 860854"];
1332 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 860855"];
1333 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 860856"];
1334 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 860857"];
1335 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 860858"];
1336 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 860859"];
1337 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 860860"];
1338 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 860861"];
1339 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 860862"];
1340 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 860863"];
1341 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 860864"];
1342 [label="param GetClsComplianceDiagnostics(this) 860865"];
1343 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 860866"];
1344 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 860867"];
1345 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 860868"];
1346 [label="var builder = DiagnosticBag.GetInstance(); 860869"];
1347 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 860870"];
1348 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 860871"];
1349 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 860872"];
1350 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 860873"];
1351 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 860874"];
1352 [label="param CheckCompliance(CSharpCompilation compilation) 860875"];
1353 [label="param CheckCompliance(DiagnosticBag diagnostics) 860876"];
1354 [label="param CheckCompliance(CancellationToken cancellationToken) 860877"];
1355 [label="param CheckCompliance(SyntaxTree filterTree = null) 860878"];
1356 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 860879"];
1357 [label="var queue = new ConcurrentQueue<Diagnostic>(); 860880"];
1358 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 860881"];
1359 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 860882"];
1360 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 860883"];
1361 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 860884"];
1362 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 860885"];
1363 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 860886"];
1364 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 860887"];
1365 [label="param ClsComplianceChecker(CSharpCompilation compilation) 860888"];
1366 [label="param ClsComplianceChecker(SyntaxTree filterTree) 860889"];
1367 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 860890"];
1368 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 860891"];
1369 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 860892"];
1370 [label="param ClsComplianceChecker(this) 860893"];
1371 [label="param ClsComplianceChecker(this) 860894"];
1372 [label="_compilation 860895"];
1373 [label="_filterTree 860896"];
1374 [label="_filterSpanWithinTree 860897"];
1375 [label="_diagnostics 860898"];
1376 [label="_declaredOrInheritedCompliance 860899"];
1377 [label="_compilerTasks 860900"];
1378 [label="_compilation 860901"];
1379 [label="_filterTree 860902"];
1380 [label="_filterSpanWithinTree 860903"];
1381 [label="_diagnostics 860904"];
1382 [label="_cancellationToken 860905"];
1383 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 860906"];
1384 [label="_declaredOrInheritedCompliance 860907"];
1385 [label="ConcurrentAnalysis 860908"];
1386 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 860909"];
1387 [label="null 860910"];
1388 [label="_filterTree == null 860911"];
1389 [label="_compilation.Options 860912"];
1390 [label="get\n            {\n                return _options;\n            } 860913"];
1391 [label="return _options; 860914"];
1392 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 860915"];
1393 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 860916"];
1394 [label="_compilerTasks = new ConcurrentStack<Task>(); 860917"];
1395 [label="_compilerTasks 860918"];
1396 [label="compilation.Assembly 860919"];
1397 [label="get\n            {\n                return SourceAssembly;\n            } 860920"];
1398 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 860921"];
1399 [label="return _referenceManager; 860922"];
1400 [label="GetBoundReferenceManager(); 860923"];
1401 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 860924"];
1402 [label="checker.Visit(compilation.Assembly); 860925"];
1403 [label="checker.Visit(compilation.Assembly); 860926"];
1404 [label="checker.Visit(compilation.Assembly); 860927"];
1405 [label="param VisitAssembly(AssemblySymbol symbol) 860928"];
1406 [label="param VisitAssembly(this) 860929"];
1407 [label="_cancellationToken.ThrowIfCancellationRequested(); 860930"];
1408 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 860931"];
1409 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 860932"];
1410 [label="GetDeclaredOrInheritedCompliance(symbol) 860933"];
1411 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 860934"];
1412 [label="param GetDeclaredOrInheritedCompliance(this) 860935"];
1413 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 860936"];
1414 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 860937"];
1415 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 860938"];
1416 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 860939"];
1417 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 860940"];
1418 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 860941"];
1419 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 860942"];
1420 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 860943"];
1421 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 860944"];
1422 [label="Compliance compliance; 860945"];
1423 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 860946"];
1424 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 860947"];
1425 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 860948"];
1426 [label="Location ignoredLocation; 860949"];
1427 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 860950"];
1428 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 860951"];
1429 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 860952"];
1430 [label="param GetDeclaredCompliance(Symbol symbol) 860953"];
1431 [label="param GetDeclaredCompliance(out Location attributeLocation) 860954"];
1432 [label="param GetDeclaredCompliance(this) 860955"];
1433 [label="attributeLocation = null; 860956"];
1434 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 860957"];
1435 [label="return null; 860958"];
1436 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 860959"];
1437 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 860960"];
1438 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 860961"];
1439 [label="compliance = Compliance.ImpliedFalse; 860962"];
1440 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 860963"];
1441 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 860964"];
1442 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 860965"];
1443 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 860966"];
1444 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 860967"];
1445 [label="IsTrue(assemblyCompliance) 860968"];
1446 [label="param IsTrue(Compliance compliance) 860969"];
1447 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 860970"];
1448 [label="return false; 860971"];
1449 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 860972"];
1450 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 860973"];
1451 [label="ModuleSymbol module = symbol.Modules[i]; 860974"];
1452 [label="Location attributeLocation; 860975"];
1453 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 860976"];
1454 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 860977"];
1455 [label="GetDeclaredCompliance(module, out attributeLocation) 860978"];
1456 [label="param GetDeclaredCompliance(Symbol symbol) 860979"];
1457 [label="param GetDeclaredCompliance(out Location attributeLocation) 860980"];
1458 [label="param GetDeclaredCompliance(this) 860981"];
1459 [label="attributeLocation = null; 860982"];
1460 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 860983"];
1461 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 860984"];
1462 [label="i == 0 860985"];
1463 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 860986"];
1464 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 860987"];
1465 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 860988"];
1466 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 860989"];
1467 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 860990"];
1468 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 860991"];
1469 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 860992"];
1470 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 860993"];
1471 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 860994"];
1472 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 860995"];
1473 [label="GetDeclaredOrInheritedCompliance(sourceModule) 860996"];
1474 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 860997"];
1475 [label="param GetDeclaredOrInheritedCompliance(this) 860998"];
1476 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 860999"];
1477 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861000"];
1478 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 861001"];
1479 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 861002"];
1480 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 861003"];
1481 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 861004"];
1482 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 861005"];
1483 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 861006"];
1484 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 861007"];
1485 [label="Compliance compliance; 861008"];
1486 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 861009"];
1487 [label="Location ignoredLocation; 861010"];
1488 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 861011"];
1489 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 861012"];
1490 [label="param GetDeclaredCompliance(out Location attributeLocation) 861013"];
1491 [label="param GetDeclaredCompliance(this) 861014"];
1492 [label="attributeLocation = null; 861015"];
1493 [label="return null; 861016"];
1494 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 861017"];
1495 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 861018"];
1496 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 861019"];
1497 [label="GetInheritedCompliance(symbol) 861020"];
1498 [label="param GetInheritedCompliance(Symbol symbol) 861021"];
1499 [label="param GetInheritedCompliance(this) 861022"];
1500 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 861023"];
1501 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 861024"];
1502 [label="System.Diagnostics.Debug.Assert((object)containing != null); 861025"];
1503 [label="System.Diagnostics.Debug.Assert((object)containing != null); 861026"];
1504 [label="return GetDeclaredOrInheritedCompliance(containing); 861027"];
1505 [label="GetDeclaredOrInheritedCompliance(containing) 861028"];
1506 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 861029"];
1507 [label="param GetDeclaredOrInheritedCompliance(this) 861030"];
1508 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861031"];
1509 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861032"];
1510 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 861033"];
1511 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 861034"];
1512 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 861035"];
1513 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 861036"];
1514 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 861037"];
1515 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 861038"];
1516 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 861039"];
1517 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 861040"];
1518 [label="return compliance; 861041"];
1519 [label="IsTrue(GetInheritedCompliance(symbol)) 861042"];
1520 [label="param IsTrue(Compliance compliance) 861043"];
1521 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 861044"];
1522 [label="return false; 861045"];
1523 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 861046"];
1524 [label="param IsTrue(Compliance compliance) 861047"];
1525 [label="Visit(symbol.GlobalNamespace); 861048"];
1526 [label="Visit(symbol.GlobalNamespace); 861049"];
1527 [label="param VisitNamespace(NamespaceSymbol symbol) 861050"];
1528 [label="param VisitNamespace(this) 861051"];
1529 [label="_cancellationToken.ThrowIfCancellationRequested(); 861052"];
1530 [label="if (DoNotVisit(symbol)) return; 861053"];
1531 [label="DoNotVisit(symbol) 861054"];
1532 [label="param DoNotVisit(Symbol symbol) 861055"];
1533 [label="param DoNotVisit(this) 861056"];
1534 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 861057"];
1535 [label="return false; 861058"];
1536 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 861059"];
1537 [label="GetDeclaredOrInheritedCompliance(symbol) 861060"];
1538 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 861061"];
1539 [label="param GetDeclaredOrInheritedCompliance(this) 861062"];
1540 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861063"];
1541 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861064"];
1542 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 861065"];
1543 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 861066"];
1544 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 861067"];
1545 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 861068"];
1546 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861069"];
1547 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 861070"];
1548 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 861071"];
1549 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 861072"];
1550 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 861073"];
1551 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 861074"];
1552 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 861075"];
1553 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 861076"];
1554 [label="return compliance; 861077"];
1555 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 861078"];
1556 [label="param IsTrue(Compliance compliance) 861079"];
1557 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 861080"];
1558 [label="return false; 861081"];
1559 [label="ConcurrentAnalysis 861082"];
1560 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 861083"];
1561 [label="null 861084"];
1562 [label="_filterTree == null 861085"];
1563 [label="_compilation.Options 861086"];
1564 [label="get\n            {\n                return _options;\n            } 861087"];
1565 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 861088"];
1566 [label="VisitNamespaceMembersAsTasks(symbol); 861089"];
1567 [label="VisitNamespaceMembersAsTasks(symbol) 861090"];
1568 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 861091"];
1569 [label="param VisitNamespaceMembersAsTasks(this) 861092"];
1570 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 861093"];
1571 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 861094"];
1572 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 861095"];
1573 [label="VisitNamespaceMembersAsTasks(symbol); 861096"];
1574 [label="checker.WaitForWorkers() 861097"];
1575 [label="param WaitForWorkers(this) 861098"];
1576 [label="var tasks = _compilerTasks; 861099"];
1577 [label="if (tasks == null)\n            {\n                return;\n            } 861100"];
1578 [label="if (tasks == null)\n            {\n                return;\n            } 861101"];
1579 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 861102"];
1580 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 861103"];
1581 [label="curTask.GetAwaiter().GetResult(); 861104"];
1582 [label="checker.WaitForWorkers(); 861105"];
1583 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 861106"];
1584 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 861107"];
1585 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 861108"];
1586 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 861109"];
1587 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 861110"];
1588 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 861111"];
1589 [label="return _lazyClsComplianceDiagnostics; 861112"];
1590 [label="return result.AsImmutable().Concat(clsDiagnostics); 861113"];
1591 [label="return result.AsImmutable().Concat(clsDiagnostics); 861114"];
1592 [label="return result.AsImmutable().Concat(clsDiagnostics); 861115"];
1593 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 861116"];
1594 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 861117"];
1595 [label="cancellationToken.ThrowIfCancellationRequested(); 861118"];
1596 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 861119"];
1597 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 861120"];
1598 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 861121"];
1599 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 861122"];
1600 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 861123"];
1601 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 861124"];
1602 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 861125"];
1603 [label="return diagnostics.ToReadOnlyAndFree(); 861126"];
1604 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 861127"];
1605 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 861128"];
1606 [label="excludeDiagnostics?.Free(); 861129"];
1607 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 861130"];
1608 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 861131"];
1609 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 861132"];
1610 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 861133"];
1611 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 861134"];
1612 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 861135"];
1613 [label="get\n            {\n                return this.SyntaxTrees;\n            } 861136"];
1614 [label="this.SyntaxTrees 861137"];
1615 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 861138"];
1616 [label="return this.SyntaxTrees; 861139"];
1617 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 861140"];
1618 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 861141"];
1619 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 861142"];
1620 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 861143"];
1621 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 861144"];
1622 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 861145"];
1623 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 861146"];
1624 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 861147"];
1625 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 861148"];
1626 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 861149"];
1627 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861150"];
1628 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861151"];
1629 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861152"];
1630 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861153"];
1631 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861154"];
1632 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861155"];
1633 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861156"];
1634 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861157"];
1635 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 861158"];
1636 [label="param CompileMethodBodies(CSharpCompilation compilation) 861159"];
1637 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 861160"];
1638 [label="param CompileMethodBodies(bool emittingPdb) 861161"];
1639 [label="param CompileMethodBodies(bool emitTestCoverageData) 861162"];
1640 [label="param CompileMethodBodies(bool hasDeclarationErrors) 861163"];
1641 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 861164"];
1642 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 861165"];
1643 [label="param CompileMethodBodies(CancellationToken cancellationToken) 861166"];
1644 [label="Debug.Assert(compilation != null); 861167"];
1645 [label="Debug.Assert(compilation != null); 861168"];
1646 [label="Debug.Assert(diagnostics != null); 861169"];
1647 [label="Debug.Assert(diagnostics != null); 861170"];
1648 [label="compilation.PreviousSubmission 861171"];
1649 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 861172"];
1650 [label="ScriptCompilationInfo 861173"];
1651 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 861174"];
1652 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 861175"];
1653 [label="MethodSymbol entryPoint = null; 861176"];
1654 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 861177"];
1655 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 861178"];
1656 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 861179"];
1657 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 861180"];
1658 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 861181"];
1659 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 861182"];
1660 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 861183"];
1661 [label="param GetEntryPoint(CSharpCompilation compilation) 861184"];
1662 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 861185"];
1663 [label="param GetEntryPoint(bool hasDeclarationErrors) 861186"];
1664 [label="param GetEntryPoint(DiagnosticBag diagnostics) 861187"];
1665 [label="param GetEntryPoint(CancellationToken cancellationToken) 861188"];
1666 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 861189"];
1667 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 861190"];
1668 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 861191"];
1669 [label="param GetEntryPointAndDiagnostics(this) 861192"];
1670 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 861193"];
1671 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 861194"];
1672 [label="EntryPoint? entryPoint; 861195"];
1673 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 861196"];
1674 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 861197"];
1675 [label="GetBoundReferenceManager(); 861198"];
1676 [label="this.Options 861199"];
1677 [label="return _options; 861200"];
1678 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 861201"];
1679 [label="this.ScriptClass 861202"];
1680 [label="get { return _scriptClass.Value; } 861203"];
1681 [label="return _scriptClass.Value; 861204"];
1682 [label="_scriptClass.Value 861205"];
1683 [label="param BindScriptClass(this) 861206"];
1684 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 861207"];
1685 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 861208"];
1686 [label="get { return this.SourceModule.GetPublicSymbol(); } 861209"];
1687 [label="this.SourceModule 861210"];
1688 [label="get\n            {\n                return Assembly.Modules[0];\n            } 861211"];
1689 [label="GetBoundReferenceManager(); 861212"];
1690 [label="return this.SourceModule.GetPublicSymbol(); 861213"];
1691 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 861214"];
1692 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 861215"];
1693 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 861216"];
1694 [label="null 861217"];
1695 [label="ImmutableArray<Diagnostic>.Empty 861218"];
1696 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 861219"];
1697 [label="param EntryPoint(MethodSymbol? methodSymbol) 861220"];
1698 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 861221"];
1699 [label="param EntryPoint(this) 861222"];
1700 [label="MethodSymbol 861223"];
1701 [label="this.MethodSymbol 861224"];
1702 [label="this.Diagnostics 861225"];
1703 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 861226"];
1704 [label="entryPoint = EntryPoint.None; 861227"];
1705 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 861228"];
1706 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 861229"];
1707 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 861230"];
1708 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 861231"];
1709 [label="return _lazyEntryPoint; 861232"];
1710 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 861233"];
1711 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 861234"];
1712 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 861235"];
1713 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 861236"];
1714 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 861237"];
1715 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 861238"];
1716 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 861239"];
1717 [label="return null; 861240"];
1718 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861241"];
1719 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861242"];
1720 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861243"];
1721 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861244"];
1722 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861245"];
1723 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861246"];
1724 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861247"];
1725 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861248"];
1726 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861249"];
1727 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 861250"];
1728 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 861251"];
1729 [label="param MethodCompiler(CSharpCompilation compilation) 861252"];
1730 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 861253"];
1731 [label="param MethodCompiler(bool emittingPdb) 861254"];
1732 [label="param MethodCompiler(bool emitTestCoverageData) 861255"];
1733 [label="param MethodCompiler(bool hasDeclarationErrors) 861256"];
1734 [label="param MethodCompiler(DiagnosticBag diagnostics) 861257"];
1735 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 861258"];
1736 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 861259"];
1737 [label="param MethodCompiler(CancellationToken cancellationToken) 861260"];
1738 [label="param MethodCompiler(this) 861261"];
1739 [label="param MethodCompiler(this) 861262"];
1740 [label="_compilation 861263"];
1741 [label="_emittingPdb 861264"];
1742 [label="_emitTestCoverageData 861265"];
1743 [label="_diagnostics 861266"];
1744 [label="_hasDeclarationErrors 861267"];
1745 [label="_moduleBeingBuiltOpt 861268"];
1746 [label="_filterOpt 861269"];
1747 [label="_debugDocumentProvider 861270"];
1748 [label="_entryPointOpt 861271"];
1749 [label="_compilerTasks 861272"];
1750 [label="_globalHasErrors 861273"];
1751 [label="Debug.Assert(compilation != null); 861274"];
1752 [label="Debug.Assert(compilation != null); 861275"];
1753 [label="Debug.Assert(diagnostics != null); 861276"];
1754 [label="Debug.Assert(diagnostics != null); 861277"];
1755 [label="_compilation 861278"];
1756 [label="_moduleBeingBuiltOpt 861279"];
1757 [label="_emittingPdb 861280"];
1758 [label="_cancellationToken 861281"];
1759 [label="_diagnostics 861282"];
1760 [label="_filterOpt 861283"];
1761 [label="_entryPointOpt 861284"];
1762 [label="_hasDeclarationErrors 861285"];
1763 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 861286"];
1764 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 861287"];
1765 [label="param SetGlobalErrorIfTrue(bool arg) 861288"];
1766 [label="param SetGlobalErrorIfTrue(this) 861289"];
1767 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 861290"];
1768 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 861291"];
1769 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 861292"];
1770 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 861293"];
1771 [label="_debugDocumentProvider 861294"];
1772 [label="_emitTestCoverageData 861295"];
1773 [label="compilation.Options 861296"];
1774 [label="get\n            {\n                return _options;\n            } 861297"];
1775 [label="return _options; 861298"];
1776 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 861299"];
1777 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 861300"];
1778 [label="methodCompiler._compilerTasks 861301"];
1779 [label="compilation.SourceModule 861302"];
1780 [label="get\n            {\n                return Assembly.Modules[0];\n            } 861303"];
1781 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 861304"];
1782 [label="return _referenceManager; 861305"];
1783 [label="GetBoundReferenceManager(); 861306"];
1784 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 861307"];
1785 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 861308"];
1786 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 861309"];
1787 [label="param CompileNamespace(NamespaceSymbol symbol) 861310"];
1788 [label="param CompileNamespace(this) 861311"];
1789 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 861312"];
1790 [label="s.Accept(this, null); 861313"];
1791 [label="s.Accept(this, null); 861314"];
1792 [label="s.Accept(this, null); 861315"];
1793 [label="param VisitNamedType(NamedTypeSymbol symbol) 861316"];
1794 [label="param VisitNamedType(TypeCompilationState arg) 861317"];
1795 [label="param VisitNamedType(this) 861318"];
1796 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 861319"];
1797 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 861320"];
1798 [label="PassesFilter(_filterOpt, symbol) 861321"];
1799 [label="param PassesFilter(Predicate<Symbol> filterOpt) 861322"];
1800 [label="param PassesFilter(Symbol symbol) 861323"];
1801 [label="return (filterOpt == null) || filterOpt(symbol); 861324"];
1802 [label="return (filterOpt == null) || filterOpt(symbol); 861325"];
1803 [label="arg = null; 861326"];
1804 [label="_cancellationToken.ThrowIfCancellationRequested(); 861327"];
1805 [label="_compilation.Options 861328"];
1806 [label="get\n            {\n                return _options;\n            } 861329"];
1807 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 861330"];
1808 [label="Task worker = CompileNamedTypeAsync(symbol); 861331"];
1809 [label="CompileNamedTypeAsync(symbol) 861332"];
1810 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 861333"];
1811 [label="param CompileNamedTypeAsync(this) 861334"];
1812 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 861335"];
1813 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 861336"];
1814 [label="Task worker = CompileNamedTypeAsync(symbol); 861337"];
1815 [label="_compilerTasks.Push(worker); 861338"];
1816 [label="return null; 861339"];
1817 [label="s.Accept(this, null); 861340"];
1818 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 861341"];
1819 [label="methodCompiler.WaitForWorkers() 861342"];
1820 [label="param WaitForWorkers(this) 861343"];
1821 [label="var tasks = _compilerTasks; 861344"];
1822 [label="if (tasks == null)\n            {\n                return;\n            } 861345"];
1823 [label="if (tasks == null)\n            {\n                return;\n            } 861346"];
1824 [label="Task curTask; 861347"];
1825 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 861348"];
1826 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 861349"];
1827 [label="curTask.GetAwaiter().GetResult(); 861350"];
1828 [label="methodCompiler.WaitForWorkers(); 861351"];
1829 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 861352"];
1830 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 861353"];
1831 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 861354"];
1832 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 861355"];
1833 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 861356"];
1834 [label="=> _additionalTypes 861357"];
1835 [label="_additionalTypes 861358"];
1836 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 861359"];
1837 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 861360"];
1838 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 861361"];
1839 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 861362"];
1840 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 861363"];
1841 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 861364"];
1842 [label="param CompileSynthesizedMethods(this) 861365"];
1843 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 861366"];
1844 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 861367"];
1845 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 861368"];
1846 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 861369"];
1847 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 861370"];
1848 [label="param GetEmbeddedTypes(this) 861371"];
1849 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 861372"];
1850 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 861373"];
1851 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 861374"];
1852 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 861375"];
1853 [label="param CreateEmbeddedAttributesIfNeeded(this) 861376"];
1854 [label="GetNeedsGeneratedAttributes() 861377"];
1855 [label="param GetNeedsGeneratedAttributes(this) 861378"];
1856 [label="_needsGeneratedAttributes_IsFrozen = true; 861379"];
1857 [label="_needsGeneratedAttributes_IsFrozen 861380"];
1858 [label="GetNeedsGeneratedAttributesInternal() 861381"];
1859 [label="param GetNeedsGeneratedAttributesInternal(this) 861382"];
1860 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 861383"];
1861 [label="return GetNeedsGeneratedAttributesInternal(); 861384"];
1862 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 861385"];
1863 [label="ShouldEmitNullablePublicOnlyAttribute() 861386"];
1864 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 861387"];
1865 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 861388"];
1866 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 861389"];
1867 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 861390"];
1868 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 861391"];
1869 [label="return; 861392"];
1870 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 861393"];
1871 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 861394"];
1872 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 861395"];
1873 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 861396"];
1874 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 861397"];
1875 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 861398"];
1876 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 861399"];
1877 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 861400"];
1878 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 861401"];
1879 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 861402"];
1880 [label="builder.AddIfNotNull(_lazyNullableAttribute); 861403"];
1881 [label="builder.AddIfNotNull(_lazyNullableAttribute); 861404"];
1882 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 861405"];
1883 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 861406"];
1884 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 861407"];
1885 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 861408"];
1886 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 861409"];
1887 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 861410"];
1888 [label="return builder.ToImmutableAndFree(); 861411"];
1889 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 861412"];
1890 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 861413"];
1891 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 861414"];
1892 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 861415"];
1893 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 861416"];
1894 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 861417"];
1895 [label="param CompileSynthesizedMethods(this) 861418"];
1896 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 861419"];
1897 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 861420"];
1898 [label="compilation.AnonymousTypeManager 861421"];
1899 [label="get\n            {\n                return _anonymousTypeManager;\n            } 861422"];
1900 [label="return _anonymousTypeManager; 861423"];
1901 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861424"];
1902 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861425"];
1903 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861426"];
1904 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861427"];
1905 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861428"];
1906 [label="param GetPreviousAnonymousTypes(this) 861429"];
1907 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 861430"];
1908 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861431"];
1909 [label="param GetNextAnonymousTypeIndex(this) 861432"];
1910 [label="return 0; 861433"];
1911 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 861434"];
1912 [label="methodCompiler.WaitForWorkers() 861435"];
1913 [label="param WaitForWorkers(this) 861436"];
1914 [label="var tasks = _compilerTasks; 861437"];
1915 [label="if (tasks == null)\n            {\n                return;\n            } 861438"];
1916 [label="if (tasks == null)\n            {\n                return;\n            } 861439"];
1917 [label="Task curTask; 861440"];
1918 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 861441"];
1919 [label="methodCompiler.WaitForWorkers(); 861442"];
1920 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 861443"];
1921 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 861444"];
1922 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 861445"];
1923 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 861446"];
1924 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 861447"];
1925 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 861448"];
1926 [label="compilation.AdditionalCodegenWarnings 861449"];
1927 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 861450"];
1928 [label="return _additionalCodegenWarnings; 861451"];
1929 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 861452"];
1930 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 861453"];
1931 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 861454"];
1932 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 861455"];
1933 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 861456"];
1934 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 861457"];
1935 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 861458"];
1936 [label="param WarnUnusedFields(CSharpCompilation compilation) 861459"];
1937 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 861460"];
1938 [label="param WarnUnusedFields(CancellationToken cancellationToken) 861461"];
1939 [label="compilation.Assembly 861462"];
1940 [label="get\n            {\n                return SourceAssembly;\n            } 861463"];
1941 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 861464"];
1942 [label="return _referenceManager; 861465"];
1943 [label="GetBoundReferenceManager(); 861466"];
1944 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 861467"];
1945 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 861468"];
1946 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 861469"];
1947 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 861470"];
1948 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 861471"];
1949 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 861472"];
1950 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 861473"];
1951 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 861474"];
1952 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 861475"];
1953 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 861476"];
1954 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 861477"];
1955 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 861478"];
1956 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 861479"];
1957 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 861480"];
1958 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 861481"];
1959 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 861482"];
1960 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 861483"];
1961 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 861484"];
1962 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 861485"];
1963 [label="param GenerateModuleInitializer(this) 861486"];
1964 [label="Debug.Assert(_declarationDiagnosticsFrozen); 861487"];
1965 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 861488"];
1966 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 861489"];
1967 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 861490"];
1968 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 861491"];
1969 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 861492"];
1970 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 861493"];
1971 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 861494"];
1972 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 861495"];
1973 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 861496"];
1974 [label="param Filter(Diagnostic d) 861497"];
1975 [label="param Filter(int warningLevelOption) 861498"];
1976 [label="param Filter(NullableContextOptions nullableOption) 861499"];
1977 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 861500"];
1978 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 861501"];
1979 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 861502"];
1980 [label="param Filter(CancellationToken cancellationToken) 861503"];
1981 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 861504"];
1982 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 861505"];
1983 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 861506"];
1984 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 861507"];
1985 [label="ReportDiagnostic reportAction; 861508"];
1986 [label="bool hasPragmaSuppression; 861509"];
1987 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 861510"];
1988 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 861511"];
1989 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 861512"];
1990 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 861513"];
1991 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861514"];
1992 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861515"];
1993 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861516"];
1994 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861517"];
1995 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861518"];
1996 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861519"];
1997 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861520"];
1998 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 861521"];
1999 [label="GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression) 861522"];
2000 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 861523"];
2001 [label="param GetDiagnosticReport(bool isEnabledByDefault) 861524"];
2002 [label="param GetDiagnosticReport(string id) 861525"];
2003 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 861526"];
2004 [label="param GetDiagnosticReport(Location location) 861527"];
2005 [label="param GetDiagnosticReport(string category) 861528"];
2006 [label="param GetDiagnosticReport(int warningLevelOption) 861529"];
2007 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 861530"];
2008 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 861531"];
2009 [label="param GetDiagnosticReport(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 861532"];
2010 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 861533"];
2011 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 861534"];
2012 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 861535"];
2013 [label="hasPragmaSuppression = false; 861536"];
2014 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 861537"];
2015 [label="var tree = location.SourceTree as CSharpSyntaxTree; 861538"];
2016 [label="var position = location.SourceSpan.Start; 861539"];
2017 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 861540"];
2018 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 861541"];
2019 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 861542"];
2020 [label="ReportDiagnostic report; 861543"];
2021 [label="bool isSpecified = false; 861544"];
2022 [label="bool specifiedWarnAsErrorMinus = false; 861545"];
2023 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 861546"];
2024 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 861547"];
2025 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 861548"];
2026 [label="isSpecified = true; 861549"];
2027 [label="if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                } 861550"];
2028 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 861551"];
2029 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 861552"];
2030 [label="if (!isSpecified)\n            {\n                report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress;\n            } 861553"];
2031 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 861554"];
2032 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 861555"];
2033 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 861556"];
2034 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 861557"];
2035 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 861558"];
2036 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 861559"];
2037 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 861560"];
2038 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 861561"];
2039 [label="return report; 861562"];
2040 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 861563"];
2041 [label="return d.WithReportDiagnostic(reportAction); 861564"];
2042 [label="return d.WithReportDiagnostic(reportAction); 861565"];
2043 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 861566"];
2044 [label="return true; 861567"];
2045 [label="var emitResult = compilation.Emit(output, pdbStream, xmlDocumentationStream, win32ResourcesStream); 861568"];
2046 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 861569"];
2047 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 861570"];
2048 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 861571"];
2049 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 861572"];
2050 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 861573"];
2051 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 861574"];
2052 [label="param GenerateResourcesAndDocumentationComments(this) 861575"];
2053 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 861576"];
2054 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 861577"];
2055 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 861578"];
2056 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 861579"];
2057 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 861580"];
2058 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 861581"];
2059 [label="SourceAssembly 861582"];
2060 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 861583"];
2061 [label="GetBoundReferenceManager() 861584"];
2062 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 861585"];
2063 [label="return _referenceManager; 861586"];
2064 [label="GetBoundReferenceManager(); 861587"];
2065 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 861588"];
2066 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 861589"];
2067 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 861590"];
2068 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 861591"];
2069 [label="AddedModulesResourceNames(resourceDiagnostics) 861592"];
2070 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 861593"];
2071 [label="param AddedModulesResourceNames(this) 861594"];
2072 [label="SourceAssembly 861595"];
2073 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 861596"];
2074 [label="GetBoundReferenceManager() 861597"];
2075 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 861598"];
2076 [label="return _referenceManager; 861599"];
2077 [label="GetBoundReferenceManager(); 861600"];
2078 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 861601"];
2079 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 861602"];
2080 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 861603"];
2081 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 861604"];
2082 [label="param AddedModulesResourceNames(this) 861605"];
2083 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 861606"];
2084 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 861607"];
2085 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 861608"];
2086 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 861609"];
2087 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 861610"];
2088 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 861611"];
2089 [label="cancellationToken.ThrowIfCancellationRequested(); 861612"];
2090 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 861613"];
2091 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 861614"];
2092 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 861615"];
2093 [label="new[] { '\\r\\n', '\\r', '\\n' } 861616"];
2094 [label="'\\r\\n' 861617"];
2095 [label="'\\r' 861618"];
2096 [label="'\\n' 861619"];
2097 [label="new[] { '\\r\\n', '\\r', '\\n' } 861620"];
2098 [label="new[] { '\\r\\n', '\\r', '\\n' } 861621"];
2099 [label="new[] { '\\r\\n', '\\r', '\\n' } 861622"];
2100 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 861623"];
2101 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 861624"];
2102 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 861625"];
2103 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 861626"];
2104 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 861627"];
2105 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 861628"];
2106 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 861629"];
2107 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 861630"];
2108 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 861631"];
2109 [label="param WriteDocumentationCommentXml(string? assemblyName) 861632"];
2110 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 861633"];
2111 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 861634"];
2112 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 861635"];
2113 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 861636"];
2114 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 861637"];
2115 [label="StreamWriter writer = null; 861638"];
2116 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 861639"];
2117 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 861640"];
2118 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 861641"];
2119 [label="writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); 861642"];
2120 [label="writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); 861643"];
2121 [label="compilation.SourceAssembly 861644"];
2122 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 861645"];
2123 [label="GetBoundReferenceManager() 861646"];
2124 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 861647"];
2125 [label="return _referenceManager; 861648"];
2126 [label="GetBoundReferenceManager(); 861649"];
2127 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 861650"];
2128 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861651"];
2129 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861652"];
2130 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861653"];
2131 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861654"];
2132 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861655"];
2133 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861656"];
2134 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861657"];
2135 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861658"];
2136 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 861659"];
2137 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 861660"];
2138 [label="param DocumentationCommentCompiler(string assemblyName) 861661"];
2139 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 861662"];
2140 [label="param DocumentationCommentCompiler(TextWriter writer) 861663"];
2141 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 861664"];
2142 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 861665"];
2143 [label="param DocumentationCommentCompiler(bool processIncludes) 861666"];
2144 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 861667"];
2145 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 861668"];
2146 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 861669"];
2147 [label="param DocumentationCommentCompiler(this) 861670"];
2148 [label="param DocumentationCommentCompiler(this) 861671"];
2149 [label="_assemblyName 861672"];
2150 [label="_compilation 861673"];
2151 [label="_writer 861674"];
2152 [label="_filterTree 861675"];
2153 [label="_filterSpanWithinTree 861676"];
2154 [label="_processIncludes 861677"];
2155 [label="_isForSingleSymbol 861678"];
2156 [label="_diagnostics 861679"];
2157 [label="_lazyComparer 861680"];
2158 [label="_includedFileCache 861681"];
2159 [label="_indentDepth 861682"];
2160 [label="_temporaryStringBuilders 861683"];
2161 [label="_assemblyName 861684"];
2162 [label="_compilation 861685"];
2163 [label="_writer 861686"];
2164 [label="_filterTree 861687"];
2165 [label="_filterSpanWithinTree 861688"];
2166 [label="_processIncludes 861689"];
2167 [label="_isForSingleSymbol 861690"];
2168 [label="_diagnostics 861691"];
2169 [label="_cancellationToken 861692"];
2170 [label="compilation.SourceAssembly 861693"];
2171 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 861694"];
2172 [label="GetBoundReferenceManager() 861695"];
2173 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 861696"];
2174 [label="return _referenceManager; 861697"];
2175 [label="GetBoundReferenceManager(); 861698"];
2176 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 861699"];
2177 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 861700"];
2178 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 861701"];
2179 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 861702"];
2180 [label="param VisitNamespace(NamespaceSymbol symbol) 861703"];
2181 [label="param VisitNamespace(this) 861704"];
2182 [label="_cancellationToken.ThrowIfCancellationRequested(); 861705"];
2183 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 861706"];
2184 [label="Debug.Assert(_assemblyName != null); 861707"];
2185 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 861708"];
2186 [label="WriteLine('<?xml version=\\'1.0\\'?>') 861709"];
2187 [label="param WriteLine(string message) 861710"];
2188 [label="param WriteLine(this) 861711"];
2189 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861712"];
2190 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861713"];
2191 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861714"];
2192 [label="_writer.Write(MakeIndent(_indentDepth)); 861715"];
2193 [label="MakeIndent(_indentDepth) 861716"];
2194 [label="param MakeIndent(int depth) 861717"];
2195 [label="Debug.Assert(depth >= 0); 861718"];
2196 [label="Debug.Assert(depth >= 0); 861719"];
2197 [label="switch (depth)\n            {\n                case 0:\n                    return '';\n                case 1:\n                    return '    ';\n                case 2:\n                    return '        ';\n                case 3:\n                    return '            ';\n                default:\n                    Debug.Assert(false, 'Didn't expect nesting to reach depth ' + depth);\n                    return new string(' ', depth * 4);\n            } 861720"];
2198 [label="return ''; 861721"];
2199 [label="_writer.WriteLine(message); 861722"];
2200 [label="_writer.WriteLine(message); 861723"];
2201 [label="WriteLine('<doc>'); 861724"];
2202 [label="WriteLine('<doc>') 861725"];
2203 [label="param WriteLine(string message) 861726"];
2204 [label="param WriteLine(this) 861727"];
2205 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861728"];
2206 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861729"];
2207 [label="Debug.Assert(depth >= 0); 861730"];
2208 [label="_writer.WriteLine(message); 861731"];
2209 [label="Indent() 861732"];
2210 [label="param Indent(this) 861733"];
2211 [label="_indentDepth 861734"];
2212 [label="Indent(); 861735"];
2213 [label="_compilation.Options 861736"];
2214 [label="get\n            {\n                return _options;\n            } 861737"];
2215 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 861738"];
2216 [label="WriteLine('<assembly>'); 861739"];
2217 [label="WriteLine('<assembly>') 861740"];
2218 [label="param WriteLine(string message) 861741"];
2219 [label="_writer.Write(MakeIndent(_indentDepth)); 861742"];
2220 [label="Debug.Assert(depth >= 0); 861743"];
2221 [label="Debug.Assert(depth >= 0); 861744"];
2222 [label="return '    '; 861745"];
2223 [label="_writer.WriteLine(message); 861746"];
2224 [label="_writer.WriteLine(message); 861747"];
2225 [label="Indent() 861748"];
2226 [label="param Indent(this) 861749"];
2227 [label="_indentDepth 861750"];
2228 [label="Indent(); 861751"];
2229 [label="WriteLine('<name>{0}</name>', _assemblyName); 861752"];
2230 [label="WriteLine('<name>{0}</name>', _assemblyName) 861753"];
2231 [label="WriteLine('<name>{0}</name>', _assemblyName) 861754"];
2232 [label="param WriteLine(string format) 861755"];
2233 [label="param WriteLine(params object[] args) 861756"];
2234 [label="param WriteLine(this) 861757"];
2235 [label="WriteLine(string.Format(format, args)); 861758"];
2236 [label="WriteLine(string.Format(format, args)); 861759"];
2237 [label="WriteLine(string.Format(format, args)); 861760"];
2238 [label="WriteLine(string.Format(format, args)) 861761"];
2239 [label="param WriteLine(string message) 861762"];
2240 [label="param WriteLine(this) 861763"];
2241 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861764"];
2242 [label="_writer.Write(MakeIndent(_indentDepth)); 861765"];
2243 [label="Debug.Assert(depth >= 0); 861766"];
2244 [label="Debug.Assert(depth >= 0); 861767"];
2245 [label="return '        '; 861768"];
2246 [label="_writer.WriteLine(message); 861769"];
2247 [label="_writer.WriteLine(message); 861770"];
2248 [label="WriteLine(string.Format(format, args)); 861771"];
2249 [label="Unindent() 861772"];
2250 [label="param Unindent(this) 861773"];
2251 [label="_indentDepth 861774"];
2252 [label="Debug.Assert(_indentDepth >= 0); 861775"];
2253 [label="Debug.Assert(_indentDepth >= 0); 861776"];
2254 [label="Unindent(); 861777"];
2255 [label="WriteLine('</assembly>'); 861778"];
2256 [label="WriteLine('</assembly>') 861779"];
2257 [label="param WriteLine(string message) 861780"];
2258 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861781"];
2259 [label="_writer.Write(MakeIndent(_indentDepth)); 861782"];
2260 [label="Debug.Assert(depth >= 0); 861783"];
2261 [label="Debug.Assert(depth >= 0); 861784"];
2262 [label="_writer.WriteLine(message); 861785"];
2263 [label="_writer.WriteLine(message); 861786"];
2264 [label="WriteLine('<members>'); 861787"];
2265 [label="WriteLine('<members>') 861788"];
2266 [label="param WriteLine(string message) 861789"];
2267 [label="param WriteLine(this) 861790"];
2268 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861791"];
2269 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861792"];
2270 [label="Debug.Assert(depth >= 0); 861793"];
2271 [label="_writer.WriteLine(message); 861794"];
2272 [label="Indent() 861795"];
2273 [label="param Indent(this) 861796"];
2274 [label="_indentDepth 861797"];
2275 [label="Indent(); 861798"];
2276 [label="Debug.Assert(!_isForSingleSymbol); 861799"];
2277 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 861800"];
2278 [label="_cancellationToken.ThrowIfCancellationRequested(); 861801"];
2279 [label="s.Accept(this); 861802"];
2280 [label="s.Accept(this); 861803"];
2281 [label="s.Accept(this); 861804"];
2282 [label="param VisitNamedType(NamedTypeSymbol symbol) 861805"];
2283 [label="param VisitNamedType(this) 861806"];
2284 [label="_cancellationToken.ThrowIfCancellationRequested(); 861807"];
2285 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 861808"];
2286 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 861809"];
2287 [label="DefaultVisit(symbol); 861810"];
2288 [label="DefaultVisit(symbol) 861811"];
2289 [label="param DefaultVisit(Symbol symbol) 861812"];
2290 [label="param DefaultVisit(this) 861813"];
2291 [label="_cancellationToken.ThrowIfCancellationRequested(); 861814"];
2292 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 861815"];
2293 [label="ShouldSkip(symbol) 861816"];
2294 [label="param ShouldSkip(Symbol symbol) 861817"];
2295 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 861818"];
2296 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 861819"];
2297 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 861820"];
2298 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 861821"];
2299 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 861822"];
2300 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 861823"];
2301 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 861824"];
2302 [label="DocumentationMode maxDocumentationMode; 861825"];
2303 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 861826"];
2304 [label="docCommentNodes 861827"];
2305 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 861828"];
2306 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 861829"];
2307 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 861830"];
2308 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 861831"];
2309 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 861832"];
2310 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 861833"];
2311 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 861834"];
2312 [label="param TryGetDocumentationCommentNodes(this) 861835"];
2313 [label="maxDocumentationMode = DocumentationMode.None; 861836"];
2314 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 861837"];
2315 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 861838"];
2316 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 861839"];
2317 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 861840"];
2318 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 861841"];
2319 [label="currDocumentationMode > maxDocumentationMode 861842"];
2320 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 861843"];
2321 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 861844"];
2322 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 861845"];
2323 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 861846"];
2324 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 861847"];
2325 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 861848"];
2326 [label="return true; 861849"];
2327 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 861850"];
2328 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 861851"];
2329 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 861852"];
2330 [label="return; 861853"];
2331 [label="DefaultVisit(symbol); 861854"];
2332 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 861855"];
2333 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 861856"];
2334 [label="_cancellationToken.ThrowIfCancellationRequested(); 861857"];
2335 [label="member.Accept(this); 861858"];
2336 [label="member.Accept(this); 861859"];
2337 [label="member.Accept(this); 861860"];
2338 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 861861"];
2339 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 861862"];
2340 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 861863"];
2341 [label="DocumentationMode maxDocumentationMode; 861864"];
2342 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 861865"];
2343 [label="docCommentNodes 861866"];
2344 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 861867"];
2345 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 861868"];
2346 [label="maxDocumentationMode = DocumentationMode.None; 861869"];
2347 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 861870"];
2348 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 861871"];
2349 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 861872"];
2350 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 861873"];
2351 [label="currDocumentationMode > maxDocumentationMode 861874"];
2352 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 861875"];
2353 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 861876"];
2354 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 861877"];
2355 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 861878"];
2356 [label="return true; 861879"];
2357 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 861880"];
2358 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 861881"];
2359 [label="return; 861882"];
2360 [label="return; 861883"];
2361 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 861884"];
2362 [label="Unindent() 861885"];
2363 [label="Debug.Assert(_indentDepth >= 0); 861886"];
2364 [label="Unindent(); 861887"];
2365 [label="WriteLine('</members>'); 861888"];
2366 [label="WriteLine('</members>') 861889"];
2367 [label="param WriteLine(string message) 861890"];
2368 [label="_writer.Write(MakeIndent(_indentDepth)); 861891"];
2369 [label="Debug.Assert(depth >= 0); 861892"];
2370 [label="Debug.Assert(depth >= 0); 861893"];
2371 [label="_writer.WriteLine(message); 861894"];
2372 [label="_writer.WriteLine(message); 861895"];
2373 [label="Unindent() 861896"];
2374 [label="_indentDepth 861897"];
2375 [label="Debug.Assert(_indentDepth >= 0); 861898"];
2376 [label="Debug.Assert(_indentDepth >= 0); 861899"];
2377 [label="Unindent(); 861900"];
2378 [label="WriteLine('</doc>'); 861901"];
2379 [label="WriteLine('</doc>') 861902"];
2380 [label="param WriteLine(string message) 861903"];
2381 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 861904"];
2382 [label="_writer.Write(MakeIndent(_indentDepth)); 861905"];
2383 [label="Debug.Assert(depth >= 0); 861906"];
2384 [label="Debug.Assert(depth >= 0); 861907"];
2385 [label="_writer.WriteLine(message); 861908"];
2386 [label="_writer.WriteLine(message); 861909"];
2387 [label="Debug.Assert(compiler._indentDepth == 0); 861910"];
2388 [label="Debug.Assert(compiler._indentDepth == 0); 861911"];
2389 [label="writer?.Flush(); 861912"];
2390 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 861913"];
2391 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 861914"];
2392 [label="compilation.SyntaxTrees 861915"];
2393 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 861916"];
2394 [label="_syntaxAndDeclarations.GetLazyState() 861917"];
2395 [label="param GetLazyState(this) 861918"];
2396 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 861919"];
2397 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 861920"];
2398 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 861921"];
2399 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 861922"];
2400 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 861923"];
2401 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 861924"];
2402 [label="param ReportUnprocessed(SyntaxTree tree) 861925"];
2403 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 861926"];
2404 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 861927"];
2405 [label="param ReportUnprocessed(CancellationToken cancellationToken) 861928"];
2406 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 861929"];
2407 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 861930"];
2408 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 861931"];
2409 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 861932"];
2410 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 861933"];
2411 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 861934"];
2412 [label="param ReportUnusedImports(SyntaxTree? filterTree) 861935"];
2413 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 861936"];
2414 [label="param ReportUnusedImports(CancellationToken cancellationToken) 861937"];
2415 [label="param ReportUnusedImports(this) 861938"];
2416 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 861939"];
2417 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 861940"];
2418 [label="CompleteTrees(filterTree); 861941"];
2419 [label="CompleteTrees(filterTree) 861942"];
2420 [label="param CompleteTrees(SyntaxTree? filterTree) 861943"];
2421 [label="param CompleteTrees(this) 861944"];
2422 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 861945"];
2423 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 861946"];
2424 [label="CompleteTrees(filterTree); 861947"];
2425 [label="CustomAssert.False(emitResult.Success); 861948"];
2426 [label="CustomAssert.Equal(0, output.Length); 861949"];
2427 [label="CustomAssert.Equal(0, output.Length); 861950"];
2428 [label="CustomAssert.Equal(0, pdbStream.Length); 861951"];
2429 [label="CustomAssert.Equal(0, pdbStream.Length); 861952"];
2430 [label="CustomAssert.True(xmlDocumentationStream.Length > 0); 861953"];
2431 [label="CustomAssert.True(xmlDocumentationStream.Length > 0); 861954"];
2432 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 861955"];
2433 [label="emitResult.Diagnostics 861956"];
2434 [label="param Diagnostic(object code) 861957"];
2435 [label="param Diagnostic(string squiggledText = null) 861958"];
2436 [label="param Diagnostic(object[] arguments = null) 861959"];
2437 [label="param Diagnostic(LinePosition? startLocation = null) 861960"];
2438 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 861961"];
2439 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 861962"];
2440 [label="param Diagnostic(bool isSuppressed = false) 861963"];
2441 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861964"];
2442 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861965"];
2443 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861966"];
2444 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861967"];
2445 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861968"];
2446 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861969"];
2447 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 861970"];
2448 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 861971"];
2449 [label="param Diagnostic(object code) 861972"];
2450 [label="param Diagnostic(string squiggledText = null) 861973"];
2451 [label="param Diagnostic(object[] arguments = null) 861974"];
2452 [label="param Diagnostic(LinePosition? startLocation = null) 861975"];
2453 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 861976"];
2454 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 861977"];
2455 [label="param Diagnostic(bool isSuppressed = false) 861978"];
2456 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 861979"];
2457 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861980"];
2458 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861981"];
2459 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861982"];
2460 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861983"];
2461 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861984"];
2462 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861985"];
2463 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861986"];
2464 [label="{ } 861987"];
2465 [label="None = { } 861988"];
2466 [label="null 861989"];
2467 [label="Any = null 861990"];
2468 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 861991"];
2469 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 861992"];
2470 [label="param DiagnosticDescription(object code) 861993"];
2471 [label="param DiagnosticDescription(bool isWarningAsError) 861994"];
2472 [label="param DiagnosticDescription(string squiggledText) 861995"];
2473 [label="param DiagnosticDescription(object[] arguments) 861996"];
2474 [label="param DiagnosticDescription(LinePosition? startLocation) 861997"];
2475 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 861998"];
2476 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 861999"];
2477 [label="param DiagnosticDescription(Type errorCodeType = null) 862000"];
2478 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 862001"];
2479 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 862002"];
2480 [label="param DiagnosticDescription(bool isSuppressed = false) 862003"];
2481 [label="param DiagnosticDescription(this) 862004"];
2482 [label="_code 862005"];
2483 [label="_isWarningAsError 862006"];
2484 [label="_isSuppressed 862007"];
2485 [label="_squiggledText 862008"];
2486 [label="_arguments 862009"];
2487 [label="_startPosition 862010"];
2488 [label="_argumentOrderDoesNotMatter 862011"];
2489 [label="_errorCodeType 862012"];
2490 [label="_ignoreArgumentsWhenComparing 862013"];
2491 [label="_defaultSeverityOpt 862014"];
2492 [label="_effectiveSeverityOpt 862015"];
2493 [label="_syntaxPredicate 862016"];
2494 [label="_showPredicate 862017"];
2495 [label="_location 862018"];
2496 [label="_argumentsAsStrings 862019"];
2497 [label="_code 862020"];
2498 [label="_isWarningAsError 862021"];
2499 [label="_squiggledText 862022"];
2500 [label="_arguments 862023"];
2501 [label="_startPosition 862024"];
2502 [label="_syntaxPredicate 862025"];
2503 [label="_argumentOrderDoesNotMatter 862026"];
2504 [label="_errorCodeType = errorCodeType ?? code.GetType(); 862027"];
2505 [label="_errorCodeType 862028"];
2506 [label="_defaultSeverityOpt 862029"];
2507 [label="_effectiveSeverityOpt 862030"];
2508 [label="_isSuppressed 862031"];
2509 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 862032"];
2510 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862033"];
2511 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862034"];
2512 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862035"];
2513 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862036"];
2514 [label="Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f') 862037"];
2515 [label="Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f') 862038"];
2516 [label="param WithArguments(params object[] arguments) 862039"];
2517 [label="param WithArguments(this) 862040"];
2518 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862041"];
2519 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862042"];
2520 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862043"];
2521 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 862044"];
2522 [label="param DiagnosticDescription(object code) 862045"];
2523 [label="param DiagnosticDescription(bool isWarningAsError) 862046"];
2524 [label="param DiagnosticDescription(string squiggledText) 862047"];
2525 [label="param DiagnosticDescription(object[] arguments) 862048"];
2526 [label="param DiagnosticDescription(LinePosition? startLocation) 862049"];
2527 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 862050"];
2528 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 862051"];
2529 [label="param DiagnosticDescription(Type errorCodeType = null) 862052"];
2530 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 862053"];
2531 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 862054"];
2532 [label="param DiagnosticDescription(bool isSuppressed = false) 862055"];
2533 [label="param DiagnosticDescription(this) 862056"];
2534 [label="_code 862057"];
2535 [label="_isWarningAsError 862058"];
2536 [label="_isSuppressed 862059"];
2537 [label="_squiggledText 862060"];
2538 [label="_arguments 862061"];
2539 [label="_startPosition 862062"];
2540 [label="_argumentOrderDoesNotMatter 862063"];
2541 [label="_errorCodeType 862064"];
2542 [label="_ignoreArgumentsWhenComparing 862065"];
2543 [label="_defaultSeverityOpt 862066"];
2544 [label="_effectiveSeverityOpt 862067"];
2545 [label="_syntaxPredicate 862068"];
2546 [label="_showPredicate 862069"];
2547 [label="_location 862070"];
2548 [label="_argumentsAsStrings 862071"];
2549 [label="_code 862072"];
2550 [label="_isWarningAsError 862073"];
2551 [label="_squiggledText 862074"];
2552 [label="_arguments 862075"];
2553 [label="_startPosition 862076"];
2554 [label="_syntaxPredicate 862077"];
2555 [label="_argumentOrderDoesNotMatter 862078"];
2556 [label="_errorCodeType = errorCodeType ?? code.GetType(); 862079"];
2557 [label="_errorCodeType 862080"];
2558 [label="_defaultSeverityOpt 862081"];
2559 [label="_effectiveSeverityOpt 862082"];
2560 [label="_isSuppressed 862083"];
2561 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862084"];
2562 [label="Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9) 862085"];
2563 [label="param WithLocation(int line) 862086"];
2564 [label="param WithLocation(int column) 862087"];
2565 [label="param WithLocation(this) 862088"];
2566 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862089"];
2567 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862090"];
2568 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862091"];
2569 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862092"];
2570 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862093"];
2571 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862094"];
2572 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862095"];
2573 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862096"];
2574 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862097"];
2575 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862098"];
2576 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862099"];
2577 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862100"];
2578 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862101"];
2579 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862102"];
2580 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 862103"];
2581 [label="param DiagnosticDescription(object code) 862104"];
2582 [label="param DiagnosticDescription(bool isWarningAsError) 862105"];
2583 [label="param DiagnosticDescription(string squiggledText) 862106"];
2584 [label="param DiagnosticDescription(object[] arguments) 862107"];
2585 [label="param DiagnosticDescription(LinePosition? startLocation) 862108"];
2586 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 862109"];
2587 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 862110"];
2588 [label="param DiagnosticDescription(Type errorCodeType = null) 862111"];
2589 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 862112"];
2590 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 862113"];
2591 [label="param DiagnosticDescription(bool isSuppressed = false) 862114"];
2592 [label="param DiagnosticDescription(this) 862115"];
2593 [label="_code 862116"];
2594 [label="_isWarningAsError 862117"];
2595 [label="_isSuppressed 862118"];
2596 [label="_squiggledText 862119"];
2597 [label="_arguments 862120"];
2598 [label="_startPosition 862121"];
2599 [label="_argumentOrderDoesNotMatter 862122"];
2600 [label="_errorCodeType 862123"];
2601 [label="_ignoreArgumentsWhenComparing 862124"];
2602 [label="_defaultSeverityOpt 862125"];
2603 [label="_effectiveSeverityOpt 862126"];
2604 [label="_syntaxPredicate 862127"];
2605 [label="_showPredicate 862128"];
2606 [label="_location 862129"];
2607 [label="_argumentsAsStrings 862130"];
2608 [label="_startPosition 862131"];
2609 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862132"];
2610 [label="Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true) 862133"];
2611 [label="param WithWarningAsError(bool isWarningAsError) 862134"];
2612 [label="param WithWarningAsError(this) 862135"];
2613 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862136"];
2614 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862137"];
2615 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862138"];
2616 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862139"];
2617 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862140"];
2618 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862141"];
2619 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862142"];
2620 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862143"];
2621 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862144"];
2622 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862145"];
2623 [label="return new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 862146"];
2624 [label="new DiagnosticDescription(_code, isWarningAsError, _squiggledText, _arguments, _startPosition, _syntaxPredicate, true, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 862147"];
2625 [label="param DiagnosticDescription(object code) 862148"];
2626 [label="param DiagnosticDescription(bool isWarningAsError) 862149"];
2627 [label="param DiagnosticDescription(string squiggledText) 862150"];
2628 [label="param DiagnosticDescription(object[] arguments) 862151"];
2629 [label="param DiagnosticDescription(LinePosition? startLocation) 862152"];
2630 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 862153"];
2631 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 862154"];
2632 [label="param DiagnosticDescription(Type errorCodeType = null) 862155"];
2633 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 862156"];
2634 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 862157"];
2635 [label="param DiagnosticDescription(bool isSuppressed = false) 862158"];
2636 [label="param DiagnosticDescription(this) 862159"];
2637 [label="_code 862160"];
2638 [label="_isWarningAsError 862161"];
2639 [label="_isSuppressed 862162"];
2640 [label="_squiggledText 862163"];
2641 [label="_arguments 862164"];
2642 [label="_startPosition 862165"];
2643 [label="_argumentOrderDoesNotMatter 862166"];
2644 [label="_errorCodeType 862167"];
2645 [label="_ignoreArgumentsWhenComparing 862168"];
2646 [label="_defaultSeverityOpt 862169"];
2647 [label="_effectiveSeverityOpt 862170"];
2648 [label="_syntaxPredicate 862171"];
2649 [label="_showPredicate 862172"];
2650 [label="_location 862173"];
2651 [label="_argumentsAsStrings 862174"];
2652 [label="_isWarningAsError 862175"];
2653 [label="_argumentOrderDoesNotMatter 862176"];
2654 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)); 862177"];
2655 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)) 862178"];
2656 [label="emitResult.Diagnostics.Verify(\n                // (4,9): error CS0169: The field 'X._f' is never used\n                //     int _f;\n                Diagnostic(ErrorCode.WRN_UnreferencedField, '_f').WithArguments('X._f').WithLocation(4, 9).WithWarningAsError(true)) 862179"];
2657 [label="param Verify(this ImmutableArray<Diagnostic> actual) 862180"];
2658 [label="param Verify(params DiagnosticDescription[] expected) 862181"];
2659 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 862182"];
2660 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 862183"];
2661 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 862184"];
2662 [label="param Verify(this IEnumerable<Diagnostic> actual) 862185"];
2663 [label="param Verify(params DiagnosticDescription[] expected) 862186"];
2664 [label="Verify(actual, expected, errorCodeOnly: false); 862187"];
2665 [label="Verify(actual, expected, errorCodeOnly: false); 862188"];
2666 [label="Verify(actual, expected, errorCodeOnly: false); 862189"];
2667 [label="Verify(actual, expected, errorCodeOnly: false) 862190"];
2668 [label="param Verify(IEnumerable<Diagnostic> actual) 862191"];
2669 [label="param Verify(DiagnosticDescription[] expected) 862192"];
2670 [label="param Verify(bool errorCodeOnly) 862193"];
2671 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 862194"];
2672 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 862195"];
2673 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 862196"];
2674 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 862197"];
2675 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 862198"];
2676 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 862199"];
2677 [label="=> _defaultSeverityOpt 862200"];
2678 [label="_defaultSeverityOpt 862201"];
2679 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 862202"];
2680 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 862203"];
2681 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 862204"];
2682 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 862205"];
2683 [label="=> _effectiveSeverityOpt 862206"];
2684 [label="_effectiveSeverityOpt 862207"];
2685 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 862208"];
2686 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 862209"];
2687 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 862210"];
2688 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 862211"];
2689 [label="param DiagnosticDescription(Diagnostic d) 862212"];
2690 [label="param DiagnosticDescription(bool errorCodeOnly) 862213"];
2691 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 862214"];
2692 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 862215"];
2693 [label="param DiagnosticDescription(this) 862216"];
2694 [label="_code 862217"];
2695 [label="_isWarningAsError 862218"];
2696 [label="_isSuppressed 862219"];
2697 [label="_squiggledText 862220"];
2698 [label="_arguments 862221"];
2699 [label="_startPosition 862222"];
2700 [label="_argumentOrderDoesNotMatter 862223"];
2701 [label="_errorCodeType 862224"];
2702 [label="_defaultSeverityOpt 862225"];
2703 [label="_effectiveSeverityOpt 862226"];
2704 [label="_syntaxPredicate 862227"];
2705 [label="_code 862228"];
2706 [label="_isWarningAsError 862229"];
2707 [label="_isSuppressed 862230"];
2708 [label="_location 862231"];
2709 [label="includeDefaultSeverity 862232"];
2710 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 862233"];
2711 [label="_defaultSeverityOpt 862234"];
2712 [label="includeEffectiveSeverity 862235"];
2713 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 862236"];
2714 [label="_effectiveSeverityOpt 862237"];
2715 [label="DiagnosticWithInfo dinfo = null; 862238"];
2716 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 862239"];
2717 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 862240"];
2718 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 862241"];
2719 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 862242"];
2720 [label="dinfo = d as DiagnosticWithInfo; 862243"];
2721 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 862244"];
2722 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 862245"];
2723 [label="_errorCodeType 862246"];
2724 [label="_code 862247"];
2725 [label="_ignoreArgumentsWhenComparing 862248"];
2726 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 862249"];
2727 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 862250"];
2728 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 862251"];
2729 [label="_squiggledText 862252"];
2730 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 862253"];
2731 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 862254"];
2732 [label="_arguments 862255"];
2733 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 862256"];
2734 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 862257"];
2735 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 862258"];
2736 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 862259"];
2737 [label="_startPosition 862260"];
2738 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 862261"];
2739 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 862262"];
2740 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 862263"];
2741 [label="int index = unmatched.IndexOf(d); 862264"];
2742 [label="int index = unmatched.IndexOf(d); 862265"];
2743 [label="param Equals(object obj) 862266"];
2744 [label="param Equals(this) 862267"];
2745 [label="var d = obj as DiagnosticDescription; 862268"];
2746 [label="if (d == null)\n                return false; 862269"];
2747 [label="if (d == null)\n                return false; 862270"];
2748 [label="if (!_code.Equals(d._code))\n                return false; 862271"];
2749 [label="if (!_code.Equals(d._code))\n                return false; 862272"];
2750 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 862273"];
2751 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 862274"];
2752 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 862275"];
2753 [label="if (_squiggledText != d._squiggledText)\n                    return false; 862276"];
2754 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 862277"];
2755 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 862278"];
2756 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 862279"];
2757 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 862280"];
2758 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 862281"];
2759 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 862282"];
2760 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 862283"];
2761 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 862284"];
2762 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 862285"];
2763 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 862286"];
2764 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 862287"];
2765 [label="if (d._arguments == null)\n                    return false; 862288"];
2766 [label="GetArgumentsAsStrings() 862289"];
2767 [label="param GetArgumentsAsStrings(this) 862290"];
2768 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 862291"];
2769 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 862292"];
2770 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 862293"];
2771 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 862294"];
2772 [label="_argumentsAsStrings 862295"];
2773 [label="return _argumentsAsStrings; 862296"];
2774 [label="var args1 = GetArgumentsAsStrings(); 862297"];
2775 [label="d.GetArgumentsAsStrings() 862298"];
2776 [label="param GetArgumentsAsStrings(this) 862299"];
2777 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 862300"];
2778 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 862301"];
2779 [label="return _argumentsAsStrings; 862302"];
2780 [label="var args2 = d.GetArgumentsAsStrings(); 862303"];
2781 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 862304"];
2782 [label="if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false; 862305"];
2783 [label="if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false; 862306"];
2784 [label="if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false; 862307"];
2785 [label="if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false; 862308"];
2786 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 862309"];
2787 [label="return true; 862310"];
2788 [label="int index = unmatched.IndexOf(d); 862311"];
2789 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 862312"];
2790 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 862313"];
2791 [label="unmatched.RemoveAt(index); 862314"];
2792 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 862315"];
2793 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 862316"];
2794 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 862317"];
2795 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 862318"];
2796 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 862319"];
2797 [label="DiagnosticDescription.GetAssertText(expected, actual) 862320"];
2798 [label="param GetAssertText(DiagnosticDescription[] expected) 862321"];
2799 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 862322"];
2800 [label="const int CSharp = 1; 862323"];
2801 [label="const int VisualBasic = 2; 862324"];
2802 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 862325"];
2803 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 862326"];
2804 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 862327"];
2805 [label="actual.Any() && actual.First() is CSDiagnostic 862328"];
2806 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 862329"];
2807 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 862330"];
2808 [label="int indentDepth = (language == CSharp) ? 4 : 1; 862331"];
2809 [label="(language == CSharp) 862332"];
2810 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 862333"];
2811 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 862334"];
2812 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 862335"];
2813 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 862336"];
2814 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 862337"];
2815 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 862338"];
2816 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 862339"];
2817 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 862340"];
2818 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 862341"];
2819 [label="IsSortedOrEmpty(expected) 862342"];
2820 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 862343"];
2821 [label="new LinePositionComparer() 862344"];
2822 [label="param LinePositionComparer(this) 862345"];
2823 [label="Instance = new LinePositionComparer() 862346"];
2824 [label="var comparer = LinePositionComparer.Instance; 862347"];
2825 [label="DiagnosticDescription last = null; 862348"];
2826 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 862349"];
2827 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 862350"];
2828 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 862351"];
2829 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 862352"];
2830 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 862353"];
2831 [label="last = diagnostic; 862354"];
2832 [label="return true; 862355"];
2833 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 862356"];
2834 [label="actual = Sort(actual); 862357"];
2835 [label="Sort(actual) 862358"];
2836 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 862359"];
2837 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 862360"];
2838 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 862361"];
2839 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 862362"];
2840 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 862363"];
2841 [label="var assertText = new StringBuilder(); 862364"];
2842 [label="assertText.AppendLine(); 862365"];
2843 [label="int i; 862366"];
2844 [label="assertText.AppendLine('Expected:'); 862367"];
2845 [label="assertText.AppendLine('Expected:'); 862368"];
2846 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 862369"];
2847 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 862370"];
2848 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 862371"];
2849 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 862372"];
2850 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 862373"];
2851 [label="GetDiagnosticDescription(d, indentDepth) 862374"];
2852 [label="param GetDiagnosticDescription(DiagnosticDescription d) 862375"];
2853 [label="param GetDiagnosticDescription(int indentDepth) 862376"];
2854 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862377"];
2855 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862378"];
2856 [label="d.ToString() 862379"];
2857 [label="param ToString(this) 862380"];
2858 [label="var sb = new StringBuilder(); 862381"];
2859 [label="sb.Append('Diagnostic('); 862382"];
2860 [label="sb.Append('Diagnostic('); 862383"];
2861 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 862384"];
2862 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 862385"];
2863 [label="sb.Append(_errorCodeType.Name); 862386"];
2864 [label="sb.Append(_errorCodeType.Name); 862387"];
2865 [label="sb.Append('.'); 862388"];
2866 [label="sb.Append('.'); 862389"];
2867 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 862390"];
2868 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 862391"];
2869 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 862392"];
2870 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 862393"];
2871 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 862394"];
2872 [label="sb.Append(', \\''); 862395"];
2873 [label="sb.Append(', \\''); 862396"];
2874 [label="sb.Append(_squiggledText); 862397"];
2875 [label="sb.Append(_squiggledText); 862398"];
2876 [label="sb.Append('''); 862399"];
2877 [label="sb.Append('''); 862400"];
2878 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 862401"];
2879 [label="sb.Append(')'); 862402"];
2880 [label="sb.Append(')'); 862403"];
2881 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 862404"];
2882 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 862405"];
2883 [label="sb.Append('.WithArguments('); 862406"];
2884 [label="sb.Append('.WithArguments('); 862407"];
2885 [label="GetArgumentsAsStrings() 862408"];
2886 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 862409"];
2887 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 862410"];
2888 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 862411"];
2889 [label="sb.Append('\\''); 862412"];
2890 [label="sb.Append('\\''); 862413"];
2891 [label="sb.Append(argumentStrings.Current); 862414"];
2892 [label="sb.Append(argumentStrings.Current); 862415"];
2893 [label="sb.Append('\\''); 862416"];
2894 [label="sb.Append('\\''); 862417"];
2895 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 862418"];
2896 [label="sb.Append(')'); 862419"];
2897 [label="sb.Append(')'); 862420"];
2898 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 862421"];
2899 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 862422"];
2900 [label="sb.Append('.WithLocation('); 862423"];
2901 [label="sb.Append('.WithLocation('); 862424"];
2902 [label="sb.Append(_startPosition.Value.Line + 1); 862425"];
2903 [label="sb.Append(_startPosition.Value.Line + 1); 862426"];
2904 [label="sb.Append(', '); 862427"];
2905 [label="sb.Append(', '); 862428"];
2906 [label="sb.Append(_startPosition.Value.Character + 1); 862429"];
2907 [label="sb.Append(_startPosition.Value.Character + 1); 862430"];
2908 [label="sb.Append(')'); 862431"];
2909 [label="sb.Append(')'); 862432"];
2910 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 862433"];
2911 [label="sb.Append('.WithWarningAsError(true)'); 862434"];
2912 [label="sb.Append('.WithWarningAsError(true)'); 862435"];
2913 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 862436"];
2914 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 862437"];
2915 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 862438"];
2916 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 862439"];
2917 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 862440"];
2918 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 862441"];
2919 [label="return sb.ToString(); 862442"];
2920 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862443"];
2921 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862444"];
2922 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 862445"];
2923 [label="GetCommaSeparatedLines(assertText, expectedText); 862446"];
2924 [label="GetCommaSeparatedLines(assertText, expectedText); 862447"];
2925 [label="GetCommaSeparatedLines(assertText, expectedText) 862448"];
2926 [label="param GetCommaSeparatedLines(StringBuilder sb) 862449"];
2927 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 862450"];
2928 [label="int n = lines.Count; 862451"];
2929 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 862452"];
2930 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 862453"];
2931 [label="sb.Append(lines[i]); 862454"];
2932 [label="sb.Append(lines[i]); 862455"];
2933 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 862456"];
2934 [label="sb.AppendLine(); 862457"];
2935 [label="GetCommaSeparatedLines(assertText, expectedText); 862458"];
2936 [label="assertText.AppendLine('Actual:'); 862459"];
2937 [label="assertText.AppendLine('Actual:'); 862460"];
2938 [label="var actualText = ArrayBuilder<string>.GetInstance(); 862461"];
2939 [label="var e = actual.GetEnumerator(); 862462"];
2940 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 862463"];
2941 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 862464"];
2942 [label="param Compare(LinePosition? x) 862465"];
2943 [label="param Compare(LinePosition? y) 862466"];
2944 [label="param Compare(this) 862467"];
2945 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 862468"];
2946 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 862469"];
2947 [label="if (y == null)\n                {\n                    return 1;\n                } 862470"];
2948 [label="if (y == null)\n                {\n                    return 1;\n                } 862471"];
2949 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 862472"];
2950 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 862473"];
2951 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 862474"];
2952 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 862475"];
2953 [label="return x.Value.Character.CompareTo(y.Value.Character); 862476"];
2954 [label="return x.Value.Character.CompareTo(y.Value.Character); 862477"];
2955 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 862478"];
2956 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 862479"];
2957 [label="Diagnostic d = e.Current; 862480"];
2958 [label="string message = d.ToString(); 862481"];
2959 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 862482"];
2960 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 862483"];
2961 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 862484"];
2962 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 862485"];
2963 [label="Indent(assertText, indentDepth); 862486"];
2964 [label="Indent(assertText, indentDepth); 862487"];
2965 [label="Indent(assertText, indentDepth) 862488"];
2966 [label="param Indent(StringBuilder sb) 862489"];
2967 [label="param Indent(int count) 862490"];
2968 [label="sb.Append(' ', 4 * count); 862491"];
2969 [label="sb.Append(' ', 4 * count); 862492"];
2970 [label="sb.Append(' ', 4 * count); 862493"];
2971 [label="Indent(assertText, indentDepth); 862494"];
2972 [label="assertText.Append('// '); 862495"];
2973 [label="assertText.Append('// '); 862496"];
2974 [label="assertText.AppendLine(d.ToString()); 862497"];
2975 [label="assertText.AppendLine(d.ToString()); 862498"];
2976 [label="var l = d.Location; 862499"];
2977 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 862500"];
2978 [label="Indent(assertText, indentDepth); 862501"];
2979 [label="Indent(assertText, indentDepth); 862502"];
2980 [label="Indent(assertText, indentDepth) 862503"];
2981 [label="param Indent(StringBuilder sb) 862504"];
2982 [label="param Indent(int count) 862505"];
2983 [label="sb.Append(' ', 4 * count); 862506"];
2984 [label="sb.Append(' ', 4 * count); 862507"];
2985 [label="sb.Append(' ', 4 * count); 862508"];
2986 [label="Indent(assertText, indentDepth); 862509"];
2987 [label="assertText.Append('// '); 862510"];
2988 [label="assertText.Append('// '); 862511"];
2989 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 862512"];
2990 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 862513"];
2991 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 862514"];
2992 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 862515"];
2993 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 862516"];
2994 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 862517"];
2995 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 862518"];
2996 [label="param DiagnosticDescription(Diagnostic d) 862519"];
2997 [label="param DiagnosticDescription(bool errorCodeOnly) 862520"];
2998 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 862521"];
2999 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 862522"];
3000 [label="param DiagnosticDescription(this) 862523"];
3001 [label="_code 862524"];
3002 [label="_isWarningAsError 862525"];
3003 [label="_isSuppressed 862526"];
3004 [label="_squiggledText 862527"];
3005 [label="_arguments 862528"];
3006 [label="_startPosition 862529"];
3007 [label="_errorCodeType 862530"];
3008 [label="_defaultSeverityOpt 862531"];
3009 [label="_effectiveSeverityOpt 862532"];
3010 [label="_code 862533"];
3011 [label="_isWarningAsError 862534"];
3012 [label="_isSuppressed 862535"];
3013 [label="_location 862536"];
3014 [label="DiagnosticWithInfo dinfo = null; 862537"];
3015 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 862538"];
3016 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 862539"];
3017 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 862540"];
3018 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 862541"];
3019 [label="var diffDescription = description; 862542"];
3020 [label="var idx = Array.IndexOf(expected, description); 862543"];
3021 [label="var idx = Array.IndexOf(expected, description); 862544"];
3022 [label="var idx = Array.IndexOf(expected, description); 862545"];
3023 [label="var idx = Array.IndexOf(expected, description); 862546"];
3024 [label="if (d == null)\n                return false; 862547"];
3025 [label="if (d == null)\n                return false; 862548"];
3026 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 862549"];
3027 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 862550"];
3028 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 862551"];
3029 [label="if (_squiggledText != d._squiggledText)\n                    return false; 862552"];
3030 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 862553"];
3031 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 862554"];
3032 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 862555"];
3033 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 862556"];
3034 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 862557"];
3035 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 862558"];
3036 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 862559"];
3037 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 862560"];
3038 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 862561"];
3039 [label="if (d._arguments == null)\n                    return false; 862562"];
3040 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 862563"];
3041 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 862564"];
3042 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 862565"];
3043 [label="diffDescription = expected[idx]; 862566"];
3044 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 862567"];
3045 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 862568"];
3046 [label="GetDiagnosticDescription(description, indentDepth) 862569"];
3047 [label="param GetDiagnosticDescription(DiagnosticDescription d) 862570"];
3048 [label="param GetDiagnosticDescription(int indentDepth) 862571"];
3049 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862572"];
3050 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862573"];
3051 [label="var sb = new StringBuilder(); 862574"];
3052 [label="sb.Append('Diagnostic('); 862575"];
3053 [label="sb.Append('Diagnostic('); 862576"];
3054 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 862577"];
3055 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 862578"];
3056 [label="sb.Append(_errorCodeType.Name); 862579"];
3057 [label="sb.Append(_errorCodeType.Name); 862580"];
3058 [label="sb.Append('.'); 862581"];
3059 [label="sb.Append('.'); 862582"];
3060 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 862583"];
3061 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 862584"];
3062 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 862585"];
3063 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 862586"];
3064 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 862587"];
3065 [label="sb.Append(', \\''); 862588"];
3066 [label="sb.Append(', \\''); 862589"];
3067 [label="sb.Append(_squiggledText); 862590"];
3068 [label="sb.Append(_squiggledText); 862591"];
3069 [label="sb.Append('''); 862592"];
3070 [label="sb.Append('''); 862593"];
3071 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 862594"];
3072 [label="sb.Append(')'); 862595"];
3073 [label="sb.Append(')'); 862596"];
3074 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 862597"];
3075 [label="sb.Append('.WithArguments('); 862598"];
3076 [label="sb.Append('.WithArguments('); 862599"];
3077 [label="sb.Append('\\''); 862600"];
3078 [label="sb.Append('\\''); 862601"];
3079 [label="sb.Append(argumentStrings.Current); 862602"];
3080 [label="sb.Append(argumentStrings.Current); 862603"];
3081 [label="sb.Append('\\''); 862604"];
3082 [label="sb.Append('\\''); 862605"];
3083 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 862606"];
3084 [label="sb.Append(')'); 862607"];
3085 [label="sb.Append(')'); 862608"];
3086 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 862609"];
3087 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 862610"];
3088 [label="sb.Append('.WithLocation('); 862611"];
3089 [label="sb.Append('.WithLocation('); 862612"];
3090 [label="sb.Append(_startPosition.Value.Line + 1); 862613"];
3091 [label="sb.Append(_startPosition.Value.Line + 1); 862614"];
3092 [label="sb.Append(', '); 862615"];
3093 [label="sb.Append(', '); 862616"];
3094 [label="sb.Append(_startPosition.Value.Character + 1); 862617"];
3095 [label="sb.Append(_startPosition.Value.Character + 1); 862618"];
3096 [label="sb.Append(')'); 862619"];
3097 [label="sb.Append(')'); 862620"];
3098 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 862621"];
3099 [label="sb.Append('.WithWarningAsError(true)'); 862622"];
3100 [label="sb.Append('.WithWarningAsError(true)'); 862623"];
3101 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 862624"];
3102 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 862625"];
3103 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 862626"];
3104 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 862627"];
3105 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 862628"];
3106 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 862629"];
3107 [label="return sb.ToString(); 862630"];
3108 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862631"];
3109 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862632"];
3110 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 862633"];
3111 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 862634"];
3112 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 862635"];
3113 [label="GetDiagnosticDescription(diffDescription, indentDepth) 862636"];
3114 [label="param GetDiagnosticDescription(DiagnosticDescription d) 862637"];
3115 [label="param GetDiagnosticDescription(int indentDepth) 862638"];
3116 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862639"];
3117 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862640"];
3118 [label="var sb = new StringBuilder(); 862641"];
3119 [label="sb.Append('Diagnostic('); 862642"];
3120 [label="sb.Append('Diagnostic('); 862643"];
3121 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 862644"];
3122 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 862645"];
3123 [label="sb.Append(_errorCodeType.Name); 862646"];
3124 [label="sb.Append(_errorCodeType.Name); 862647"];
3125 [label="sb.Append('.'); 862648"];
3126 [label="sb.Append('.'); 862649"];
3127 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 862650"];
3128 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 862651"];
3129 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 862652"];
3130 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 862653"];
3131 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 862654"];
3132 [label="sb.Append(', \\''); 862655"];
3133 [label="sb.Append(', \\''); 862656"];
3134 [label="sb.Append(_squiggledText); 862657"];
3135 [label="sb.Append(_squiggledText); 862658"];
3136 [label="sb.Append('''); 862659"];
3137 [label="sb.Append('''); 862660"];
3138 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 862661"];
3139 [label="sb.Append(')'); 862662"];
3140 [label="sb.Append(')'); 862663"];
3141 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 862664"];
3142 [label="sb.Append('.WithArguments('); 862665"];
3143 [label="sb.Append('.WithArguments('); 862666"];
3144 [label="sb.Append('\\''); 862667"];
3145 [label="sb.Append('\\''); 862668"];
3146 [label="sb.Append(argumentStrings.Current); 862669"];
3147 [label="sb.Append(argumentStrings.Current); 862670"];
3148 [label="sb.Append('\\''); 862671"];
3149 [label="sb.Append('\\''); 862672"];
3150 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 862673"];
3151 [label="sb.Append(')'); 862674"];
3152 [label="sb.Append(')'); 862675"];
3153 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 862676"];
3154 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 862677"];
3155 [label="sb.Append('.WithLocation('); 862678"];
3156 [label="sb.Append('.WithLocation('); 862679"];
3157 [label="sb.Append(_startPosition.Value.Line + 1); 862680"];
3158 [label="sb.Append(_startPosition.Value.Line + 1); 862681"];
3159 [label="sb.Append(', '); 862682"];
3160 [label="sb.Append(', '); 862683"];
3161 [label="sb.Append(_startPosition.Value.Character + 1); 862684"];
3162 [label="sb.Append(_startPosition.Value.Character + 1); 862685"];
3163 [label="sb.Append(')'); 862686"];
3164 [label="sb.Append(')'); 862687"];
3165 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 862688"];
3166 [label="sb.Append('.WithWarningAsError(true)'); 862689"];
3167 [label="sb.Append('.WithWarningAsError(true)'); 862690"];
3168 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 862691"];
3169 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 862692"];
3170 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 862693"];
3171 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 862694"];
3172 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 862695"];
3173 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 862696"];
3174 [label="return sb.ToString(); 862697"];
3175 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862698"];
3176 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 862699"];
3177 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 862700"];
3178 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 862701"];
3179 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 862702"];
3180 [label="assertText.AppendLine(); 862703"];
3181 [label="assertText.AppendLine('Diff:'); 862704"];
3182 [label="assertText.AppendLine('Diff:'); 862705"];
3183 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 862706"];
3184 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 862707"];
3185 [label="new[] { '\\r', '\\n' } 862708"];
3186 [label="'\\r' 862709"];
3187 [label="'\\n' 862710"];
3188 [label="new[] { '\\r', '\\n' } 862711"];
3189 [label="new[] { '\\r', '\\n' } 862712"];
3190 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 862713"];
3191 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 862714"];
3192 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 862715"];
3193 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 862716"];
3194 [label="param DiffReport(IEnumerable<T> expected) 862717"];
3195 [label="param DiffReport(IEnumerable<T> actual) 862718"];
3196 [label="param DiffReport(string separator) 862719"];
3197 [label="param DiffReport(IEqualityComparer<T> comparer = null) 862720"];
3198 [label="param DiffReport(Func<T, string> toString = null) 862721"];
3199 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 862722"];
3200 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 862723"];
3201 [label="(comparer != null) 862724"];
3202 [label="EqualityComparer<T>.Default 862725"];
3203 [label="new LCS<T>(EqualityComparer<T>.Default) 862726"];
3204 [label="param LCS(IEqualityComparer<T> comparer) 862727"];
3205 [label="param LCS(this) 862728"];
3206 [label="1 862729"];
3207 [label="DeleteCost = 1 862730"];
3208 [label="1 862731"];
3209 [label="InsertCost = 1 862732"];
3210 [label="2 862733"];
3211 [label="UpdateCost = 2 862734"];
3212 [label="param LongestCommonSubsequence(this) 862735"];
3213 [label="_comparer 862736"];
3214 [label="_comparer 862737"];
3215 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 862738"];
3216 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 862739"];
3217 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 862740"];
3218 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 862741"];
3219 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 862742"];
3220 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 862743"];
3221 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 862744"];
3222 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 862745"];
3223 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 862746"];
3224 [label="lcs.CalculateDiff(expectedList, actualList, toString) 862747"];
3225 [label="param CalculateDiff(IList<T> sequenceA) 862748"];
3226 [label="param CalculateDiff(IList<T> sequenceB) 862749"];
3227 [label="param CalculateDiff(Func<T, string> toString) 862750"];
3228 [label="param CalculateDiff(this) 862751"];
3229 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 862752"];
3230 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 862753"];
3231 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 862754"];
3232 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 862755"];
3233 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 862756"];
3234 [label="param GetEdits(TSequence sequenceA) 862757"];
3235 [label="param GetEdits(int lengthA) 862758"];
3236 [label="param GetEdits(TSequence sequenceB) 862759"];
3237 [label="param GetEdits(int lengthB) 862760"];
3238 [label="param GetEdits(this) 862761"];
3239 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 862762"];
3240 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 862763"];
3241 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 862764"];
3242 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 862765"];
3243 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 862766"];
3244 [label="param ComputeCostMatrix(TSequence sequenceA) 862767"];
3245 [label="param ComputeCostMatrix(int lengthA) 862768"];
3246 [label="param ComputeCostMatrix(TSequence sequenceB) 862769"];
3247 [label="param ComputeCostMatrix(int lengthB) 862770"];
3248 [label="param ComputeCostMatrix(this) 862771"];
3249 [label="var la = lengthA + 1; 862772"];
3250 [label="var la = lengthA + 1; 862773"];
3251 [label="var lb = lengthB + 1; 862774"];
3252 [label="var lb = lengthB + 1; 862775"];
3253 [label="var d = new int[la, lb]; 862776"];
3254 [label="d[0, 0] = 0; 862777"];
3255 [label="d[0, 0] 862778"];
3256 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 862779"];
3257 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 862780"];
3258 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 862781"];
3259 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 862782"];
3260 [label="d[i, 0] 862783"];
3261 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 862784"];
3262 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 862785"];
3263 [label="d[0, j] = d[0, j - 1] + InsertCost; 862786"];
3264 [label="d[0, j] = d[0, j - 1] + InsertCost; 862787"];
3265 [label="d[0, j] 862788"];
3266 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 862789"];
3267 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 862790"];
3268 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 862791"];
3269 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 862792"];
3270 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 862793"];
3271 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 862794"];
3272 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 862795"];
3273 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 862796"];
3274 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 862797"];
3275 [label="param ItemsEqual(IList<T> sequenceA) 862798"];
3276 [label="param ItemsEqual(int indexA) 862799"];
3277 [label="param ItemsEqual(IList<T> sequenceB) 862800"];
3278 [label="param ItemsEqual(int indexB) 862801"];
3279 [label="param ItemsEqual(this) 862802"];
3280 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 862803"];
3281 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 862804"];
3282 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 862805"];
3283 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 862806"];
3284 [label="int m2 = d[i - 1, j] + DeleteCost; 862807"];
3285 [label="int m2 = d[i - 1, j] + DeleteCost; 862808"];
3286 [label="int m3 = d[i, j - 1] + InsertCost; 862809"];
3287 [label="int m3 = d[i, j - 1] + InsertCost; 862810"];
3288 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 862811"];
3289 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 862812"];
3290 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 862813"];
3291 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 862814"];
3292 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 862815"];
3293 [label="d[i, j] 862816"];
3294 [label="return d; 862817"];
3295 [label="int i = lengthA; 862818"];
3296 [label="int j = lengthB; 862819"];
3297 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 862820"];
3298 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 862821"];
3299 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 862822"];
3300 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 862823"];
3301 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 862824"];
3302 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 862825"];
3303 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 862826"];
3304 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 862827"];
3305 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 862828"];
3306 [label="i--; 862829"];
3307 [label="j--; 862830"];
3308 [label="yield return new Edit(EditKind.Update, i, j); 862831"];
3309 [label="yield return new Edit(EditKind.Update, i, j); 862832"];
3310 [label="yield return new Edit(EditKind.Update, i, j); 862833"];
3311 [label="yield return new Edit(EditKind.Update, i, j); 862834"];
3312 [label="new Edit(EditKind.Update, i, j) 862835"];
3313 [label="param Edit(EditKind kind) 862836"];
3314 [label="param Edit(int indexA) 862837"];
3315 [label="param Edit(int indexB) 862838"];
3316 [label="param Edit(this) 862839"];
3317 [label="this.Kind 862840"];
3318 [label="this.IndexA 862841"];
3319 [label="this.IndexB 862842"];
3320 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 862843"];
3321 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 862844"];
3322 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 862845"];
3323 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 862846"];
3324 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 862847"];
3325 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 862848"];
3326 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 862849"];
3327 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 862850"];
3328 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 862851"];
3329 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 862852"];
3330 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 862853"];
3331 [label="actualText.Free(); 862854"];
3332 [label="expectedText.Free(); 862855"];
3333 [label="return assertText.ToString(); 862856"];
3334 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 862857"];
3335 [label="TestWarnAsErrorDoesNotEmitCore(options); 862858"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 0;
11 -> 1;
12 -> 1;
13 -> 1;
14 -> 11;
14 -> 13;
15 -> 12;
15 -> 13;
16 -> 11;
16 -> 13;
17 -> 15;
17 -> 13;
18 -> 16;
18 -> 13;
19 -> 0;
19 -> 17;
19 -> 18;
19 -> 13;
20 -> 14;
20 -> 19;
20 -> 0;
20 -> 13;
21 -> 20;
21 -> 1;
22 -> 1;
23 -> 21;
23 -> 22;
24 -> 10;
24 -> 22;
25 -> 22;
26 -> 25;
26 -> 22;
27 -> 22;
28 -> 26;
28 -> 27;
29 -> 28;
29 -> 27;
30 -> 27;
31 -> 29;
31 -> 30;
32 -> 30;
33 -> 31;
33 -> 32;
33 -> 30;
34 -> 30;
34 -> 22;
35 -> 23;
35 -> 22;
36 -> 22;
37 -> 22;
38 -> 34;
38 -> 37;
39 -> 36;
39 -> 37;
40 -> 35;
40 -> 37;
41 -> 36;
41 -> 37;
42 -> 36;
42 -> 37;
43 -> 36;
43 -> 37;
44 -> 36;
44 -> 37;
45 -> 36;
45 -> 37;
46 -> 38;
46 -> 37;
47 -> 42;
47 -> 37;
48 -> 39;
48 -> 37;
49 -> 37;
50 -> 47;
50 -> 49;
51 -> 48;
51 -> 49;
52 -> 50;
52 -> 49;
53 -> 49;
54 -> 52;
54 -> 53;
55 -> 54;
55 -> 53;
56 -> 55;
57 -> 0;
57 -> 56;
58 -> 57;
59 -> 58;
60 -> 58;
61 -> 0;
61 -> 60;
62 -> 61;
62 -> 59;
62 -> 58;
63 -> 62;
63 -> 56;
64 -> 49;
65 -> 51;
65 -> 64;
65 -> 49;
66 -> 63;
66 -> 65;
67 -> 40;
67 -> 37;
68 -> 41;
68 -> 37;
69 -> 43;
69 -> 37;
70 -> 44;
70 -> 37;
71 -> 45;
71 -> 37;
72 -> 37;
73 -> 46;
73 -> 72;
74 -> 66;
74 -> 72;
75 -> 67;
75 -> 72;
76 -> 68;
76 -> 72;
77 -> 69;
77 -> 72;
78 -> 70;
78 -> 72;
79 -> 71;
79 -> 72;
80 -> 73;
80 -> 72;
81 -> 74;
81 -> 72;
82 -> 75;
82 -> 72;
83 -> 76;
83 -> 72;
84 -> 77;
84 -> 72;
85 -> 78;
85 -> 72;
86 -> 79;
86 -> 72;
87 -> 72;
88 -> 87;
88 -> 72;
89 -> 72;
90 -> 80;
90 -> 89;
91 -> 81;
91 -> 89;
92 -> 82;
92 -> 89;
93 -> 83;
93 -> 89;
94 -> 84;
94 -> 89;
95 -> 85;
95 -> 89;
96 -> 86;
96 -> 89;
97 -> 88;
97 -> 89;
98 -> 93;
98 -> 89;
99 -> 95;
99 -> 89;
100 -> 89;
101 -> 98;
101 -> 100;
102 -> 99;
102 -> 100;
103 -> 90;
103 -> 100;
104 -> 103;
104 -> 33;
104 -> 100;
105 -> 104;
106 -> 102;
106 -> 104;
107 -> 101;
107 -> 104;
108 -> 104;
109 -> 105;
109 -> 108;
110 -> 106;
110 -> 108;
111 -> 107;
111 -> 108;
112 -> 105;
112 -> 108;
113 -> 108;
114 -> 111;
114 -> 113;
114 -> 108;
115 -> 0;
115 -> 114;
116 -> 109;
116 -> 108;
117 -> 0;
117 -> 108;
118 -> 117;
118 -> 112;
118 -> 108;
119 -> 108;
120 -> 116;
120 -> 118;
120 -> 119;
120 -> 0;
120 -> 108;
121 -> 120;
121 -> 108;
122 -> 115;
122 -> 108;
123 -> 110;
123 -> 108;
124 -> 108;
125 -> 121;
125 -> 122;
125 -> 123;
125 -> 124;
125 -> 120;
125 -> 0;
125 -> 108;
126 -> 108;
127 -> 125;
127 -> 126;
128 -> 126;
129 -> 126;
130 -> 127;
130 -> 125;
130 -> 129;
130 -> 126;
131 -> 128;
131 -> 126;
132 -> 126;
133 -> 130;
133 -> 125;
133 -> 129;
133 -> 131;
133 -> 132;
133 -> 128;
133 -> 126;
134 -> 126;
135 -> 134;
135 -> 128;
135 -> 126;
136 -> 128;
136 -> 126;
137 -> 126;
138 -> 136;
138 -> 137;
138 -> 128;
138 -> 135;
138 -> 126;
139 -> 127;
139 -> 126;
140 -> 139;
140 -> 105;
140 -> 104;
141 -> 105;
141 -> 89;
142 -> 89;
143 -> 92;
143 -> 142;
143 -> 89;
144 -> 0;
144 -> 89;
145 -> 97;
145 -> 89;
146 -> 94;
146 -> 141;
146 -> 91;
146 -> 92;
146 -> 89;
147 -> 146;
147 -> 89;
148 -> 89;
149 -> 147;
149 -> 148;
150 -> 0;
150 -> 148;
151 -> 150;
152 -> 89;
153 -> 146;
153 -> 105;
153 -> 140;
153 -> 125;
153 -> 62;
153 -> 0;
153 -> 20;
153 -> 59;
153 -> 89;
154 -> 89;
155 -> 154;
156 -> 153;
156 -> 155;
156 -> 89;
157 -> 0;
159 -> 157;
159 -> 158;
160 -> 159;
161 -> 0;
163 -> 161;
163 -> 162;
165 -> 163;
165 -> 164;
166 -> 165;
167 -> 153;
167 -> 154;
168 -> 153;
168 -> 154;
169 -> 153;
169 -> 154;
170 -> 153;
170 -> 154;
171 -> 167;
171 -> 154;
172 -> 170;
172 -> 154;
173 -> 168;
173 -> 154;
174 -> 169;
174 -> 154;
175 -> 154;
176 -> 154;
177 -> 171;
177 -> 176;
178 -> 172;
178 -> 176;
179 -> 173;
179 -> 176;
180 -> 174;
180 -> 176;
181 -> 175;
181 -> 176;
182 -> 175;
182 -> 176;
183 -> 175;
183 -> 176;
184 -> 175;
184 -> 176;
185 -> 176;
186 -> 178;
186 -> 185;
186 -> 176;
187 -> 184;
187 -> 176;
188 -> 180;
188 -> 176;
189 -> 188;
189 -> 156;
189 -> 176;
190 -> 177;
190 -> 176;
191 -> 178;
191 -> 176;
192 -> 189;
192 -> 176;
193 -> 181;
193 -> 176;
194 -> 182;
194 -> 176;
195 -> 183;
195 -> 176;
196 -> 184;
196 -> 176;
197 -> 176;
198 -> 0;
198 -> 176;
199 -> 178;
199 -> 189;
199 -> 176;
200 -> 176;
201 -> 198;
201 -> 200;
202 -> 199;
202 -> 200;
203 -> 199;
203 -> 200;
204 -> 198;
204 -> 200;
205 -> 196;
205 -> 200;
206 -> 197;
206 -> 200;
207 -> 197;
207 -> 200;
208 -> 201;
208 -> 200;
209 -> 202;
209 -> 200;
210 -> 203;
210 -> 200;
211 -> 204;
211 -> 200;
212 -> 205;
212 -> 200;
213 -> 200;
214 -> 213;
214 -> 208;
214 -> 209;
214 -> 210;
214 -> 211;
214 -> 212;
214 -> 0;
214 -> 189;
214 -> 200;
215 -> 213;
215 -> 200;
216 -> 206;
216 -> 213;
216 -> 200;
217 -> 176;
218 -> 190;
218 -> 217;
219 -> 191;
219 -> 217;
220 -> 192;
220 -> 217;
221 -> 193;
221 -> 217;
222 -> 194;
222 -> 217;
223 -> 195;
223 -> 217;
224 -> 196;
224 -> 217;
225 -> 197;
225 -> 217;
226 -> 197;
226 -> 217;
227 -> 197;
227 -> 217;
228 -> 197;
228 -> 217;
229 -> 197;
229 -> 217;
230 -> 197;
230 -> 217;
231 -> 218;
231 -> 217;
232 -> 219;
232 -> 217;
233 -> 220;
233 -> 217;
234 -> 221;
234 -> 217;
235 -> 222;
235 -> 217;
236 -> 223;
236 -> 217;
237 -> 224;
237 -> 217;
238 -> 225;
238 -> 217;
239 -> 226;
239 -> 217;
240 -> 227;
240 -> 217;
241 -> 227;
241 -> 214;
241 -> 217;
242 -> 241;
242 -> 214;
242 -> 215;
242 -> 216;
242 -> 217;
243 -> 228;
243 -> 217;
244 -> 229;
244 -> 217;
245 -> 217;
246 -> 231;
246 -> 245;
247 -> 232;
247 -> 245;
248 -> 233;
248 -> 245;
249 -> 234;
249 -> 245;
250 -> 235;
250 -> 245;
251 -> 236;
251 -> 245;
252 -> 237;
252 -> 245;
253 -> 238;
253 -> 245;
254 -> 239;
254 -> 245;
255 -> 240;
255 -> 245;
256 -> 242;
256 -> 245;
257 -> 243;
257 -> 245;
258 -> 244;
258 -> 245;
259 -> 230;
259 -> 245;
260 -> 246;
260 -> 245;
261 -> 248;
261 -> 245;
262 -> 256;
262 -> 245;
263 -> 252;
263 -> 245;
264 -> 257;
264 -> 245;
265 -> 258;
265 -> 245;
266 -> 245;
267 -> 266;
267 -> 260;
267 -> 261;
267 -> 262;
267 -> 263;
267 -> 264;
267 -> 265;
267 -> 189;
267 -> 242;
267 -> 245;
268 -> 266;
268 -> 245;
269 -> 266;
269 -> 245;
270 -> 266;
270 -> 245;
271 -> 266;
271 -> 245;
272 -> 266;
272 -> 245;
273 -> 266;
273 -> 245;
274 -> 266;
274 -> 245;
275 -> 266;
275 -> 245;
276 -> 266;
276 -> 245;
277 -> 266;
277 -> 245;
278 -> 266;
278 -> 245;
279 -> 266;
279 -> 245;
280 -> 266;
280 -> 245;
281 -> 266;
281 -> 245;
282 -> 266;
282 -> 245;
283 -> 266;
283 -> 245;
284 -> 266;
284 -> 245;
285 -> 266;
285 -> 245;
286 -> 266;
286 -> 245;
287 -> 266;
287 -> 245;
288 -> 266;
288 -> 245;
289 -> 266;
289 -> 245;
290 -> 266;
290 -> 245;
291 -> 266;
291 -> 245;
292 -> 266;
292 -> 245;
293 -> 266;
293 -> 245;
294 -> 245;
295 -> 294;
295 -> 266;
295 -> 245;
296 -> 266;
296 -> 245;
297 -> 296;
297 -> 267;
297 -> 268;
297 -> 269;
297 -> 270;
297 -> 271;
297 -> 272;
297 -> 273;
297 -> 274;
297 -> 275;
297 -> 276;
297 -> 277;
297 -> 278;
297 -> 279;
297 -> 280;
297 -> 281;
297 -> 282;
297 -> 283;
297 -> 284;
297 -> 285;
297 -> 286;
297 -> 287;
297 -> 288;
297 -> 289;
297 -> 290;
297 -> 291;
297 -> 292;
297 -> 293;
297 -> 295;
297 -> 294;
297 -> 245;
298 -> 297;
298 -> 266;
298 -> 245;
299 -> 247;
299 -> 266;
299 -> 245;
300 -> 266;
300 -> 245;
301 -> 245;
302 -> 245;
303 -> 300;
303 -> 302;
304 -> 301;
304 -> 302;
305 -> 304;
305 -> 302;
306 -> 304;
306 -> 302;
307 -> 304;
307 -> 302;
308 -> 303;
308 -> 304;
308 -> 302;
309 -> 301;
309 -> 266;
309 -> 245;
310 -> 266;
310 -> 297;
310 -> 245;
311 -> 310;
311 -> 297;
311 -> 298;
311 -> 299;
311 -> 309;
311 -> 308;
311 -> 306;
311 -> 307;
311 -> 245;
312 -> 311;
312 -> 266;
312 -> 245;
313 -> 266;
313 -> 311;
313 -> 245;
314 -> 313;
314 -> 311;
314 -> 312;
314 -> 245;
315 -> 314;
315 -> 266;
315 -> 245;
316 -> 266;
316 -> 314;
316 -> 245;
317 -> 316;
317 -> 314;
317 -> 315;
317 -> 245;
318 -> 317;
318 -> 266;
318 -> 245;
319 -> 266;
319 -> 317;
319 -> 245;
320 -> 319;
320 -> 317;
320 -> 318;
320 -> 245;
321 -> 320;
321 -> 266;
321 -> 245;
322 -> 266;
322 -> 245;
323 -> 322;
323 -> 320;
323 -> 321;
323 -> 245;
324 -> 323;
324 -> 266;
324 -> 245;
325 -> 255;
325 -> 323;
325 -> 245;
326 -> 245;
327 -> 325;
327 -> 326;
328 -> 326;
329 -> 327;
329 -> 326;
330 -> 329;
330 -> 323;
330 -> 324;
330 -> 326;
331 -> 0;
331 -> 326;
332 -> 331;
332 -> 328;
332 -> 326;
333 -> 332;
333 -> 245;
334 -> 333;
334 -> 266;
334 -> 245;
335 -> 252;
335 -> 245;
336 -> 335;
337 -> 249;
337 -> 336;
337 -> 335;
338 -> 250;
338 -> 336;
338 -> 335;
339 -> 337;
339 -> 338;
339 -> 335;
340 -> 251;
340 -> 336;
340 -> 335;
341 -> 339;
341 -> 340;
341 -> 335;
342 -> 254;
342 -> 245;
343 -> 266;
343 -> 323;
343 -> 324;
343 -> 334;
343 -> 342;
344 -> 342;
345 -> 266;
345 -> 344;
346 -> 345;
346 -> 343;
346 -> 344;
347 -> 253;
347 -> 342;
348 -> 343;
348 -> 346;
348 -> 347;
348 -> 342;
349 -> 348;
349 -> 266;
349 -> 342;
350 -> 255;
350 -> 266;
350 -> 245;
351 -> 266;
351 -> 348;
351 -> 245;
352 -> 245;
353 -> 266;
353 -> 348;
353 -> 352;
353 -> 245;
354 -> 176;
355 -> 179;
355 -> 354;
355 -> 176;
356 -> 179;
356 -> 355;
357 -> 355;
358 -> 356;
358 -> 357;
359 -> 197;
359 -> 357;
360 -> 357;
361 -> 358;
361 -> 360;
361 -> 357;
362 -> 358;
362 -> 357;
363 -> 362;
363 -> 348;
363 -> 349;
363 -> 350;
363 -> 357;
364 -> 357;
365 -> 359;
365 -> 363;
365 -> 357;
366 -> 364;
366 -> 357;
367 -> 365;
367 -> 363;
367 -> 357;
368 -> 366;
368 -> 367;
368 -> 364;
368 -> 363;
368 -> 357;
369 -> 357;
370 -> 357;
371 -> 358;
371 -> 357;
372 -> 371;
372 -> 368;
372 -> 357;
373 -> 372;
374 -> 372;
375 -> 372;
376 -> 359;
376 -> 375;
376 -> 372;
377 -> 372;
378 -> 364;
378 -> 377;
378 -> 375;
378 -> 372;
379 -> 369;
379 -> 372;
379 -> 378;
380 -> 370;
380 -> 372;
381 -> 364;
381 -> 378;
381 -> 357;
382 -> 359;
382 -> 381;
382 -> 357;
383 -> 358;
383 -> 357;
384 -> 357;
385 -> 383;
385 -> 384;
386 -> 365;
386 -> 384;
387 -> 386;
387 -> 381;
387 -> 384;
388 -> 386;
388 -> 381;
388 -> 384;
389 -> 386;
389 -> 381;
389 -> 384;
390 -> 386;
390 -> 381;
390 -> 384;
391 -> 386;
391 -> 381;
391 -> 384;
392 -> 385;
392 -> 384;
393 -> 386;
393 -> 381;
393 -> 392;
393 -> 384;
394 -> 384;
395 -> 391;
395 -> 394;
395 -> 384;
396 -> 393;
396 -> 395;
397 -> 395;
398 -> 396;
398 -> 397;
399 -> 386;
399 -> 397;
400 -> 398;
400 -> 397;
401 -> 399;
401 -> 393;
401 -> 397;
402 -> 397;
403 -> 397;
404 -> 400;
404 -> 403;
405 -> 401;
405 -> 403;
406 -> 401;
406 -> 403;
407 -> 401;
407 -> 403;
408 -> 401;
408 -> 403;
409 -> 402;
409 -> 403;
410 -> 402;
410 -> 403;
411 -> 403;
411 -> 404;
411 -> 405;
411 -> 406;
411 -> 407;
411 -> 408;
411 -> 393;
412 -> 402;
412 -> 395;
413 -> 412;
413 -> 357;
414 -> 359;
414 -> 411;
414 -> 357;
415 -> 379;
415 -> 357;
416 -> 413;
416 -> 357;
417 -> 357;
418 -> 414;
418 -> 417;
419 -> 415;
419 -> 417;
420 -> 416;
420 -> 417;
421 -> 359;
421 -> 417;
422 -> 421;
422 -> 411;
422 -> 417;
423 -> 417;
424 -> 421;
424 -> 423;
425 -> 424;
425 -> 411;
425 -> 423;
426 -> 425;
426 -> 423;
427 -> 426;
427 -> 417;
428 -> 421;
428 -> 411;
428 -> 403;
428 -> 409;
428 -> 417;
429 -> 417;
430 -> 428;
430 -> 429;
431 -> 430;
431 -> 428;
431 -> 429;
432 -> 417;
433 -> 431;
433 -> 432;
434 -> 418;
434 -> 417;
435 -> 419;
435 -> 417;
436 -> 420;
436 -> 417;
437 -> 417;
438 -> 417;
439 -> 422;
439 -> 438;
440 -> 422;
440 -> 438;
441 -> 422;
441 -> 438;
442 -> 427;
442 -> 438;
443 -> 431;
443 -> 438;
444 -> 433;
444 -> 438;
445 -> 433;
445 -> 438;
446 -> 434;
446 -> 438;
447 -> 435;
447 -> 438;
448 -> 436;
448 -> 438;
449 -> 433;
449 -> 438;
450 -> 437;
450 -> 438;
451 -> 437;
451 -> 438;
452 -> 442;
452 -> 438;
453 -> 443;
453 -> 438;
454 -> 444;
454 -> 438;
455 -> 448;
455 -> 433;
455 -> 438;
456 -> 450;
456 -> 438;
457 -> 438;
458 -> 452;
458 -> 457;
459 -> 453;
459 -> 457;
460 -> 454;
460 -> 457;
461 -> 456;
461 -> 457;
462 -> 451;
462 -> 457;
463 -> 461;
463 -> 457;
464 -> 457;
465 -> 464;
465 -> 457;
466 -> 464;
466 -> 457;
467 -> 464;
467 -> 457;
468 -> 464;
468 -> 457;
469 -> 464;
469 -> 457;
470 -> 464;
470 -> 457;
471 -> 464;
471 -> 457;
472 -> 464;
472 -> 457;
473 -> 464;
473 -> 457;
474 -> 464;
474 -> 457;
475 -> 464;
475 -> 457;
476 -> 464;
476 -> 457;
477 -> 464;
477 -> 457;
478 -> 464;
478 -> 457;
479 -> 464;
479 -> 457;
480 -> 464;
480 -> 457;
481 -> 464;
481 -> 457;
482 -> 464;
482 -> 457;
483 -> 464;
483 -> 457;
484 -> 464;
484 -> 457;
485 -> 464;
485 -> 457;
486 -> 464;
486 -> 457;
487 -> 464;
487 -> 457;
488 -> 464;
488 -> 457;
489 -> 464;
489 -> 457;
490 -> 464;
490 -> 457;
491 -> 457;
492 -> 491;
492 -> 464;
492 -> 457;
493 -> 464;
493 -> 457;
494 -> 464;
494 -> 457;
495 -> 457;
496 -> 457;
497 -> 494;
497 -> 496;
498 -> 495;
498 -> 496;
499 -> 498;
499 -> 496;
500 -> 498;
500 -> 496;
501 -> 498;
501 -> 496;
502 -> 497;
502 -> 498;
502 -> 496;
503 -> 495;
503 -> 464;
503 -> 457;
504 -> 464;
504 -> 457;
505 -> 457;
506 -> 455;
506 -> 505;
507 -> 505;
508 -> 506;
508 -> 505;
509 -> 508;
509 -> 455;
510 -> 508;
511 -> 509;
511 -> 510;
512 -> 445;
512 -> 457;
513 -> 512;
514 -> 458;
514 -> 513;
514 -> 512;
515 -> 459;
515 -> 513;
515 -> 512;
516 -> 514;
516 -> 515;
516 -> 512;
517 -> 460;
517 -> 513;
517 -> 512;
518 -> 516;
518 -> 517;
518 -> 512;
519 -> 446;
519 -> 447;
520 -> 464;
520 -> 447;
521 -> 446;
521 -> 520;
521 -> 455;
521 -> 511;
521 -> 447;
522 -> 446;
522 -> 464;
522 -> 447;
523 -> 464;
523 -> 521;
523 -> 457;
524 -> 457;
525 -> 464;
525 -> 521;
525 -> 524;
525 -> 457;
526 -> 437;
526 -> 357;
527 -> 526;
527 -> 355;
528 -> 527;
528 -> 521;
528 -> 176;
529 -> 527;
529 -> 176;
530 -> 153;
530 -> 529;
530 -> 521;
530 -> 522;
530 -> 448;
530 -> 89;
531 -> 530;
531 -> 89;
532 -> 89;
533 -> 531;
533 -> 532;
534 -> 532;
535 -> 533;
535 -> 534;
536 -> 534;
537 -> 535;
537 -> 530;
537 -> 536;
538 -> 536;
539 -> 537;
539 -> 530;
539 -> 538;
539 -> 536;
540 -> 537;
540 -> 530;
540 -> 539;
541 -> 539;
542 -> 540;
542 -> 541;
543 -> 540;
543 -> 541;
544 -> 540;
544 -> 541;
545 -> 540;
545 -> 541;
546 -> 540;
546 -> 541;
547 -> 541;
548 -> 541;
549 -> 541;
550 -> 541;
551 -> 541;
552 -> 0;
552 -> 541;
553 -> 542;
553 -> 541;
554 -> 547;
554 -> 553;
555 -> 553;
556 -> 543;
556 -> 553;
557 -> 544;
557 -> 553;
558 -> 545;
558 -> 553;
559 -> 546;
559 -> 553;
560 -> 548;
560 -> 553;
561 -> 549;
561 -> 553;
562 -> 550;
562 -> 553;
563 -> 551;
563 -> 553;
564 -> 552;
564 -> 553;
565 -> 553;
566 -> 554;
566 -> 565;
567 -> 555;
567 -> 565;
568 -> 556;
568 -> 565;
569 -> 557;
569 -> 565;
570 -> 558;
570 -> 565;
571 -> 559;
571 -> 565;
572 -> 560;
572 -> 565;
573 -> 561;
573 -> 565;
574 -> 562;
574 -> 565;
575 -> 563;
575 -> 565;
576 -> 564;
576 -> 565;
577 -> 567;
577 -> 530;
577 -> 565;
578 -> 577;
578 -> 0;
578 -> 565;
579 -> 567;
579 -> 565;
580 -> 568;
580 -> 565;
581 -> 571;
581 -> 565;
582 -> 575;
582 -> 565;
583 -> 576;
583 -> 565;
584 -> 565;
585 -> 579;
585 -> 584;
586 -> 580;
586 -> 584;
587 -> 581;
587 -> 584;
588 -> 582;
588 -> 584;
589 -> 583;
589 -> 584;
590 -> 585;
590 -> 586;
590 -> 587;
590 -> 584;
591 -> 585;
591 -> 584;
592 -> 590;
592 -> 584;
593 -> 588;
593 -> 591;
593 -> 592;
593 -> 551;
593 -> 590;
593 -> 584;
594 -> 590;
594 -> 584;
595 -> 589;
595 -> 594;
595 -> 0;
595 -> 593;
595 -> 584;
596 -> 565;
597 -> 567;
597 -> 565;
598 -> 566;
598 -> 597;
598 -> 547;
598 -> 595;
598 -> 565;
599 -> 567;
599 -> 565;
600 -> 572;
600 -> 548;
600 -> 565;
601 -> 572;
601 -> 599;
601 -> 600;
601 -> 548;
601 -> 598;
601 -> 565;
602 -> 547;
602 -> 601;
602 -> 541;
603 -> 548;
603 -> 601;
603 -> 541;
604 -> 549;
604 -> 541;
605 -> 550;
605 -> 541;
606 -> 595;
606 -> 541;
607 -> 541;
608 -> 541;
609 -> 602;
609 -> 608;
610 -> 603;
610 -> 608;
611 -> 604;
611 -> 608;
612 -> 605;
612 -> 608;
613 -> 603;
613 -> 608;
614 -> 606;
614 -> 608;
615 -> 607;
615 -> 608;
616 -> 615;
616 -> 608;
617 -> 615;
617 -> 608;
618 -> 615;
618 -> 608;
619 -> 615;
619 -> 608;
620 -> 615;
620 -> 608;
621 -> 609;
621 -> 608;
622 -> 609;
622 -> 602;
622 -> 608;
623 -> 609;
623 -> 608;
624 -> 613;
624 -> 621;
624 -> 608;
625 -> 0;
625 -> 608;
626 -> 609;
626 -> 615;
626 -> 608;
627 -> 610;
627 -> 615;
627 -> 608;
628 -> 611;
628 -> 615;
628 -> 608;
629 -> 612;
629 -> 615;
629 -> 608;
630 -> 613;
630 -> 615;
630 -> 608;
631 -> 614;
631 -> 615;
631 -> 608;
632 -> 607;
632 -> 539;
633 -> 539;
634 -> 540;
634 -> 632;
634 -> 633;
634 -> 627;
634 -> 628;
634 -> 629;
634 -> 630;
634 -> 631;
634 -> 626;
634 -> 624;
634 -> 602;
634 -> 604;
634 -> 605;
634 -> 539;
635 -> 537;
635 -> 634;
635 -> 536;
636 -> 635;
636 -> 534;
637 -> 636;
637 -> 532;
638 -> 637;
638 -> 634;
638 -> 532;
639 -> 532;
640 -> 637;
640 -> 639;
640 -> 634;
640 -> 532;
641 -> 0;
641 -> 532;
642 -> 640;
642 -> 641;
642 -> 532;
643 -> 96;
643 -> 642;
643 -> 89;
644 -> 530;
644 -> 89;
645 -> 22;
646 -> 22;
647 -> 22;
648 -> 22;
649 -> 648;
649 -> 644;
649 -> 642;
649 -> 22;
650 -> 649;
650 -> 648;
651 -> 649;
651 -> 648;
652 -> 648;
653 -> 651;
653 -> 652;
654 -> 652;
655 -> 653;
655 -> 654;
656 -> 655;
656 -> 649;
656 -> 654;
657 -> 655;
657 -> 656;
658 -> 656;
659 -> 657;
659 -> 658;
660 -> 658;
661 -> 659;
661 -> 660;
662 -> 660;
663 -> 661;
663 -> 657;
663 -> 662;
664 -> 663;
664 -> 660;
665 -> 664;
665 -> 658;
666 -> 657;
666 -> 658;
667 -> 666;
667 -> 665;
667 -> 658;
668 -> 657;
668 -> 658;
669 -> 658;
670 -> 655;
670 -> 667;
670 -> 656;
671 -> 655;
671 -> 667;
671 -> 654;
672 -> 671;
672 -> 652;
673 -> 653;
673 -> 667;
673 -> 652;
674 -> 653;
674 -> 673;
674 -> 652;
675 -> 674;
675 -> 648;
676 -> 675;
676 -> 673;
676 -> 648;
677 -> 648;
678 -> 676;
678 -> 677;
679 -> 677;
680 -> 678;
680 -> 679;
681 -> 679;
682 -> 681;
683 -> 680;
683 -> 677;
684 -> 678;
684 -> 677;
685 -> 677;
686 -> 685;
687 -> 686;
688 -> 676;
688 -> 677;
689 -> 648;
690 -> 683;
690 -> 689;
691 -> 650;
691 -> 648;
692 -> 648;
693 -> 651;
693 -> 692;
694 -> 693;
694 -> 690;
694 -> 692;
695 -> 694;
695 -> 648;
696 -> 690;
696 -> 648;
697 -> 648;
698 -> 651;
698 -> 697;
699 -> 697;
700 -> 698;
700 -> 699;
701 -> 699;
702 -> 700;
702 -> 701;
703 -> 701;
704 -> 702;
704 -> 703;
705 -> 704;
705 -> 690;
705 -> 703;
706 -> 704;
706 -> 690;
706 -> 703;
707 -> 706;
707 -> 701;
708 -> 702;
708 -> 690;
708 -> 701;
709 -> 708;
709 -> 699;
710 -> 709;
710 -> 697;
711 -> 697;
712 -> 710;
712 -> 648;
713 -> 648;
714 -> 651;
714 -> 713;
715 -> 713;
716 -> 714;
716 -> 715;
717 -> 715;
718 -> 716;
718 -> 717;
719 -> 717;
720 -> 718;
720 -> 719;
721 -> 720;
721 -> 710;
721 -> 719;
722 -> 720;
722 -> 710;
722 -> 719;
723 -> 722;
723 -> 717;
724 -> 718;
724 -> 710;
724 -> 717;
725 -> 713;
726 -> 724;
726 -> 648;
727 -> 696;
727 -> 675;
727 -> 724;
727 -> 648;
728 -> 648;
729 -> 728;
729 -> 675;
729 -> 724;
729 -> 648;
730 -> 675;
730 -> 724;
730 -> 648;
731 -> 691;
731 -> 695;
731 -> 696;
731 -> 712;
731 -> 726;
731 -> 727;
731 -> 730;
731 -> 729;
731 -> 724;
731 -> 648;
732 -> 649;
732 -> 648;
733 -> 645;
733 -> 22;
734 -> 646;
734 -> 22;
735 -> 647;
735 -> 22;
736 -> 731;
736 -> 22;
737 -> 22;
738 -> 733;
738 -> 734;
738 -> 735;
738 -> 736;
738 -> 737;
738 -> 644;
738 -> 645;
738 -> 646;
738 -> 647;
738 -> 731;
738 -> 22;
739 -> 738;
739 -> 737;
740 -> 739;
740 -> 738;
740 -> 737;
741 -> 738;
741 -> 737;
742 -> 738;
742 -> 737;
743 -> 738;
743 -> 737;
744 -> 738;
744 -> 737;
745 -> 738;
745 -> 737;
746 -> 738;
746 -> 737;
747 -> 738;
747 -> 737;
748 -> 738;
748 -> 737;
749 -> 738;
749 -> 737;
750 -> 749;
750 -> 740;
750 -> 737;
751 -> 741;
751 -> 737;
752 -> 747;
752 -> 737;
753 -> 737;
754 -> 751;
754 -> 753;
755 -> 752;
755 -> 753;
756 -> 749;
756 -> 753;
757 -> 754;
757 -> 753;
758 -> 753;
759 -> 757;
759 -> 758;
760 -> 756;
760 -> 758;
761 -> 758;
762 -> 760;
762 -> 761;
763 -> 761;
764 -> 763;
765 -> 762;
765 -> 740;
765 -> 764;
766 -> 762;
766 -> 740;
766 -> 764;
767 -> 766;
767 -> 763;
768 -> 762;
768 -> 740;
768 -> 763;
769 -> 768;
769 -> 758;
770 -> 769;
770 -> 758;
771 -> 769;
771 -> 768;
771 -> 770;
772 -> 771;
772 -> 753;
773 -> 753;
774 -> 772;
774 -> 773;
774 -> 753;
775 -> 772;
775 -> 774;
776 -> 775;
776 -> 737;
777 -> 737;
778 -> 776;
778 -> 777;
778 -> 737;
779 -> 741;
779 -> 737;
780 -> 776;
780 -> 737;
781 -> 737;
782 -> 779;
782 -> 780;
782 -> 781;
782 -> 749;
782 -> 768;
782 -> 737;
783 -> 782;
783 -> 781;
784 -> 781;
785 -> 783;
785 -> 784;
786 -> 784;
787 -> 785;
787 -> 782;
787 -> 786;
788 -> 787;
788 -> 784;
789 -> 785;
789 -> 781;
790 -> 781;
791 -> 789;
791 -> 790;
792 -> 782;
792 -> 781;
793 -> 781;
794 -> 792;
794 -> 793;
795 -> 793;
796 -> 794;
796 -> 791;
796 -> 795;
797 -> 794;
797 -> 791;
797 -> 795;
798 -> 797;
798 -> 793;
799 -> 794;
799 -> 791;
799 -> 793;
800 -> 799;
800 -> 781;
801 -> 782;
801 -> 781;
802 -> 781;
803 -> 782;
803 -> 802;
803 -> 800;
803 -> 737;
804 -> 737;
805 -> 745;
805 -> 804;
805 -> 737;
806 -> 805;
807 -> 737;
808 -> 749;
808 -> 803;
808 -> 737;
809 -> 749;
809 -> 803;
809 -> 808;
810 -> 809;
810 -> 808;
811 -> 749;
811 -> 803;
811 -> 810;
812 -> 808;
813 -> 812;
813 -> 803;
814 -> 813;
814 -> 812;
815 -> 812;
815 -> 803;
815 -> 811;
816 -> 815;
816 -> 808;
817 -> 741;
817 -> 808;
818 -> 811;
818 -> 808;
819 -> 803;
819 -> 808;
820 -> 806;
820 -> 808;
821 -> 808;
822 -> 808;
823 -> 816;
823 -> 822;
824 -> 817;
824 -> 822;
825 -> 818;
825 -> 822;
826 -> 819;
826 -> 822;
827 -> 820;
827 -> 822;
828 -> 821;
828 -> 822;
829 -> 823;
829 -> 822;
830 -> 824;
830 -> 822;
831 -> 825;
831 -> 822;
832 -> 826;
832 -> 822;
833 -> 827;
833 -> 822;
834 -> 0;
834 -> 822;
835 -> 822;
836 -> 829;
836 -> 835;
837 -> 830;
837 -> 835;
838 -> 831;
838 -> 835;
839 -> 832;
839 -> 835;
840 -> 833;
840 -> 835;
841 -> 834;
841 -> 835;
842 -> 828;
842 -> 835;
843 -> 835;
844 -> 836;
844 -> 815;
844 -> 843;
844 -> 835;
845 -> 837;
845 -> 835;
846 -> 838;
846 -> 835;
847 -> 839;
847 -> 835;
848 -> 840;
848 -> 835;
849 -> 835;
850 -> 844;
850 -> 849;
851 -> 845;
851 -> 849;
852 -> 846;
852 -> 849;
853 -> 847;
853 -> 849;
854 -> 848;
854 -> 849;
855 -> 842;
855 -> 849;
856 -> 850;
856 -> 844;
856 -> 849;
857 -> 850;
857 -> 849;
858 -> 853;
858 -> 849;
859 -> 854;
859 -> 849;
860 -> 852;
860 -> 849;
861 -> 851;
861 -> 849;
862 -> 849;
863 -> 862;
864 -> 849;
865 -> 864;
865 -> 856;
865 -> 857;
865 -> 858;
865 -> 859;
865 -> 860;
865 -> 861;
865 -> 862;
865 -> 844;
865 -> 806;
865 -> 863;
865 -> 849;
866 -> 865;
866 -> 864;
867 -> 864;
868 -> 865;
868 -> 867;
868 -> 849;
869 -> 849;
870 -> 869;
870 -> 864;
870 -> 849;
871 -> 0;
871 -> 849;
872 -> 871;
872 -> 0;
872 -> 849;
873 -> 872;
873 -> 864;
873 -> 849;
874 -> 849;
875 -> 874;
875 -> 864;
875 -> 849;
876 -> 864;
876 -> 849;
877 -> 864;
877 -> 849;
878 -> 864;
878 -> 849;
879 -> 864;
879 -> 849;
880 -> 864;
880 -> 849;
881 -> 850;
881 -> 868;
881 -> 849;
882 -> 881;
882 -> 0;
882 -> 849;
883 -> 882;
883 -> 849;
884 -> 883;
884 -> 864;
884 -> 849;
885 -> 864;
885 -> 868;
885 -> 870;
885 -> 849;
886 -> 850;
886 -> 849;
887 -> 864;
887 -> 849;
888 -> 885;
888 -> 886;
888 -> 887;
888 -> 868;
888 -> 870;
888 -> 873;
888 -> 875;
888 -> 876;
888 -> 877;
888 -> 884;
888 -> 878;
888 -> 879;
888 -> 880;
888 -> 869;
888 -> 872;
888 -> 874;
888 -> 849;
889 -> 850;
889 -> 888;
889 -> 849;
890 -> 842;
890 -> 835;
891 -> 842;
891 -> 835;
892 -> 842;
892 -> 835;
893 -> 842;
893 -> 835;
894 -> 842;
894 -> 835;
895 -> 842;
895 -> 835;
896 -> 842;
896 -> 835;
897 -> 842;
897 -> 835;
898 -> 842;
898 -> 835;
899 -> 842;
899 -> 835;
900 -> 836;
900 -> 835;
901 -> 836;
901 -> 842;
901 -> 835;
902 -> 841;
902 -> 835;
903 -> 902;
903 -> 842;
903 -> 835;
904 -> 835;
905 -> 837;
905 -> 888;
905 -> 904;
905 -> 835;
906 -> 905;
906 -> 835;
907 -> 836;
907 -> 888;
907 -> 906;
908 -> 836;
908 -> 888;
908 -> 907;
908 -> 842;
908 -> 835;
909 -> 842;
909 -> 888;
909 -> 835;
910 -> 836;
910 -> 835;
911 -> 842;
911 -> 835;
912 -> 909;
912 -> 910;
912 -> 911;
912 -> 888;
912 -> 890;
912 -> 901;
912 -> 891;
912 -> 892;
912 -> 893;
912 -> 894;
912 -> 895;
912 -> 896;
912 -> 897;
912 -> 898;
912 -> 899;
912 -> 908;
912 -> 903;
912 -> 907;
912 -> 902;
912 -> 835;
913 -> 737;
914 -> 742;
914 -> 913;
914 -> 737;
915 -> 743;
915 -> 821;
915 -> 737;
916 -> 737;
917 -> 744;
917 -> 916;
917 -> 737;
918 -> 737;
919 -> 746;
919 -> 918;
919 -> 737;
920 -> 821;
920 -> 737;
921 -> 738;
921 -> 920;
921 -> 912;
921 -> 915;
921 -> 22;
922 -> 738;
922 -> 737;
923 -> 738;
923 -> 737;
924 -> 738;
924 -> 737;
925 -> 738;
925 -> 737;
926 -> 738;
926 -> 737;
927 -> 738;
927 -> 737;
928 -> 738;
928 -> 737;
929 -> 738;
929 -> 737;
930 -> 737;
931 -> 924;
931 -> 737;
932 -> 926;
932 -> 737;
933 -> 0;
933 -> 737;
934 -> 737;
935 -> 928;
935 -> 737;
936 -> 737;
937 -> 933;
937 -> 936;
938 -> 934;
938 -> 936;
939 -> 935;
939 -> 936;
940 -> 929;
940 -> 936;
941 -> 936;
942 -> 937;
942 -> 936;
943 -> 938;
943 -> 936;
944 -> 941;
944 -> 936;
945 -> 939;
945 -> 936;
946 -> 936;
947 -> 942;
947 -> 946;
948 -> 943;
948 -> 946;
949 -> 944;
949 -> 946;
950 -> 945;
950 -> 946;
951 -> 940;
951 -> 946;
952 -> 946;
953 -> 947;
953 -> 0;
953 -> 946;
954 -> 953;
954 -> 948;
954 -> 946;
955 -> 954;
956 -> 951;
956 -> 955;
957 -> 955;
958 -> 956;
958 -> 921;
958 -> 957;
959 -> 957;
960 -> 958;
960 -> 954;
961 -> 954;
962 -> 951;
962 -> 961;
963 -> 962;
963 -> 921;
963 -> 961;
964 -> 963;
964 -> 954;
965 -> 964;
966 -> 960;
966 -> 921;
966 -> 964;
967 -> 950;
967 -> 964;
968 -> 965;
968 -> 966;
968 -> 967;
968 -> 921;
968 -> 964;
969 -> 968;
969 -> 965;
970 -> 968;
970 -> 965;
971 -> 968;
971 -> 965;
972 -> 968;
972 -> 965;
973 -> 965;
974 -> 973;
974 -> 965;
975 -> 965;
976 -> 970;
976 -> 975;
977 -> 976;
977 -> 965;
978 -> 971;
978 -> 965;
979 -> 973;
979 -> 965;
980 -> 977;
980 -> 968;
980 -> 978;
980 -> 979;
980 -> 974;
980 -> 965;
981 -> 954;
982 -> 960;
982 -> 954;
983 -> 950;
983 -> 921;
983 -> 980;
983 -> 982;
984 -> 982;
984 -> 921;
984 -> 983;
985 -> 947;
985 -> 0;
985 -> 946;
986 -> 952;
986 -> 985;
987 -> 986;
987 -> 951;
987 -> 952;
987 -> 983;
987 -> 985;
988 -> 985;
989 -> 985;
990 -> 951;
990 -> 989;
991 -> 990;
991 -> 987;
991 -> 989;
992 -> 991;
992 -> 985;
993 -> 985;
994 -> 951;
994 -> 993;
995 -> 994;
995 -> 992;
995 -> 993;
996 -> 995;
996 -> 985;
997 -> 950;
997 -> 992;
997 -> 985;
998 -> 985;
999 -> 951;
999 -> 998;
1000 -> 999;
1000 -> 997;
1000 -> 998;
1001 -> 999;
1001 -> 997;
1001 -> 998;
1002 -> 1001;
1002 -> 985;
1003 -> 950;
1003 -> 1002;
1003 -> 985;
1004 -> 950;
1004 -> 985;
1005 -> 985;
1006 -> 985;
1007 -> 1005;
1007 -> 1006;
1008 -> 1005;
1008 -> 1006;
1009 -> 1005;
1009 -> 1006;
1010 -> 1004;
1010 -> 1006;
1011 -> 951;
1011 -> 1006;
1012 -> 1006;
1013 -> 1011;
1013 -> 1012;
1014 -> 1013;
1014 -> 1003;
1014 -> 1012;
1015 -> 1012;
1016 -> 1014;
1016 -> 1015;
1017 -> 1016;
1017 -> 1015;
1018 -> 1017;
1018 -> 1014;
1018 -> 1015;
1019 -> 1015;
1020 -> 1018;
1020 -> 1019;
1021 -> 1020;
1021 -> 1018;
1021 -> 1019;
1022 -> 1021;
1022 -> 1019;
1023 -> 1022;
1023 -> 1006;
1024 -> 1010;
1024 -> 1006;
1025 -> 1023;
1025 -> 1024;
1025 -> 1022;
1025 -> 1003;
1025 -> 1006;
1026 -> 1006;
1027 -> 1006;
1028 -> 1007;
1028 -> 1027;
1028 -> 1006;
1029 -> 1006;
1030 -> 1011;
1030 -> 1029;
1031 -> 1029;
1032 -> 1031;
1033 -> 1030;
1033 -> 1025;
1033 -> 1032;
1034 -> 1030;
1034 -> 1025;
1034 -> 1032;
1035 -> 1034;
1035 -> 1031;
1036 -> 1030;
1036 -> 1025;
1036 -> 1031;
1037 -> 1036;
1037 -> 1006;
1038 -> 1026;
1038 -> 1006;
1039 -> 1010;
1039 -> 1006;
1040 -> 1038;
1040 -> 1039;
1040 -> 1037;
1040 -> 1003;
1040 -> 1036;
1040 -> 1006;
1041 -> 1006;
1042 -> 1041;
1043 -> 1042;
1044 -> 1040;
1044 -> 1042;
1045 -> 1041;
1046 -> 1045;
1047 -> 1046;
1048 -> 1041;
1049 -> 1048;
1050 -> 1049;
1051 -> 1040;
1051 -> 1041;
1052 -> 1051;
1052 -> 1040;
1052 -> 1041;
1053 -> 1041;
1054 -> 1051;
1054 -> 1040;
1054 -> 1053;
1054 -> 1041;
1055 -> 1054;
1056 -> 1051;
1056 -> 1040;
1056 -> 1054;
1057 -> 1055;
1057 -> 1054;
1058 -> 1054;
1059 -> 1051;
1059 -> 1057;
1059 -> 1041;
1060 -> 1040;
1060 -> 1041;
1061 -> 1040;
1061 -> 1041;
1062 -> 1061;
1062 -> 1059;
1062 -> 1041;
1063 -> 1040;
1063 -> 1041;
1064 -> 1040;
1064 -> 1041;
1065 -> 1041;
1066 -> 1064;
1066 -> 1065;
1067 -> 1066;
1067 -> 1059;
1067 -> 1065;
1068 -> 1066;
1068 -> 1059;
1068 -> 1065;
1069 -> 1068;
1069 -> 1041;
1070 -> 1041;
1071 -> 1070;
1071 -> 1069;
1071 -> 1059;
1071 -> 1041;
1072 -> 1070;
1072 -> 1071;
1073 -> 1069;
1073 -> 1072;
1073 -> 1070;
1074 -> 1063;
1074 -> 1073;
1074 -> 1072;
1075 -> 1040;
1075 -> 1041;
1076 -> 1075;
1076 -> 1074;
1076 -> 1041;
1077 -> 1076;
1077 -> 1042;
1078 -> 1040;
1078 -> 1041;
1079 -> 1040;
1079 -> 1041;
1080 -> 1078;
1080 -> 0;
1080 -> 1041;
1081 -> 1041;
1082 -> 1078;
1082 -> 1041;
1083 -> 1079;
1083 -> 1082;
1083 -> 1076;
1083 -> 1041;
1084 -> 1083;
1085 -> 1084;
1086 -> 1084;
1086 -> 1083;
1087 -> 1078;
1087 -> 1083;
1088 -> 1086;
1088 -> 1078;
1088 -> 1041;
1089 -> 1086;
1089 -> 1041;
1090 -> 1040;
1090 -> 1041;
1091 -> 1040;
1091 -> 1041;
1092 -> 1090;
1092 -> 1089;
1092 -> 1041;
1093 -> 1041;
1094 -> 1041;
1095 -> 1092;
1095 -> 1094;
1096 -> 1093;
1096 -> 1094;
1097 -> 1091;
1097 -> 1094;
1098 -> 1096;
1098 -> 1094;
1099 -> 1095;
1099 -> 1094;
1100 -> 1094;
1101 -> 1097;
1101 -> 1089;
1101 -> 1094;
1102 -> 1094;
1103 -> 1099;
1103 -> 1102;
1104 -> 1100;
1104 -> 1102;
1105 -> 1101;
1105 -> 1102;
1106 -> 1097;
1106 -> 1102;
1107 -> 1105;
1107 -> 1102;
1108 -> 1104;
1108 -> 1102;
1109 -> 1106;
1109 -> 1089;
1109 -> 1108;
1110 -> 1106;
1110 -> 1089;
1110 -> 1109;
1110 -> 1102;
1111 -> 1107;
1111 -> 1110;
1111 -> 1089;
1111 -> 1109;
1111 -> 1102;
1112 -> 1103;
1112 -> 1102;
1113 -> 1102;
1114 -> 1112;
1114 -> 1113;
1115 -> 1106;
1115 -> 1113;
1116 -> 1114;
1116 -> 1113;
1117 -> 1113;
1118 -> 1116;
1118 -> 1117;
1119 -> 1115;
1119 -> 1117;
1120 -> 1117;
1121 -> 1118;
1121 -> 1120;
1121 -> 1117;
1122 -> 1117;
1123 -> 1119;
1123 -> 1111;
1123 -> 1122;
1124 -> 1122;
1125 -> 1123;
1125 -> 1117;
1126 -> 1118;
1126 -> 1117;
1127 -> 1125;
1127 -> 1111;
1127 -> 1126;
1127 -> 1117;
1128 -> 1113;
1129 -> 1115;
1129 -> 1127;
1129 -> 1128;
1130 -> 1128;
1131 -> 1129;
1131 -> 1113;
1132 -> 1111;
1132 -> 1102;
1133 -> 1102;
1134 -> 1132;
1134 -> 1133;
1134 -> 1102;
1135 -> 1134;
1136 -> 1135;
1136 -> 1131;
1137 -> 1136;
1137 -> 1134;
1138 -> 1111;
1138 -> 1134;
1139 -> 1137;
1139 -> 1134;
1140 -> 1134;
1141 -> 1102;
1142 -> 1139;
1142 -> 1131;
1142 -> 1102;
1143 -> 1102;
1144 -> 1142;
1144 -> 1143;
1144 -> 1102;
1145 -> 1103;
1145 -> 1102;
1146 -> 1104;
1146 -> 1102;
1147 -> 1139;
1147 -> 1131;
1147 -> 1102;
1148 -> 1102;
1149 -> 1145;
1149 -> 1148;
1150 -> 1146;
1150 -> 1148;
1151 -> 1147;
1151 -> 1148;
1152 -> 1106;
1152 -> 1148;
1153 -> 1152;
1153 -> 1148;
1154 -> 1149;
1154 -> 1148;
1155 -> 1150;
1155 -> 1148;
1156 -> 1153;
1156 -> 1154;
1156 -> 1155;
1156 -> 1139;
1156 -> 1148;
1157 -> 1148;
1158 -> 1156;
1158 -> 1148;
1159 -> 1148;
1160 -> 1159;
1161 -> 1151;
1161 -> 1159;
1162 -> 1159;
1163 -> 1161;
1163 -> 1162;
1163 -> 1159;
1164 -> 1151;
1164 -> 1159;
1165 -> 1158;
1165 -> 1159;
1166 -> 1161;
1166 -> 1159;
1167 -> 1164;
1167 -> 1165;
1167 -> 1166;
1167 -> 1158;
1167 -> 1159;
1168 -> 1156;
1168 -> 1167;
1169 -> 1090;
1169 -> 1041;
1170 -> 1168;
1170 -> 1093;
1171 -> 1170;
1171 -> 1168;
1171 -> 1093;
1172 -> 1171;
1173 -> 1172;
1173 -> 1171;
1174 -> 1171;
1175 -> 1173;
1175 -> 1174;
1176 -> 1170;
1176 -> 1174;
1177 -> 1174;
1178 -> 1176;
1178 -> 1177;
1179 -> 1178;
1179 -> 1177;
1180 -> 1178;
1180 -> 1174;
1181 -> 1175;
1181 -> 1180;
1181 -> 1172;
1181 -> 1178;
1181 -> 1174;
1182 -> 1174;
1183 -> 1176;
1183 -> 1182;
1184 -> 1183;
1184 -> 1181;
1184 -> 1182;
1185 -> 1183;
1185 -> 1181;
1185 -> 1182;
1186 -> 1185;
1186 -> 1174;
1187 -> 1174;
1188 -> 1187;
1188 -> 1186;
1188 -> 1181;
1188 -> 1174;
1189 -> 1187;
1189 -> 1188;
1190 -> 1186;
1190 -> 1189;
1190 -> 1187;
1191 -> 1171;
1192 -> 1170;
1192 -> 1171;
1193 -> 1192;
1193 -> 1190;
1193 -> 1171;
1194 -> 1171;
1195 -> 1172;
1195 -> 1193;
1195 -> 1171;
1196 -> 1170;
1196 -> 1195;
1196 -> 1171;
1197 -> 1193;
1197 -> 1171;
1198 -> 1171;
1199 -> 1170;
1199 -> 1196;
1199 -> 1093;
1200 -> 1093;
1201 -> 1200;
1202 -> 1201;
1203 -> 1199;
1203 -> 1201;
1204 -> 1093;
1205 -> 1040;
1205 -> 1041;
1206 -> 1040;
1206 -> 1041;
1207 -> 1205;
1207 -> 1199;
1207 -> 1041;
1208 -> 1041;
1209 -> 1207;
1209 -> 1208;
1210 -> 1207;
1210 -> 1208;
1211 -> 1206;
1211 -> 1208;
1212 -> 1208;
1213 -> 1211;
1213 -> 1212;
1214 -> 1212;
1215 -> 1213;
1215 -> 1214;
1215 -> 1199;
1215 -> 1212;
1216 -> 1215;
1216 -> 1212;
1217 -> 1216;
1217 -> 1208;
1218 -> 1210;
1218 -> 1208;
1219 -> 1209;
1219 -> 1218;
1219 -> 1215;
1219 -> 1199;
1219 -> 1208;
1220 -> 1208;
1221 -> 1211;
1221 -> 1220;
1222 -> 1221;
1222 -> 1219;
1222 -> 1220;
1223 -> 1208;
1224 -> 1222;
1224 -> 1217;
1224 -> 1208;
1225 -> 1040;
1225 -> 1041;
1226 -> 1040;
1226 -> 1041;
1227 -> 1040;
1227 -> 1041;
1228 -> 1226;
1228 -> 1041;
1229 -> 1225;
1229 -> 1041;
1230 -> 1041;
1231 -> 1041;
1232 -> 1229;
1232 -> 1231;
1233 -> 1230;
1233 -> 1231;
1234 -> 1227;
1234 -> 1231;
1235 -> 1233;
1235 -> 1231;
1236 -> 1232;
1236 -> 1231;
1237 -> 1231;
1238 -> 1236;
1238 -> 1237;
1239 -> 1234;
1239 -> 1237;
1240 -> 1238;
1240 -> 1237;
1241 -> 1237;
1242 -> 1240;
1242 -> 1241;
1243 -> 1239;
1243 -> 1241;
1244 -> 1241;
1245 -> 1242;
1245 -> 1244;
1245 -> 1241;
1246 -> 1241;
1247 -> 1246;
1248 -> 1242;
1248 -> 1241;
1249 -> 1237;
1250 -> 1249;
1251 -> 1231;
1252 -> 1231;
1253 -> 1224;
1253 -> 1231;
1254 -> 1231;
1255 -> 1253;
1255 -> 1254;
1255 -> 1231;
1256 -> 1252;
1256 -> 1231;
1257 -> 1253;
1257 -> 1256;
1257 -> 1224;
1257 -> 1231;
1258 -> 1232;
1258 -> 1231;
1259 -> 1233;
1259 -> 1231;
1260 -> 1231;
1261 -> 1258;
1261 -> 1260;
1262 -> 1259;
1262 -> 1260;
1263 -> 1234;
1263 -> 1260;
1264 -> 1263;
1264 -> 1260;
1265 -> 1261;
1265 -> 1260;
1266 -> 1262;
1266 -> 1260;
1267 -> 1260;
1268 -> 1260;
1269 -> 1268;
1270 -> 1268;
1271 -> 1257;
1271 -> 1270;
1271 -> 1268;
1272 -> 1269;
1272 -> 1268;
1273 -> 1257;
1273 -> 1272;
1273 -> 1268;
1274 -> 1040;
1274 -> 1041;
1275 -> 1041;
1276 -> 1275;
1277 -> 1276;
1278 -> 1273;
1278 -> 1276;
1279 -> 1041;
1280 -> 1273;
1281 -> 1273;
1281 -> 1078;
1281 -> 1041;
1282 -> 1051;
1282 -> 1273;
1282 -> 1041;
1283 -> 1040;
1283 -> 1041;
1284 -> 1040;
1284 -> 1041;
1285 -> 1041;
1286 -> 1283;
1286 -> 1285;
1287 -> 1285;
1288 -> 1286;
1288 -> 1273;
1288 -> 1287;
1289 -> 1287;
1290 -> 1288;
1290 -> 1041;
1291 -> 1284;
1291 -> 1041;
1292 -> 1290;
1292 -> 1291;
1292 -> 1041;
1293 -> 1041;
1294 -> 1040;
1294 -> 1041;
1295 -> 1040;
1295 -> 1041;
1296 -> 1294;
1296 -> 1041;
1297 -> 1296;
1297 -> 1292;
1297 -> 1041;
1298 -> 1294;
1298 -> 1297;
1298 -> 1041;
1299 -> 1041;
1300 -> 1295;
1300 -> 1299;
1301 -> 1299;
1302 -> 1301;
1303 -> 1302;
1304 -> 1300;
1304 -> 1297;
1304 -> 1303;
1305 -> 1300;
1305 -> 1297;
1305 -> 1303;
1306 -> 1305;
1306 -> 1302;
1307 -> 1300;
1307 -> 1297;
1307 -> 1302;
1308 -> 1299;
1309 -> 1307;
1309 -> 1041;
1310 -> 1041;
1311 -> 1295;
1311 -> 1310;
1312 -> 1311;
1312 -> 1307;
1312 -> 1310;
1313 -> 1312;
1314 -> 1313;
1314 -> 1312;
1315 -> 1312;
1316 -> 1314;
1316 -> 1315;
1316 -> 1312;
1317 -> 1316;
1317 -> 1312;
1318 -> 1317;
1318 -> 1311;
1318 -> 1312;
1319 -> 1311;
1319 -> 1316;
1319 -> 1318;
1319 -> 1310;
1320 -> 1319;
1320 -> 1041;
1321 -> 1320;
1322 -> 1294;
1322 -> 1321;
1322 -> 1041;
1323 -> 1321;
1323 -> 1302;
1324 -> 1321;
1324 -> 1041;
1325 -> 1061;
1325 -> 1321;
1325 -> 1041;
1326 -> 1051;
1326 -> 1321;
1326 -> 1041;
1327 -> 1007;
1327 -> 1006;
1328 -> 1327;
1329 -> 1328;
1329 -> 1011;
1329 -> 1327;
1330 -> 1327;
1331 -> 1330;
1331 -> 1011;
1331 -> 1327;
1332 -> 1011;
1332 -> 1321;
1332 -> 1329;
1332 -> 1331;
1332 -> 1006;
1333 -> 1006;
1334 -> 1009;
1334 -> 1333;
1334 -> 1006;
1335 -> 1007;
1335 -> 1006;
1336 -> 1008;
1336 -> 1006;
1337 -> 1010;
1337 -> 1006;
1338 -> 1006;
1339 -> 1335;
1339 -> 1338;
1340 -> 1336;
1340 -> 1338;
1341 -> 1337;
1341 -> 1338;
1342 -> 1011;
1342 -> 1338;
1343 -> 1338;
1344 -> 1339;
1344 -> 1343;
1344 -> 1338;
1345 -> 1342;
1345 -> 1332;
1345 -> 1338;
1346 -> 1345;
1347 -> 1342;
1347 -> 1345;
1348 -> 1346;
1348 -> 1345;
1349 -> 1341;
1349 -> 1345;
1350 -> 1345;
1351 -> 1345;
1352 -> 1347;
1352 -> 1351;
1353 -> 1348;
1353 -> 1351;
1354 -> 1349;
1354 -> 1351;
1355 -> 1350;
1355 -> 1351;
1356 -> 1350;
1356 -> 1351;
1357 -> 1351;
1358 -> 1352;
1358 -> 1351;
1359 -> 1355;
1359 -> 1351;
1360 -> 1356;
1360 -> 1351;
1361 -> 1357;
1361 -> 1351;
1362 -> 1354;
1362 -> 1351;
1363 -> 1351;
1364 -> 1351;
1365 -> 1358;
1365 -> 1364;
1366 -> 1359;
1366 -> 1364;
1367 -> 1360;
1367 -> 1364;
1368 -> 1361;
1368 -> 1364;
1369 -> 1362;
1369 -> 1364;
1370 -> 1363;
1370 -> 1364;
1371 -> 1364;
1372 -> 1371;
1372 -> 1364;
1373 -> 1371;
1373 -> 1364;
1374 -> 1371;
1374 -> 1364;
1375 -> 1371;
1375 -> 1364;
1376 -> 1371;
1376 -> 1364;
1377 -> 1371;
1377 -> 1364;
1378 -> 1365;
1378 -> 1371;
1378 -> 1364;
1379 -> 1366;
1379 -> 1371;
1379 -> 1364;
1380 -> 1367;
1380 -> 1371;
1380 -> 1364;
1381 -> 1368;
1381 -> 1371;
1381 -> 1364;
1382 -> 1369;
1382 -> 1371;
1382 -> 1364;
1383 -> 0;
1383 -> 1364;
1384 -> 1383;
1384 -> 1371;
1384 -> 1364;
1385 -> 1364;
1386 -> 1371;
1386 -> 1385;
1387 -> 1385;
1388 -> 1386;
1388 -> 1371;
1388 -> 1373;
1388 -> 1379;
1388 -> 1387;
1388 -> 1385;
1389 -> 1385;
1390 -> 1386;
1390 -> 1371;
1390 -> 1372;
1390 -> 1378;
1390 -> 1389;
1391 -> 1390;
1391 -> 1371;
1391 -> 1383;
1391 -> 1389;
1392 -> 1388;
1392 -> 1391;
1392 -> 1371;
1392 -> 1383;
1392 -> 1385;
1393 -> 1392;
1393 -> 1364;
1394 -> 1393;
1395 -> 1394;
1395 -> 1371;
1395 -> 1393;
1396 -> 1351;
1397 -> 1352;
1397 -> 1396;
1398 -> 1397;
1398 -> 1383;
1398 -> 1396;
1399 -> 1397;
1399 -> 1383;
1399 -> 1396;
1400 -> 1399;
1400 -> 1396;
1401 -> 1397;
1401 -> 1383;
1401 -> 1396;
1402 -> 1401;
1402 -> 1351;
1403 -> 1402;
1403 -> 1363;
1403 -> 1401;
1403 -> 1371;
1403 -> 1372;
1403 -> 1378;
1403 -> 1373;
1403 -> 1379;
1403 -> 1374;
1403 -> 1380;
1403 -> 1375;
1403 -> 1381;
1403 -> 1376;
1403 -> 1384;
1403 -> 1377;
1403 -> 1395;
1403 -> 1382;
1403 -> 1350;
1403 -> 1357;
1403 -> 1003;
1403 -> 1394;
1403 -> 1351;
1404 -> 1351;
1405 -> 1403;
1405 -> 1404;
1406 -> 1403;
1406 -> 1404;
1407 -> 1406;
1407 -> 1403;
1407 -> 1404;
1408 -> 1405;
1408 -> 1404;
1409 -> 1405;
1409 -> 1404;
1410 -> 1404;
1411 -> 1409;
1411 -> 1410;
1412 -> 1406;
1412 -> 1410;
1413 -> 1411;
1413 -> 1407;
1413 -> 0;
1413 -> 1410;
1414 -> 1410;
1415 -> 1411;
1415 -> 1407;
1415 -> 0;
1415 -> 1410;
1416 -> 1411;
1416 -> 1407;
1416 -> 0;
1416 -> 1415;
1417 -> 1411;
1417 -> 1407;
1417 -> 0;
1417 -> 1410;
1418 -> 1411;
1418 -> 1407;
1418 -> 0;
1418 -> 1410;
1419 -> 1411;
1419 -> 1407;
1419 -> 0;
1419 -> 1410;
1420 -> 1411;
1420 -> 1407;
1420 -> 0;
1420 -> 1410;
1421 -> 1411;
1421 -> 1407;
1421 -> 0;
1421 -> 1410;
1422 -> 1410;
1423 -> 1411;
1423 -> 1410;
1424 -> 1422;
1424 -> 1410;
1425 -> 1412;
1425 -> 1407;
1425 -> 1423;
1425 -> 1424;
1425 -> 1410;
1426 -> 1410;
1427 -> 1411;
1427 -> 1410;
1428 -> 1426;
1428 -> 1410;
1429 -> 1410;
1430 -> 1427;
1430 -> 1429;
1431 -> 1428;
1431 -> 1429;
1432 -> 1412;
1432 -> 1429;
1433 -> 1429;
1434 -> 1430;
1434 -> 1425;
1434 -> 1429;
1435 -> 1429;
1436 -> 1435;
1436 -> 1410;
1437 -> 1436;
1437 -> 1410;
1438 -> 1411;
1438 -> 1434;
1438 -> 0;
1438 -> 1437;
1439 -> 0;
1439 -> 1438;
1440 -> 1411;
1440 -> 1434;
1440 -> 0;
1440 -> 1410;
1441 -> 1440;
1441 -> 1410;
1442 -> 1439;
1442 -> 1441;
1443 -> 1442;
1443 -> 0;
1443 -> 1404;
1444 -> 1442;
1444 -> 1404;
1445 -> 1404;
1446 -> 1444;
1446 -> 1445;
1447 -> 1446;
1447 -> 1445;
1448 -> 1447;
1449 -> 1404;
1450 -> 1449;
1450 -> 1405;
1450 -> 1442;
1450 -> 1404;
1451 -> 1405;
1451 -> 1442;
1451 -> 1449;
1451 -> 1450;
1452 -> 1450;
1453 -> 1451;
1453 -> 1450;
1454 -> 1452;
1454 -> 1450;
1455 -> 1450;
1456 -> 1453;
1456 -> 1455;
1457 -> 1454;
1457 -> 1455;
1458 -> 1406;
1458 -> 1455;
1459 -> 1455;
1460 -> 1455;
1460 -> 1450;
1461 -> 1450;
1462 -> 1461;
1462 -> 1450;
1463 -> 1459;
1463 -> 1462;
1464 -> 1450;
1465 -> 1463;
1465 -> 1464;
1465 -> 1450;
1466 -> 1465;
1466 -> 1460;
1466 -> 1450;
1467 -> 1460;
1467 -> 1450;
1468 -> 1448;
1468 -> 1467;
1469 -> 1448;
1469 -> 1404;
1470 -> 1404;
1471 -> 1405;
1471 -> 1456;
1471 -> 1470;
1471 -> 1404;
1472 -> 1471;
1472 -> 1404;
1473 -> 1404;
1474 -> 1472;
1474 -> 1473;
1475 -> 1406;
1475 -> 1473;
1476 -> 1474;
1476 -> 1471;
1476 -> 0;
1476 -> 1473;
1477 -> 1473;
1478 -> 1474;
1478 -> 1471;
1478 -> 0;
1478 -> 1473;
1479 -> 1474;
1479 -> 1471;
1479 -> 0;
1479 -> 1478;
1480 -> 1474;
1480 -> 1471;
1480 -> 0;
1480 -> 1473;
1481 -> 1474;
1481 -> 1471;
1481 -> 0;
1481 -> 1473;
1482 -> 1474;
1482 -> 1471;
1482 -> 0;
1482 -> 1473;
1483 -> 1474;
1483 -> 1471;
1483 -> 0;
1483 -> 1473;
1484 -> 1474;
1484 -> 1471;
1484 -> 0;
1484 -> 1473;
1485 -> 1473;
1486 -> 1485;
1486 -> 1473;
1487 -> 1473;
1488 -> 1487;
1488 -> 1473;
1489 -> 1473;
1490 -> 1488;
1490 -> 1489;
1491 -> 1475;
1491 -> 1489;
1492 -> 1489;
1493 -> 1489;
1494 -> 1493;
1494 -> 1473;
1495 -> 1494;
1495 -> 1473;
1496 -> 1474;
1497 -> 1474;
1498 -> 1496;
1498 -> 1497;
1499 -> 1475;
1499 -> 1497;
1500 -> 1498;
1500 -> 1474;
1500 -> 0;
1500 -> 1497;
1501 -> 1498;
1501 -> 1474;
1501 -> 1497;
1502 -> 1497;
1503 -> 1501;
1503 -> 1502;
1503 -> 1497;
1504 -> 1501;
1504 -> 1497;
1505 -> 1497;
1506 -> 1504;
1506 -> 1505;
1507 -> 1499;
1507 -> 1505;
1508 -> 1506;
1508 -> 1474;
1508 -> 0;
1508 -> 1505;
1509 -> 1505;
1510 -> 1506;
1510 -> 1474;
1510 -> 0;
1510 -> 1505;
1511 -> 1506;
1511 -> 1474;
1511 -> 0;
1511 -> 1510;
1512 -> 1506;
1512 -> 1474;
1512 -> 0;
1512 -> 1505;
1513 -> 1506;
1513 -> 1474;
1513 -> 0;
1513 -> 1505;
1514 -> 1506;
1514 -> 1474;
1514 -> 0;
1514 -> 1505;
1515 -> 1506;
1515 -> 1474;
1515 -> 0;
1515 -> 1505;
1516 -> 1506;
1516 -> 1474;
1516 -> 0;
1516 -> 1505;
1517 -> 1507;
1517 -> 1474;
1517 -> 1506;
1517 -> 1505;
1518 -> 1517;
1519 -> 1474;
1520 -> 1518;
1520 -> 1519;
1521 -> 1520;
1521 -> 1519;
1522 -> 1521;
1523 -> 1404;
1524 -> 1522;
1524 -> 1523;
1525 -> 1405;
1525 -> 1517;
1525 -> 1404;
1526 -> 1404;
1527 -> 1525;
1527 -> 1526;
1528 -> 1525;
1528 -> 1526;
1529 -> 1528;
1529 -> 1525;
1529 -> 1526;
1530 -> 1527;
1530 -> 1526;
1531 -> 1526;
1532 -> 1530;
1532 -> 1531;
1533 -> 1528;
1533 -> 1531;
1534 -> 1532;
1534 -> 1529;
1534 -> 0;
1534 -> 1531;
1535 -> 1534;
1536 -> 1527;
1536 -> 1526;
1537 -> 1526;
1538 -> 1536;
1538 -> 1537;
1539 -> 1528;
1539 -> 1537;
1540 -> 1538;
1540 -> 1529;
1540 -> 0;
1540 -> 1537;
1541 -> 1537;
1542 -> 1538;
1542 -> 1529;
1542 -> 0;
1542 -> 1537;
1543 -> 1538;
1543 -> 1529;
1543 -> 1542;
1544 -> 1542;
1545 -> 1543;
1545 -> 1544;
1546 -> 1545;
1546 -> 1529;
1546 -> 0;
1546 -> 1544;
1547 -> 1544;
1548 -> 1545;
1548 -> 1529;
1548 -> 0;
1549 -> 1545;
1549 -> 1529;
1549 -> 0;
1549 -> 1544;
1550 -> 1545;
1550 -> 1529;
1550 -> 0;
1550 -> 1544;
1551 -> 1545;
1551 -> 1529;
1551 -> 0;
1551 -> 1544;
1552 -> 1545;
1552 -> 1529;
1552 -> 0;
1552 -> 1544;
1553 -> 1545;
1553 -> 1529;
1553 -> 0;
1553 -> 1544;
1554 -> 1545;
1555 -> 1526;
1556 -> 1554;
1556 -> 1555;
1557 -> 1556;
1557 -> 1555;
1558 -> 1557;
1559 -> 1526;
1560 -> 1528;
1560 -> 1559;
1561 -> 1559;
1562 -> 1560;
1562 -> 1545;
1562 -> 1561;
1562 -> 1559;
1563 -> 1559;
1564 -> 1560;
1564 -> 1545;
1564 -> 1563;
1565 -> 1562;
1565 -> 1526;
1566 -> 1527;
1566 -> 1565;
1567 -> 1565;
1568 -> 1566;
1568 -> 1567;
1569 -> 1528;
1569 -> 1567;
1570 -> 1568;
1570 -> 1545;
1570 -> 1567;
1571 -> 1570;
1572 -> 1569;
1572 -> 1570;
1573 -> 1565;
1574 -> 1351;
1575 -> 1363;
1575 -> 1574;
1576 -> 1575;
1576 -> 1572;
1576 -> 1574;
1577 -> 1574;
1578 -> 1576;
1578 -> 1577;
1578 -> 1574;
1579 -> 1574;
1580 -> 1576;
1580 -> 1579;
1580 -> 1572;
1580 -> 1574;
1581 -> 1580;
1582 -> 1351;
1583 -> 1357;
1583 -> 1351;
1584 -> 1583;
1584 -> 1581;
1584 -> 1351;
1585 -> 1342;
1585 -> 1581;
1585 -> 1345;
1586 -> 1346;
1586 -> 1345;
1587 -> 1585;
1587 -> 1586;
1587 -> 1581;
1587 -> 1345;
1588 -> 1342;
1588 -> 1587;
1588 -> 1338;
1589 -> 1342;
1589 -> 1587;
1589 -> 1338;
1590 -> 1332;
1590 -> 1006;
1591 -> 1590;
1591 -> 1587;
1591 -> 1006;
1592 -> 1589;
1592 -> 1006;
1593 -> 985;
1594 -> 951;
1594 -> 1592;
1594 -> 1593;
1594 -> 985;
1595 -> 950;
1595 -> 1592;
1595 -> 946;
1596 -> 947;
1596 -> 0;
1596 -> 946;
1597 -> 949;
1597 -> 946;
1598 -> 952;
1598 -> 946;
1599 -> 950;
1599 -> 946;
1600 -> 1597;
1600 -> 1598;
1600 -> 1599;
1600 -> 951;
1600 -> 941;
1600 -> 1595;
1600 -> 946;
1601 -> 946;
1602 -> 936;
1603 -> 941;
1603 -> 1600;
1603 -> 936;
1604 -> 930;
1604 -> 737;
1605 -> 932;
1605 -> 1603;
1605 -> 1604;
1605 -> 935;
1605 -> 929;
1605 -> 921;
1605 -> 737;
1606 -> 930;
1606 -> 737;
1607 -> 922;
1607 -> 737;
1608 -> 924;
1608 -> 737;
1609 -> 923;
1609 -> 1608;
1610 -> 1607;
1610 -> 1605;
1610 -> 1608;
1611 -> 926;
1611 -> 1608;
1612 -> 1608;
1613 -> 1610;
1613 -> 1612;
1614 -> 1612;
1615 -> 1613;
1615 -> 1614;
1616 -> 1615;
1616 -> 1612;
1617 -> 1610;
1617 -> 1612;
1618 -> 1610;
1618 -> 1612;
1619 -> 1610;
1619 -> 1612;
1620 -> 1610;
1620 -> 1612;
1621 -> 1612;
1622 -> 1618;
1622 -> 1616;
1622 -> 1621;
1622 -> 1612;
1623 -> 0;
1623 -> 1612;
1624 -> 1622;
1624 -> 1612;
1625 -> 1609;
1625 -> 1622;
1625 -> 1608;
1626 -> 1608;
1627 -> 929;
1627 -> 1608;
1628 -> 1607;
1628 -> 1608;
1629 -> 923;
1629 -> 1608;
1630 -> 925;
1630 -> 1608;
1631 -> 1605;
1631 -> 1608;
1632 -> 1626;
1632 -> 1608;
1633 -> 927;
1633 -> 1608;
1634 -> 928;
1634 -> 1608;
1635 -> 1608;
1636 -> 1627;
1636 -> 1635;
1637 -> 1628;
1637 -> 1635;
1638 -> 1629;
1638 -> 1635;
1639 -> 1630;
1639 -> 1635;
1640 -> 1631;
1640 -> 1635;
1641 -> 1632;
1641 -> 1635;
1642 -> 1633;
1642 -> 1635;
1643 -> 1634;
1643 -> 1635;
1644 -> 1635;
1645 -> 1636;
1645 -> 1644;
1645 -> 1635;
1646 -> 1635;
1647 -> 1641;
1647 -> 1646;
1647 -> 1635;
1648 -> 1635;
1649 -> 1636;
1649 -> 1648;
1650 -> 1649;
1650 -> 1622;
1650 -> 1648;
1651 -> 1650;
1651 -> 1635;
1652 -> 1635;
1653 -> 1635;
1654 -> 1642;
1654 -> 1635;
1655 -> 1636;
1655 -> 1654;
1656 -> 1637;
1656 -> 1654;
1657 -> 1640;
1657 -> 1654;
1658 -> 1641;
1658 -> 1654;
1659 -> 1643;
1659 -> 1654;
1660 -> 1654;
1661 -> 1655;
1661 -> 1660;
1662 -> 1656;
1662 -> 1660;
1663 -> 1657;
1663 -> 1660;
1664 -> 1658;
1664 -> 1660;
1665 -> 1659;
1665 -> 1660;
1666 -> 1665;
1666 -> 1660;
1667 -> 1660;
1668 -> 1666;
1668 -> 1667;
1669 -> 1661;
1669 -> 1667;
1670 -> 1667;
1671 -> 1669;
1671 -> 1622;
1671 -> 1670;
1671 -> 1667;
1672 -> 1671;
1673 -> 1669;
1673 -> 1671;
1674 -> 1671;
1675 -> 1673;
1675 -> 1674;
1676 -> 1671;
1677 -> 1676;
1677 -> 1673;
1678 -> 1677;
1678 -> 1671;
1679 -> 1671;
1680 -> 1669;
1680 -> 1679;
1681 -> 1680;
1681 -> 1673;
1681 -> 1679;
1682 -> 1679;
1683 -> 1681;
1683 -> 1682;
1684 -> 1683;
1684 -> 1681;
1684 -> 1682;
1685 -> 1682;
1686 -> 1684;
1686 -> 1685;
1687 -> 1685;
1688 -> 1686;
1688 -> 1687;
1689 -> 1688;
1689 -> 1687;
1690 -> 1688;
1690 -> 1685;
1691 -> 1690;
1691 -> 1671;
1692 -> 1678;
1692 -> 1691;
1692 -> 1671;
1693 -> 1673;
1693 -> 1692;
1695 -> 0;
1697 -> 1694;
1697 -> 1696;
1698 -> 1695;
1698 -> 1696;
1699 -> 1696;
1700 -> 1699;
1700 -> 1696;
1701 -> 1697;
1701 -> 1699;
1701 -> 1696;
1702 -> 1698;
1702 -> 1699;
1702 -> 1696;
1703 -> 1696;
1704 -> 1703;
1704 -> 1693;
1705 -> 1669;
1705 -> 1690;
1705 -> 1671;
1706 -> 1704;
1706 -> 1671;
1707 -> 1671;
1708 -> 1705;
1708 -> 1706;
1708 -> 1707;
1708 -> 1701;
1708 -> 1702;
1708 -> 1690;
1708 -> 0;
1708 -> 1671;
1709 -> 1669;
1709 -> 1708;
1709 -> 1667;
1710 -> 1709;
1710 -> 1660;
1711 -> 1710;
1711 -> 1708;
1711 -> 1660;
1712 -> 1710;
1712 -> 1708;
1712 -> 1660;
1713 -> 1664;
1713 -> 1712;
1713 -> 1626;
1713 -> 1708;
1713 -> 1660;
1714 -> 1710;
1714 -> 1713;
1714 -> 1660;
1715 -> 1660;
1716 -> 1714;
1716 -> 1715;
1716 -> 1660;
1717 -> 1716;
1718 -> 1636;
1718 -> 1635;
1719 -> 1637;
1719 -> 1635;
1720 -> 1638;
1720 -> 1635;
1721 -> 1639;
1721 -> 1635;
1722 -> 1640;
1722 -> 1635;
1723 -> 1641;
1723 -> 1635;
1724 -> 1642;
1724 -> 1635;
1725 -> 1717;
1725 -> 1635;
1726 -> 1643;
1726 -> 1635;
1727 -> 1635;
1728 -> 1635;
1729 -> 1718;
1729 -> 1728;
1730 -> 1719;
1730 -> 1728;
1731 -> 1720;
1731 -> 1728;
1732 -> 1721;
1732 -> 1728;
1733 -> 1722;
1733 -> 1728;
1734 -> 1723;
1734 -> 1728;
1735 -> 1724;
1735 -> 1728;
1736 -> 1725;
1736 -> 1728;
1737 -> 1726;
1737 -> 1728;
1738 -> 1727;
1738 -> 1728;
1739 -> 1728;
1740 -> 1739;
1740 -> 1728;
1741 -> 1739;
1741 -> 1728;
1742 -> 1739;
1742 -> 1728;
1743 -> 1739;
1743 -> 1728;
1744 -> 1739;
1744 -> 1728;
1745 -> 1739;
1745 -> 1728;
1746 -> 1739;
1746 -> 1728;
1747 -> 1739;
1747 -> 1728;
1748 -> 1739;
1748 -> 1728;
1749 -> 1739;
1749 -> 1728;
1750 -> 1739;
1750 -> 1728;
1751 -> 1728;
1752 -> 1729;
1752 -> 1751;
1752 -> 1728;
1753 -> 1728;
1754 -> 1734;
1754 -> 1753;
1754 -> 1728;
1755 -> 1729;
1755 -> 1739;
1755 -> 1728;
1756 -> 1730;
1756 -> 1739;
1756 -> 1728;
1757 -> 1731;
1757 -> 1739;
1757 -> 1728;
1758 -> 1737;
1758 -> 1739;
1758 -> 1728;
1759 -> 1734;
1759 -> 1739;
1759 -> 1728;
1760 -> 1735;
1760 -> 1739;
1760 -> 1728;
1761 -> 1736;
1761 -> 1739;
1761 -> 1728;
1762 -> 1733;
1762 -> 1739;
1762 -> 1728;
1763 -> 1733;
1763 -> 1728;
1764 -> 1728;
1765 -> 1763;
1765 -> 1764;
1766 -> 1739;
1766 -> 1764;
1767 -> 1765;
1767 -> 1764;
1768 -> 1728;
1769 -> 1731;
1769 -> 1728;
1770 -> 1730;
1770 -> 1713;
1770 -> 1769;
1771 -> 1770;
1771 -> 1739;
1771 -> 1769;
1772 -> 1732;
1772 -> 1739;
1772 -> 1728;
1773 -> 1635;
1774 -> 1636;
1774 -> 1773;
1775 -> 1774;
1775 -> 1713;
1775 -> 1773;
1776 -> 1775;
1776 -> 1635;
1777 -> 1776;
1778 -> 1777;
1778 -> 1727;
1778 -> 1776;
1779 -> 1635;
1780 -> 1636;
1780 -> 1779;
1781 -> 1780;
1781 -> 1713;
1781 -> 1779;
1782 -> 1780;
1782 -> 1713;
1782 -> 1779;
1783 -> 1782;
1783 -> 1779;
1784 -> 1780;
1784 -> 1713;
1784 -> 1779;
1785 -> 1784;
1785 -> 1635;
1786 -> 1635;
1787 -> 1785;
1787 -> 1786;
1788 -> 1727;
1788 -> 1786;
1789 -> 1787;
1789 -> 1784;
1789 -> 1786;
1790 -> 1788;
1790 -> 1789;
1791 -> 1789;
1792 -> 1790;
1792 -> 1791;
1792 -> 1789;
1792 -> 1739;
1792 -> 1740;
1792 -> 1755;
1792 -> 1741;
1792 -> 1757;
1792 -> 1742;
1792 -> 1772;
1792 -> 1743;
1792 -> 1759;
1792 -> 1744;
1792 -> 1762;
1792 -> 1745;
1792 -> 1756;
1792 -> 1746;
1792 -> 1760;
1792 -> 1747;
1792 -> 1771;
1792 -> 1748;
1792 -> 1761;
1792 -> 1749;
1792 -> 1778;
1792 -> 1750;
1792 -> 1758;
1792 -> 921;
1792 -> 1770;
1792 -> 1777;
1793 -> 1792;
1793 -> 1791;
1794 -> 1792;
1794 -> 1791;
1795 -> 1792;
1795 -> 1791;
1796 -> 1795;
1796 -> 1792;
1796 -> 1791;
1797 -> 1793;
1797 -> 1791;
1798 -> 1791;
1799 -> 1796;
1799 -> 1798;
1800 -> 1797;
1800 -> 1798;
1801 -> 1798;
1802 -> 1799;
1802 -> 1801;
1802 -> 1798;
1803 -> 1791;
1804 -> 1795;
1804 -> 1792;
1804 -> 1791;
1805 -> 1791;
1806 -> 1795;
1806 -> 1804;
1806 -> 1805;
1807 -> 1806;
1807 -> 1791;
1808 -> 1793;
1808 -> 1807;
1809 -> 1807;
1810 -> 1808;
1810 -> 1809;
1811 -> 1795;
1811 -> 1809;
1812 -> 1809;
1813 -> 1811;
1813 -> 1804;
1813 -> 1809;
1814 -> 1813;
1814 -> 1807;
1815 -> 1814;
1815 -> 1807;
1816 -> 1791;
1817 -> 1792;
1817 -> 1816;
1817 -> 1815;
1817 -> 1789;
1818 -> 1635;
1819 -> 1635;
1820 -> 1727;
1820 -> 1819;
1821 -> 1820;
1821 -> 1817;
1821 -> 1819;
1822 -> 1819;
1823 -> 1821;
1823 -> 1822;
1823 -> 1819;
1824 -> 1819;
1825 -> 1824;
1825 -> 1819;
1826 -> 1821;
1826 -> 1825;
1826 -> 1817;
1826 -> 1819;
1827 -> 1826;
1828 -> 1635;
1829 -> 1635;
1830 -> 1637;
1830 -> 1829;
1830 -> 1635;
1831 -> 1641;
1831 -> 1830;
1832 -> 1830;
1833 -> 1831;
1833 -> 1832;
1834 -> 1637;
1834 -> 1832;
1835 -> 1834;
1835 -> 1827;
1835 -> 1832;
1836 -> 1835;
1836 -> 1830;
1837 -> 1836;
1837 -> 1830;
1838 -> 1641;
1838 -> 1830;
1839 -> 1830;
1840 -> 1837;
1840 -> 1839;
1841 -> 1838;
1841 -> 1839;
1842 -> 1727;
1842 -> 1839;
1843 -> 1840;
1843 -> 1839;
1844 -> 1830;
1845 -> 1641;
1845 -> 1830;
1846 -> 1830;
1847 -> 1845;
1847 -> 1846;
1848 -> 1637;
1848 -> 1846;
1849 -> 1846;
1850 -> 1847;
1850 -> 1846;
1851 -> 1846;
1852 -> 1850;
1852 -> 1851;
1853 -> 1848;
1853 -> 1851;
1854 -> 1851;
1855 -> 1853;
1855 -> 1854;
1856 -> 1854;
1857 -> 1856;
1857 -> 1855;
1857 -> 1854;
1858 -> 1854;
1859 -> 1855;
1859 -> 1858;
1860 -> 1859;
1860 -> 1827;
1860 -> 1857;
1860 -> 1858;
1861 -> 1860;
1861 -> 1854;
1862 -> 1861;
1862 -> 1851;
1863 -> 1851;
1864 -> 1853;
1864 -> 1863;
1865 -> 1864;
1865 -> 1860;
1865 -> 1863;
1866 -> 1865;
1866 -> 1851;
1867 -> 1866;
1868 -> 1862;
1868 -> 1867;
1868 -> 1866;
1869 -> 1868;
1870 -> 1846;
1871 -> 1849;
1871 -> 1846;
1872 -> 1848;
1872 -> 1865;
1872 -> 1846;
1873 -> 1871;
1873 -> 1872;
1873 -> 1849;
1873 -> 1865;
1873 -> 1846;
1874 -> 1849;
1874 -> 1846;
1875 -> 1848;
1875 -> 1873;
1875 -> 1846;
1876 -> 1849;
1876 -> 1846;
1877 -> 1848;
1877 -> 1875;
1877 -> 1846;
1878 -> 1849;
1878 -> 1846;
1879 -> 1848;
1879 -> 1877;
1879 -> 1846;
1880 -> 1849;
1880 -> 1846;
1881 -> 1848;
1881 -> 1879;
1881 -> 1846;
1882 -> 1849;
1882 -> 1846;
1883 -> 1848;
1883 -> 1881;
1883 -> 1846;
1884 -> 1849;
1884 -> 1846;
1885 -> 1848;
1885 -> 1883;
1885 -> 1846;
1886 -> 1849;
1886 -> 1846;
1887 -> 1848;
1887 -> 1885;
1887 -> 1846;
1888 -> 1849;
1888 -> 1887;
1888 -> 1846;
1889 -> 1888;
1889 -> 1830;
1890 -> 1889;
1890 -> 1830;
1891 -> 1641;
1891 -> 1830;
1892 -> 1830;
1893 -> 1890;
1893 -> 1892;
1894 -> 1891;
1894 -> 1892;
1895 -> 1727;
1895 -> 1892;
1896 -> 1893;
1896 -> 1892;
1897 -> 1830;
1898 -> 1830;
1899 -> 1636;
1899 -> 1898;
1900 -> 1899;
1900 -> 1887;
1900 -> 1898;
1901 -> 1900;
1901 -> 1830;
1902 -> 1727;
1902 -> 1830;
1903 -> 1637;
1903 -> 1830;
1904 -> 1641;
1904 -> 1830;
1905 -> 1830;
1906 -> 1901;
1906 -> 1905;
1907 -> 0;
1907 -> 1905;
1908 -> 1901;
1908 -> 1907;
1908 -> 0;
1908 -> 1830;
1909 -> 1901;
1909 -> 1905;
1910 -> 1905;
1911 -> 1901;
1911 -> 1910;
1911 -> 1908;
1911 -> 1830;
1912 -> 1830;
1913 -> 1727;
1913 -> 1912;
1914 -> 1913;
1914 -> 1911;
1914 -> 1912;
1915 -> 1912;
1916 -> 1914;
1916 -> 1915;
1916 -> 1912;
1917 -> 1912;
1918 -> 1917;
1918 -> 1912;
1919 -> 1830;
1920 -> 1637;
1920 -> 1914;
1920 -> 1830;
1921 -> 1830;
1922 -> 1920;
1922 -> 1921;
1922 -> 1830;
1923 -> 1635;
1924 -> 1637;
1924 -> 1923;
1924 -> 1635;
1925 -> 1727;
1925 -> 1914;
1925 -> 1637;
1925 -> 1635;
1926 -> 1635;
1927 -> 1636;
1927 -> 1926;
1928 -> 1927;
1928 -> 1914;
1928 -> 1926;
1929 -> 1928;
1929 -> 1635;
1930 -> 1635;
1931 -> 1642;
1931 -> 1930;
1931 -> 1635;
1932 -> 1636;
1932 -> 1931;
1933 -> 1641;
1933 -> 1931;
1934 -> 1643;
1934 -> 1931;
1935 -> 1931;
1936 -> 1932;
1936 -> 1935;
1937 -> 1933;
1937 -> 1935;
1938 -> 1934;
1938 -> 1935;
1939 -> 1935;
1940 -> 1936;
1940 -> 1939;
1941 -> 1940;
1941 -> 1929;
1941 -> 1939;
1942 -> 1940;
1942 -> 1929;
1942 -> 1939;
1943 -> 1942;
1943 -> 1939;
1944 -> 1940;
1944 -> 1929;
1944 -> 1939;
1945 -> 1944;
1945 -> 1935;
1946 -> 1938;
1946 -> 1935;
1947 -> 1946;
1947 -> 1945;
1947 -> 921;
1947 -> 1944;
1947 -> 1935;
1948 -> 1935;
1949 -> 1937;
1949 -> 1947;
1949 -> 1935;
1950 -> 1931;
1951 -> 1931;
1952 -> 1637;
1952 -> 1951;
1952 -> 1931;
1953 -> 1717;
1953 -> 1951;
1953 -> 1931;
1954 -> 1952;
1954 -> 1953;
1954 -> 1931;
1955 -> 1608;
1956 -> 1626;
1956 -> 1608;
1957 -> 1956;
1957 -> 1949;
1957 -> 1608;
1958 -> 1607;
1958 -> 1957;
1959 -> 1626;
1959 -> 1957;
1960 -> 1957;
1961 -> 1958;
1961 -> 1960;
1962 -> 1959;
1962 -> 1960;
1963 -> 929;
1963 -> 1960;
1964 -> 1963;
1964 -> 1957;
1964 -> 1960;
1965 -> 1963;
1965 -> 1957;
1965 -> 1960;
1966 -> 1957;
1967 -> 926;
1967 -> 1608;
1968 -> 1626;
1968 -> 1608;
1969 -> 928;
1969 -> 1608;
1970 -> 1967;
1970 -> 1968;
1970 -> 1969;
1970 -> 929;
1970 -> 1957;
1970 -> 921;
1970 -> 1608;
1971 -> 1608;
1973 -> 1972;
1974 -> 1970;
1974 -> 1971;
1975 -> 1970;
1975 -> 1971;
1976 -> 1970;
1976 -> 1971;
1977 -> 1970;
1977 -> 1971;
1978 -> 1970;
1978 -> 1971;
1979 -> 1970;
1979 -> 1971;
1980 -> 1970;
1980 -> 1971;
1981 -> 1971;
1982 -> 1974;
1982 -> 1981;
1982 -> 1971;
1983 -> 1974;
1983 -> 1970;
1983 -> 1982;
1984 -> 1974;
1984 -> 1983;
1984 -> 0;
1985 -> 1971;
1986 -> 1971;
1987 -> 1973;
1987 -> 1971;
1988 -> 1974;
1988 -> 1983;
1988 -> 1971;
1989 -> 1971;
1990 -> 1987;
1990 -> 1988;
1990 -> 1989;
1990 -> 1972;
1990 -> 1971;
1991 -> 1974;
1991 -> 1983;
1991 -> 1990;
1992 -> 1975;
1992 -> 1990;
1993 -> 1976;
1993 -> 1990;
1994 -> 1977;
1994 -> 1990;
1995 -> 1978;
1995 -> 1990;
1996 -> 1979;
1996 -> 1990;
1997 -> 1980;
1997 -> 1990;
1998 -> 1986;
1998 -> 1990;
1999 -> 1990;
2000 -> 1991;
2000 -> 1999;
2001 -> 1991;
2001 -> 1999;
2002 -> 1991;
2002 -> 1999;
2003 -> 1991;
2003 -> 1999;
2004 -> 1991;
2004 -> 1999;
2005 -> 1991;
2005 -> 1999;
2006 -> 1992;
2006 -> 1999;
2007 -> 1993;
2007 -> 1999;
2008 -> 1994;
2008 -> 1999;
2009 -> 1995;
2009 -> 1999;
2010 -> 1996;
2010 -> 1999;
2011 -> 1997;
2011 -> 1999;
2012 -> 1998;
2012 -> 1999;
2013 -> 1999;
2014 -> 2004;
2014 -> 1983;
2014 -> 1999;
2015 -> 2004;
2015 -> 1983;
2015 -> 1999;
2016 -> 2004;
2016 -> 1983;
2016 -> 1999;
2017 -> 2002;
2017 -> 1999;
2018 -> 2017;
2018 -> 1999;
2019 -> 2003;
2019 -> 2006;
2019 -> 1999;
2020 -> 1999;
2021 -> 1999;
2022 -> 1999;
2023 -> 2002;
2023 -> 1999;
2024 -> 2020;
2024 -> 1999;
2025 -> 2009;
2025 -> 2023;
2025 -> 2024;
2025 -> 1983;
2025 -> 1999;
2026 -> 2025;
2027 -> 2025;
2027 -> 0;
2028 -> 1999;
2029 -> 2010;
2029 -> 2028;
2029 -> 1999;
2030 -> 2026;
2030 -> 1999;
2031 -> 2025;
2031 -> 0;
2031 -> 1999;
2032 -> 2002;
2032 -> 1999;
2033 -> 2016;
2033 -> 1999;
2034 -> 2015;
2034 -> 2032;
2034 -> 2033;
2034 -> 2025;
2034 -> 1999;
2035 -> 2034;
2035 -> 0;
2035 -> 1999;
2036 -> 2034;
2036 -> 0;
2036 -> 1999;
2037 -> 2025;
2037 -> 0;
2037 -> 2036;
2038 -> 2025;
2038 -> 0;
2038 -> 1999;
2039 -> 2025;
2039 -> 1999;
2040 -> 2013;
2040 -> 1971;
2041 -> 2039;
2041 -> 1971;
2042 -> 1974;
2042 -> 2041;
2042 -> 2034;
2042 -> 1971;
2043 -> 1605;
2043 -> 2042;
2043 -> 1608;
2044 -> 737;
2045 -> 738;
2045 -> 2044;
2045 -> 2042;
2045 -> 22;
2046 -> 738;
2046 -> 737;
2047 -> 738;
2047 -> 737;
2048 -> 738;
2048 -> 737;
2049 -> 738;
2049 -> 737;
2050 -> 738;
2050 -> 737;
2051 -> 738;
2051 -> 737;
2052 -> 738;
2052 -> 737;
2053 -> 737;
2054 -> 2046;
2054 -> 737;
2055 -> 2048;
2055 -> 737;
2056 -> 2053;
2056 -> 737;
2057 -> 2052;
2057 -> 2054;
2057 -> 2055;
2057 -> 2056;
2057 -> 2045;
2057 -> 2053;
2057 -> 737;
2058 -> 2046;
2058 -> 2057;
2058 -> 737;
2059 -> 737;
2060 -> 2052;
2060 -> 2059;
2061 -> 2059;
2062 -> 2060;
2062 -> 2057;
2062 -> 2061;
2063 -> 2060;
2063 -> 2057;
2063 -> 2061;
2064 -> 2063;
2064 -> 2059;
2065 -> 2060;
2065 -> 2057;
2065 -> 2059;
2066 -> 2065;
2066 -> 737;
2067 -> 737;
2068 -> 2053;
2068 -> 737;
2069 -> 737;
2070 -> 2068;
2070 -> 2069;
2071 -> 2052;
2071 -> 2069;
2072 -> 2069;
2073 -> 2071;
2073 -> 2072;
2074 -> 2072;
2075 -> 2073;
2075 -> 2066;
2075 -> 2074;
2076 -> 2073;
2076 -> 2066;
2076 -> 2074;
2077 -> 2076;
2077 -> 2072;
2078 -> 2073;
2078 -> 2066;
2078 -> 2072;
2079 -> 2078;
2079 -> 2069;
2080 -> 2069;
2081 -> 2080;
2081 -> 2079;
2081 -> 2078;
2081 -> 2069;
2082 -> 2069;
2083 -> 2082;
2083 -> 737;
2084 -> 2050;
2084 -> 737;
2085 -> 2053;
2085 -> 737;
2086 -> 2051;
2086 -> 737;
2087 -> 2084;
2087 -> 2085;
2087 -> 2086;
2087 -> 2052;
2087 -> 2078;
2087 -> 2045;
2087 -> 737;
2088 -> 737;
2089 -> 2051;
2089 -> 2045;
2089 -> 2087;
2089 -> 737;
2090 -> 737;
2091 -> 2049;
2091 -> 737;
2092 -> 737;
2097 -> 2094;
2097 -> 2093;
2098 -> 2095;
2098 -> 2093;
2099 -> 2096;
2099 -> 2093;
2100 -> 2093;
2101 -> 2052;
2101 -> 737;
2102 -> 2091;
2102 -> 737;
2103 -> 2047;
2103 -> 737;
2104 -> 2090;
2104 -> 737;
2105 -> 2051;
2105 -> 737;
2106 -> 737;
2107 -> 737;
2108 -> 2101;
2108 -> 2107;
2109 -> 2102;
2109 -> 2107;
2110 -> 2103;
2110 -> 2107;
2111 -> 2104;
2111 -> 2107;
2112 -> 2105;
2112 -> 2107;
2113 -> 2106;
2113 -> 2107;
2114 -> 2106;
2114 -> 2107;
2115 -> 2107;
2116 -> 2107;
2117 -> 2110;
2117 -> 2116;
2117 -> 2107;
2118 -> 2117;
2118 -> 2110;
2118 -> 2089;
2118 -> 2107;
2119 -> 2110;
2119 -> 2118;
2120 -> 2118;
2121 -> 2107;
2122 -> 2108;
2122 -> 2121;
2123 -> 2121;
2124 -> 2122;
2124 -> 2119;
2124 -> 2123;
2125 -> 2122;
2125 -> 2119;
2125 -> 2123;
2126 -> 2125;
2126 -> 2121;
2127 -> 2122;
2127 -> 2119;
2127 -> 2121;
2128 -> 2127;
2128 -> 2107;
2129 -> 2128;
2129 -> 2109;
2129 -> 2107;
2130 -> 2108;
2130 -> 2107;
2131 -> 2119;
2131 -> 2107;
2132 -> 2113;
2132 -> 2107;
2133 -> 2114;
2133 -> 2107;
2134 -> 2107;
2135 -> 2111;
2135 -> 2107;
2136 -> 2112;
2136 -> 2107;
2137 -> 2107;
2138 -> 2129;
2138 -> 2137;
2139 -> 2130;
2139 -> 2137;
2140 -> 2131;
2140 -> 2137;
2141 -> 2132;
2141 -> 2137;
2142 -> 2133;
2142 -> 2137;
2143 -> 2134;
2143 -> 2137;
2144 -> 2134;
2144 -> 2137;
2145 -> 2135;
2145 -> 2137;
2146 -> 2136;
2146 -> 2137;
2147 -> 2134;
2147 -> 2137;
2148 -> 2137;
2149 -> 2148;
2149 -> 2137;
2150 -> 2148;
2150 -> 2137;
2151 -> 2148;
2151 -> 2137;
2152 -> 2148;
2152 -> 2137;
2153 -> 2148;
2153 -> 2137;
2154 -> 2148;
2154 -> 2137;
2155 -> 2148;
2155 -> 2137;
2156 -> 2148;
2156 -> 2137;
2157 -> 2148;
2157 -> 2137;
2158 -> 2148;
2158 -> 2137;
2159 -> 2148;
2159 -> 2137;
2160 -> 2148;
2160 -> 2137;
2161 -> 2138;
2161 -> 2148;
2161 -> 2137;
2162 -> 2139;
2162 -> 2148;
2162 -> 2137;
2163 -> 2140;
2163 -> 2148;
2163 -> 2137;
2164 -> 2141;
2164 -> 2148;
2164 -> 2137;
2165 -> 2142;
2165 -> 2148;
2165 -> 2137;
2166 -> 2143;
2166 -> 2148;
2166 -> 2137;
2167 -> 2144;
2167 -> 2148;
2167 -> 2137;
2168 -> 2145;
2168 -> 2148;
2168 -> 2137;
2169 -> 2146;
2169 -> 2148;
2169 -> 2137;
2170 -> 2107;
2171 -> 2108;
2171 -> 2170;
2172 -> 2170;
2173 -> 2171;
2173 -> 2127;
2173 -> 2172;
2174 -> 2171;
2174 -> 2127;
2174 -> 2172;
2175 -> 2174;
2175 -> 2170;
2176 -> 2171;
2176 -> 2127;
2176 -> 2170;
2177 -> 2176;
2177 -> 2107;
2178 -> 2177;
2178 -> 2134;
2178 -> 2176;
2178 -> 2148;
2178 -> 2149;
2178 -> 2161;
2178 -> 2150;
2178 -> 2162;
2178 -> 2151;
2178 -> 2163;
2178 -> 2152;
2178 -> 2164;
2178 -> 2153;
2178 -> 2165;
2178 -> 2154;
2178 -> 2166;
2178 -> 2155;
2178 -> 2167;
2178 -> 2156;
2178 -> 2168;
2178 -> 2157;
2178 -> 2158;
2178 -> 2159;
2178 -> 2160;
2178 -> 2169;
2178 -> 2106;
2178 -> 2090;
2178 -> 2089;
2178 -> 2107;
2179 -> 2107;
2180 -> 2178;
2180 -> 2179;
2181 -> 2178;
2181 -> 2179;
2182 -> 2181;
2182 -> 2178;
2182 -> 2179;
2183 -> 2180;
2183 -> 2182;
2183 -> 2179;
2184 -> 2183;
2185 -> 2183;
2186 -> 2183;
2187 -> 2185;
2187 -> 2186;
2188 -> 2181;
2188 -> 2186;
2189 -> 2188;
2189 -> 2182;
2189 -> 2186;
2190 -> 2186;
2191 -> 2189;
2192 -> 2188;
2192 -> 2182;
2192 -> 2191;
2193 -> 2191;
2194 -> 2192;
2194 -> 2193;
2195 -> 2193;
2196 -> 2194;
2196 -> 2195;
2196 -> 2193;
2197 -> 2194;
2197 -> 2193;
2198 -> 2197;
2199 -> 2187;
2199 -> 2191;
2200 -> 2188;
2200 -> 2198;
2200 -> 2199;
2200 -> 2191;
2201 -> 2183;
2202 -> 2183;
2203 -> 2201;
2203 -> 2202;
2204 -> 2181;
2204 -> 2202;
2205 -> 2204;
2205 -> 2198;
2205 -> 2202;
2206 -> 2202;
2207 -> 2205;
2208 -> 2203;
2208 -> 2205;
2209 -> 2183;
2210 -> 2181;
2210 -> 2209;
2211 -> 2210;
2211 -> 2205;
2211 -> 2209;
2212 -> 2183;
2213 -> 2183;
2214 -> 2181;
2214 -> 2205;
2214 -> 2213;
2215 -> 2214;
2215 -> 2183;
2216 -> 2215;
2217 -> 2215;
2218 -> 2216;
2218 -> 2217;
2219 -> 2217;
2219 -> 2205;
2219 -> 2211;
2220 -> 2217;
2221 -> 2219;
2221 -> 2220;
2221 -> 2217;
2222 -> 2219;
2223 -> 2218;
2223 -> 2217;
2224 -> 2217;
2224 -> 2222;
2224 -> 2223;
2225 -> 2215;
2226 -> 2181;
2226 -> 2225;
2227 -> 2226;
2227 -> 2222;
2227 -> 2225;
2228 -> 2215;
2229 -> 2215;
2230 -> 2181;
2230 -> 2222;
2230 -> 2229;
2230 -> 2215;
2231 -> 2215;
2232 -> 2229;
2232 -> 2231;
2233 -> 2229;
2233 -> 2231;
2234 -> 2181;
2234 -> 2231;
2235 -> 2232;
2235 -> 2231;
2236 -> 2233;
2236 -> 2231;
2237 -> 2235;
2237 -> 2236;
2237 -> 2231;
2238 -> 2231;
2239 -> 2237;
2239 -> 2238;
2240 -> 2234;
2240 -> 2238;
2241 -> 2240;
2241 -> 2222;
2241 -> 2238;
2242 -> 2240;
2242 -> 2222;
2242 -> 2227;
2242 -> 2241;
2243 -> 2241;
2244 -> 2242;
2244 -> 2243;
2244 -> 2241;
2245 -> 2242;
2246 -> 2239;
2246 -> 2241;
2247 -> 2240;
2247 -> 2245;
2247 -> 2246;
2247 -> 2241;
2248 -> 2231;
2249 -> 2215;
2250 -> 2181;
2250 -> 2249;
2251 -> 2250;
2251 -> 2245;
2251 -> 2249;
2252 -> 2249;
2253 -> 2250;
2253 -> 2245;
2253 -> 2251;
2253 -> 2252;
2253 -> 2249;
2254 -> 2215;
2255 -> 2215;
2256 -> 2215;
2257 -> 2255;
2257 -> 2256;
2258 -> 2256;
2258 -> 2245;
2259 -> 2256;
2259 -> 2245;
2259 -> 2251;
2259 -> 2258;
2260 -> 2258;
2261 -> 2259;
2261 -> 2260;
2261 -> 2258;
2262 -> 2257;
2262 -> 2258;
2263 -> 2256;
2263 -> 2259;
2263 -> 2262;
2263 -> 2258;
2264 -> 2183;
2265 -> 2183;
2266 -> 2264;
2266 -> 2265;
2267 -> 2181;
2267 -> 2265;
2268 -> 2267;
2268 -> 2259;
2268 -> 2265;
2269 -> 2265;
2270 -> 2268;
2271 -> 2266;
2271 -> 2268;
2272 -> 2183;
2273 -> 2181;
2273 -> 2272;
2274 -> 2273;
2274 -> 2268;
2274 -> 2272;
2275 -> 2183;
2276 -> 2181;
2276 -> 2268;
2276 -> 2179;
2277 -> 2180;
2277 -> 2268;
2277 -> 2274;
2277 -> 2179;
2278 -> 2181;
2278 -> 2268;
2278 -> 2274;
2278 -> 2277;
2279 -> 2181;
2279 -> 2277;
2280 -> 2279;
2280 -> 2277;
2280 -> 2278;
2280 -> 2268;
2280 -> 2274;
2281 -> 2277;
2282 -> 2280;
2282 -> 2281;
2283 -> 2280;
2283 -> 2281;
2284 -> 2283;
2284 -> 2280;
2284 -> 2281;
2285 -> 2281;
2286 -> 2283;
2286 -> 2284;
2286 -> 2285;
2286 -> 2281;
2287 -> 2282;
2287 -> 2281;
2288 -> 2281;
2289 -> 2287;
2289 -> 2288;
2290 -> 2283;
2290 -> 2288;
2291 -> 2290;
2291 -> 2284;
2291 -> 2288;
2292 -> 2289;
2292 -> 2288;
2293 -> 2288;
2294 -> 2292;
2294 -> 2293;
2295 -> 2294;
2295 -> 2293;
2296 -> 2295;
2296 -> 2291;
2296 -> 2293;
2297 -> 2288;
2298 -> 2290;
2298 -> 2296;
2298 -> 2297;
2298 -> 2288;
2299 -> 2289;
2299 -> 2288;
2300 -> 2299;
2300 -> 2296;
2300 -> 2288;
2301 -> 2300;
2301 -> 2288;
2302 -> 2288;
2303 -> 2288;
2304 -> 2303;
2304 -> 2288;
2305 -> 2289;
2305 -> 2288;
2306 -> 2302;
2306 -> 2288;
2307 -> 2303;
2307 -> 2288;
2308 -> 2288;
2309 -> 2305;
2309 -> 2308;
2310 -> 2306;
2310 -> 2308;
2311 -> 2307;
2311 -> 2308;
2312 -> 2290;
2312 -> 2308;
2313 -> 0;
2313 -> 2308;
2314 -> 2308;
2315 -> 2308;
2316 -> 2309;
2316 -> 2300;
2316 -> 2308;
2317 -> 2316;
2317 -> 2300;
2318 -> 2317;
2318 -> 2313;
2318 -> 2316;
2319 -> 2318;
2319 -> 2316;
2320 -> 2316;
2321 -> 2312;
2321 -> 2320;
2321 -> 2316;
2322 -> 2321;
2322 -> 2316;
2323 -> 2308;
2324 -> 2315;
2324 -> 2323;
2324 -> 2308;
2325 -> 0;
2325 -> 2324;
2326 -> 2308;
2327 -> 2326;
2327 -> 2288;
2328 -> 2325;
2328 -> 0;
2328 -> 2288;
2329 -> 2319;
2329 -> 0;
2329 -> 2328;
2330 -> 2328;
2331 -> 2281;
2332 -> 2283;
2332 -> 2321;
2332 -> 2281;
2333 -> 2282;
2333 -> 2321;
2333 -> 2332;
2334 -> 2283;
2334 -> 2333;
2335 -> 2283;
2335 -> 2333;
2336 -> 2335;
2336 -> 2333;
2336 -> 2334;
2337 -> 2333;
2338 -> 2337;
2339 -> 2336;
2339 -> 2338;
2339 -> 2337;
2340 -> 2336;
2340 -> 2337;
2341 -> 2337;
2342 -> 2337;
2343 -> 2342;
2343 -> 2337;
2344 -> 2341;
2344 -> 2337;
2345 -> 2342;
2345 -> 2337;
2346 -> 0;
2346 -> 2337;
2347 -> 2337;
2348 -> 2337;
2349 -> 2336;
2350 -> 2349;
2350 -> 2346;
2350 -> 2336;
2351 -> 2350;
2351 -> 2336;
2352 -> 2336;
2353 -> 2337;
2354 -> 2348;
2354 -> 2353;
2354 -> 2337;
2355 -> 0;
2355 -> 2354;
2356 -> 2337;
2357 -> 2355;
2357 -> 0;
2357 -> 2337;
2358 -> 2351;
2358 -> 0;
2358 -> 2357;
2359 -> 2357;
2360 -> 2336;
2361 -> 2180;
2361 -> 2336;
2361 -> 2179;
2362 -> 2361;
2363 -> 2362;
2364 -> 2361;
2365 -> 2361;
2366 -> 2361;
2367 -> 2365;
2367 -> 2366;
2368 -> 2366;
2368 -> 2336;
2368 -> 2362;
2369 -> 2366;
2370 -> 2368;
2370 -> 2369;
2370 -> 2366;
2371 -> 2367;
2371 -> 2366;
2372 -> 2366;
2372 -> 2368;
2372 -> 2371;
2373 -> 2361;
2374 -> 2373;
2374 -> 2368;
2375 -> 2373;
2376 -> 2373;
2376 -> 2368;
2376 -> 2374;
2376 -> 2375;
2377 -> 2361;
2378 -> 2361;
2379 -> 2361;
2380 -> 2378;
2380 -> 2379;
2381 -> 2379;
2381 -> 2368;
2382 -> 2379;
2382 -> 2368;
2382 -> 2374;
2382 -> 2381;
2383 -> 2381;
2384 -> 2382;
2384 -> 2383;
2384 -> 2381;
2385 -> 2380;
2385 -> 2381;
2386 -> 2379;
2386 -> 2382;
2386 -> 2385;
2386 -> 2381;
2387 -> 2107;
2388 -> 2134;
2388 -> 2382;
2388 -> 2387;
2388 -> 2107;
2389 -> 2119;
2389 -> 2382;
2389 -> 2107;
2390 -> 2107;
2391 -> 2113;
2391 -> 2390;
2391 -> 2107;
2392 -> 2391;
2393 -> 2108;
2393 -> 2392;
2394 -> 2392;
2395 -> 2393;
2395 -> 2389;
2395 -> 2394;
2396 -> 2394;
2397 -> 2395;
2397 -> 2391;
2398 -> 2397;
2399 -> 2111;
2399 -> 2397;
2400 -> 2112;
2400 -> 2397;
2401 -> 2397;
2402 -> 2398;
2402 -> 2401;
2403 -> 2398;
2403 -> 2401;
2404 -> 2399;
2404 -> 2401;
2405 -> 2400;
2405 -> 2401;
2406 -> 2402;
2406 -> 2401;
2407 -> 2050;
2407 -> 737;
2408 -> 2090;
2408 -> 737;
2409 -> 2051;
2409 -> 737;
2410 -> 2407;
2410 -> 2408;
2410 -> 2409;
2410 -> 2052;
2410 -> 2406;
2410 -> 737;
2411 -> 737;
2412 -> 738;
2412 -> 737;
2413 -> 738;
2413 -> 737;
2414 -> 738;
2414 -> 737;
2415 -> 738;
2415 -> 737;
2416 -> 737;
2417 -> 2415;
2417 -> 2410;
2417 -> 2416;
2417 -> 737;
2418 -> 2412;
2418 -> 737;
2419 -> 737;
2420 -> 2418;
2420 -> 2419;
2421 -> 2415;
2421 -> 2419;
2422 -> 2419;
2423 -> 2421;
2423 -> 2410;
2423 -> 2422;
2423 -> 2419;
2424 -> 737;
2425 -> 2410;
2425 -> 22;
2426 -> 22;
2427 -> 645;
2427 -> 2410;
2427 -> 22;
2428 -> 22;
2429 -> 646;
2429 -> 2410;
2429 -> 22;
2430 -> 22;
2431 -> 647;
2431 -> 2410;
2431 -> 2430;
2431 -> 22;
2432 -> 2410;
2432 -> 22;
2433 -> 22;
2434 -> 2432;
2434 -> 2433;
2435 -> 2432;
2435 -> 2433;
2436 -> 2432;
2436 -> 2433;
2437 -> 2432;
2437 -> 2433;
2438 -> 2432;
2438 -> 2433;
2439 -> 2432;
2439 -> 2433;
2440 -> 2432;
2440 -> 2433;
2441 -> 2434;
2441 -> 2433;
2442 -> 2435;
2442 -> 2433;
2443 -> 2436;
2443 -> 2433;
2444 -> 2437;
2444 -> 2433;
2445 -> 2438;
2445 -> 2433;
2446 -> 2439;
2446 -> 2433;
2447 -> 2440;
2447 -> 2433;
2448 -> 2433;
2449 -> 2441;
2449 -> 2448;
2450 -> 2442;
2450 -> 2448;
2451 -> 2443;
2451 -> 2448;
2452 -> 2444;
2452 -> 2448;
2453 -> 2445;
2453 -> 2448;
2454 -> 2446;
2454 -> 2448;
2455 -> 2447;
2455 -> 2448;
2456 -> 2449;
2456 -> 2448;
2457 -> 2449;
2457 -> 2448;
2458 -> 2448;
2459 -> 2450;
2459 -> 2448;
2460 -> 2451;
2460 -> 2448;
2461 -> 2452;
2461 -> 2448;
2462 -> 2453;
2462 -> 2448;
2463 -> 2454;
2463 -> 2448;
2465 -> 2464;
2467 -> 2466;
2468 -> 2455;
2468 -> 2448;
2469 -> 2448;
2470 -> 2457;
2470 -> 2469;
2471 -> 2458;
2471 -> 2469;
2472 -> 2459;
2472 -> 2469;
2473 -> 2460;
2473 -> 2469;
2474 -> 2461;
2474 -> 2469;
2475 -> 2462;
2475 -> 2469;
2476 -> 2463;
2476 -> 2469;
2477 -> 2457;
2477 -> 2469;
2478 -> 2468;
2478 -> 2469;
2479 -> 2458;
2479 -> 2469;
2480 -> 2458;
2480 -> 2469;
2481 -> 2458;
2481 -> 2469;
2482 -> 2481;
2482 -> 2469;
2483 -> 2481;
2483 -> 2469;
2484 -> 2481;
2484 -> 2469;
2485 -> 2481;
2485 -> 2469;
2486 -> 2481;
2486 -> 2469;
2487 -> 2481;
2487 -> 2469;
2488 -> 2481;
2488 -> 2469;
2489 -> 2481;
2489 -> 2469;
2490 -> 2481;
2490 -> 2469;
2491 -> 2481;
2491 -> 2469;
2492 -> 2481;
2492 -> 2469;
2493 -> 2481;
2493 -> 2469;
2494 -> 2481;
2494 -> 2469;
2495 -> 2481;
2495 -> 2469;
2496 -> 2481;
2496 -> 2469;
2497 -> 2470;
2497 -> 2481;
2497 -> 2469;
2498 -> 2471;
2498 -> 2481;
2498 -> 2469;
2499 -> 2472;
2499 -> 2481;
2499 -> 2469;
2500 -> 2473;
2500 -> 2481;
2500 -> 2469;
2501 -> 2474;
2501 -> 2481;
2501 -> 2469;
2502 -> 2475;
2502 -> 2481;
2502 -> 2469;
2503 -> 2476;
2503 -> 2481;
2503 -> 2469;
2504 -> 2477;
2504 -> 2469;
2505 -> 2504;
2505 -> 2481;
2505 -> 2469;
2506 -> 2478;
2506 -> 2481;
2506 -> 2469;
2507 -> 2479;
2507 -> 2481;
2507 -> 2469;
2508 -> 2480;
2508 -> 2481;
2508 -> 2469;
2509 -> 2458;
2509 -> 2433;
2510 -> 2509;
2510 -> 22;
2511 -> 2432;
2511 -> 2510;
2511 -> 2497;
2511 -> 2498;
2511 -> 2508;
2511 -> 2499;
2511 -> 2500;
2511 -> 2501;
2511 -> 2503;
2511 -> 2505;
2511 -> 2490;
2511 -> 2506;
2511 -> 2507;
2511 -> 2502;
2511 -> 2494;
2511 -> 2495;
2511 -> 2496;
2511 -> 2457;
2511 -> 22;
2512 -> 22;
2513 -> 0;
2513 -> 22;
2514 -> 2512;
2514 -> 22;
2515 -> 22;
2516 -> 2512;
2516 -> 2515;
2517 -> 2513;
2517 -> 2515;
2518 -> 2517;
2518 -> 2513;
2518 -> 2515;
2519 -> 2516;
2519 -> 2515;
2520 -> 2515;
2521 -> 2515;
2522 -> 2518;
2522 -> 2521;
2523 -> 2518;
2523 -> 2521;
2524 -> 2518;
2524 -> 2521;
2525 -> 2519;
2525 -> 2521;
2526 -> 2518;
2526 -> 2521;
2527 -> 2518;
2527 -> 2521;
2528 -> 2520;
2528 -> 2521;
2529 -> 2518;
2529 -> 2521;
2530 -> 2518;
2530 -> 2521;
2531 -> 2518;
2531 -> 2521;
2532 -> 2518;
2532 -> 2521;
2533 -> 2520;
2533 -> 2521;
2534 -> 2533;
2534 -> 2521;
2535 -> 2533;
2535 -> 2521;
2536 -> 2533;
2536 -> 2521;
2537 -> 2533;
2537 -> 2521;
2538 -> 2533;
2538 -> 2521;
2539 -> 2533;
2539 -> 2521;
2540 -> 2533;
2540 -> 2521;
2541 -> 2533;
2541 -> 2521;
2542 -> 2533;
2542 -> 2521;
2543 -> 2533;
2543 -> 2521;
2544 -> 2533;
2544 -> 2521;
2545 -> 2533;
2545 -> 2521;
2546 -> 2533;
2546 -> 2521;
2547 -> 2533;
2547 -> 2521;
2548 -> 2533;
2548 -> 2521;
2549 -> 2522;
2549 -> 2533;
2549 -> 2521;
2550 -> 2523;
2550 -> 2533;
2550 -> 2521;
2551 -> 2524;
2551 -> 2533;
2551 -> 2521;
2552 -> 2525;
2552 -> 2533;
2552 -> 2521;
2553 -> 2526;
2553 -> 2533;
2553 -> 2521;
2554 -> 2527;
2554 -> 2533;
2554 -> 2521;
2555 -> 2528;
2555 -> 2533;
2555 -> 2521;
2556 -> 2529;
2556 -> 2521;
2557 -> 2556;
2557 -> 2533;
2557 -> 2521;
2558 -> 2530;
2558 -> 2533;
2558 -> 2521;
2559 -> 2531;
2559 -> 2533;
2559 -> 2521;
2560 -> 2532;
2560 -> 2533;
2560 -> 2521;
2561 -> 2520;
2561 -> 22;
2562 -> 22;
2563 -> 2512;
2563 -> 2562;
2564 -> 2512;
2564 -> 2562;
2565 -> 2561;
2565 -> 2562;
2566 -> 2565;
2566 -> 2549;
2566 -> 2562;
2567 -> 2565;
2567 -> 2550;
2567 -> 2562;
2568 -> 2565;
2568 -> 2551;
2568 -> 2562;
2569 -> 2565;
2569 -> 2552;
2569 -> 2562;
2570 -> 2562;
2571 -> 2563;
2571 -> 2570;
2571 -> 2562;
2572 -> 2564;
2572 -> 2570;
2572 -> 2562;
2573 -> 2571;
2573 -> 2572;
2573 -> 2562;
2574 -> 2565;
2574 -> 2554;
2574 -> 2562;
2575 -> 2565;
2575 -> 2555;
2575 -> 2562;
2576 -> 2565;
2576 -> 2557;
2576 -> 2562;
2577 -> 2565;
2577 -> 2558;
2577 -> 2562;
2578 -> 2565;
2578 -> 2559;
2578 -> 2562;
2579 -> 2565;
2579 -> 2560;
2579 -> 2562;
2580 -> 2562;
2581 -> 2566;
2581 -> 2580;
2582 -> 2567;
2582 -> 2580;
2583 -> 2568;
2583 -> 2580;
2584 -> 2569;
2584 -> 2580;
2585 -> 2573;
2585 -> 2580;
2586 -> 2574;
2586 -> 2580;
2587 -> 2575;
2587 -> 2580;
2588 -> 2576;
2588 -> 2580;
2589 -> 2577;
2589 -> 2580;
2590 -> 2578;
2590 -> 2580;
2591 -> 2579;
2591 -> 2580;
2592 -> 2570;
2592 -> 2580;
2593 -> 2592;
2593 -> 2580;
2594 -> 2592;
2594 -> 2580;
2595 -> 2592;
2595 -> 2580;
2596 -> 2592;
2596 -> 2580;
2597 -> 2592;
2597 -> 2580;
2598 -> 2592;
2598 -> 2580;
2599 -> 2592;
2599 -> 2580;
2600 -> 2592;
2600 -> 2580;
2601 -> 2592;
2601 -> 2580;
2602 -> 2592;
2602 -> 2580;
2603 -> 2592;
2603 -> 2580;
2604 -> 2592;
2604 -> 2580;
2605 -> 2592;
2605 -> 2580;
2606 -> 2592;
2606 -> 2580;
2607 -> 2592;
2607 -> 2580;
2608 -> 2585;
2608 -> 2592;
2608 -> 2580;
2609 -> 2570;
2609 -> 22;
2610 -> 22;
2611 -> 2512;
2611 -> 2610;
2612 -> 2609;
2612 -> 2610;
2613 -> 2612;
2613 -> 2581;
2613 -> 2610;
2614 -> 2611;
2614 -> 2610;
2615 -> 2612;
2615 -> 2583;
2615 -> 2610;
2616 -> 2612;
2616 -> 2584;
2616 -> 2610;
2617 -> 2612;
2617 -> 2608;
2617 -> 2610;
2618 -> 2612;
2618 -> 2586;
2618 -> 2610;
2619 -> 2610;
2620 -> 2612;
2620 -> 2588;
2620 -> 2610;
2621 -> 2612;
2621 -> 2589;
2621 -> 2610;
2622 -> 2612;
2622 -> 2590;
2622 -> 2610;
2623 -> 2612;
2623 -> 2591;
2623 -> 2610;
2624 -> 2610;
2625 -> 2613;
2625 -> 2624;
2626 -> 2614;
2626 -> 2624;
2627 -> 2615;
2627 -> 2624;
2628 -> 2616;
2628 -> 2624;
2629 -> 2617;
2629 -> 2624;
2630 -> 2618;
2630 -> 2624;
2631 -> 2619;
2631 -> 2624;
2632 -> 2620;
2632 -> 2624;
2633 -> 2621;
2633 -> 2624;
2634 -> 2622;
2634 -> 2624;
2635 -> 2623;
2635 -> 2624;
2636 -> 2619;
2636 -> 2624;
2637 -> 2636;
2637 -> 2624;
2638 -> 2636;
2638 -> 2624;
2639 -> 2636;
2639 -> 2624;
2640 -> 2636;
2640 -> 2624;
2641 -> 2636;
2641 -> 2624;
2642 -> 2636;
2642 -> 2624;
2643 -> 2636;
2643 -> 2624;
2644 -> 2636;
2644 -> 2624;
2645 -> 2636;
2645 -> 2624;
2646 -> 2636;
2646 -> 2624;
2647 -> 2636;
2647 -> 2624;
2648 -> 2636;
2648 -> 2624;
2649 -> 2636;
2649 -> 2624;
2650 -> 2636;
2650 -> 2624;
2651 -> 2636;
2651 -> 2624;
2652 -> 2626;
2652 -> 2636;
2652 -> 2624;
2653 -> 2631;
2653 -> 2636;
2653 -> 2624;
2654 -> 2619;
2654 -> 22;
2655 -> 2654;
2655 -> 2512;
2655 -> 22;
2656 -> 22;
2657 -> 2511;
2657 -> 2656;
2658 -> 2512;
2658 -> 2656;
2659 -> 2657;
2659 -> 2656;
2660 -> 2658;
2660 -> 2656;
2661 -> 2656;
2662 -> 2659;
2662 -> 2661;
2663 -> 2660;
2663 -> 2661;
2664 -> 2662;
2664 -> 2661;
2665 -> 2663;
2665 -> 2661;
2666 -> 2661;
2667 -> 2661;
2668 -> 2664;
2668 -> 2667;
2669 -> 2665;
2669 -> 2667;
2670 -> 2666;
2670 -> 2667;
2671 -> 2667;
2672 -> 2669;
2672 -> 2671;
2672 -> 2667;
2673 -> 2669;
2673 -> 2667;
2674 -> 2673;
2674 -> 2512;
2674 -> 2655;
2674 -> 2625;
2674 -> 2652;
2674 -> 2635;
2674 -> 2627;
2674 -> 2628;
2674 -> 2629;
2674 -> 2653;
2674 -> 2632;
2674 -> 2645;
2674 -> 2633;
2674 -> 2634;
2674 -> 2630;
2674 -> 2649;
2674 -> 2650;
2674 -> 2651;
2674 -> 2513;
2674 -> 2514;
2674 -> 2667;
2675 -> 2667;
2676 -> 2673;
2676 -> 2675;
2676 -> 2512;
2676 -> 2655;
2676 -> 2625;
2676 -> 2652;
2676 -> 2635;
2676 -> 2627;
2676 -> 2628;
2676 -> 2629;
2676 -> 2653;
2676 -> 2632;
2676 -> 2645;
2676 -> 2633;
2676 -> 2634;
2676 -> 2630;
2676 -> 2649;
2676 -> 2650;
2676 -> 2651;
2676 -> 2513;
2676 -> 2514;
2676 -> 2667;
2677 -> 2676;
2677 -> 2675;
2678 -> 2677;
2678 -> 2676;
2678 -> 2675;
2679 -> 2669;
2679 -> 2667;
2680 -> 2679;
2680 -> 2678;
2680 -> 2667;
2681 -> 2667;
2682 -> 2679;
2682 -> 2681;
2682 -> 2678;
2682 -> 2667;
2683 -> 2682;
2683 -> 2681;
2684 -> 2683;
2684 -> 2682;
2684 -> 2681;
2685 -> 2668;
2685 -> 2667;
2686 -> 2670;
2686 -> 2678;
2686 -> 2684;
2686 -> 2667;
2687 -> 2685;
2687 -> 2686;
2687 -> 2667;
2688 -> 2667;
2689 -> 2687;
2689 -> 2688;
2690 -> 2687;
2690 -> 2688;
2691 -> 2687;
2691 -> 2688;
2692 -> 2687;
2692 -> 2688;
2693 -> 2687;
2693 -> 2688;
2694 -> 2693;
2694 -> 2688;
2695 -> 2693;
2695 -> 2688;
2696 -> 2693;
2696 -> 2688;
2697 -> 2693;
2697 -> 2688;
2698 -> 2693;
2698 -> 2688;
2699 -> 2693;
2699 -> 2688;
2700 -> 2693;
2700 -> 2688;
2701 -> 2693;
2701 -> 2688;
2702 -> 2693;
2702 -> 2688;
2703 -> 2693;
2703 -> 2688;
2704 -> 2693;
2704 -> 2688;
2705 -> 2689;
2705 -> 2687;
2705 -> 2693;
2705 -> 2688;
2706 -> 2689;
2706 -> 2687;
2706 -> 2693;
2706 -> 2688;
2707 -> 2689;
2707 -> 2687;
2707 -> 2693;
2707 -> 2688;
2708 -> 2689;
2708 -> 2687;
2708 -> 2693;
2708 -> 2688;
2709 -> 2691;
2709 -> 2688;
2710 -> 2709;
2711 -> 2710;
2711 -> 2693;
2711 -> 2688;
2712 -> 2692;
2712 -> 2688;
2713 -> 2712;
2714 -> 2713;
2714 -> 2693;
2714 -> 2688;
2715 -> 2688;
2716 -> 2688;
2717 -> 2689;
2717 -> 2687;
2717 -> 2716;
2717 -> 2688;
2718 -> 2689;
2718 -> 2687;
2718 -> 2688;
2719 -> 0;
2719 -> 2688;
2720 -> 2689;
2720 -> 2717;
2721 -> 2717;
2722 -> 2720;
2722 -> 2721;
2722 -> 2717;
2723 -> 2720;
2723 -> 2718;
2723 -> 2693;
2723 -> 2722;
2724 -> 2689;
2724 -> 2718;
2724 -> 2693;
2724 -> 2722;
2725 -> 2690;
2725 -> 2693;
2725 -> 2688;
2726 -> 2693;
2726 -> 2725;
2726 -> 2688;
2727 -> 2693;
2727 -> 2708;
2727 -> 2718;
2727 -> 2726;
2728 -> 2727;
2729 -> 2728;
2729 -> 2693;
2729 -> 2727;
2730 -> 2726;
2731 -> 2720;
2731 -> 2730;
2731 -> 2726;
2732 -> 2720;
2732 -> 2728;
2732 -> 2693;
2732 -> 2731;
2733 -> 2726;
2734 -> 2693;
2734 -> 2732;
2734 -> 2733;
2734 -> 2726;
2735 -> 2693;
2735 -> 2732;
2735 -> 2728;
2735 -> 2733;
2735 -> 2726;
2736 -> 2693;
2736 -> 2708;
2736 -> 2728;
2736 -> 2688;
2737 -> 2736;
2737 -> 2693;
2737 -> 2688;
2738 -> 2687;
2738 -> 2736;
2738 -> 2724;
2738 -> 2706;
2738 -> 2707;
2738 -> 2729;
2738 -> 2732;
2738 -> 2737;
2738 -> 2700;
2738 -> 2723;
2738 -> 2725;
2738 -> 2711;
2738 -> 2714;
2738 -> 2704;
2738 -> 2693;
2738 -> 2708;
2738 -> 2667;
2739 -> 2669;
2739 -> 2667;
2740 -> 2739;
2740 -> 2684;
2740 -> 2667;
2741 -> 2740;
2742 -> 2741;
2742 -> 2738;
2742 -> 2684;
2742 -> 2740;
2743 -> 2742;
2743 -> 2741;
2744 -> 2742;
2744 -> 2741;
2745 -> 2743;
2745 -> 2741;
2746 -> 2741;
2747 -> 2745;
2747 -> 2746;
2747 -> 2741;
2748 -> 2745;
2748 -> 2742;
2748 -> 2741;
2749 -> 2744;
2749 -> 2742;
2749 -> 2748;
2749 -> 2741;
2750 -> 2744;
2750 -> 2749;
2750 -> 2745;
2750 -> 2741;
2751 -> 2744;
2751 -> 2749;
2751 -> 2745;
2751 -> 2741;
2752 -> 2744;
2752 -> 2749;
2752 -> 2741;
2753 -> 2744;
2753 -> 2749;
2753 -> 2745;
2753 -> 2752;
2754 -> 2741;
2755 -> 2744;
2755 -> 2749;
2755 -> 2754;
2755 -> 2741;
2756 -> 2755;
2757 -> 2744;
2757 -> 2749;
2757 -> 2745;
2757 -> 2756;
2758 -> 2741;
2759 -> 2744;
2759 -> 2749;
2759 -> 2758;
2759 -> 2741;
2760 -> 2741;
2761 -> 2745;
2761 -> 2749;
2761 -> 2760;
2761 -> 2741;
2762 -> 2744;
2762 -> 2749;
2762 -> 2745;
2762 -> 2741;
2763 -> 2741;
2764 -> 2744;
2764 -> 2749;
2764 -> 2763;
2764 -> 2741;
2765 -> 2764;
2766 -> 2764;
2767 -> 2744;
2767 -> 2766;
2768 -> 2766;
2769 -> 2767;
2769 -> 2749;
2769 -> 2768;
2769 -> 2766;
2770 -> 2767;
2770 -> 2749;
2770 -> 2769;
2771 -> 2769;
2772 -> 2770;
2772 -> 2767;
2772 -> 2769;
2773 -> 2767;
2773 -> 2749;
2773 -> 2772;
2773 -> 2766;
2774 -> 2773;
2774 -> 2764;
2775 -> 2764;
2776 -> 2745;
2776 -> 2775;
2777 -> 2775;
2778 -> 2776;
2778 -> 2749;
2778 -> 2772;
2778 -> 2777;
2778 -> 2775;
2779 -> 2776;
2779 -> 2749;
2779 -> 2772;
2779 -> 2778;
2779 -> 2775;
2780 -> 2779;
2780 -> 2764;
2781 -> 2744;
2781 -> 2749;
2781 -> 2745;
2781 -> 2764;
2782 -> 2774;
2782 -> 2781;
2783 -> 2749;
2783 -> 2772;
2783 -> 2778;
2783 -> 2770;
2783 -> 2781;
2784 -> 2780;
2784 -> 2781;
2785 -> 2782;
2785 -> 2784;
2785 -> 2749;
2785 -> 2772;
2785 -> 2778;
2785 -> 2770;
2785 -> 2771;
2785 -> 2781;
2786 -> 2744;
2786 -> 2785;
2786 -> 2745;
2786 -> 2741;
2787 -> 2741;
2788 -> 2742;
2788 -> 2787;
2788 -> 2785;
2788 -> 2740;
2789 -> 2740;
2790 -> 2788;
2790 -> 2789;
2790 -> 2740;
2791 -> 2788;
2791 -> 2790;
2792 -> 2667;
2793 -> 2738;
2793 -> 2791;
2793 -> 2792;
2793 -> 2667;
2794 -> 2667;
2795 -> 2669;
2795 -> 2667;
2796 -> 2668;
2796 -> 2667;
2797 -> 2667;
2798 -> 2795;
2798 -> 2797;
2799 -> 2796;
2799 -> 2797;
2800 -> 2797;
2801 -> 2797;
2802 -> 2799;
2802 -> 2797;
2803 -> 2802;
2803 -> 2791;
2803 -> 2797;
2804 -> 2791;
2804 -> 2797;
2805 -> 2803;
2805 -> 2797;
2806 -> 2800;
2806 -> 2805;
2807 -> 2806;
2807 -> 2797;
2808 -> 2806;
2808 -> 2797;
2809 -> 2808;
2809 -> 2797;
2810 -> 2798;
2810 -> 2797;
2811 -> 2810;
2811 -> 2791;
2811 -> 2797;
2812 -> 2797;
2813 -> 2810;
2813 -> 2812;
2813 -> 2791;
2813 -> 2797;
2814 -> 2798;
2814 -> 2797;
2815 -> 2814;
2815 -> 2813;
2815 -> 2797;
2816 -> 2797;
2817 -> 2814;
2817 -> 2816;
2817 -> 2813;
2817 -> 2797;
2818 -> 2798;
2818 -> 2797;
2819 -> 2797;
2820 -> 2818;
2820 -> 2819;
2822 -> 2821;
2823 -> 2821;
2824 -> 2823;
2824 -> 2819;
2825 -> 2819;
2826 -> 2820;
2826 -> 2819;
2827 -> 2826;
2827 -> 2817;
2827 -> 2819;
2828 -> 2827;
2829 -> 2827;
2830 -> 2825;
2830 -> 2829;
2830 -> 2827;
2831 -> 2827;
2832 -> 2819;
2833 -> 2832;
2833 -> 2797;
2834 -> 2799;
2834 -> 2833;
2835 -> 2833;
2836 -> 2834;
2836 -> 2835;
2837 -> 2836;
2837 -> 2835;
2838 -> 2835;
2839 -> 2823;
2839 -> 2835;
2840 -> 2837;
2840 -> 2838;
2840 -> 2839;
2840 -> 2817;
2840 -> 2835;
2841 -> 2797;
2842 -> 2841;
2842 -> 2797;
2843 -> 2797;
2844 -> 2797;
2845 -> 2841;
2845 -> 2844;
2845 -> 2842;
2845 -> 2797;
2846 -> 2797;
2847 -> 2798;
2847 -> 2797;
2848 -> 2847;
2848 -> 2840;
2848 -> 2797;
2849 -> 2848;
2850 -> 2809;
2850 -> 2848;
2851 -> 2848;
2852 -> 2849;
2852 -> 2851;
2853 -> 2850;
2853 -> 2851;
2854 -> 2851;
2855 -> 2854;
2855 -> 2853;
2855 -> 2851;
2856 -> 2851;
2857 -> 2852;
2857 -> 2856;
2858 -> 2856;
2859 -> 2856;
2860 -> 2858;
2860 -> 2859;
2860 -> 2856;
2861 -> 2856;
2862 -> 2857;
2862 -> 2840;
2862 -> 2861;
2862 -> 2856;
2863 -> 2857;
2863 -> 2840;
2863 -> 2862;
2864 -> 2858;
2864 -> 2863;
2864 -> 2860;
2864 -> 2862;
2865 -> 2862;
2866 -> 2858;
2866 -> 2865;
2866 -> 2864;
2866 -> 2862;
2867 -> 2857;
2867 -> 2840;
2867 -> 2862;
2868 -> 2858;
2868 -> 2867;
2868 -> 2866;
2868 -> 2862;
2869 -> 2856;
2870 -> 2857;
2870 -> 2840;
2870 -> 2869;
2870 -> 2856;
2871 -> 2870;
2872 -> 2871;
2873 -> 2858;
2873 -> 2872;
2873 -> 2868;
2873 -> 2871;
2874 -> 2857;
2874 -> 2840;
2874 -> 2871;
2875 -> 2858;
2875 -> 2874;
2875 -> 2873;
2875 -> 2871;
2876 -> 2870;
2877 -> 2858;
2877 -> 2876;
2877 -> 2875;
2877 -> 2870;
2878 -> 2857;
2878 -> 2840;
2878 -> 2856;
2879 -> 2856;
2880 -> 2858;
2880 -> 2879;
2880 -> 2877;
2880 -> 2856;
2881 -> 2856;
2882 -> 2857;
2882 -> 2840;
2882 -> 2881;
2882 -> 2856;
2883 -> 2882;
2884 -> 2858;
2884 -> 2883;
2884 -> 2880;
2884 -> 2882;
2885 -> 2882;
2886 -> 2885;
2886 -> 2882;
2887 -> 2882;
2888 -> 2886;
2888 -> 2882;
2889 -> 2888;
2890 -> 2858;
2890 -> 2889;
2890 -> 2884;
2890 -> 2888;
2891 -> 2886;
2891 -> 2888;
2892 -> 2858;
2892 -> 2891;
2892 -> 2890;
2892 -> 2888;
2893 -> 2888;
2894 -> 2858;
2894 -> 2893;
2894 -> 2892;
2894 -> 2888;
2895 -> 2888;
2896 -> 2882;
2897 -> 2858;
2897 -> 2896;
2897 -> 2894;
2897 -> 2882;
2898 -> 2856;
2899 -> 2857;
2899 -> 2888;
2899 -> 2898;
2899 -> 2856;
2900 -> 2899;
2901 -> 2858;
2901 -> 2900;
2901 -> 2897;
2901 -> 2899;
2902 -> 2899;
2903 -> 2858;
2903 -> 2902;
2903 -> 2901;
2903 -> 2899;
2904 -> 2899;
2905 -> 2858;
2905 -> 2904;
2905 -> 2903;
2905 -> 2899;
2906 -> 2899;
2907 -> 2858;
2907 -> 2906;
2907 -> 2905;
2907 -> 2899;
2908 -> 2899;
2909 -> 2858;
2909 -> 2908;
2909 -> 2907;
2909 -> 2899;
2910 -> 2857;
2910 -> 2888;
2910 -> 2856;
2911 -> 2910;
2912 -> 2858;
2912 -> 2911;
2912 -> 2909;
2912 -> 2910;
2913 -> 2856;
2914 -> 2857;
2914 -> 2888;
2914 -> 2913;
2914 -> 2856;
2915 -> 2856;
2916 -> 2857;
2916 -> 2888;
2916 -> 2915;
2916 -> 2856;
2917 -> 2856;
2918 -> 2857;
2918 -> 2888;
2918 -> 2917;
2918 -> 2856;
2919 -> 2858;
2919 -> 2912;
2919 -> 2856;
2920 -> 2919;
2920 -> 2851;
2921 -> 2855;
2921 -> 2920;
2921 -> 2851;
2922 -> 2846;
2922 -> 2921;
2922 -> 2848;
2923 -> 2841;
2923 -> 2797;
2924 -> 2846;
2924 -> 2797;
2925 -> 2797;
2926 -> 2923;
2926 -> 2925;
2927 -> 2924;
2927 -> 2925;
2928 -> 2927;
2928 -> 2922;
2928 -> 2925;
2929 -> 2925;
2930 -> 2929;
2930 -> 2928;
2930 -> 2925;
2931 -> 2927;
2931 -> 2929;
2931 -> 2922;
2931 -> 2930;
2932 -> 2926;
2932 -> 2931;
2932 -> 2845;
2932 -> 2930;
2933 -> 2930;
2934 -> 2926;
2934 -> 2932;
2934 -> 2930;
2935 -> 2797;
2936 -> 2797;
2937 -> 2841;
2937 -> 2936;
2937 -> 2934;
2937 -> 2797;
2938 -> 2797;
2939 -> 2840;
2939 -> 2888;
2939 -> 2797;
2940 -> 2797;
2941 -> 2939;
2941 -> 2797;
2942 -> 2941;
2942 -> 2940;
2943 -> 2941;
2943 -> 2940;
2944 -> 2941;
2944 -> 2940;
2945 -> 2940;
2946 -> 2942;
2946 -> 2945;
2946 -> 2940;
2947 -> 2940;
2948 -> 2943;
2948 -> 2947;
2948 -> 2940;
2949 -> 2943;
2949 -> 2941;
2949 -> 2940;
2950 -> 2942;
2950 -> 2941;
2950 -> 2949;
2950 -> 2940;
2951 -> 2940;
2952 -> 2950;
2952 -> 2951;
2952 -> 2940;
2953 -> 2943;
2953 -> 2941;
2953 -> 2940;
2954 -> 2942;
2954 -> 2941;
2954 -> 2953;
2954 -> 2940;
2955 -> 2943;
2955 -> 2954;
2955 -> 2940;
2956 -> 2955;
2956 -> 2951;
2956 -> 2940;
2957 -> 2939;
2957 -> 2954;
2958 -> 2957;
2958 -> 2954;
2959 -> 2958;
2959 -> 2954;
2960 -> 2954;
2961 -> 2954;
2962 -> 2807;
2962 -> 2954;
2963 -> 2841;
2963 -> 2962;
2964 -> 2809;
2964 -> 2962;
2965 -> 2962;
2966 -> 2963;
2966 -> 2965;
2967 -> 2964;
2967 -> 2965;
2968 -> 2965;
2969 -> 2968;
2969 -> 2967;
2969 -> 2965;
2970 -> 2966;
2970 -> 2968;
2970 -> 2969;
2970 -> 2937;
2970 -> 2965;
2971 -> 2962;
2972 -> 2962;
2973 -> 2841;
2973 -> 2972;
2973 -> 2970;
2973 -> 2962;
2974 -> 2957;
2974 -> 2958;
2974 -> 2962;
2975 -> 2841;
2975 -> 2974;
2975 -> 2973;
2975 -> 2962;
2976 -> 2957;
2976 -> 2974;
2976 -> 2962;
2977 -> 2976;
2977 -> 2974;
2977 -> 2962;
2978 -> 2841;
2978 -> 2977;
2979 -> 2809;
2979 -> 2977;
2980 -> 2977;
2981 -> 2978;
2981 -> 2980;
2982 -> 2979;
2982 -> 2980;
2983 -> 2980;
2984 -> 2983;
2984 -> 2982;
2984 -> 2980;
2985 -> 2981;
2985 -> 2983;
2985 -> 2984;
2985 -> 2975;
2985 -> 2980;
2986 -> 2977;
2987 -> 2977;
2988 -> 2841;
2988 -> 2987;
2988 -> 2985;
2988 -> 2977;
2989 -> 2977;
2990 -> 2841;
2990 -> 2989;
2990 -> 2988;
2990 -> 2977;
2991 -> 2957;
2991 -> 2954;
2992 -> 2954;
2993 -> 2811;
2993 -> 2954;
2994 -> 2815;
2994 -> 2954;
2995 -> 2954;
2996 -> 2991;
2996 -> 2995;
2997 -> 2992;
2997 -> 2995;
2998 -> 2993;
2998 -> 2995;
2999 -> 2994;
2999 -> 2995;
3000 -> 2992;
3000 -> 2995;
3001 -> 3000;
3001 -> 2995;
3002 -> 3000;
3002 -> 2995;
3003 -> 3000;
3003 -> 2995;
3004 -> 3000;
3004 -> 2995;
3005 -> 3000;
3005 -> 2995;
3006 -> 3000;
3006 -> 2995;
3007 -> 3000;
3007 -> 2995;
3008 -> 3000;
3008 -> 2995;
3009 -> 3000;
3009 -> 2995;
3010 -> 2996;
3010 -> 2989;
3010 -> 3000;
3010 -> 2995;
3011 -> 2996;
3011 -> 2989;
3011 -> 3000;
3011 -> 2995;
3012 -> 2996;
3012 -> 2989;
3012 -> 3000;
3012 -> 2995;
3013 -> 2996;
3013 -> 2989;
3013 -> 3000;
3013 -> 2995;
3014 -> 2995;
3015 -> 2996;
3015 -> 2989;
3015 -> 2995;
3016 -> 3000;
3017 -> 3000;
3017 -> 3015;
3017 -> 3016;
3018 -> 3000;
3018 -> 3015;
3018 -> 3013;
3018 -> 3016;
3019 -> 2992;
3019 -> 2954;
3020 -> 2798;
3020 -> 2954;
3021 -> 2992;
3021 -> 2954;
3022 -> 3020;
3022 -> 3021;
3022 -> 3013;
3022 -> 3015;
3022 -> 3011;
3022 -> 3012;
3022 -> 3000;
3022 -> 2997;
3022 -> 2998;
3022 -> 2999;
3022 -> 2954;
3023 -> 2954;
3024 -> 3023;
3025 -> 3022;
3025 -> 3024;
3025 -> 3023;
3026 -> 3022;
3026 -> 3023;
3027 -> 3022;
3027 -> 3023;
3028 -> 3022;
3028 -> 3023;
3029 -> 3022;
3029 -> 3028;
3030 -> 3023;
3031 -> 3022;
3031 -> 3030;
3031 -> 3023;
3032 -> 3031;
3033 -> 3022;
3033 -> 3032;
3034 -> 3023;
3035 -> 3022;
3035 -> 3034;
3035 -> 3023;
3036 -> 3023;
3037 -> 3022;
3037 -> 3036;
3037 -> 3023;
3038 -> 3022;
3038 -> 3023;
3039 -> 3022;
3040 -> 3022;
3040 -> 3023;
3041 -> 2954;
3042 -> 3022;
3042 -> 3041;
3042 -> 2954;
3043 -> 2798;
3043 -> 3022;
3043 -> 3042;
3044 -> 2992;
3044 -> 2954;
3045 -> 2809;
3045 -> 2954;
3046 -> 2954;
3047 -> 3044;
3047 -> 3046;
3048 -> 3045;
3048 -> 3046;
3049 -> 3046;
3050 -> 3049;
3050 -> 3048;
3050 -> 3046;
3051 -> 3046;
3052 -> 3046;
3053 -> 3051;
3053 -> 3052;
3053 -> 3046;
3054 -> 3046;
3055 -> 3047;
3055 -> 3022;
3055 -> 3054;
3055 -> 3046;
3056 -> 3047;
3056 -> 3022;
3056 -> 3055;
3057 -> 3051;
3057 -> 3056;
3057 -> 3053;
3057 -> 3055;
3058 -> 3055;
3059 -> 3051;
3059 -> 3058;
3059 -> 3057;
3059 -> 3055;
3060 -> 3047;
3060 -> 3022;
3060 -> 3055;
3061 -> 3051;
3061 -> 3060;
3061 -> 3059;
3061 -> 3055;
3062 -> 3046;
3063 -> 3047;
3063 -> 3022;
3063 -> 3062;
3063 -> 3046;
3064 -> 3063;
3065 -> 3064;
3066 -> 3051;
3066 -> 3065;
3066 -> 3061;
3066 -> 3064;
3067 -> 3047;
3067 -> 3022;
3067 -> 3064;
3068 -> 3051;
3068 -> 3067;
3068 -> 3066;
3068 -> 3064;
3069 -> 3063;
3070 -> 3051;
3070 -> 3069;
3070 -> 3068;
3070 -> 3063;
3071 -> 3047;
3071 -> 3022;
3071 -> 3046;
3072 -> 3046;
3073 -> 3051;
3073 -> 3072;
3073 -> 3070;
3073 -> 3046;
3074 -> 3047;
3074 -> 3022;
3074 -> 3046;
3075 -> 3074;
3076 -> 3051;
3076 -> 3075;
3076 -> 3073;
3076 -> 3074;
3077 -> 3074;
3078 -> 3051;
3078 -> 3077;
3078 -> 3076;
3078 -> 3074;
3079 -> 3074;
3080 -> 3051;
3080 -> 3079;
3080 -> 3078;
3080 -> 3074;
3081 -> 3074;
3082 -> 3051;
3082 -> 3081;
3082 -> 3080;
3082 -> 3074;
3083 -> 3074;
3084 -> 3074;
3085 -> 3051;
3085 -> 3084;
3085 -> 3082;
3085 -> 3074;
3086 -> 3046;
3087 -> 3047;
3087 -> 3074;
3087 -> 3086;
3087 -> 3046;
3088 -> 3087;
3089 -> 3051;
3089 -> 3088;
3089 -> 3085;
3089 -> 3087;
3090 -> 3087;
3091 -> 3051;
3091 -> 3090;
3091 -> 3089;
3091 -> 3087;
3092 -> 3087;
3093 -> 3051;
3093 -> 3092;
3093 -> 3091;
3093 -> 3087;
3094 -> 3087;
3095 -> 3051;
3095 -> 3094;
3095 -> 3093;
3095 -> 3087;
3096 -> 3087;
3097 -> 3051;
3097 -> 3096;
3097 -> 3095;
3097 -> 3087;
3098 -> 3047;
3098 -> 3074;
3098 -> 3046;
3099 -> 3098;
3100 -> 3051;
3100 -> 3099;
3100 -> 3097;
3100 -> 3098;
3101 -> 3046;
3102 -> 3047;
3102 -> 3074;
3102 -> 3101;
3102 -> 3046;
3103 -> 3046;
3104 -> 3047;
3104 -> 3074;
3104 -> 3103;
3104 -> 3046;
3105 -> 3046;
3106 -> 3047;
3106 -> 3074;
3106 -> 3105;
3106 -> 3046;
3107 -> 3051;
3107 -> 3100;
3107 -> 3046;
3108 -> 3107;
3108 -> 3046;
3109 -> 3050;
3109 -> 3108;
3109 -> 3046;
3110 -> 2841;
3110 -> 3109;
3110 -> 2990;
3110 -> 2954;
3111 -> 3043;
3111 -> 2954;
3112 -> 2809;
3112 -> 2954;
3113 -> 2954;
3114 -> 3111;
3114 -> 3113;
3115 -> 3112;
3115 -> 3113;
3116 -> 3113;
3117 -> 3116;
3117 -> 3115;
3117 -> 3113;
3118 -> 3113;
3119 -> 3113;
3120 -> 3118;
3120 -> 3119;
3120 -> 3113;
3121 -> 3113;
3122 -> 3114;
3122 -> 3074;
3122 -> 3121;
3122 -> 3113;
3123 -> 3114;
3123 -> 3074;
3123 -> 3122;
3124 -> 3118;
3124 -> 3123;
3124 -> 3120;
3124 -> 3122;
3125 -> 3122;
3126 -> 3118;
3126 -> 3125;
3126 -> 3124;
3126 -> 3122;
3127 -> 3114;
3127 -> 3074;
3127 -> 3122;
3128 -> 3118;
3128 -> 3127;
3128 -> 3126;
3128 -> 3122;
3129 -> 3113;
3130 -> 3114;
3130 -> 3074;
3130 -> 3129;
3130 -> 3113;
3131 -> 3130;
3132 -> 3131;
3133 -> 3118;
3133 -> 3132;
3133 -> 3128;
3133 -> 3131;
3134 -> 3114;
3134 -> 3074;
3134 -> 3131;
3135 -> 3118;
3135 -> 3134;
3135 -> 3133;
3135 -> 3131;
3136 -> 3130;
3137 -> 3118;
3137 -> 3136;
3137 -> 3135;
3137 -> 3130;
3138 -> 3114;
3138 -> 3074;
3138 -> 3113;
3139 -> 3113;
3140 -> 3118;
3140 -> 3139;
3140 -> 3137;
3140 -> 3113;
3141 -> 3114;
3141 -> 3074;
3141 -> 3113;
3142 -> 3141;
3143 -> 3118;
3143 -> 3142;
3143 -> 3140;
3143 -> 3141;
3144 -> 3141;
3145 -> 3118;
3145 -> 3144;
3145 -> 3143;
3145 -> 3141;
3146 -> 3141;
3147 -> 3118;
3147 -> 3146;
3147 -> 3145;
3147 -> 3141;
3148 -> 3141;
3149 -> 3118;
3149 -> 3148;
3149 -> 3147;
3149 -> 3141;
3150 -> 3141;
3151 -> 3141;
3152 -> 3118;
3152 -> 3151;
3152 -> 3149;
3152 -> 3141;
3153 -> 3113;
3154 -> 3114;
3154 -> 3141;
3154 -> 3153;
3154 -> 3113;
3155 -> 3154;
3156 -> 3118;
3156 -> 3155;
3156 -> 3152;
3156 -> 3154;
3157 -> 3154;
3158 -> 3118;
3158 -> 3157;
3158 -> 3156;
3158 -> 3154;
3159 -> 3154;
3160 -> 3118;
3160 -> 3159;
3160 -> 3158;
3160 -> 3154;
3161 -> 3154;
3162 -> 3118;
3162 -> 3161;
3162 -> 3160;
3162 -> 3154;
3163 -> 3154;
3164 -> 3118;
3164 -> 3163;
3164 -> 3162;
3164 -> 3154;
3165 -> 3114;
3165 -> 3141;
3165 -> 3113;
3166 -> 3165;
3167 -> 3118;
3167 -> 3166;
3167 -> 3164;
3167 -> 3165;
3168 -> 3113;
3169 -> 3114;
3169 -> 3141;
3169 -> 3168;
3169 -> 3113;
3170 -> 3113;
3171 -> 3114;
3171 -> 3141;
3171 -> 3170;
3171 -> 3113;
3172 -> 3113;
3173 -> 3114;
3173 -> 3141;
3173 -> 3172;
3173 -> 3113;
3174 -> 3118;
3174 -> 3167;
3174 -> 3113;
3175 -> 3174;
3175 -> 3113;
3176 -> 3117;
3176 -> 3175;
3176 -> 3113;
3177 -> 2938;
3177 -> 3176;
3177 -> 2954;
3178 -> 2797;
3179 -> 2954;
3179 -> 3178;
3179 -> 2797;
3180 -> 2841;
3180 -> 3110;
3180 -> 3179;
3181 -> 2797;
3182 -> 2841;
3182 -> 3181;
3182 -> 3180;
3182 -> 2797;
3183 -> 2846;
3183 -> 2797;
3184 -> 2938;
3184 -> 2797;
3188 -> 3186;
3188 -> 3185;
3189 -> 3187;
3189 -> 3185;
3190 -> 3185;
3191 -> 0;
3191 -> 2797;
3192 -> 2797;
3193 -> 2797;
3194 -> 3183;
3194 -> 3193;
3195 -> 3184;
3195 -> 3193;
3196 -> 3191;
3196 -> 3193;
3197 -> 3192;
3197 -> 3193;
3198 -> 3192;
3198 -> 3193;
3199 -> 3193;
3200 -> 3197;
3200 -> 3199;
3200 -> 3193;
3201 -> 3200;
3201 -> 3193;
3202 -> 0;
3204 -> 3202;
3204 -> 3203;
3205 -> 3203;
3207 -> 3206;
3209 -> 3208;
3211 -> 3210;
3212 -> 3205;
3213 -> 3205;
3213 -> 3203;
3214 -> 3204;
3214 -> 3205;
3214 -> 3203;
3215 -> 3203;
3216 -> 3193;
3217 -> 3216;
3217 -> 3198;
3217 -> 3193;
3218 -> 3194;
3218 -> 3193;
3219 -> 3195;
3219 -> 3193;
3220 -> 3196;
3220 -> 3193;
3221 -> 3218;
3221 -> 3193;
3222 -> 3219;
3222 -> 3193;
3223 -> 3217;
3223 -> 3193;
3224 -> 3193;
3225 -> 3221;
3225 -> 3224;
3226 -> 3222;
3226 -> 3224;
3227 -> 3223;
3227 -> 3224;
3228 -> 3201;
3228 -> 3224;
3229 -> 3225;
3229 -> 3224;
3230 -> 3225;
3230 -> 3218;
3230 -> 3224;
3231 -> 3226;
3231 -> 3224;
3232 -> 3226;
3232 -> 3219;
3232 -> 3224;
3233 -> 3224;
3234 -> 3229;
3234 -> 3233;
3235 -> 3230;
3235 -> 3233;
3236 -> 3231;
3236 -> 3233;
3237 -> 3232;
3237 -> 3233;
3238 -> 3228;
3238 -> 3233;
3239 -> 3234;
3239 -> 3233;
3240 -> 3235;
3240 -> 3233;
3241 -> 3236;
3241 -> 3233;
3242 -> 3237;
3242 -> 3233;
3243 -> 3233;
3244 -> 3239;
3244 -> 3243;
3245 -> 3240;
3245 -> 3243;
3246 -> 3241;
3246 -> 3243;
3247 -> 3242;
3247 -> 3243;
3248 -> 3238;
3248 -> 3243;
3249 -> 3243;
3250 -> 3245;
3250 -> 3249;
3250 -> 3243;
3251 -> 3243;
3252 -> 3247;
3252 -> 3251;
3252 -> 3243;
3253 -> 3250;
3253 -> 3252;
3253 -> 3243;
3254 -> 3243;
3255 -> 3254;
3255 -> 3253;
3255 -> 3243;
3256 -> 3243;
3257 -> 3256;
3257 -> 3245;
3257 -> 3243;
3258 -> 3257;
3259 -> 3253;
3259 -> 3255;
3259 -> 3258;
3259 -> 3257;
3260 -> 3259;
3260 -> 3256;
3260 -> 3258;
3260 -> 3253;
3260 -> 3257;
3261 -> 3243;
3262 -> 3261;
3262 -> 3247;
3262 -> 3243;
3263 -> 3262;
3264 -> 3253;
3264 -> 3255;
3264 -> 3260;
3264 -> 3263;
3264 -> 3262;
3265 -> 3264;
3265 -> 3263;
3265 -> 3261;
3265 -> 3253;
3265 -> 3262;
3266 -> 3243;
3267 -> 3266;
3267 -> 3245;
3267 -> 3243;
3268 -> 3267;
3269 -> 3268;
3269 -> 3247;
3269 -> 3267;
3270 -> 3269;
3271 -> 3253;
3271 -> 3255;
3271 -> 3260;
3271 -> 3265;
3271 -> 3270;
3271 -> 3269;
3272 -> 3244;
3272 -> 3269;
3273 -> 3246;
3273 -> 3269;
3274 -> 3269;
3275 -> 3272;
3275 -> 3274;
3276 -> 3270;
3276 -> 3274;
3277 -> 3273;
3277 -> 3274;
3278 -> 3270;
3278 -> 3274;
3279 -> 3248;
3279 -> 3274;
3280 -> 3275;
3280 -> 3218;
3280 -> 3276;
3280 -> 3274;
3281 -> 3277;
3281 -> 3219;
3281 -> 3278;
3281 -> 3274;
3282 -> 3279;
3282 -> 0;
3282 -> 3280;
3282 -> 3281;
3282 -> 3218;
3282 -> 3219;
3282 -> 3274;
3283 -> 3271;
3283 -> 3282;
3283 -> 3269;
3284 -> 3269;
3285 -> 3253;
3285 -> 3255;
3285 -> 3260;
3285 -> 3265;
3285 -> 3284;
3285 -> 3268;
3285 -> 3269;
3286 -> 3269;
3287 -> 3253;
3287 -> 3255;
3287 -> 3260;
3287 -> 3265;
3287 -> 3266;
3287 -> 3286;
3287 -> 3269;
3288 -> 3283;
3288 -> 3269;
3289 -> 3285;
3289 -> 3269;
3290 -> 3288;
3290 -> 3289;
3290 -> 3269;
3291 -> 3287;
3291 -> 3269;
3292 -> 3290;
3292 -> 3291;
3292 -> 3269;
3293 -> 3292;
3293 -> 3266;
3293 -> 3268;
3293 -> 3253;
3293 -> 3269;
3294 -> 3253;
3294 -> 3243;
3295 -> 3235;
3295 -> 3233;
3296 -> 3237;
3296 -> 3233;
3297 -> 3233;
3298 -> 3295;
3298 -> 3297;
3298 -> 3233;
3299 -> 3296;
3299 -> 3297;
3299 -> 3233;
3300 -> 3298;
3300 -> 3299;
3300 -> 3233;
3301 -> 3294;
3301 -> 3253;
3301 -> 3255;
3301 -> 3260;
3301 -> 3265;
3301 -> 3293;
3301 -> 3295;
3301 -> 3296;
3301 -> 3300;
3302 -> 3300;
3303 -> 3294;
3303 -> 3253;
3303 -> 3255;
3303 -> 3260;
3303 -> 3265;
3303 -> 3293;
3303 -> 3302;
3303 -> 3296;
3303 -> 3300;
3304 -> 3294;
3304 -> 3253;
3304 -> 3255;
3304 -> 3260;
3304 -> 3265;
3304 -> 3293;
3304 -> 3295;
3304 -> 3296;
3304 -> 3303;
3305 -> 3303;
3306 -> 3295;
3306 -> 3305;
3307 -> 3296;
3307 -> 3305;
3308 -> 3305;
3309 -> 0;
3309 -> 3305;
3310 -> 3306;
3310 -> 3305;
3311 -> 3307;
3311 -> 3305;
3312 -> 3305;
3313 -> 3309;
3313 -> 3312;
3314 -> 3310;
3314 -> 3312;
3315 -> 3311;
3315 -> 3312;
3316 -> 3308;
3316 -> 3312;
3317 -> 3313;
3317 -> 3316;
3317 -> 3312;
3318 -> 3314;
3318 -> 3316;
3318 -> 3312;
3319 -> 3315;
3319 -> 3316;
3319 -> 3312;
3320 -> 3233;
3321 -> 3306;
3321 -> 3320;
3321 -> 3233;
3322 -> 3233;
3323 -> 3307;
3323 -> 3322;
3323 -> 3233;
3324 -> 3308;
3324 -> 3317;
3324 -> 3318;
3324 -> 3319;
3324 -> 3224;
3325 -> 3324;
3326 -> 3325;
3327 -> 3226;
3327 -> 3219;
3327 -> 3282;
3327 -> 3324;
3327 -> 3325;
3328 -> 3227;
3328 -> 3327;
3328 -> 3216;
3328 -> 3325;
3329 -> 3220;
3329 -> 3326;
3329 -> 3193;
3330 -> 2841;
3330 -> 3329;
3330 -> 3182;
3330 -> 2797;
3331 -> 2938;
3331 -> 3177;
3331 -> 2797;
3332 -> 2846;
3332 -> 2931;
3332 -> 2797;
3333 -> 2841;
3333 -> 3330;
3333 -> 2797;
3334 -> 2656;
3335 -> 1;
}