digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 748004"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 748005"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 748006"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 748007"];
5 [label="@'\n}' 748008"];
6 [label="suffix = @'\n}' 748009"];
7 [label="param FlowTests(this) 748010"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 748011"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 748012"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 748013"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 748014"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 748015"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 748016"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 748017"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 748018"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 748019"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 748020"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 748021"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 748022"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 748023"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 748024"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 748025"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 748026"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 748027"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 748028"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 748029"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 748030"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 748031"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 748032"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 748033"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 748034"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 748035"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 748036"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 748037"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 748038"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 748039"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 748040"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 748041"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 748042"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 748043"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 748044"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 748045"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 748046"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 748047"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 748048"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 748049"];
47 [label="LazyThreadSafetyMode.PublicationOnly 748050"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 748051"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 748052"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 748053"];
51 [label="LazyThreadSafetyMode.PublicationOnly 748054"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 748055"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 748056"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 748057"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 748058"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 748059"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 748060"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 748061"];
59 [label="LazyThreadSafetyMode.PublicationOnly 748062"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 748063"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 748064"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 748065"];
63 [label="LazyThreadSafetyMode.PublicationOnly 748066"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 748067"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 748068"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 748069"];
67 [label="LazyThreadSafetyMode.PublicationOnly 748070"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 748071"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 748072"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 748073"];
71 [label="LazyThreadSafetyMode.PublicationOnly 748074"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748075"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748076"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 748077"];
75 [label="LazyThreadSafetyMode.PublicationOnly 748078"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748079"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748080"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 748081"];
79 [label="LazyThreadSafetyMode.PublicationOnly 748082"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748083"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748084"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 748085"];
83 [label="LazyThreadSafetyMode.PublicationOnly 748086"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748087"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748088"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 748089"];
87 [label="LazyThreadSafetyMode.PublicationOnly 748090"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748091"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748092"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 748093"];
91 [label="LazyThreadSafetyMode.PublicationOnly 748094"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748095"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748096"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 748097"];
95 [label="LazyThreadSafetyMode.PublicationOnly 748098"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748099"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748100"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 748101"];
99 [label="LazyThreadSafetyMode.PublicationOnly 748102"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 748103"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 748104"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 748105"];
103 [label="LazyThreadSafetyMode.PublicationOnly 748106"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 748107"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 748108"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 748109"];
107 [label="LazyThreadSafetyMode.PublicationOnly 748110"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748111"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748112"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 748113"];
111 [label="LazyThreadSafetyMode.PublicationOnly 748114"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748115"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748116"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 748117"];
115 [label="LazyThreadSafetyMode.PublicationOnly 748118"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748119"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748120"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 748121"];
119 [label="LazyThreadSafetyMode.PublicationOnly 748122"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748123"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748124"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 748125"];
123 [label="LazyThreadSafetyMode.PublicationOnly 748126"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 748127"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 748128"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 748129"];
127 [label="LazyThreadSafetyMode.PublicationOnly 748130"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748131"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748132"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 748133"];
131 [label="LazyThreadSafetyMode.PublicationOnly 748134"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748135"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748136"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 748137"];
135 [label="LazyThreadSafetyMode.PublicationOnly 748138"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748139"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748140"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 748141"];
139 [label="LazyThreadSafetyMode.PublicationOnly 748142"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748143"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748144"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 748145"];
143 [label="LazyThreadSafetyMode.PublicationOnly 748146"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748147"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748148"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 748149"];
147 [label="LazyThreadSafetyMode.PublicationOnly 748150"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748151"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748152"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 748153"];
151 [label="LazyThreadSafetyMode.PublicationOnly 748154"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748155"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748156"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 748157"];
155 [label="LazyThreadSafetyMode.PublicationOnly 748158"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748159"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748160"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 748161"];
159 [label="LazyThreadSafetyMode.PublicationOnly 748162"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748163"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748164"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 748165"];
163 [label="LazyThreadSafetyMode.PublicationOnly 748166"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748167"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748168"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 748169"];
167 [label="LazyThreadSafetyMode.PublicationOnly 748170"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748171"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748172"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 748173"];
171 [label="LazyThreadSafetyMode.PublicationOnly 748174"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748175"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748176"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 748177"];
175 [label="LazyThreadSafetyMode.PublicationOnly 748178"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748179"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 748180"];
178 [label="@'R:\\Invalid.dll' 748181"];
179 [label="fullPath: @'R:\\Invalid.dll' 748182"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 748183"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 748184"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 748185"];
183 [label="MscorlibRef_v4_0_30316_17626 748186"];
184 [label="Net451.mscorlib 748187"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 748188"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 748189"];
187 [label="'/*<bind>*/' 748190"];
188 [label="StartString = '/*<bind>*/' 748191"];
189 [label="'/*</bind>*/' 748192"];
190 [label="EndString = '/*</bind>*/' 748193"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 748194"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 748195"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 748196"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 748197"];
195 [label="param CSharpTestBase(this) 748198"];
196 [label="param CommonTestBase(this) 748199"];
197 [label="param TestBase(this) 748200"];
198 [label="_temp 748201"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 748202"];
200 [label="param IfConditionalAnd(this) 748203"];
201 [label="var source = @'\nclass C\n{\n    static void Main(string[] args)\n    {\n        bool a = true, b = true, c = true; // values don't matter\n\n        int x;\n        if (a ? (b && Set(out x)) : (c && Set(out x)))\n        {\n            int y = x; // x is definitely assigned if we reach this point\n        }\n    }\n\n    static bool Set(out int x)\n    {\n        x = 1;\n        return true;\n    }\n}\n'; 748204"];
202 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')); 748205"];
203 [label="source 748206"];
204 [label="param operator(string source) 748207"];
205 [label="source 748208"];
206 [label="new CSharpTestSource(source) 748209"];
207 [label="param CSharpTestSource(object value) 748210"];
208 [label="param CSharpTestSource(this) 748211"];
209 [label="Value 748212"];
210 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')); 748213"];
211 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')); 748214"];
212 [label="CreateCompilation(source) 748215"];
213 [label="param CreateCompilation(CSharpTestSource source) 748216"];
214 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 748217"];
215 [label="param CreateCompilation(CSharpCompilationOptions options = null) 748218"];
216 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 748219"];
217 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 748220"];
218 [label="param CreateCompilation(string assemblyName = '') 748221"];
219 [label="param CreateCompilation(string sourceFileName = '') 748222"];
220 [label="param CreateCompilation(bool skipUsesIsNullable = false) 748223"];
221 [label="source 748224"];
222 [label="targetFramework 748225"];
223 [label="references 748226"];
224 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 748227"];
225 [label="param GetReferences(TargetFramework tf) 748228"];
226 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 748229"];
227 [label="var references = GetReferences(tf); 748230"];
228 [label="GetReferences(tf) 748231"];
229 [label="param GetReferences(TargetFramework targetFramework) 748232"];
230 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 748233"];
231 [label="StandardReferences 748234"];
232 [label="RuntimeUtilities.IsCoreClrRuntime 748235"];
233 [label="Mscorlib46ExtendedReferences 748236"];
234 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 748237"];
235 [label="TestBase.ValueTupleRef 748238"];
236 [label="TestReferences.NetFx.ValueTuple.tuplelib 748239"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 748240"];
238 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 748241"];
239 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 748242"];
240 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 748243"];
241 [label="return references; 748244"];
242 [label="options 748245"];
243 [label="parseOptions 748246"];
244 [label="assemblyName 748247"];
245 [label="sourceFileName 748248"];
246 [label="skipUsesIsNullable 748249"];
247 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 748250"];
248 [label="param CreateEmptyCompilation(CSharpTestSource source) 748251"];
249 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 748252"];
250 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 748253"];
251 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 748254"];
252 [label="param CreateEmptyCompilation(string assemblyName = '') 748255"];
253 [label="param CreateEmptyCompilation(string sourceFileName = '') 748256"];
254 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 748257"];
255 [label="source 748258"];
256 [label="references 748259"];
257 [label="options 748260"];
258 [label="parseOptions 748261"];
259 [label="assemblyName 748262"];
260 [label="sourceFileName 748263"];
261 [label="skipUsesIsNullable 748264"];
262 [label="null 748265"];
263 [label="experimentalFeature: null 748266"];
264 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 748267"];
265 [label="param CreateCompilationCore(CSharpTestSource source) 748268"];
266 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 748269"];
267 [label="param CreateCompilationCore(CSharpCompilationOptions options) 748270"];
268 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 748271"];
269 [label="param CreateCompilationCore(string assemblyName) 748272"];
270 [label="param CreateCompilationCore(string sourceFileName) 748273"];
271 [label="param CreateCompilationCore(bool skipUsesIsNullable) 748274"];
272 [label="param CreateCompilationCore(MessageID? experimentalFeature) 748275"];
273 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 748276"];
274 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 748277"];
275 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 748278"];
276 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 748279"];
277 [label="param GetSyntaxTrees(string sourceFileName = '') 748280"];
278 [label="param GetSyntaxTrees(this) 748281"];
279 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 748282"];
280 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 748283"];
281 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 748284"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 748285"];
283 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 748286"];
284 [label="param Parse(string text) 748287"];
285 [label="param Parse(string filename = '') 748288"];
286 [label="param Parse(CSharpParseOptions options = null) 748289"];
287 [label="param Parse(Encoding encoding = null) 748290"];
288 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 748291"];
289 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 748292"];
290 [label="kind: SourceCodeKind.Regular 748293"];
291 [label="documentationMode: DocumentationMode.Parse 748294"];
292 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 748295"];
293 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 748296"];
294 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 748297"];
295 [label="SourceCodeKind.Script 748298"];
296 [label="Regular.WithKind(SourceCodeKind.Script) 748299"];
297 [label="Script = Regular.WithKind(SourceCodeKind.Script) 748300"];
298 [label="LanguageVersion.CSharp6 748301"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 748302"];
300 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 748303"];
301 [label="LanguageVersion.CSharp7 748304"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 748305"];
303 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 748306"];
304 [label="LanguageVersion.CSharp7_1 748307"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 748308"];
306 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 748309"];
307 [label="LanguageVersion.CSharp7_2 748310"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 748311"];
309 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 748312"];
310 [label="LanguageVersion.CSharp7_3 748313"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 748314"];
312 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 748315"];
313 [label="LanguageVersion.Default 748316"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 748317"];
315 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 748318"];
316 [label="LanguageVersion.Preview 748319"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 748320"];
318 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 748321"];
319 [label="LanguageVersion.CSharp8 748322"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 748323"];
321 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 748324"];
322 [label="LanguageVersion.CSharp9 748325"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 748326"];
324 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 748327"];
325 [label="DocumentationMode.Diagnose 748328"];
326 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 748329"];
327 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 748330"];
328 [label="Regular 748331"];
329 [label="'UseLegacyStrongNameProvider' 748332"];
330 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 748333"];
331 [label="param WithFeature(this CSharpParseOptions options) 748334"];
332 [label="param WithFeature(string feature) 748335"];
333 [label="param WithFeature(string value = 'true') 748336"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 748337"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 748338"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 748339"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 748340"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 748341"];
339 [label="new[] { new KeyValuePair<string, string>(feature, value) } 748342"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 748343"];
341 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 748344"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 748345"];
343 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 748346"];
344 [label="1 748347"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 748348"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 748349"];
347 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 748350"];
348 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 748351"];
349 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 748352"];
350 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 748353"];
351 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 748354"];
352 [label="LanguageVersion.CSharp8 748355"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 748356"];
354 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 748357"];
355 [label="RegularWithExtendedPartialMethods = RegularPreview 748358"];
356 [label="new SmallDictionary<string, string> { } 748359"];
357 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 748360"];
358 [label="kind: SourceCodeKind.Regular 748361"];
359 [label="documentationMode: DocumentationMode.None 748362"];
360 [label="languageVersion: LanguageVersion.Preview 748363"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 748364"];
362 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 748365"];
363 [label="s_experimentalFeatures 748366"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 748367"];
365 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 748368"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 748369"];
367 [label="'testV7SwitchBinder' 748370"];
368 [label="'true' 748371"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 748372"];
370 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 748373"];
371 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 748374"];
372 [label="RegularWithoutRecursivePatterns = Regular7_3 748375"];
373 [label="RegularWithRecursivePatterns = Regular8 748376"];
374 [label="RegularWithoutPatternCombinators = Regular8 748377"];
375 [label="RegularWithPatternCombinators = RegularPreview 748378"];
376 [label="OutputKind.DynamicallyLinkedLibrary 748379"];
377 [label="OptimizationLevel.Release 748380"];
378 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 748381"];
379 [label="param CreateTestOptions(OutputKind outputKind) 748382"];
380 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748383"];
381 [label="param CreateTestOptions(bool allowUnsafe = false) 748384"];
382 [label="outputKind 748385"];
383 [label="optimizationLevel: optimizationLevel 748386"];
384 [label="warningLevel: Diagnostic.MaxWarningLevel 748387"];
385 [label="allowUnsafe: allowUnsafe 748388"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748389"];
387 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748390"];
388 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 748391"];
389 [label="OutputKind.ConsoleApplication 748392"];
390 [label="OptimizationLevel.Release 748393"];
391 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 748394"];
392 [label="param CreateTestOptions(OutputKind outputKind) 748395"];
393 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748396"];
394 [label="param CreateTestOptions(bool allowUnsafe = false) 748397"];
395 [label="outputKind 748398"];
396 [label="optimizationLevel: optimizationLevel 748399"];
397 [label="warningLevel: Diagnostic.MaxWarningLevel 748400"];
398 [label="allowUnsafe: allowUnsafe 748401"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748402"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748403"];
401 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 748404"];
402 [label="true 748405"];
403 [label="ReleaseDll.WithDebugPlusMode(true) 748406"];
404 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 748407"];
405 [label="true 748408"];
406 [label="ReleaseExe.WithDebugPlusMode(true) 748409"];
407 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 748410"];
408 [label="OutputKind.DynamicallyLinkedLibrary 748411"];
409 [label="OptimizationLevel.Debug 748412"];
410 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 748413"];
411 [label="param CreateTestOptions(OutputKind outputKind) 748414"];
412 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748415"];
413 [label="param CreateTestOptions(bool allowUnsafe = false) 748416"];
414 [label="outputKind 748417"];
415 [label="optimizationLevel: optimizationLevel 748418"];
416 [label="warningLevel: Diagnostic.MaxWarningLevel 748419"];
417 [label="allowUnsafe: allowUnsafe 748420"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748421"];
419 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748422"];
420 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 748423"];
421 [label="OutputKind.ConsoleApplication 748424"];
422 [label="OptimizationLevel.Debug 748425"];
423 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 748426"];
424 [label="param CreateTestOptions(OutputKind outputKind) 748427"];
425 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748428"];
426 [label="param CreateTestOptions(bool allowUnsafe = false) 748429"];
427 [label="outputKind 748430"];
428 [label="optimizationLevel: optimizationLevel 748431"];
429 [label="warningLevel: Diagnostic.MaxWarningLevel 748432"];
430 [label="allowUnsafe: allowUnsafe 748433"];
431 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748434"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748435"];
433 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 748436"];
434 [label="OutputKind.WindowsRuntimeMetadata 748437"];
435 [label="OptimizationLevel.Release 748438"];
436 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 748439"];
437 [label="param CreateTestOptions(OutputKind outputKind) 748440"];
438 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748441"];
439 [label="param CreateTestOptions(bool allowUnsafe = false) 748442"];
440 [label="outputKind 748443"];
441 [label="optimizationLevel: optimizationLevel 748444"];
442 [label="warningLevel: Diagnostic.MaxWarningLevel 748445"];
443 [label="allowUnsafe: allowUnsafe 748446"];
444 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748447"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748448"];
446 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 748449"];
447 [label="OutputKind.WindowsRuntimeMetadata 748450"];
448 [label="OptimizationLevel.Debug 748451"];
449 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 748452"];
450 [label="param CreateTestOptions(OutputKind outputKind) 748453"];
451 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748454"];
452 [label="param CreateTestOptions(bool allowUnsafe = false) 748455"];
453 [label="outputKind 748456"];
454 [label="optimizationLevel: optimizationLevel 748457"];
455 [label="warningLevel: Diagnostic.MaxWarningLevel 748458"];
456 [label="allowUnsafe: allowUnsafe 748459"];
457 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748460"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748461"];
459 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 748462"];
460 [label="OutputKind.NetModule 748463"];
461 [label="OptimizationLevel.Release 748464"];
462 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 748465"];
463 [label="param CreateTestOptions(OutputKind outputKind) 748466"];
464 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748467"];
465 [label="param CreateTestOptions(bool allowUnsafe = false) 748468"];
466 [label="outputKind 748469"];
467 [label="optimizationLevel: optimizationLevel 748470"];
468 [label="warningLevel: Diagnostic.MaxWarningLevel 748471"];
469 [label="allowUnsafe: allowUnsafe 748472"];
470 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748473"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748474"];
472 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 748475"];
473 [label="OutputKind.NetModule 748476"];
474 [label="OptimizationLevel.Debug 748477"];
475 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 748478"];
476 [label="param CreateTestOptions(OutputKind outputKind) 748479"];
477 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 748480"];
478 [label="param CreateTestOptions(bool allowUnsafe = false) 748481"];
479 [label="outputKind 748482"];
480 [label="optimizationLevel: optimizationLevel 748483"];
481 [label="warningLevel: Diagnostic.MaxWarningLevel 748484"];
482 [label="allowUnsafe: allowUnsafe 748485"];
483 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748486"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 748487"];
485 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 748488"];
486 [label="true 748489"];
487 [label="ReleaseDll.WithAllowUnsafe(true) 748490"];
488 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 748491"];
489 [label="true 748492"];
490 [label="ReleaseExe.WithAllowUnsafe(true) 748493"];
491 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 748494"];
492 [label="true 748495"];
493 [label="DebugDll.WithAllowUnsafe(true) 748496"];
494 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 748497"];
495 [label="true 748498"];
496 [label="DebugExe.WithAllowUnsafe(true) 748499"];
497 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 748500"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 748501"];
499 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748502"];
500 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748503"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 748504"];
502 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748505"];
503 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748506"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 748507"];
505 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748508"];
506 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748509"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 748510"];
508 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748511"];
509 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 748512"];
510 [label="DebugInformationFormat.Pdb 748513"];
511 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 748514"];
512 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 748515"];
513 [label="options = TestOptions.Regular; 748516"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 748517"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 748518"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 748519"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 748520"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 748521"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 748522"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 748523"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 748524"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 748525"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 748526"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 748527"];
525 [label="param CheckSerializable(SyntaxTree tree) 748528"];
526 [label="var stream = new MemoryStream(); 748529"];
527 [label="var root = tree.GetRoot(); 748530"];
528 [label="var root = tree.GetRoot(); 748531"];
529 [label="root.SerializeTo(stream); 748532"];
530 [label="root.SerializeTo(stream); 748533"];
531 [label="root.SerializeTo(stream); 748534"];
532 [label="stream.Position = 0; 748535"];
533 [label="stream.Position 748536"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 748537"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 748538"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 748539"];
537 [label="return tree; 748540"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 748541"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 748542"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 748543"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 748544"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 748545"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 748546"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 748547"];
545 [label="hasTopLevelStatements 748548"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 748549"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 748550"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 748551"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 748552"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 748553"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 748554"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 748555"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 748556"];
554 [label="return; 748557"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 748558"];
556 [label="var compilation = createCompilationLambda(); 748559"];
557 [label="var compilation = createCompilationLambda(); 748560"];
558 [label="return Guid.NewGuid().ToString('D'); 748561"];
559 [label="var compilation = createCompilationLambda(); 748562"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 748563"];
561 [label="IsNullableEnabled(compilation) 748564"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 748565"];
563 [label="var trees = compilation.SyntaxTrees; 748566"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 748567"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 748568"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 748569"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 748570"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 748571"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 748572"];
570 [label="return compilation; 748573"];
571 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')); 748574"];
572 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'x') 748575"];
573 [label="param Diagnostic(object code) 748576"];
574 [label="param Diagnostic(string squiggledText = null) 748577"];
575 [label="param Diagnostic(object[] arguments = null) 748578"];
576 [label="param Diagnostic(LinePosition? startLocation = null) 748579"];
577 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 748580"];
578 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 748581"];
579 [label="param Diagnostic(bool isSuppressed = false) 748582"];
580 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748583"];
581 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748584"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748585"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748586"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748587"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748588"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748589"];
587 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 748590"];
588 [label="param Diagnostic(object code) 748591"];
589 [label="param Diagnostic(string squiggledText = null) 748592"];
590 [label="param Diagnostic(object[] arguments = null) 748593"];
591 [label="param Diagnostic(LinePosition? startLocation = null) 748594"];
592 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 748595"];
593 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 748596"];
594 [label="param Diagnostic(bool isSuppressed = false) 748597"];
595 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 748598"];
596 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748599"];
597 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748600"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748601"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748602"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748603"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748604"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748605"];
603 [label="{ } 748606"];
604 [label="None = { } 748607"];
605 [label="null 748608"];
606 [label="Any = null 748609"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 748610"];
608 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 748611"];
609 [label="param DiagnosticDescription(object code) 748612"];
610 [label="param DiagnosticDescription(bool isWarningAsError) 748613"];
611 [label="param DiagnosticDescription(string squiggledText) 748614"];
612 [label="param DiagnosticDescription(object[] arguments) 748615"];
613 [label="param DiagnosticDescription(LinePosition? startLocation) 748616"];
614 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 748617"];
615 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 748618"];
616 [label="param DiagnosticDescription(Type errorCodeType = null) 748619"];
617 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 748620"];
618 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 748621"];
619 [label="param DiagnosticDescription(bool isSuppressed = false) 748622"];
620 [label="param DiagnosticDescription(this) 748623"];
621 [label="_code 748624"];
622 [label="_isWarningAsError 748625"];
623 [label="_isSuppressed 748626"];
624 [label="_squiggledText 748627"];
625 [label="_arguments 748628"];
626 [label="_startPosition 748629"];
627 [label="_argumentOrderDoesNotMatter 748630"];
628 [label="_errorCodeType 748631"];
629 [label="_ignoreArgumentsWhenComparing 748632"];
630 [label="_defaultSeverityOpt 748633"];
631 [label="_effectiveSeverityOpt 748634"];
632 [label="_syntaxPredicate 748635"];
633 [label="_showPredicate 748636"];
634 [label="_location 748637"];
635 [label="_argumentsAsStrings 748638"];
636 [label="_code 748639"];
637 [label="_isWarningAsError 748640"];
638 [label="_squiggledText 748641"];
639 [label="_arguments 748642"];
640 [label="_startPosition 748643"];
641 [label="_syntaxPredicate 748644"];
642 [label="_argumentOrderDoesNotMatter 748645"];
643 [label="_errorCodeType = errorCodeType ?? code.GetType(); 748646"];
644 [label="_errorCodeType 748647"];
645 [label="_defaultSeverityOpt 748648"];
646 [label="_effectiveSeverityOpt 748649"];
647 [label="_isSuppressed 748650"];
648 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 748651"];
649 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')); 748652"];
650 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x') 748653"];
651 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x') 748654"];
652 [label="param WithArguments(params object[] arguments) 748655"];
653 [label="param WithArguments(this) 748656"];
654 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748657"];
655 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748658"];
656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748659"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748660"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748661"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748662"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748663"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748664"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748665"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748666"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 748667"];
665 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 748668"];
666 [label="param DiagnosticDescription(object code) 748669"];
667 [label="param DiagnosticDescription(bool isWarningAsError) 748670"];
668 [label="param DiagnosticDescription(string squiggledText) 748671"];
669 [label="param DiagnosticDescription(object[] arguments) 748672"];
670 [label="param DiagnosticDescription(LinePosition? startLocation) 748673"];
671 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 748674"];
672 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 748675"];
673 [label="param DiagnosticDescription(Type errorCodeType = null) 748676"];
674 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 748677"];
675 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 748678"];
676 [label="param DiagnosticDescription(bool isSuppressed = false) 748679"];
677 [label="param DiagnosticDescription(this) 748680"];
678 [label="_code 748681"];
679 [label="_isWarningAsError 748682"];
680 [label="_isSuppressed 748683"];
681 [label="_squiggledText 748684"];
682 [label="_arguments 748685"];
683 [label="_startPosition 748686"];
684 [label="_argumentOrderDoesNotMatter 748687"];
685 [label="_errorCodeType 748688"];
686 [label="_ignoreArgumentsWhenComparing 748689"];
687 [label="_defaultSeverityOpt 748690"];
688 [label="_effectiveSeverityOpt 748691"];
689 [label="_syntaxPredicate 748692"];
690 [label="_showPredicate 748693"];
691 [label="_location 748694"];
692 [label="_argumentsAsStrings 748695"];
693 [label="_arguments 748696"];
694 [label="_argumentOrderDoesNotMatter 748697"];
695 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')); 748698"];
696 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')) 748699"];
697 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (11,21): error CS0165: Use of unassigned local variable 'x'\n                //             int y = x; // x is definitely assigned if we reach this point\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'x').WithArguments('x')) 748700"];
698 [label="param VerifyDiagnostics(this TCompilation c) 748701"];
699 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 748702"];
700 [label="var diagnostics = c.GetDiagnostics(); 748703"];
701 [label="var diagnostics = c.GetDiagnostics(); 748704"];
702 [label="diagnostics.Verify(expected); 748705"];
703 [label="diagnostics.Verify(expected); 748706"];
704 [label="diagnostics.Verify(expected) 748707"];
705 [label="param Verify(this ImmutableArray<Diagnostic> actual) 748708"];
706 [label="param Verify(params DiagnosticDescription[] expected) 748709"];
707 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 748710"];
708 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 748711"];
709 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 748712"];
710 [label="param Verify(this IEnumerable<Diagnostic> actual) 748713"];
711 [label="param Verify(params DiagnosticDescription[] expected) 748714"];
712 [label="Verify(actual, expected, errorCodeOnly: false); 748715"];
713 [label="Verify(actual, expected, errorCodeOnly: false); 748716"];
714 [label="Verify(actual, expected, errorCodeOnly: false); 748717"];
715 [label="Verify(actual, expected, errorCodeOnly: false) 748718"];
716 [label="param Verify(IEnumerable<Diagnostic> actual) 748719"];
717 [label="param Verify(DiagnosticDescription[] expected) 748720"];
718 [label="param Verify(bool errorCodeOnly) 748721"];
719 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 748722"];
720 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 748723"];
721 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 748724"];
722 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 748725"];
723 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 748726"];
724 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 748727"];
725 [label="=> _defaultSeverityOpt 748728"];
726 [label="_defaultSeverityOpt 748729"];
727 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 748730"];
728 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 748731"];
729 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 748732"];
730 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 748733"];
731 [label="=> _effectiveSeverityOpt 748734"];
732 [label="_effectiveSeverityOpt 748735"];
733 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 748736"];
734 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 748737"];
735 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 748738"];
736 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 748739"];
737 [label="param DiagnosticDescription(Diagnostic d) 748740"];
738 [label="param DiagnosticDescription(bool errorCodeOnly) 748741"];
739 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 748742"];
740 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 748743"];
741 [label="param DiagnosticDescription(this) 748744"];
742 [label="_code 748745"];
743 [label="_isWarningAsError 748746"];
744 [label="_isSuppressed 748747"];
745 [label="_squiggledText 748748"];
746 [label="_arguments 748749"];
747 [label="_startPosition 748750"];
748 [label="_argumentOrderDoesNotMatter 748751"];
749 [label="_errorCodeType 748752"];
750 [label="_defaultSeverityOpt 748753"];
751 [label="_effectiveSeverityOpt 748754"];
752 [label="_syntaxPredicate 748755"];
753 [label="_code 748756"];
754 [label="_isWarningAsError 748757"];
755 [label="_isSuppressed 748758"];
756 [label="_location 748759"];
757 [label="includeDefaultSeverity 748760"];
758 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 748761"];
759 [label="_defaultSeverityOpt 748762"];
760 [label="includeEffectiveSeverity 748763"];
761 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 748764"];
762 [label="_effectiveSeverityOpt 748765"];
763 [label="DiagnosticWithInfo dinfo = null; 748766"];
764 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 748767"];
765 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 748768"];
766 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 748769"];
767 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 748770"];
768 [label="dinfo = d as DiagnosticWithInfo; 748771"];
769 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 748772"];
770 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 748773"];
771 [label="_errorCodeType 748774"];
772 [label="_code 748775"];
773 [label="_ignoreArgumentsWhenComparing 748776"];
774 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 748777"];
775 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 748778"];
776 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 748779"];
777 [label="_squiggledText 748780"];
778 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 748781"];
779 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 748782"];
780 [label="_arguments 748783"];
781 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 748784"];
782 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 748785"];
783 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 748786"];
784 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 748787"];
785 [label="_startPosition 748788"];
786 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 748789"];
787 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 748790"];
788 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 748791"];
789 [label="int index = unmatched.IndexOf(d); 748792"];
790 [label="int index = unmatched.IndexOf(d); 748793"];
791 [label="param Equals(object obj) 748794"];
792 [label="param Equals(this) 748795"];
793 [label="var d = obj as DiagnosticDescription; 748796"];
794 [label="if (d == null)\n                return false; 748797"];
795 [label="if (d == null)\n                return false; 748798"];
796 [label="if (!_code.Equals(d._code))\n                return false; 748799"];
797 [label="if (!_code.Equals(d._code))\n                return false; 748800"];
798 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 748801"];
799 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 748802"];
800 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 748803"];
801 [label="if (_squiggledText != d._squiggledText)\n                    return false; 748804"];
802 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 748805"];
803 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 748806"];
804 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 748807"];
805 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 748808"];
806 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 748809"];
807 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 748810"];
808 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 748811"];
809 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 748812"];
810 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 748813"];
811 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 748814"];
812 [label="if (d._arguments == null)\n                    return false; 748815"];
813 [label="GetArgumentsAsStrings() 748816"];
814 [label="param GetArgumentsAsStrings(this) 748817"];
815 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 748818"];
816 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 748819"];
817 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 748820"];
818 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 748821"];
819 [label="_argumentsAsStrings 748822"];
820 [label="return _argumentsAsStrings; 748823"];
821 [label="var args1 = GetArgumentsAsStrings(); 748824"];
822 [label="d.GetArgumentsAsStrings() 748825"];
823 [label="param GetArgumentsAsStrings(this) 748826"];
824 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 748827"];
825 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 748828"];
826 [label="return _argumentsAsStrings; 748829"];
827 [label="var args2 = d.GetArgumentsAsStrings(); 748830"];
828 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 748831"];
829 [label="if (!args1.SequenceEqual(args2))\n                        return false; 748832"];
830 [label="if (!args1.SequenceEqual(args2))\n                        return false; 748833"];
831 [label="if (!args1.SequenceEqual(args2))\n                        return false; 748834"];
832 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 748835"];
833 [label="return true; 748836"];
834 [label="int index = unmatched.IndexOf(d); 748837"];
835 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 748838"];
836 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 748839"];
837 [label="unmatched.RemoveAt(index); 748840"];
838 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 748841"];
839 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 748842"];
840 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 748843"];
841 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 748844"];
842 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 748845"];
843 [label="DiagnosticDescription.GetAssertText(expected, actual) 748846"];
844 [label="param GetAssertText(DiagnosticDescription[] expected) 748847"];
845 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 748848"];
846 [label="const int CSharp = 1; 748849"];
847 [label="const int VisualBasic = 2; 748850"];
848 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 748851"];
849 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 748852"];
850 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 748853"];
851 [label="actual.Any() && actual.First() is CSDiagnostic 748854"];
852 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 748855"];
853 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 748856"];
854 [label="int indentDepth = (language == CSharp) ? 4 : 1; 748857"];
855 [label="(language == CSharp) 748858"];
856 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 748859"];
857 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 748860"];
858 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 748861"];
859 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 748862"];
860 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 748863"];
861 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 748864"];
862 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 748865"];
863 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 748866"];
864 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 748867"];
865 [label="IsSortedOrEmpty(expected) 748868"];
866 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 748869"];
867 [label="new LinePositionComparer() 748870"];
868 [label="param LinePositionComparer(this) 748871"];
869 [label="Instance = new LinePositionComparer() 748872"];
870 [label="var comparer = LinePositionComparer.Instance; 748873"];
871 [label="DiagnosticDescription last = null; 748874"];
872 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 748875"];
873 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 748876"];
874 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 748877"];
875 [label="return false; 748878"];
876 [label="var assertText = new StringBuilder(); 748879"];
877 [label="assertText.AppendLine(); 748880"];
878 [label="int i; 748881"];
879 [label="assertText.AppendLine('Expected:'); 748882"];
880 [label="assertText.AppendLine('Expected:'); 748883"];
881 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 748884"];
882 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 748885"];
883 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 748886"];
884 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 748887"];
885 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 748888"];
886 [label="GetDiagnosticDescription(d, indentDepth) 748889"];
887 [label="param GetDiagnosticDescription(DiagnosticDescription d) 748890"];
888 [label="param GetDiagnosticDescription(int indentDepth) 748891"];
889 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 748892"];
890 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 748893"];
891 [label="d.ToString() 748894"];
892 [label="param ToString(this) 748895"];
893 [label="var sb = new StringBuilder(); 748896"];
894 [label="sb.Append('Diagnostic('); 748897"];
895 [label="sb.Append('Diagnostic('); 748898"];
896 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 748899"];
897 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 748900"];
898 [label="sb.Append(_errorCodeType.Name); 748901"];
899 [label="sb.Append(_errorCodeType.Name); 748902"];
900 [label="sb.Append('.'); 748903"];
901 [label="sb.Append('.'); 748904"];
902 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 748905"];
903 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 748906"];
904 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 748907"];
905 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 748908"];
906 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 748909"];
907 [label="sb.Append(', \\''); 748910"];
908 [label="sb.Append(', \\''); 748911"];
909 [label="sb.Append(_squiggledText); 748912"];
910 [label="sb.Append(_squiggledText); 748913"];
911 [label="sb.Append('''); 748914"];
912 [label="sb.Append('''); 748915"];
913 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 748916"];
914 [label="sb.Append(')'); 748917"];
915 [label="sb.Append(')'); 748918"];
916 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 748919"];
917 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 748920"];
918 [label="sb.Append('.WithArguments('); 748921"];
919 [label="sb.Append('.WithArguments('); 748922"];
920 [label="GetArgumentsAsStrings() 748923"];
921 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 748924"];
922 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 748925"];
923 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 748926"];
924 [label="sb.Append('\\''); 748927"];
925 [label="sb.Append('\\''); 748928"];
926 [label="sb.Append(argumentStrings.Current); 748929"];
927 [label="sb.Append(argumentStrings.Current); 748930"];
928 [label="sb.Append('\\''); 748931"];
929 [label="sb.Append('\\''); 748932"];
930 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 748933"];
931 [label="sb.Append(')'); 748934"];
932 [label="sb.Append(')'); 748935"];
933 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 748936"];
934 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 748937"];
935 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 748938"];
936 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 748939"];
937 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 748940"];
938 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 748941"];
939 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 748942"];
940 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 748943"];
941 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 748944"];
942 [label="return sb.ToString(); 748945"];
943 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 748946"];
944 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 748947"];
945 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 748948"];
946 [label="GetCommaSeparatedLines(assertText, expectedText); 748949"];
947 [label="GetCommaSeparatedLines(assertText, expectedText); 748950"];
948 [label="GetCommaSeparatedLines(assertText, expectedText) 748951"];
949 [label="param GetCommaSeparatedLines(StringBuilder sb) 748952"];
950 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 748953"];
951 [label="int n = lines.Count; 748954"];
952 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 748955"];
953 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 748956"];
954 [label="sb.Append(lines[i]); 748957"];
955 [label="sb.Append(lines[i]); 748958"];
956 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 748959"];
957 [label="sb.AppendLine(); 748960"];
958 [label="GetCommaSeparatedLines(assertText, expectedText); 748961"];
959 [label="assertText.AppendLine('Actual:'); 748962"];
960 [label="assertText.AppendLine('Actual:'); 748963"];
961 [label="var actualText = ArrayBuilder<string>.GetInstance(); 748964"];
962 [label="var e = actual.GetEnumerator(); 748965"];
963 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 748966"];
964 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 748967"];
965 [label="Diagnostic d = e.Current; 748968"];
966 [label="string message = d.ToString(); 748969"];
967 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 748970"];
968 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 748971"];
969 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 748972"];
970 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 748973"];
971 [label="Indent(assertText, indentDepth); 748974"];
972 [label="Indent(assertText, indentDepth); 748975"];
973 [label="Indent(assertText, indentDepth) 748976"];
974 [label="param Indent(StringBuilder sb) 748977"];
975 [label="param Indent(int count) 748978"];
976 [label="sb.Append(' ', 4 * count); 748979"];
977 [label="sb.Append(' ', 4 * count); 748980"];
978 [label="sb.Append(' ', 4 * count); 748981"];
979 [label="Indent(assertText, indentDepth); 748982"];
980 [label="assertText.Append('// '); 748983"];
981 [label="assertText.Append('// '); 748984"];
982 [label="assertText.AppendLine(d.ToString()); 748985"];
983 [label="assertText.AppendLine(d.ToString()); 748986"];
984 [label="var l = d.Location; 748987"];
985 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 748988"];
986 [label="Indent(assertText, indentDepth); 748989"];
987 [label="Indent(assertText, indentDepth); 748990"];
988 [label="Indent(assertText, indentDepth) 748991"];
989 [label="param Indent(StringBuilder sb) 748992"];
990 [label="param Indent(int count) 748993"];
991 [label="sb.Append(' ', 4 * count); 748994"];
992 [label="sb.Append(' ', 4 * count); 748995"];
993 [label="sb.Append(' ', 4 * count); 748996"];
994 [label="Indent(assertText, indentDepth); 748997"];
995 [label="assertText.Append('// '); 748998"];
996 [label="assertText.Append('// '); 748999"];
997 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 749000"];
998 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 749001"];
999 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 749002"];
1000 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 749003"];
1001 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 749004"];
1002 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 749005"];
1003 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 749006"];
1004 [label="param DiagnosticDescription(Diagnostic d) 749007"];
1005 [label="param DiagnosticDescription(bool errorCodeOnly) 749008"];
1006 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 749009"];
1007 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 749010"];
1008 [label="param DiagnosticDescription(this) 749011"];
1009 [label="_code 749012"];
1010 [label="_isWarningAsError 749013"];
1011 [label="_isSuppressed 749014"];
1012 [label="_squiggledText 749015"];
1013 [label="_arguments 749016"];
1014 [label="_startPosition 749017"];
1015 [label="_errorCodeType 749018"];
1016 [label="_defaultSeverityOpt 749019"];
1017 [label="_effectiveSeverityOpt 749020"];
1018 [label="_code 749021"];
1019 [label="_isWarningAsError 749022"];
1020 [label="_isSuppressed 749023"];
1021 [label="_location 749024"];
1022 [label="DiagnosticWithInfo dinfo = null; 749025"];
1023 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 749026"];
1024 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 749027"];
1025 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 749028"];
1026 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 749029"];
1027 [label="var diffDescription = description; 749030"];
1028 [label="var idx = Array.IndexOf(expected, description); 749031"];
1029 [label="var idx = Array.IndexOf(expected, description); 749032"];
1030 [label="var idx = Array.IndexOf(expected, description); 749033"];
1031 [label="var idx = Array.IndexOf(expected, description); 749034"];
1032 [label="if (d == null)\n                return false; 749035"];
1033 [label="if (d == null)\n                return false; 749036"];
1034 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 749037"];
1035 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 749038"];
1036 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 749039"];
1037 [label="if (_squiggledText != d._squiggledText)\n                    return false; 749040"];
1038 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 749041"];
1039 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 749042"];
1040 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 749043"];
1041 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 749044"];
1042 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 749045"];
1043 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 749046"];
1044 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 749047"];
1045 [label="if (d._arguments == null)\n                    return false; 749048"];
1046 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 749049"];
1047 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 749050"];
1048 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 749051"];
1049 [label="diffDescription = expected[idx]; 749052"];
1050 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 749053"];
1051 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 749054"];
1052 [label="GetDiagnosticDescription(description, indentDepth) 749055"];
1053 [label="param GetDiagnosticDescription(DiagnosticDescription d) 749056"];
1054 [label="param GetDiagnosticDescription(int indentDepth) 749057"];
1055 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749058"];
1056 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749059"];
1057 [label="var sb = new StringBuilder(); 749060"];
1058 [label="sb.Append('Diagnostic('); 749061"];
1059 [label="sb.Append('Diagnostic('); 749062"];
1060 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 749063"];
1061 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 749064"];
1062 [label="sb.Append(_errorCodeType.Name); 749065"];
1063 [label="sb.Append(_errorCodeType.Name); 749066"];
1064 [label="sb.Append('.'); 749067"];
1065 [label="sb.Append('.'); 749068"];
1066 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 749069"];
1067 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 749070"];
1068 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 749071"];
1069 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 749072"];
1070 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 749073"];
1071 [label="sb.Append(', \\''); 749074"];
1072 [label="sb.Append(', \\''); 749075"];
1073 [label="sb.Append(_squiggledText); 749076"];
1074 [label="sb.Append(_squiggledText); 749077"];
1075 [label="sb.Append('''); 749078"];
1076 [label="sb.Append('''); 749079"];
1077 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 749080"];
1078 [label="sb.Append(')'); 749081"];
1079 [label="sb.Append(')'); 749082"];
1080 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 749083"];
1081 [label="sb.Append('.WithArguments('); 749084"];
1082 [label="sb.Append('.WithArguments('); 749085"];
1083 [label="sb.Append('\\''); 749086"];
1084 [label="sb.Append('\\''); 749087"];
1085 [label="sb.Append(argumentStrings.Current); 749088"];
1086 [label="sb.Append(argumentStrings.Current); 749089"];
1087 [label="sb.Append('\\''); 749090"];
1088 [label="sb.Append('\\''); 749091"];
1089 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 749092"];
1090 [label="sb.Append(')'); 749093"];
1091 [label="sb.Append(')'); 749094"];
1092 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 749095"];
1093 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 749096"];
1094 [label="sb.Append('.WithLocation('); 749097"];
1095 [label="sb.Append('.WithLocation('); 749098"];
1096 [label="sb.Append(_startPosition.Value.Line + 1); 749099"];
1097 [label="sb.Append(_startPosition.Value.Line + 1); 749100"];
1098 [label="sb.Append(', '); 749101"];
1099 [label="sb.Append(', '); 749102"];
1100 [label="sb.Append(_startPosition.Value.Character + 1); 749103"];
1101 [label="sb.Append(_startPosition.Value.Character + 1); 749104"];
1102 [label="sb.Append(')'); 749105"];
1103 [label="sb.Append(')'); 749106"];
1104 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 749107"];
1105 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 749108"];
1106 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 749109"];
1107 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 749110"];
1108 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 749111"];
1109 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 749112"];
1110 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 749113"];
1111 [label="return sb.ToString(); 749114"];
1112 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749115"];
1113 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749116"];
1114 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 749117"];
1115 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 749118"];
1116 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 749119"];
1117 [label="GetDiagnosticDescription(diffDescription, indentDepth) 749120"];
1118 [label="param GetDiagnosticDescription(DiagnosticDescription d) 749121"];
1119 [label="param GetDiagnosticDescription(int indentDepth) 749122"];
1120 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749123"];
1121 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749124"];
1122 [label="var sb = new StringBuilder(); 749125"];
1123 [label="sb.Append('Diagnostic('); 749126"];
1124 [label="sb.Append('Diagnostic('); 749127"];
1125 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 749128"];
1126 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 749129"];
1127 [label="sb.Append(_errorCodeType.Name); 749130"];
1128 [label="sb.Append(_errorCodeType.Name); 749131"];
1129 [label="sb.Append('.'); 749132"];
1130 [label="sb.Append('.'); 749133"];
1131 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 749134"];
1132 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 749135"];
1133 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 749136"];
1134 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 749137"];
1135 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 749138"];
1136 [label="sb.Append(', \\''); 749139"];
1137 [label="sb.Append(', \\''); 749140"];
1138 [label="sb.Append(_squiggledText); 749141"];
1139 [label="sb.Append(_squiggledText); 749142"];
1140 [label="sb.Append('''); 749143"];
1141 [label="sb.Append('''); 749144"];
1142 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 749145"];
1143 [label="sb.Append(')'); 749146"];
1144 [label="sb.Append(')'); 749147"];
1145 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 749148"];
1146 [label="sb.Append('.WithArguments('); 749149"];
1147 [label="sb.Append('.WithArguments('); 749150"];
1148 [label="sb.Append('\\''); 749151"];
1149 [label="sb.Append('\\''); 749152"];
1150 [label="sb.Append(argumentStrings.Current); 749153"];
1151 [label="sb.Append(argumentStrings.Current); 749154"];
1152 [label="sb.Append('\\''); 749155"];
1153 [label="sb.Append('\\''); 749156"];
1154 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 749157"];
1155 [label="sb.Append(')'); 749158"];
1156 [label="sb.Append(')'); 749159"];
1157 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 749160"];
1158 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 749161"];
1159 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 749162"];
1160 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 749163"];
1161 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 749164"];
1162 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 749165"];
1163 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 749166"];
1164 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 749167"];
1165 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 749168"];
1166 [label="return sb.ToString(); 749169"];
1167 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749170"];
1168 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 749171"];
1169 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 749172"];
1170 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 749173"];
1171 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 749174"];
1172 [label="assertText.AppendLine(); 749175"];
1173 [label="assertText.AppendLine('Diff:'); 749176"];
1174 [label="assertText.AppendLine('Diff:'); 749177"];
1175 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 749178"];
1176 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 749179"];
1177 [label="new[] { '\\r', '\\n' } 749180"];
1178 [label="'\\r' 749181"];
1179 [label="'\\n' 749182"];
1180 [label="new[] { '\\r', '\\n' } 749183"];
1181 [label="new[] { '\\r', '\\n' } 749184"];
1182 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 749185"];
1183 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 749186"];
1184 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 749187"];
1185 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 749188"];
1186 [label="param DiffReport(IEnumerable<T> expected) 749189"];
1187 [label="param DiffReport(IEnumerable<T> actual) 749190"];
1188 [label="param DiffReport(string separator) 749191"];
1189 [label="param DiffReport(IEqualityComparer<T> comparer = null) 749192"];
1190 [label="param DiffReport(Func<T, string> toString = null) 749193"];
1191 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 749194"];
1192 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 749195"];
1193 [label="(comparer != null) 749196"];
1194 [label="EqualityComparer<T>.Default 749197"];
1195 [label="new LCS<T>(EqualityComparer<T>.Default) 749198"];
1196 [label="param LCS(IEqualityComparer<T> comparer) 749199"];
1197 [label="param LCS(this) 749200"];
1198 [label="1 749201"];
1199 [label="DeleteCost = 1 749202"];
1200 [label="1 749203"];
1201 [label="InsertCost = 1 749204"];
1202 [label="2 749205"];
1203 [label="UpdateCost = 2 749206"];
1204 [label="param LongestCommonSubsequence(this) 749207"];
1205 [label="_comparer 749208"];
1206 [label="_comparer 749209"];
1207 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 749210"];
1208 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 749211"];
1209 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 749212"];
1210 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 749213"];
1211 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 749214"];
1212 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 749215"];
1213 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 749216"];
1214 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 749217"];
1215 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 749218"];
1216 [label="lcs.CalculateDiff(expectedList, actualList, toString) 749219"];
1217 [label="param CalculateDiff(IList<T> sequenceA) 749220"];
1218 [label="param CalculateDiff(IList<T> sequenceB) 749221"];
1219 [label="param CalculateDiff(Func<T, string> toString) 749222"];
1220 [label="param CalculateDiff(this) 749223"];
1221 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 749224"];
1222 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 749225"];
1223 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 749226"];
1224 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 749227"];
1225 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 749228"];
1226 [label="param GetEdits(TSequence sequenceA) 749229"];
1227 [label="param GetEdits(int lengthA) 749230"];
1228 [label="param GetEdits(TSequence sequenceB) 749231"];
1229 [label="param GetEdits(int lengthB) 749232"];
1230 [label="param GetEdits(this) 749233"];
1231 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 749234"];
1232 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 749235"];
1233 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 749236"];
1234 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 749237"];
1235 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 749238"];
1236 [label="param ComputeCostMatrix(TSequence sequenceA) 749239"];
1237 [label="param ComputeCostMatrix(int lengthA) 749240"];
1238 [label="param ComputeCostMatrix(TSequence sequenceB) 749241"];
1239 [label="param ComputeCostMatrix(int lengthB) 749242"];
1240 [label="param ComputeCostMatrix(this) 749243"];
1241 [label="var la = lengthA + 1; 749244"];
1242 [label="var la = lengthA + 1; 749245"];
1243 [label="var lb = lengthB + 1; 749246"];
1244 [label="var lb = lengthB + 1; 749247"];
1245 [label="var d = new int[la, lb]; 749248"];
1246 [label="d[0, 0] = 0; 749249"];
1247 [label="d[0, 0] 749250"];
1248 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 749251"];
1249 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 749252"];
1250 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 749253"];
1251 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 749254"];
1252 [label="d[i, 0] 749255"];
1253 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 749256"];
1254 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 749257"];
1255 [label="d[0, j] = d[0, j - 1] + InsertCost; 749258"];
1256 [label="d[0, j] = d[0, j - 1] + InsertCost; 749259"];
1257 [label="d[0, j] 749260"];
1258 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 749261"];
1259 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 749262"];
1260 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 749263"];
1261 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 749264"];
1262 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 749265"];
1263 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 749266"];
1264 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 749267"];
1265 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 749268"];
1266 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 749269"];
1267 [label="param ItemsEqual(IList<T> sequenceA) 749270"];
1268 [label="param ItemsEqual(int indexA) 749271"];
1269 [label="param ItemsEqual(IList<T> sequenceB) 749272"];
1270 [label="param ItemsEqual(int indexB) 749273"];
1271 [label="param ItemsEqual(this) 749274"];
1272 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 749275"];
1273 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 749276"];
1274 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 749277"];
1275 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 749278"];
1276 [label="int m2 = d[i - 1, j] + DeleteCost; 749279"];
1277 [label="int m2 = d[i - 1, j] + DeleteCost; 749280"];
1278 [label="int m3 = d[i, j - 1] + InsertCost; 749281"];
1279 [label="int m3 = d[i, j - 1] + InsertCost; 749282"];
1280 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 749283"];
1281 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 749284"];
1282 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 749285"];
1283 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 749286"];
1284 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 749287"];
1285 [label="d[i, j] 749288"];
1286 [label="return d; 749289"];
1287 [label="int i = lengthA; 749290"];
1288 [label="int j = lengthB; 749291"];
1289 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 749292"];
1290 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 749293"];
1291 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 749294"];
1292 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 749295"];
1293 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 749296"];
1294 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 749297"];
1295 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 749298"];
1296 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 749299"];
1297 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 749300"];
1298 [label="i--; 749301"];
1299 [label="j--; 749302"];
1300 [label="yield return new Edit(EditKind.Update, i, j); 749303"];
1301 [label="yield return new Edit(EditKind.Update, i, j); 749304"];
1302 [label="yield return new Edit(EditKind.Update, i, j); 749305"];
1303 [label="yield return new Edit(EditKind.Update, i, j); 749306"];
1304 [label="new Edit(EditKind.Update, i, j) 749307"];
1305 [label="param Edit(EditKind kind) 749308"];
1306 [label="param Edit(int indexA) 749309"];
1307 [label="param Edit(int indexB) 749310"];
1308 [label="param Edit(this) 749311"];
1309 [label="this.Kind 749312"];
1310 [label="this.IndexA 749313"];
1311 [label="this.IndexB 749314"];
1312 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 749315"];
1313 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 749316"];
1314 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 749317"];
1315 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 749318"];
1316 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 749319"];
1317 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 749320"];
1318 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 749321"];
1319 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 749322"];
1320 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 749323"];
1321 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 749324"];
1322 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 749325"];
1323 [label="actualText.Free(); 749326"];
1324 [label="expectedText.Free(); 749327"];
1325 [label="return assertText.ToString(); 749328"];
1326 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 749329"];
1327 [label="diagnostics.Verify(expected); 749330"];
1328 [label="VerifyAssemblyIds(c, diagnostics); 749331"];
1329 [label="VerifyAssemblyIds(c, diagnostics); 749332"];
1330 [label="VerifyAssemblyIds(c, diagnostics) 749333"];
1331 [label="param VerifyAssemblyIds(TCompilation c) 749334"];
1332 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 749335"];
1333 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 749336"];
1334 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 749337"];
1335 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 749338"];
1336 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 749339"];
1337 [label="CustomAssert.True(assemblyIds.IsEmpty); 749340"];
1338 [label="VerifyAssemblyIds(c, diagnostics); 749341"];
1339 [label="return c; 749342"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 211;
220 -> 212;
221 -> 213;
221 -> 212;
222 -> 217;
222 -> 212;
223 -> 214;
223 -> 212;
224 -> 212;
225 -> 222;
225 -> 224;
226 -> 223;
226 -> 224;
227 -> 225;
227 -> 224;
228 -> 224;
229 -> 227;
229 -> 228;
230 -> 229;
230 -> 228;
231 -> 230;
232 -> 0;
232 -> 231;
233 -> 232;
234 -> 233;
235 -> 233;
236 -> 0;
236 -> 235;
237 -> 236;
237 -> 234;
237 -> 233;
238 -> 237;
238 -> 231;
239 -> 224;
240 -> 226;
240 -> 239;
240 -> 224;
241 -> 238;
241 -> 240;
242 -> 215;
242 -> 212;
243 -> 216;
243 -> 212;
244 -> 218;
244 -> 212;
245 -> 219;
245 -> 212;
246 -> 220;
246 -> 212;
247 -> 212;
248 -> 221;
248 -> 247;
249 -> 241;
249 -> 247;
250 -> 242;
250 -> 247;
251 -> 243;
251 -> 247;
252 -> 244;
252 -> 247;
253 -> 245;
253 -> 247;
254 -> 246;
254 -> 247;
255 -> 248;
255 -> 247;
256 -> 249;
256 -> 247;
257 -> 250;
257 -> 247;
258 -> 251;
258 -> 247;
259 -> 252;
259 -> 247;
260 -> 253;
260 -> 247;
261 -> 254;
261 -> 247;
262 -> 247;
263 -> 262;
263 -> 247;
264 -> 247;
265 -> 255;
265 -> 264;
266 -> 256;
266 -> 264;
267 -> 257;
267 -> 264;
268 -> 258;
268 -> 264;
269 -> 259;
269 -> 264;
270 -> 260;
270 -> 264;
271 -> 261;
271 -> 264;
272 -> 263;
272 -> 264;
273 -> 268;
273 -> 264;
274 -> 270;
274 -> 264;
275 -> 264;
276 -> 273;
276 -> 275;
277 -> 274;
277 -> 275;
278 -> 265;
278 -> 275;
279 -> 278;
279 -> 209;
279 -> 275;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 276;
282 -> 279;
283 -> 279;
284 -> 280;
284 -> 283;
285 -> 281;
285 -> 283;
286 -> 282;
286 -> 283;
287 -> 280;
287 -> 283;
288 -> 283;
289 -> 286;
289 -> 288;
289 -> 283;
290 -> 0;
291 -> 0;
293 -> 290;
293 -> 291;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 294;
296 -> 293;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 294;
299 -> 293;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 294;
302 -> 293;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 294;
305 -> 293;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 294;
308 -> 293;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 294;
311 -> 293;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 294;
314 -> 293;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 294;
317 -> 293;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 294;
320 -> 293;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 294;
323 -> 293;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 294;
326 -> 293;
326 -> 325;
327 -> 326;
328 -> 294;
331 -> 328;
331 -> 330;
332 -> 329;
332 -> 330;
333 -> 330;
334 -> 331;
334 -> 293;
334 -> 330;
335 -> 330;
336 -> 332;
336 -> 330;
337 -> 333;
337 -> 330;
338 -> 336;
338 -> 337;
338 -> 330;
339 -> 338;
339 -> 335;
339 -> 330;
340 -> 334;
340 -> 335;
340 -> 293;
340 -> 339;
340 -> 338;
340 -> 330;
341 -> 340;
342 -> 0;
343 -> 342;
345 -> 343;
345 -> 344;
346 -> 294;
346 -> 293;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 348;
350 -> 294;
350 -> 293;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 294;
353 -> 293;
353 -> 352;
354 -> 353;
355 -> 318;
357 -> 356;
358 -> 0;
359 -> 0;
360 -> 0;
362 -> 358;
362 -> 359;
362 -> 360;
362 -> 361;
363 -> 357;
364 -> 362;
364 -> 363;
364 -> 356;
365 -> 364;
369 -> 366;
369 -> 367;
369 -> 368;
370 -> 300;
370 -> 293;
370 -> 299;
370 -> 366;
370 -> 369;
371 -> 370;
372 -> 312;
373 -> 321;
374 -> 321;
375 -> 318;
376 -> 0;
377 -> 0;
379 -> 376;
379 -> 378;
380 -> 377;
380 -> 378;
381 -> 378;
382 -> 379;
382 -> 378;
383 -> 380;
383 -> 378;
384 -> 0;
384 -> 378;
385 -> 381;
385 -> 378;
386 -> 378;
387 -> 382;
387 -> 383;
387 -> 384;
387 -> 385;
387 -> 386;
387 -> 378;
388 -> 387;
389 -> 0;
390 -> 0;
392 -> 389;
392 -> 391;
393 -> 390;
393 -> 391;
394 -> 391;
395 -> 392;
395 -> 391;
396 -> 393;
396 -> 391;
397 -> 0;
397 -> 391;
398 -> 394;
398 -> 391;
399 -> 391;
400 -> 395;
400 -> 396;
400 -> 397;
400 -> 398;
400 -> 399;
400 -> 391;
401 -> 400;
403 -> 388;
403 -> 387;
403 -> 402;
404 -> 403;
406 -> 401;
406 -> 400;
406 -> 405;
407 -> 406;
408 -> 0;
409 -> 0;
411 -> 408;
411 -> 410;
412 -> 409;
412 -> 410;
413 -> 410;
414 -> 411;
414 -> 410;
415 -> 412;
415 -> 410;
416 -> 0;
416 -> 410;
417 -> 413;
417 -> 410;
418 -> 410;
419 -> 414;
419 -> 415;
419 -> 416;
419 -> 417;
419 -> 418;
419 -> 410;
420 -> 419;
421 -> 0;
422 -> 0;
424 -> 421;
424 -> 423;
425 -> 422;
425 -> 423;
426 -> 423;
427 -> 424;
427 -> 423;
428 -> 425;
428 -> 423;
429 -> 0;
429 -> 423;
430 -> 426;
430 -> 423;
431 -> 423;
432 -> 427;
432 -> 428;
432 -> 429;
432 -> 430;
432 -> 431;
432 -> 423;
433 -> 432;
434 -> 0;
435 -> 0;
437 -> 434;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 436;
440 -> 437;
440 -> 436;
441 -> 438;
441 -> 436;
442 -> 0;
442 -> 436;
443 -> 439;
443 -> 436;
444 -> 436;
445 -> 440;
445 -> 441;
445 -> 442;
445 -> 443;
445 -> 444;
445 -> 436;
446 -> 445;
447 -> 0;
448 -> 0;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 449;
453 -> 450;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 0;
455 -> 449;
456 -> 452;
456 -> 449;
457 -> 449;
458 -> 453;
458 -> 454;
458 -> 455;
458 -> 456;
458 -> 457;
458 -> 449;
459 -> 458;
460 -> 0;
461 -> 0;
463 -> 460;
463 -> 462;
464 -> 461;
464 -> 462;
465 -> 462;
466 -> 463;
466 -> 462;
467 -> 464;
467 -> 462;
468 -> 0;
468 -> 462;
469 -> 465;
469 -> 462;
470 -> 462;
471 -> 466;
471 -> 467;
471 -> 468;
471 -> 469;
471 -> 470;
471 -> 462;
472 -> 471;
473 -> 0;
474 -> 0;
476 -> 473;
476 -> 475;
477 -> 474;
477 -> 475;
478 -> 475;
479 -> 476;
479 -> 475;
480 -> 477;
480 -> 475;
481 -> 0;
481 -> 475;
482 -> 478;
482 -> 475;
483 -> 475;
484 -> 479;
484 -> 480;
484 -> 481;
484 -> 482;
484 -> 483;
484 -> 475;
485 -> 484;
487 -> 388;
487 -> 387;
487 -> 486;
488 -> 487;
490 -> 401;
490 -> 400;
490 -> 489;
491 -> 490;
493 -> 420;
493 -> 419;
493 -> 492;
494 -> 493;
496 -> 433;
496 -> 432;
496 -> 495;
497 -> 496;
498 -> 0;
499 -> 388;
499 -> 387;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 401;
502 -> 400;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 472;
505 -> 471;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 420;
508 -> 419;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 0;
511 -> 510;
512 -> 511;
513 -> 294;
513 -> 289;
514 -> 284;
514 -> 283;
515 -> 0;
515 -> 283;
516 -> 515;
516 -> 287;
516 -> 283;
517 -> 283;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 283;
519 -> 518;
519 -> 283;
520 -> 513;
520 -> 283;
521 -> 285;
521 -> 283;
522 -> 283;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 293;
523 -> 283;
524 -> 283;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 280;
538 -> 279;
539 -> 280;
539 -> 264;
540 -> 264;
541 -> 267;
541 -> 540;
541 -> 264;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 280;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 388;
546 -> 545;
547 -> 0;
547 -> 264;
548 -> 272;
548 -> 264;
549 -> 269;
549 -> 539;
549 -> 266;
549 -> 546;
549 -> 264;
550 -> 549;
550 -> 264;
551 -> 264;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 264;
556 -> 549;
556 -> 280;
556 -> 538;
556 -> 523;
556 -> 237;
556 -> 0;
556 -> 387;
556 -> 234;
556 -> 264;
557 -> 264;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 264;
560 -> 559;
560 -> 264;
561 -> 264;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 271;
569 -> 568;
569 -> 264;
570 -> 559;
570 -> 264;
571 -> 0;
571 -> 1;
572 -> 1;
573 -> 571;
573 -> 572;
574 -> 211;
574 -> 572;
575 -> 211;
575 -> 572;
576 -> 211;
576 -> 572;
577 -> 211;
577 -> 572;
578 -> 211;
578 -> 572;
579 -> 211;
579 -> 572;
580 -> 573;
580 -> 572;
581 -> 574;
581 -> 572;
582 -> 575;
582 -> 572;
583 -> 576;
583 -> 572;
584 -> 577;
584 -> 572;
585 -> 578;
585 -> 572;
586 -> 579;
586 -> 572;
587 -> 572;
588 -> 580;
588 -> 587;
589 -> 581;
589 -> 587;
590 -> 582;
590 -> 587;
591 -> 583;
591 -> 587;
592 -> 584;
592 -> 587;
593 -> 585;
593 -> 587;
594 -> 586;
594 -> 587;
595 -> 588;
595 -> 587;
596 -> 588;
596 -> 587;
597 -> 587;
598 -> 589;
598 -> 587;
599 -> 590;
599 -> 587;
600 -> 591;
600 -> 587;
601 -> 592;
601 -> 587;
602 -> 593;
602 -> 587;
604 -> 603;
606 -> 605;
607 -> 594;
607 -> 587;
608 -> 587;
609 -> 596;
609 -> 608;
610 -> 597;
610 -> 608;
611 -> 598;
611 -> 608;
612 -> 599;
612 -> 608;
613 -> 600;
613 -> 608;
614 -> 601;
614 -> 608;
615 -> 602;
615 -> 608;
616 -> 596;
616 -> 608;
617 -> 607;
617 -> 608;
618 -> 597;
618 -> 608;
619 -> 597;
619 -> 608;
620 -> 597;
620 -> 608;
621 -> 620;
621 -> 608;
622 -> 620;
622 -> 608;
623 -> 620;
623 -> 608;
624 -> 620;
624 -> 608;
625 -> 620;
625 -> 608;
626 -> 620;
626 -> 608;
627 -> 620;
627 -> 608;
628 -> 620;
628 -> 608;
629 -> 620;
629 -> 608;
630 -> 620;
630 -> 608;
631 -> 620;
631 -> 608;
632 -> 620;
632 -> 608;
633 -> 620;
633 -> 608;
634 -> 620;
634 -> 608;
635 -> 620;
635 -> 608;
636 -> 609;
636 -> 620;
636 -> 608;
637 -> 610;
637 -> 620;
637 -> 608;
638 -> 611;
638 -> 620;
638 -> 608;
639 -> 612;
639 -> 620;
639 -> 608;
640 -> 613;
640 -> 620;
640 -> 608;
641 -> 614;
641 -> 620;
641 -> 608;
642 -> 615;
642 -> 620;
642 -> 608;
643 -> 616;
643 -> 608;
644 -> 643;
644 -> 620;
644 -> 608;
645 -> 617;
645 -> 620;
645 -> 608;
646 -> 618;
646 -> 620;
646 -> 608;
647 -> 619;
647 -> 620;
647 -> 608;
648 -> 597;
648 -> 572;
649 -> 648;
649 -> 1;
650 -> 211;
650 -> 1;
651 -> 1;
652 -> 211;
652 -> 651;
653 -> 649;
653 -> 651;
654 -> 653;
654 -> 636;
654 -> 651;
655 -> 653;
655 -> 637;
655 -> 651;
656 -> 653;
656 -> 638;
656 -> 651;
657 -> 652;
657 -> 651;
658 -> 653;
658 -> 640;
658 -> 651;
659 -> 653;
659 -> 641;
659 -> 651;
660 -> 651;
661 -> 653;
661 -> 644;
661 -> 651;
662 -> 653;
662 -> 645;
662 -> 651;
663 -> 653;
663 -> 646;
663 -> 651;
664 -> 653;
664 -> 647;
664 -> 651;
665 -> 651;
666 -> 654;
666 -> 665;
667 -> 655;
667 -> 665;
668 -> 656;
668 -> 665;
669 -> 657;
669 -> 665;
670 -> 658;
670 -> 665;
671 -> 659;
671 -> 665;
672 -> 660;
672 -> 665;
673 -> 661;
673 -> 665;
674 -> 662;
674 -> 665;
675 -> 663;
675 -> 665;
676 -> 664;
676 -> 665;
677 -> 660;
677 -> 665;
678 -> 677;
678 -> 665;
679 -> 677;
679 -> 665;
680 -> 677;
680 -> 665;
681 -> 677;
681 -> 665;
682 -> 677;
682 -> 665;
683 -> 677;
683 -> 665;
684 -> 677;
684 -> 665;
685 -> 677;
685 -> 665;
686 -> 677;
686 -> 665;
687 -> 677;
687 -> 665;
688 -> 677;
688 -> 665;
689 -> 677;
689 -> 665;
690 -> 677;
690 -> 665;
691 -> 677;
691 -> 665;
692 -> 677;
692 -> 665;
693 -> 669;
693 -> 677;
693 -> 665;
694 -> 672;
694 -> 677;
694 -> 665;
695 -> 660;
695 -> 1;
696 -> 695;
696 -> 211;
696 -> 1;
697 -> 1;
698 -> 570;
698 -> 697;
699 -> 211;
699 -> 697;
700 -> 697;
701 -> 698;
701 -> 700;
701 -> 568;
701 -> 697;
702 -> 701;
702 -> 697;
703 -> 699;
703 -> 697;
704 -> 697;
705 -> 702;
705 -> 704;
706 -> 703;
706 -> 704;
707 -> 705;
707 -> 704;
708 -> 706;
708 -> 704;
709 -> 704;
710 -> 707;
710 -> 709;
711 -> 708;
711 -> 709;
712 -> 710;
712 -> 709;
713 -> 711;
713 -> 709;
714 -> 709;
715 -> 709;
716 -> 712;
716 -> 715;
717 -> 713;
717 -> 715;
718 -> 714;
718 -> 715;
719 -> 715;
720 -> 717;
720 -> 719;
720 -> 715;
721 -> 717;
721 -> 715;
722 -> 721;
722 -> 211;
722 -> 696;
722 -> 666;
722 -> 667;
722 -> 676;
722 -> 668;
722 -> 693;
722 -> 670;
722 -> 694;
722 -> 673;
722 -> 686;
722 -> 674;
722 -> 675;
722 -> 671;
722 -> 690;
722 -> 691;
722 -> 692;
722 -> 650;
722 -> 596;
722 -> 715;
723 -> 715;
724 -> 721;
724 -> 723;
724 -> 211;
724 -> 696;
724 -> 666;
724 -> 667;
724 -> 676;
724 -> 668;
724 -> 693;
724 -> 670;
724 -> 694;
724 -> 673;
724 -> 686;
724 -> 674;
724 -> 675;
724 -> 671;
724 -> 690;
724 -> 691;
724 -> 692;
724 -> 650;
724 -> 596;
724 -> 715;
725 -> 724;
725 -> 723;
726 -> 725;
726 -> 724;
726 -> 723;
727 -> 717;
727 -> 715;
728 -> 727;
728 -> 726;
728 -> 715;
729 -> 715;
730 -> 727;
730 -> 729;
730 -> 726;
730 -> 715;
731 -> 730;
731 -> 729;
732 -> 731;
732 -> 730;
732 -> 729;
733 -> 716;
733 -> 715;
734 -> 718;
734 -> 726;
734 -> 732;
734 -> 715;
735 -> 733;
735 -> 734;
735 -> 715;
736 -> 715;
737 -> 735;
737 -> 736;
738 -> 735;
738 -> 736;
739 -> 735;
739 -> 736;
740 -> 735;
740 -> 736;
741 -> 735;
741 -> 736;
742 -> 741;
742 -> 736;
743 -> 741;
743 -> 736;
744 -> 741;
744 -> 736;
745 -> 741;
745 -> 736;
746 -> 741;
746 -> 736;
747 -> 741;
747 -> 736;
748 -> 741;
748 -> 736;
749 -> 741;
749 -> 736;
750 -> 741;
750 -> 736;
751 -> 741;
751 -> 736;
752 -> 741;
752 -> 736;
753 -> 737;
753 -> 735;
753 -> 741;
753 -> 736;
754 -> 737;
754 -> 735;
754 -> 741;
754 -> 736;
755 -> 737;
755 -> 735;
755 -> 741;
755 -> 736;
756 -> 737;
756 -> 735;
756 -> 741;
756 -> 736;
757 -> 739;
757 -> 736;
758 -> 757;
759 -> 758;
759 -> 741;
759 -> 736;
760 -> 740;
760 -> 736;
761 -> 760;
762 -> 761;
762 -> 741;
762 -> 736;
763 -> 736;
764 -> 736;
765 -> 737;
765 -> 735;
765 -> 764;
765 -> 736;
766 -> 737;
766 -> 735;
766 -> 736;
767 -> 0;
767 -> 736;
768 -> 737;
768 -> 765;
769 -> 765;
770 -> 768;
770 -> 769;
770 -> 765;
771 -> 768;
771 -> 766;
771 -> 741;
771 -> 770;
772 -> 737;
772 -> 766;
772 -> 741;
772 -> 770;
773 -> 738;
773 -> 741;
773 -> 736;
774 -> 741;
774 -> 773;
774 -> 736;
775 -> 741;
775 -> 756;
775 -> 766;
775 -> 774;
776 -> 775;
777 -> 776;
777 -> 741;
777 -> 775;
778 -> 774;
779 -> 768;
779 -> 778;
779 -> 774;
780 -> 768;
780 -> 776;
780 -> 741;
780 -> 779;
781 -> 774;
782 -> 741;
782 -> 780;
782 -> 781;
782 -> 774;
783 -> 741;
783 -> 780;
783 -> 776;
783 -> 781;
783 -> 774;
784 -> 741;
784 -> 756;
784 -> 776;
784 -> 736;
785 -> 784;
785 -> 741;
785 -> 736;
786 -> 735;
786 -> 784;
786 -> 772;
786 -> 754;
786 -> 755;
786 -> 777;
786 -> 780;
786 -> 785;
786 -> 748;
786 -> 771;
786 -> 773;
786 -> 759;
786 -> 762;
786 -> 752;
786 -> 741;
786 -> 756;
786 -> 715;
787 -> 717;
787 -> 715;
788 -> 787;
788 -> 732;
788 -> 715;
789 -> 788;
790 -> 789;
790 -> 786;
790 -> 732;
790 -> 788;
791 -> 790;
791 -> 789;
792 -> 790;
792 -> 789;
793 -> 791;
793 -> 789;
794 -> 789;
795 -> 793;
795 -> 794;
795 -> 789;
796 -> 793;
796 -> 790;
796 -> 789;
797 -> 792;
797 -> 790;
797 -> 796;
797 -> 789;
798 -> 792;
798 -> 797;
798 -> 793;
798 -> 789;
799 -> 792;
799 -> 797;
799 -> 793;
799 -> 789;
800 -> 792;
800 -> 797;
800 -> 789;
801 -> 792;
801 -> 797;
801 -> 793;
801 -> 800;
802 -> 789;
803 -> 792;
803 -> 797;
803 -> 802;
803 -> 789;
804 -> 803;
805 -> 789;
806 -> 792;
806 -> 797;
806 -> 805;
806 -> 789;
807 -> 789;
808 -> 793;
808 -> 797;
808 -> 807;
808 -> 789;
809 -> 792;
809 -> 797;
809 -> 793;
809 -> 789;
810 -> 789;
811 -> 792;
811 -> 797;
811 -> 810;
811 -> 789;
812 -> 811;
813 -> 811;
814 -> 792;
814 -> 813;
815 -> 813;
816 -> 814;
816 -> 797;
816 -> 815;
816 -> 813;
817 -> 814;
817 -> 797;
817 -> 816;
818 -> 816;
819 -> 817;
819 -> 814;
819 -> 816;
820 -> 814;
820 -> 797;
820 -> 819;
820 -> 813;
821 -> 820;
821 -> 811;
822 -> 811;
823 -> 793;
823 -> 822;
824 -> 822;
825 -> 823;
825 -> 797;
825 -> 819;
825 -> 824;
825 -> 822;
826 -> 823;
826 -> 797;
826 -> 819;
826 -> 825;
826 -> 822;
827 -> 826;
827 -> 811;
828 -> 792;
828 -> 797;
828 -> 793;
828 -> 811;
829 -> 821;
829 -> 828;
830 -> 827;
830 -> 828;
831 -> 829;
831 -> 830;
831 -> 797;
831 -> 819;
831 -> 825;
831 -> 817;
831 -> 818;
831 -> 828;
832 -> 792;
832 -> 831;
832 -> 793;
832 -> 789;
833 -> 789;
834 -> 790;
834 -> 833;
834 -> 831;
834 -> 788;
835 -> 788;
836 -> 834;
836 -> 835;
836 -> 788;
837 -> 834;
837 -> 836;
838 -> 715;
839 -> 786;
839 -> 837;
839 -> 838;
839 -> 715;
840 -> 715;
841 -> 717;
841 -> 715;
842 -> 716;
842 -> 715;
843 -> 715;
844 -> 841;
844 -> 843;
845 -> 842;
845 -> 843;
846 -> 843;
847 -> 843;
848 -> 845;
848 -> 843;
849 -> 848;
849 -> 837;
849 -> 843;
850 -> 837;
850 -> 843;
851 -> 849;
851 -> 843;
852 -> 846;
852 -> 851;
853 -> 852;
853 -> 843;
854 -> 852;
854 -> 843;
855 -> 854;
855 -> 843;
856 -> 844;
856 -> 843;
857 -> 856;
857 -> 837;
857 -> 843;
858 -> 843;
859 -> 856;
859 -> 858;
859 -> 837;
859 -> 843;
860 -> 844;
860 -> 843;
861 -> 860;
861 -> 859;
861 -> 843;
862 -> 843;
863 -> 860;
863 -> 862;
863 -> 859;
863 -> 843;
864 -> 844;
864 -> 843;
865 -> 843;
866 -> 864;
866 -> 865;
868 -> 867;
869 -> 867;
870 -> 869;
870 -> 865;
871 -> 865;
872 -> 866;
872 -> 865;
873 -> 872;
873 -> 863;
873 -> 865;
874 -> 873;
875 -> 874;
876 -> 843;
877 -> 876;
877 -> 843;
878 -> 843;
879 -> 843;
880 -> 876;
880 -> 879;
880 -> 877;
880 -> 843;
881 -> 843;
882 -> 844;
882 -> 843;
883 -> 882;
883 -> 863;
883 -> 843;
884 -> 883;
885 -> 855;
885 -> 883;
886 -> 883;
887 -> 884;
887 -> 886;
888 -> 885;
888 -> 886;
889 -> 886;
890 -> 889;
890 -> 888;
890 -> 886;
891 -> 886;
892 -> 887;
892 -> 891;
893 -> 891;
894 -> 891;
895 -> 893;
895 -> 894;
895 -> 891;
896 -> 891;
897 -> 892;
897 -> 863;
897 -> 896;
897 -> 891;
898 -> 892;
898 -> 863;
898 -> 897;
899 -> 893;
899 -> 898;
899 -> 895;
899 -> 897;
900 -> 897;
901 -> 893;
901 -> 900;
901 -> 899;
901 -> 897;
902 -> 892;
902 -> 863;
902 -> 897;
903 -> 893;
903 -> 902;
903 -> 901;
903 -> 897;
904 -> 891;
905 -> 892;
905 -> 863;
905 -> 904;
905 -> 891;
906 -> 905;
907 -> 906;
908 -> 893;
908 -> 907;
908 -> 903;
908 -> 906;
909 -> 892;
909 -> 863;
909 -> 906;
910 -> 893;
910 -> 909;
910 -> 908;
910 -> 906;
911 -> 905;
912 -> 893;
912 -> 911;
912 -> 910;
912 -> 905;
913 -> 892;
913 -> 863;
913 -> 891;
914 -> 891;
915 -> 893;
915 -> 914;
915 -> 912;
915 -> 891;
916 -> 891;
917 -> 892;
917 -> 863;
917 -> 916;
917 -> 891;
918 -> 917;
919 -> 893;
919 -> 918;
919 -> 915;
919 -> 917;
920 -> 917;
921 -> 920;
921 -> 917;
922 -> 917;
923 -> 921;
923 -> 917;
924 -> 923;
925 -> 893;
925 -> 924;
925 -> 919;
925 -> 923;
926 -> 921;
926 -> 923;
927 -> 893;
927 -> 926;
927 -> 925;
927 -> 923;
928 -> 923;
929 -> 893;
929 -> 928;
929 -> 927;
929 -> 923;
930 -> 923;
931 -> 917;
932 -> 893;
932 -> 931;
932 -> 929;
932 -> 917;
933 -> 891;
934 -> 892;
934 -> 923;
934 -> 933;
934 -> 891;
935 -> 892;
935 -> 923;
935 -> 891;
936 -> 891;
937 -> 892;
937 -> 923;
937 -> 936;
937 -> 891;
938 -> 891;
939 -> 892;
939 -> 923;
939 -> 938;
939 -> 891;
940 -> 891;
941 -> 892;
941 -> 923;
941 -> 940;
941 -> 891;
942 -> 893;
942 -> 932;
942 -> 891;
943 -> 942;
943 -> 886;
944 -> 890;
944 -> 943;
944 -> 886;
945 -> 881;
945 -> 944;
945 -> 883;
946 -> 876;
946 -> 843;
947 -> 881;
947 -> 843;
948 -> 843;
949 -> 946;
949 -> 948;
950 -> 947;
950 -> 948;
951 -> 950;
951 -> 945;
951 -> 948;
952 -> 948;
953 -> 952;
953 -> 951;
953 -> 948;
954 -> 950;
954 -> 952;
954 -> 945;
954 -> 953;
955 -> 949;
955 -> 954;
955 -> 880;
955 -> 953;
956 -> 953;
957 -> 949;
957 -> 955;
957 -> 953;
958 -> 843;
959 -> 843;
960 -> 876;
960 -> 959;
960 -> 957;
960 -> 843;
961 -> 843;
962 -> 845;
962 -> 923;
962 -> 843;
963 -> 843;
964 -> 962;
964 -> 843;
965 -> 962;
965 -> 964;
966 -> 965;
966 -> 964;
967 -> 966;
967 -> 964;
968 -> 964;
969 -> 964;
970 -> 853;
970 -> 964;
971 -> 876;
971 -> 970;
972 -> 855;
972 -> 970;
973 -> 970;
974 -> 971;
974 -> 973;
975 -> 972;
975 -> 973;
976 -> 973;
977 -> 976;
977 -> 975;
977 -> 973;
978 -> 974;
978 -> 976;
978 -> 977;
978 -> 960;
978 -> 973;
979 -> 970;
980 -> 970;
981 -> 876;
981 -> 980;
981 -> 978;
981 -> 970;
982 -> 965;
982 -> 966;
982 -> 970;
983 -> 876;
983 -> 982;
983 -> 981;
983 -> 970;
984 -> 965;
984 -> 982;
984 -> 970;
985 -> 984;
985 -> 982;
985 -> 970;
986 -> 876;
986 -> 985;
987 -> 855;
987 -> 985;
988 -> 985;
989 -> 986;
989 -> 988;
990 -> 987;
990 -> 988;
991 -> 988;
992 -> 991;
992 -> 990;
992 -> 988;
993 -> 989;
993 -> 991;
993 -> 992;
993 -> 983;
993 -> 988;
994 -> 985;
995 -> 985;
996 -> 876;
996 -> 995;
996 -> 993;
996 -> 985;
997 -> 985;
998 -> 876;
998 -> 997;
998 -> 996;
998 -> 985;
999 -> 965;
999 -> 964;
1000 -> 964;
1001 -> 857;
1001 -> 964;
1002 -> 861;
1002 -> 964;
1003 -> 964;
1004 -> 999;
1004 -> 1003;
1005 -> 1000;
1005 -> 1003;
1006 -> 1001;
1006 -> 1003;
1007 -> 1002;
1007 -> 1003;
1008 -> 1000;
1008 -> 1003;
1009 -> 1008;
1009 -> 1003;
1010 -> 1008;
1010 -> 1003;
1011 -> 1008;
1011 -> 1003;
1012 -> 1008;
1012 -> 1003;
1013 -> 1008;
1013 -> 1003;
1014 -> 1008;
1014 -> 1003;
1015 -> 1008;
1015 -> 1003;
1016 -> 1008;
1016 -> 1003;
1017 -> 1008;
1017 -> 1003;
1018 -> 1004;
1018 -> 997;
1018 -> 1008;
1018 -> 1003;
1019 -> 1004;
1019 -> 997;
1019 -> 1008;
1019 -> 1003;
1020 -> 1004;
1020 -> 997;
1020 -> 1008;
1020 -> 1003;
1021 -> 1004;
1021 -> 997;
1021 -> 1008;
1021 -> 1003;
1022 -> 1003;
1023 -> 1004;
1023 -> 997;
1023 -> 1003;
1024 -> 1008;
1025 -> 1008;
1025 -> 1023;
1025 -> 1024;
1026 -> 1008;
1026 -> 1023;
1026 -> 1021;
1026 -> 1024;
1027 -> 1000;
1027 -> 964;
1028 -> 844;
1028 -> 964;
1029 -> 1000;
1029 -> 964;
1030 -> 1028;
1030 -> 1029;
1030 -> 1021;
1030 -> 1023;
1030 -> 1019;
1030 -> 1020;
1030 -> 1008;
1030 -> 1005;
1030 -> 1006;
1030 -> 1007;
1030 -> 964;
1031 -> 964;
1032 -> 1031;
1033 -> 1030;
1033 -> 1032;
1033 -> 1031;
1034 -> 1030;
1034 -> 1031;
1035 -> 1030;
1035 -> 1031;
1036 -> 1030;
1036 -> 1031;
1037 -> 1030;
1037 -> 1036;
1038 -> 1031;
1039 -> 1030;
1039 -> 1038;
1039 -> 1031;
1040 -> 1031;
1041 -> 1030;
1041 -> 1040;
1041 -> 1031;
1042 -> 1031;
1043 -> 1030;
1043 -> 1042;
1043 -> 1031;
1044 -> 1030;
1044 -> 1031;
1045 -> 1030;
1046 -> 1030;
1046 -> 1031;
1047 -> 964;
1048 -> 1030;
1048 -> 1047;
1048 -> 964;
1049 -> 844;
1049 -> 1030;
1049 -> 1048;
1050 -> 1000;
1050 -> 964;
1051 -> 855;
1051 -> 964;
1052 -> 964;
1053 -> 1050;
1053 -> 1052;
1054 -> 1051;
1054 -> 1052;
1055 -> 1052;
1056 -> 1055;
1056 -> 1054;
1056 -> 1052;
1057 -> 1052;
1058 -> 1052;
1059 -> 1057;
1059 -> 1058;
1059 -> 1052;
1060 -> 1052;
1061 -> 1053;
1061 -> 1030;
1061 -> 1060;
1061 -> 1052;
1062 -> 1053;
1062 -> 1030;
1062 -> 1061;
1063 -> 1057;
1063 -> 1062;
1063 -> 1059;
1063 -> 1061;
1064 -> 1061;
1065 -> 1057;
1065 -> 1064;
1065 -> 1063;
1065 -> 1061;
1066 -> 1053;
1066 -> 1030;
1066 -> 1061;
1067 -> 1057;
1067 -> 1066;
1067 -> 1065;
1067 -> 1061;
1068 -> 1052;
1069 -> 1053;
1069 -> 1030;
1069 -> 1068;
1069 -> 1052;
1070 -> 1069;
1071 -> 1070;
1072 -> 1057;
1072 -> 1071;
1072 -> 1067;
1072 -> 1070;
1073 -> 1053;
1073 -> 1030;
1073 -> 1070;
1074 -> 1057;
1074 -> 1073;
1074 -> 1072;
1074 -> 1070;
1075 -> 1069;
1076 -> 1057;
1076 -> 1075;
1076 -> 1074;
1076 -> 1069;
1077 -> 1053;
1077 -> 1030;
1077 -> 1052;
1078 -> 1052;
1079 -> 1057;
1079 -> 1078;
1079 -> 1076;
1079 -> 1052;
1080 -> 1053;
1080 -> 1030;
1080 -> 1052;
1081 -> 1080;
1082 -> 1057;
1082 -> 1081;
1082 -> 1079;
1082 -> 1080;
1083 -> 1080;
1084 -> 1057;
1084 -> 1083;
1084 -> 1082;
1084 -> 1080;
1085 -> 1080;
1086 -> 1057;
1086 -> 1085;
1086 -> 1084;
1086 -> 1080;
1087 -> 1080;
1088 -> 1057;
1088 -> 1087;
1088 -> 1086;
1088 -> 1080;
1089 -> 1080;
1090 -> 1080;
1091 -> 1057;
1091 -> 1090;
1091 -> 1088;
1091 -> 1080;
1092 -> 1052;
1093 -> 1053;
1093 -> 1080;
1093 -> 1092;
1093 -> 1052;
1094 -> 1093;
1095 -> 1057;
1095 -> 1094;
1095 -> 1091;
1095 -> 1093;
1096 -> 1093;
1097 -> 1057;
1097 -> 1096;
1097 -> 1095;
1097 -> 1093;
1098 -> 1093;
1099 -> 1057;
1099 -> 1098;
1099 -> 1097;
1099 -> 1093;
1100 -> 1093;
1101 -> 1057;
1101 -> 1100;
1101 -> 1099;
1101 -> 1093;
1102 -> 1093;
1103 -> 1057;
1103 -> 1102;
1103 -> 1101;
1103 -> 1093;
1104 -> 1053;
1104 -> 1080;
1104 -> 1052;
1105 -> 1052;
1106 -> 1053;
1106 -> 1080;
1106 -> 1105;
1106 -> 1052;
1107 -> 1052;
1108 -> 1053;
1108 -> 1080;
1108 -> 1107;
1108 -> 1052;
1109 -> 1052;
1110 -> 1053;
1110 -> 1080;
1110 -> 1109;
1110 -> 1052;
1111 -> 1057;
1111 -> 1103;
1111 -> 1052;
1112 -> 1111;
1112 -> 1052;
1113 -> 1056;
1113 -> 1112;
1113 -> 1052;
1114 -> 876;
1114 -> 1113;
1114 -> 998;
1114 -> 964;
1115 -> 1049;
1115 -> 964;
1116 -> 855;
1116 -> 964;
1117 -> 964;
1118 -> 1115;
1118 -> 1117;
1119 -> 1116;
1119 -> 1117;
1120 -> 1117;
1121 -> 1120;
1121 -> 1119;
1121 -> 1117;
1122 -> 1117;
1123 -> 1117;
1124 -> 1122;
1124 -> 1123;
1124 -> 1117;
1125 -> 1117;
1126 -> 1118;
1126 -> 1080;
1126 -> 1125;
1126 -> 1117;
1127 -> 1118;
1127 -> 1080;
1127 -> 1126;
1128 -> 1122;
1128 -> 1127;
1128 -> 1124;
1128 -> 1126;
1129 -> 1126;
1130 -> 1122;
1130 -> 1129;
1130 -> 1128;
1130 -> 1126;
1131 -> 1118;
1131 -> 1080;
1131 -> 1126;
1132 -> 1122;
1132 -> 1131;
1132 -> 1130;
1132 -> 1126;
1133 -> 1117;
1134 -> 1118;
1134 -> 1080;
1134 -> 1133;
1134 -> 1117;
1135 -> 1134;
1136 -> 1135;
1137 -> 1122;
1137 -> 1136;
1137 -> 1132;
1137 -> 1135;
1138 -> 1118;
1138 -> 1080;
1138 -> 1135;
1139 -> 1122;
1139 -> 1138;
1139 -> 1137;
1139 -> 1135;
1140 -> 1134;
1141 -> 1122;
1141 -> 1140;
1141 -> 1139;
1141 -> 1134;
1142 -> 1118;
1142 -> 1080;
1142 -> 1117;
1143 -> 1117;
1144 -> 1122;
1144 -> 1143;
1144 -> 1141;
1144 -> 1117;
1145 -> 1118;
1145 -> 1080;
1145 -> 1117;
1146 -> 1145;
1147 -> 1122;
1147 -> 1146;
1147 -> 1144;
1147 -> 1145;
1148 -> 1145;
1149 -> 1122;
1149 -> 1148;
1149 -> 1147;
1149 -> 1145;
1150 -> 1145;
1151 -> 1122;
1151 -> 1150;
1151 -> 1149;
1151 -> 1145;
1152 -> 1145;
1153 -> 1122;
1153 -> 1152;
1153 -> 1151;
1153 -> 1145;
1154 -> 1145;
1155 -> 1145;
1156 -> 1122;
1156 -> 1155;
1156 -> 1153;
1156 -> 1145;
1157 -> 1117;
1158 -> 1118;
1158 -> 1145;
1158 -> 1157;
1158 -> 1117;
1159 -> 1118;
1159 -> 1145;
1159 -> 1117;
1160 -> 1117;
1161 -> 1118;
1161 -> 1145;
1161 -> 1160;
1161 -> 1117;
1162 -> 1117;
1163 -> 1118;
1163 -> 1145;
1163 -> 1162;
1163 -> 1117;
1164 -> 1117;
1165 -> 1118;
1165 -> 1145;
1165 -> 1164;
1165 -> 1117;
1166 -> 1122;
1166 -> 1156;
1166 -> 1117;
1167 -> 1166;
1167 -> 1117;
1168 -> 1121;
1168 -> 1167;
1168 -> 1117;
1169 -> 961;
1169 -> 1168;
1169 -> 964;
1170 -> 843;
1171 -> 964;
1171 -> 1170;
1171 -> 843;
1172 -> 876;
1172 -> 1114;
1172 -> 1171;
1173 -> 843;
1174 -> 876;
1174 -> 1173;
1174 -> 1172;
1174 -> 843;
1175 -> 881;
1175 -> 843;
1176 -> 961;
1176 -> 843;
1180 -> 1178;
1180 -> 1177;
1181 -> 1179;
1181 -> 1177;
1182 -> 1177;
1183 -> 0;
1183 -> 843;
1184 -> 843;
1185 -> 843;
1186 -> 1175;
1186 -> 1185;
1187 -> 1176;
1187 -> 1185;
1188 -> 1183;
1188 -> 1185;
1189 -> 1184;
1189 -> 1185;
1190 -> 1184;
1190 -> 1185;
1191 -> 1185;
1192 -> 1189;
1192 -> 1191;
1192 -> 1185;
1193 -> 1192;
1193 -> 1185;
1194 -> 0;
1196 -> 1194;
1196 -> 1195;
1197 -> 1195;
1199 -> 1198;
1201 -> 1200;
1203 -> 1202;
1204 -> 1197;
1205 -> 1197;
1205 -> 1195;
1206 -> 1196;
1206 -> 1197;
1206 -> 1195;
1207 -> 1195;
1208 -> 1185;
1209 -> 1208;
1209 -> 1190;
1209 -> 1185;
1210 -> 1186;
1210 -> 1185;
1211 -> 1187;
1211 -> 1185;
1212 -> 1188;
1212 -> 1185;
1213 -> 1210;
1213 -> 1185;
1214 -> 1211;
1214 -> 1185;
1215 -> 1209;
1215 -> 1185;
1216 -> 1185;
1217 -> 1213;
1217 -> 1216;
1218 -> 1214;
1218 -> 1216;
1219 -> 1215;
1219 -> 1216;
1220 -> 1193;
1220 -> 1216;
1221 -> 1217;
1221 -> 1216;
1222 -> 1217;
1222 -> 1210;
1222 -> 1216;
1223 -> 1218;
1223 -> 1216;
1224 -> 1218;
1224 -> 1211;
1224 -> 1216;
1225 -> 1216;
1226 -> 1221;
1226 -> 1225;
1227 -> 1222;
1227 -> 1225;
1228 -> 1223;
1228 -> 1225;
1229 -> 1224;
1229 -> 1225;
1230 -> 1220;
1230 -> 1225;
1231 -> 1226;
1231 -> 1225;
1232 -> 1227;
1232 -> 1225;
1233 -> 1228;
1233 -> 1225;
1234 -> 1229;
1234 -> 1225;
1235 -> 1225;
1236 -> 1231;
1236 -> 1235;
1237 -> 1232;
1237 -> 1235;
1238 -> 1233;
1238 -> 1235;
1239 -> 1234;
1239 -> 1235;
1240 -> 1230;
1240 -> 1235;
1241 -> 1235;
1242 -> 1237;
1242 -> 1241;
1242 -> 1235;
1243 -> 1235;
1244 -> 1239;
1244 -> 1243;
1244 -> 1235;
1245 -> 1242;
1245 -> 1244;
1245 -> 1235;
1246 -> 1235;
1247 -> 1246;
1247 -> 1245;
1247 -> 1235;
1248 -> 1235;
1249 -> 1248;
1249 -> 1237;
1249 -> 1235;
1250 -> 1249;
1251 -> 1245;
1251 -> 1247;
1251 -> 1250;
1251 -> 1249;
1252 -> 1251;
1252 -> 1248;
1252 -> 1250;
1252 -> 1245;
1252 -> 1249;
1253 -> 1235;
1254 -> 1253;
1254 -> 1239;
1254 -> 1235;
1255 -> 1254;
1256 -> 1245;
1256 -> 1247;
1256 -> 1252;
1256 -> 1255;
1256 -> 1254;
1257 -> 1256;
1257 -> 1255;
1257 -> 1253;
1257 -> 1245;
1257 -> 1254;
1258 -> 1235;
1259 -> 1258;
1259 -> 1237;
1259 -> 1235;
1260 -> 1259;
1261 -> 1260;
1261 -> 1239;
1261 -> 1259;
1262 -> 1261;
1263 -> 1245;
1263 -> 1247;
1263 -> 1252;
1263 -> 1257;
1263 -> 1262;
1263 -> 1261;
1264 -> 1236;
1264 -> 1261;
1265 -> 1238;
1265 -> 1261;
1266 -> 1261;
1267 -> 1264;
1267 -> 1266;
1268 -> 1262;
1268 -> 1266;
1269 -> 1265;
1269 -> 1266;
1270 -> 1262;
1270 -> 1266;
1271 -> 1240;
1271 -> 1266;
1272 -> 1267;
1272 -> 1210;
1272 -> 1268;
1272 -> 1266;
1273 -> 1269;
1273 -> 1211;
1273 -> 1270;
1273 -> 1266;
1274 -> 1271;
1274 -> 0;
1274 -> 1272;
1274 -> 1273;
1274 -> 1210;
1274 -> 1211;
1274 -> 1266;
1275 -> 1263;
1275 -> 1274;
1275 -> 1261;
1276 -> 1261;
1277 -> 1245;
1277 -> 1247;
1277 -> 1252;
1277 -> 1257;
1277 -> 1276;
1277 -> 1260;
1277 -> 1261;
1278 -> 1261;
1279 -> 1245;
1279 -> 1247;
1279 -> 1252;
1279 -> 1257;
1279 -> 1258;
1279 -> 1278;
1279 -> 1261;
1280 -> 1275;
1280 -> 1261;
1281 -> 1277;
1281 -> 1261;
1282 -> 1280;
1282 -> 1281;
1282 -> 1261;
1283 -> 1279;
1283 -> 1261;
1284 -> 1282;
1284 -> 1283;
1284 -> 1261;
1285 -> 1284;
1285 -> 1258;
1285 -> 1260;
1285 -> 1245;
1285 -> 1261;
1286 -> 1245;
1286 -> 1235;
1287 -> 1227;
1287 -> 1225;
1288 -> 1229;
1288 -> 1225;
1289 -> 1225;
1290 -> 1287;
1290 -> 1289;
1290 -> 1225;
1291 -> 1288;
1291 -> 1289;
1291 -> 1225;
1292 -> 1290;
1292 -> 1291;
1292 -> 1225;
1293 -> 1286;
1293 -> 1245;
1293 -> 1247;
1293 -> 1252;
1293 -> 1257;
1293 -> 1285;
1293 -> 1287;
1293 -> 1288;
1293 -> 1292;
1294 -> 1292;
1295 -> 1286;
1295 -> 1245;
1295 -> 1247;
1295 -> 1252;
1295 -> 1257;
1295 -> 1285;
1295 -> 1294;
1295 -> 1288;
1295 -> 1292;
1296 -> 1286;
1296 -> 1245;
1296 -> 1247;
1296 -> 1252;
1296 -> 1257;
1296 -> 1285;
1296 -> 1287;
1296 -> 1288;
1296 -> 1295;
1297 -> 1295;
1298 -> 1287;
1298 -> 1297;
1299 -> 1288;
1299 -> 1297;
1300 -> 1297;
1301 -> 0;
1301 -> 1297;
1302 -> 1298;
1302 -> 1297;
1303 -> 1299;
1303 -> 1297;
1304 -> 1297;
1305 -> 1301;
1305 -> 1304;
1306 -> 1302;
1306 -> 1304;
1307 -> 1303;
1307 -> 1304;
1308 -> 1300;
1308 -> 1304;
1309 -> 1305;
1309 -> 1308;
1309 -> 1304;
1310 -> 1306;
1310 -> 1308;
1310 -> 1304;
1311 -> 1307;
1311 -> 1308;
1311 -> 1304;
1312 -> 1225;
1313 -> 1298;
1313 -> 1312;
1313 -> 1225;
1314 -> 1225;
1315 -> 1299;
1315 -> 1314;
1315 -> 1225;
1316 -> 1300;
1316 -> 1309;
1316 -> 1310;
1316 -> 1311;
1316 -> 1216;
1317 -> 1316;
1318 -> 1317;
1319 -> 1218;
1319 -> 1211;
1319 -> 1274;
1319 -> 1316;
1319 -> 1317;
1320 -> 1219;
1320 -> 1319;
1320 -> 1208;
1320 -> 1317;
1321 -> 1212;
1321 -> 1318;
1321 -> 1185;
1322 -> 876;
1322 -> 1321;
1322 -> 1174;
1322 -> 843;
1323 -> 961;
1323 -> 1169;
1323 -> 843;
1324 -> 881;
1324 -> 954;
1324 -> 843;
1325 -> 876;
1325 -> 1322;
1325 -> 843;
1326 -> 704;
1327 -> 697;
1328 -> 698;
1328 -> 697;
1329 -> 701;
1329 -> 697;
1330 -> 697;
1331 -> 1328;
1331 -> 1330;
1332 -> 1329;
1332 -> 1330;
1333 -> 1332;
1333 -> 1330;
1334 -> 1333;
1334 -> 701;
1334 -> 1145;
1335 -> 1331;
1335 -> 1334;
1335 -> 1145;
1335 -> 1333;
1336 -> 1333;
1336 -> 1335;
1337 -> 1336;
1337 -> 1335;
1338 -> 697;
1339 -> 698;
1339 -> 697;
}