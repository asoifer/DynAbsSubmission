digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 778880"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 778881"];
3 [label="param TypeTests(this) 778882"];
4 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 778883"];
5 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 778884"];
6 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 778885"];
7 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 778886"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 778887"];
9 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 778888"];
10 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 778889"];
11 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 778890"];
12 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 778891"];
13 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 778892"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 778893"];
15 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 778894"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 778895"];
17 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 778896"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 778897"];
19 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 778898"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 778899"];
21 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 778900"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 778901"];
23 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 778902"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 778903"];
25 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 778904"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 778905"];
27 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 778906"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 778907"];
29 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 778908"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 778909"];
31 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 778910"];
32 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 778911"];
33 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 778912"];
34 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 778913"];
35 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 778914"];
36 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 778915"];
37 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 778916"];
38 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 778917"];
39 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 778918"];
40 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 778919"];
41 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 778920"];
42 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 778921"];
43 [label="LazyThreadSafetyMode.PublicationOnly 778922"];
44 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 778923"];
45 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 778924"];
46 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 778925"];
47 [label="LazyThreadSafetyMode.PublicationOnly 778926"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 778927"];
49 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 778928"];
50 [label="RuntimeUtilities.IsCoreClrRuntime 778929"];
51 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 778930"];
52 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 778931"];
53 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 778932"];
54 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 778933"];
55 [label="LazyThreadSafetyMode.PublicationOnly 778934"];
56 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 778935"];
57 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 778936"];
58 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 778937"];
59 [label="LazyThreadSafetyMode.PublicationOnly 778938"];
60 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 778939"];
61 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 778940"];
62 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 778941"];
63 [label="LazyThreadSafetyMode.PublicationOnly 778942"];
64 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 778943"];
65 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 778944"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 778945"];
67 [label="LazyThreadSafetyMode.PublicationOnly 778946"];
68 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778947"];
69 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778948"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 778949"];
71 [label="LazyThreadSafetyMode.PublicationOnly 778950"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778951"];
73 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778952"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 778953"];
75 [label="LazyThreadSafetyMode.PublicationOnly 778954"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778955"];
77 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778956"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 778957"];
79 [label="LazyThreadSafetyMode.PublicationOnly 778958"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778959"];
81 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778960"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 778961"];
83 [label="LazyThreadSafetyMode.PublicationOnly 778962"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778963"];
85 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778964"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 778965"];
87 [label="LazyThreadSafetyMode.PublicationOnly 778966"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778967"];
89 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778968"];
90 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 778969"];
91 [label="LazyThreadSafetyMode.PublicationOnly 778970"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778971"];
93 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778972"];
94 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 778973"];
95 [label="LazyThreadSafetyMode.PublicationOnly 778974"];
96 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 778975"];
97 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 778976"];
98 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 778977"];
99 [label="LazyThreadSafetyMode.PublicationOnly 778978"];
100 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 778979"];
101 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 778980"];
102 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 778981"];
103 [label="LazyThreadSafetyMode.PublicationOnly 778982"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778983"];
105 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778984"];
106 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 778985"];
107 [label="LazyThreadSafetyMode.PublicationOnly 778986"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778987"];
109 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778988"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 778989"];
111 [label="LazyThreadSafetyMode.PublicationOnly 778990"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778991"];
113 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778992"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 778993"];
115 [label="LazyThreadSafetyMode.PublicationOnly 778994"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778995"];
117 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 778996"];
118 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 778997"];
119 [label="LazyThreadSafetyMode.PublicationOnly 778998"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 778999"];
121 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 779000"];
122 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 779001"];
123 [label="LazyThreadSafetyMode.PublicationOnly 779002"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779003"];
125 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779004"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 779005"];
127 [label="LazyThreadSafetyMode.PublicationOnly 779006"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779007"];
129 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779008"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 779009"];
131 [label="LazyThreadSafetyMode.PublicationOnly 779010"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779011"];
133 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779012"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 779013"];
135 [label="LazyThreadSafetyMode.PublicationOnly 779014"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779015"];
137 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779016"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 779017"];
139 [label="LazyThreadSafetyMode.PublicationOnly 779018"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779019"];
141 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779020"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 779021"];
143 [label="LazyThreadSafetyMode.PublicationOnly 779022"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779023"];
145 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779024"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 779025"];
147 [label="LazyThreadSafetyMode.PublicationOnly 779026"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779027"];
149 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779028"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 779029"];
151 [label="LazyThreadSafetyMode.PublicationOnly 779030"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779031"];
153 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779032"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 779033"];
155 [label="LazyThreadSafetyMode.PublicationOnly 779034"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779035"];
157 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779036"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 779037"];
159 [label="LazyThreadSafetyMode.PublicationOnly 779038"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779039"];
161 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779040"];
162 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 779041"];
163 [label="LazyThreadSafetyMode.PublicationOnly 779042"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779043"];
165 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779044"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 779045"];
167 [label="LazyThreadSafetyMode.PublicationOnly 779046"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779047"];
169 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779048"];
170 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 779049"];
171 [label="LazyThreadSafetyMode.PublicationOnly 779050"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779051"];
173 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 779052"];
174 [label="@'R:\\Invalid.dll' 779053"];
175 [label="fullPath: @'R:\\Invalid.dll' 779054"];
176 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 779055"];
177 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 779056"];
178 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 779057"];
179 [label="MscorlibRef_v4_0_30316_17626 779058"];
180 [label="Net451.mscorlib 779059"];
181 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 779060"];
182 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 779061"];
183 [label="'/*<bind>*/' 779062"];
184 [label="StartString = '/*<bind>*/' 779063"];
185 [label="'/*</bind>*/' 779064"];
186 [label="EndString = '/*</bind>*/' 779065"];
187 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 779066"];
188 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 779067"];
189 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 779068"];
190 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 779069"];
191 [label="param CSharpTestBase(this) 779070"];
192 [label="param CommonTestBase(this) 779071"];
193 [label="param TestBase(this) 779072"];
194 [label="_temp 779073"];
195 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 779074"];
196 [label="param SimpleNullable(this) 779075"];
197 [label="var text =\n@'namespace NS\n{\n    public class A \n    {\n        int? x = null;\n    }\n}'; 779076"];
198 [label="var comp = CreateCompilation(text); 779077"];
199 [label="text 779078"];
200 [label="param operator(string source) 779079"];
201 [label="source 779080"];
202 [label="new CSharpTestSource(source) 779081"];
203 [label="param CSharpTestSource(object value) 779082"];
204 [label="param CSharpTestSource(this) 779083"];
205 [label="Value 779084"];
206 [label="var comp = CreateCompilation(text); 779085"];
207 [label="var comp = CreateCompilation(text); 779086"];
208 [label="CreateCompilation(text) 779087"];
209 [label="param CreateCompilation(CSharpTestSource source) 779088"];
210 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 779089"];
211 [label="param CreateCompilation(CSharpCompilationOptions options = null) 779090"];
212 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 779091"];
213 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 779092"];
214 [label="param CreateCompilation(string assemblyName = '') 779093"];
215 [label="param CreateCompilation(string sourceFileName = '') 779094"];
216 [label="param CreateCompilation(bool skipUsesIsNullable = false) 779095"];
217 [label="source 779096"];
218 [label="targetFramework 779097"];
219 [label="references 779098"];
220 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 779099"];
221 [label="param GetReferences(TargetFramework tf) 779100"];
222 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 779101"];
223 [label="var references = GetReferences(tf); 779102"];
224 [label="GetReferences(tf) 779103"];
225 [label="param GetReferences(TargetFramework targetFramework) 779104"];
226 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 779105"];
227 [label="StandardReferences 779106"];
228 [label="RuntimeUtilities.IsCoreClrRuntime 779107"];
229 [label="Mscorlib46ExtendedReferences 779108"];
230 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 779109"];
231 [label="TestBase.ValueTupleRef 779110"];
232 [label="TestReferences.NetFx.ValueTuple.tuplelib 779111"];
233 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 779112"];
234 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 779113"];
235 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 779114"];
236 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 779115"];
237 [label="return references; 779116"];
238 [label="options 779117"];
239 [label="parseOptions 779118"];
240 [label="assemblyName 779119"];
241 [label="sourceFileName 779120"];
242 [label="skipUsesIsNullable 779121"];
243 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 779122"];
244 [label="param CreateEmptyCompilation(CSharpTestSource source) 779123"];
245 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 779124"];
246 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 779125"];
247 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 779126"];
248 [label="param CreateEmptyCompilation(string assemblyName = '') 779127"];
249 [label="param CreateEmptyCompilation(string sourceFileName = '') 779128"];
250 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 779129"];
251 [label="source 779130"];
252 [label="references 779131"];
253 [label="options 779132"];
254 [label="parseOptions 779133"];
255 [label="assemblyName 779134"];
256 [label="sourceFileName 779135"];
257 [label="skipUsesIsNullable 779136"];
258 [label="null 779137"];
259 [label="experimentalFeature: null 779138"];
260 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 779139"];
261 [label="param CreateCompilationCore(CSharpTestSource source) 779140"];
262 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 779141"];
263 [label="param CreateCompilationCore(CSharpCompilationOptions options) 779142"];
264 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 779143"];
265 [label="param CreateCompilationCore(string assemblyName) 779144"];
266 [label="param CreateCompilationCore(string sourceFileName) 779145"];
267 [label="param CreateCompilationCore(bool skipUsesIsNullable) 779146"];
268 [label="param CreateCompilationCore(MessageID? experimentalFeature) 779147"];
269 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 779148"];
270 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 779149"];
271 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 779150"];
272 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 779151"];
273 [label="param GetSyntaxTrees(string sourceFileName = '') 779152"];
274 [label="param GetSyntaxTrees(this) 779153"];
275 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 779154"];
276 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 779155"];
277 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 779156"];
278 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 779157"];
279 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 779158"];
280 [label="param Parse(string text) 779159"];
281 [label="param Parse(string filename = '') 779160"];
282 [label="param Parse(CSharpParseOptions options = null) 779161"];
283 [label="param Parse(Encoding encoding = null) 779162"];
284 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 779163"];
285 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 779164"];
286 [label="new CSharpParseOptions() 779165"];
287 [label="param CSharpParseOptions(LanguageVersion languageVersion = LanguageVersion.Default) 779166"];
288 [label="param CSharpParseOptions(DocumentationMode documentationMode = DocumentationMode.Parse) 779167"];
289 [label="param CSharpParseOptions(SourceCodeKind kind = SourceCodeKind.Regular) 779168"];
290 [label="param CSharpParseOptions(IEnumerable<string>? preprocessorSymbols = null) 779169"];
291 [label="param CSharpParseOptions(this) 779170"];
292 [label="languageVersion 779171"];
293 [label="documentationMode 779172"];
294 [label="kind 779173"];
295 [label="preprocessorSymbols 779174"];
296 [label="preprocessorSymbols.ToImmutableArrayOrEmpty() 779175"];
297 [label="ImmutableDictionary<string, string>.Empty 779176"];
298 [label="param CSharpParseOptions(LanguageVersion languageVersion) 779177"];
299 [label="param CSharpParseOptions(DocumentationMode documentationMode) 779178"];
300 [label="param CSharpParseOptions(SourceCodeKind kind) 779179"];
301 [label="param CSharpParseOptions(ImmutableArray<string> preprocessorSymbols) 779180"];
302 [label="param CSharpParseOptions(IReadOnlyDictionary<string, string>? features) 779181"];
303 [label="param CSharpParseOptions(this) 779182"];
304 [label="kind 779183"];
305 [label="documentationMode 779184"];
306 [label="param CSharpParseOptions(this) 779185"];
307 [label="_features 779186"];
308 [label="public LanguageVersion LanguageVersion { get; private set; } 779187"];
309 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779188"];
310 [label="this.SpecifiedLanguageVersion 779189"];
311 [label="this.LanguageVersion = languageVersion.MapSpecifiedToEffectiveVersion(); 779190"];
312 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779191"];
313 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779192"];
314 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779193"];
315 [label="return LanguageVersion.CSharp9; 779194"];
316 [label="this.LanguageVersion 779195"];
317 [label="this.PreprocessorSymbols = preprocessorSymbols.ToImmutableArrayOrEmpty(); 779196"];
318 [label="this.PreprocessorSymbols 779197"];
319 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779198"];
320 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779199"];
321 [label="_features 779200"];
322 [label="public static CSharpParseOptions Default { get; } = new CSharpParseOptions(); 779201"];
323 [label="kind: SourceCodeKind.Regular 779202"];
324 [label="documentationMode: DocumentationMode.Parse 779203"];
325 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 779204"];
326 [label="param CSharpParseOptions(LanguageVersion languageVersion = LanguageVersion.Default) 779205"];
327 [label="param CSharpParseOptions(DocumentationMode documentationMode = DocumentationMode.Parse) 779206"];
328 [label="param CSharpParseOptions(SourceCodeKind kind = SourceCodeKind.Regular) 779207"];
329 [label="param CSharpParseOptions(IEnumerable<string>? preprocessorSymbols = null) 779208"];
330 [label="param CSharpParseOptions(this) 779209"];
331 [label="languageVersion 779210"];
332 [label="documentationMode 779211"];
333 [label="kind 779212"];
334 [label="preprocessorSymbols 779213"];
335 [label="preprocessorSymbols.ToImmutableArrayOrEmpty() 779214"];
336 [label="ImmutableDictionary<string, string>.Empty 779215"];
337 [label="param CSharpParseOptions(LanguageVersion languageVersion) 779216"];
338 [label="param CSharpParseOptions(DocumentationMode documentationMode) 779217"];
339 [label="param CSharpParseOptions(SourceCodeKind kind) 779218"];
340 [label="param CSharpParseOptions(ImmutableArray<string> preprocessorSymbols) 779219"];
341 [label="param CSharpParseOptions(IReadOnlyDictionary<string, string>? features) 779220"];
342 [label="param CSharpParseOptions(this) 779221"];
343 [label="kind 779222"];
344 [label="documentationMode 779223"];
345 [label="param CSharpParseOptions(this) 779224"];
346 [label="_features 779225"];
347 [label="public LanguageVersion LanguageVersion { get; private set; } 779226"];
348 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779227"];
349 [label="this.SpecifiedLanguageVersion 779228"];
350 [label="this.LanguageVersion = languageVersion.MapSpecifiedToEffectiveVersion(); 779229"];
351 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779230"];
352 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779231"];
353 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779232"];
354 [label="return LanguageVersion.CSharp9; 779233"];
355 [label="this.LanguageVersion 779234"];
356 [label="this.PreprocessorSymbols = preprocessorSymbols.ToImmutableArrayOrEmpty(); 779235"];
357 [label="this.PreprocessorSymbols 779236"];
358 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779237"];
359 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779238"];
360 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779239"];
361 [label="_features 779240"];
362 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 779241"];
363 [label="SourceCodeKind.Script 779242"];
364 [label="Regular.WithKind(SourceCodeKind.Script) 779243"];
365 [label="param WithKind(SourceCodeKind kind) 779244"];
366 [label="param WithKind(this) 779245"];
367 [label="if (kind == this.SpecifiedKind)\n            {\n                return this;\n            } 779246"];
368 [label="var effectiveKind = kind.MapSpecifiedToEffectiveKind(); 779247"];
369 [label="return new CSharpParseOptions(this) { SpecifiedKind = kind, Kind = effectiveKind }; 779248"];
370 [label="return new CSharpParseOptions(this) { SpecifiedKind = kind, Kind = effectiveKind }; 779249"];
371 [label="new CSharpParseOptions(this) { SpecifiedKind = kind, Kind = effectiveKind } 779250"];
372 [label="param CSharpParseOptions(CSharpParseOptions other) 779251"];
373 [label="param CSharpParseOptions(this) 779252"];
374 [label="other.SpecifiedLanguageVersion 779253"];
375 [label="other.DocumentationMode 779254"];
376 [label="other.Kind 779255"];
377 [label="other.PreprocessorSymbols 779256"];
378 [label="other.Features 779257"];
379 [label="get\n            {\n                return _features;\n            } 779258"];
380 [label="return _features; 779259"];
381 [label="param CSharpParseOptions(this) 779260"];
382 [label="param CSharpParseOptions(LanguageVersion languageVersion) 779261"];
383 [label="param CSharpParseOptions(DocumentationMode documentationMode) 779262"];
384 [label="param CSharpParseOptions(SourceCodeKind kind) 779263"];
385 [label="param CSharpParseOptions(ImmutableArray<string> preprocessorSymbols) 779264"];
386 [label="param CSharpParseOptions(IReadOnlyDictionary<string, string>? features) 779265"];
387 [label="param CSharpParseOptions(this) 779266"];
388 [label="param CSharpParseOptions(this) 779267"];
389 [label="param CSharpParseOptions(this) 779268"];
390 [label="_features 779269"];
391 [label="public LanguageVersion LanguageVersion { get; private set; } 779270"];
392 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779271"];
393 [label="this.LanguageVersion = languageVersion.MapSpecifiedToEffectiveVersion(); 779272"];
394 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779273"];
395 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779274"];
396 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779275"];
397 [label="return LanguageVersion.CSharp9; 779276"];
398 [label="this.LanguageVersion 779277"];
399 [label="this.PreprocessorSymbols = preprocessorSymbols.ToImmutableArrayOrEmpty(); 779278"];
400 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779279"];
401 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779280"];
402 [label="SpecifiedKind 779281"];
403 [label="Kind 779282"];
404 [label="Script = Regular.WithKind(SourceCodeKind.Script) 779283"];
405 [label="LanguageVersion.CSharp6 779284"];
406 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 779285"];
407 [label="param WithLanguageVersion(LanguageVersion version) 779286"];
408 [label="param WithLanguageVersion(this) 779287"];
409 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779288"];
410 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779289"];
411 [label="version.MapSpecifiedToEffectiveVersion() 779290"];
412 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779291"];
413 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779292"];
414 [label="return version; 779293"];
415 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779294"];
416 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779295"];
417 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779296"];
418 [label="param CSharpParseOptions(CSharpParseOptions other) 779297"];
419 [label="param CSharpParseOptions(this) 779298"];
420 [label="other.SpecifiedLanguageVersion 779299"];
421 [label="other.DocumentationMode 779300"];
422 [label="other.Kind 779301"];
423 [label="other.PreprocessorSymbols 779302"];
424 [label="other.Features 779303"];
425 [label="get\n            {\n                return _features;\n            } 779304"];
426 [label="return _features; 779305"];
427 [label="param CSharpParseOptions(this) 779306"];
428 [label="param CSharpParseOptions(this) 779307"];
429 [label="param CSharpParseOptions(this) 779308"];
430 [label="param CSharpParseOptions(this) 779309"];
431 [label="_features 779310"];
432 [label="public LanguageVersion LanguageVersion { get; private set; } 779311"];
433 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779312"];
434 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779313"];
435 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779314"];
436 [label="SpecifiedLanguageVersion 779315"];
437 [label="LanguageVersion 779316"];
438 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 779317"];
439 [label="LanguageVersion.CSharp7 779318"];
440 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 779319"];
441 [label="param WithLanguageVersion(LanguageVersion version) 779320"];
442 [label="param WithLanguageVersion(this) 779321"];
443 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779322"];
444 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779323"];
445 [label="version.MapSpecifiedToEffectiveVersion() 779324"];
446 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779325"];
447 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779326"];
448 [label="return version; 779327"];
449 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779328"];
450 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779329"];
451 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779330"];
452 [label="param CSharpParseOptions(CSharpParseOptions other) 779331"];
453 [label="param CSharpParseOptions(this) 779332"];
454 [label="other.SpecifiedLanguageVersion 779333"];
455 [label="other.DocumentationMode 779334"];
456 [label="other.Kind 779335"];
457 [label="other.PreprocessorSymbols 779336"];
458 [label="other.Features 779337"];
459 [label="get\n            {\n                return _features;\n            } 779338"];
460 [label="return _features; 779339"];
461 [label="param CSharpParseOptions(this) 779340"];
462 [label="param CSharpParseOptions(this) 779341"];
463 [label="param CSharpParseOptions(this) 779342"];
464 [label="param CSharpParseOptions(this) 779343"];
465 [label="_features 779344"];
466 [label="public LanguageVersion LanguageVersion { get; private set; } 779345"];
467 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779346"];
468 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779347"];
469 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779348"];
470 [label="SpecifiedLanguageVersion 779349"];
471 [label="LanguageVersion 779350"];
472 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 779351"];
473 [label="LanguageVersion.CSharp7_1 779352"];
474 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 779353"];
475 [label="param WithLanguageVersion(LanguageVersion version) 779354"];
476 [label="param WithLanguageVersion(this) 779355"];
477 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779356"];
478 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779357"];
479 [label="version.MapSpecifiedToEffectiveVersion() 779358"];
480 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779359"];
481 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779360"];
482 [label="return version; 779361"];
483 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779362"];
484 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779363"];
485 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779364"];
486 [label="param CSharpParseOptions(CSharpParseOptions other) 779365"];
487 [label="param CSharpParseOptions(this) 779366"];
488 [label="other.SpecifiedLanguageVersion 779367"];
489 [label="other.DocumentationMode 779368"];
490 [label="other.Kind 779369"];
491 [label="other.PreprocessorSymbols 779370"];
492 [label="other.Features 779371"];
493 [label="get\n            {\n                return _features;\n            } 779372"];
494 [label="return _features; 779373"];
495 [label="param CSharpParseOptions(this) 779374"];
496 [label="param CSharpParseOptions(this) 779375"];
497 [label="param CSharpParseOptions(this) 779376"];
498 [label="param CSharpParseOptions(this) 779377"];
499 [label="_features 779378"];
500 [label="public LanguageVersion LanguageVersion { get; private set; } 779379"];
501 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779380"];
502 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779381"];
503 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779382"];
504 [label="SpecifiedLanguageVersion 779383"];
505 [label="LanguageVersion 779384"];
506 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 779385"];
507 [label="LanguageVersion.CSharp7_2 779386"];
508 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 779387"];
509 [label="param WithLanguageVersion(LanguageVersion version) 779388"];
510 [label="param WithLanguageVersion(this) 779389"];
511 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779390"];
512 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779391"];
513 [label="version.MapSpecifiedToEffectiveVersion() 779392"];
514 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779393"];
515 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779394"];
516 [label="return version; 779395"];
517 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779396"];
518 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779397"];
519 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779398"];
520 [label="param CSharpParseOptions(CSharpParseOptions other) 779399"];
521 [label="param CSharpParseOptions(this) 779400"];
522 [label="other.SpecifiedLanguageVersion 779401"];
523 [label="other.DocumentationMode 779402"];
524 [label="other.Kind 779403"];
525 [label="other.PreprocessorSymbols 779404"];
526 [label="other.Features 779405"];
527 [label="get\n            {\n                return _features;\n            } 779406"];
528 [label="return _features; 779407"];
529 [label="param CSharpParseOptions(this) 779408"];
530 [label="param CSharpParseOptions(this) 779409"];
531 [label="param CSharpParseOptions(this) 779410"];
532 [label="param CSharpParseOptions(this) 779411"];
533 [label="_features 779412"];
534 [label="public LanguageVersion LanguageVersion { get; private set; } 779413"];
535 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779414"];
536 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779415"];
537 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779416"];
538 [label="SpecifiedLanguageVersion 779417"];
539 [label="LanguageVersion 779418"];
540 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 779419"];
541 [label="LanguageVersion.CSharp7_3 779420"];
542 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 779421"];
543 [label="param WithLanguageVersion(LanguageVersion version) 779422"];
544 [label="param WithLanguageVersion(this) 779423"];
545 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779424"];
546 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779425"];
547 [label="version.MapSpecifiedToEffectiveVersion() 779426"];
548 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779427"];
549 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779428"];
550 [label="return version; 779429"];
551 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779430"];
552 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779431"];
553 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779432"];
554 [label="param CSharpParseOptions(CSharpParseOptions other) 779433"];
555 [label="param CSharpParseOptions(this) 779434"];
556 [label="other.SpecifiedLanguageVersion 779435"];
557 [label="other.DocumentationMode 779436"];
558 [label="other.Kind 779437"];
559 [label="other.PreprocessorSymbols 779438"];
560 [label="other.Features 779439"];
561 [label="get\n            {\n                return _features;\n            } 779440"];
562 [label="return _features; 779441"];
563 [label="param CSharpParseOptions(this) 779442"];
564 [label="param CSharpParseOptions(this) 779443"];
565 [label="param CSharpParseOptions(this) 779444"];
566 [label="param CSharpParseOptions(this) 779445"];
567 [label="_features 779446"];
568 [label="public LanguageVersion LanguageVersion { get; private set; } 779447"];
569 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779448"];
570 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779449"];
571 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779450"];
572 [label="SpecifiedLanguageVersion 779451"];
573 [label="LanguageVersion 779452"];
574 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 779453"];
575 [label="LanguageVersion.Default 779454"];
576 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 779455"];
577 [label="param WithLanguageVersion(LanguageVersion version) 779456"];
578 [label="param WithLanguageVersion(this) 779457"];
579 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779458"];
580 [label="return this; 779459"];
581 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 779460"];
582 [label="LanguageVersion.Preview 779461"];
583 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 779462"];
584 [label="param WithLanguageVersion(LanguageVersion version) 779463"];
585 [label="param WithLanguageVersion(this) 779464"];
586 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779465"];
587 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779466"];
588 [label="version.MapSpecifiedToEffectiveVersion() 779467"];
589 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779468"];
590 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779469"];
591 [label="return version; 779470"];
592 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779471"];
593 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779472"];
594 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779473"];
595 [label="param CSharpParseOptions(CSharpParseOptions other) 779474"];
596 [label="param CSharpParseOptions(this) 779475"];
597 [label="other.SpecifiedLanguageVersion 779476"];
598 [label="other.DocumentationMode 779477"];
599 [label="other.Kind 779478"];
600 [label="other.PreprocessorSymbols 779479"];
601 [label="other.Features 779480"];
602 [label="get\n            {\n                return _features;\n            } 779481"];
603 [label="return _features; 779482"];
604 [label="param CSharpParseOptions(this) 779483"];
605 [label="param CSharpParseOptions(this) 779484"];
606 [label="param CSharpParseOptions(this) 779485"];
607 [label="param CSharpParseOptions(this) 779486"];
608 [label="_features 779487"];
609 [label="public LanguageVersion LanguageVersion { get; private set; } 779488"];
610 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779489"];
611 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779490"];
612 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779491"];
613 [label="SpecifiedLanguageVersion 779492"];
614 [label="LanguageVersion 779493"];
615 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 779494"];
616 [label="LanguageVersion.CSharp8 779495"];
617 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 779496"];
618 [label="param WithLanguageVersion(LanguageVersion version) 779497"];
619 [label="param WithLanguageVersion(this) 779498"];
620 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779499"];
621 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779500"];
622 [label="version.MapSpecifiedToEffectiveVersion() 779501"];
623 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779502"];
624 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779503"];
625 [label="return version; 779504"];
626 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779505"];
627 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779506"];
628 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779507"];
629 [label="param CSharpParseOptions(CSharpParseOptions other) 779508"];
630 [label="param CSharpParseOptions(this) 779509"];
631 [label="other.SpecifiedLanguageVersion 779510"];
632 [label="other.DocumentationMode 779511"];
633 [label="other.Kind 779512"];
634 [label="other.PreprocessorSymbols 779513"];
635 [label="other.Features 779514"];
636 [label="get\n            {\n                return _features;\n            } 779515"];
637 [label="return _features; 779516"];
638 [label="param CSharpParseOptions(this) 779517"];
639 [label="param CSharpParseOptions(this) 779518"];
640 [label="param CSharpParseOptions(this) 779519"];
641 [label="param CSharpParseOptions(this) 779520"];
642 [label="_features 779521"];
643 [label="public LanguageVersion LanguageVersion { get; private set; } 779522"];
644 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779523"];
645 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779524"];
646 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779525"];
647 [label="SpecifiedLanguageVersion 779526"];
648 [label="LanguageVersion 779527"];
649 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 779528"];
650 [label="LanguageVersion.CSharp9 779529"];
651 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 779530"];
652 [label="param WithLanguageVersion(LanguageVersion version) 779531"];
653 [label="param WithLanguageVersion(this) 779532"];
654 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779533"];
655 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779534"];
656 [label="version.MapSpecifiedToEffectiveVersion() 779535"];
657 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779536"];
658 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779537"];
659 [label="return version; 779538"];
660 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779539"];
661 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779540"];
662 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779541"];
663 [label="param CSharpParseOptions(CSharpParseOptions other) 779542"];
664 [label="param CSharpParseOptions(this) 779543"];
665 [label="other.SpecifiedLanguageVersion 779544"];
666 [label="other.DocumentationMode 779545"];
667 [label="other.Kind 779546"];
668 [label="other.PreprocessorSymbols 779547"];
669 [label="other.Features 779548"];
670 [label="get\n            {\n                return _features;\n            } 779549"];
671 [label="return _features; 779550"];
672 [label="param CSharpParseOptions(this) 779551"];
673 [label="param CSharpParseOptions(this) 779552"];
674 [label="param CSharpParseOptions(this) 779553"];
675 [label="param CSharpParseOptions(this) 779554"];
676 [label="_features 779555"];
677 [label="public LanguageVersion LanguageVersion { get; private set; } 779556"];
678 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779557"];
679 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779558"];
680 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779559"];
681 [label="SpecifiedLanguageVersion 779560"];
682 [label="LanguageVersion 779561"];
683 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 779562"];
684 [label="DocumentationMode.Diagnose 779563"];
685 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 779564"];
686 [label="param WithDocumentationMode(DocumentationMode documentationMode) 779565"];
687 [label="param WithDocumentationMode(this) 779566"];
688 [label="if (documentationMode == this.DocumentationMode)\n            {\n                return this;\n            } 779567"];
689 [label="return new CSharpParseOptions(this) { DocumentationMode = documentationMode }; 779568"];
690 [label="return new CSharpParseOptions(this) { DocumentationMode = documentationMode }; 779569"];
691 [label="new CSharpParseOptions(this) { DocumentationMode = documentationMode } 779570"];
692 [label="param CSharpParseOptions(CSharpParseOptions other) 779571"];
693 [label="param CSharpParseOptions(this) 779572"];
694 [label="other.SpecifiedLanguageVersion 779573"];
695 [label="other.DocumentationMode 779574"];
696 [label="other.Kind 779575"];
697 [label="other.PreprocessorSymbols 779576"];
698 [label="other.Features 779577"];
699 [label="get\n            {\n                return _features;\n            } 779578"];
700 [label="return _features; 779579"];
701 [label="param CSharpParseOptions(this) 779580"];
702 [label="param CSharpParseOptions(this) 779581"];
703 [label="param CSharpParseOptions(this) 779582"];
704 [label="param CSharpParseOptions(this) 779583"];
705 [label="_features 779584"];
706 [label="public LanguageVersion LanguageVersion { get; private set; } 779585"];
707 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779586"];
708 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779587"];
709 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779588"];
710 [label="DocumentationMode 779589"];
711 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 779590"];
712 [label="Regular 779591"];
713 [label="'UseLegacyStrongNameProvider' 779592"];
714 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 779593"];
715 [label="param WithFeature(this CSharpParseOptions options) 779594"];
716 [label="param WithFeature(string feature) 779595"];
717 [label="param WithFeature(string value = 'true') 779596"];
718 [label="options.Features 779597"];
719 [label="get\n            {\n                return _features;\n            } 779598"];
720 [label="return _features; 779599"];
721 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779600"];
722 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779601"];
723 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779602"];
724 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779603"];
725 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779604"];
726 [label="new[] { new KeyValuePair<string, string>(feature, value) } 779605"];
727 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779606"];
728 [label="options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })) 779607"];
729 [label="param WithFeatures(IEnumerable<KeyValuePair<string, string>>? features) 779608"];
730 [label="param WithFeatures(this) 779609"];
731 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779610"];
732 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779611"];
733 [label="return new CSharpParseOptions(this) { _features = dictionary }; 779612"];
734 [label="return new CSharpParseOptions(this) { _features = dictionary }; 779613"];
735 [label="new CSharpParseOptions(this) { _features = dictionary } 779614"];
736 [label="param CSharpParseOptions(CSharpParseOptions other) 779615"];
737 [label="param CSharpParseOptions(this) 779616"];
738 [label="other.SpecifiedLanguageVersion 779617"];
739 [label="other.DocumentationMode 779618"];
740 [label="other.Kind 779619"];
741 [label="other.PreprocessorSymbols 779620"];
742 [label="other.Features 779621"];
743 [label="get\n            {\n                return _features;\n            } 779622"];
744 [label="return _features; 779623"];
745 [label="param CSharpParseOptions(this) 779624"];
746 [label="param CSharpParseOptions(this) 779625"];
747 [label="param CSharpParseOptions(this) 779626"];
748 [label="param CSharpParseOptions(this) 779627"];
749 [label="_features 779628"];
750 [label="public LanguageVersion LanguageVersion { get; private set; } 779629"];
751 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779630"];
752 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779631"];
753 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779632"];
754 [label="_features 779633"];
755 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 779634"];
756 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 779635"];
757 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 779636"];
758 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 779637"];
759 [label="param RequiredVersion(this MessageID feature) 779638"];
760 [label="Debug.Assert(RequiredFeature(feature) == null); 779639"];
761 [label="RequiredFeature(feature) 779640"];
762 [label="param RequiredFeature(this MessageID feature) 779641"];
763 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 779642"];
764 [label="return null; 779643"];
765 [label="Debug.Assert(RequiredFeature(feature) == null); 779644"];
766 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 779645"];
767 [label="return LanguageVersion.CSharp7_3; 779646"];
768 [label="1 779647"];
769 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 779648"];
770 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 779649"];
771 [label="param WithLanguageVersion(LanguageVersion version) 779650"];
772 [label="param WithLanguageVersion(this) 779651"];
773 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779652"];
774 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779653"];
775 [label="version.MapSpecifiedToEffectiveVersion() 779654"];
776 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779655"];
777 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779656"];
778 [label="return version; 779657"];
779 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779658"];
780 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779659"];
781 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779660"];
782 [label="param CSharpParseOptions(CSharpParseOptions other) 779661"];
783 [label="param CSharpParseOptions(this) 779662"];
784 [label="other.SpecifiedLanguageVersion 779663"];
785 [label="other.DocumentationMode 779664"];
786 [label="other.Kind 779665"];
787 [label="other.PreprocessorSymbols 779666"];
788 [label="other.Features 779667"];
789 [label="get\n            {\n                return _features;\n            } 779668"];
790 [label="return _features; 779669"];
791 [label="param CSharpParseOptions(this) 779670"];
792 [label="param CSharpParseOptions(this) 779671"];
793 [label="param CSharpParseOptions(this) 779672"];
794 [label="param CSharpParseOptions(this) 779673"];
795 [label="_features 779674"];
796 [label="public LanguageVersion LanguageVersion { get; private set; } 779675"];
797 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779676"];
798 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779677"];
799 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779678"];
800 [label="SpecifiedLanguageVersion 779679"];
801 [label="LanguageVersion 779680"];
802 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 779681"];
803 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 779682"];
804 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 779683"];
805 [label="param RequiredVersion(this MessageID feature) 779684"];
806 [label="Debug.Assert(RequiredFeature(feature) == null); 779685"];
807 [label="RequiredFeature(feature) 779686"];
808 [label="param RequiredFeature(this MessageID feature) 779687"];
809 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 779688"];
810 [label="return null; 779689"];
811 [label="Debug.Assert(RequiredFeature(feature) == null); 779690"];
812 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 779691"];
813 [label="return LanguageVersion.CSharp9; 779692"];
814 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 779693"];
815 [label="param WithLanguageVersion(LanguageVersion version) 779694"];
816 [label="param WithLanguageVersion(this) 779695"];
817 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779696"];
818 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779697"];
819 [label="version.MapSpecifiedToEffectiveVersion() 779698"];
820 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779699"];
821 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779700"];
822 [label="return version; 779701"];
823 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779702"];
824 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779703"];
825 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779704"];
826 [label="param CSharpParseOptions(CSharpParseOptions other) 779705"];
827 [label="param CSharpParseOptions(this) 779706"];
828 [label="other.SpecifiedLanguageVersion 779707"];
829 [label="other.DocumentationMode 779708"];
830 [label="other.Kind 779709"];
831 [label="other.PreprocessorSymbols 779710"];
832 [label="other.Features 779711"];
833 [label="get\n            {\n                return _features;\n            } 779712"];
834 [label="return _features; 779713"];
835 [label="param CSharpParseOptions(this) 779714"];
836 [label="param CSharpParseOptions(this) 779715"];
837 [label="param CSharpParseOptions(this) 779716"];
838 [label="param CSharpParseOptions(this) 779717"];
839 [label="_features 779718"];
840 [label="public LanguageVersion LanguageVersion { get; private set; } 779719"];
841 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779720"];
842 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779721"];
843 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779722"];
844 [label="SpecifiedLanguageVersion 779723"];
845 [label="LanguageVersion 779724"];
846 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 779725"];
847 [label="LanguageVersion.CSharp8 779726"];
848 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 779727"];
849 [label="param WithLanguageVersion(LanguageVersion version) 779728"];
850 [label="param WithLanguageVersion(this) 779729"];
851 [label="if (version == this.SpecifiedLanguageVersion)\n            {\n                return this;\n            } 779730"];
852 [label="var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion(); 779731"];
853 [label="version.MapSpecifiedToEffectiveVersion() 779732"];
854 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779733"];
855 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779734"];
856 [label="return version; 779735"];
857 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779736"];
858 [label="return new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion }; 779737"];
859 [label="new CSharpParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion } 779738"];
860 [label="param CSharpParseOptions(CSharpParseOptions other) 779739"];
861 [label="param CSharpParseOptions(this) 779740"];
862 [label="other.SpecifiedLanguageVersion 779741"];
863 [label="other.DocumentationMode 779742"];
864 [label="other.Kind 779743"];
865 [label="other.PreprocessorSymbols 779744"];
866 [label="other.Features 779745"];
867 [label="get\n            {\n                return _features;\n            } 779746"];
868 [label="return _features; 779747"];
869 [label="param CSharpParseOptions(this) 779748"];
870 [label="param CSharpParseOptions(this) 779749"];
871 [label="param CSharpParseOptions(this) 779750"];
872 [label="param CSharpParseOptions(this) 779751"];
873 [label="_features 779752"];
874 [label="public LanguageVersion LanguageVersion { get; private set; } 779753"];
875 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779754"];
876 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779755"];
877 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779756"];
878 [label="SpecifiedLanguageVersion 779757"];
879 [label="LanguageVersion 779758"];
880 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 779759"];
881 [label="RegularWithExtendedPartialMethods = RegularPreview 779760"];
882 [label="new SmallDictionary<string, string> { } 779761"];
883 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 779762"];
884 [label="kind: SourceCodeKind.Regular 779763"];
885 [label="documentationMode: DocumentationMode.None 779764"];
886 [label="languageVersion: LanguageVersion.Preview 779765"];
887 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 779766"];
888 [label="param CSharpParseOptions(LanguageVersion languageVersion = LanguageVersion.Default) 779767"];
889 [label="param CSharpParseOptions(DocumentationMode documentationMode = DocumentationMode.Parse) 779768"];
890 [label="param CSharpParseOptions(SourceCodeKind kind = SourceCodeKind.Regular) 779769"];
891 [label="param CSharpParseOptions(IEnumerable<string>? preprocessorSymbols = null) 779770"];
892 [label="param CSharpParseOptions(this) 779771"];
893 [label="languageVersion 779772"];
894 [label="documentationMode 779773"];
895 [label="kind 779774"];
896 [label="preprocessorSymbols 779775"];
897 [label="preprocessorSymbols.ToImmutableArrayOrEmpty() 779776"];
898 [label="ImmutableDictionary<string, string>.Empty 779777"];
899 [label="param CSharpParseOptions(LanguageVersion languageVersion) 779778"];
900 [label="param CSharpParseOptions(DocumentationMode documentationMode) 779779"];
901 [label="param CSharpParseOptions(SourceCodeKind kind) 779780"];
902 [label="param CSharpParseOptions(ImmutableArray<string> preprocessorSymbols) 779781"];
903 [label="param CSharpParseOptions(IReadOnlyDictionary<string, string>? features) 779782"];
904 [label="param CSharpParseOptions(this) 779783"];
905 [label="kind 779784"];
906 [label="documentationMode 779785"];
907 [label="param CSharpParseOptions(this) 779786"];
908 [label="_features 779787"];
909 [label="public LanguageVersion LanguageVersion { get; private set; } 779788"];
910 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779789"];
911 [label="this.SpecifiedLanguageVersion 779790"];
912 [label="this.LanguageVersion = languageVersion.MapSpecifiedToEffectiveVersion(); 779791"];
913 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779792"];
914 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779793"];
915 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779794"];
916 [label="return version; 779795"];
917 [label="this.LanguageVersion 779796"];
918 [label="this.PreprocessorSymbols = preprocessorSymbols.ToImmutableArrayOrEmpty(); 779797"];
919 [label="this.PreprocessorSymbols 779798"];
920 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779799"];
921 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779800"];
922 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779801"];
923 [label="s_experimentalFeatures 779802"];
924 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 779803"];
925 [label="param WithFeatures(IEnumerable<KeyValuePair<string, string>>? features) 779804"];
926 [label="param WithFeatures(this) 779805"];
927 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779806"];
928 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779807"];
929 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779808"];
930 [label="return new CSharpParseOptions(this) { _features = dictionary }; 779809"];
931 [label="return new CSharpParseOptions(this) { _features = dictionary }; 779810"];
932 [label="new CSharpParseOptions(this) { _features = dictionary } 779811"];
933 [label="param CSharpParseOptions(CSharpParseOptions other) 779812"];
934 [label="param CSharpParseOptions(this) 779813"];
935 [label="other.SpecifiedLanguageVersion 779814"];
936 [label="other.DocumentationMode 779815"];
937 [label="other.Kind 779816"];
938 [label="other.PreprocessorSymbols 779817"];
939 [label="other.Features 779818"];
940 [label="get\n            {\n                return _features;\n            } 779819"];
941 [label="return _features; 779820"];
942 [label="param CSharpParseOptions(this) 779821"];
943 [label="param CSharpParseOptions(LanguageVersion languageVersion) 779822"];
944 [label="param CSharpParseOptions(DocumentationMode documentationMode) 779823"];
945 [label="param CSharpParseOptions(SourceCodeKind kind) 779824"];
946 [label="param CSharpParseOptions(ImmutableArray<string> preprocessorSymbols) 779825"];
947 [label="param CSharpParseOptions(this) 779826"];
948 [label="param CSharpParseOptions(this) 779827"];
949 [label="param CSharpParseOptions(this) 779828"];
950 [label="_features 779829"];
951 [label="public LanguageVersion LanguageVersion { get; private set; } 779830"];
952 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779831"];
953 [label="this.LanguageVersion = languageVersion.MapSpecifiedToEffectiveVersion(); 779832"];
954 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779833"];
955 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 779834"];
956 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 779835"];
957 [label="return version; 779836"];
958 [label="this.LanguageVersion 779837"];
959 [label="this.PreprocessorSymbols = preprocessorSymbols.ToImmutableArrayOrEmpty(); 779838"];
960 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779839"];
961 [label="_features 779840"];
962 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 779841"];
963 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 779842"];
964 [label="'testV7SwitchBinder' 779843"];
965 [label="'true' 779844"];
966 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 779845"];
967 [label="param WithFeatures(IEnumerable<KeyValuePair<string, string>>? features) 779846"];
968 [label="param WithFeatures(this) 779847"];
969 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779848"];
970 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779849"];
971 [label="ImmutableDictionary<string, string> dictionary =\n                features?.ToImmutableDictionary(StringComparer.OrdinalIgnoreCase)\n                ?? ImmutableDictionary<string, string>.Empty; 779850"];
972 [label="return new CSharpParseOptions(this) { _features = dictionary }; 779851"];
973 [label="return new CSharpParseOptions(this) { _features = dictionary }; 779852"];
974 [label="new CSharpParseOptions(this) { _features = dictionary } 779853"];
975 [label="param CSharpParseOptions(CSharpParseOptions other) 779854"];
976 [label="param CSharpParseOptions(this) 779855"];
977 [label="other.SpecifiedLanguageVersion 779856"];
978 [label="other.DocumentationMode 779857"];
979 [label="other.Kind 779858"];
980 [label="other.Features 779859"];
981 [label="get\n            {\n                return _features;\n            } 779860"];
982 [label="param CSharpParseOptions(this) 779861"];
983 [label="param CSharpParseOptions(this) 779862"];
984 [label="param CSharpParseOptions(this) 779863"];
985 [label="param CSharpParseOptions(this) 779864"];
986 [label="_features 779865"];
987 [label="public LanguageVersion LanguageVersion { get; private set; } 779866"];
988 [label="public LanguageVersion SpecifiedLanguageVersion { get; private set; } 779867"];
989 [label="languageVersion.MapSpecifiedToEffectiveVersion() 779868"];
990 [label="_features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty; 779869"];
991 [label="_features 779870"];
992 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 779871"];
993 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 779872"];
994 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 779873"];
995 [label="RegularWithoutRecursivePatterns = Regular7_3 779874"];
996 [label="RegularWithRecursivePatterns = Regular8 779875"];
997 [label="RegularWithoutPatternCombinators = Regular8 779876"];
998 [label="RegularWithPatternCombinators = RegularPreview 779877"];
999 [label="OutputKind.DynamicallyLinkedLibrary 779878"];
1000 [label="OptimizationLevel.Release 779879"];
1001 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 779880"];
1002 [label="param CreateTestOptions(OutputKind outputKind) 779881"];
1003 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 779882"];
1004 [label="param CreateTestOptions(bool allowUnsafe = false) 779883"];
1005 [label="outputKind 779884"];
1006 [label="optimizationLevel: optimizationLevel 779885"];
1007 [label="warningLevel: Diagnostic.MaxWarningLevel 779886"];
1008 [label="allowUnsafe: allowUnsafe 779887"];
1009 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 779888"];
1010 [label="param CSharpCompilationOptions(OutputKind outputKind) 779889"];
1011 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 779890"];
1012 [label="param CSharpCompilationOptions(string? moduleName = null) 779891"];
1013 [label="param CSharpCompilationOptions(string? mainTypeName = null) 779892"];
1014 [label="param CSharpCompilationOptions(string? scriptClassName = null) 779893"];
1015 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 779894"];
1016 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 779895"];
1017 [label="param CSharpCompilationOptions(bool checkOverflow = false) 779896"];
1018 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 779897"];
1019 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 779898"];
1020 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 779899"];
1021 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 779900"];
1022 [label="param CSharpCompilationOptions(bool? delaySign = null) 779901"];
1023 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 779902"];
1024 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 779903"];
1025 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 779904"];
1026 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 779905"];
1027 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 779906"];
1028 [label="param CSharpCompilationOptions(bool deterministic = false) 779907"];
1029 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 779908"];
1030 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 779909"];
1031 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 779910"];
1032 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 779911"];
1033 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 779912"];
1034 [label="param CSharpCompilationOptions(bool publicSign = false) 779913"];
1035 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 779914"];
1036 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 779915"];
1037 [label="param CSharpCompilationOptions(this) 779916"];
1038 [label="outputKind 779917"];
1039 [label="reportSuppressedDiagnostics 779918"];
1040 [label="moduleName 779919"];
1041 [label="mainTypeName 779920"];
1042 [label="scriptClassName 779921"];
1043 [label="usings 779922"];
1044 [label="optimizationLevel 779923"];
1045 [label="checkOverflow 779924"];
1046 [label="allowUnsafe 779925"];
1047 [label="cryptoKeyContainer 779926"];
1048 [label="cryptoKeyFile 779927"];
1049 [label="cryptoPublicKey 779928"];
1050 [label="delaySign 779929"];
1051 [label="platform 779930"];
1052 [label="generalDiagnosticOption 779931"];
1053 [label="warningLevel 779932"];
1054 [label="specificDiagnosticOptions 779933"];
1055 [label="concurrentBuild 779934"];
1056 [label="deterministic 779935"];
1057 [label="default 779936"];
1058 [label="false 779937"];
1059 [label="xmlReferenceResolver 779938"];
1060 [label="sourceReferenceResolver 779939"];
1061 [label="null 779940"];
1062 [label="metadataReferenceResolver 779941"];
1063 [label="assemblyIdentityComparer 779942"];
1064 [label="strongNameProvider 779943"];
1065 [label="metadataImportOptions 779944"];
1066 [label="false 779945"];
1067 [label="publicSign 779946"];
1068 [label="BinderFlags.None 779947"];
1069 [label="nullableContextOptions 779948"];
1070 [label="param CSharpCompilationOptions(OutputKind outputKind) 779949"];
1071 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 779950"];
1072 [label="param CSharpCompilationOptions(string? moduleName) 779951"];
1073 [label="param CSharpCompilationOptions(string? mainTypeName) 779952"];
1074 [label="param CSharpCompilationOptions(string? scriptClassName) 779953"];
1075 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 779954"];
1076 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 779955"];
1077 [label="param CSharpCompilationOptions(bool checkOverflow) 779956"];
1078 [label="param CSharpCompilationOptions(bool allowUnsafe) 779957"];
1079 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 779958"];
1080 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 779959"];
1081 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 779960"];
1082 [label="param CSharpCompilationOptions(bool? delaySign) 779961"];
1083 [label="param CSharpCompilationOptions(Platform platform) 779962"];
1084 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 779963"];
1085 [label="param CSharpCompilationOptions(int warningLevel) 779964"];
1086 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 779965"];
1087 [label="param CSharpCompilationOptions(bool concurrentBuild) 779966"];
1088 [label="param CSharpCompilationOptions(bool deterministic) 779967"];
1089 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 779968"];
1090 [label="param CSharpCompilationOptions(bool debugPlusMode) 779969"];
1091 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 779970"];
1092 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 779971"];
1093 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 779972"];
1094 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 779973"];
1095 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 779974"];
1096 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 779975"];
1097 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 779976"];
1098 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 779977"];
1099 [label="param CSharpCompilationOptions(bool publicSign) 779978"];
1100 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 779979"];
1101 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 779980"];
1102 [label="param CSharpCompilationOptions(this) 779981"];
1103 [label="outputKind 779982"];
1104 [label="reportSuppressedDiagnostics 779983"];
1105 [label="moduleName 779984"];
1106 [label="mainTypeName 779985"];
1107 [label="scriptClassName 779986"];
1108 [label="cryptoKeyContainer 779987"];
1109 [label="cryptoKeyFile 779988"];
1110 [label="cryptoPublicKey 779989"];
1111 [label="delaySign 779990"];
1112 [label="publicSign 779991"];
1113 [label="optimizationLevel 779992"];
1114 [label="checkOverflow 779993"];
1115 [label="platform 779994"];
1116 [label="generalDiagnosticOption 779995"];
1117 [label="warningLevel 779996"];
1118 [label="specificDiagnosticOptions 779997"];
1119 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 779998"];
1120 [label="concurrentBuild 779999"];
1121 [label="deterministic 780000"];
1122 [label="currentLocalTime 780001"];
1123 [label="debugPlusMode 780002"];
1124 [label="xmlReferenceResolver 780003"];
1125 [label="sourceReferenceResolver 780004"];
1126 [label="syntaxTreeOptionsProvider 780005"];
1127 [label="metadataReferenceResolver 780006"];
1128 [label="assemblyIdentityComparer 780007"];
1129 [label="strongNameProvider 780008"];
1130 [label="metadataImportOptions 780009"];
1131 [label="referencesSupersedeLowerVersions 780010"];
1132 [label="param CSharpCompilationOptions(this) 780011"];
1133 [label="public bool AllowUnsafe { get; private set; } 780012"];
1134 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780013"];
1135 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780014"];
1136 [label="this.Usings = usings.AsImmutableOrEmpty(); 780015"];
1137 [label="this.Usings 780016"];
1138 [label="this.AllowUnsafe 780017"];
1139 [label="this.TopLevelBinderFlags 780018"];
1140 [label="this.NullableContextOptions 780019"];
1141 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 780020"];
1142 [label="OutputKind.ConsoleApplication 780021"];
1143 [label="OptimizationLevel.Release 780022"];
1144 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 780023"];
1145 [label="param CreateTestOptions(OutputKind outputKind) 780024"];
1146 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 780025"];
1147 [label="param CreateTestOptions(bool allowUnsafe = false) 780026"];
1148 [label="outputKind 780027"];
1149 [label="optimizationLevel: optimizationLevel 780028"];
1150 [label="warningLevel: Diagnostic.MaxWarningLevel 780029"];
1151 [label="allowUnsafe: allowUnsafe 780030"];
1152 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 780031"];
1153 [label="param CSharpCompilationOptions(OutputKind outputKind) 780032"];
1154 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 780033"];
1155 [label="param CSharpCompilationOptions(string? moduleName = null) 780034"];
1156 [label="param CSharpCompilationOptions(string? mainTypeName = null) 780035"];
1157 [label="param CSharpCompilationOptions(string? scriptClassName = null) 780036"];
1158 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 780037"];
1159 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 780038"];
1160 [label="param CSharpCompilationOptions(bool checkOverflow = false) 780039"];
1161 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 780040"];
1162 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 780041"];
1163 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 780042"];
1164 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 780043"];
1165 [label="param CSharpCompilationOptions(bool? delaySign = null) 780044"];
1166 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 780045"];
1167 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 780046"];
1168 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 780047"];
1169 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 780048"];
1170 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 780049"];
1171 [label="param CSharpCompilationOptions(bool deterministic = false) 780050"];
1172 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 780051"];
1173 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 780052"];
1174 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 780053"];
1175 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 780054"];
1176 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 780055"];
1177 [label="param CSharpCompilationOptions(bool publicSign = false) 780056"];
1178 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 780057"];
1179 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 780058"];
1180 [label="param CSharpCompilationOptions(this) 780059"];
1181 [label="outputKind 780060"];
1182 [label="reportSuppressedDiagnostics 780061"];
1183 [label="moduleName 780062"];
1184 [label="mainTypeName 780063"];
1185 [label="scriptClassName 780064"];
1186 [label="usings 780065"];
1187 [label="optimizationLevel 780066"];
1188 [label="checkOverflow 780067"];
1189 [label="allowUnsafe 780068"];
1190 [label="cryptoKeyContainer 780069"];
1191 [label="cryptoKeyFile 780070"];
1192 [label="cryptoPublicKey 780071"];
1193 [label="delaySign 780072"];
1194 [label="platform 780073"];
1195 [label="generalDiagnosticOption 780074"];
1196 [label="warningLevel 780075"];
1197 [label="specificDiagnosticOptions 780076"];
1198 [label="concurrentBuild 780077"];
1199 [label="deterministic 780078"];
1200 [label="default 780079"];
1201 [label="false 780080"];
1202 [label="xmlReferenceResolver 780081"];
1203 [label="sourceReferenceResolver 780082"];
1204 [label="null 780083"];
1205 [label="metadataReferenceResolver 780084"];
1206 [label="assemblyIdentityComparer 780085"];
1207 [label="strongNameProvider 780086"];
1208 [label="metadataImportOptions 780087"];
1209 [label="false 780088"];
1210 [label="publicSign 780089"];
1211 [label="BinderFlags.None 780090"];
1212 [label="nullableContextOptions 780091"];
1213 [label="param CSharpCompilationOptions(OutputKind outputKind) 780092"];
1214 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780093"];
1215 [label="param CSharpCompilationOptions(string? moduleName) 780094"];
1216 [label="param CSharpCompilationOptions(string? mainTypeName) 780095"];
1217 [label="param CSharpCompilationOptions(string? scriptClassName) 780096"];
1218 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780097"];
1219 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780098"];
1220 [label="param CSharpCompilationOptions(bool checkOverflow) 780099"];
1221 [label="param CSharpCompilationOptions(bool allowUnsafe) 780100"];
1222 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780101"];
1223 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780102"];
1224 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780103"];
1225 [label="param CSharpCompilationOptions(bool? delaySign) 780104"];
1226 [label="param CSharpCompilationOptions(Platform platform) 780105"];
1227 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780106"];
1228 [label="param CSharpCompilationOptions(int warningLevel) 780107"];
1229 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780108"];
1230 [label="param CSharpCompilationOptions(bool concurrentBuild) 780109"];
1231 [label="param CSharpCompilationOptions(bool deterministic) 780110"];
1232 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780111"];
1233 [label="param CSharpCompilationOptions(bool debugPlusMode) 780112"];
1234 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780113"];
1235 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780114"];
1236 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780115"];
1237 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780116"];
1238 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780117"];
1239 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780118"];
1240 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780119"];
1241 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780120"];
1242 [label="param CSharpCompilationOptions(bool publicSign) 780121"];
1243 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780122"];
1244 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780123"];
1245 [label="param CSharpCompilationOptions(this) 780124"];
1246 [label="outputKind 780125"];
1247 [label="reportSuppressedDiagnostics 780126"];
1248 [label="moduleName 780127"];
1249 [label="mainTypeName 780128"];
1250 [label="scriptClassName 780129"];
1251 [label="cryptoKeyContainer 780130"];
1252 [label="cryptoKeyFile 780131"];
1253 [label="cryptoPublicKey 780132"];
1254 [label="delaySign 780133"];
1255 [label="publicSign 780134"];
1256 [label="optimizationLevel 780135"];
1257 [label="checkOverflow 780136"];
1258 [label="platform 780137"];
1259 [label="generalDiagnosticOption 780138"];
1260 [label="warningLevel 780139"];
1261 [label="specificDiagnosticOptions 780140"];
1262 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 780141"];
1263 [label="concurrentBuild 780142"];
1264 [label="deterministic 780143"];
1265 [label="currentLocalTime 780144"];
1266 [label="debugPlusMode 780145"];
1267 [label="xmlReferenceResolver 780146"];
1268 [label="sourceReferenceResolver 780147"];
1269 [label="syntaxTreeOptionsProvider 780148"];
1270 [label="metadataReferenceResolver 780149"];
1271 [label="assemblyIdentityComparer 780150"];
1272 [label="strongNameProvider 780151"];
1273 [label="metadataImportOptions 780152"];
1274 [label="referencesSupersedeLowerVersions 780153"];
1275 [label="param CSharpCompilationOptions(this) 780154"];
1276 [label="public bool AllowUnsafe { get; private set; } 780155"];
1277 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780156"];
1278 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780157"];
1279 [label="this.Usings = usings.AsImmutableOrEmpty(); 780158"];
1280 [label="this.Usings 780159"];
1281 [label="this.AllowUnsafe 780160"];
1282 [label="this.TopLevelBinderFlags 780161"];
1283 [label="this.NullableContextOptions 780162"];
1284 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 780163"];
1285 [label="true 780164"];
1286 [label="ReleaseDll.WithDebugPlusMode(true) 780165"];
1287 [label="param WithDebugPlusMode(bool debugPlusMode) 780166"];
1288 [label="param WithDebugPlusMode(this) 780167"];
1289 [label="if (debugPlusMode == this.DebugPlusMode)\n            {\n                return this;\n            } 780168"];
1290 [label="return new CSharpCompilationOptions(this) { DebugPlusMode = debugPlusMode }; 780169"];
1291 [label="return new CSharpCompilationOptions(this) { DebugPlusMode = debugPlusMode }; 780170"];
1292 [label="new CSharpCompilationOptions(this) { DebugPlusMode = debugPlusMode } 780171"];
1293 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 780172"];
1294 [label="param CSharpCompilationOptions(this) 780173"];
1295 [label="other.OutputKind 780174"];
1296 [label="other.ModuleName 780175"];
1297 [label="other.MainTypeName 780176"];
1298 [label="other.ScriptClassName 780177"];
1299 [label="other.Usings 780178"];
1300 [label="other.OptimizationLevel 780179"];
1301 [label="other.CheckOverflow 780180"];
1302 [label="other.AllowUnsafe 780181"];
1303 [label="other.CryptoKeyContainer 780182"];
1304 [label="other.CryptoKeyFile 780183"];
1305 [label="other.CryptoPublicKey 780184"];
1306 [label="other.DelaySign 780185"];
1307 [label="other.Platform 780186"];
1308 [label="other.GeneralDiagnosticOption 780187"];
1309 [label="other.WarningLevel 780188"];
1310 [label="other.SpecificDiagnosticOptions 780189"];
1311 [label="other.ConcurrentBuild 780190"];
1312 [label="other.Deterministic 780191"];
1313 [label="other.CurrentLocalTime 780192"];
1314 [label="other.DebugPlusMode 780193"];
1315 [label="other.XmlReferenceResolver 780194"];
1316 [label="other.SourceReferenceResolver 780195"];
1317 [label="other.SyntaxTreeOptionsProvider 780196"];
1318 [label="other.MetadataReferenceResolver 780197"];
1319 [label="other.AssemblyIdentityComparer 780198"];
1320 [label="other.StrongNameProvider 780199"];
1321 [label="other.MetadataImportOptions 780200"];
1322 [label="other.ReferencesSupersedeLowerVersions 780201"];
1323 [label="other.ReportSuppressedDiagnostics 780202"];
1324 [label="other.PublicSign 780203"];
1325 [label="other.TopLevelBinderFlags 780204"];
1326 [label="other.NullableContextOptions 780205"];
1327 [label="param CSharpCompilationOptions(this) 780206"];
1328 [label="param CSharpCompilationOptions(OutputKind outputKind) 780207"];
1329 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780208"];
1330 [label="param CSharpCompilationOptions(string? moduleName) 780209"];
1331 [label="param CSharpCompilationOptions(string? mainTypeName) 780210"];
1332 [label="param CSharpCompilationOptions(string? scriptClassName) 780211"];
1333 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780212"];
1334 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780213"];
1335 [label="param CSharpCompilationOptions(bool checkOverflow) 780214"];
1336 [label="param CSharpCompilationOptions(bool allowUnsafe) 780215"];
1337 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780216"];
1338 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780217"];
1339 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780218"];
1340 [label="param CSharpCompilationOptions(bool? delaySign) 780219"];
1341 [label="param CSharpCompilationOptions(Platform platform) 780220"];
1342 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780221"];
1343 [label="param CSharpCompilationOptions(int warningLevel) 780222"];
1344 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780223"];
1345 [label="param CSharpCompilationOptions(bool concurrentBuild) 780224"];
1346 [label="param CSharpCompilationOptions(bool deterministic) 780225"];
1347 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780226"];
1348 [label="param CSharpCompilationOptions(bool debugPlusMode) 780227"];
1349 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780228"];
1350 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780229"];
1351 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780230"];
1352 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780231"];
1353 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780232"];
1354 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780233"];
1355 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780234"];
1356 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780235"];
1357 [label="param CSharpCompilationOptions(bool publicSign) 780236"];
1358 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780237"];
1359 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780238"];
1360 [label="param CSharpCompilationOptions(this) 780239"];
1361 [label="param CSharpCompilationOptions(this) 780240"];
1362 [label="param CSharpCompilationOptions(this) 780241"];
1363 [label="public bool AllowUnsafe { get; private set; } 780242"];
1364 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780243"];
1365 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780244"];
1366 [label="this.Usings = usings.AsImmutableOrEmpty(); 780245"];
1367 [label="this.Usings 780246"];
1368 [label="this.AllowUnsafe 780247"];
1369 [label="DebugPlusMode 780248"];
1370 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 780249"];
1371 [label="true 780250"];
1372 [label="ReleaseExe.WithDebugPlusMode(true) 780251"];
1373 [label="param WithDebugPlusMode(bool debugPlusMode) 780252"];
1374 [label="param WithDebugPlusMode(this) 780253"];
1375 [label="if (debugPlusMode == this.DebugPlusMode)\n            {\n                return this;\n            } 780254"];
1376 [label="return new CSharpCompilationOptions(this) { DebugPlusMode = debugPlusMode }; 780255"];
1377 [label="return new CSharpCompilationOptions(this) { DebugPlusMode = debugPlusMode }; 780256"];
1378 [label="new CSharpCompilationOptions(this) { DebugPlusMode = debugPlusMode } 780257"];
1379 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 780258"];
1380 [label="param CSharpCompilationOptions(this) 780259"];
1381 [label="other.OutputKind 780260"];
1382 [label="other.ModuleName 780261"];
1383 [label="other.MainTypeName 780262"];
1384 [label="other.ScriptClassName 780263"];
1385 [label="other.Usings 780264"];
1386 [label="other.OptimizationLevel 780265"];
1387 [label="other.CheckOverflow 780266"];
1388 [label="other.AllowUnsafe 780267"];
1389 [label="other.CryptoKeyContainer 780268"];
1390 [label="other.CryptoKeyFile 780269"];
1391 [label="other.CryptoPublicKey 780270"];
1392 [label="other.DelaySign 780271"];
1393 [label="other.Platform 780272"];
1394 [label="other.GeneralDiagnosticOption 780273"];
1395 [label="other.WarningLevel 780274"];
1396 [label="other.SpecificDiagnosticOptions 780275"];
1397 [label="other.ConcurrentBuild 780276"];
1398 [label="other.Deterministic 780277"];
1399 [label="other.CurrentLocalTime 780278"];
1400 [label="other.DebugPlusMode 780279"];
1401 [label="other.XmlReferenceResolver 780280"];
1402 [label="other.SourceReferenceResolver 780281"];
1403 [label="other.SyntaxTreeOptionsProvider 780282"];
1404 [label="other.MetadataReferenceResolver 780283"];
1405 [label="other.AssemblyIdentityComparer 780284"];
1406 [label="other.StrongNameProvider 780285"];
1407 [label="other.MetadataImportOptions 780286"];
1408 [label="other.ReferencesSupersedeLowerVersions 780287"];
1409 [label="other.ReportSuppressedDiagnostics 780288"];
1410 [label="other.PublicSign 780289"];
1411 [label="other.TopLevelBinderFlags 780290"];
1412 [label="other.NullableContextOptions 780291"];
1413 [label="param CSharpCompilationOptions(this) 780292"];
1414 [label="param CSharpCompilationOptions(OutputKind outputKind) 780293"];
1415 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780294"];
1416 [label="param CSharpCompilationOptions(string? moduleName) 780295"];
1417 [label="param CSharpCompilationOptions(string? mainTypeName) 780296"];
1418 [label="param CSharpCompilationOptions(string? scriptClassName) 780297"];
1419 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780298"];
1420 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780299"];
1421 [label="param CSharpCompilationOptions(bool checkOverflow) 780300"];
1422 [label="param CSharpCompilationOptions(bool allowUnsafe) 780301"];
1423 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780302"];
1424 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780303"];
1425 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780304"];
1426 [label="param CSharpCompilationOptions(bool? delaySign) 780305"];
1427 [label="param CSharpCompilationOptions(Platform platform) 780306"];
1428 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780307"];
1429 [label="param CSharpCompilationOptions(int warningLevel) 780308"];
1430 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780309"];
1431 [label="param CSharpCompilationOptions(bool concurrentBuild) 780310"];
1432 [label="param CSharpCompilationOptions(bool deterministic) 780311"];
1433 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780312"];
1434 [label="param CSharpCompilationOptions(bool debugPlusMode) 780313"];
1435 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780314"];
1436 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780315"];
1437 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780316"];
1438 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780317"];
1439 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780318"];
1440 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780319"];
1441 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780320"];
1442 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780321"];
1443 [label="param CSharpCompilationOptions(bool publicSign) 780322"];
1444 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780323"];
1445 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780324"];
1446 [label="param CSharpCompilationOptions(this) 780325"];
1447 [label="param CSharpCompilationOptions(this) 780326"];
1448 [label="param CSharpCompilationOptions(this) 780327"];
1449 [label="public bool AllowUnsafe { get; private set; } 780328"];
1450 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780329"];
1451 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780330"];
1452 [label="this.Usings = usings.AsImmutableOrEmpty(); 780331"];
1453 [label="this.Usings 780332"];
1454 [label="this.AllowUnsafe 780333"];
1455 [label="DebugPlusMode 780334"];
1456 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 780335"];
1457 [label="OutputKind.DynamicallyLinkedLibrary 780336"];
1458 [label="OptimizationLevel.Debug 780337"];
1459 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 780338"];
1460 [label="param CreateTestOptions(OutputKind outputKind) 780339"];
1461 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 780340"];
1462 [label="param CreateTestOptions(bool allowUnsafe = false) 780341"];
1463 [label="outputKind 780342"];
1464 [label="optimizationLevel: optimizationLevel 780343"];
1465 [label="warningLevel: Diagnostic.MaxWarningLevel 780344"];
1466 [label="allowUnsafe: allowUnsafe 780345"];
1467 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 780346"];
1468 [label="param CSharpCompilationOptions(OutputKind outputKind) 780347"];
1469 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 780348"];
1470 [label="param CSharpCompilationOptions(string? moduleName = null) 780349"];
1471 [label="param CSharpCompilationOptions(string? mainTypeName = null) 780350"];
1472 [label="param CSharpCompilationOptions(string? scriptClassName = null) 780351"];
1473 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 780352"];
1474 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 780353"];
1475 [label="param CSharpCompilationOptions(bool checkOverflow = false) 780354"];
1476 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 780355"];
1477 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 780356"];
1478 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 780357"];
1479 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 780358"];
1480 [label="param CSharpCompilationOptions(bool? delaySign = null) 780359"];
1481 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 780360"];
1482 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 780361"];
1483 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 780362"];
1484 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 780363"];
1485 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 780364"];
1486 [label="param CSharpCompilationOptions(bool deterministic = false) 780365"];
1487 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 780366"];
1488 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 780367"];
1489 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 780368"];
1490 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 780369"];
1491 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 780370"];
1492 [label="param CSharpCompilationOptions(bool publicSign = false) 780371"];
1493 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 780372"];
1494 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 780373"];
1495 [label="param CSharpCompilationOptions(this) 780374"];
1496 [label="outputKind 780375"];
1497 [label="reportSuppressedDiagnostics 780376"];
1498 [label="moduleName 780377"];
1499 [label="mainTypeName 780378"];
1500 [label="scriptClassName 780379"];
1501 [label="usings 780380"];
1502 [label="optimizationLevel 780381"];
1503 [label="checkOverflow 780382"];
1504 [label="allowUnsafe 780383"];
1505 [label="cryptoKeyContainer 780384"];
1506 [label="cryptoKeyFile 780385"];
1507 [label="cryptoPublicKey 780386"];
1508 [label="delaySign 780387"];
1509 [label="platform 780388"];
1510 [label="generalDiagnosticOption 780389"];
1511 [label="warningLevel 780390"];
1512 [label="specificDiagnosticOptions 780391"];
1513 [label="concurrentBuild 780392"];
1514 [label="deterministic 780393"];
1515 [label="default 780394"];
1516 [label="false 780395"];
1517 [label="xmlReferenceResolver 780396"];
1518 [label="sourceReferenceResolver 780397"];
1519 [label="null 780398"];
1520 [label="metadataReferenceResolver 780399"];
1521 [label="assemblyIdentityComparer 780400"];
1522 [label="strongNameProvider 780401"];
1523 [label="metadataImportOptions 780402"];
1524 [label="false 780403"];
1525 [label="publicSign 780404"];
1526 [label="BinderFlags.None 780405"];
1527 [label="nullableContextOptions 780406"];
1528 [label="param CSharpCompilationOptions(OutputKind outputKind) 780407"];
1529 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780408"];
1530 [label="param CSharpCompilationOptions(string? moduleName) 780409"];
1531 [label="param CSharpCompilationOptions(string? mainTypeName) 780410"];
1532 [label="param CSharpCompilationOptions(string? scriptClassName) 780411"];
1533 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780412"];
1534 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780413"];
1535 [label="param CSharpCompilationOptions(bool checkOverflow) 780414"];
1536 [label="param CSharpCompilationOptions(bool allowUnsafe) 780415"];
1537 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780416"];
1538 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780417"];
1539 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780418"];
1540 [label="param CSharpCompilationOptions(bool? delaySign) 780419"];
1541 [label="param CSharpCompilationOptions(Platform platform) 780420"];
1542 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780421"];
1543 [label="param CSharpCompilationOptions(int warningLevel) 780422"];
1544 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780423"];
1545 [label="param CSharpCompilationOptions(bool concurrentBuild) 780424"];
1546 [label="param CSharpCompilationOptions(bool deterministic) 780425"];
1547 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780426"];
1548 [label="param CSharpCompilationOptions(bool debugPlusMode) 780427"];
1549 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780428"];
1550 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780429"];
1551 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780430"];
1552 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780431"];
1553 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780432"];
1554 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780433"];
1555 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780434"];
1556 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780435"];
1557 [label="param CSharpCompilationOptions(bool publicSign) 780436"];
1558 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780437"];
1559 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780438"];
1560 [label="param CSharpCompilationOptions(this) 780439"];
1561 [label="outputKind 780440"];
1562 [label="reportSuppressedDiagnostics 780441"];
1563 [label="moduleName 780442"];
1564 [label="mainTypeName 780443"];
1565 [label="scriptClassName 780444"];
1566 [label="cryptoKeyContainer 780445"];
1567 [label="cryptoKeyFile 780446"];
1568 [label="cryptoPublicKey 780447"];
1569 [label="delaySign 780448"];
1570 [label="publicSign 780449"];
1571 [label="optimizationLevel 780450"];
1572 [label="checkOverflow 780451"];
1573 [label="platform 780452"];
1574 [label="generalDiagnosticOption 780453"];
1575 [label="warningLevel 780454"];
1576 [label="specificDiagnosticOptions 780455"];
1577 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 780456"];
1578 [label="concurrentBuild 780457"];
1579 [label="deterministic 780458"];
1580 [label="currentLocalTime 780459"];
1581 [label="debugPlusMode 780460"];
1582 [label="xmlReferenceResolver 780461"];
1583 [label="sourceReferenceResolver 780462"];
1584 [label="syntaxTreeOptionsProvider 780463"];
1585 [label="metadataReferenceResolver 780464"];
1586 [label="assemblyIdentityComparer 780465"];
1587 [label="strongNameProvider 780466"];
1588 [label="metadataImportOptions 780467"];
1589 [label="referencesSupersedeLowerVersions 780468"];
1590 [label="param CSharpCompilationOptions(this) 780469"];
1591 [label="public bool AllowUnsafe { get; private set; } 780470"];
1592 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780471"];
1593 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780472"];
1594 [label="this.Usings = usings.AsImmutableOrEmpty(); 780473"];
1595 [label="this.Usings 780474"];
1596 [label="this.AllowUnsafe 780475"];
1597 [label="this.TopLevelBinderFlags 780476"];
1598 [label="this.NullableContextOptions 780477"];
1599 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 780478"];
1600 [label="OutputKind.ConsoleApplication 780479"];
1601 [label="OptimizationLevel.Debug 780480"];
1602 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 780481"];
1603 [label="param CreateTestOptions(OutputKind outputKind) 780482"];
1604 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 780483"];
1605 [label="param CreateTestOptions(bool allowUnsafe = false) 780484"];
1606 [label="outputKind 780485"];
1607 [label="optimizationLevel: optimizationLevel 780486"];
1608 [label="warningLevel: Diagnostic.MaxWarningLevel 780487"];
1609 [label="allowUnsafe: allowUnsafe 780488"];
1610 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 780489"];
1611 [label="param CSharpCompilationOptions(OutputKind outputKind) 780490"];
1612 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 780491"];
1613 [label="param CSharpCompilationOptions(string? moduleName = null) 780492"];
1614 [label="param CSharpCompilationOptions(string? mainTypeName = null) 780493"];
1615 [label="param CSharpCompilationOptions(string? scriptClassName = null) 780494"];
1616 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 780495"];
1617 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 780496"];
1618 [label="param CSharpCompilationOptions(bool checkOverflow = false) 780497"];
1619 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 780498"];
1620 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 780499"];
1621 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 780500"];
1622 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 780501"];
1623 [label="param CSharpCompilationOptions(bool? delaySign = null) 780502"];
1624 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 780503"];
1625 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 780504"];
1626 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 780505"];
1627 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 780506"];
1628 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 780507"];
1629 [label="param CSharpCompilationOptions(bool deterministic = false) 780508"];
1630 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 780509"];
1631 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 780510"];
1632 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 780511"];
1633 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 780512"];
1634 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 780513"];
1635 [label="param CSharpCompilationOptions(bool publicSign = false) 780514"];
1636 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 780515"];
1637 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 780516"];
1638 [label="param CSharpCompilationOptions(this) 780517"];
1639 [label="outputKind 780518"];
1640 [label="reportSuppressedDiagnostics 780519"];
1641 [label="moduleName 780520"];
1642 [label="mainTypeName 780521"];
1643 [label="scriptClassName 780522"];
1644 [label="usings 780523"];
1645 [label="optimizationLevel 780524"];
1646 [label="checkOverflow 780525"];
1647 [label="allowUnsafe 780526"];
1648 [label="cryptoKeyContainer 780527"];
1649 [label="cryptoKeyFile 780528"];
1650 [label="cryptoPublicKey 780529"];
1651 [label="delaySign 780530"];
1652 [label="platform 780531"];
1653 [label="generalDiagnosticOption 780532"];
1654 [label="warningLevel 780533"];
1655 [label="specificDiagnosticOptions 780534"];
1656 [label="concurrentBuild 780535"];
1657 [label="deterministic 780536"];
1658 [label="default 780537"];
1659 [label="false 780538"];
1660 [label="xmlReferenceResolver 780539"];
1661 [label="sourceReferenceResolver 780540"];
1662 [label="null 780541"];
1663 [label="metadataReferenceResolver 780542"];
1664 [label="assemblyIdentityComparer 780543"];
1665 [label="strongNameProvider 780544"];
1666 [label="metadataImportOptions 780545"];
1667 [label="false 780546"];
1668 [label="publicSign 780547"];
1669 [label="BinderFlags.None 780548"];
1670 [label="nullableContextOptions 780549"];
1671 [label="param CSharpCompilationOptions(OutputKind outputKind) 780550"];
1672 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780551"];
1673 [label="param CSharpCompilationOptions(string? moduleName) 780552"];
1674 [label="param CSharpCompilationOptions(string? mainTypeName) 780553"];
1675 [label="param CSharpCompilationOptions(string? scriptClassName) 780554"];
1676 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780555"];
1677 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780556"];
1678 [label="param CSharpCompilationOptions(bool checkOverflow) 780557"];
1679 [label="param CSharpCompilationOptions(bool allowUnsafe) 780558"];
1680 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780559"];
1681 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780560"];
1682 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780561"];
1683 [label="param CSharpCompilationOptions(bool? delaySign) 780562"];
1684 [label="param CSharpCompilationOptions(Platform platform) 780563"];
1685 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780564"];
1686 [label="param CSharpCompilationOptions(int warningLevel) 780565"];
1687 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780566"];
1688 [label="param CSharpCompilationOptions(bool concurrentBuild) 780567"];
1689 [label="param CSharpCompilationOptions(bool deterministic) 780568"];
1690 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780569"];
1691 [label="param CSharpCompilationOptions(bool debugPlusMode) 780570"];
1692 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780571"];
1693 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780572"];
1694 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780573"];
1695 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780574"];
1696 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780575"];
1697 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780576"];
1698 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780577"];
1699 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780578"];
1700 [label="param CSharpCompilationOptions(bool publicSign) 780579"];
1701 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780580"];
1702 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780581"];
1703 [label="param CSharpCompilationOptions(this) 780582"];
1704 [label="outputKind 780583"];
1705 [label="reportSuppressedDiagnostics 780584"];
1706 [label="moduleName 780585"];
1707 [label="mainTypeName 780586"];
1708 [label="scriptClassName 780587"];
1709 [label="cryptoKeyContainer 780588"];
1710 [label="cryptoKeyFile 780589"];
1711 [label="cryptoPublicKey 780590"];
1712 [label="delaySign 780591"];
1713 [label="publicSign 780592"];
1714 [label="optimizationLevel 780593"];
1715 [label="checkOverflow 780594"];
1716 [label="platform 780595"];
1717 [label="generalDiagnosticOption 780596"];
1718 [label="warningLevel 780597"];
1719 [label="specificDiagnosticOptions 780598"];
1720 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 780599"];
1721 [label="concurrentBuild 780600"];
1722 [label="deterministic 780601"];
1723 [label="currentLocalTime 780602"];
1724 [label="debugPlusMode 780603"];
1725 [label="xmlReferenceResolver 780604"];
1726 [label="sourceReferenceResolver 780605"];
1727 [label="syntaxTreeOptionsProvider 780606"];
1728 [label="metadataReferenceResolver 780607"];
1729 [label="assemblyIdentityComparer 780608"];
1730 [label="strongNameProvider 780609"];
1731 [label="metadataImportOptions 780610"];
1732 [label="referencesSupersedeLowerVersions 780611"];
1733 [label="param CSharpCompilationOptions(this) 780612"];
1734 [label="public bool AllowUnsafe { get; private set; } 780613"];
1735 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780614"];
1736 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780615"];
1737 [label="this.Usings = usings.AsImmutableOrEmpty(); 780616"];
1738 [label="this.Usings 780617"];
1739 [label="this.AllowUnsafe 780618"];
1740 [label="this.TopLevelBinderFlags 780619"];
1741 [label="this.NullableContextOptions 780620"];
1742 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 780621"];
1743 [label="OutputKind.WindowsRuntimeMetadata 780622"];
1744 [label="OptimizationLevel.Release 780623"];
1745 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 780624"];
1746 [label="param CreateTestOptions(OutputKind outputKind) 780625"];
1747 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 780626"];
1748 [label="param CreateTestOptions(bool allowUnsafe = false) 780627"];
1749 [label="outputKind 780628"];
1750 [label="optimizationLevel: optimizationLevel 780629"];
1751 [label="warningLevel: Diagnostic.MaxWarningLevel 780630"];
1752 [label="allowUnsafe: allowUnsafe 780631"];
1753 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 780632"];
1754 [label="param CSharpCompilationOptions(OutputKind outputKind) 780633"];
1755 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 780634"];
1756 [label="param CSharpCompilationOptions(string? moduleName = null) 780635"];
1757 [label="param CSharpCompilationOptions(string? mainTypeName = null) 780636"];
1758 [label="param CSharpCompilationOptions(string? scriptClassName = null) 780637"];
1759 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 780638"];
1760 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 780639"];
1761 [label="param CSharpCompilationOptions(bool checkOverflow = false) 780640"];
1762 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 780641"];
1763 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 780642"];
1764 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 780643"];
1765 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 780644"];
1766 [label="param CSharpCompilationOptions(bool? delaySign = null) 780645"];
1767 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 780646"];
1768 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 780647"];
1769 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 780648"];
1770 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 780649"];
1771 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 780650"];
1772 [label="param CSharpCompilationOptions(bool deterministic = false) 780651"];
1773 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 780652"];
1774 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 780653"];
1775 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 780654"];
1776 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 780655"];
1777 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 780656"];
1778 [label="param CSharpCompilationOptions(bool publicSign = false) 780657"];
1779 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 780658"];
1780 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 780659"];
1781 [label="param CSharpCompilationOptions(this) 780660"];
1782 [label="outputKind 780661"];
1783 [label="reportSuppressedDiagnostics 780662"];
1784 [label="moduleName 780663"];
1785 [label="mainTypeName 780664"];
1786 [label="scriptClassName 780665"];
1787 [label="usings 780666"];
1788 [label="optimizationLevel 780667"];
1789 [label="checkOverflow 780668"];
1790 [label="allowUnsafe 780669"];
1791 [label="cryptoKeyContainer 780670"];
1792 [label="cryptoKeyFile 780671"];
1793 [label="cryptoPublicKey 780672"];
1794 [label="delaySign 780673"];
1795 [label="platform 780674"];
1796 [label="generalDiagnosticOption 780675"];
1797 [label="warningLevel 780676"];
1798 [label="specificDiagnosticOptions 780677"];
1799 [label="concurrentBuild 780678"];
1800 [label="deterministic 780679"];
1801 [label="default 780680"];
1802 [label="false 780681"];
1803 [label="xmlReferenceResolver 780682"];
1804 [label="sourceReferenceResolver 780683"];
1805 [label="null 780684"];
1806 [label="metadataReferenceResolver 780685"];
1807 [label="assemblyIdentityComparer 780686"];
1808 [label="strongNameProvider 780687"];
1809 [label="metadataImportOptions 780688"];
1810 [label="false 780689"];
1811 [label="publicSign 780690"];
1812 [label="BinderFlags.None 780691"];
1813 [label="nullableContextOptions 780692"];
1814 [label="param CSharpCompilationOptions(OutputKind outputKind) 780693"];
1815 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780694"];
1816 [label="param CSharpCompilationOptions(string? moduleName) 780695"];
1817 [label="param CSharpCompilationOptions(string? mainTypeName) 780696"];
1818 [label="param CSharpCompilationOptions(string? scriptClassName) 780697"];
1819 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780698"];
1820 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780699"];
1821 [label="param CSharpCompilationOptions(bool checkOverflow) 780700"];
1822 [label="param CSharpCompilationOptions(bool allowUnsafe) 780701"];
1823 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780702"];
1824 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780703"];
1825 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780704"];
1826 [label="param CSharpCompilationOptions(bool? delaySign) 780705"];
1827 [label="param CSharpCompilationOptions(Platform platform) 780706"];
1828 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780707"];
1829 [label="param CSharpCompilationOptions(int warningLevel) 780708"];
1830 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780709"];
1831 [label="param CSharpCompilationOptions(bool concurrentBuild) 780710"];
1832 [label="param CSharpCompilationOptions(bool deterministic) 780711"];
1833 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780712"];
1834 [label="param CSharpCompilationOptions(bool debugPlusMode) 780713"];
1835 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780714"];
1836 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780715"];
1837 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780716"];
1838 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780717"];
1839 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780718"];
1840 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780719"];
1841 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780720"];
1842 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780721"];
1843 [label="param CSharpCompilationOptions(bool publicSign) 780722"];
1844 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780723"];
1845 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780724"];
1846 [label="param CSharpCompilationOptions(this) 780725"];
1847 [label="outputKind 780726"];
1848 [label="reportSuppressedDiagnostics 780727"];
1849 [label="moduleName 780728"];
1850 [label="mainTypeName 780729"];
1851 [label="scriptClassName 780730"];
1852 [label="cryptoKeyContainer 780731"];
1853 [label="cryptoKeyFile 780732"];
1854 [label="cryptoPublicKey 780733"];
1855 [label="delaySign 780734"];
1856 [label="publicSign 780735"];
1857 [label="optimizationLevel 780736"];
1858 [label="checkOverflow 780737"];
1859 [label="platform 780738"];
1860 [label="generalDiagnosticOption 780739"];
1861 [label="warningLevel 780740"];
1862 [label="specificDiagnosticOptions 780741"];
1863 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 780742"];
1864 [label="concurrentBuild 780743"];
1865 [label="deterministic 780744"];
1866 [label="currentLocalTime 780745"];
1867 [label="debugPlusMode 780746"];
1868 [label="xmlReferenceResolver 780747"];
1869 [label="sourceReferenceResolver 780748"];
1870 [label="syntaxTreeOptionsProvider 780749"];
1871 [label="metadataReferenceResolver 780750"];
1872 [label="assemblyIdentityComparer 780751"];
1873 [label="strongNameProvider 780752"];
1874 [label="metadataImportOptions 780753"];
1875 [label="referencesSupersedeLowerVersions 780754"];
1876 [label="param CSharpCompilationOptions(this) 780755"];
1877 [label="public bool AllowUnsafe { get; private set; } 780756"];
1878 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780757"];
1879 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780758"];
1880 [label="this.Usings = usings.AsImmutableOrEmpty(); 780759"];
1881 [label="this.Usings 780760"];
1882 [label="this.AllowUnsafe 780761"];
1883 [label="this.TopLevelBinderFlags 780762"];
1884 [label="this.NullableContextOptions 780763"];
1885 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 780764"];
1886 [label="OutputKind.WindowsRuntimeMetadata 780765"];
1887 [label="OptimizationLevel.Debug 780766"];
1888 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 780767"];
1889 [label="param CreateTestOptions(OutputKind outputKind) 780768"];
1890 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 780769"];
1891 [label="param CreateTestOptions(bool allowUnsafe = false) 780770"];
1892 [label="outputKind 780771"];
1893 [label="optimizationLevel: optimizationLevel 780772"];
1894 [label="warningLevel: Diagnostic.MaxWarningLevel 780773"];
1895 [label="allowUnsafe: allowUnsafe 780774"];
1896 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 780775"];
1897 [label="param CSharpCompilationOptions(OutputKind outputKind) 780776"];
1898 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 780777"];
1899 [label="param CSharpCompilationOptions(string? moduleName = null) 780778"];
1900 [label="param CSharpCompilationOptions(string? mainTypeName = null) 780779"];
1901 [label="param CSharpCompilationOptions(string? scriptClassName = null) 780780"];
1902 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 780781"];
1903 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 780782"];
1904 [label="param CSharpCompilationOptions(bool checkOverflow = false) 780783"];
1905 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 780784"];
1906 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 780785"];
1907 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 780786"];
1908 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 780787"];
1909 [label="param CSharpCompilationOptions(bool? delaySign = null) 780788"];
1910 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 780789"];
1911 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 780790"];
1912 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 780791"];
1913 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 780792"];
1914 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 780793"];
1915 [label="param CSharpCompilationOptions(bool deterministic = false) 780794"];
1916 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 780795"];
1917 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 780796"];
1918 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 780797"];
1919 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 780798"];
1920 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 780799"];
1921 [label="param CSharpCompilationOptions(bool publicSign = false) 780800"];
1922 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 780801"];
1923 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 780802"];
1924 [label="param CSharpCompilationOptions(this) 780803"];
1925 [label="outputKind 780804"];
1926 [label="reportSuppressedDiagnostics 780805"];
1927 [label="moduleName 780806"];
1928 [label="mainTypeName 780807"];
1929 [label="scriptClassName 780808"];
1930 [label="usings 780809"];
1931 [label="optimizationLevel 780810"];
1932 [label="checkOverflow 780811"];
1933 [label="allowUnsafe 780812"];
1934 [label="cryptoKeyContainer 780813"];
1935 [label="cryptoKeyFile 780814"];
1936 [label="cryptoPublicKey 780815"];
1937 [label="delaySign 780816"];
1938 [label="platform 780817"];
1939 [label="generalDiagnosticOption 780818"];
1940 [label="warningLevel 780819"];
1941 [label="specificDiagnosticOptions 780820"];
1942 [label="concurrentBuild 780821"];
1943 [label="deterministic 780822"];
1944 [label="default 780823"];
1945 [label="false 780824"];
1946 [label="xmlReferenceResolver 780825"];
1947 [label="sourceReferenceResolver 780826"];
1948 [label="null 780827"];
1949 [label="metadataReferenceResolver 780828"];
1950 [label="assemblyIdentityComparer 780829"];
1951 [label="strongNameProvider 780830"];
1952 [label="metadataImportOptions 780831"];
1953 [label="false 780832"];
1954 [label="publicSign 780833"];
1955 [label="BinderFlags.None 780834"];
1956 [label="nullableContextOptions 780835"];
1957 [label="param CSharpCompilationOptions(OutputKind outputKind) 780836"];
1958 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780837"];
1959 [label="param CSharpCompilationOptions(string? moduleName) 780838"];
1960 [label="param CSharpCompilationOptions(string? mainTypeName) 780839"];
1961 [label="param CSharpCompilationOptions(string? scriptClassName) 780840"];
1962 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780841"];
1963 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780842"];
1964 [label="param CSharpCompilationOptions(bool checkOverflow) 780843"];
1965 [label="param CSharpCompilationOptions(bool allowUnsafe) 780844"];
1966 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780845"];
1967 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780846"];
1968 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780847"];
1969 [label="param CSharpCompilationOptions(bool? delaySign) 780848"];
1970 [label="param CSharpCompilationOptions(Platform platform) 780849"];
1971 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780850"];
1972 [label="param CSharpCompilationOptions(int warningLevel) 780851"];
1973 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780852"];
1974 [label="param CSharpCompilationOptions(bool concurrentBuild) 780853"];
1975 [label="param CSharpCompilationOptions(bool deterministic) 780854"];
1976 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780855"];
1977 [label="param CSharpCompilationOptions(bool debugPlusMode) 780856"];
1978 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 780857"];
1979 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 780858"];
1980 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 780859"];
1981 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 780860"];
1982 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 780861"];
1983 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 780862"];
1984 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 780863"];
1985 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 780864"];
1986 [label="param CSharpCompilationOptions(bool publicSign) 780865"];
1987 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 780866"];
1988 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 780867"];
1989 [label="param CSharpCompilationOptions(this) 780868"];
1990 [label="outputKind 780869"];
1991 [label="reportSuppressedDiagnostics 780870"];
1992 [label="moduleName 780871"];
1993 [label="mainTypeName 780872"];
1994 [label="scriptClassName 780873"];
1995 [label="cryptoKeyContainer 780874"];
1996 [label="cryptoKeyFile 780875"];
1997 [label="cryptoPublicKey 780876"];
1998 [label="delaySign 780877"];
1999 [label="publicSign 780878"];
2000 [label="optimizationLevel 780879"];
2001 [label="checkOverflow 780880"];
2002 [label="platform 780881"];
2003 [label="generalDiagnosticOption 780882"];
2004 [label="warningLevel 780883"];
2005 [label="specificDiagnosticOptions 780884"];
2006 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 780885"];
2007 [label="concurrentBuild 780886"];
2008 [label="deterministic 780887"];
2009 [label="currentLocalTime 780888"];
2010 [label="debugPlusMode 780889"];
2011 [label="xmlReferenceResolver 780890"];
2012 [label="sourceReferenceResolver 780891"];
2013 [label="syntaxTreeOptionsProvider 780892"];
2014 [label="metadataReferenceResolver 780893"];
2015 [label="assemblyIdentityComparer 780894"];
2016 [label="strongNameProvider 780895"];
2017 [label="metadataImportOptions 780896"];
2018 [label="referencesSupersedeLowerVersions 780897"];
2019 [label="param CSharpCompilationOptions(this) 780898"];
2020 [label="public bool AllowUnsafe { get; private set; } 780899"];
2021 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 780900"];
2022 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 780901"];
2023 [label="this.Usings = usings.AsImmutableOrEmpty(); 780902"];
2024 [label="this.Usings 780903"];
2025 [label="this.AllowUnsafe 780904"];
2026 [label="this.TopLevelBinderFlags 780905"];
2027 [label="this.NullableContextOptions 780906"];
2028 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 780907"];
2029 [label="OutputKind.NetModule 780908"];
2030 [label="OptimizationLevel.Release 780909"];
2031 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 780910"];
2032 [label="param CreateTestOptions(OutputKind outputKind) 780911"];
2033 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 780912"];
2034 [label="param CreateTestOptions(bool allowUnsafe = false) 780913"];
2035 [label="outputKind 780914"];
2036 [label="optimizationLevel: optimizationLevel 780915"];
2037 [label="warningLevel: Diagnostic.MaxWarningLevel 780916"];
2038 [label="allowUnsafe: allowUnsafe 780917"];
2039 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 780918"];
2040 [label="param CSharpCompilationOptions(OutputKind outputKind) 780919"];
2041 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 780920"];
2042 [label="param CSharpCompilationOptions(string? moduleName = null) 780921"];
2043 [label="param CSharpCompilationOptions(string? mainTypeName = null) 780922"];
2044 [label="param CSharpCompilationOptions(string? scriptClassName = null) 780923"];
2045 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 780924"];
2046 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 780925"];
2047 [label="param CSharpCompilationOptions(bool checkOverflow = false) 780926"];
2048 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 780927"];
2049 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 780928"];
2050 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 780929"];
2051 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 780930"];
2052 [label="param CSharpCompilationOptions(bool? delaySign = null) 780931"];
2053 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 780932"];
2054 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 780933"];
2055 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 780934"];
2056 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 780935"];
2057 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 780936"];
2058 [label="param CSharpCompilationOptions(bool deterministic = false) 780937"];
2059 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 780938"];
2060 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 780939"];
2061 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 780940"];
2062 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 780941"];
2063 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 780942"];
2064 [label="param CSharpCompilationOptions(bool publicSign = false) 780943"];
2065 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 780944"];
2066 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 780945"];
2067 [label="param CSharpCompilationOptions(this) 780946"];
2068 [label="outputKind 780947"];
2069 [label="reportSuppressedDiagnostics 780948"];
2070 [label="moduleName 780949"];
2071 [label="mainTypeName 780950"];
2072 [label="scriptClassName 780951"];
2073 [label="usings 780952"];
2074 [label="optimizationLevel 780953"];
2075 [label="checkOverflow 780954"];
2076 [label="allowUnsafe 780955"];
2077 [label="cryptoKeyContainer 780956"];
2078 [label="cryptoKeyFile 780957"];
2079 [label="cryptoPublicKey 780958"];
2080 [label="delaySign 780959"];
2081 [label="platform 780960"];
2082 [label="generalDiagnosticOption 780961"];
2083 [label="warningLevel 780962"];
2084 [label="specificDiagnosticOptions 780963"];
2085 [label="concurrentBuild 780964"];
2086 [label="deterministic 780965"];
2087 [label="default 780966"];
2088 [label="false 780967"];
2089 [label="xmlReferenceResolver 780968"];
2090 [label="sourceReferenceResolver 780969"];
2091 [label="null 780970"];
2092 [label="metadataReferenceResolver 780971"];
2093 [label="assemblyIdentityComparer 780972"];
2094 [label="strongNameProvider 780973"];
2095 [label="metadataImportOptions 780974"];
2096 [label="false 780975"];
2097 [label="publicSign 780976"];
2098 [label="BinderFlags.None 780977"];
2099 [label="nullableContextOptions 780978"];
2100 [label="param CSharpCompilationOptions(OutputKind outputKind) 780979"];
2101 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 780980"];
2102 [label="param CSharpCompilationOptions(string? moduleName) 780981"];
2103 [label="param CSharpCompilationOptions(string? mainTypeName) 780982"];
2104 [label="param CSharpCompilationOptions(string? scriptClassName) 780983"];
2105 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 780984"];
2106 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 780985"];
2107 [label="param CSharpCompilationOptions(bool checkOverflow) 780986"];
2108 [label="param CSharpCompilationOptions(bool allowUnsafe) 780987"];
2109 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 780988"];
2110 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 780989"];
2111 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 780990"];
2112 [label="param CSharpCompilationOptions(bool? delaySign) 780991"];
2113 [label="param CSharpCompilationOptions(Platform platform) 780992"];
2114 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 780993"];
2115 [label="param CSharpCompilationOptions(int warningLevel) 780994"];
2116 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 780995"];
2117 [label="param CSharpCompilationOptions(bool concurrentBuild) 780996"];
2118 [label="param CSharpCompilationOptions(bool deterministic) 780997"];
2119 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 780998"];
2120 [label="param CSharpCompilationOptions(bool debugPlusMode) 780999"];
2121 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 781000"];
2122 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 781001"];
2123 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 781002"];
2124 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 781003"];
2125 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 781004"];
2126 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 781005"];
2127 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 781006"];
2128 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 781007"];
2129 [label="param CSharpCompilationOptions(bool publicSign) 781008"];
2130 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 781009"];
2131 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 781010"];
2132 [label="param CSharpCompilationOptions(this) 781011"];
2133 [label="outputKind 781012"];
2134 [label="reportSuppressedDiagnostics 781013"];
2135 [label="moduleName 781014"];
2136 [label="mainTypeName 781015"];
2137 [label="scriptClassName 781016"];
2138 [label="cryptoKeyContainer 781017"];
2139 [label="cryptoKeyFile 781018"];
2140 [label="cryptoPublicKey 781019"];
2141 [label="delaySign 781020"];
2142 [label="publicSign 781021"];
2143 [label="optimizationLevel 781022"];
2144 [label="checkOverflow 781023"];
2145 [label="platform 781024"];
2146 [label="generalDiagnosticOption 781025"];
2147 [label="warningLevel 781026"];
2148 [label="specificDiagnosticOptions 781027"];
2149 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 781028"];
2150 [label="concurrentBuild 781029"];
2151 [label="deterministic 781030"];
2152 [label="currentLocalTime 781031"];
2153 [label="debugPlusMode 781032"];
2154 [label="xmlReferenceResolver 781033"];
2155 [label="sourceReferenceResolver 781034"];
2156 [label="syntaxTreeOptionsProvider 781035"];
2157 [label="metadataReferenceResolver 781036"];
2158 [label="assemblyIdentityComparer 781037"];
2159 [label="strongNameProvider 781038"];
2160 [label="metadataImportOptions 781039"];
2161 [label="referencesSupersedeLowerVersions 781040"];
2162 [label="param CSharpCompilationOptions(this) 781041"];
2163 [label="public bool AllowUnsafe { get; private set; } 781042"];
2164 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781043"];
2165 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781044"];
2166 [label="this.Usings = usings.AsImmutableOrEmpty(); 781045"];
2167 [label="this.Usings 781046"];
2168 [label="this.AllowUnsafe 781047"];
2169 [label="this.TopLevelBinderFlags 781048"];
2170 [label="this.NullableContextOptions 781049"];
2171 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 781050"];
2172 [label="OutputKind.NetModule 781051"];
2173 [label="OptimizationLevel.Debug 781052"];
2174 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 781053"];
2175 [label="param CreateTestOptions(OutputKind outputKind) 781054"];
2176 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 781055"];
2177 [label="param CreateTestOptions(bool allowUnsafe = false) 781056"];
2178 [label="outputKind 781057"];
2179 [label="optimizationLevel: optimizationLevel 781058"];
2180 [label="warningLevel: Diagnostic.MaxWarningLevel 781059"];
2181 [label="allowUnsafe: allowUnsafe 781060"];
2182 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 781061"];
2183 [label="param CSharpCompilationOptions(OutputKind outputKind) 781062"];
2184 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 781063"];
2185 [label="param CSharpCompilationOptions(string? moduleName = null) 781064"];
2186 [label="param CSharpCompilationOptions(string? mainTypeName = null) 781065"];
2187 [label="param CSharpCompilationOptions(string? scriptClassName = null) 781066"];
2188 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 781067"];
2189 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 781068"];
2190 [label="param CSharpCompilationOptions(bool checkOverflow = false) 781069"];
2191 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 781070"];
2192 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 781071"];
2193 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 781072"];
2194 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 781073"];
2195 [label="param CSharpCompilationOptions(bool? delaySign = null) 781074"];
2196 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 781075"];
2197 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 781076"];
2198 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 781077"];
2199 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 781078"];
2200 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 781079"];
2201 [label="param CSharpCompilationOptions(bool deterministic = false) 781080"];
2202 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 781081"];
2203 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 781082"];
2204 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 781083"];
2205 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 781084"];
2206 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 781085"];
2207 [label="param CSharpCompilationOptions(bool publicSign = false) 781086"];
2208 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 781087"];
2209 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 781088"];
2210 [label="param CSharpCompilationOptions(this) 781089"];
2211 [label="outputKind 781090"];
2212 [label="reportSuppressedDiagnostics 781091"];
2213 [label="moduleName 781092"];
2214 [label="mainTypeName 781093"];
2215 [label="scriptClassName 781094"];
2216 [label="usings 781095"];
2217 [label="optimizationLevel 781096"];
2218 [label="checkOverflow 781097"];
2219 [label="allowUnsafe 781098"];
2220 [label="cryptoKeyContainer 781099"];
2221 [label="cryptoKeyFile 781100"];
2222 [label="cryptoPublicKey 781101"];
2223 [label="delaySign 781102"];
2224 [label="platform 781103"];
2225 [label="generalDiagnosticOption 781104"];
2226 [label="warningLevel 781105"];
2227 [label="specificDiagnosticOptions 781106"];
2228 [label="concurrentBuild 781107"];
2229 [label="deterministic 781108"];
2230 [label="default 781109"];
2231 [label="false 781110"];
2232 [label="xmlReferenceResolver 781111"];
2233 [label="sourceReferenceResolver 781112"];
2234 [label="null 781113"];
2235 [label="metadataReferenceResolver 781114"];
2236 [label="assemblyIdentityComparer 781115"];
2237 [label="strongNameProvider 781116"];
2238 [label="metadataImportOptions 781117"];
2239 [label="false 781118"];
2240 [label="publicSign 781119"];
2241 [label="BinderFlags.None 781120"];
2242 [label="nullableContextOptions 781121"];
2243 [label="param CSharpCompilationOptions(OutputKind outputKind) 781122"];
2244 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 781123"];
2245 [label="param CSharpCompilationOptions(string? moduleName) 781124"];
2246 [label="param CSharpCompilationOptions(string? mainTypeName) 781125"];
2247 [label="param CSharpCompilationOptions(string? scriptClassName) 781126"];
2248 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 781127"];
2249 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 781128"];
2250 [label="param CSharpCompilationOptions(bool checkOverflow) 781129"];
2251 [label="param CSharpCompilationOptions(bool allowUnsafe) 781130"];
2252 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 781131"];
2253 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 781132"];
2254 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 781133"];
2255 [label="param CSharpCompilationOptions(bool? delaySign) 781134"];
2256 [label="param CSharpCompilationOptions(Platform platform) 781135"];
2257 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 781136"];
2258 [label="param CSharpCompilationOptions(int warningLevel) 781137"];
2259 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 781138"];
2260 [label="param CSharpCompilationOptions(bool concurrentBuild) 781139"];
2261 [label="param CSharpCompilationOptions(bool deterministic) 781140"];
2262 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 781141"];
2263 [label="param CSharpCompilationOptions(bool debugPlusMode) 781142"];
2264 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 781143"];
2265 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 781144"];
2266 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 781145"];
2267 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 781146"];
2268 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 781147"];
2269 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 781148"];
2270 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 781149"];
2271 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 781150"];
2272 [label="param CSharpCompilationOptions(bool publicSign) 781151"];
2273 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 781152"];
2274 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 781153"];
2275 [label="param CSharpCompilationOptions(this) 781154"];
2276 [label="outputKind 781155"];
2277 [label="reportSuppressedDiagnostics 781156"];
2278 [label="moduleName 781157"];
2279 [label="mainTypeName 781158"];
2280 [label="scriptClassName 781159"];
2281 [label="cryptoKeyContainer 781160"];
2282 [label="cryptoKeyFile 781161"];
2283 [label="cryptoPublicKey 781162"];
2284 [label="delaySign 781163"];
2285 [label="publicSign 781164"];
2286 [label="optimizationLevel 781165"];
2287 [label="checkOverflow 781166"];
2288 [label="platform 781167"];
2289 [label="generalDiagnosticOption 781168"];
2290 [label="warningLevel 781169"];
2291 [label="specificDiagnosticOptions 781170"];
2292 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 781171"];
2293 [label="concurrentBuild 781172"];
2294 [label="deterministic 781173"];
2295 [label="currentLocalTime 781174"];
2296 [label="debugPlusMode 781175"];
2297 [label="xmlReferenceResolver 781176"];
2298 [label="sourceReferenceResolver 781177"];
2299 [label="syntaxTreeOptionsProvider 781178"];
2300 [label="metadataReferenceResolver 781179"];
2301 [label="assemblyIdentityComparer 781180"];
2302 [label="strongNameProvider 781181"];
2303 [label="metadataImportOptions 781182"];
2304 [label="referencesSupersedeLowerVersions 781183"];
2305 [label="param CSharpCompilationOptions(this) 781184"];
2306 [label="public bool AllowUnsafe { get; private set; } 781185"];
2307 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781186"];
2308 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781187"];
2309 [label="this.Usings = usings.AsImmutableOrEmpty(); 781188"];
2310 [label="this.Usings 781189"];
2311 [label="this.AllowUnsafe 781190"];
2312 [label="this.TopLevelBinderFlags 781191"];
2313 [label="this.NullableContextOptions 781192"];
2314 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 781193"];
2315 [label="true 781194"];
2316 [label="ReleaseDll.WithAllowUnsafe(true) 781195"];
2317 [label="param WithAllowUnsafe(bool enabled) 781196"];
2318 [label="param WithAllowUnsafe(this) 781197"];
2319 [label="if (enabled == this.AllowUnsafe)\n            {\n                return this;\n            } 781198"];
2320 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781199"];
2321 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781200"];
2322 [label="new CSharpCompilationOptions(this) { AllowUnsafe = enabled } 781201"];
2323 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781202"];
2324 [label="param CSharpCompilationOptions(this) 781203"];
2325 [label="other.OutputKind 781204"];
2326 [label="other.ModuleName 781205"];
2327 [label="other.MainTypeName 781206"];
2328 [label="other.ScriptClassName 781207"];
2329 [label="other.Usings 781208"];
2330 [label="other.OptimizationLevel 781209"];
2331 [label="other.CheckOverflow 781210"];
2332 [label="other.AllowUnsafe 781211"];
2333 [label="other.CryptoKeyContainer 781212"];
2334 [label="other.CryptoKeyFile 781213"];
2335 [label="other.CryptoPublicKey 781214"];
2336 [label="other.DelaySign 781215"];
2337 [label="other.Platform 781216"];
2338 [label="other.GeneralDiagnosticOption 781217"];
2339 [label="other.WarningLevel 781218"];
2340 [label="other.SpecificDiagnosticOptions 781219"];
2341 [label="other.ConcurrentBuild 781220"];
2342 [label="other.Deterministic 781221"];
2343 [label="other.CurrentLocalTime 781222"];
2344 [label="other.DebugPlusMode 781223"];
2345 [label="other.XmlReferenceResolver 781224"];
2346 [label="other.SourceReferenceResolver 781225"];
2347 [label="other.SyntaxTreeOptionsProvider 781226"];
2348 [label="other.MetadataReferenceResolver 781227"];
2349 [label="other.AssemblyIdentityComparer 781228"];
2350 [label="other.StrongNameProvider 781229"];
2351 [label="other.MetadataImportOptions 781230"];
2352 [label="other.ReferencesSupersedeLowerVersions 781231"];
2353 [label="other.ReportSuppressedDiagnostics 781232"];
2354 [label="other.PublicSign 781233"];
2355 [label="other.TopLevelBinderFlags 781234"];
2356 [label="other.NullableContextOptions 781235"];
2357 [label="param CSharpCompilationOptions(this) 781236"];
2358 [label="param CSharpCompilationOptions(this) 781237"];
2359 [label="param CSharpCompilationOptions(this) 781238"];
2360 [label="param CSharpCompilationOptions(this) 781239"];
2361 [label="public bool AllowUnsafe { get; private set; } 781240"];
2362 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781241"];
2363 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781242"];
2364 [label="AllowUnsafe 781243"];
2365 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 781244"];
2366 [label="true 781245"];
2367 [label="ReleaseExe.WithAllowUnsafe(true) 781246"];
2368 [label="param WithAllowUnsafe(bool enabled) 781247"];
2369 [label="param WithAllowUnsafe(this) 781248"];
2370 [label="if (enabled == this.AllowUnsafe)\n            {\n                return this;\n            } 781249"];
2371 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781250"];
2372 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781251"];
2373 [label="new CSharpCompilationOptions(this) { AllowUnsafe = enabled } 781252"];
2374 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781253"];
2375 [label="param CSharpCompilationOptions(this) 781254"];
2376 [label="other.OutputKind 781255"];
2377 [label="other.ModuleName 781256"];
2378 [label="other.MainTypeName 781257"];
2379 [label="other.ScriptClassName 781258"];
2380 [label="other.Usings 781259"];
2381 [label="other.OptimizationLevel 781260"];
2382 [label="other.CheckOverflow 781261"];
2383 [label="other.AllowUnsafe 781262"];
2384 [label="other.CryptoKeyContainer 781263"];
2385 [label="other.CryptoKeyFile 781264"];
2386 [label="other.CryptoPublicKey 781265"];
2387 [label="other.DelaySign 781266"];
2388 [label="other.Platform 781267"];
2389 [label="other.GeneralDiagnosticOption 781268"];
2390 [label="other.WarningLevel 781269"];
2391 [label="other.SpecificDiagnosticOptions 781270"];
2392 [label="other.ConcurrentBuild 781271"];
2393 [label="other.Deterministic 781272"];
2394 [label="other.CurrentLocalTime 781273"];
2395 [label="other.DebugPlusMode 781274"];
2396 [label="other.XmlReferenceResolver 781275"];
2397 [label="other.SourceReferenceResolver 781276"];
2398 [label="other.SyntaxTreeOptionsProvider 781277"];
2399 [label="other.MetadataReferenceResolver 781278"];
2400 [label="other.AssemblyIdentityComparer 781279"];
2401 [label="other.StrongNameProvider 781280"];
2402 [label="other.MetadataImportOptions 781281"];
2403 [label="other.ReferencesSupersedeLowerVersions 781282"];
2404 [label="other.ReportSuppressedDiagnostics 781283"];
2405 [label="other.PublicSign 781284"];
2406 [label="other.TopLevelBinderFlags 781285"];
2407 [label="other.NullableContextOptions 781286"];
2408 [label="param CSharpCompilationOptions(this) 781287"];
2409 [label="param CSharpCompilationOptions(this) 781288"];
2410 [label="param CSharpCompilationOptions(this) 781289"];
2411 [label="param CSharpCompilationOptions(this) 781290"];
2412 [label="public bool AllowUnsafe { get; private set; } 781291"];
2413 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781292"];
2414 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781293"];
2415 [label="AllowUnsafe 781294"];
2416 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 781295"];
2417 [label="true 781296"];
2418 [label="DebugDll.WithAllowUnsafe(true) 781297"];
2419 [label="param WithAllowUnsafe(bool enabled) 781298"];
2420 [label="param WithAllowUnsafe(this) 781299"];
2421 [label="if (enabled == this.AllowUnsafe)\n            {\n                return this;\n            } 781300"];
2422 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781301"];
2423 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781302"];
2424 [label="new CSharpCompilationOptions(this) { AllowUnsafe = enabled } 781303"];
2425 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781304"];
2426 [label="param CSharpCompilationOptions(this) 781305"];
2427 [label="other.OutputKind 781306"];
2428 [label="other.ModuleName 781307"];
2429 [label="other.MainTypeName 781308"];
2430 [label="other.ScriptClassName 781309"];
2431 [label="other.Usings 781310"];
2432 [label="other.OptimizationLevel 781311"];
2433 [label="other.CheckOverflow 781312"];
2434 [label="other.AllowUnsafe 781313"];
2435 [label="other.CryptoKeyContainer 781314"];
2436 [label="other.CryptoKeyFile 781315"];
2437 [label="other.CryptoPublicKey 781316"];
2438 [label="other.DelaySign 781317"];
2439 [label="other.Platform 781318"];
2440 [label="other.GeneralDiagnosticOption 781319"];
2441 [label="other.WarningLevel 781320"];
2442 [label="other.SpecificDiagnosticOptions 781321"];
2443 [label="other.ConcurrentBuild 781322"];
2444 [label="other.Deterministic 781323"];
2445 [label="other.CurrentLocalTime 781324"];
2446 [label="other.DebugPlusMode 781325"];
2447 [label="other.XmlReferenceResolver 781326"];
2448 [label="other.SourceReferenceResolver 781327"];
2449 [label="other.SyntaxTreeOptionsProvider 781328"];
2450 [label="other.MetadataReferenceResolver 781329"];
2451 [label="other.AssemblyIdentityComparer 781330"];
2452 [label="other.StrongNameProvider 781331"];
2453 [label="other.MetadataImportOptions 781332"];
2454 [label="other.ReferencesSupersedeLowerVersions 781333"];
2455 [label="other.ReportSuppressedDiagnostics 781334"];
2456 [label="other.PublicSign 781335"];
2457 [label="other.TopLevelBinderFlags 781336"];
2458 [label="other.NullableContextOptions 781337"];
2459 [label="param CSharpCompilationOptions(this) 781338"];
2460 [label="param CSharpCompilationOptions(OutputKind outputKind) 781339"];
2461 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 781340"];
2462 [label="param CSharpCompilationOptions(string? moduleName) 781341"];
2463 [label="param CSharpCompilationOptions(string? mainTypeName) 781342"];
2464 [label="param CSharpCompilationOptions(string? scriptClassName) 781343"];
2465 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 781344"];
2466 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 781345"];
2467 [label="param CSharpCompilationOptions(bool checkOverflow) 781346"];
2468 [label="param CSharpCompilationOptions(bool allowUnsafe) 781347"];
2469 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 781348"];
2470 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 781349"];
2471 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 781350"];
2472 [label="param CSharpCompilationOptions(bool? delaySign) 781351"];
2473 [label="param CSharpCompilationOptions(Platform platform) 781352"];
2474 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 781353"];
2475 [label="param CSharpCompilationOptions(int warningLevel) 781354"];
2476 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 781355"];
2477 [label="param CSharpCompilationOptions(bool concurrentBuild) 781356"];
2478 [label="param CSharpCompilationOptions(bool deterministic) 781357"];
2479 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 781358"];
2480 [label="param CSharpCompilationOptions(bool debugPlusMode) 781359"];
2481 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 781360"];
2482 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 781361"];
2483 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 781362"];
2484 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 781363"];
2485 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 781364"];
2486 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 781365"];
2487 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 781366"];
2488 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 781367"];
2489 [label="param CSharpCompilationOptions(bool publicSign) 781368"];
2490 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 781369"];
2491 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 781370"];
2492 [label="param CSharpCompilationOptions(this) 781371"];
2493 [label="param CSharpCompilationOptions(this) 781372"];
2494 [label="param CSharpCompilationOptions(this) 781373"];
2495 [label="public bool AllowUnsafe { get; private set; } 781374"];
2496 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781375"];
2497 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781376"];
2498 [label="this.Usings = usings.AsImmutableOrEmpty(); 781377"];
2499 [label="this.Usings 781378"];
2500 [label="this.AllowUnsafe 781379"];
2501 [label="AllowUnsafe 781380"];
2502 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 781381"];
2503 [label="true 781382"];
2504 [label="DebugExe.WithAllowUnsafe(true) 781383"];
2505 [label="param WithAllowUnsafe(bool enabled) 781384"];
2506 [label="param WithAllowUnsafe(this) 781385"];
2507 [label="if (enabled == this.AllowUnsafe)\n            {\n                return this;\n            } 781386"];
2508 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781387"];
2509 [label="return new CSharpCompilationOptions(this) { AllowUnsafe = enabled }; 781388"];
2510 [label="new CSharpCompilationOptions(this) { AllowUnsafe = enabled } 781389"];
2511 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781390"];
2512 [label="param CSharpCompilationOptions(this) 781391"];
2513 [label="other.OutputKind 781392"];
2514 [label="other.ModuleName 781393"];
2515 [label="other.MainTypeName 781394"];
2516 [label="other.ScriptClassName 781395"];
2517 [label="other.Usings 781396"];
2518 [label="other.OptimizationLevel 781397"];
2519 [label="other.CheckOverflow 781398"];
2520 [label="other.AllowUnsafe 781399"];
2521 [label="other.CryptoKeyContainer 781400"];
2522 [label="other.CryptoKeyFile 781401"];
2523 [label="other.CryptoPublicKey 781402"];
2524 [label="other.DelaySign 781403"];
2525 [label="other.Platform 781404"];
2526 [label="other.GeneralDiagnosticOption 781405"];
2527 [label="other.WarningLevel 781406"];
2528 [label="other.SpecificDiagnosticOptions 781407"];
2529 [label="other.ConcurrentBuild 781408"];
2530 [label="other.Deterministic 781409"];
2531 [label="other.CurrentLocalTime 781410"];
2532 [label="other.DebugPlusMode 781411"];
2533 [label="other.XmlReferenceResolver 781412"];
2534 [label="other.SourceReferenceResolver 781413"];
2535 [label="other.SyntaxTreeOptionsProvider 781414"];
2536 [label="other.MetadataReferenceResolver 781415"];
2537 [label="other.AssemblyIdentityComparer 781416"];
2538 [label="other.StrongNameProvider 781417"];
2539 [label="other.MetadataImportOptions 781418"];
2540 [label="other.ReferencesSupersedeLowerVersions 781419"];
2541 [label="other.ReportSuppressedDiagnostics 781420"];
2542 [label="other.PublicSign 781421"];
2543 [label="other.TopLevelBinderFlags 781422"];
2544 [label="other.NullableContextOptions 781423"];
2545 [label="param CSharpCompilationOptions(this) 781424"];
2546 [label="param CSharpCompilationOptions(OutputKind outputKind) 781425"];
2547 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 781426"];
2548 [label="param CSharpCompilationOptions(string? moduleName) 781427"];
2549 [label="param CSharpCompilationOptions(string? mainTypeName) 781428"];
2550 [label="param CSharpCompilationOptions(string? scriptClassName) 781429"];
2551 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 781430"];
2552 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 781431"];
2553 [label="param CSharpCompilationOptions(bool checkOverflow) 781432"];
2554 [label="param CSharpCompilationOptions(bool allowUnsafe) 781433"];
2555 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 781434"];
2556 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 781435"];
2557 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 781436"];
2558 [label="param CSharpCompilationOptions(bool? delaySign) 781437"];
2559 [label="param CSharpCompilationOptions(Platform platform) 781438"];
2560 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 781439"];
2561 [label="param CSharpCompilationOptions(int warningLevel) 781440"];
2562 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 781441"];
2563 [label="param CSharpCompilationOptions(bool concurrentBuild) 781442"];
2564 [label="param CSharpCompilationOptions(bool deterministic) 781443"];
2565 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 781444"];
2566 [label="param CSharpCompilationOptions(bool debugPlusMode) 781445"];
2567 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 781446"];
2568 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 781447"];
2569 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 781448"];
2570 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 781449"];
2571 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 781450"];
2572 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 781451"];
2573 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 781452"];
2574 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 781453"];
2575 [label="param CSharpCompilationOptions(bool publicSign) 781454"];
2576 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 781455"];
2577 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 781456"];
2578 [label="param CSharpCompilationOptions(this) 781457"];
2579 [label="param CSharpCompilationOptions(this) 781458"];
2580 [label="param CSharpCompilationOptions(this) 781459"];
2581 [label="public bool AllowUnsafe { get; private set; } 781460"];
2582 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781461"];
2583 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781462"];
2584 [label="this.Usings = usings.AsImmutableOrEmpty(); 781463"];
2585 [label="this.Usings 781464"];
2586 [label="this.AllowUnsafe 781465"];
2587 [label="AllowUnsafe 781466"];
2588 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 781467"];
2589 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 781468"];
2590 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781469"];
2591 [label="param WithStrongNameProvider(StrongNameProvider? provider) 781470"];
2592 [label="param WithStrongNameProvider(this) 781471"];
2593 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781472"];
2594 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781473"];
2595 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781474"];
2596 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781475"];
2597 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781476"];
2598 [label="new CSharpCompilationOptions(this) { StrongNameProvider = provider } 781477"];
2599 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781478"];
2600 [label="param CSharpCompilationOptions(this) 781479"];
2601 [label="other.OutputKind 781480"];
2602 [label="other.ModuleName 781481"];
2603 [label="other.MainTypeName 781482"];
2604 [label="other.ScriptClassName 781483"];
2605 [label="other.Usings 781484"];
2606 [label="other.OptimizationLevel 781485"];
2607 [label="other.CheckOverflow 781486"];
2608 [label="other.AllowUnsafe 781487"];
2609 [label="other.CryptoKeyContainer 781488"];
2610 [label="other.CryptoKeyFile 781489"];
2611 [label="other.CryptoPublicKey 781490"];
2612 [label="other.DelaySign 781491"];
2613 [label="other.Platform 781492"];
2614 [label="other.GeneralDiagnosticOption 781493"];
2615 [label="other.WarningLevel 781494"];
2616 [label="other.SpecificDiagnosticOptions 781495"];
2617 [label="other.ConcurrentBuild 781496"];
2618 [label="other.Deterministic 781497"];
2619 [label="other.CurrentLocalTime 781498"];
2620 [label="other.DebugPlusMode 781499"];
2621 [label="other.XmlReferenceResolver 781500"];
2622 [label="other.SourceReferenceResolver 781501"];
2623 [label="other.SyntaxTreeOptionsProvider 781502"];
2624 [label="other.MetadataReferenceResolver 781503"];
2625 [label="other.AssemblyIdentityComparer 781504"];
2626 [label="other.StrongNameProvider 781505"];
2627 [label="other.MetadataImportOptions 781506"];
2628 [label="other.ReferencesSupersedeLowerVersions 781507"];
2629 [label="other.ReportSuppressedDiagnostics 781508"];
2630 [label="other.PublicSign 781509"];
2631 [label="other.TopLevelBinderFlags 781510"];
2632 [label="other.NullableContextOptions 781511"];
2633 [label="param CSharpCompilationOptions(this) 781512"];
2634 [label="param CSharpCompilationOptions(this) 781513"];
2635 [label="param CSharpCompilationOptions(this) 781514"];
2636 [label="public bool AllowUnsafe { get; private set; } 781515"];
2637 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781516"];
2638 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781517"];
2639 [label="StrongNameProvider 781518"];
2640 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781519"];
2641 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 781520"];
2642 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781521"];
2643 [label="param WithStrongNameProvider(StrongNameProvider? provider) 781522"];
2644 [label="param WithStrongNameProvider(this) 781523"];
2645 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781524"];
2646 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781525"];
2647 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781526"];
2648 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781527"];
2649 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781528"];
2650 [label="new CSharpCompilationOptions(this) { StrongNameProvider = provider } 781529"];
2651 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781530"];
2652 [label="param CSharpCompilationOptions(this) 781531"];
2653 [label="other.OutputKind 781532"];
2654 [label="other.ModuleName 781533"];
2655 [label="other.MainTypeName 781534"];
2656 [label="other.ScriptClassName 781535"];
2657 [label="other.Usings 781536"];
2658 [label="other.OptimizationLevel 781537"];
2659 [label="other.CheckOverflow 781538"];
2660 [label="other.AllowUnsafe 781539"];
2661 [label="other.CryptoKeyContainer 781540"];
2662 [label="other.CryptoKeyFile 781541"];
2663 [label="other.CryptoPublicKey 781542"];
2664 [label="other.DelaySign 781543"];
2665 [label="other.Platform 781544"];
2666 [label="other.GeneralDiagnosticOption 781545"];
2667 [label="other.WarningLevel 781546"];
2668 [label="other.SpecificDiagnosticOptions 781547"];
2669 [label="other.ConcurrentBuild 781548"];
2670 [label="other.Deterministic 781549"];
2671 [label="other.CurrentLocalTime 781550"];
2672 [label="other.DebugPlusMode 781551"];
2673 [label="other.XmlReferenceResolver 781552"];
2674 [label="other.SourceReferenceResolver 781553"];
2675 [label="other.SyntaxTreeOptionsProvider 781554"];
2676 [label="other.MetadataReferenceResolver 781555"];
2677 [label="other.AssemblyIdentityComparer 781556"];
2678 [label="other.StrongNameProvider 781557"];
2679 [label="other.MetadataImportOptions 781558"];
2680 [label="other.ReferencesSupersedeLowerVersions 781559"];
2681 [label="other.ReportSuppressedDiagnostics 781560"];
2682 [label="other.PublicSign 781561"];
2683 [label="other.TopLevelBinderFlags 781562"];
2684 [label="other.NullableContextOptions 781563"];
2685 [label="param CSharpCompilationOptions(this) 781564"];
2686 [label="param CSharpCompilationOptions(this) 781565"];
2687 [label="param CSharpCompilationOptions(this) 781566"];
2688 [label="public bool AllowUnsafe { get; private set; } 781567"];
2689 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781568"];
2690 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781569"];
2691 [label="StrongNameProvider 781570"];
2692 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781571"];
2693 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 781572"];
2694 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781573"];
2695 [label="param WithStrongNameProvider(StrongNameProvider? provider) 781574"];
2696 [label="param WithStrongNameProvider(this) 781575"];
2697 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781576"];
2698 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781577"];
2699 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781578"];
2700 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781579"];
2701 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781580"];
2702 [label="new CSharpCompilationOptions(this) { StrongNameProvider = provider } 781581"];
2703 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781582"];
2704 [label="param CSharpCompilationOptions(this) 781583"];
2705 [label="other.OutputKind 781584"];
2706 [label="other.ModuleName 781585"];
2707 [label="other.MainTypeName 781586"];
2708 [label="other.ScriptClassName 781587"];
2709 [label="other.Usings 781588"];
2710 [label="other.OptimizationLevel 781589"];
2711 [label="other.CheckOverflow 781590"];
2712 [label="other.AllowUnsafe 781591"];
2713 [label="other.CryptoKeyContainer 781592"];
2714 [label="other.CryptoKeyFile 781593"];
2715 [label="other.CryptoPublicKey 781594"];
2716 [label="other.DelaySign 781595"];
2717 [label="other.Platform 781596"];
2718 [label="other.GeneralDiagnosticOption 781597"];
2719 [label="other.WarningLevel 781598"];
2720 [label="other.SpecificDiagnosticOptions 781599"];
2721 [label="other.ConcurrentBuild 781600"];
2722 [label="other.Deterministic 781601"];
2723 [label="other.CurrentLocalTime 781602"];
2724 [label="other.DebugPlusMode 781603"];
2725 [label="other.XmlReferenceResolver 781604"];
2726 [label="other.SourceReferenceResolver 781605"];
2727 [label="other.SyntaxTreeOptionsProvider 781606"];
2728 [label="other.MetadataReferenceResolver 781607"];
2729 [label="other.AssemblyIdentityComparer 781608"];
2730 [label="other.StrongNameProvider 781609"];
2731 [label="other.MetadataImportOptions 781610"];
2732 [label="other.ReferencesSupersedeLowerVersions 781611"];
2733 [label="other.ReportSuppressedDiagnostics 781612"];
2734 [label="other.PublicSign 781613"];
2735 [label="other.TopLevelBinderFlags 781614"];
2736 [label="other.NullableContextOptions 781615"];
2737 [label="param CSharpCompilationOptions(this) 781616"];
2738 [label="param CSharpCompilationOptions(OutputKind outputKind) 781617"];
2739 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 781618"];
2740 [label="param CSharpCompilationOptions(string? moduleName) 781619"];
2741 [label="param CSharpCompilationOptions(string? mainTypeName) 781620"];
2742 [label="param CSharpCompilationOptions(string? scriptClassName) 781621"];
2743 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 781622"];
2744 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 781623"];
2745 [label="param CSharpCompilationOptions(bool checkOverflow) 781624"];
2746 [label="param CSharpCompilationOptions(bool allowUnsafe) 781625"];
2747 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 781626"];
2748 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 781627"];
2749 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 781628"];
2750 [label="param CSharpCompilationOptions(bool? delaySign) 781629"];
2751 [label="param CSharpCompilationOptions(Platform platform) 781630"];
2752 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 781631"];
2753 [label="param CSharpCompilationOptions(int warningLevel) 781632"];
2754 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 781633"];
2755 [label="param CSharpCompilationOptions(bool concurrentBuild) 781634"];
2756 [label="param CSharpCompilationOptions(bool deterministic) 781635"];
2757 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 781636"];
2758 [label="param CSharpCompilationOptions(bool debugPlusMode) 781637"];
2759 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 781638"];
2760 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 781639"];
2761 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 781640"];
2762 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 781641"];
2763 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 781642"];
2764 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 781643"];
2765 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 781644"];
2766 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 781645"];
2767 [label="param CSharpCompilationOptions(bool publicSign) 781646"];
2768 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 781647"];
2769 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 781648"];
2770 [label="param CSharpCompilationOptions(this) 781649"];
2771 [label="param CSharpCompilationOptions(this) 781650"];
2772 [label="param CSharpCompilationOptions(this) 781651"];
2773 [label="public bool AllowUnsafe { get; private set; } 781652"];
2774 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781653"];
2775 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781654"];
2776 [label="this.Usings = usings.AsImmutableOrEmpty(); 781655"];
2777 [label="this.Usings 781656"];
2778 [label="this.AllowUnsafe 781657"];
2779 [label="StrongNameProvider 781658"];
2780 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781659"];
2781 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 781660"];
2782 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781661"];
2783 [label="param WithStrongNameProvider(StrongNameProvider? provider) 781662"];
2784 [label="param WithStrongNameProvider(this) 781663"];
2785 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781664"];
2786 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781665"];
2787 [label="if (ReferenceEquals(provider, this.StrongNameProvider))\n            {\n                return this;\n            } 781666"];
2788 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781667"];
2789 [label="return new CSharpCompilationOptions(this) { StrongNameProvider = provider }; 781668"];
2790 [label="new CSharpCompilationOptions(this) { StrongNameProvider = provider } 781669"];
2791 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 781670"];
2792 [label="param CSharpCompilationOptions(this) 781671"];
2793 [label="other.OutputKind 781672"];
2794 [label="other.ModuleName 781673"];
2795 [label="other.MainTypeName 781674"];
2796 [label="other.ScriptClassName 781675"];
2797 [label="other.Usings 781676"];
2798 [label="other.OptimizationLevel 781677"];
2799 [label="other.CheckOverflow 781678"];
2800 [label="other.AllowUnsafe 781679"];
2801 [label="other.CryptoKeyContainer 781680"];
2802 [label="other.CryptoKeyFile 781681"];
2803 [label="other.CryptoPublicKey 781682"];
2804 [label="other.DelaySign 781683"];
2805 [label="other.Platform 781684"];
2806 [label="other.GeneralDiagnosticOption 781685"];
2807 [label="other.WarningLevel 781686"];
2808 [label="other.SpecificDiagnosticOptions 781687"];
2809 [label="other.ConcurrentBuild 781688"];
2810 [label="other.Deterministic 781689"];
2811 [label="other.CurrentLocalTime 781690"];
2812 [label="other.DebugPlusMode 781691"];
2813 [label="other.XmlReferenceResolver 781692"];
2814 [label="other.SourceReferenceResolver 781693"];
2815 [label="other.SyntaxTreeOptionsProvider 781694"];
2816 [label="other.MetadataReferenceResolver 781695"];
2817 [label="other.AssemblyIdentityComparer 781696"];
2818 [label="other.StrongNameProvider 781697"];
2819 [label="other.MetadataImportOptions 781698"];
2820 [label="other.ReferencesSupersedeLowerVersions 781699"];
2821 [label="other.ReportSuppressedDiagnostics 781700"];
2822 [label="other.PublicSign 781701"];
2823 [label="other.TopLevelBinderFlags 781702"];
2824 [label="other.NullableContextOptions 781703"];
2825 [label="param CSharpCompilationOptions(this) 781704"];
2826 [label="param CSharpCompilationOptions(this) 781705"];
2827 [label="param CSharpCompilationOptions(this) 781706"];
2828 [label="param CSharpCompilationOptions(this) 781707"];
2829 [label="public bool AllowUnsafe { get; private set; } 781708"];
2830 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 781709"];
2831 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 781710"];
2832 [label="StrongNameProvider 781711"];
2833 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 781712"];
2834 [label="DebugInformationFormat.Pdb 781713"];
2835 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 781714"];
2836 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 781715"];
2837 [label="options = TestOptions.Regular; 781716"];
2838 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 781717"];
2839 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 781718"];
2840 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 781719"];
2841 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 781720"];
2842 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 781721"];
2843 [label="'\\r\\n' 781722"];
2844 [label="CrLf = '\\r\\n' 781723"];
2845 [label="CrLf 781724"];
2846 [label="EndOfLine(CrLf) 781725"];
2847 [label="param EndOfLine(string text) 781726"];
2848 [label="param EndOfLine(bool elastic = false) 781727"];
2849 [label="SyntaxTrivia trivia = null; 781728"];
2850 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 781729"];
2851 [label="elastic 781730"];
2852 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed; 781731"];
2853 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781732"];
2854 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781733"];
2855 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxTrivia), r => new SyntaxTrivia(r)); 781734"];
2856 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781735"];
2857 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781736"];
2858 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 781737"];
2859 [label="param Create(SyntaxKind kind) 781738"];
2860 [label="param Create(string text) 781739"];
2861 [label="return new SyntaxTrivia(kind, text); 781740"];
2862 [label="return new SyntaxTrivia(kind, text); 781741"];
2863 [label="return new SyntaxTrivia(kind, text); 781742"];
2864 [label="new SyntaxTrivia(kind, text) 781743"];
2865 [label="param SyntaxTrivia(SyntaxKind kind) 781744"];
2866 [label="param SyntaxTrivia(string text) 781745"];
2867 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 781746"];
2868 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 781747"];
2869 [label="param SyntaxTrivia(this) 781748"];
2870 [label="kind 781749"];
2871 [label="diagnostics 781750"];
2872 [label="annotations 781751"];
2873 [label="new ConditionalWeakTable<SyntaxNode, Dictionary<CodeAnalysis.SyntaxTrivia, SyntaxNode>>() 781752"];
2874 [label="s_structuresTable\n            = new ConditionalWeakTable<SyntaxNode, Dictionary<CodeAnalysis.SyntaxTrivia, SyntaxNode>>() 781753"];
2875 [label="text 781754"];
2876 [label="param SyntaxTrivia(this) 781755"];
2877 [label="param CSharpSyntaxNode(SyntaxKind kind) 781756"];
2878 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 781757"];
2879 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 781758"];
2880 [label="param CSharpSyntaxNode(int fullWidth) 781759"];
2881 [label="param CSharpSyntaxNode(this) 781760"];
2882 [label="kind 781761"];
2883 [label="diagnostics 781762"];
2884 [label="annotations 781763"];
2885 [label="fullWidth 781764"];
2886 [label="param CSharpSyntaxNode(this) 781765"];
2887 [label="param CSharpSyntaxNode(this) 781766"];
2888 [label="GreenStats.NoteGreen(this); 781767"];
2889 [label="GreenStats.NoteGreen(this); 781768"];
2890 [label="Text 781769"];
2891 [label="this.Text 781770"];
2892 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 781771"];
2893 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781772"];
2894 [label="if (!elastic)\n            {\n                return trivia;\n            } 781773"];
2895 [label="return trivia; 781774"];
2896 [label="CarriageReturnLineFeed = EndOfLine(CrLf) 781775"];
2897 [label="'\\n' 781776"];
2898 [label="EndOfLine('\\n') 781777"];
2899 [label="param EndOfLine(string text) 781778"];
2900 [label="param EndOfLine(bool elastic = false) 781779"];
2901 [label="SyntaxTrivia trivia = null; 781780"];
2902 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 781781"];
2903 [label="elastic 781782"];
2904 [label="trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed; 781783"];
2905 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781784"];
2906 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781785"];
2907 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781786"];
2908 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781787"];
2909 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 781788"];
2910 [label="param Create(SyntaxKind kind) 781789"];
2911 [label="param Create(string text) 781790"];
2912 [label="return new SyntaxTrivia(kind, text); 781791"];
2913 [label="return new SyntaxTrivia(kind, text); 781792"];
2914 [label="return new SyntaxTrivia(kind, text); 781793"];
2915 [label="new SyntaxTrivia(kind, text) 781794"];
2916 [label="param SyntaxTrivia(SyntaxKind kind) 781795"];
2917 [label="param SyntaxTrivia(string text) 781796"];
2918 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 781797"];
2919 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 781798"];
2920 [label="param SyntaxTrivia(this) 781799"];
2921 [label="kind 781800"];
2922 [label="diagnostics 781801"];
2923 [label="annotations 781802"];
2924 [label="text 781803"];
2925 [label="param SyntaxTrivia(this) 781804"];
2926 [label="param CSharpSyntaxNode(SyntaxKind kind) 781805"];
2927 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 781806"];
2928 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 781807"];
2929 [label="param CSharpSyntaxNode(int fullWidth) 781808"];
2930 [label="param CSharpSyntaxNode(this) 781809"];
2931 [label="kind 781810"];
2932 [label="diagnostics 781811"];
2933 [label="annotations 781812"];
2934 [label="fullWidth 781813"];
2935 [label="param CSharpSyntaxNode(this) 781814"];
2936 [label="param CSharpSyntaxNode(this) 781815"];
2937 [label="GreenStats.NoteGreen(this); 781816"];
2938 [label="GreenStats.NoteGreen(this); 781817"];
2939 [label="Text 781818"];
2940 [label="this.Text 781819"];
2941 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 781820"];
2942 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781821"];
2943 [label="if (!elastic)\n            {\n                return trivia;\n            } 781822"];
2944 [label="return trivia; 781823"];
2945 [label="LineFeed = EndOfLine('\\n') 781824"];
2946 [label="'\\r' 781825"];
2947 [label="EndOfLine('\\r') 781826"];
2948 [label="param EndOfLine(string text) 781827"];
2949 [label="param EndOfLine(bool elastic = false) 781828"];
2950 [label="SyntaxTrivia trivia = null; 781829"];
2951 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 781830"];
2952 [label="elastic 781831"];
2953 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn; 781832"];
2954 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781833"];
2955 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781834"];
2956 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781835"];
2957 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781836"];
2958 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 781837"];
2959 [label="param Create(SyntaxKind kind) 781838"];
2960 [label="param Create(string text) 781839"];
2961 [label="return new SyntaxTrivia(kind, text); 781840"];
2962 [label="return new SyntaxTrivia(kind, text); 781841"];
2963 [label="return new SyntaxTrivia(kind, text); 781842"];
2964 [label="new SyntaxTrivia(kind, text) 781843"];
2965 [label="param SyntaxTrivia(SyntaxKind kind) 781844"];
2966 [label="param SyntaxTrivia(string text) 781845"];
2967 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 781846"];
2968 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 781847"];
2969 [label="param SyntaxTrivia(this) 781848"];
2970 [label="kind 781849"];
2971 [label="diagnostics 781850"];
2972 [label="annotations 781851"];
2973 [label="text 781852"];
2974 [label="param SyntaxTrivia(this) 781853"];
2975 [label="param CSharpSyntaxNode(SyntaxKind kind) 781854"];
2976 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 781855"];
2977 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 781856"];
2978 [label="param CSharpSyntaxNode(int fullWidth) 781857"];
2979 [label="param CSharpSyntaxNode(this) 781858"];
2980 [label="kind 781859"];
2981 [label="diagnostics 781860"];
2982 [label="annotations 781861"];
2983 [label="fullWidth 781862"];
2984 [label="param CSharpSyntaxNode(this) 781863"];
2985 [label="param CSharpSyntaxNode(this) 781864"];
2986 [label="GreenStats.NoteGreen(this); 781865"];
2987 [label="GreenStats.NoteGreen(this); 781866"];
2988 [label="Text 781867"];
2989 [label="this.Text 781868"];
2990 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 781869"];
2991 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781870"];
2992 [label="if (!elastic)\n            {\n                return trivia;\n            } 781871"];
2993 [label="return trivia; 781872"];
2994 [label="CarriageReturn = EndOfLine('\\r') 781873"];
2995 [label="' ' 781874"];
2996 [label="Whitespace(' ') 781875"];
2997 [label="param Whitespace(string text) 781876"];
2998 [label="param Whitespace(bool elastic = false) 781877"];
2999 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 781878"];
3000 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 781879"];
3001 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 781880"];
3002 [label="param Create(SyntaxKind kind) 781881"];
3003 [label="param Create(string text) 781882"];
3004 [label="return new SyntaxTrivia(kind, text); 781883"];
3005 [label="return new SyntaxTrivia(kind, text); 781884"];
3006 [label="return new SyntaxTrivia(kind, text); 781885"];
3007 [label="new SyntaxTrivia(kind, text) 781886"];
3008 [label="param SyntaxTrivia(SyntaxKind kind) 781887"];
3009 [label="param SyntaxTrivia(string text) 781888"];
3010 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 781889"];
3011 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 781890"];
3012 [label="param SyntaxTrivia(this) 781891"];
3013 [label="kind 781892"];
3014 [label="diagnostics 781893"];
3015 [label="annotations 781894"];
3016 [label="text 781895"];
3017 [label="param SyntaxTrivia(this) 781896"];
3018 [label="param CSharpSyntaxNode(SyntaxKind kind) 781897"];
3019 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 781898"];
3020 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 781899"];
3021 [label="param CSharpSyntaxNode(int fullWidth) 781900"];
3022 [label="param CSharpSyntaxNode(this) 781901"];
3023 [label="kind 781902"];
3024 [label="diagnostics 781903"];
3025 [label="annotations 781904"];
3026 [label="fullWidth 781905"];
3027 [label="param CSharpSyntaxNode(this) 781906"];
3028 [label="param CSharpSyntaxNode(this) 781907"];
3029 [label="GreenStats.NoteGreen(this); 781908"];
3030 [label="GreenStats.NoteGreen(this); 781909"];
3031 [label="Text 781910"];
3032 [label="this.Text 781911"];
3033 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 781912"];
3034 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 781913"];
3035 [label="if (!elastic)\n            {\n                return trivia;\n            } 781914"];
3036 [label="return trivia; 781915"];
3037 [label="Space = Whitespace(' ') 781916"];
3038 [label="'\\t' 781917"];
3039 [label="Whitespace('\\t') 781918"];
3040 [label="param Whitespace(string text) 781919"];
3041 [label="param Whitespace(bool elastic = false) 781920"];
3042 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 781921"];
3043 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 781922"];
3044 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 781923"];
3045 [label="param Create(SyntaxKind kind) 781924"];
3046 [label="param Create(string text) 781925"];
3047 [label="return new SyntaxTrivia(kind, text); 781926"];
3048 [label="return new SyntaxTrivia(kind, text); 781927"];
3049 [label="return new SyntaxTrivia(kind, text); 781928"];
3050 [label="new SyntaxTrivia(kind, text) 781929"];
3051 [label="param SyntaxTrivia(SyntaxKind kind) 781930"];
3052 [label="param SyntaxTrivia(string text) 781931"];
3053 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 781932"];
3054 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 781933"];
3055 [label="param SyntaxTrivia(this) 781934"];
3056 [label="kind 781935"];
3057 [label="diagnostics 781936"];
3058 [label="annotations 781937"];
3059 [label="text 781938"];
3060 [label="param SyntaxTrivia(this) 781939"];
3061 [label="param CSharpSyntaxNode(SyntaxKind kind) 781940"];
3062 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 781941"];
3063 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 781942"];
3064 [label="param CSharpSyntaxNode(int fullWidth) 781943"];
3065 [label="param CSharpSyntaxNode(this) 781944"];
3066 [label="kind 781945"];
3067 [label="diagnostics 781946"];
3068 [label="annotations 781947"];
3069 [label="fullWidth 781948"];
3070 [label="param CSharpSyntaxNode(this) 781949"];
3071 [label="param CSharpSyntaxNode(this) 781950"];
3072 [label="GreenStats.NoteGreen(this); 781951"];
3073 [label="GreenStats.NoteGreen(this); 781952"];
3074 [label="Text 781953"];
3075 [label="this.Text 781954"];
3076 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 781955"];
3077 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 781956"];
3078 [label="if (!elastic)\n            {\n                return trivia;\n            } 781957"];
3079 [label="return trivia; 781958"];
3080 [label="Tab = Whitespace('\\t') 781959"];
3081 [label="CrLf 781960"];
3082 [label="true 781961"];
3083 [label="elastic: true 781962"];
3084 [label="EndOfLine(CrLf, elastic: true) 781963"];
3085 [label="param EndOfLine(string text) 781964"];
3086 [label="param EndOfLine(bool elastic = false) 781965"];
3087 [label="SyntaxTrivia trivia = null; 781966"];
3088 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 781967"];
3089 [label="elastic 781968"];
3090 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed; 781969"];
3091 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781970"];
3092 [label="if (trivia != null)\n            {\n                return trivia;\n            } 781971"];
3093 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781972"];
3094 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 781973"];
3095 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 781974"];
3096 [label="param Create(SyntaxKind kind) 781975"];
3097 [label="param Create(string text) 781976"];
3098 [label="return new SyntaxTrivia(kind, text); 781977"];
3099 [label="return new SyntaxTrivia(kind, text); 781978"];
3100 [label="return new SyntaxTrivia(kind, text); 781979"];
3101 [label="new SyntaxTrivia(kind, text) 781980"];
3102 [label="param SyntaxTrivia(SyntaxKind kind) 781981"];
3103 [label="param SyntaxTrivia(string text) 781982"];
3104 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 781983"];
3105 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 781984"];
3106 [label="param SyntaxTrivia(this) 781985"];
3107 [label="kind 781986"];
3108 [label="diagnostics 781987"];
3109 [label="annotations 781988"];
3110 [label="text 781989"];
3111 [label="param SyntaxTrivia(this) 781990"];
3112 [label="param CSharpSyntaxNode(SyntaxKind kind) 781991"];
3113 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 781992"];
3114 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 781993"];
3115 [label="param CSharpSyntaxNode(int fullWidth) 781994"];
3116 [label="param CSharpSyntaxNode(this) 781995"];
3117 [label="kind 781996"];
3118 [label="diagnostics 781997"];
3119 [label="annotations 781998"];
3120 [label="fullWidth 781999"];
3121 [label="param CSharpSyntaxNode(this) 782000"];
3122 [label="param CSharpSyntaxNode(this) 782001"];
3123 [label="GreenStats.NoteGreen(this); 782002"];
3124 [label="GreenStats.NoteGreen(this); 782003"];
3125 [label="Text 782004"];
3126 [label="this.Text 782005"];
3127 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782006"];
3128 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782007"];
3129 [label="if (!elastic)\n            {\n                return trivia;\n            } 782008"];
3130 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782009"];
3131 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782010"];
3132 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 782011"];
3133 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782012"];
3134 [label="param SetAnnotations(SyntaxAnnotation[]? annotations) 782013"];
3135 [label="param SetAnnotations(this) 782014"];
3136 [label="this.Kind 782015"];
3137 [label="get { return (SyntaxKind)this.RawKind; } 782016"];
3138 [label="return (SyntaxKind)this.RawKind; 782017"];
3139 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782018"];
3140 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782019"];
3141 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782020"];
3142 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782021"];
3143 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 782022"];
3144 [label="param SyntaxTrivia(SyntaxKind kind) 782023"];
3145 [label="param SyntaxTrivia(string text) 782024"];
3146 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 782025"];
3147 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 782026"];
3148 [label="param SyntaxTrivia(this) 782027"];
3149 [label="param SyntaxTrivia(this) 782028"];
3150 [label="param CSharpSyntaxNode(this) 782029"];
3151 [label="param CSharpSyntaxNode(this) 782030"];
3152 [label="param CSharpSyntaxNode(this) 782031"];
3153 [label="GreenStats.NoteGreen(this); 782032"];
3154 [label="Text 782033"];
3155 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782034"];
3156 [label="ElasticCarriageReturnLineFeed = EndOfLine(CrLf, elastic: true) 782035"];
3157 [label="'\\n' 782036"];
3158 [label="true 782037"];
3159 [label="elastic: true 782038"];
3160 [label="EndOfLine('\\n', elastic: true) 782039"];
3161 [label="param EndOfLine(string text) 782040"];
3162 [label="param EndOfLine(bool elastic = false) 782041"];
3163 [label="SyntaxTrivia trivia = null; 782042"];
3164 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 782043"];
3165 [label="elastic 782044"];
3166 [label="trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed; 782045"];
3167 [label="if (trivia != null)\n            {\n                return trivia;\n            } 782046"];
3168 [label="if (trivia != null)\n            {\n                return trivia;\n            } 782047"];
3169 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782048"];
3170 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782049"];
3171 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 782050"];
3172 [label="param Create(SyntaxKind kind) 782051"];
3173 [label="param Create(string text) 782052"];
3174 [label="return new SyntaxTrivia(kind, text); 782053"];
3175 [label="return new SyntaxTrivia(kind, text); 782054"];
3176 [label="return new SyntaxTrivia(kind, text); 782055"];
3177 [label="new SyntaxTrivia(kind, text) 782056"];
3178 [label="param SyntaxTrivia(SyntaxKind kind) 782057"];
3179 [label="param SyntaxTrivia(string text) 782058"];
3180 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 782059"];
3181 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 782060"];
3182 [label="param SyntaxTrivia(this) 782061"];
3183 [label="kind 782062"];
3184 [label="diagnostics 782063"];
3185 [label="annotations 782064"];
3186 [label="text 782065"];
3187 [label="param SyntaxTrivia(this) 782066"];
3188 [label="param CSharpSyntaxNode(SyntaxKind kind) 782067"];
3189 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 782068"];
3190 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 782069"];
3191 [label="param CSharpSyntaxNode(int fullWidth) 782070"];
3192 [label="param CSharpSyntaxNode(this) 782071"];
3193 [label="kind 782072"];
3194 [label="diagnostics 782073"];
3195 [label="annotations 782074"];
3196 [label="fullWidth 782075"];
3197 [label="param CSharpSyntaxNode(this) 782076"];
3198 [label="param CSharpSyntaxNode(this) 782077"];
3199 [label="GreenStats.NoteGreen(this); 782078"];
3200 [label="GreenStats.NoteGreen(this); 782079"];
3201 [label="Text 782080"];
3202 [label="this.Text 782081"];
3203 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782082"];
3204 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782083"];
3205 [label="if (!elastic)\n            {\n                return trivia;\n            } 782084"];
3206 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782085"];
3207 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782086"];
3208 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 782087"];
3209 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782088"];
3210 [label="this.Kind 782089"];
3211 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782090"];
3212 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 782091"];
3213 [label="param SyntaxTrivia(this) 782092"];
3214 [label="param SyntaxTrivia(this) 782093"];
3215 [label="param CSharpSyntaxNode(this) 782094"];
3216 [label="param CSharpSyntaxNode(this) 782095"];
3217 [label="GreenStats.NoteGreen(this); 782096"];
3218 [label="Text 782097"];
3219 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782098"];
3220 [label="ElasticLineFeed = EndOfLine('\\n', elastic: true) 782099"];
3221 [label="'\\r' 782100"];
3222 [label="true 782101"];
3223 [label="elastic: true 782102"];
3224 [label="EndOfLine('\\r', elastic: true) 782103"];
3225 [label="param EndOfLine(string text) 782104"];
3226 [label="param EndOfLine(bool elastic = false) 782105"];
3227 [label="SyntaxTrivia trivia = null; 782106"];
3228 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 782107"];
3229 [label="elastic 782108"];
3230 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn; 782109"];
3231 [label="if (trivia != null)\n            {\n                return trivia;\n            } 782110"];
3232 [label="if (trivia != null)\n            {\n                return trivia;\n            } 782111"];
3233 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782112"];
3234 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782113"];
3235 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 782114"];
3236 [label="param Create(SyntaxKind kind) 782115"];
3237 [label="param Create(string text) 782116"];
3238 [label="return new SyntaxTrivia(kind, text); 782117"];
3239 [label="return new SyntaxTrivia(kind, text); 782118"];
3240 [label="return new SyntaxTrivia(kind, text); 782119"];
3241 [label="new SyntaxTrivia(kind, text) 782120"];
3242 [label="param SyntaxTrivia(SyntaxKind kind) 782121"];
3243 [label="param SyntaxTrivia(string text) 782122"];
3244 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 782123"];
3245 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 782124"];
3246 [label="param SyntaxTrivia(this) 782125"];
3247 [label="kind 782126"];
3248 [label="diagnostics 782127"];
3249 [label="annotations 782128"];
3250 [label="text 782129"];
3251 [label="param SyntaxTrivia(this) 782130"];
3252 [label="param CSharpSyntaxNode(SyntaxKind kind) 782131"];
3253 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 782132"];
3254 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 782133"];
3255 [label="param CSharpSyntaxNode(int fullWidth) 782134"];
3256 [label="param CSharpSyntaxNode(this) 782135"];
3257 [label="kind 782136"];
3258 [label="diagnostics 782137"];
3259 [label="annotations 782138"];
3260 [label="fullWidth 782139"];
3261 [label="param CSharpSyntaxNode(this) 782140"];
3262 [label="param CSharpSyntaxNode(this) 782141"];
3263 [label="GreenStats.NoteGreen(this); 782142"];
3264 [label="GreenStats.NoteGreen(this); 782143"];
3265 [label="Text 782144"];
3266 [label="this.Text 782145"];
3267 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782146"];
3268 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 782147"];
3269 [label="if (!elastic)\n            {\n                return trivia;\n            } 782148"];
3270 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782149"];
3271 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782150"];
3272 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 782151"];
3273 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782152"];
3274 [label="this.Kind 782153"];
3275 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782154"];
3276 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 782155"];
3277 [label="param SyntaxTrivia(this) 782156"];
3278 [label="param SyntaxTrivia(this) 782157"];
3279 [label="param CSharpSyntaxNode(this) 782158"];
3280 [label="param CSharpSyntaxNode(this) 782159"];
3281 [label="GreenStats.NoteGreen(this); 782160"];
3282 [label="Text 782161"];
3283 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782162"];
3284 [label="ElasticCarriageReturn = EndOfLine('\\r', elastic: true) 782163"];
3285 [label="' ' 782164"];
3286 [label="true 782165"];
3287 [label="elastic: true 782166"];
3288 [label="Whitespace(' ', elastic: true) 782167"];
3289 [label="param Whitespace(string text) 782168"];
3290 [label="param Whitespace(bool elastic = false) 782169"];
3291 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782170"];
3292 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782171"];
3293 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 782172"];
3294 [label="param Create(SyntaxKind kind) 782173"];
3295 [label="param Create(string text) 782174"];
3296 [label="return new SyntaxTrivia(kind, text); 782175"];
3297 [label="return new SyntaxTrivia(kind, text); 782176"];
3298 [label="return new SyntaxTrivia(kind, text); 782177"];
3299 [label="new SyntaxTrivia(kind, text) 782178"];
3300 [label="param SyntaxTrivia(SyntaxKind kind) 782179"];
3301 [label="param SyntaxTrivia(string text) 782180"];
3302 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 782181"];
3303 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 782182"];
3304 [label="param SyntaxTrivia(this) 782183"];
3305 [label="kind 782184"];
3306 [label="diagnostics 782185"];
3307 [label="annotations 782186"];
3308 [label="text 782187"];
3309 [label="param SyntaxTrivia(this) 782188"];
3310 [label="param CSharpSyntaxNode(SyntaxKind kind) 782189"];
3311 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 782190"];
3312 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 782191"];
3313 [label="param CSharpSyntaxNode(int fullWidth) 782192"];
3314 [label="param CSharpSyntaxNode(this) 782193"];
3315 [label="kind 782194"];
3316 [label="diagnostics 782195"];
3317 [label="annotations 782196"];
3318 [label="fullWidth 782197"];
3319 [label="param CSharpSyntaxNode(this) 782198"];
3320 [label="param CSharpSyntaxNode(this) 782199"];
3321 [label="GreenStats.NoteGreen(this); 782200"];
3322 [label="GreenStats.NoteGreen(this); 782201"];
3323 [label="Text 782202"];
3324 [label="this.Text 782203"];
3325 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782204"];
3326 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782205"];
3327 [label="if (!elastic)\n            {\n                return trivia;\n            } 782206"];
3328 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782207"];
3329 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782208"];
3330 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 782209"];
3331 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782210"];
3332 [label="this.Kind 782211"];
3333 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782212"];
3334 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 782213"];
3335 [label="param SyntaxTrivia(this) 782214"];
3336 [label="param SyntaxTrivia(this) 782215"];
3337 [label="param CSharpSyntaxNode(this) 782216"];
3338 [label="param CSharpSyntaxNode(this) 782217"];
3339 [label="GreenStats.NoteGreen(this); 782218"];
3340 [label="Text 782219"];
3341 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782220"];
3342 [label="ElasticSpace = Whitespace(' ', elastic: true) 782221"];
3343 [label="'\\t' 782222"];
3344 [label="true 782223"];
3345 [label="elastic: true 782224"];
3346 [label="Whitespace('\\t', elastic: true) 782225"];
3347 [label="param Whitespace(string text) 782226"];
3348 [label="param Whitespace(bool elastic = false) 782227"];
3349 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782228"];
3350 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782229"];
3351 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 782230"];
3352 [label="param Create(SyntaxKind kind) 782231"];
3353 [label="param Create(string text) 782232"];
3354 [label="return new SyntaxTrivia(kind, text); 782233"];
3355 [label="return new SyntaxTrivia(kind, text); 782234"];
3356 [label="return new SyntaxTrivia(kind, text); 782235"];
3357 [label="new SyntaxTrivia(kind, text) 782236"];
3358 [label="param SyntaxTrivia(SyntaxKind kind) 782237"];
3359 [label="param SyntaxTrivia(string text) 782238"];
3360 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 782239"];
3361 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 782240"];
3362 [label="param SyntaxTrivia(this) 782241"];
3363 [label="kind 782242"];
3364 [label="diagnostics 782243"];
3365 [label="annotations 782244"];
3366 [label="text 782245"];
3367 [label="param SyntaxTrivia(this) 782246"];
3368 [label="param CSharpSyntaxNode(SyntaxKind kind) 782247"];
3369 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 782248"];
3370 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 782249"];
3371 [label="param CSharpSyntaxNode(int fullWidth) 782250"];
3372 [label="param CSharpSyntaxNode(this) 782251"];
3373 [label="kind 782252"];
3374 [label="diagnostics 782253"];
3375 [label="annotations 782254"];
3376 [label="fullWidth 782255"];
3377 [label="param CSharpSyntaxNode(this) 782256"];
3378 [label="param CSharpSyntaxNode(this) 782257"];
3379 [label="GreenStats.NoteGreen(this); 782258"];
3380 [label="GreenStats.NoteGreen(this); 782259"];
3381 [label="Text 782260"];
3382 [label="this.Text 782261"];
3383 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782262"];
3384 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782263"];
3385 [label="if (!elastic)\n            {\n                return trivia;\n            } 782264"];
3386 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782265"];
3387 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782266"];
3388 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 782267"];
3389 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782268"];
3390 [label="this.Kind 782269"];
3391 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782270"];
3392 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 782271"];
3393 [label="param SyntaxTrivia(this) 782272"];
3394 [label="param SyntaxTrivia(this) 782273"];
3395 [label="param CSharpSyntaxNode(this) 782274"];
3396 [label="param CSharpSyntaxNode(this) 782275"];
3397 [label="GreenStats.NoteGreen(this); 782276"];
3398 [label="Text 782277"];
3399 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782278"];
3400 [label="ElasticTab = Whitespace('\\t', elastic: true) 782279"];
3401 [label="string.Empty 782280"];
3402 [label="true 782281"];
3403 [label="elastic: true 782282"];
3404 [label="Whitespace(string.Empty, elastic: true) 782283"];
3405 [label="param Whitespace(string text) 782284"];
3406 [label="param Whitespace(bool elastic = false) 782285"];
3407 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782286"];
3408 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782287"];
3409 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 782288"];
3410 [label="param Create(SyntaxKind kind) 782289"];
3411 [label="param Create(string text) 782290"];
3412 [label="return new SyntaxTrivia(kind, text); 782291"];
3413 [label="return new SyntaxTrivia(kind, text); 782292"];
3414 [label="return new SyntaxTrivia(kind, text); 782293"];
3415 [label="new SyntaxTrivia(kind, text) 782294"];
3416 [label="param SyntaxTrivia(SyntaxKind kind) 782295"];
3417 [label="param SyntaxTrivia(string text) 782296"];
3418 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 782297"];
3419 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 782298"];
3420 [label="param SyntaxTrivia(this) 782299"];
3421 [label="kind 782300"];
3422 [label="diagnostics 782301"];
3423 [label="annotations 782302"];
3424 [label="text 782303"];
3425 [label="param SyntaxTrivia(this) 782304"];
3426 [label="param CSharpSyntaxNode(SyntaxKind kind) 782305"];
3427 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 782306"];
3428 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 782307"];
3429 [label="param CSharpSyntaxNode(int fullWidth) 782308"];
3430 [label="param CSharpSyntaxNode(this) 782309"];
3431 [label="kind 782310"];
3432 [label="diagnostics 782311"];
3433 [label="annotations 782312"];
3434 [label="fullWidth 782313"];
3435 [label="param CSharpSyntaxNode(this) 782314"];
3436 [label="param CSharpSyntaxNode(this) 782315"];
3437 [label="GreenStats.NoteGreen(this); 782316"];
3438 [label="GreenStats.NoteGreen(this); 782317"];
3439 [label="Text 782318"];
3440 [label="this.Text 782319"];
3441 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782320"];
3442 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 782321"];
3443 [label="if (!elastic)\n            {\n                return trivia;\n            } 782322"];
3444 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782323"];
3445 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782324"];
3446 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 782325"];
3447 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 782326"];
3448 [label="this.Kind 782327"];
3449 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 782328"];
3450 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 782329"];
3451 [label="param SyntaxTrivia(this) 782330"];
3452 [label="param SyntaxTrivia(this) 782331"];
3453 [label="param CSharpSyntaxNode(this) 782332"];
3454 [label="param CSharpSyntaxNode(this) 782333"];
3455 [label="GreenStats.NoteGreen(this); 782334"];
3456 [label="Text 782335"];
3457 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 782336"];
3458 [label="ElasticZeroSpace = Whitespace(string.Empty, elastic: true) 782337"];
3459 [label="s_xmlCarriageReturnLineFeed 782338"];
3460 [label="public static SyntaxTrivia CarriageReturnLineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.CarriageReturnLineFeed; 782339"];
3461 [label="param operator(SyntaxTrivia trivia) 782340"];
3462 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782341"];
3463 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782342"];
3464 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782343"];
3465 [label="public static SyntaxTrivia LineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.LineFeed; 782344"];
3466 [label="param operator(SyntaxTrivia trivia) 782345"];
3467 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782346"];
3468 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782347"];
3469 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782348"];
3470 [label="public static SyntaxTrivia CarriageReturn { get; } = Syntax.InternalSyntax.SyntaxFactory.CarriageReturn; 782349"];
3471 [label="param operator(SyntaxTrivia trivia) 782350"];
3472 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782351"];
3473 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782352"];
3474 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782353"];
3475 [label="public static SyntaxTrivia Space { get; } = Syntax.InternalSyntax.SyntaxFactory.Space; 782354"];
3476 [label="param operator(SyntaxTrivia trivia) 782355"];
3477 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782356"];
3478 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782357"];
3479 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782358"];
3480 [label="public static SyntaxTrivia Tab { get; } = Syntax.InternalSyntax.SyntaxFactory.Tab; 782359"];
3481 [label="param operator(SyntaxTrivia trivia) 782360"];
3482 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782361"];
3483 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782362"];
3484 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782363"];
3485 [label="public static SyntaxTrivia ElasticCarriageReturnLineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticCarriageReturnLineFeed; 782364"];
3486 [label="param operator(SyntaxTrivia trivia) 782365"];
3487 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782366"];
3488 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782367"];
3489 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782368"];
3490 [label="public static SyntaxTrivia ElasticLineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticLineFeed; 782369"];
3491 [label="param operator(SyntaxTrivia trivia) 782370"];
3492 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782371"];
3493 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782372"];
3494 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782373"];
3495 [label="public static SyntaxTrivia ElasticCarriageReturn { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticCarriageReturn; 782374"];
3496 [label="param operator(SyntaxTrivia trivia) 782375"];
3497 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782376"];
3498 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782377"];
3499 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782378"];
3500 [label="public static SyntaxTrivia ElasticSpace { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticSpace; 782379"];
3501 [label="param operator(SyntaxTrivia trivia) 782380"];
3502 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782381"];
3503 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782382"];
3504 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782383"];
3505 [label="public static SyntaxTrivia ElasticTab { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticTab; 782384"];
3506 [label="param operator(SyntaxTrivia trivia) 782385"];
3507 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782386"];
3508 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782387"];
3509 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782388"];
3510 [label="public static SyntaxTrivia ElasticMarker { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticZeroSpace; 782389"];
3511 [label="param operator(SyntaxTrivia trivia) 782390"];
3512 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782391"];
3513 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782392"];
3514 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 782393"];
3515 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 782394"];
3516 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 782395"];
3517 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 782396"];
3518 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 782397"];
3519 [label="SyntaxFactory.ParseSyntaxTree(stringText, options, filename) 782398"];
3520 [label="param ParseSyntaxTree(SourceText text) 782399"];
3521 [label="param ParseSyntaxTree(ParseOptions? options = null) 782400"];
3522 [label="param ParseSyntaxTree(string path = '') 782401"];
3523 [label="param ParseSyntaxTree(CancellationToken cancellationToken = default) 782402"];
3524 [label="new DummySyntaxTree() 782403"];
3525 [label="param DummySyntaxTree(this) 782404"];
3526 [label="param CSharpSyntaxTree(this) 782405"];
3527 [label="_hasDirectives 782406"];
3528 [label="_lazyLineDirectiveMap 782407"];
3529 [label="_lazyPragmaWarningStateMap 782408"];
3530 [label="_lazyNullableContextStateMap 782409"];
3531 [label="_lazyIsGeneratedCode = GeneratedKind.Unknown 782410"];
3532 [label="_node 782411"];
3533 [label="_node = this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)); 782412"];
3534 [label="_node = this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)); 782413"];
3535 [label="SyntaxFactory.ParseCompilationUnit(string.Empty) 782414"];
3536 [label="param ParseCompilationUnit(string text) 782415"];
3537 [label="param ParseCompilationUnit(int offset = 0) 782416"];
3538 [label="param ParseCompilationUnit(CSharpParseOptions? options = null) 782417"];
3539 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 782418"];
3540 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 782419"];
3541 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 782420"];
3542 [label="MakeLexer(text, offset, options) 782421"];
3543 [label="param MakeLexer(string text) 782422"];
3544 [label="param MakeLexer(int offset) 782423"];
3545 [label="param MakeLexer(CSharpParseOptions? options = null) 782424"];
3546 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 782425"];
3547 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 782426"];
3548 [label="MakeSourceText(text, offset) 782427"];
3549 [label="param MakeSourceText(string text) 782428"];
3550 [label="param MakeSourceText(int offset) 782429"];
3551 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 782430"];
3552 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 782431"];
3553 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 782432"];
3554 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 782433"];
3555 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 782434"];
3556 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 782435"];
3557 [label="8 782436"];
3558 [label="TriviaListInitialCapacity = 8 782437"];
3559 [label="TokensLexed 782438"];
3560 [label="'<<<<<<<' 782439"];
3561 [label="s_conflictMarkerLength = '<<<<<<<'.Length 782440"];
3562 [label="42 782441"];
3563 [label="MaxCachedTokenSize = 42 782442"];
3564 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782443"];
3565 [label="{\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            } 782444"];
3566 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782445"];
3567 [label="{\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782446"];
3568 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782447"];
3569 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782448"];
3570 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782449"];
3571 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782450"];
3572 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782451"];
3573 [label="{\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 782452"];
3574 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782453"];
3575 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782454"];
3576 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782455"];
3577 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782456"];
3578 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782457"];
3579 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782458"];
3580 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782459"];
3581 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782460"];
3582 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782461"];
3583 [label="s_stateTransitions = new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 782462"];
3584 [label="new[]\n        {\n            // 0 .. 31\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.White,   // TAB\n            (byte)CharFlags.LF,      // LF\n            (byte)CharFlags.White,   // VT\n            (byte)CharFlags.White,   // FF\n            (byte)CharFlags.CR,      // CR\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 32 .. 63\n            (byte)CharFlags.White,    // SPC\n            (byte)CharFlags.CompoundPunctStart,    // !\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Complex,  // #\n            (byte)CharFlags.Complex,  // $\n            (byte)CharFlags.CompoundPunctStart, // %\n            (byte)CharFlags.CompoundPunctStart, // &\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Punct,    // (\n            (byte)CharFlags.Punct,    // )\n            (byte)CharFlags.CompoundPunctStart, // *\n            (byte)CharFlags.CompoundPunctStart, // +\n            (byte)CharFlags.Punct,    // ,\n            (byte)CharFlags.CompoundPunctStart, // -\n            (byte)CharFlags.Dot,      // .\n            (byte)CharFlags.Slash,    // /\n            (byte)CharFlags.Digit,    // 0\n            (byte)CharFlags.Digit,    // 1\n            (byte)CharFlags.Digit,    // 2\n            (byte)CharFlags.Digit,    // 3\n            (byte)CharFlags.Digit,    // 4\n            (byte)CharFlags.Digit,    // 5\n            (byte)CharFlags.Digit,    // 6\n            (byte)CharFlags.Digit,    // 7\n            (byte)CharFlags.Digit,    // 8\n            (byte)CharFlags.Digit,    // 9\n            (byte)CharFlags.CompoundPunctStart,  // :\n            (byte)CharFlags.Punct,    // ;\n            (byte)CharFlags.CompoundPunctStart,  // <\n            (byte)CharFlags.CompoundPunctStart,  // =\n            (byte)CharFlags.CompoundPunctStart,  // >\n            (byte)CharFlags.CompoundPunctStart,  // ?\n\n            // 64 .. 95\n            (byte)CharFlags.Complex,  // @\n            (byte)CharFlags.Letter,   // A\n            (byte)CharFlags.Letter,   // B\n            (byte)CharFlags.Letter,   // C\n            (byte)CharFlags.Letter,   // D\n            (byte)CharFlags.Letter,   // E\n            (byte)CharFlags.Letter,   // F\n            (byte)CharFlags.Letter,   // G\n            (byte)CharFlags.Letter,   // H\n            (byte)CharFlags.Letter,   // I\n            (byte)CharFlags.Letter,   // J\n            (byte)CharFlags.Letter,   // K\n            (byte)CharFlags.Letter,   // L\n            (byte)CharFlags.Letter,   // M\n            (byte)CharFlags.Letter,   // N\n            (byte)CharFlags.Letter,   // O\n            (byte)CharFlags.Letter,   // P\n            (byte)CharFlags.Letter,   // Q\n            (byte)CharFlags.Letter,   // R\n            (byte)CharFlags.Letter,   // S\n            (byte)CharFlags.Letter,   // T\n            (byte)CharFlags.Letter,   // U\n            (byte)CharFlags.Letter,   // V\n            (byte)CharFlags.Letter,   // W\n            (byte)CharFlags.Letter,   // X\n            (byte)CharFlags.Letter,   // Y\n            (byte)CharFlags.Letter,   // Z\n            (byte)CharFlags.Punct,    // [\n            (byte)CharFlags.Complex,  // \\\n            (byte)CharFlags.Punct,    // ]\n            (byte)CharFlags.CompoundPunctStart,    // ^\n            (byte)CharFlags.Letter,   // _\n\n            // 96 .. 127\n            (byte)CharFlags.Complex,  // `\n            (byte)CharFlags.Letter,   // a\n            (byte)CharFlags.Letter,   // b\n            (byte)CharFlags.Letter,   // c\n            (byte)CharFlags.Letter,   // d\n            (byte)CharFlags.Letter,   // e\n            (byte)CharFlags.Letter,   // f\n            (byte)CharFlags.Letter,   // g\n            (byte)CharFlags.Letter,   // h\n            (byte)CharFlags.Letter,   // i\n            (byte)CharFlags.Letter,   // j\n            (byte)CharFlags.Letter,   // k\n            (byte)CharFlags.Letter,   // l\n            (byte)CharFlags.Letter,   // m\n            (byte)CharFlags.Letter,   // n\n            (byte)CharFlags.Letter,   // o\n            (byte)CharFlags.Letter,   // p\n            (byte)CharFlags.Letter,   // q\n            (byte)CharFlags.Letter,   // r\n            (byte)CharFlags.Letter,   // s\n            (byte)CharFlags.Letter,   // t\n            (byte)CharFlags.Letter,   // u\n            (byte)CharFlags.Letter,   // v\n            (byte)CharFlags.Letter,   // w\n            (byte)CharFlags.Letter,   // x\n            (byte)CharFlags.Letter,   // y\n            (byte)CharFlags.Letter,   // z\n            (byte)CharFlags.Punct,    // {\n            (byte)CharFlags.CompoundPunctStart,  // |\n            (byte)CharFlags.Punct,    // }\n            (byte)CharFlags.CompoundPunctStart,    // ~\n            (byte)CharFlags.Complex,\n\n            // 128 .. 159\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 160 .. 191\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 192 .. \n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter\n        } 782463"];
3585 [label="s_charProperties = new[]\n        {\n            // 0 .. 31\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.White,   // TAB\n            (byte)CharFlags.LF,      // LF\n            (byte)CharFlags.White,   // VT\n            (byte)CharFlags.White,   // FF\n            (byte)CharFlags.CR,      // CR\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 32 .. 63\n            (byte)CharFlags.White,    // SPC\n            (byte)CharFlags.CompoundPunctStart,    // !\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Complex,  // #\n            (byte)CharFlags.Complex,  // $\n            (byte)CharFlags.CompoundPunctStart, // %\n            (byte)CharFlags.CompoundPunctStart, // &\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Punct,    // (\n            (byte)CharFlags.Punct,    // )\n            (byte)CharFlags.CompoundPunctStart, // *\n            (byte)CharFlags.CompoundPunctStart, // +\n            (byte)CharFlags.Punct,    // ,\n            (byte)CharFlags.CompoundPunctStart, // -\n            (byte)CharFlags.Dot,      // .\n            (byte)CharFlags.Slash,    // /\n            (byte)CharFlags.Digit,    // 0\n            (byte)CharFlags.Digit,    // 1\n            (byte)CharFlags.Digit,    // 2\n            (byte)CharFlags.Digit,    // 3\n            (byte)CharFlags.Digit,    // 4\n            (byte)CharFlags.Digit,    // 5\n            (byte)CharFlags.Digit,    // 6\n            (byte)CharFlags.Digit,    // 7\n            (byte)CharFlags.Digit,    // 8\n            (byte)CharFlags.Digit,    // 9\n            (byte)CharFlags.CompoundPunctStart,  // :\n            (byte)CharFlags.Punct,    // ;\n            (byte)CharFlags.CompoundPunctStart,  // <\n            (byte)CharFlags.CompoundPunctStart,  // =\n            (byte)CharFlags.CompoundPunctStart,  // >\n            (byte)CharFlags.CompoundPunctStart,  // ?\n\n            // 64 .. 95\n            (byte)CharFlags.Complex,  // @\n            (byte)CharFlags.Letter,   // A\n            (byte)CharFlags.Letter,   // B\n            (byte)CharFlags.Letter,   // C\n            (byte)CharFlags.Letter,   // D\n            (byte)CharFlags.Letter,   // E\n            (byte)CharFlags.Letter,   // F\n            (byte)CharFlags.Letter,   // G\n            (byte)CharFlags.Letter,   // H\n            (byte)CharFlags.Letter,   // I\n            (byte)CharFlags.Letter,   // J\n            (byte)CharFlags.Letter,   // K\n            (byte)CharFlags.Letter,   // L\n            (byte)CharFlags.Letter,   // M\n            (byte)CharFlags.Letter,   // N\n            (byte)CharFlags.Letter,   // O\n            (byte)CharFlags.Letter,   // P\n            (byte)CharFlags.Letter,   // Q\n            (byte)CharFlags.Letter,   // R\n            (byte)CharFlags.Letter,   // S\n            (byte)CharFlags.Letter,   // T\n            (byte)CharFlags.Letter,   // U\n            (byte)CharFlags.Letter,   // V\n            (byte)CharFlags.Letter,   // W\n            (byte)CharFlags.Letter,   // X\n            (byte)CharFlags.Letter,   // Y\n            (byte)CharFlags.Letter,   // Z\n            (byte)CharFlags.Punct,    // [\n            (byte)CharFlags.Complex,  // \\\n            (byte)CharFlags.Punct,    // ]\n            (byte)CharFlags.CompoundPunctStart,    // ^\n            (byte)CharFlags.Letter,   // _\n\n            // 96 .. 127\n            (byte)CharFlags.Complex,  // `\n            (byte)CharFlags.Letter,   // a\n            (byte)CharFlags.Letter,   // b\n            (byte)CharFlags.Letter,   // c\n            (byte)CharFlags.Letter,   // d\n            (byte)CharFlags.Letter,   // e\n            (byte)CharFlags.Letter,   // f\n            (byte)CharFlags.Letter,   // g\n            (byte)CharFlags.Letter,   // h\n            (byte)CharFlags.Letter,   // i\n            (byte)CharFlags.Letter,   // j\n            (byte)CharFlags.Letter,   // k\n            (byte)CharFlags.Letter,   // l\n            (byte)CharFlags.Letter,   // m\n            (byte)CharFlags.Letter,   // n\n            (byte)CharFlags.Letter,   // o\n            (byte)CharFlags.Letter,   // p\n            (byte)CharFlags.Letter,   // q\n            (byte)CharFlags.Letter,   // r\n            (byte)CharFlags.Letter,   // s\n            (byte)CharFlags.Letter,   // t\n            (byte)CharFlags.Letter,   // u\n            (byte)CharFlags.Letter,   // v\n            (byte)CharFlags.Letter,   // w\n            (byte)CharFlags.Letter,   // x\n            (byte)CharFlags.Letter,   // y\n            (byte)CharFlags.Letter,   // z\n            (byte)CharFlags.Punct,    // {\n            (byte)CharFlags.CompoundPunctStart,  // |\n            (byte)CharFlags.Punct,    // }\n            (byte)CharFlags.CompoundPunctStart,    // ~\n            (byte)CharFlags.Complex,\n\n            // 128 .. 159\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 160 .. 191\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 192 .. \n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter\n        } 782464"];
3586 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 782465"];
3587 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 782466"];
3588 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 782467"];
3589 [label="new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default) 782468"];
3590 [label="param Lexer(SourceText text) 782469"];
3591 [label="param Lexer(CSharpParseOptions options) 782470"];
3592 [label="param Lexer(bool allowPreprocessorDirectives = true) 782471"];
3593 [label="param Lexer(bool interpolationFollowedByColon = false) 782472"];
3594 [label="param Lexer(this) 782473"];
3595 [label="text 782474"];
3596 [label="param Lexer(this) 782475"];
3597 [label="param AbstractLexer(SourceText text) 782476"];
3598 [label="param AbstractLexer(this) 782477"];
3599 [label="TextWindow 782478"];
3600 [label="_errors 782479"];
3601 [label="InvalidCharacter = char.MaxValue 782480"];
3602 [label="2048 782481"];
3603 [label="DefaultWindowLength = 2048 782482"];
3604 [label="() => new char[DefaultWindowLength] 782483"];
3605 [label="new ObjectPool<char[]>(() => new char[DefaultWindowLength]) 782484"];
3606 [label="s_windowPool = new ObjectPool<char[]>(() => new char[DefaultWindowLength]) 782485"];
3607 [label="this.TextWindow = new SlidingTextWindow(text); 782486"];
3608 [label="this.TextWindow = new SlidingTextWindow(text); 782487"];
3609 [label="new SlidingTextWindow(text) 782488"];
3610 [label="param SlidingTextWindow(SourceText text) 782489"];
3611 [label="param SlidingTextWindow(this) 782490"];
3612 [label="_text 782491"];
3613 [label="_basis 782492"];
3614 [label="_offset 782493"];
3615 [label="_textEnd 782494"];
3616 [label="_characterWindow 782495"];
3617 [label="_characterWindowCount 782496"];
3618 [label="_lexemeStart 782497"];
3619 [label="_strings 782498"];
3620 [label="_text 782499"];
3621 [label="_basis = 0; 782500"];
3622 [label="_basis 782501"];
3623 [label="_offset = 0; 782502"];
3624 [label="_offset 782503"];
3625 [label="_textEnd 782504"];
3626 [label="_strings = StringTable.GetInstance(); 782505"];
3627 [label="_strings 782506"];
3628 [label="_characterWindow = s_windowPool.Allocate(); 782507"];
3629 [label="_characterWindow 782508"];
3630 [label="_lexemeStart = 0; 782509"];
3631 [label="_lexemeStart 782510"];
3632 [label="this.TextWindow 782511"];
3633 [label="_options 782512"];
3634 [label="_mode 782513"];
3635 [label="_builder 782514"];
3636 [label="_identBuffer 782515"];
3637 [label="_identLen 782516"];
3638 [label="_cache 782517"];
3639 [label="_allowPreprocessorDirectives 782518"];
3640 [label="_interpolationFollowedByColon 782519"];
3641 [label="_xmlParser 782520"];
3642 [label="_badTokenCount 782521"];
3643 [label="10 782522"];
3644 [label="new SyntaxListBuilder(10) 782523"];
3645 [label="_leadingTriviaCache = new SyntaxListBuilder(10) 782524"];
3646 [label="10 782525"];
3647 [label="new SyntaxListBuilder(10) 782526"];
3648 [label="_trailingTriviaCache = new SyntaxListBuilder(10) 782527"];
3649 [label="_createWhitespaceTriviaFunction 782528"];
3650 [label="_createQuickTokenFunction 782529"];
3651 [label="Debug.Assert(options != null); 782530"];
3652 [label="Debug.Assert(options != null); 782531"];
3653 [label="_options 782532"];
3654 [label="_builder = new StringBuilder(); 782533"];
3655 [label="_builder 782534"];
3656 [label="_identBuffer = new char[32]; 782535"];
3657 [label="_identBuffer 782536"];
3658 [label="512 782537"];
3659 [label="(key) =>\n                            {\n                                var kind = SyntaxFacts.GetKeywordKind(key);\n                                if (kind == SyntaxKind.None)\n                                {\n                                    kind = SyntaxFacts.GetContextualKeywordKind(key);\n                                }\n\n                                return kind;\n                            } 782538"];
3660 [label="CachingIdentityFactory<string, SyntaxKind>.CreatePool(\n                            512,\n                            (key) =>\n                            {\n                                var kind = SyntaxFacts.GetKeywordKind(key);\n                                if (kind == SyntaxKind.None)\n                                {\n                                    kind = SyntaxFacts.GetContextualKeywordKind(key);\n                                }\n\n                                return kind;\n                            }) 782539"];
3661 [label="s_keywordKindPool =\n            CachingIdentityFactory<string, SyntaxKind>.CreatePool(\n                            512,\n                            (key) =>\n                            {\n                                var kind = SyntaxFacts.GetKeywordKind(key);\n                                if (kind == SyntaxKind.None)\n                                {\n                                    kind = SyntaxFacts.GetContextualKeywordKind(key);\n                                }\n\n                                return kind;\n                            }) 782540"];
3662 [label="10 782541"];
3663 [label="MaxKeywordLength = 10 782542"];
3664 [label="_cache = new LexerCache(); 782543"];
3665 [label="new LexerCache() 782544"];
3666 [label="param LexerCache(this) 782545"];
3667 [label="_triviaMap 782546"];
3668 [label="_tokenMap 782547"];
3669 [label="_keywordKindMap 782548"];
3670 [label="_triviaMap = TextKeyedCache<SyntaxTrivia>.GetInstance(); 782549"];
3671 [label="_triviaMap 782550"];
3672 [label="_tokenMap = TextKeyedCache<SyntaxToken>.GetInstance(); 782551"];
3673 [label="_tokenMap 782552"];
3674 [label="_keywordKindMap = s_keywordKindPool.Allocate(); 782553"];
3675 [label="_keywordKindMap 782554"];
3676 [label="_cache 782555"];
3677 [label="_createQuickTokenFunction 782556"];
3678 [label="_allowPreprocessorDirectives 782557"];
3679 [label="_interpolationFollowedByColon 782558"];
3680 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 782559"];
3681 [label="using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 782560"];
3682 [label="MakeParser(lexer) 782561"];
3683 [label="param MakeParser(InternalSyntax.Lexer lexer) 782562"];
3684 [label="LastTerminatorState = (int)TerminatorState.IsEndOfRecordSignature 782563"];
3685 [label="return new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null); 782564"];
3686 [label="return new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null); 782565"];
3687 [label="new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null) 782566"];
3688 [label="param LanguageParser(Lexer lexer) 782567"];
3689 [label="param LanguageParser(CSharp.CSharpSyntaxNode oldTree) 782568"];
3690 [label="param LanguageParser(IEnumerable<TextChangeRange> changes) 782569"];
3691 [label="param LanguageParser(LexerMode lexerMode = LexerMode.Syntax) 782570"];
3692 [label="param LanguageParser(CancellationToken cancellationToken = default(CancellationToken)) 782571"];
3693 [label="param LanguageParser(this) 782572"];
3694 [label="() => new BlendedNode[32] 782573"];
3695 [label="2 782574"];
3696 [label="new ObjectPool<BlendedNode[]>(() => new BlendedNode[32], 2) 782575"];
3697 [label="s_blendedNodesPool = new ObjectPool<BlendedNode[]>(() => new BlendedNode[32], 2) 782576"];
3698 [label="lexer 782577"];
3699 [label="lexerMode 782578"];
3700 [label="oldTree 782579"];
3701 [label="changes 782580"];
3702 [label="false 782581"];
3703 [label="true 782582"];
3704 [label="cancellationToken 782583"];
3705 [label="param LanguageParser(this) 782584"];
3706 [label="param SyntaxParser(Lexer lexer) 782585"];
3707 [label="param SyntaxParser(LexerMode mode) 782586"];
3708 [label="param SyntaxParser(CSharp.CSharpSyntaxNode oldTree) 782587"];
3709 [label="param SyntaxParser(IEnumerable<TextChangeRange> changes) 782588"];
3710 [label="param SyntaxParser(bool allowModeReset) 782589"];
3711 [label="param SyntaxParser(bool preLexIfNotIncremental = false) 782590"];
3712 [label="param SyntaxParser(CancellationToken cancellationToken = default(CancellationToken)) 782591"];
3713 [label="param SyntaxParser(this) 782592"];
3714 [label="lexer 782593"];
3715 [label="_isIncremental 782594"];
3716 [label="_allowModeReset 782595"];
3717 [label="_mode 782596"];
3718 [label="_currentToken 782597"];
3719 [label="_lexedTokens 782598"];
3720 [label="_prevTokenTrailingTrivia 782599"];
3721 [label="_firstToken 782600"];
3722 [label="_tokenOffset 782601"];
3723 [label="_tokenCount 782602"];
3724 [label="_resetCount 782603"];
3725 [label="_resetStart 782604"];
3726 [label="_blendedTokens 782605"];
3727 [label="this.lexer 782606"];
3728 [label="_mode 782607"];
3729 [label="_allowModeReset 782608"];
3730 [label="this.cancellationToken 782609"];
3731 [label="_currentNode = default(BlendedNode); 782610"];
3732 [label="_currentNode 782611"];
3733 [label="_isIncremental = oldTree != null; 782612"];
3734 [label="_isIncremental = oldTree != null; 782613"];
3735 [label="_isIncremental 782614"];
3736 [label="this.IsIncremental 782615"];
3737 [label="get\n            {\n                return _isIncremental;\n            } 782616"];
3738 [label="return _isIncremental; 782617"];
3739 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 782618"];
3740 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 782619"];
3741 [label="_firstBlender = default(Blender); 782620"];
3742 [label="_firstBlender 782621"];
3743 [label="_lexedTokens = new ArrayElement<SyntaxToken>[32]; 782622"];
3744 [label="_lexedTokens 782623"];
3745 [label="this.IsIncremental 782624"];
3746 [label="get\n            {\n                return _isIncremental;\n            } 782625"];
3747 [label="return _isIncremental; 782626"];
3748 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 782627"];
3749 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 782628"];
3750 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 782629"];
3751 [label="this.PreLex() 782630"];
3752 [label="param PreLex(this) 782631"];
3753 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 782632"];
3754 [label="this.lexer.TextWindow.Text 782633"];
3755 [label="=> _text 782634"];
3756 [label="_text 782635"];
3757 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 782636"];
3758 [label="_lexedTokens = new ArrayElement<SyntaxToken>[size]; 782637"];
3759 [label="_lexedTokens 782638"];
3760 [label="var lexer = this.lexer; 782639"];
3761 [label="var mode = _mode; 782640"];
3762 [label="for (int i = 0; i < size; i++)\n            {\n                var token = lexer.Lex(mode);\n                this.AddLexedToken(token);\n                if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                }\n            } 782641"];
3763 [label="for (int i = 0; i < size; i++)\n            {\n                var token = lexer.Lex(mode);\n                this.AddLexedToken(token);\n                if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                }\n            } 782642"];
3764 [label="var token = lexer.Lex(mode); 782643"];
3765 [label="lexer.Lex(mode) 782644"];
3766 [label="param Lex(LexerMode mode) 782645"];
3767 [label="param Lex(this) 782646"];
3768 [label="TokensLexed++; 782647"];
3769 [label="_mode 782648"];
3770 [label="switch (_mode)\n            {\n                case LexerMode.Syntax:\n                case LexerMode.DebuggerSyntax:\n                    return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken();\n                case LexerMode.Directive:\n                    return this.LexDirectiveToken();\n            } 782649"];
3771 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 782650"];
3772 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 782651"];
3773 [label="param Start(this) 782652"];
3774 [label="TextWindow.Start() 782653"];
3775 [label="param Start(this) 782654"];
3776 [label="_lexemeStart 782655"];
3777 [label="TextWindow.Start(); 782656"];
3778 [label="_errors = null; 782657"];
3779 [label="_errors 782658"];
3780 [label="get\n            {\n                return _offset;\n            } 782659"];
3781 [label="return _offset; 782660"];
3782 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 782661"];
3783 [label="get\n            {\n                return _characterWindowCount;\n            } 782662"];
3784 [label="return _characterWindowCount; 782663"];
3785 [label="get\n            {\n                return _characterWindow;\n            } 782664"];
3786 [label="return _characterWindow; 782665"];
3787 [label="param AdvanceChar(int n) 782666"];
3788 [label="param AdvanceChar(this) 782667"];
3789 [label="_offset += n; 782668"];
3790 [label="_offset 782669"];
3791 [label="get\n            {\n                return _basis + _lexemeStart;\n            } 782670"];
3792 [label="return _basis + _lexemeStart; 782671"];
3793 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 782672"];
3794 [label="param Reset(int position) 782673"];
3795 [label="param Reset(this) 782674"];
3796 [label="int relative = position - _basis; 782675"];
3797 [label="if (relative >= 0 && relative <= _characterWindowCount)\n            {\n                _offset = relative;\n            }\n            else\n            {\n                // we need to reread text buffer\n                int amountToRead = Math.Min(_text.Length, position + _characterWindow.Length) - position;\n                amountToRead = Math.Max(amountToRead, 0);\n                if (amountToRead > 0)\n                {\n                    _text.CopyTo(position, _characterWindow, 0, amountToRead);\n                }\n\n                _lexemeStart = 0;\n                _offset = 0;\n                _basis = position;\n                _characterWindowCount = amountToRead;\n            } 782676"];
3798 [label="if (relative >= 0 && relative <= _characterWindowCount)\n            {\n                _offset = relative;\n            }\n            else\n            {\n                // we need to reread text buffer\n                int amountToRead = Math.Min(_text.Length, position + _characterWindow.Length) - position;\n                amountToRead = Math.Max(amountToRead, 0);\n                if (amountToRead > 0)\n                {\n                    _text.CopyTo(position, _characterWindow, 0, amountToRead);\n                }\n\n                _lexemeStart = 0;\n                _offset = 0;\n                _basis = position;\n                _characterWindowCount = amountToRead;\n            } 782677"];
3799 [label="if (relative >= 0 && relative <= _characterWindowCount)\n            {\n                _offset = relative;\n            }\n            else\n            {\n                // we need to reread text buffer\n                int amountToRead = Math.Min(_text.Length, position + _characterWindow.Length) - position;\n                amountToRead = Math.Max(amountToRead, 0);\n                if (amountToRead > 0)\n                {\n                    _text.CopyTo(position, _characterWindow, 0, amountToRead);\n                }\n\n                _lexemeStart = 0;\n                _offset = 0;\n                _basis = position;\n                _characterWindowCount = amountToRead;\n            } 782678"];
3800 [label="_offset 782679"];
3801 [label="this.LexSyntaxToken() 782680"];
3802 [label="param LexSyntaxToken(this) 782681"];
3803 [label="_leadingTriviaCache.Clear(); 782682"];
3804 [label="TextWindow.Position 782683"];
3805 [label="get\n            {\n                return _basis + _offset;\n            } 782684"];
3806 [label="return _basis + _offset; 782685"];
3807 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache); 782686"];
3808 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache); 782687"];
3809 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache); 782688"];
3810 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache) 782689"];
3811 [label="param LexSyntaxTrivia(bool afterFirstToken) 782690"];
3812 [label="param LexSyntaxTrivia(bool isTrailing) 782691"];
3813 [label="param LexSyntaxTrivia(ref SyntaxListBuilder triviaList) 782692"];
3814 [label="param LexSyntaxTrivia(this) 782693"];
3815 [label="bool onlyWhitespaceOnLine = !isTrailing; 782694"];
3816 [label="while (true)\n            {\n                this.Start();\n                char ch = TextWindow.PeekChar();\n                if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                }\n\n                switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                }\n            } 782695"];
3817 [label="this.Start() 782696"];
3818 [label="param Start(this) 782697"];
3819 [label="TextWindow.Start() 782698"];
3820 [label="param Start(this) 782699"];
3821 [label="TextWindow.Start(); 782700"];
3822 [label="_errors = null; 782701"];
3823 [label="_errors 782702"];
3824 [label="this.Start(); 782703"];
3825 [label="TextWindow.PeekChar() 782704"];
3826 [label="param PeekChar(this) 782705"];
3827 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 782706"];
3828 [label="MoreChars() 782707"];
3829 [label="param MoreChars(this) 782708"];
3830 [label="if (_offset >= _characterWindowCount)\n            {\n                if (this.Position >= _textEnd)\n                {\n                    return false;\n                }\n\n                // if lexeme scanning is sufficiently into the char buffer, \n                // then refocus the window onto the lexeme\n                if (_lexemeStart > (_characterWindowCount / 4))\n                {\n                    Array.Copy(_characterWindow,\n                        _lexemeStart,\n                        _characterWindow,\n                        0,\n                        _characterWindowCount - _lexemeStart);\n                    _characterWindowCount -= _lexemeStart;\n                    _offset -= _lexemeStart;\n                    _basis += _lexemeStart;\n                    _lexemeStart = 0;\n                }\n\n                if (_characterWindowCount >= _characterWindow.Length)\n                {\n                    // grow char array, since we need more contiguous space\n                    char[] oldWindow = _characterWindow;\n                    char[] newWindow = new char[_characterWindow.Length * 2];\n                    Array.Copy(oldWindow, 0, newWindow, 0, _characterWindowCount);\n                    s_windowPool.ForgetTrackedObject(oldWindow, newWindow);\n                    _characterWindow = newWindow;\n                }\n\n                int amountToRead = Math.Min(_textEnd - (_basis + _characterWindowCount),\n                    _characterWindow.Length - _characterWindowCount);\n                _text.CopyTo(_basis + _characterWindowCount,\n                    _characterWindow,\n                    _characterWindowCount,\n                    amountToRead);\n                _characterWindowCount += amountToRead;\n                return amountToRead > 0;\n            } 782709"];
3831 [label="this.Position 782710"];
3832 [label="get\n            {\n                return _basis + _offset;\n            } 782711"];
3833 [label="return _basis + _offset; 782712"];
3834 [label="if (this.Position >= _textEnd)\n                {\n                    return false;\n                } 782713"];
3835 [label="return false; 782714"];
3836 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 782715"];
3837 [label="return InvalidCharacter; 782716"];
3838 [label="char ch = TextWindow.PeekChar(); 782717"];
3839 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 782718"];
3840 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 782719"];
3841 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 782720"];
3842 [label="new SyntaxKindEqualityComparer() 782721"];
3843 [label="param SyntaxKindEqualityComparer(this) 782722"];
3844 [label="public static IEqualityComparer<SyntaxKind> EqualityComparer { get; } = new SyntaxKindEqualityComparer(); 782723"];
3845 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 782724"];
3846 [label="SyntaxFacts.IsWhitespace(ch) 782725"];
3847 [label="param IsWhitespace(char ch) 782726"];
3848 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 782727"];
3849 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 782728"];
3850 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 782729"];
3851 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 782730"];
3852 [label="SyntaxFacts.IsNewLine(ch) 782731"];
3853 [label="param IsNewLine(char ch) 782732"];
3854 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 782733"];
3855 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 782734"];
3856 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 782735"];
3857 [label="return; 782736"];
3858 [label="var leading = _leadingTriviaCache; 782737"];
3859 [label="var tokenInfo = default(TokenInfo); 782738"];
3860 [label="this.Start() 782739"];
3861 [label="param Start(this) 782740"];
3862 [label="TextWindow.Start() 782741"];
3863 [label="param Start(this) 782742"];
3864 [label="TextWindow.Start(); 782743"];
3865 [label="_errors = null; 782744"];
3866 [label="_errors 782745"];
3867 [label="this.Start(); 782746"];
3868 [label="this.ScanSyntaxToken(ref tokenInfo); 782747"];
3869 [label="this.ScanSyntaxToken(ref tokenInfo); 782748"];
3870 [label="this.ScanSyntaxToken(ref tokenInfo); 782749"];
3871 [label="get\n            {\n                return _basis + _offset;\n            } 782750"];
3872 [label="return _basis + _offset; 782751"];
3873 [label="param PeekChar(this) 782752"];
3874 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 782753"];
3875 [label="MoreChars() 782754"];
3876 [label="param MoreChars(this) 782755"];
3877 [label="if (_offset >= _characterWindowCount)\n            {\n                if (this.Position >= _textEnd)\n                {\n                    return false;\n                }\n\n                // if lexeme scanning is sufficiently into the char buffer, \n                // then refocus the window onto the lexeme\n                if (_lexemeStart > (_characterWindowCount / 4))\n                {\n                    Array.Copy(_characterWindow,\n                        _lexemeStart,\n                        _characterWindow,\n                        0,\n                        _characterWindowCount - _lexemeStart);\n                    _characterWindowCount -= _lexemeStart;\n                    _offset -= _lexemeStart;\n                    _basis += _lexemeStart;\n                    _lexemeStart = 0;\n                }\n\n                if (_characterWindowCount >= _characterWindow.Length)\n                {\n                    // grow char array, since we need more contiguous space\n                    char[] oldWindow = _characterWindow;\n                    char[] newWindow = new char[_characterWindow.Length * 2];\n                    Array.Copy(oldWindow, 0, newWindow, 0, _characterWindowCount);\n                    s_windowPool.ForgetTrackedObject(oldWindow, newWindow);\n                    _characterWindow = newWindow;\n                }\n\n                int amountToRead = Math.Min(_textEnd - (_basis + _characterWindowCount),\n                    _characterWindow.Length - _characterWindowCount);\n                _text.CopyTo(_basis + _characterWindowCount,\n                    _characterWindow,\n                    _characterWindowCount,\n                    amountToRead);\n                _characterWindowCount += amountToRead;\n                return amountToRead > 0;\n            } 782756"];
3878 [label="this.Position 782757"];
3879 [label="if (this.Position >= _textEnd)\n                {\n                    return false;\n                } 782758"];
3880 [label="return false; 782759"];
3881 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 782760"];
3882 [label="return InvalidCharacter; 782761"];
3883 [label="param IsReallyAtEnd(this) 782762"];
3884 [label="return _offset >= _characterWindowCount && Position >= _textEnd; 782763"];
3885 [label="Position 782764"];
3886 [label="get\n            {\n                return _basis + _offset;\n            } 782765"];
3887 [label="return _basis + _offset; 782766"];
3888 [label="return _offset >= _characterWindowCount && Position >= _textEnd; 782767"];
3889 [label="ConsList<Directive>.Empty 782768"];
3890 [label="new DirectiveStack(ConsList<Directive>.Empty) 782769"];
3891 [label="param DirectiveStack(ConsList<Directive> directives) 782770"];
3892 [label="param DirectiveStack(this) 782771"];
3893 [label="_directives 782772"];
3894 [label="Empty = new DirectiveStack(ConsList<Directive>.Empty) 782773"];
3895 [label="null 782774"];
3896 [label="new DirectiveStack(null) 782775"];
3897 [label="param DirectiveStack(ConsList<Directive> directives) 782776"];
3898 [label="param DirectiveStack(this) 782777"];
3899 [label="_directives 782778"];
3900 [label="Null = new DirectiveStack(null) 782779"];
3901 [label="param HasUnfinishedIf(this) 782780"];
3902 [label="var prev = GetPreviousIfElifElseOrRegion(_directives); 782781"];
3903 [label="GetPreviousIfElifElseOrRegion(_directives) 782782"];
3904 [label="param GetPreviousIfElifElseOrRegion(ConsList<Directive> directives) 782783"];
3905 [label="var current = directives; 782784"];
3906 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 782785"];
3907 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 782786"];
3908 [label="return current; 782787"];
3909 [label="return prev != null && prev.Any() && prev.Head.Kind != SyntaxKind.RegionDirectiveTrivia; 782788"];
3910 [label="return prev != null && prev.Any() && prev.Head.Kind != SyntaxKind.RegionDirectiveTrivia; 782789"];
3911 [label="param HasUnfinishedRegion(this) 782790"];
3912 [label="var prev = GetPreviousIfElifElseOrRegion(_directives); 782791"];
3913 [label="GetPreviousIfElifElseOrRegion(_directives) 782792"];
3914 [label="param GetPreviousIfElifElseOrRegion(ConsList<Directive> directives) 782793"];
3915 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 782794"];
3916 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 782795"];
3917 [label="return prev != null && prev.Any() && prev.Head.Kind == SyntaxKind.RegionDirectiveTrivia; 782796"];
3918 [label="return prev != null && prev.Any() && prev.Head.Kind == SyntaxKind.RegionDirectiveTrivia; 782797"];
3919 [label="var errors = this.GetErrors(GetFullWidth(leading)); 782798"];
3920 [label="GetFullWidth(leading) 782799"];
3921 [label="param GetFullWidth(SyntaxListBuilder builder) 782800"];
3922 [label="int width = 0; 782801"];
3923 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 782802"];
3924 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 782803"];
3925 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 782804"];
3926 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 782805"];
3927 [label="return width; 782806"];
3928 [label="var errors = this.GetErrors(GetFullWidth(leading)); 782807"];
3929 [label="this.GetErrors(GetFullWidth(leading)) 782808"];
3930 [label="param GetErrors(int leadingTriviaWidth) 782809"];
3931 [label="param GetErrors(this) 782810"];
3932 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 782811"];
3933 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 782812"];
3934 [label="return null; 782813"];
3935 [label="var errors = this.GetErrors(GetFullWidth(leading)); 782814"];
3936 [label="_trailingTriviaCache.Clear(); 782815"];
3937 [label="this.LexSyntaxTrivia(afterFirstToken: true, isTrailing: true, triviaList: ref _trailingTriviaCache); 782816"];
3938 [label="this.LexSyntaxTrivia(afterFirstToken: true, isTrailing: true, triviaList: ref _trailingTriviaCache); 782817"];
3939 [label="this.LexSyntaxTrivia(afterFirstToken: true, isTrailing: true, triviaList: ref _trailingTriviaCache) 782818"];
3940 [label="param LexSyntaxTrivia(bool afterFirstToken) 782819"];
3941 [label="param LexSyntaxTrivia(bool isTrailing) 782820"];
3942 [label="param LexSyntaxTrivia(ref SyntaxListBuilder triviaList) 782821"];
3943 [label="param LexSyntaxTrivia(this) 782822"];
3944 [label="bool onlyWhitespaceOnLine = !isTrailing; 782823"];
3945 [label="while (true)\n            {\n                this.Start();\n                char ch = TextWindow.PeekChar();\n                if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                }\n\n                switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                }\n            } 782824"];
3946 [label="this.Start() 782825"];
3947 [label="param Start(this) 782826"];
3948 [label="TextWindow.Start() 782827"];
3949 [label="param Start(this) 782828"];
3950 [label="TextWindow.Start(); 782829"];
3951 [label="_errors = null; 782830"];
3952 [label="_errors 782831"];
3953 [label="this.Start(); 782832"];
3954 [label="TextWindow.PeekChar() 782833"];
3955 [label="param PeekChar(this) 782834"];
3956 [label="MoreChars() 782835"];
3957 [label="char ch = TextWindow.PeekChar(); 782836"];
3958 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 782837"];
3959 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 782838"];
3960 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 782839"];
3961 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 782840"];
3962 [label="SyntaxFacts.IsWhitespace(ch) 782841"];
3963 [label="param IsWhitespace(char ch) 782842"];
3964 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 782843"];
3965 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 782844"];
3966 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 782845"];
3967 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 782846"];
3968 [label="SyntaxFacts.IsNewLine(ch) 782847"];
3969 [label="param IsNewLine(char ch) 782848"];
3970 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 782849"];
3971 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 782850"];
3972 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 782851"];
3973 [label="return; 782852"];
3974 [label="var trailing = _trailingTriviaCache; 782853"];
3975 [label="return Create(ref tokenInfo, leading, trailing, errors); 782854"];
3976 [label="return Create(ref tokenInfo, leading, trailing, errors); 782855"];
3977 [label="return Create(ref tokenInfo, leading, trailing, errors); 782856"];
3978 [label="return Create(ref tokenInfo, leading, trailing, errors); 782857"];
3979 [label="Create(ref tokenInfo, leading, trailing, errors) 782858"];
3980 [label="param Create(ref TokenInfo info) 782859"];
3981 [label="param Create(SyntaxListBuilder leading) 782860"];
3982 [label="param Create(SyntaxListBuilder trailing) 782861"];
3983 [label="param Create(SyntaxDiagnosticInfo[] errors) 782862"];
3984 [label="param Create(this) 782863"];
3985 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 782864"];
3986 [label="var leadingNode = leading?.ToListNode(); 782865"];
3987 [label="var trailingNode = trailing?.ToListNode(); 782866"];
3988 [label="SyntaxToken token; 782867"];
3989 [label="if (info.RequiresTextForXmlEntity)\n            {\n                token = SyntaxFactory.Token(leadingNode, info.Kind, info.Text, info.StringValue, trailingNode);\n            }\n            else\n            {\n                switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                }\n            } 782868"];
3990 [label="switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                } 782869"];
3991 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 782870"];
3992 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 782871"];
3993 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 782872"];
3994 [label="SyntaxFactory.Token(leadingNode, info.Kind, trailingNode) 782873"];
3995 [label="param Token(GreenNode leading) 782874"];
3996 [label="param Token(SyntaxKind kind) 782875"];
3997 [label="param Token(GreenNode trailing) 782876"];
3998 [label="FirstTokenWithWellKnownText = SyntaxKind.TildeToken 782877"];
3999 [label="LastTokenWithWellKnownText = SyntaxKind.EndOfFileToken 782878"];
4000 [label="1 782879"];
4001 [label="(int)LastTokenWithWellKnownText + 1 782880"];
4002 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782881"];
4003 [label="s_tokensWithNoTrivia = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782882"];
4004 [label="1 782883"];
4005 [label="(int)LastTokenWithWellKnownText + 1 782884"];
4006 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782885"];
4007 [label="s_tokensWithElasticTrivia = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782886"];
4008 [label="1 782887"];
4009 [label="(int)LastTokenWithWellKnownText + 1 782888"];
4010 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782889"];
4011 [label="s_tokensWithSingleTrailingSpace = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782890"];
4012 [label="1 782891"];
4013 [label="(int)LastTokenWithWellKnownText + 1 782892"];
4014 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782893"];
4015 [label="s_tokensWithSingleTrailingCRLF = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 782894"];
4016 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxToken), r => new SyntaxToken(r)); 782895"];
4017 [label="for (var kind = FirstTokenWithWellKnownText; kind <= LastTokenWithWellKnownText; kind++)\n            {\n                s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind);\n                s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace);\n                s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space);\n                s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed);\n            } 782896"];
4018 [label="for (var kind = FirstTokenWithWellKnownText; kind <= LastTokenWithWellKnownText; kind++)\n            {\n                s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind);\n                s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace);\n                s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space);\n                s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed);\n            } 782897"];
4019 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 782898"];
4020 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 782899"];
4021 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 782900"];
4022 [label="new SyntaxToken(kind) 782901"];
4023 [label="param SyntaxToken(SyntaxKind kind) 782902"];
4024 [label="param SyntaxToken(this) 782903"];
4025 [label="kind 782904"];
4026 [label="param SyntaxToken(this) 782905"];
4027 [label="param CSharpSyntaxNode(SyntaxKind kind) 782906"];
4028 [label="param CSharpSyntaxNode(this) 782907"];
4029 [label="kind 782908"];
4030 [label="param CSharpSyntaxNode(this) 782909"];
4031 [label="param CSharpSyntaxNode(this) 782910"];
4032 [label="GreenStats.NoteGreen(this); 782911"];
4033 [label="GreenStats.NoteGreen(this); 782912"];
4034 [label="this.Text 782913"];
4035 [label="get { return SyntaxFacts.GetText(this.Kind); } 782914"];
4036 [label="this.Kind 782915"];
4037 [label="get { return (SyntaxKind)this.RawKind; } 782916"];
4038 [label="return (SyntaxKind)this.RawKind; 782917"];
4039 [label="return SyntaxFacts.GetText(this.Kind); 782918"];
4040 [label="SyntaxFacts.GetText(this.Kind) 782919"];
4041 [label="param GetText(SyntaxKind kind) 782920"];
4042 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 782921"];
4043 [label="return '~'; 782922"];
4044 [label="FullWidth = this.Text.Length; 782923"];
4045 [label="FullWidth 782924"];
4046 [label="this.flags |= NodeFlags.IsNotMissing; 782925"];
4047 [label="this.flags 782926"];
4048 [label="s_tokensWithNoTrivia[(int)kind].Value 782927"];
4049 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxTokenWithTrivia), r => new SyntaxTokenWithTrivia(r)); 782928"];
4050 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 782929"];
4051 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 782930"];
4052 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 782931"];
4053 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 782932"];
4054 [label="new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace) 782933"];
4055 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 782934"];
4056 [label="param SyntaxTokenWithTrivia(GreenNode leading) 782935"];
4057 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 782936"];
4058 [label="param SyntaxTokenWithTrivia(this) 782937"];
4059 [label="kind 782938"];
4060 [label="param SyntaxTokenWithTrivia(this) 782939"];
4061 [label="param SyntaxToken(SyntaxKind kind) 782940"];
4062 [label="param SyntaxToken(this) 782941"];
4063 [label="kind 782942"];
4064 [label="param SyntaxToken(this) 782943"];
4065 [label="param CSharpSyntaxNode(SyntaxKind kind) 782944"];
4066 [label="param CSharpSyntaxNode(this) 782945"];
4067 [label="kind 782946"];
4068 [label="param CSharpSyntaxNode(this) 782947"];
4069 [label="param CSharpSyntaxNode(this) 782948"];
4070 [label="GreenStats.NoteGreen(this); 782949"];
4071 [label="GreenStats.NoteGreen(this); 782950"];
4072 [label="this.Text 782951"];
4073 [label="get { return SyntaxFacts.GetText(this.Kind); } 782952"];
4074 [label="this.Kind 782953"];
4075 [label="get { return (SyntaxKind)this.RawKind; } 782954"];
4076 [label="return (SyntaxKind)this.RawKind; 782955"];
4077 [label="return SyntaxFacts.GetText(this.Kind); 782956"];
4078 [label="SyntaxFacts.GetText(this.Kind) 782957"];
4079 [label="param GetText(SyntaxKind kind) 782958"];
4080 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 782959"];
4081 [label="return '~'; 782960"];
4082 [label="FullWidth = this.Text.Length; 782961"];
4083 [label="FullWidth 782962"];
4084 [label="this.flags |= NodeFlags.IsNotMissing; 782963"];
4085 [label="this.flags 782964"];
4086 [label="LeadingField 782965"];
4087 [label="TrailingField 782966"];
4088 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 782967"];
4089 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 782968"];
4090 [label="this.AdjustFlagsAndWidth(leading); 782969"];
4091 [label="this.AdjustFlagsAndWidth(leading); 782970"];
4092 [label="this.LeadingField 782971"];
4093 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 782972"];
4094 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 782973"];
4095 [label="this.AdjustFlagsAndWidth(trailing); 782974"];
4096 [label="this.AdjustFlagsAndWidth(trailing); 782975"];
4097 [label="this.TrailingField 782976"];
4098 [label="s_tokensWithElasticTrivia[(int)kind].Value 782977"];
4099 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 782978"];
4100 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 782979"];
4101 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 782980"];
4102 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 782981"];
4103 [label="new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space) 782982"];
4104 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 782983"];
4105 [label="param SyntaxTokenWithTrivia(GreenNode leading) 782984"];
4106 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 782985"];
4107 [label="param SyntaxTokenWithTrivia(this) 782986"];
4108 [label="kind 782987"];
4109 [label="param SyntaxTokenWithTrivia(this) 782988"];
4110 [label="param SyntaxToken(SyntaxKind kind) 782989"];
4111 [label="param SyntaxToken(this) 782990"];
4112 [label="kind 782991"];
4113 [label="param SyntaxToken(this) 782992"];
4114 [label="param CSharpSyntaxNode(SyntaxKind kind) 782993"];
4115 [label="param CSharpSyntaxNode(this) 782994"];
4116 [label="kind 782995"];
4117 [label="param CSharpSyntaxNode(this) 782996"];
4118 [label="param CSharpSyntaxNode(this) 782997"];
4119 [label="GreenStats.NoteGreen(this); 782998"];
4120 [label="GreenStats.NoteGreen(this); 782999"];
4121 [label="this.Text 783000"];
4122 [label="get { return SyntaxFacts.GetText(this.Kind); } 783001"];
4123 [label="this.Kind 783002"];
4124 [label="get { return (SyntaxKind)this.RawKind; } 783003"];
4125 [label="return (SyntaxKind)this.RawKind; 783004"];
4126 [label="return SyntaxFacts.GetText(this.Kind); 783005"];
4127 [label="SyntaxFacts.GetText(this.Kind) 783006"];
4128 [label="param GetText(SyntaxKind kind) 783007"];
4129 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 783008"];
4130 [label="return '~'; 783009"];
4131 [label="FullWidth = this.Text.Length; 783010"];
4132 [label="FullWidth 783011"];
4133 [label="this.flags |= NodeFlags.IsNotMissing; 783012"];
4134 [label="this.flags 783013"];
4135 [label="LeadingField 783014"];
4136 [label="TrailingField 783015"];
4137 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 783016"];
4138 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 783017"];
4139 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 783018"];
4140 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 783019"];
4141 [label="this.AdjustFlagsAndWidth(trailing); 783020"];
4142 [label="this.AdjustFlagsAndWidth(trailing); 783021"];
4143 [label="this.TrailingField 783022"];
4144 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value 783023"];
4145 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 783024"];
4146 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 783025"];
4147 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 783026"];
4148 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 783027"];
4149 [label="new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed) 783028"];
4150 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 783029"];
4151 [label="param SyntaxTokenWithTrivia(GreenNode leading) 783030"];
4152 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 783031"];
4153 [label="param SyntaxTokenWithTrivia(this) 783032"];
4154 [label="kind 783033"];
4155 [label="param SyntaxTokenWithTrivia(this) 783034"];
4156 [label="param SyntaxToken(SyntaxKind kind) 783035"];
4157 [label="param SyntaxToken(this) 783036"];
4158 [label="kind 783037"];
4159 [label="param SyntaxToken(this) 783038"];
4160 [label="param CSharpSyntaxNode(SyntaxKind kind) 783039"];
4161 [label="param CSharpSyntaxNode(this) 783040"];
4162 [label="kind 783041"];
4163 [label="param CSharpSyntaxNode(this) 783042"];
4164 [label="param CSharpSyntaxNode(this) 783043"];
4165 [label="GreenStats.NoteGreen(this); 783044"];
4166 [label="GreenStats.NoteGreen(this); 783045"];
4167 [label="this.Text 783046"];
4168 [label="get { return SyntaxFacts.GetText(this.Kind); } 783047"];
4169 [label="this.Kind 783048"];
4170 [label="get { return (SyntaxKind)this.RawKind; } 783049"];
4171 [label="return (SyntaxKind)this.RawKind; 783050"];
4172 [label="return SyntaxFacts.GetText(this.Kind); 783051"];
4173 [label="SyntaxFacts.GetText(this.Kind) 783052"];
4174 [label="param GetText(SyntaxKind kind) 783053"];
4175 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 783054"];
4176 [label="return '~'; 783055"];
4177 [label="FullWidth = this.Text.Length; 783056"];
4178 [label="FullWidth 783057"];
4179 [label="this.flags |= NodeFlags.IsNotMissing; 783058"];
4180 [label="this.flags 783059"];
4181 [label="LeadingField 783060"];
4182 [label="TrailingField 783061"];
4183 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 783062"];
4184 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 783063"];
4185 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 783064"];
4186 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 783065"];
4187 [label="this.AdjustFlagsAndWidth(trailing); 783066"];
4188 [label="this.AdjustFlagsAndWidth(trailing); 783067"];
4189 [label="this.TrailingField 783068"];
4190 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value 783069"];
4191 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 783070"];
4192 [label="param SyntaxToken(SyntaxKind kind) 783071"];
4193 [label="kind 783072"];
4194 [label="param CSharpSyntaxNode(SyntaxKind kind) 783073"];
4195 [label="kind 783074"];
4196 [label="param CSharpSyntaxNode(this) 783075"];
4197 [label="GreenStats.NoteGreen(this); 783076"];
4198 [label="return (SyntaxKind)this.RawKind; 783077"];
4199 [label="return SyntaxFacts.GetText(this.Kind); 783078"];
4200 [label="param GetText(SyntaxKind kind) 783079"];
4201 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 783080"];
4202 [label="return '!'; 783081"];
4203 [label="FullWidth = this.Text.Length; 783082"];
4204 [label="FullWidth 783083"];
4205 [label="this.flags |= NodeFlags.IsNotMissing; 783084"];
4206 [label="this.flags 783085"];
4207 [label="s_tokensWithNoTrivia[(int)kind].Value 783086"];
4208 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 783087"];
4209 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 783088"];
4210 [label="kind 783089"];
4211 [label="param SyntaxToken(SyntaxKind kind) 783090"];
4212 [label="kind 783091"];
4213 [label="param CSharpSyntaxNode(SyntaxKind kind) 783092"];
4214 [label="kind 783093"];
4215 [label="param CSharpSyntaxNode(this) 783094"];
4216 [label="GreenStats.NoteGreen(this); 783095"];
4217 [label="return (SyntaxKind)this.RawKind; 783096"];
4218 [label="return SyntaxFacts.GetText(this.Kind); 783097"];
4219 [label="param GetText(SyntaxKind kind) 783098"];
4220 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 783099"];
4221 [label="return '!'; 783100"];
4222 [label="FullWidth = this.Text.Length; 783101"];
4223 [label="FullWidth 783102"];
4224 [label="this.flags |= NodeFlags.IsNotMissing; 783103"];
4225 [label="this.flags 783104"];
4226 [label="this.AdjustFlagsAndWidth(leading); 783105"];
4227 [label="s_tokensWithElasticTrivia[(int)kind].Value 783106"];
4228 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 783107"];
4229 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 783108"];
4230 [label="kind 783109"];
4231 [label="param SyntaxToken(SyntaxKind kind) 783110"];
4232 [label="kind 783111"];
4233 [label="param CSharpSyntaxNode(SyntaxKind kind) 783112"];
4234 [label="kind 783113"];
4235 [label="param CSharpSyntaxNode(this) 783114"];
4236 [label="GreenStats.NoteGreen(this); 783115"];
4237 [label="return (SyntaxKind)this.RawKind; 783116"];
4238 [label="return SyntaxFacts.GetText(this.Kind); 783117"];
4239 [label="param GetText(SyntaxKind kind) 783118"];
4240 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 783119"];
4241 [label="return '!'; 783120"];
4242 [label="FullWidth = this.Text.Length; 783121"];
4243 [label="FullWidth 783122"];
4244 [label="this.flags |= NodeFlags.IsNotMissing; 783123"];
4245 [label="this.flags 783124"];
4246 [label="this.AdjustFlagsAndWidth(trailing); 783125"];
4247 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value 783126"];
4248 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 783127"];
4249 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 783128"];
4250 [label="kind 783129"];
4251 [label="param SyntaxToken(SyntaxKind kind) 783130"];
4252 [label="kind 783131"];
4253 [label="param CSharpSyntaxNode(SyntaxKind kind) 783132"];
4254 [label="kind 783133"];
4255 [label="param CSharpSyntaxNode(this) 783134"];
4256 [label="GreenStats.NoteGreen(this); 783135"];
4257 [label="return (SyntaxKind)this.RawKind; 783136"];
4258 [label="return SyntaxFacts.GetText(this.Kind); 783137"];
4259 [label="param GetText(SyntaxKind kind) 783138"];
4260 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 783139"];
4261 [label="return '!'; 783140"];
4262 [label="FullWidth = this.Text.Length; 783141"];
4263 [label="FullWidth 783142"];
4264 [label="this.flags |= NodeFlags.IsNotMissing; 783143"];
4265 [label="this.flags 783144"];
4266 [label="this.AdjustFlagsAndWidth(trailing); 783145"];
4267 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value 783146"];
4268 [label="return '$'; 783147"];
4269 [label="FullWidth = this.Text.Length; 783148"];
4270 [label="FullWidth 783149"];
4271 [label="return '$'; 783150"];
4272 [label="FullWidth = this.Text.Length; 783151"];
4273 [label="FullWidth 783152"];
4274 [label="this.AdjustFlagsAndWidth(leading); 783153"];
4275 [label="return '$'; 783154"];
4276 [label="FullWidth = this.Text.Length; 783155"];
4277 [label="FullWidth 783156"];
4278 [label="this.AdjustFlagsAndWidth(trailing); 783157"];
4279 [label="return '$'; 783158"];
4280 [label="FullWidth = this.Text.Length; 783159"];
4281 [label="FullWidth 783160"];
4282 [label="this.AdjustFlagsAndWidth(trailing); 783161"];
4283 [label="return '%'; 783162"];
4284 [label="FullWidth = this.Text.Length; 783163"];
4285 [label="FullWidth 783164"];
4286 [label="return '%'; 783165"];
4287 [label="FullWidth = this.Text.Length; 783166"];
4288 [label="FullWidth 783167"];
4289 [label="this.AdjustFlagsAndWidth(leading); 783168"];
4290 [label="return '%'; 783169"];
4291 [label="FullWidth = this.Text.Length; 783170"];
4292 [label="FullWidth 783171"];
4293 [label="this.AdjustFlagsAndWidth(trailing); 783172"];
4294 [label="return '%'; 783173"];
4295 [label="FullWidth = this.Text.Length; 783174"];
4296 [label="FullWidth 783175"];
4297 [label="this.AdjustFlagsAndWidth(trailing); 783176"];
4298 [label="return '^'; 783177"];
4299 [label="FullWidth = this.Text.Length; 783178"];
4300 [label="FullWidth 783179"];
4301 [label="return '^'; 783180"];
4302 [label="FullWidth = this.Text.Length; 783181"];
4303 [label="FullWidth 783182"];
4304 [label="this.AdjustFlagsAndWidth(leading); 783183"];
4305 [label="return '^'; 783184"];
4306 [label="FullWidth = this.Text.Length; 783185"];
4307 [label="FullWidth 783186"];
4308 [label="this.AdjustFlagsAndWidth(trailing); 783187"];
4309 [label="return '^'; 783188"];
4310 [label="FullWidth = this.Text.Length; 783189"];
4311 [label="FullWidth 783190"];
4312 [label="this.AdjustFlagsAndWidth(trailing); 783191"];
4313 [label="return '&'; 783192"];
4314 [label="FullWidth = this.Text.Length; 783193"];
4315 [label="FullWidth 783194"];
4316 [label="return '&'; 783195"];
4317 [label="FullWidth = this.Text.Length; 783196"];
4318 [label="FullWidth 783197"];
4319 [label="this.AdjustFlagsAndWidth(leading); 783198"];
4320 [label="return '&'; 783199"];
4321 [label="FullWidth = this.Text.Length; 783200"];
4322 [label="FullWidth 783201"];
4323 [label="this.AdjustFlagsAndWidth(trailing); 783202"];
4324 [label="return '&'; 783203"];
4325 [label="FullWidth = this.Text.Length; 783204"];
4326 [label="FullWidth 783205"];
4327 [label="this.AdjustFlagsAndWidth(trailing); 783206"];
4328 [label="return '*'; 783207"];
4329 [label="FullWidth = this.Text.Length; 783208"];
4330 [label="FullWidth 783209"];
4331 [label="return '*'; 783210"];
4332 [label="FullWidth = this.Text.Length; 783211"];
4333 [label="FullWidth 783212"];
4334 [label="this.AdjustFlagsAndWidth(leading); 783213"];
4335 [label="return '*'; 783214"];
4336 [label="FullWidth = this.Text.Length; 783215"];
4337 [label="FullWidth 783216"];
4338 [label="this.AdjustFlagsAndWidth(trailing); 783217"];
4339 [label="return '*'; 783218"];
4340 [label="FullWidth = this.Text.Length; 783219"];
4341 [label="FullWidth 783220"];
4342 [label="this.AdjustFlagsAndWidth(trailing); 783221"];
4343 [label="return '('; 783222"];
4344 [label="FullWidth = this.Text.Length; 783223"];
4345 [label="FullWidth 783224"];
4346 [label="return '('; 783225"];
4347 [label="FullWidth = this.Text.Length; 783226"];
4348 [label="FullWidth 783227"];
4349 [label="this.AdjustFlagsAndWidth(leading); 783228"];
4350 [label="return '('; 783229"];
4351 [label="FullWidth = this.Text.Length; 783230"];
4352 [label="FullWidth 783231"];
4353 [label="this.AdjustFlagsAndWidth(trailing); 783232"];
4354 [label="return '('; 783233"];
4355 [label="FullWidth = this.Text.Length; 783234"];
4356 [label="FullWidth 783235"];
4357 [label="this.AdjustFlagsAndWidth(trailing); 783236"];
4358 [label="return ')'; 783237"];
4359 [label="FullWidth = this.Text.Length; 783238"];
4360 [label="FullWidth 783239"];
4361 [label="return ')'; 783240"];
4362 [label="FullWidth = this.Text.Length; 783241"];
4363 [label="FullWidth 783242"];
4364 [label="this.AdjustFlagsAndWidth(leading); 783243"];
4365 [label="return ')'; 783244"];
4366 [label="FullWidth = this.Text.Length; 783245"];
4367 [label="FullWidth 783246"];
4368 [label="this.AdjustFlagsAndWidth(trailing); 783247"];
4369 [label="return ')'; 783248"];
4370 [label="FullWidth = this.Text.Length; 783249"];
4371 [label="FullWidth 783250"];
4372 [label="this.AdjustFlagsAndWidth(trailing); 783251"];
4373 [label="return '-'; 783252"];
4374 [label="FullWidth = this.Text.Length; 783253"];
4375 [label="FullWidth 783254"];
4376 [label="return '-'; 783255"];
4377 [label="FullWidth = this.Text.Length; 783256"];
4378 [label="FullWidth 783257"];
4379 [label="this.AdjustFlagsAndWidth(leading); 783258"];
4380 [label="return '-'; 783259"];
4381 [label="FullWidth = this.Text.Length; 783260"];
4382 [label="FullWidth 783261"];
4383 [label="this.AdjustFlagsAndWidth(trailing); 783262"];
4384 [label="return '-'; 783263"];
4385 [label="FullWidth = this.Text.Length; 783264"];
4386 [label="FullWidth 783265"];
4387 [label="this.AdjustFlagsAndWidth(trailing); 783266"];
4388 [label="return '+'; 783267"];
4389 [label="FullWidth = this.Text.Length; 783268"];
4390 [label="FullWidth 783269"];
4391 [label="return '+'; 783270"];
4392 [label="FullWidth = this.Text.Length; 783271"];
4393 [label="FullWidth 783272"];
4394 [label="this.AdjustFlagsAndWidth(leading); 783273"];
4395 [label="return '+'; 783274"];
4396 [label="FullWidth = this.Text.Length; 783275"];
4397 [label="FullWidth 783276"];
4398 [label="this.AdjustFlagsAndWidth(trailing); 783277"];
4399 [label="return '+'; 783278"];
4400 [label="FullWidth = this.Text.Length; 783279"];
4401 [label="FullWidth 783280"];
4402 [label="this.AdjustFlagsAndWidth(trailing); 783281"];
4403 [label="return '='; 783282"];
4404 [label="FullWidth = this.Text.Length; 783283"];
4405 [label="FullWidth 783284"];
4406 [label="return '='; 783285"];
4407 [label="FullWidth = this.Text.Length; 783286"];
4408 [label="FullWidth 783287"];
4409 [label="this.AdjustFlagsAndWidth(leading); 783288"];
4410 [label="return '='; 783289"];
4411 [label="FullWidth = this.Text.Length; 783290"];
4412 [label="FullWidth 783291"];
4413 [label="this.AdjustFlagsAndWidth(trailing); 783292"];
4414 [label="return '='; 783293"];
4415 [label="FullWidth = this.Text.Length; 783294"];
4416 [label="FullWidth 783295"];
4417 [label="this.AdjustFlagsAndWidth(trailing); 783296"];
4418 [label="return '{'; 783297"];
4419 [label="FullWidth = this.Text.Length; 783298"];
4420 [label="FullWidth 783299"];
4421 [label="return '{'; 783300"];
4422 [label="FullWidth = this.Text.Length; 783301"];
4423 [label="FullWidth 783302"];
4424 [label="this.AdjustFlagsAndWidth(leading); 783303"];
4425 [label="return '{'; 783304"];
4426 [label="FullWidth = this.Text.Length; 783305"];
4427 [label="FullWidth 783306"];
4428 [label="this.AdjustFlagsAndWidth(trailing); 783307"];
4429 [label="return '{'; 783308"];
4430 [label="FullWidth = this.Text.Length; 783309"];
4431 [label="FullWidth 783310"];
4432 [label="this.AdjustFlagsAndWidth(trailing); 783311"];
4433 [label="return '}'; 783312"];
4434 [label="FullWidth = this.Text.Length; 783313"];
4435 [label="FullWidth 783314"];
4436 [label="return '}'; 783315"];
4437 [label="FullWidth = this.Text.Length; 783316"];
4438 [label="FullWidth 783317"];
4439 [label="this.AdjustFlagsAndWidth(leading); 783318"];
4440 [label="return '}'; 783319"];
4441 [label="FullWidth = this.Text.Length; 783320"];
4442 [label="FullWidth 783321"];
4443 [label="this.AdjustFlagsAndWidth(trailing); 783322"];
4444 [label="return '}'; 783323"];
4445 [label="FullWidth = this.Text.Length; 783324"];
4446 [label="FullWidth 783325"];
4447 [label="this.AdjustFlagsAndWidth(trailing); 783326"];
4448 [label="return '['; 783327"];
4449 [label="FullWidth = this.Text.Length; 783328"];
4450 [label="FullWidth 783329"];
4451 [label="return '['; 783330"];
4452 [label="FullWidth = this.Text.Length; 783331"];
4453 [label="FullWidth 783332"];
4454 [label="this.AdjustFlagsAndWidth(leading); 783333"];
4455 [label="return '['; 783334"];
4456 [label="FullWidth = this.Text.Length; 783335"];
4457 [label="FullWidth 783336"];
4458 [label="this.AdjustFlagsAndWidth(trailing); 783337"];
4459 [label="return '['; 783338"];
4460 [label="FullWidth = this.Text.Length; 783339"];
4461 [label="FullWidth 783340"];
4462 [label="this.AdjustFlagsAndWidth(trailing); 783341"];
4463 [label="return ']'; 783342"];
4464 [label="FullWidth = this.Text.Length; 783343"];
4465 [label="FullWidth 783344"];
4466 [label="return ']'; 783345"];
4467 [label="FullWidth = this.Text.Length; 783346"];
4468 [label="FullWidth 783347"];
4469 [label="this.AdjustFlagsAndWidth(leading); 783348"];
4470 [label="return ']'; 783349"];
4471 [label="FullWidth = this.Text.Length; 783350"];
4472 [label="FullWidth 783351"];
4473 [label="this.AdjustFlagsAndWidth(trailing); 783352"];
4474 [label="return ']'; 783353"];
4475 [label="FullWidth = this.Text.Length; 783354"];
4476 [label="FullWidth 783355"];
4477 [label="this.AdjustFlagsAndWidth(trailing); 783356"];
4478 [label="return '|'; 783357"];
4479 [label="FullWidth = this.Text.Length; 783358"];
4480 [label="FullWidth 783359"];
4481 [label="return '|'; 783360"];
4482 [label="FullWidth = this.Text.Length; 783361"];
4483 [label="FullWidth 783362"];
4484 [label="this.AdjustFlagsAndWidth(leading); 783363"];
4485 [label="return '|'; 783364"];
4486 [label="FullWidth = this.Text.Length; 783365"];
4487 [label="FullWidth 783366"];
4488 [label="this.AdjustFlagsAndWidth(trailing); 783367"];
4489 [label="return '|'; 783368"];
4490 [label="FullWidth = this.Text.Length; 783369"];
4491 [label="FullWidth 783370"];
4492 [label="this.AdjustFlagsAndWidth(trailing); 783371"];
4493 [label="return '\\\\'; 783372"];
4494 [label="FullWidth = this.Text.Length; 783373"];
4495 [label="FullWidth 783374"];
4496 [label="return '\\\\'; 783375"];
4497 [label="FullWidth = this.Text.Length; 783376"];
4498 [label="FullWidth 783377"];
4499 [label="this.AdjustFlagsAndWidth(leading); 783378"];
4500 [label="return '\\\\'; 783379"];
4501 [label="FullWidth = this.Text.Length; 783380"];
4502 [label="FullWidth 783381"];
4503 [label="this.AdjustFlagsAndWidth(trailing); 783382"];
4504 [label="return '\\\\'; 783383"];
4505 [label="FullWidth = this.Text.Length; 783384"];
4506 [label="FullWidth 783385"];
4507 [label="this.AdjustFlagsAndWidth(trailing); 783386"];
4508 [label="return ':'; 783387"];
4509 [label="FullWidth = this.Text.Length; 783388"];
4510 [label="FullWidth 783389"];
4511 [label="return ':'; 783390"];
4512 [label="FullWidth = this.Text.Length; 783391"];
4513 [label="FullWidth 783392"];
4514 [label="this.AdjustFlagsAndWidth(leading); 783393"];
4515 [label="return ':'; 783394"];
4516 [label="FullWidth = this.Text.Length; 783395"];
4517 [label="FullWidth 783396"];
4518 [label="this.AdjustFlagsAndWidth(trailing); 783397"];
4519 [label="return ':'; 783398"];
4520 [label="FullWidth = this.Text.Length; 783399"];
4521 [label="FullWidth 783400"];
4522 [label="this.AdjustFlagsAndWidth(trailing); 783401"];
4523 [label="return ';'; 783402"];
4524 [label="FullWidth = this.Text.Length; 783403"];
4525 [label="FullWidth 783404"];
4526 [label="return ';'; 783405"];
4527 [label="FullWidth = this.Text.Length; 783406"];
4528 [label="FullWidth 783407"];
4529 [label="this.AdjustFlagsAndWidth(leading); 783408"];
4530 [label="return ';'; 783409"];
4531 [label="FullWidth = this.Text.Length; 783410"];
4532 [label="FullWidth 783411"];
4533 [label="this.AdjustFlagsAndWidth(trailing); 783412"];
4534 [label="return ';'; 783413"];
4535 [label="FullWidth = this.Text.Length; 783414"];
4536 [label="FullWidth 783415"];
4537 [label="this.AdjustFlagsAndWidth(trailing); 783416"];
4538 [label="return '\\''; 783417"];
4539 [label="FullWidth = this.Text.Length; 783418"];
4540 [label="FullWidth 783419"];
4541 [label="return '\\''; 783420"];
4542 [label="FullWidth = this.Text.Length; 783421"];
4543 [label="FullWidth 783422"];
4544 [label="this.AdjustFlagsAndWidth(leading); 783423"];
4545 [label="return '\\''; 783424"];
4546 [label="FullWidth = this.Text.Length; 783425"];
4547 [label="FullWidth 783426"];
4548 [label="this.AdjustFlagsAndWidth(trailing); 783427"];
4549 [label="return '\\''; 783428"];
4550 [label="FullWidth = this.Text.Length; 783429"];
4551 [label="FullWidth 783430"];
4552 [label="this.AdjustFlagsAndWidth(trailing); 783431"];
4553 [label="return '''; 783432"];
4554 [label="FullWidth = this.Text.Length; 783433"];
4555 [label="FullWidth 783434"];
4556 [label="return '''; 783435"];
4557 [label="FullWidth = this.Text.Length; 783436"];
4558 [label="FullWidth 783437"];
4559 [label="this.AdjustFlagsAndWidth(leading); 783438"];
4560 [label="return '''; 783439"];
4561 [label="FullWidth = this.Text.Length; 783440"];
4562 [label="FullWidth 783441"];
4563 [label="this.AdjustFlagsAndWidth(trailing); 783442"];
4564 [label="return '''; 783443"];
4565 [label="FullWidth = this.Text.Length; 783444"];
4566 [label="FullWidth 783445"];
4567 [label="this.AdjustFlagsAndWidth(trailing); 783446"];
4568 [label="return '<'; 783447"];
4569 [label="FullWidth = this.Text.Length; 783448"];
4570 [label="FullWidth 783449"];
4571 [label="return '<'; 783450"];
4572 [label="FullWidth = this.Text.Length; 783451"];
4573 [label="FullWidth 783452"];
4574 [label="this.AdjustFlagsAndWidth(leading); 783453"];
4575 [label="return '<'; 783454"];
4576 [label="FullWidth = this.Text.Length; 783455"];
4577 [label="FullWidth 783456"];
4578 [label="this.AdjustFlagsAndWidth(trailing); 783457"];
4579 [label="return '<'; 783458"];
4580 [label="FullWidth = this.Text.Length; 783459"];
4581 [label="FullWidth 783460"];
4582 [label="this.AdjustFlagsAndWidth(trailing); 783461"];
4583 [label="return ','; 783462"];
4584 [label="FullWidth = this.Text.Length; 783463"];
4585 [label="FullWidth 783464"];
4586 [label="return ','; 783465"];
4587 [label="FullWidth = this.Text.Length; 783466"];
4588 [label="FullWidth 783467"];
4589 [label="this.AdjustFlagsAndWidth(leading); 783468"];
4590 [label="return ','; 783469"];
4591 [label="FullWidth = this.Text.Length; 783470"];
4592 [label="FullWidth 783471"];
4593 [label="this.AdjustFlagsAndWidth(trailing); 783472"];
4594 [label="return ','; 783473"];
4595 [label="FullWidth = this.Text.Length; 783474"];
4596 [label="FullWidth 783475"];
4597 [label="this.AdjustFlagsAndWidth(trailing); 783476"];
4598 [label="return '>'; 783477"];
4599 [label="FullWidth = this.Text.Length; 783478"];
4600 [label="FullWidth 783479"];
4601 [label="return '>'; 783480"];
4602 [label="FullWidth = this.Text.Length; 783481"];
4603 [label="FullWidth 783482"];
4604 [label="this.AdjustFlagsAndWidth(leading); 783483"];
4605 [label="return '>'; 783484"];
4606 [label="FullWidth = this.Text.Length; 783485"];
4607 [label="FullWidth 783486"];
4608 [label="this.AdjustFlagsAndWidth(trailing); 783487"];
4609 [label="return '>'; 783488"];
4610 [label="FullWidth = this.Text.Length; 783489"];
4611 [label="FullWidth 783490"];
4612 [label="this.AdjustFlagsAndWidth(trailing); 783491"];
4613 [label="return '.'; 783492"];
4614 [label="FullWidth = this.Text.Length; 783493"];
4615 [label="FullWidth 783494"];
4616 [label="return '.'; 783495"];
4617 [label="FullWidth = this.Text.Length; 783496"];
4618 [label="FullWidth 783497"];
4619 [label="this.AdjustFlagsAndWidth(leading); 783498"];
4620 [label="return '.'; 783499"];
4621 [label="FullWidth = this.Text.Length; 783500"];
4622 [label="FullWidth 783501"];
4623 [label="this.AdjustFlagsAndWidth(trailing); 783502"];
4624 [label="return '.'; 783503"];
4625 [label="FullWidth = this.Text.Length; 783504"];
4626 [label="FullWidth 783505"];
4627 [label="this.AdjustFlagsAndWidth(trailing); 783506"];
4628 [label="return '?'; 783507"];
4629 [label="FullWidth = this.Text.Length; 783508"];
4630 [label="FullWidth 783509"];
4631 [label="return '?'; 783510"];
4632 [label="FullWidth = this.Text.Length; 783511"];
4633 [label="FullWidth 783512"];
4634 [label="this.AdjustFlagsAndWidth(leading); 783513"];
4635 [label="return '?'; 783514"];
4636 [label="FullWidth = this.Text.Length; 783515"];
4637 [label="FullWidth 783516"];
4638 [label="this.AdjustFlagsAndWidth(trailing); 783517"];
4639 [label="return '?'; 783518"];
4640 [label="FullWidth = this.Text.Length; 783519"];
4641 [label="FullWidth 783520"];
4642 [label="this.AdjustFlagsAndWidth(trailing); 783521"];
4643 [label="return '#'; 783522"];
4644 [label="FullWidth = this.Text.Length; 783523"];
4645 [label="FullWidth 783524"];
4646 [label="return '#'; 783525"];
4647 [label="FullWidth = this.Text.Length; 783526"];
4648 [label="FullWidth 783527"];
4649 [label="this.AdjustFlagsAndWidth(leading); 783528"];
4650 [label="return '#'; 783529"];
4651 [label="FullWidth = this.Text.Length; 783530"];
4652 [label="FullWidth 783531"];
4653 [label="this.AdjustFlagsAndWidth(trailing); 783532"];
4654 [label="return '#'; 783533"];
4655 [label="FullWidth = this.Text.Length; 783534"];
4656 [label="FullWidth 783535"];
4657 [label="this.AdjustFlagsAndWidth(trailing); 783536"];
4658 [label="return '/'; 783537"];
4659 [label="FullWidth = this.Text.Length; 783538"];
4660 [label="FullWidth 783539"];
4661 [label="return '/'; 783540"];
4662 [label="FullWidth = this.Text.Length; 783541"];
4663 [label="FullWidth 783542"];
4664 [label="this.AdjustFlagsAndWidth(leading); 783543"];
4665 [label="return '/'; 783544"];
4666 [label="FullWidth = this.Text.Length; 783545"];
4667 [label="FullWidth 783546"];
4668 [label="this.AdjustFlagsAndWidth(trailing); 783547"];
4669 [label="return '/'; 783548"];
4670 [label="FullWidth = this.Text.Length; 783549"];
4671 [label="FullWidth 783550"];
4672 [label="this.AdjustFlagsAndWidth(trailing); 783551"];
4673 [label="return '..'; 783552"];
4674 [label="FullWidth = this.Text.Length; 783553"];
4675 [label="FullWidth 783554"];
4676 [label="return '..'; 783555"];
4677 [label="FullWidth = this.Text.Length; 783556"];
4678 [label="FullWidth 783557"];
4679 [label="this.AdjustFlagsAndWidth(leading); 783558"];
4680 [label="return '..'; 783559"];
4681 [label="FullWidth = this.Text.Length; 783560"];
4682 [label="FullWidth 783561"];
4683 [label="this.AdjustFlagsAndWidth(trailing); 783562"];
4684 [label="return '..'; 783563"];
4685 [label="FullWidth = this.Text.Length; 783564"];
4686 [label="FullWidth 783565"];
4687 [label="this.AdjustFlagsAndWidth(trailing); 783566"];
4688 [label="return string.Empty; 783567"];
4689 [label="FullWidth = this.Text.Length; 783568"];
4690 [label="FullWidth 783569"];
4691 [label="return string.Empty; 783570"];
4692 [label="FullWidth = this.Text.Length; 783571"];
4693 [label="FullWidth 783572"];
4694 [label="this.AdjustFlagsAndWidth(leading); 783573"];
4695 [label="return string.Empty; 783574"];
4696 [label="FullWidth = this.Text.Length; 783575"];
4697 [label="FullWidth 783576"];
4698 [label="this.AdjustFlagsAndWidth(trailing); 783577"];
4699 [label="return string.Empty; 783578"];
4700 [label="FullWidth = this.Text.Length; 783579"];
4701 [label="FullWidth 783580"];
4702 [label="this.AdjustFlagsAndWidth(trailing); 783581"];
4703 [label="return '/>'; 783582"];
4704 [label="FullWidth = this.Text.Length; 783583"];
4705 [label="FullWidth 783584"];
4706 [label="return '/>'; 783585"];
4707 [label="FullWidth = this.Text.Length; 783586"];
4708 [label="FullWidth 783587"];
4709 [label="this.AdjustFlagsAndWidth(leading); 783588"];
4710 [label="return '/>'; 783589"];
4711 [label="FullWidth = this.Text.Length; 783590"];
4712 [label="FullWidth 783591"];
4713 [label="this.AdjustFlagsAndWidth(trailing); 783592"];
4714 [label="return '/>'; 783593"];
4715 [label="FullWidth = this.Text.Length; 783594"];
4716 [label="FullWidth 783595"];
4717 [label="this.AdjustFlagsAndWidth(trailing); 783596"];
4718 [label="return '</'; 783597"];
4719 [label="FullWidth = this.Text.Length; 783598"];
4720 [label="FullWidth 783599"];
4721 [label="return '</'; 783600"];
4722 [label="FullWidth = this.Text.Length; 783601"];
4723 [label="FullWidth 783602"];
4724 [label="this.AdjustFlagsAndWidth(leading); 783603"];
4725 [label="return '</'; 783604"];
4726 [label="FullWidth = this.Text.Length; 783605"];
4727 [label="FullWidth 783606"];
4728 [label="this.AdjustFlagsAndWidth(trailing); 783607"];
4729 [label="return '</'; 783608"];
4730 [label="FullWidth = this.Text.Length; 783609"];
4731 [label="FullWidth 783610"];
4732 [label="this.AdjustFlagsAndWidth(trailing); 783611"];
4733 [label="return '<!--'; 783612"];
4734 [label="FullWidth = this.Text.Length; 783613"];
4735 [label="FullWidth 783614"];
4736 [label="return '<!--'; 783615"];
4737 [label="FullWidth = this.Text.Length; 783616"];
4738 [label="FullWidth 783617"];
4739 [label="this.AdjustFlagsAndWidth(leading); 783618"];
4740 [label="return '<!--'; 783619"];
4741 [label="FullWidth = this.Text.Length; 783620"];
4742 [label="FullWidth 783621"];
4743 [label="this.AdjustFlagsAndWidth(trailing); 783622"];
4744 [label="return '<!--'; 783623"];
4745 [label="FullWidth = this.Text.Length; 783624"];
4746 [label="FullWidth 783625"];
4747 [label="this.AdjustFlagsAndWidth(trailing); 783626"];
4748 [label="return '-->'; 783627"];
4749 [label="FullWidth = this.Text.Length; 783628"];
4750 [label="FullWidth 783629"];
4751 [label="return '-->'; 783630"];
4752 [label="FullWidth = this.Text.Length; 783631"];
4753 [label="FullWidth 783632"];
4754 [label="this.AdjustFlagsAndWidth(leading); 783633"];
4755 [label="return '-->'; 783634"];
4756 [label="FullWidth = this.Text.Length; 783635"];
4757 [label="FullWidth 783636"];
4758 [label="this.AdjustFlagsAndWidth(trailing); 783637"];
4759 [label="return '-->'; 783638"];
4760 [label="FullWidth = this.Text.Length; 783639"];
4761 [label="FullWidth 783640"];
4762 [label="this.AdjustFlagsAndWidth(trailing); 783641"];
4763 [label="return '<![CDATA['; 783642"];
4764 [label="FullWidth = this.Text.Length; 783643"];
4765 [label="FullWidth 783644"];
4766 [label="return '<![CDATA['; 783645"];
4767 [label="FullWidth = this.Text.Length; 783646"];
4768 [label="FullWidth 783647"];
4769 [label="this.AdjustFlagsAndWidth(leading); 783648"];
4770 [label="return '<![CDATA['; 783649"];
4771 [label="FullWidth = this.Text.Length; 783650"];
4772 [label="FullWidth 783651"];
4773 [label="this.AdjustFlagsAndWidth(trailing); 783652"];
4774 [label="return '<![CDATA['; 783653"];
4775 [label="FullWidth = this.Text.Length; 783654"];
4776 [label="FullWidth 783655"];
4777 [label="this.AdjustFlagsAndWidth(trailing); 783656"];
4778 [label="return ']]>'; 783657"];
4779 [label="FullWidth = this.Text.Length; 783658"];
4780 [label="FullWidth 783659"];
4781 [label="return ']]>'; 783660"];
4782 [label="FullWidth = this.Text.Length; 783661"];
4783 [label="FullWidth 783662"];
4784 [label="this.AdjustFlagsAndWidth(leading); 783663"];
4785 [label="return ']]>'; 783664"];
4786 [label="FullWidth = this.Text.Length; 783665"];
4787 [label="FullWidth 783666"];
4788 [label="this.AdjustFlagsAndWidth(trailing); 783667"];
4789 [label="return ']]>'; 783668"];
4790 [label="FullWidth = this.Text.Length; 783669"];
4791 [label="FullWidth 783670"];
4792 [label="this.AdjustFlagsAndWidth(trailing); 783671"];
4793 [label="return '<?'; 783672"];
4794 [label="FullWidth = this.Text.Length; 783673"];
4795 [label="FullWidth 783674"];
4796 [label="return '<?'; 783675"];
4797 [label="FullWidth = this.Text.Length; 783676"];
4798 [label="FullWidth 783677"];
4799 [label="this.AdjustFlagsAndWidth(leading); 783678"];
4800 [label="return '<?'; 783679"];
4801 [label="FullWidth = this.Text.Length; 783680"];
4802 [label="FullWidth 783681"];
4803 [label="this.AdjustFlagsAndWidth(trailing); 783682"];
4804 [label="return '<?'; 783683"];
4805 [label="FullWidth = this.Text.Length; 783684"];
4806 [label="FullWidth 783685"];
4807 [label="this.AdjustFlagsAndWidth(trailing); 783686"];
4808 [label="return '?>'; 783687"];
4809 [label="FullWidth = this.Text.Length; 783688"];
4810 [label="FullWidth 783689"];
4811 [label="return '?>'; 783690"];
4812 [label="FullWidth = this.Text.Length; 783691"];
4813 [label="FullWidth 783692"];
4814 [label="this.AdjustFlagsAndWidth(leading); 783693"];
4815 [label="return '?>'; 783694"];
4816 [label="FullWidth = this.Text.Length; 783695"];
4817 [label="FullWidth 783696"];
4818 [label="this.AdjustFlagsAndWidth(trailing); 783697"];
4819 [label="return '?>'; 783698"];
4820 [label="FullWidth = this.Text.Length; 783699"];
4821 [label="FullWidth 783700"];
4822 [label="this.AdjustFlagsAndWidth(trailing); 783701"];
4823 [label="return '||'; 783702"];
4824 [label="FullWidth = this.Text.Length; 783703"];
4825 [label="FullWidth 783704"];
4826 [label="return '||'; 783705"];
4827 [label="FullWidth = this.Text.Length; 783706"];
4828 [label="FullWidth 783707"];
4829 [label="this.AdjustFlagsAndWidth(leading); 783708"];
4830 [label="return '||'; 783709"];
4831 [label="FullWidth = this.Text.Length; 783710"];
4832 [label="FullWidth 783711"];
4833 [label="this.AdjustFlagsAndWidth(trailing); 783712"];
4834 [label="return '||'; 783713"];
4835 [label="FullWidth = this.Text.Length; 783714"];
4836 [label="FullWidth 783715"];
4837 [label="this.AdjustFlagsAndWidth(trailing); 783716"];
4838 [label="return '&&'; 783717"];
4839 [label="FullWidth = this.Text.Length; 783718"];
4840 [label="FullWidth 783719"];
4841 [label="return '&&'; 783720"];
4842 [label="FullWidth = this.Text.Length; 783721"];
4843 [label="FullWidth 783722"];
4844 [label="this.AdjustFlagsAndWidth(leading); 783723"];
4845 [label="return '&&'; 783724"];
4846 [label="FullWidth = this.Text.Length; 783725"];
4847 [label="FullWidth 783726"];
4848 [label="this.AdjustFlagsAndWidth(trailing); 783727"];
4849 [label="return '&&'; 783728"];
4850 [label="FullWidth = this.Text.Length; 783729"];
4851 [label="FullWidth 783730"];
4852 [label="this.AdjustFlagsAndWidth(trailing); 783731"];
4853 [label="return '--'; 783732"];
4854 [label="FullWidth = this.Text.Length; 783733"];
4855 [label="FullWidth 783734"];
4856 [label="return '--'; 783735"];
4857 [label="FullWidth = this.Text.Length; 783736"];
4858 [label="FullWidth 783737"];
4859 [label="this.AdjustFlagsAndWidth(leading); 783738"];
4860 [label="return '--'; 783739"];
4861 [label="FullWidth = this.Text.Length; 783740"];
4862 [label="FullWidth 783741"];
4863 [label="this.AdjustFlagsAndWidth(trailing); 783742"];
4864 [label="return '--'; 783743"];
4865 [label="FullWidth = this.Text.Length; 783744"];
4866 [label="FullWidth 783745"];
4867 [label="this.AdjustFlagsAndWidth(trailing); 783746"];
4868 [label="return '++'; 783747"];
4869 [label="FullWidth = this.Text.Length; 783748"];
4870 [label="FullWidth 783749"];
4871 [label="return '++'; 783750"];
4872 [label="FullWidth = this.Text.Length; 783751"];
4873 [label="FullWidth 783752"];
4874 [label="this.AdjustFlagsAndWidth(leading); 783753"];
4875 [label="return '++'; 783754"];
4876 [label="FullWidth = this.Text.Length; 783755"];
4877 [label="FullWidth 783756"];
4878 [label="this.AdjustFlagsAndWidth(trailing); 783757"];
4879 [label="return '++'; 783758"];
4880 [label="FullWidth = this.Text.Length; 783759"];
4881 [label="FullWidth 783760"];
4882 [label="this.AdjustFlagsAndWidth(trailing); 783761"];
4883 [label="return '::'; 783762"];
4884 [label="FullWidth = this.Text.Length; 783763"];
4885 [label="FullWidth 783764"];
4886 [label="return '::'; 783765"];
4887 [label="FullWidth = this.Text.Length; 783766"];
4888 [label="FullWidth 783767"];
4889 [label="this.AdjustFlagsAndWidth(leading); 783768"];
4890 [label="return '::'; 783769"];
4891 [label="FullWidth = this.Text.Length; 783770"];
4892 [label="FullWidth 783771"];
4893 [label="this.AdjustFlagsAndWidth(trailing); 783772"];
4894 [label="return '::'; 783773"];
4895 [label="FullWidth = this.Text.Length; 783774"];
4896 [label="FullWidth 783775"];
4897 [label="this.AdjustFlagsAndWidth(trailing); 783776"];
4898 [label="return '??'; 783777"];
4899 [label="FullWidth = this.Text.Length; 783778"];
4900 [label="FullWidth 783779"];
4901 [label="return '??'; 783780"];
4902 [label="FullWidth = this.Text.Length; 783781"];
4903 [label="FullWidth 783782"];
4904 [label="this.AdjustFlagsAndWidth(leading); 783783"];
4905 [label="return '??'; 783784"];
4906 [label="FullWidth = this.Text.Length; 783785"];
4907 [label="FullWidth 783786"];
4908 [label="this.AdjustFlagsAndWidth(trailing); 783787"];
4909 [label="return '??'; 783788"];
4910 [label="FullWidth = this.Text.Length; 783789"];
4911 [label="FullWidth 783790"];
4912 [label="this.AdjustFlagsAndWidth(trailing); 783791"];
4913 [label="return '->'; 783792"];
4914 [label="FullWidth = this.Text.Length; 783793"];
4915 [label="FullWidth 783794"];
4916 [label="return '->'; 783795"];
4917 [label="FullWidth = this.Text.Length; 783796"];
4918 [label="FullWidth 783797"];
4919 [label="this.AdjustFlagsAndWidth(leading); 783798"];
4920 [label="return '->'; 783799"];
4921 [label="FullWidth = this.Text.Length; 783800"];
4922 [label="FullWidth 783801"];
4923 [label="this.AdjustFlagsAndWidth(trailing); 783802"];
4924 [label="return '->'; 783803"];
4925 [label="FullWidth = this.Text.Length; 783804"];
4926 [label="FullWidth 783805"];
4927 [label="this.AdjustFlagsAndWidth(trailing); 783806"];
4928 [label="return '!='; 783807"];
4929 [label="FullWidth = this.Text.Length; 783808"];
4930 [label="FullWidth 783809"];
4931 [label="return '!='; 783810"];
4932 [label="FullWidth = this.Text.Length; 783811"];
4933 [label="FullWidth 783812"];
4934 [label="this.AdjustFlagsAndWidth(leading); 783813"];
4935 [label="return '!='; 783814"];
4936 [label="FullWidth = this.Text.Length; 783815"];
4937 [label="FullWidth 783816"];
4938 [label="this.AdjustFlagsAndWidth(trailing); 783817"];
4939 [label="return '!='; 783818"];
4940 [label="FullWidth = this.Text.Length; 783819"];
4941 [label="FullWidth 783820"];
4942 [label="this.AdjustFlagsAndWidth(trailing); 783821"];
4943 [label="return '=='; 783822"];
4944 [label="FullWidth = this.Text.Length; 783823"];
4945 [label="FullWidth 783824"];
4946 [label="return '=='; 783825"];
4947 [label="FullWidth = this.Text.Length; 783826"];
4948 [label="FullWidth 783827"];
4949 [label="this.AdjustFlagsAndWidth(leading); 783828"];
4950 [label="return '=='; 783829"];
4951 [label="FullWidth = this.Text.Length; 783830"];
4952 [label="FullWidth 783831"];
4953 [label="this.AdjustFlagsAndWidth(trailing); 783832"];
4954 [label="return '=='; 783833"];
4955 [label="FullWidth = this.Text.Length; 783834"];
4956 [label="FullWidth 783835"];
4957 [label="this.AdjustFlagsAndWidth(trailing); 783836"];
4958 [label="return '=>'; 783837"];
4959 [label="FullWidth = this.Text.Length; 783838"];
4960 [label="FullWidth 783839"];
4961 [label="return '=>'; 783840"];
4962 [label="FullWidth = this.Text.Length; 783841"];
4963 [label="FullWidth 783842"];
4964 [label="this.AdjustFlagsAndWidth(leading); 783843"];
4965 [label="return '=>'; 783844"];
4966 [label="FullWidth = this.Text.Length; 783845"];
4967 [label="FullWidth 783846"];
4968 [label="this.AdjustFlagsAndWidth(trailing); 783847"];
4969 [label="return '=>'; 783848"];
4970 [label="FullWidth = this.Text.Length; 783849"];
4971 [label="FullWidth 783850"];
4972 [label="this.AdjustFlagsAndWidth(trailing); 783851"];
4973 [label="return '<='; 783852"];
4974 [label="FullWidth = this.Text.Length; 783853"];
4975 [label="FullWidth 783854"];
4976 [label="return '<='; 783855"];
4977 [label="FullWidth = this.Text.Length; 783856"];
4978 [label="FullWidth 783857"];
4979 [label="this.AdjustFlagsAndWidth(leading); 783858"];
4980 [label="return '<='; 783859"];
4981 [label="FullWidth = this.Text.Length; 783860"];
4982 [label="FullWidth 783861"];
4983 [label="this.AdjustFlagsAndWidth(trailing); 783862"];
4984 [label="return '<='; 783863"];
4985 [label="FullWidth = this.Text.Length; 783864"];
4986 [label="FullWidth 783865"];
4987 [label="this.AdjustFlagsAndWidth(trailing); 783866"];
4988 [label="return '<<'; 783867"];
4989 [label="FullWidth = this.Text.Length; 783868"];
4990 [label="FullWidth 783869"];
4991 [label="return '<<'; 783870"];
4992 [label="FullWidth = this.Text.Length; 783871"];
4993 [label="FullWidth 783872"];
4994 [label="this.AdjustFlagsAndWidth(leading); 783873"];
4995 [label="return '<<'; 783874"];
4996 [label="FullWidth = this.Text.Length; 783875"];
4997 [label="FullWidth 783876"];
4998 [label="this.AdjustFlagsAndWidth(trailing); 783877"];
4999 [label="return '<<'; 783878"];
5000 [label="FullWidth = this.Text.Length; 783879"];
5001 [label="FullWidth 783880"];
5002 [label="this.AdjustFlagsAndWidth(trailing); 783881"];
5003 [label="return '<<='; 783882"];
5004 [label="FullWidth = this.Text.Length; 783883"];
5005 [label="FullWidth 783884"];
5006 [label="return '<<='; 783885"];
5007 [label="FullWidth = this.Text.Length; 783886"];
5008 [label="FullWidth 783887"];
5009 [label="this.AdjustFlagsAndWidth(leading); 783888"];
5010 [label="return '<<='; 783889"];
5011 [label="FullWidth = this.Text.Length; 783890"];
5012 [label="FullWidth 783891"];
5013 [label="this.AdjustFlagsAndWidth(trailing); 783892"];
5014 [label="return '<<='; 783893"];
5015 [label="FullWidth = this.Text.Length; 783894"];
5016 [label="FullWidth 783895"];
5017 [label="this.AdjustFlagsAndWidth(trailing); 783896"];
5018 [label="return '>='; 783897"];
5019 [label="FullWidth = this.Text.Length; 783898"];
5020 [label="FullWidth 783899"];
5021 [label="return '>='; 783900"];
5022 [label="FullWidth = this.Text.Length; 783901"];
5023 [label="FullWidth 783902"];
5024 [label="this.AdjustFlagsAndWidth(leading); 783903"];
5025 [label="return '>='; 783904"];
5026 [label="FullWidth = this.Text.Length; 783905"];
5027 [label="FullWidth 783906"];
5028 [label="this.AdjustFlagsAndWidth(trailing); 783907"];
5029 [label="return '>='; 783908"];
5030 [label="FullWidth = this.Text.Length; 783909"];
5031 [label="FullWidth 783910"];
5032 [label="this.AdjustFlagsAndWidth(trailing); 783911"];
5033 [label="return '>>'; 783912"];
5034 [label="FullWidth = this.Text.Length; 783913"];
5035 [label="FullWidth 783914"];
5036 [label="return '>>'; 783915"];
5037 [label="FullWidth = this.Text.Length; 783916"];
5038 [label="FullWidth 783917"];
5039 [label="this.AdjustFlagsAndWidth(leading); 783918"];
5040 [label="return '>>'; 783919"];
5041 [label="FullWidth = this.Text.Length; 783920"];
5042 [label="FullWidth 783921"];
5043 [label="this.AdjustFlagsAndWidth(trailing); 783922"];
5044 [label="return '>>'; 783923"];
5045 [label="FullWidth = this.Text.Length; 783924"];
5046 [label="FullWidth 783925"];
5047 [label="this.AdjustFlagsAndWidth(trailing); 783926"];
5048 [label="return '>>='; 783927"];
5049 [label="FullWidth = this.Text.Length; 783928"];
5050 [label="FullWidth 783929"];
5051 [label="return '>>='; 783930"];
5052 [label="FullWidth = this.Text.Length; 783931"];
5053 [label="FullWidth 783932"];
5054 [label="this.AdjustFlagsAndWidth(leading); 783933"];
5055 [label="return '>>='; 783934"];
5056 [label="FullWidth = this.Text.Length; 783935"];
5057 [label="FullWidth 783936"];
5058 [label="this.AdjustFlagsAndWidth(trailing); 783937"];
5059 [label="return '>>='; 783938"];
5060 [label="FullWidth = this.Text.Length; 783939"];
5061 [label="FullWidth 783940"];
5062 [label="this.AdjustFlagsAndWidth(trailing); 783941"];
5063 [label="return '/='; 783942"];
5064 [label="FullWidth = this.Text.Length; 783943"];
5065 [label="FullWidth 783944"];
5066 [label="return '/='; 783945"];
5067 [label="FullWidth = this.Text.Length; 783946"];
5068 [label="FullWidth 783947"];
5069 [label="this.AdjustFlagsAndWidth(leading); 783948"];
5070 [label="return '/='; 783949"];
5071 [label="FullWidth = this.Text.Length; 783950"];
5072 [label="FullWidth 783951"];
5073 [label="this.AdjustFlagsAndWidth(trailing); 783952"];
5074 [label="return '/='; 783953"];
5075 [label="FullWidth = this.Text.Length; 783954"];
5076 [label="FullWidth 783955"];
5077 [label="this.AdjustFlagsAndWidth(trailing); 783956"];
5078 [label="return '*='; 783957"];
5079 [label="FullWidth = this.Text.Length; 783958"];
5080 [label="FullWidth 783959"];
5081 [label="return '*='; 783960"];
5082 [label="FullWidth = this.Text.Length; 783961"];
5083 [label="FullWidth 783962"];
5084 [label="this.AdjustFlagsAndWidth(leading); 783963"];
5085 [label="return '*='; 783964"];
5086 [label="FullWidth = this.Text.Length; 783965"];
5087 [label="FullWidth 783966"];
5088 [label="this.AdjustFlagsAndWidth(trailing); 783967"];
5089 [label="return '*='; 783968"];
5090 [label="FullWidth = this.Text.Length; 783969"];
5091 [label="FullWidth 783970"];
5092 [label="this.AdjustFlagsAndWidth(trailing); 783971"];
5093 [label="return '|='; 783972"];
5094 [label="FullWidth = this.Text.Length; 783973"];
5095 [label="FullWidth 783974"];
5096 [label="return '|='; 783975"];
5097 [label="FullWidth = this.Text.Length; 783976"];
5098 [label="FullWidth 783977"];
5099 [label="this.AdjustFlagsAndWidth(leading); 783978"];
5100 [label="return '|='; 783979"];
5101 [label="FullWidth = this.Text.Length; 783980"];
5102 [label="FullWidth 783981"];
5103 [label="this.AdjustFlagsAndWidth(trailing); 783982"];
5104 [label="return '|='; 783983"];
5105 [label="FullWidth = this.Text.Length; 783984"];
5106 [label="FullWidth 783985"];
5107 [label="this.AdjustFlagsAndWidth(trailing); 783986"];
5108 [label="return '&='; 783987"];
5109 [label="FullWidth = this.Text.Length; 783988"];
5110 [label="FullWidth 783989"];
5111 [label="return '&='; 783990"];
5112 [label="FullWidth = this.Text.Length; 783991"];
5113 [label="FullWidth 783992"];
5114 [label="this.AdjustFlagsAndWidth(leading); 783993"];
5115 [label="return '&='; 783994"];
5116 [label="FullWidth = this.Text.Length; 783995"];
5117 [label="FullWidth 783996"];
5118 [label="this.AdjustFlagsAndWidth(trailing); 783997"];
5119 [label="return '&='; 783998"];
5120 [label="FullWidth = this.Text.Length; 783999"];
5121 [label="FullWidth 784000"];
5122 [label="this.AdjustFlagsAndWidth(trailing); 784001"];
5123 [label="return '+='; 784002"];
5124 [label="FullWidth = this.Text.Length; 784003"];
5125 [label="FullWidth 784004"];
5126 [label="return '+='; 784005"];
5127 [label="FullWidth = this.Text.Length; 784006"];
5128 [label="FullWidth 784007"];
5129 [label="this.AdjustFlagsAndWidth(leading); 784008"];
5130 [label="return '+='; 784009"];
5131 [label="FullWidth = this.Text.Length; 784010"];
5132 [label="FullWidth 784011"];
5133 [label="this.AdjustFlagsAndWidth(trailing); 784012"];
5134 [label="return '+='; 784013"];
5135 [label="FullWidth = this.Text.Length; 784014"];
5136 [label="FullWidth 784015"];
5137 [label="this.AdjustFlagsAndWidth(trailing); 784016"];
5138 [label="return '-='; 784017"];
5139 [label="FullWidth = this.Text.Length; 784018"];
5140 [label="FullWidth 784019"];
5141 [label="return '-='; 784020"];
5142 [label="FullWidth = this.Text.Length; 784021"];
5143 [label="FullWidth 784022"];
5144 [label="this.AdjustFlagsAndWidth(leading); 784023"];
5145 [label="return '-='; 784024"];
5146 [label="FullWidth = this.Text.Length; 784025"];
5147 [label="FullWidth 784026"];
5148 [label="this.AdjustFlagsAndWidth(trailing); 784027"];
5149 [label="return '-='; 784028"];
5150 [label="FullWidth = this.Text.Length; 784029"];
5151 [label="FullWidth 784030"];
5152 [label="this.AdjustFlagsAndWidth(trailing); 784031"];
5153 [label="return '^='; 784032"];
5154 [label="FullWidth = this.Text.Length; 784033"];
5155 [label="FullWidth 784034"];
5156 [label="return '^='; 784035"];
5157 [label="FullWidth = this.Text.Length; 784036"];
5158 [label="FullWidth 784037"];
5159 [label="this.AdjustFlagsAndWidth(leading); 784038"];
5160 [label="return '^='; 784039"];
5161 [label="FullWidth = this.Text.Length; 784040"];
5162 [label="FullWidth 784041"];
5163 [label="this.AdjustFlagsAndWidth(trailing); 784042"];
5164 [label="return '^='; 784043"];
5165 [label="FullWidth = this.Text.Length; 784044"];
5166 [label="FullWidth 784045"];
5167 [label="this.AdjustFlagsAndWidth(trailing); 784046"];
5168 [label="return '%='; 784047"];
5169 [label="FullWidth = this.Text.Length; 784048"];
5170 [label="FullWidth 784049"];
5171 [label="return '%='; 784050"];
5172 [label="FullWidth = this.Text.Length; 784051"];
5173 [label="FullWidth 784052"];
5174 [label="this.AdjustFlagsAndWidth(leading); 784053"];
5175 [label="return '%='; 784054"];
5176 [label="FullWidth = this.Text.Length; 784055"];
5177 [label="FullWidth 784056"];
5178 [label="this.AdjustFlagsAndWidth(trailing); 784057"];
5179 [label="return '%='; 784058"];
5180 [label="FullWidth = this.Text.Length; 784059"];
5181 [label="FullWidth 784060"];
5182 [label="this.AdjustFlagsAndWidth(trailing); 784061"];
5183 [label="return '??='; 784062"];
5184 [label="FullWidth = this.Text.Length; 784063"];
5185 [label="FullWidth 784064"];
5186 [label="return '??='; 784065"];
5187 [label="FullWidth = this.Text.Length; 784066"];
5188 [label="FullWidth 784067"];
5189 [label="this.AdjustFlagsAndWidth(leading); 784068"];
5190 [label="return '??='; 784069"];
5191 [label="FullWidth = this.Text.Length; 784070"];
5192 [label="FullWidth 784071"];
5193 [label="this.AdjustFlagsAndWidth(trailing); 784072"];
5194 [label="return '??='; 784073"];
5195 [label="FullWidth = this.Text.Length; 784074"];
5196 [label="FullWidth 784075"];
5197 [label="this.AdjustFlagsAndWidth(trailing); 784076"];
5198 [label="return 'bool'; 784077"];
5199 [label="FullWidth = this.Text.Length; 784078"];
5200 [label="FullWidth 784079"];
5201 [label="return 'bool'; 784080"];
5202 [label="FullWidth = this.Text.Length; 784081"];
5203 [label="FullWidth 784082"];
5204 [label="this.AdjustFlagsAndWidth(leading); 784083"];
5205 [label="return 'bool'; 784084"];
5206 [label="FullWidth = this.Text.Length; 784085"];
5207 [label="FullWidth 784086"];
5208 [label="this.AdjustFlagsAndWidth(trailing); 784087"];
5209 [label="return 'bool'; 784088"];
5210 [label="FullWidth = this.Text.Length; 784089"];
5211 [label="FullWidth 784090"];
5212 [label="this.AdjustFlagsAndWidth(trailing); 784091"];
5213 [label="return 'byte'; 784092"];
5214 [label="FullWidth = this.Text.Length; 784093"];
5215 [label="FullWidth 784094"];
5216 [label="return 'byte'; 784095"];
5217 [label="FullWidth = this.Text.Length; 784096"];
5218 [label="FullWidth 784097"];
5219 [label="this.AdjustFlagsAndWidth(leading); 784098"];
5220 [label="return 'byte'; 784099"];
5221 [label="FullWidth = this.Text.Length; 784100"];
5222 [label="FullWidth 784101"];
5223 [label="this.AdjustFlagsAndWidth(trailing); 784102"];
5224 [label="return 'byte'; 784103"];
5225 [label="FullWidth = this.Text.Length; 784104"];
5226 [label="FullWidth 784105"];
5227 [label="this.AdjustFlagsAndWidth(trailing); 784106"];
5228 [label="return 'sbyte'; 784107"];
5229 [label="FullWidth = this.Text.Length; 784108"];
5230 [label="FullWidth 784109"];
5231 [label="return 'sbyte'; 784110"];
5232 [label="FullWidth = this.Text.Length; 784111"];
5233 [label="FullWidth 784112"];
5234 [label="this.AdjustFlagsAndWidth(leading); 784113"];
5235 [label="return 'sbyte'; 784114"];
5236 [label="FullWidth = this.Text.Length; 784115"];
5237 [label="FullWidth 784116"];
5238 [label="this.AdjustFlagsAndWidth(trailing); 784117"];
5239 [label="return 'sbyte'; 784118"];
5240 [label="FullWidth = this.Text.Length; 784119"];
5241 [label="FullWidth 784120"];
5242 [label="this.AdjustFlagsAndWidth(trailing); 784121"];
5243 [label="return 'short'; 784122"];
5244 [label="FullWidth = this.Text.Length; 784123"];
5245 [label="FullWidth 784124"];
5246 [label="return 'short'; 784125"];
5247 [label="FullWidth = this.Text.Length; 784126"];
5248 [label="FullWidth 784127"];
5249 [label="this.AdjustFlagsAndWidth(leading); 784128"];
5250 [label="return 'short'; 784129"];
5251 [label="FullWidth = this.Text.Length; 784130"];
5252 [label="FullWidth 784131"];
5253 [label="this.AdjustFlagsAndWidth(trailing); 784132"];
5254 [label="return 'short'; 784133"];
5255 [label="FullWidth = this.Text.Length; 784134"];
5256 [label="FullWidth 784135"];
5257 [label="this.AdjustFlagsAndWidth(trailing); 784136"];
5258 [label="return 'ushort'; 784137"];
5259 [label="FullWidth = this.Text.Length; 784138"];
5260 [label="FullWidth 784139"];
5261 [label="return 'ushort'; 784140"];
5262 [label="FullWidth = this.Text.Length; 784141"];
5263 [label="FullWidth 784142"];
5264 [label="this.AdjustFlagsAndWidth(leading); 784143"];
5265 [label="return 'ushort'; 784144"];
5266 [label="FullWidth = this.Text.Length; 784145"];
5267 [label="FullWidth 784146"];
5268 [label="this.AdjustFlagsAndWidth(trailing); 784147"];
5269 [label="return 'ushort'; 784148"];
5270 [label="FullWidth = this.Text.Length; 784149"];
5271 [label="FullWidth 784150"];
5272 [label="this.AdjustFlagsAndWidth(trailing); 784151"];
5273 [label="return 'int'; 784152"];
5274 [label="FullWidth = this.Text.Length; 784153"];
5275 [label="FullWidth 784154"];
5276 [label="return 'int'; 784155"];
5277 [label="FullWidth = this.Text.Length; 784156"];
5278 [label="FullWidth 784157"];
5279 [label="this.AdjustFlagsAndWidth(leading); 784158"];
5280 [label="return 'int'; 784159"];
5281 [label="FullWidth = this.Text.Length; 784160"];
5282 [label="FullWidth 784161"];
5283 [label="this.AdjustFlagsAndWidth(trailing); 784162"];
5284 [label="return 'int'; 784163"];
5285 [label="FullWidth = this.Text.Length; 784164"];
5286 [label="FullWidth 784165"];
5287 [label="this.AdjustFlagsAndWidth(trailing); 784166"];
5288 [label="return 'uint'; 784167"];
5289 [label="FullWidth = this.Text.Length; 784168"];
5290 [label="FullWidth 784169"];
5291 [label="return 'uint'; 784170"];
5292 [label="FullWidth = this.Text.Length; 784171"];
5293 [label="FullWidth 784172"];
5294 [label="this.AdjustFlagsAndWidth(leading); 784173"];
5295 [label="return 'uint'; 784174"];
5296 [label="FullWidth = this.Text.Length; 784175"];
5297 [label="FullWidth 784176"];
5298 [label="this.AdjustFlagsAndWidth(trailing); 784177"];
5299 [label="return 'uint'; 784178"];
5300 [label="FullWidth = this.Text.Length; 784179"];
5301 [label="FullWidth 784180"];
5302 [label="this.AdjustFlagsAndWidth(trailing); 784181"];
5303 [label="return 'long'; 784182"];
5304 [label="FullWidth = this.Text.Length; 784183"];
5305 [label="FullWidth 784184"];
5306 [label="return 'long'; 784185"];
5307 [label="FullWidth = this.Text.Length; 784186"];
5308 [label="FullWidth 784187"];
5309 [label="this.AdjustFlagsAndWidth(leading); 784188"];
5310 [label="return 'long'; 784189"];
5311 [label="FullWidth = this.Text.Length; 784190"];
5312 [label="FullWidth 784191"];
5313 [label="this.AdjustFlagsAndWidth(trailing); 784192"];
5314 [label="return 'long'; 784193"];
5315 [label="FullWidth = this.Text.Length; 784194"];
5316 [label="FullWidth 784195"];
5317 [label="this.AdjustFlagsAndWidth(trailing); 784196"];
5318 [label="return 'ulong'; 784197"];
5319 [label="FullWidth = this.Text.Length; 784198"];
5320 [label="FullWidth 784199"];
5321 [label="return 'ulong'; 784200"];
5322 [label="FullWidth = this.Text.Length; 784201"];
5323 [label="FullWidth 784202"];
5324 [label="this.AdjustFlagsAndWidth(leading); 784203"];
5325 [label="return 'ulong'; 784204"];
5326 [label="FullWidth = this.Text.Length; 784205"];
5327 [label="FullWidth 784206"];
5328 [label="this.AdjustFlagsAndWidth(trailing); 784207"];
5329 [label="return 'ulong'; 784208"];
5330 [label="FullWidth = this.Text.Length; 784209"];
5331 [label="FullWidth 784210"];
5332 [label="this.AdjustFlagsAndWidth(trailing); 784211"];
5333 [label="return 'double'; 784212"];
5334 [label="FullWidth = this.Text.Length; 784213"];
5335 [label="FullWidth 784214"];
5336 [label="return 'double'; 784215"];
5337 [label="FullWidth = this.Text.Length; 784216"];
5338 [label="FullWidth 784217"];
5339 [label="this.AdjustFlagsAndWidth(leading); 784218"];
5340 [label="return 'double'; 784219"];
5341 [label="FullWidth = this.Text.Length; 784220"];
5342 [label="FullWidth 784221"];
5343 [label="this.AdjustFlagsAndWidth(trailing); 784222"];
5344 [label="return 'double'; 784223"];
5345 [label="FullWidth = this.Text.Length; 784224"];
5346 [label="FullWidth 784225"];
5347 [label="this.AdjustFlagsAndWidth(trailing); 784226"];
5348 [label="return 'float'; 784227"];
5349 [label="FullWidth = this.Text.Length; 784228"];
5350 [label="FullWidth 784229"];
5351 [label="return 'float'; 784230"];
5352 [label="FullWidth = this.Text.Length; 784231"];
5353 [label="FullWidth 784232"];
5354 [label="this.AdjustFlagsAndWidth(leading); 784233"];
5355 [label="return 'float'; 784234"];
5356 [label="FullWidth = this.Text.Length; 784235"];
5357 [label="FullWidth 784236"];
5358 [label="this.AdjustFlagsAndWidth(trailing); 784237"];
5359 [label="return 'float'; 784238"];
5360 [label="FullWidth = this.Text.Length; 784239"];
5361 [label="FullWidth 784240"];
5362 [label="this.AdjustFlagsAndWidth(trailing); 784241"];
5363 [label="return 'decimal'; 784242"];
5364 [label="FullWidth = this.Text.Length; 784243"];
5365 [label="FullWidth 784244"];
5366 [label="return 'decimal'; 784245"];
5367 [label="FullWidth = this.Text.Length; 784246"];
5368 [label="FullWidth 784247"];
5369 [label="this.AdjustFlagsAndWidth(leading); 784248"];
5370 [label="return 'decimal'; 784249"];
5371 [label="FullWidth = this.Text.Length; 784250"];
5372 [label="FullWidth 784251"];
5373 [label="this.AdjustFlagsAndWidth(trailing); 784252"];
5374 [label="return 'decimal'; 784253"];
5375 [label="FullWidth = this.Text.Length; 784254"];
5376 [label="FullWidth 784255"];
5377 [label="this.AdjustFlagsAndWidth(trailing); 784256"];
5378 [label="return 'string'; 784257"];
5379 [label="FullWidth = this.Text.Length; 784258"];
5380 [label="FullWidth 784259"];
5381 [label="return 'string'; 784260"];
5382 [label="FullWidth = this.Text.Length; 784261"];
5383 [label="FullWidth 784262"];
5384 [label="this.AdjustFlagsAndWidth(leading); 784263"];
5385 [label="return 'string'; 784264"];
5386 [label="FullWidth = this.Text.Length; 784265"];
5387 [label="FullWidth 784266"];
5388 [label="this.AdjustFlagsAndWidth(trailing); 784267"];
5389 [label="return 'string'; 784268"];
5390 [label="FullWidth = this.Text.Length; 784269"];
5391 [label="FullWidth 784270"];
5392 [label="this.AdjustFlagsAndWidth(trailing); 784271"];
5393 [label="return 'char'; 784272"];
5394 [label="FullWidth = this.Text.Length; 784273"];
5395 [label="FullWidth 784274"];
5396 [label="return 'char'; 784275"];
5397 [label="FullWidth = this.Text.Length; 784276"];
5398 [label="FullWidth 784277"];
5399 [label="this.AdjustFlagsAndWidth(leading); 784278"];
5400 [label="return 'char'; 784279"];
5401 [label="FullWidth = this.Text.Length; 784280"];
5402 [label="FullWidth 784281"];
5403 [label="this.AdjustFlagsAndWidth(trailing); 784282"];
5404 [label="return 'char'; 784283"];
5405 [label="FullWidth = this.Text.Length; 784284"];
5406 [label="FullWidth 784285"];
5407 [label="this.AdjustFlagsAndWidth(trailing); 784286"];
5408 [label="return 'void'; 784287"];
5409 [label="FullWidth = this.Text.Length; 784288"];
5410 [label="FullWidth 784289"];
5411 [label="return 'void'; 784290"];
5412 [label="FullWidth = this.Text.Length; 784291"];
5413 [label="FullWidth 784292"];
5414 [label="this.AdjustFlagsAndWidth(leading); 784293"];
5415 [label="return 'void'; 784294"];
5416 [label="FullWidth = this.Text.Length; 784295"];
5417 [label="FullWidth 784296"];
5418 [label="this.AdjustFlagsAndWidth(trailing); 784297"];
5419 [label="return 'void'; 784298"];
5420 [label="FullWidth = this.Text.Length; 784299"];
5421 [label="FullWidth 784300"];
5422 [label="this.AdjustFlagsAndWidth(trailing); 784301"];
5423 [label="return 'object'; 784302"];
5424 [label="FullWidth = this.Text.Length; 784303"];
5425 [label="FullWidth 784304"];
5426 [label="return 'object'; 784305"];
5427 [label="FullWidth = this.Text.Length; 784306"];
5428 [label="FullWidth 784307"];
5429 [label="this.AdjustFlagsAndWidth(leading); 784308"];
5430 [label="return 'object'; 784309"];
5431 [label="FullWidth = this.Text.Length; 784310"];
5432 [label="FullWidth 784311"];
5433 [label="this.AdjustFlagsAndWidth(trailing); 784312"];
5434 [label="return 'object'; 784313"];
5435 [label="FullWidth = this.Text.Length; 784314"];
5436 [label="FullWidth 784315"];
5437 [label="this.AdjustFlagsAndWidth(trailing); 784316"];
5438 [label="return 'typeof'; 784317"];
5439 [label="FullWidth = this.Text.Length; 784318"];
5440 [label="FullWidth 784319"];
5441 [label="return 'typeof'; 784320"];
5442 [label="FullWidth = this.Text.Length; 784321"];
5443 [label="FullWidth 784322"];
5444 [label="this.AdjustFlagsAndWidth(leading); 784323"];
5445 [label="return 'typeof'; 784324"];
5446 [label="FullWidth = this.Text.Length; 784325"];
5447 [label="FullWidth 784326"];
5448 [label="this.AdjustFlagsAndWidth(trailing); 784327"];
5449 [label="return 'typeof'; 784328"];
5450 [label="FullWidth = this.Text.Length; 784329"];
5451 [label="FullWidth 784330"];
5452 [label="this.AdjustFlagsAndWidth(trailing); 784331"];
5453 [label="return 'sizeof'; 784332"];
5454 [label="FullWidth = this.Text.Length; 784333"];
5455 [label="FullWidth 784334"];
5456 [label="return 'sizeof'; 784335"];
5457 [label="FullWidth = this.Text.Length; 784336"];
5458 [label="FullWidth 784337"];
5459 [label="this.AdjustFlagsAndWidth(leading); 784338"];
5460 [label="return 'sizeof'; 784339"];
5461 [label="FullWidth = this.Text.Length; 784340"];
5462 [label="FullWidth 784341"];
5463 [label="this.AdjustFlagsAndWidth(trailing); 784342"];
5464 [label="return 'sizeof'; 784343"];
5465 [label="FullWidth = this.Text.Length; 784344"];
5466 [label="FullWidth 784345"];
5467 [label="this.AdjustFlagsAndWidth(trailing); 784346"];
5468 [label="return 'null'; 784347"];
5469 [label="FullWidth = this.Text.Length; 784348"];
5470 [label="FullWidth 784349"];
5471 [label="return 'null'; 784350"];
5472 [label="FullWidth = this.Text.Length; 784351"];
5473 [label="FullWidth 784352"];
5474 [label="this.AdjustFlagsAndWidth(leading); 784353"];
5475 [label="return 'null'; 784354"];
5476 [label="FullWidth = this.Text.Length; 784355"];
5477 [label="FullWidth 784356"];
5478 [label="this.AdjustFlagsAndWidth(trailing); 784357"];
5479 [label="return 'null'; 784358"];
5480 [label="FullWidth = this.Text.Length; 784359"];
5481 [label="FullWidth 784360"];
5482 [label="this.AdjustFlagsAndWidth(trailing); 784361"];
5483 [label="return 'true'; 784362"];
5484 [label="FullWidth = this.Text.Length; 784363"];
5485 [label="FullWidth 784364"];
5486 [label="return 'true'; 784365"];
5487 [label="FullWidth = this.Text.Length; 784366"];
5488 [label="FullWidth 784367"];
5489 [label="this.AdjustFlagsAndWidth(leading); 784368"];
5490 [label="return 'true'; 784369"];
5491 [label="FullWidth = this.Text.Length; 784370"];
5492 [label="FullWidth 784371"];
5493 [label="this.AdjustFlagsAndWidth(trailing); 784372"];
5494 [label="return 'true'; 784373"];
5495 [label="FullWidth = this.Text.Length; 784374"];
5496 [label="FullWidth 784375"];
5497 [label="this.AdjustFlagsAndWidth(trailing); 784376"];
5498 [label="return 'false'; 784377"];
5499 [label="FullWidth = this.Text.Length; 784378"];
5500 [label="FullWidth 784379"];
5501 [label="return 'false'; 784380"];
5502 [label="FullWidth = this.Text.Length; 784381"];
5503 [label="FullWidth 784382"];
5504 [label="this.AdjustFlagsAndWidth(leading); 784383"];
5505 [label="return 'false'; 784384"];
5506 [label="FullWidth = this.Text.Length; 784385"];
5507 [label="FullWidth 784386"];
5508 [label="this.AdjustFlagsAndWidth(trailing); 784387"];
5509 [label="return 'false'; 784388"];
5510 [label="FullWidth = this.Text.Length; 784389"];
5511 [label="FullWidth 784390"];
5512 [label="this.AdjustFlagsAndWidth(trailing); 784391"];
5513 [label="return 'if'; 784392"];
5514 [label="FullWidth = this.Text.Length; 784393"];
5515 [label="FullWidth 784394"];
5516 [label="return 'if'; 784395"];
5517 [label="FullWidth = this.Text.Length; 784396"];
5518 [label="FullWidth 784397"];
5519 [label="this.AdjustFlagsAndWidth(leading); 784398"];
5520 [label="return 'if'; 784399"];
5521 [label="FullWidth = this.Text.Length; 784400"];
5522 [label="FullWidth 784401"];
5523 [label="this.AdjustFlagsAndWidth(trailing); 784402"];
5524 [label="return 'if'; 784403"];
5525 [label="FullWidth = this.Text.Length; 784404"];
5526 [label="FullWidth 784405"];
5527 [label="this.AdjustFlagsAndWidth(trailing); 784406"];
5528 [label="return 'else'; 784407"];
5529 [label="FullWidth = this.Text.Length; 784408"];
5530 [label="FullWidth 784409"];
5531 [label="return 'else'; 784410"];
5532 [label="FullWidth = this.Text.Length; 784411"];
5533 [label="FullWidth 784412"];
5534 [label="this.AdjustFlagsAndWidth(leading); 784413"];
5535 [label="return 'else'; 784414"];
5536 [label="FullWidth = this.Text.Length; 784415"];
5537 [label="FullWidth 784416"];
5538 [label="this.AdjustFlagsAndWidth(trailing); 784417"];
5539 [label="return 'else'; 784418"];
5540 [label="FullWidth = this.Text.Length; 784419"];
5541 [label="FullWidth 784420"];
5542 [label="this.AdjustFlagsAndWidth(trailing); 784421"];
5543 [label="return 'while'; 784422"];
5544 [label="FullWidth = this.Text.Length; 784423"];
5545 [label="FullWidth 784424"];
5546 [label="return 'while'; 784425"];
5547 [label="FullWidth = this.Text.Length; 784426"];
5548 [label="FullWidth 784427"];
5549 [label="this.AdjustFlagsAndWidth(leading); 784428"];
5550 [label="return 'while'; 784429"];
5551 [label="FullWidth = this.Text.Length; 784430"];
5552 [label="FullWidth 784431"];
5553 [label="this.AdjustFlagsAndWidth(trailing); 784432"];
5554 [label="return 'while'; 784433"];
5555 [label="FullWidth = this.Text.Length; 784434"];
5556 [label="FullWidth 784435"];
5557 [label="this.AdjustFlagsAndWidth(trailing); 784436"];
5558 [label="return 'for'; 784437"];
5559 [label="FullWidth = this.Text.Length; 784438"];
5560 [label="FullWidth 784439"];
5561 [label="return 'for'; 784440"];
5562 [label="FullWidth = this.Text.Length; 784441"];
5563 [label="FullWidth 784442"];
5564 [label="this.AdjustFlagsAndWidth(leading); 784443"];
5565 [label="return 'for'; 784444"];
5566 [label="FullWidth = this.Text.Length; 784445"];
5567 [label="FullWidth 784446"];
5568 [label="this.AdjustFlagsAndWidth(trailing); 784447"];
5569 [label="return 'for'; 784448"];
5570 [label="FullWidth = this.Text.Length; 784449"];
5571 [label="FullWidth 784450"];
5572 [label="this.AdjustFlagsAndWidth(trailing); 784451"];
5573 [label="return 'foreach'; 784452"];
5574 [label="FullWidth = this.Text.Length; 784453"];
5575 [label="FullWidth 784454"];
5576 [label="return 'foreach'; 784455"];
5577 [label="FullWidth = this.Text.Length; 784456"];
5578 [label="FullWidth 784457"];
5579 [label="this.AdjustFlagsAndWidth(leading); 784458"];
5580 [label="return 'foreach'; 784459"];
5581 [label="FullWidth = this.Text.Length; 784460"];
5582 [label="FullWidth 784461"];
5583 [label="this.AdjustFlagsAndWidth(trailing); 784462"];
5584 [label="return 'foreach'; 784463"];
5585 [label="FullWidth = this.Text.Length; 784464"];
5586 [label="FullWidth 784465"];
5587 [label="this.AdjustFlagsAndWidth(trailing); 784466"];
5588 [label="return 'do'; 784467"];
5589 [label="FullWidth = this.Text.Length; 784468"];
5590 [label="FullWidth 784469"];
5591 [label="return 'do'; 784470"];
5592 [label="FullWidth = this.Text.Length; 784471"];
5593 [label="FullWidth 784472"];
5594 [label="this.AdjustFlagsAndWidth(leading); 784473"];
5595 [label="return 'do'; 784474"];
5596 [label="FullWidth = this.Text.Length; 784475"];
5597 [label="FullWidth 784476"];
5598 [label="this.AdjustFlagsAndWidth(trailing); 784477"];
5599 [label="return 'do'; 784478"];
5600 [label="FullWidth = this.Text.Length; 784479"];
5601 [label="FullWidth 784480"];
5602 [label="this.AdjustFlagsAndWidth(trailing); 784481"];
5603 [label="return 'switch'; 784482"];
5604 [label="FullWidth = this.Text.Length; 784483"];
5605 [label="FullWidth 784484"];
5606 [label="return 'switch'; 784485"];
5607 [label="FullWidth = this.Text.Length; 784486"];
5608 [label="FullWidth 784487"];
5609 [label="this.AdjustFlagsAndWidth(leading); 784488"];
5610 [label="return 'switch'; 784489"];
5611 [label="FullWidth = this.Text.Length; 784490"];
5612 [label="FullWidth 784491"];
5613 [label="this.AdjustFlagsAndWidth(trailing); 784492"];
5614 [label="return 'switch'; 784493"];
5615 [label="FullWidth = this.Text.Length; 784494"];
5616 [label="FullWidth 784495"];
5617 [label="this.AdjustFlagsAndWidth(trailing); 784496"];
5618 [label="return 'case'; 784497"];
5619 [label="FullWidth = this.Text.Length; 784498"];
5620 [label="FullWidth 784499"];
5621 [label="return 'case'; 784500"];
5622 [label="FullWidth = this.Text.Length; 784501"];
5623 [label="FullWidth 784502"];
5624 [label="this.AdjustFlagsAndWidth(leading); 784503"];
5625 [label="return 'case'; 784504"];
5626 [label="FullWidth = this.Text.Length; 784505"];
5627 [label="FullWidth 784506"];
5628 [label="this.AdjustFlagsAndWidth(trailing); 784507"];
5629 [label="return 'case'; 784508"];
5630 [label="FullWidth = this.Text.Length; 784509"];
5631 [label="FullWidth 784510"];
5632 [label="this.AdjustFlagsAndWidth(trailing); 784511"];
5633 [label="return 'default'; 784512"];
5634 [label="FullWidth = this.Text.Length; 784513"];
5635 [label="FullWidth 784514"];
5636 [label="return 'default'; 784515"];
5637 [label="FullWidth = this.Text.Length; 784516"];
5638 [label="FullWidth 784517"];
5639 [label="this.AdjustFlagsAndWidth(leading); 784518"];
5640 [label="return 'default'; 784519"];
5641 [label="FullWidth = this.Text.Length; 784520"];
5642 [label="FullWidth 784521"];
5643 [label="this.AdjustFlagsAndWidth(trailing); 784522"];
5644 [label="return 'default'; 784523"];
5645 [label="FullWidth = this.Text.Length; 784524"];
5646 [label="FullWidth 784525"];
5647 [label="this.AdjustFlagsAndWidth(trailing); 784526"];
5648 [label="return 'try'; 784527"];
5649 [label="FullWidth = this.Text.Length; 784528"];
5650 [label="FullWidth 784529"];
5651 [label="return 'try'; 784530"];
5652 [label="FullWidth = this.Text.Length; 784531"];
5653 [label="FullWidth 784532"];
5654 [label="this.AdjustFlagsAndWidth(leading); 784533"];
5655 [label="return 'try'; 784534"];
5656 [label="FullWidth = this.Text.Length; 784535"];
5657 [label="FullWidth 784536"];
5658 [label="this.AdjustFlagsAndWidth(trailing); 784537"];
5659 [label="return 'try'; 784538"];
5660 [label="FullWidth = this.Text.Length; 784539"];
5661 [label="FullWidth 784540"];
5662 [label="this.AdjustFlagsAndWidth(trailing); 784541"];
5663 [label="return 'catch'; 784542"];
5664 [label="FullWidth = this.Text.Length; 784543"];
5665 [label="FullWidth 784544"];
5666 [label="return 'catch'; 784545"];
5667 [label="FullWidth = this.Text.Length; 784546"];
5668 [label="FullWidth 784547"];
5669 [label="this.AdjustFlagsAndWidth(leading); 784548"];
5670 [label="return 'catch'; 784549"];
5671 [label="FullWidth = this.Text.Length; 784550"];
5672 [label="FullWidth 784551"];
5673 [label="this.AdjustFlagsAndWidth(trailing); 784552"];
5674 [label="return 'catch'; 784553"];
5675 [label="FullWidth = this.Text.Length; 784554"];
5676 [label="FullWidth 784555"];
5677 [label="this.AdjustFlagsAndWidth(trailing); 784556"];
5678 [label="return 'finally'; 784557"];
5679 [label="FullWidth = this.Text.Length; 784558"];
5680 [label="FullWidth 784559"];
5681 [label="return 'finally'; 784560"];
5682 [label="FullWidth = this.Text.Length; 784561"];
5683 [label="FullWidth 784562"];
5684 [label="this.AdjustFlagsAndWidth(leading); 784563"];
5685 [label="return 'finally'; 784564"];
5686 [label="FullWidth = this.Text.Length; 784565"];
5687 [label="FullWidth 784566"];
5688 [label="this.AdjustFlagsAndWidth(trailing); 784567"];
5689 [label="return 'finally'; 784568"];
5690 [label="FullWidth = this.Text.Length; 784569"];
5691 [label="FullWidth 784570"];
5692 [label="this.AdjustFlagsAndWidth(trailing); 784571"];
5693 [label="return 'lock'; 784572"];
5694 [label="FullWidth = this.Text.Length; 784573"];
5695 [label="FullWidth 784574"];
5696 [label="return 'lock'; 784575"];
5697 [label="FullWidth = this.Text.Length; 784576"];
5698 [label="FullWidth 784577"];
5699 [label="this.AdjustFlagsAndWidth(leading); 784578"];
5700 [label="return 'lock'; 784579"];
5701 [label="FullWidth = this.Text.Length; 784580"];
5702 [label="FullWidth 784581"];
5703 [label="this.AdjustFlagsAndWidth(trailing); 784582"];
5704 [label="return 'lock'; 784583"];
5705 [label="FullWidth = this.Text.Length; 784584"];
5706 [label="FullWidth 784585"];
5707 [label="this.AdjustFlagsAndWidth(trailing); 784586"];
5708 [label="return 'goto'; 784587"];
5709 [label="FullWidth = this.Text.Length; 784588"];
5710 [label="FullWidth 784589"];
5711 [label="return 'goto'; 784590"];
5712 [label="FullWidth = this.Text.Length; 784591"];
5713 [label="FullWidth 784592"];
5714 [label="this.AdjustFlagsAndWidth(leading); 784593"];
5715 [label="return 'goto'; 784594"];
5716 [label="FullWidth = this.Text.Length; 784595"];
5717 [label="FullWidth 784596"];
5718 [label="this.AdjustFlagsAndWidth(trailing); 784597"];
5719 [label="return 'goto'; 784598"];
5720 [label="FullWidth = this.Text.Length; 784599"];
5721 [label="FullWidth 784600"];
5722 [label="this.AdjustFlagsAndWidth(trailing); 784601"];
5723 [label="return 'break'; 784602"];
5724 [label="FullWidth = this.Text.Length; 784603"];
5725 [label="FullWidth 784604"];
5726 [label="return 'break'; 784605"];
5727 [label="FullWidth = this.Text.Length; 784606"];
5728 [label="FullWidth 784607"];
5729 [label="this.AdjustFlagsAndWidth(leading); 784608"];
5730 [label="return 'break'; 784609"];
5731 [label="FullWidth = this.Text.Length; 784610"];
5732 [label="FullWidth 784611"];
5733 [label="this.AdjustFlagsAndWidth(trailing); 784612"];
5734 [label="return 'break'; 784613"];
5735 [label="FullWidth = this.Text.Length; 784614"];
5736 [label="FullWidth 784615"];
5737 [label="this.AdjustFlagsAndWidth(trailing); 784616"];
5738 [label="return 'continue'; 784617"];
5739 [label="FullWidth = this.Text.Length; 784618"];
5740 [label="FullWidth 784619"];
5741 [label="return 'continue'; 784620"];
5742 [label="FullWidth = this.Text.Length; 784621"];
5743 [label="FullWidth 784622"];
5744 [label="this.AdjustFlagsAndWidth(leading); 784623"];
5745 [label="return 'continue'; 784624"];
5746 [label="FullWidth = this.Text.Length; 784625"];
5747 [label="FullWidth 784626"];
5748 [label="this.AdjustFlagsAndWidth(trailing); 784627"];
5749 [label="return 'continue'; 784628"];
5750 [label="FullWidth = this.Text.Length; 784629"];
5751 [label="FullWidth 784630"];
5752 [label="this.AdjustFlagsAndWidth(trailing); 784631"];
5753 [label="return 'return'; 784632"];
5754 [label="FullWidth = this.Text.Length; 784633"];
5755 [label="FullWidth 784634"];
5756 [label="return 'return'; 784635"];
5757 [label="FullWidth = this.Text.Length; 784636"];
5758 [label="FullWidth 784637"];
5759 [label="this.AdjustFlagsAndWidth(leading); 784638"];
5760 [label="return 'return'; 784639"];
5761 [label="FullWidth = this.Text.Length; 784640"];
5762 [label="FullWidth 784641"];
5763 [label="this.AdjustFlagsAndWidth(trailing); 784642"];
5764 [label="return 'return'; 784643"];
5765 [label="FullWidth = this.Text.Length; 784644"];
5766 [label="FullWidth 784645"];
5767 [label="this.AdjustFlagsAndWidth(trailing); 784646"];
5768 [label="return 'throw'; 784647"];
5769 [label="FullWidth = this.Text.Length; 784648"];
5770 [label="FullWidth 784649"];
5771 [label="return 'throw'; 784650"];
5772 [label="FullWidth = this.Text.Length; 784651"];
5773 [label="FullWidth 784652"];
5774 [label="this.AdjustFlagsAndWidth(leading); 784653"];
5775 [label="return 'throw'; 784654"];
5776 [label="FullWidth = this.Text.Length; 784655"];
5777 [label="FullWidth 784656"];
5778 [label="this.AdjustFlagsAndWidth(trailing); 784657"];
5779 [label="return 'throw'; 784658"];
5780 [label="FullWidth = this.Text.Length; 784659"];
5781 [label="FullWidth 784660"];
5782 [label="this.AdjustFlagsAndWidth(trailing); 784661"];
5783 [label="return 'public'; 784662"];
5784 [label="FullWidth = this.Text.Length; 784663"];
5785 [label="FullWidth 784664"];
5786 [label="return 'public'; 784665"];
5787 [label="FullWidth = this.Text.Length; 784666"];
5788 [label="FullWidth 784667"];
5789 [label="this.AdjustFlagsAndWidth(leading); 784668"];
5790 [label="return 'public'; 784669"];
5791 [label="FullWidth = this.Text.Length; 784670"];
5792 [label="FullWidth 784671"];
5793 [label="this.AdjustFlagsAndWidth(trailing); 784672"];
5794 [label="return 'public'; 784673"];
5795 [label="FullWidth = this.Text.Length; 784674"];
5796 [label="FullWidth 784675"];
5797 [label="this.AdjustFlagsAndWidth(trailing); 784676"];
5798 [label="return 'private'; 784677"];
5799 [label="FullWidth = this.Text.Length; 784678"];
5800 [label="FullWidth 784679"];
5801 [label="return 'private'; 784680"];
5802 [label="FullWidth = this.Text.Length; 784681"];
5803 [label="FullWidth 784682"];
5804 [label="this.AdjustFlagsAndWidth(leading); 784683"];
5805 [label="return 'private'; 784684"];
5806 [label="FullWidth = this.Text.Length; 784685"];
5807 [label="FullWidth 784686"];
5808 [label="this.AdjustFlagsAndWidth(trailing); 784687"];
5809 [label="return 'private'; 784688"];
5810 [label="FullWidth = this.Text.Length; 784689"];
5811 [label="FullWidth 784690"];
5812 [label="this.AdjustFlagsAndWidth(trailing); 784691"];
5813 [label="return 'internal'; 784692"];
5814 [label="FullWidth = this.Text.Length; 784693"];
5815 [label="FullWidth 784694"];
5816 [label="return 'internal'; 784695"];
5817 [label="FullWidth = this.Text.Length; 784696"];
5818 [label="FullWidth 784697"];
5819 [label="this.AdjustFlagsAndWidth(leading); 784698"];
5820 [label="return 'internal'; 784699"];
5821 [label="FullWidth = this.Text.Length; 784700"];
5822 [label="FullWidth 784701"];
5823 [label="this.AdjustFlagsAndWidth(trailing); 784702"];
5824 [label="return 'internal'; 784703"];
5825 [label="FullWidth = this.Text.Length; 784704"];
5826 [label="FullWidth 784705"];
5827 [label="this.AdjustFlagsAndWidth(trailing); 784706"];
5828 [label="return 'protected'; 784707"];
5829 [label="FullWidth = this.Text.Length; 784708"];
5830 [label="FullWidth 784709"];
5831 [label="return 'protected'; 784710"];
5832 [label="FullWidth = this.Text.Length; 784711"];
5833 [label="FullWidth 784712"];
5834 [label="this.AdjustFlagsAndWidth(leading); 784713"];
5835 [label="return 'protected'; 784714"];
5836 [label="FullWidth = this.Text.Length; 784715"];
5837 [label="FullWidth 784716"];
5838 [label="this.AdjustFlagsAndWidth(trailing); 784717"];
5839 [label="return 'protected'; 784718"];
5840 [label="FullWidth = this.Text.Length; 784719"];
5841 [label="FullWidth 784720"];
5842 [label="this.AdjustFlagsAndWidth(trailing); 784721"];
5843 [label="return 'static'; 784722"];
5844 [label="FullWidth = this.Text.Length; 784723"];
5845 [label="FullWidth 784724"];
5846 [label="return 'static'; 784725"];
5847 [label="FullWidth = this.Text.Length; 784726"];
5848 [label="FullWidth 784727"];
5849 [label="this.AdjustFlagsAndWidth(leading); 784728"];
5850 [label="return 'static'; 784729"];
5851 [label="FullWidth = this.Text.Length; 784730"];
5852 [label="FullWidth 784731"];
5853 [label="this.AdjustFlagsAndWidth(trailing); 784732"];
5854 [label="return 'static'; 784733"];
5855 [label="FullWidth = this.Text.Length; 784734"];
5856 [label="FullWidth 784735"];
5857 [label="this.AdjustFlagsAndWidth(trailing); 784736"];
5858 [label="return 'readonly'; 784737"];
5859 [label="FullWidth = this.Text.Length; 784738"];
5860 [label="FullWidth 784739"];
5861 [label="return 'readonly'; 784740"];
5862 [label="FullWidth = this.Text.Length; 784741"];
5863 [label="FullWidth 784742"];
5864 [label="this.AdjustFlagsAndWidth(leading); 784743"];
5865 [label="return 'readonly'; 784744"];
5866 [label="FullWidth = this.Text.Length; 784745"];
5867 [label="FullWidth 784746"];
5868 [label="this.AdjustFlagsAndWidth(trailing); 784747"];
5869 [label="return 'readonly'; 784748"];
5870 [label="FullWidth = this.Text.Length; 784749"];
5871 [label="FullWidth 784750"];
5872 [label="this.AdjustFlagsAndWidth(trailing); 784751"];
5873 [label="return 'sealed'; 784752"];
5874 [label="FullWidth = this.Text.Length; 784753"];
5875 [label="FullWidth 784754"];
5876 [label="return 'sealed'; 784755"];
5877 [label="FullWidth = this.Text.Length; 784756"];
5878 [label="FullWidth 784757"];
5879 [label="this.AdjustFlagsAndWidth(leading); 784758"];
5880 [label="return 'sealed'; 784759"];
5881 [label="FullWidth = this.Text.Length; 784760"];
5882 [label="FullWidth 784761"];
5883 [label="this.AdjustFlagsAndWidth(trailing); 784762"];
5884 [label="return 'sealed'; 784763"];
5885 [label="FullWidth = this.Text.Length; 784764"];
5886 [label="FullWidth 784765"];
5887 [label="this.AdjustFlagsAndWidth(trailing); 784766"];
5888 [label="return 'const'; 784767"];
5889 [label="FullWidth = this.Text.Length; 784768"];
5890 [label="FullWidth 784769"];
5891 [label="return 'const'; 784770"];
5892 [label="FullWidth = this.Text.Length; 784771"];
5893 [label="FullWidth 784772"];
5894 [label="this.AdjustFlagsAndWidth(leading); 784773"];
5895 [label="return 'const'; 784774"];
5896 [label="FullWidth = this.Text.Length; 784775"];
5897 [label="FullWidth 784776"];
5898 [label="this.AdjustFlagsAndWidth(trailing); 784777"];
5899 [label="return 'const'; 784778"];
5900 [label="FullWidth = this.Text.Length; 784779"];
5901 [label="FullWidth 784780"];
5902 [label="this.AdjustFlagsAndWidth(trailing); 784781"];
5903 [label="return 'fixed'; 784782"];
5904 [label="FullWidth = this.Text.Length; 784783"];
5905 [label="FullWidth 784784"];
5906 [label="return 'fixed'; 784785"];
5907 [label="FullWidth = this.Text.Length; 784786"];
5908 [label="FullWidth 784787"];
5909 [label="this.AdjustFlagsAndWidth(leading); 784788"];
5910 [label="return 'fixed'; 784789"];
5911 [label="FullWidth = this.Text.Length; 784790"];
5912 [label="FullWidth 784791"];
5913 [label="this.AdjustFlagsAndWidth(trailing); 784792"];
5914 [label="return 'fixed'; 784793"];
5915 [label="FullWidth = this.Text.Length; 784794"];
5916 [label="FullWidth 784795"];
5917 [label="this.AdjustFlagsAndWidth(trailing); 784796"];
5918 [label="return 'stackalloc'; 784797"];
5919 [label="FullWidth = this.Text.Length; 784798"];
5920 [label="FullWidth 784799"];
5921 [label="return 'stackalloc'; 784800"];
5922 [label="FullWidth = this.Text.Length; 784801"];
5923 [label="FullWidth 784802"];
5924 [label="this.AdjustFlagsAndWidth(leading); 784803"];
5925 [label="return 'stackalloc'; 784804"];
5926 [label="FullWidth = this.Text.Length; 784805"];
5927 [label="FullWidth 784806"];
5928 [label="this.AdjustFlagsAndWidth(trailing); 784807"];
5929 [label="return 'stackalloc'; 784808"];
5930 [label="FullWidth = this.Text.Length; 784809"];
5931 [label="FullWidth 784810"];
5932 [label="this.AdjustFlagsAndWidth(trailing); 784811"];
5933 [label="return 'volatile'; 784812"];
5934 [label="FullWidth = this.Text.Length; 784813"];
5935 [label="FullWidth 784814"];
5936 [label="return 'volatile'; 784815"];
5937 [label="FullWidth = this.Text.Length; 784816"];
5938 [label="FullWidth 784817"];
5939 [label="this.AdjustFlagsAndWidth(leading); 784818"];
5940 [label="return 'volatile'; 784819"];
5941 [label="FullWidth = this.Text.Length; 784820"];
5942 [label="FullWidth 784821"];
5943 [label="this.AdjustFlagsAndWidth(trailing); 784822"];
5944 [label="return 'volatile'; 784823"];
5945 [label="FullWidth = this.Text.Length; 784824"];
5946 [label="FullWidth 784825"];
5947 [label="this.AdjustFlagsAndWidth(trailing); 784826"];
5948 [label="return 'new'; 784827"];
5949 [label="FullWidth = this.Text.Length; 784828"];
5950 [label="FullWidth 784829"];
5951 [label="return 'new'; 784830"];
5952 [label="FullWidth = this.Text.Length; 784831"];
5953 [label="FullWidth 784832"];
5954 [label="this.AdjustFlagsAndWidth(leading); 784833"];
5955 [label="return 'new'; 784834"];
5956 [label="FullWidth = this.Text.Length; 784835"];
5957 [label="FullWidth 784836"];
5958 [label="this.AdjustFlagsAndWidth(trailing); 784837"];
5959 [label="return 'new'; 784838"];
5960 [label="FullWidth = this.Text.Length; 784839"];
5961 [label="FullWidth 784840"];
5962 [label="this.AdjustFlagsAndWidth(trailing); 784841"];
5963 [label="return 'override'; 784842"];
5964 [label="FullWidth = this.Text.Length; 784843"];
5965 [label="FullWidth 784844"];
5966 [label="return 'override'; 784845"];
5967 [label="FullWidth = this.Text.Length; 784846"];
5968 [label="FullWidth 784847"];
5969 [label="this.AdjustFlagsAndWidth(leading); 784848"];
5970 [label="return 'override'; 784849"];
5971 [label="FullWidth = this.Text.Length; 784850"];
5972 [label="FullWidth 784851"];
5973 [label="this.AdjustFlagsAndWidth(trailing); 784852"];
5974 [label="return 'override'; 784853"];
5975 [label="FullWidth = this.Text.Length; 784854"];
5976 [label="FullWidth 784855"];
5977 [label="this.AdjustFlagsAndWidth(trailing); 784856"];
5978 [label="return 'abstract'; 784857"];
5979 [label="FullWidth = this.Text.Length; 784858"];
5980 [label="FullWidth 784859"];
5981 [label="return 'abstract'; 784860"];
5982 [label="FullWidth = this.Text.Length; 784861"];
5983 [label="FullWidth 784862"];
5984 [label="this.AdjustFlagsAndWidth(leading); 784863"];
5985 [label="return 'abstract'; 784864"];
5986 [label="FullWidth = this.Text.Length; 784865"];
5987 [label="FullWidth 784866"];
5988 [label="this.AdjustFlagsAndWidth(trailing); 784867"];
5989 [label="return 'abstract'; 784868"];
5990 [label="FullWidth = this.Text.Length; 784869"];
5991 [label="FullWidth 784870"];
5992 [label="this.AdjustFlagsAndWidth(trailing); 784871"];
5993 [label="return 'virtual'; 784872"];
5994 [label="FullWidth = this.Text.Length; 784873"];
5995 [label="FullWidth 784874"];
5996 [label="return 'virtual'; 784875"];
5997 [label="FullWidth = this.Text.Length; 784876"];
5998 [label="FullWidth 784877"];
5999 [label="this.AdjustFlagsAndWidth(leading); 784878"];
6000 [label="return 'virtual'; 784879"];
6001 [label="FullWidth = this.Text.Length; 784880"];
6002 [label="FullWidth 784881"];
6003 [label="this.AdjustFlagsAndWidth(trailing); 784882"];
6004 [label="return 'virtual'; 784883"];
6005 [label="FullWidth = this.Text.Length; 784884"];
6006 [label="FullWidth 784885"];
6007 [label="this.AdjustFlagsAndWidth(trailing); 784886"];
6008 [label="return 'event'; 784887"];
6009 [label="FullWidth = this.Text.Length; 784888"];
6010 [label="FullWidth 784889"];
6011 [label="return 'event'; 784890"];
6012 [label="FullWidth = this.Text.Length; 784891"];
6013 [label="FullWidth 784892"];
6014 [label="this.AdjustFlagsAndWidth(leading); 784893"];
6015 [label="return 'event'; 784894"];
6016 [label="FullWidth = this.Text.Length; 784895"];
6017 [label="FullWidth 784896"];
6018 [label="this.AdjustFlagsAndWidth(trailing); 784897"];
6019 [label="return 'event'; 784898"];
6020 [label="FullWidth = this.Text.Length; 784899"];
6021 [label="FullWidth 784900"];
6022 [label="this.AdjustFlagsAndWidth(trailing); 784901"];
6023 [label="return 'extern'; 784902"];
6024 [label="FullWidth = this.Text.Length; 784903"];
6025 [label="FullWidth 784904"];
6026 [label="return 'extern'; 784905"];
6027 [label="FullWidth = this.Text.Length; 784906"];
6028 [label="FullWidth 784907"];
6029 [label="this.AdjustFlagsAndWidth(leading); 784908"];
6030 [label="return 'extern'; 784909"];
6031 [label="FullWidth = this.Text.Length; 784910"];
6032 [label="FullWidth 784911"];
6033 [label="this.AdjustFlagsAndWidth(trailing); 784912"];
6034 [label="return 'extern'; 784913"];
6035 [label="FullWidth = this.Text.Length; 784914"];
6036 [label="FullWidth 784915"];
6037 [label="this.AdjustFlagsAndWidth(trailing); 784916"];
6038 [label="return 'ref'; 784917"];
6039 [label="FullWidth = this.Text.Length; 784918"];
6040 [label="FullWidth 784919"];
6041 [label="return 'ref'; 784920"];
6042 [label="FullWidth = this.Text.Length; 784921"];
6043 [label="FullWidth 784922"];
6044 [label="this.AdjustFlagsAndWidth(leading); 784923"];
6045 [label="return 'ref'; 784924"];
6046 [label="FullWidth = this.Text.Length; 784925"];
6047 [label="FullWidth 784926"];
6048 [label="this.AdjustFlagsAndWidth(trailing); 784927"];
6049 [label="return 'ref'; 784928"];
6050 [label="FullWidth = this.Text.Length; 784929"];
6051 [label="FullWidth 784930"];
6052 [label="this.AdjustFlagsAndWidth(trailing); 784931"];
6053 [label="return 'out'; 784932"];
6054 [label="FullWidth = this.Text.Length; 784933"];
6055 [label="FullWidth 784934"];
6056 [label="return 'out'; 784935"];
6057 [label="FullWidth = this.Text.Length; 784936"];
6058 [label="FullWidth 784937"];
6059 [label="this.AdjustFlagsAndWidth(leading); 784938"];
6060 [label="return 'out'; 784939"];
6061 [label="FullWidth = this.Text.Length; 784940"];
6062 [label="FullWidth 784941"];
6063 [label="this.AdjustFlagsAndWidth(trailing); 784942"];
6064 [label="return 'out'; 784943"];
6065 [label="FullWidth = this.Text.Length; 784944"];
6066 [label="FullWidth 784945"];
6067 [label="this.AdjustFlagsAndWidth(trailing); 784946"];
6068 [label="return 'in'; 784947"];
6069 [label="FullWidth = this.Text.Length; 784948"];
6070 [label="FullWidth 784949"];
6071 [label="return 'in'; 784950"];
6072 [label="FullWidth = this.Text.Length; 784951"];
6073 [label="FullWidth 784952"];
6074 [label="this.AdjustFlagsAndWidth(leading); 784953"];
6075 [label="return 'in'; 784954"];
6076 [label="FullWidth = this.Text.Length; 784955"];
6077 [label="FullWidth 784956"];
6078 [label="this.AdjustFlagsAndWidth(trailing); 784957"];
6079 [label="return 'in'; 784958"];
6080 [label="FullWidth = this.Text.Length; 784959"];
6081 [label="FullWidth 784960"];
6082 [label="this.AdjustFlagsAndWidth(trailing); 784961"];
6083 [label="return 'is'; 784962"];
6084 [label="FullWidth = this.Text.Length; 784963"];
6085 [label="FullWidth 784964"];
6086 [label="return 'is'; 784965"];
6087 [label="FullWidth = this.Text.Length; 784966"];
6088 [label="FullWidth 784967"];
6089 [label="this.AdjustFlagsAndWidth(leading); 784968"];
6090 [label="return 'is'; 784969"];
6091 [label="FullWidth = this.Text.Length; 784970"];
6092 [label="FullWidth 784971"];
6093 [label="this.AdjustFlagsAndWidth(trailing); 784972"];
6094 [label="return 'is'; 784973"];
6095 [label="FullWidth = this.Text.Length; 784974"];
6096 [label="FullWidth 784975"];
6097 [label="this.AdjustFlagsAndWidth(trailing); 784976"];
6098 [label="return 'as'; 784977"];
6099 [label="FullWidth = this.Text.Length; 784978"];
6100 [label="FullWidth 784979"];
6101 [label="return 'as'; 784980"];
6102 [label="FullWidth = this.Text.Length; 784981"];
6103 [label="FullWidth 784982"];
6104 [label="this.AdjustFlagsAndWidth(leading); 784983"];
6105 [label="return 'as'; 784984"];
6106 [label="FullWidth = this.Text.Length; 784985"];
6107 [label="FullWidth 784986"];
6108 [label="this.AdjustFlagsAndWidth(trailing); 784987"];
6109 [label="return 'as'; 784988"];
6110 [label="FullWidth = this.Text.Length; 784989"];
6111 [label="FullWidth 784990"];
6112 [label="this.AdjustFlagsAndWidth(trailing); 784991"];
6113 [label="return 'params'; 784992"];
6114 [label="FullWidth = this.Text.Length; 784993"];
6115 [label="FullWidth 784994"];
6116 [label="return 'params'; 784995"];
6117 [label="FullWidth = this.Text.Length; 784996"];
6118 [label="FullWidth 784997"];
6119 [label="this.AdjustFlagsAndWidth(leading); 784998"];
6120 [label="return 'params'; 784999"];
6121 [label="FullWidth = this.Text.Length; 785000"];
6122 [label="FullWidth 785001"];
6123 [label="this.AdjustFlagsAndWidth(trailing); 785002"];
6124 [label="return 'params'; 785003"];
6125 [label="FullWidth = this.Text.Length; 785004"];
6126 [label="FullWidth 785005"];
6127 [label="this.AdjustFlagsAndWidth(trailing); 785006"];
6128 [label="return '__arglist'; 785007"];
6129 [label="FullWidth = this.Text.Length; 785008"];
6130 [label="FullWidth 785009"];
6131 [label="return '__arglist'; 785010"];
6132 [label="FullWidth = this.Text.Length; 785011"];
6133 [label="FullWidth 785012"];
6134 [label="this.AdjustFlagsAndWidth(leading); 785013"];
6135 [label="return '__arglist'; 785014"];
6136 [label="FullWidth = this.Text.Length; 785015"];
6137 [label="FullWidth 785016"];
6138 [label="this.AdjustFlagsAndWidth(trailing); 785017"];
6139 [label="return '__arglist'; 785018"];
6140 [label="FullWidth = this.Text.Length; 785019"];
6141 [label="FullWidth 785020"];
6142 [label="this.AdjustFlagsAndWidth(trailing); 785021"];
6143 [label="return '__makeref'; 785022"];
6144 [label="FullWidth = this.Text.Length; 785023"];
6145 [label="FullWidth 785024"];
6146 [label="return '__makeref'; 785025"];
6147 [label="FullWidth = this.Text.Length; 785026"];
6148 [label="FullWidth 785027"];
6149 [label="this.AdjustFlagsAndWidth(leading); 785028"];
6150 [label="return '__makeref'; 785029"];
6151 [label="FullWidth = this.Text.Length; 785030"];
6152 [label="FullWidth 785031"];
6153 [label="this.AdjustFlagsAndWidth(trailing); 785032"];
6154 [label="return '__makeref'; 785033"];
6155 [label="FullWidth = this.Text.Length; 785034"];
6156 [label="FullWidth 785035"];
6157 [label="this.AdjustFlagsAndWidth(trailing); 785036"];
6158 [label="return '__reftype'; 785037"];
6159 [label="FullWidth = this.Text.Length; 785038"];
6160 [label="FullWidth 785039"];
6161 [label="return '__reftype'; 785040"];
6162 [label="FullWidth = this.Text.Length; 785041"];
6163 [label="FullWidth 785042"];
6164 [label="this.AdjustFlagsAndWidth(leading); 785043"];
6165 [label="return '__reftype'; 785044"];
6166 [label="FullWidth = this.Text.Length; 785045"];
6167 [label="FullWidth 785046"];
6168 [label="this.AdjustFlagsAndWidth(trailing); 785047"];
6169 [label="return '__reftype'; 785048"];
6170 [label="FullWidth = this.Text.Length; 785049"];
6171 [label="FullWidth 785050"];
6172 [label="this.AdjustFlagsAndWidth(trailing); 785051"];
6173 [label="return '__refvalue'; 785052"];
6174 [label="FullWidth = this.Text.Length; 785053"];
6175 [label="FullWidth 785054"];
6176 [label="return '__refvalue'; 785055"];
6177 [label="FullWidth = this.Text.Length; 785056"];
6178 [label="FullWidth 785057"];
6179 [label="this.AdjustFlagsAndWidth(leading); 785058"];
6180 [label="return '__refvalue'; 785059"];
6181 [label="FullWidth = this.Text.Length; 785060"];
6182 [label="FullWidth 785061"];
6183 [label="this.AdjustFlagsAndWidth(trailing); 785062"];
6184 [label="return '__refvalue'; 785063"];
6185 [label="FullWidth = this.Text.Length; 785064"];
6186 [label="FullWidth 785065"];
6187 [label="this.AdjustFlagsAndWidth(trailing); 785066"];
6188 [label="return 'this'; 785067"];
6189 [label="FullWidth = this.Text.Length; 785068"];
6190 [label="FullWidth 785069"];
6191 [label="return 'this'; 785070"];
6192 [label="FullWidth = this.Text.Length; 785071"];
6193 [label="FullWidth 785072"];
6194 [label="this.AdjustFlagsAndWidth(leading); 785073"];
6195 [label="return 'this'; 785074"];
6196 [label="FullWidth = this.Text.Length; 785075"];
6197 [label="FullWidth 785076"];
6198 [label="this.AdjustFlagsAndWidth(trailing); 785077"];
6199 [label="return 'this'; 785078"];
6200 [label="FullWidth = this.Text.Length; 785079"];
6201 [label="FullWidth 785080"];
6202 [label="this.AdjustFlagsAndWidth(trailing); 785081"];
6203 [label="return 'base'; 785082"];
6204 [label="FullWidth = this.Text.Length; 785083"];
6205 [label="FullWidth 785084"];
6206 [label="return 'base'; 785085"];
6207 [label="FullWidth = this.Text.Length; 785086"];
6208 [label="FullWidth 785087"];
6209 [label="this.AdjustFlagsAndWidth(leading); 785088"];
6210 [label="return 'base'; 785089"];
6211 [label="FullWidth = this.Text.Length; 785090"];
6212 [label="FullWidth 785091"];
6213 [label="this.AdjustFlagsAndWidth(trailing); 785092"];
6214 [label="return 'base'; 785093"];
6215 [label="FullWidth = this.Text.Length; 785094"];
6216 [label="FullWidth 785095"];
6217 [label="this.AdjustFlagsAndWidth(trailing); 785096"];
6218 [label="return 'namespace'; 785097"];
6219 [label="FullWidth = this.Text.Length; 785098"];
6220 [label="FullWidth 785099"];
6221 [label="return 'namespace'; 785100"];
6222 [label="FullWidth = this.Text.Length; 785101"];
6223 [label="FullWidth 785102"];
6224 [label="this.AdjustFlagsAndWidth(leading); 785103"];
6225 [label="return 'namespace'; 785104"];
6226 [label="FullWidth = this.Text.Length; 785105"];
6227 [label="FullWidth 785106"];
6228 [label="this.AdjustFlagsAndWidth(trailing); 785107"];
6229 [label="return 'namespace'; 785108"];
6230 [label="FullWidth = this.Text.Length; 785109"];
6231 [label="FullWidth 785110"];
6232 [label="this.AdjustFlagsAndWidth(trailing); 785111"];
6233 [label="return 'using'; 785112"];
6234 [label="FullWidth = this.Text.Length; 785113"];
6235 [label="FullWidth 785114"];
6236 [label="return 'using'; 785115"];
6237 [label="FullWidth = this.Text.Length; 785116"];
6238 [label="FullWidth 785117"];
6239 [label="this.AdjustFlagsAndWidth(leading); 785118"];
6240 [label="return 'using'; 785119"];
6241 [label="FullWidth = this.Text.Length; 785120"];
6242 [label="FullWidth 785121"];
6243 [label="this.AdjustFlagsAndWidth(trailing); 785122"];
6244 [label="return 'using'; 785123"];
6245 [label="FullWidth = this.Text.Length; 785124"];
6246 [label="FullWidth 785125"];
6247 [label="this.AdjustFlagsAndWidth(trailing); 785126"];
6248 [label="return 'class'; 785127"];
6249 [label="FullWidth = this.Text.Length; 785128"];
6250 [label="FullWidth 785129"];
6251 [label="return 'class'; 785130"];
6252 [label="FullWidth = this.Text.Length; 785131"];
6253 [label="FullWidth 785132"];
6254 [label="this.AdjustFlagsAndWidth(leading); 785133"];
6255 [label="return 'class'; 785134"];
6256 [label="FullWidth = this.Text.Length; 785135"];
6257 [label="FullWidth 785136"];
6258 [label="this.AdjustFlagsAndWidth(trailing); 785137"];
6259 [label="return 'class'; 785138"];
6260 [label="FullWidth = this.Text.Length; 785139"];
6261 [label="FullWidth 785140"];
6262 [label="this.AdjustFlagsAndWidth(trailing); 785141"];
6263 [label="return 'struct'; 785142"];
6264 [label="FullWidth = this.Text.Length; 785143"];
6265 [label="FullWidth 785144"];
6266 [label="return 'struct'; 785145"];
6267 [label="FullWidth = this.Text.Length; 785146"];
6268 [label="FullWidth 785147"];
6269 [label="this.AdjustFlagsAndWidth(leading); 785148"];
6270 [label="return 'struct'; 785149"];
6271 [label="FullWidth = this.Text.Length; 785150"];
6272 [label="FullWidth 785151"];
6273 [label="this.AdjustFlagsAndWidth(trailing); 785152"];
6274 [label="return 'struct'; 785153"];
6275 [label="FullWidth = this.Text.Length; 785154"];
6276 [label="FullWidth 785155"];
6277 [label="this.AdjustFlagsAndWidth(trailing); 785156"];
6278 [label="return 'interface'; 785157"];
6279 [label="FullWidth = this.Text.Length; 785158"];
6280 [label="FullWidth 785159"];
6281 [label="return 'interface'; 785160"];
6282 [label="FullWidth = this.Text.Length; 785161"];
6283 [label="FullWidth 785162"];
6284 [label="this.AdjustFlagsAndWidth(leading); 785163"];
6285 [label="return 'interface'; 785164"];
6286 [label="FullWidth = this.Text.Length; 785165"];
6287 [label="FullWidth 785166"];
6288 [label="this.AdjustFlagsAndWidth(trailing); 785167"];
6289 [label="return 'interface'; 785168"];
6290 [label="FullWidth = this.Text.Length; 785169"];
6291 [label="FullWidth 785170"];
6292 [label="this.AdjustFlagsAndWidth(trailing); 785171"];
6293 [label="return 'enum'; 785172"];
6294 [label="FullWidth = this.Text.Length; 785173"];
6295 [label="FullWidth 785174"];
6296 [label="return 'enum'; 785175"];
6297 [label="FullWidth = this.Text.Length; 785176"];
6298 [label="FullWidth 785177"];
6299 [label="this.AdjustFlagsAndWidth(leading); 785178"];
6300 [label="return 'enum'; 785179"];
6301 [label="FullWidth = this.Text.Length; 785180"];
6302 [label="FullWidth 785181"];
6303 [label="this.AdjustFlagsAndWidth(trailing); 785182"];
6304 [label="return 'enum'; 785183"];
6305 [label="FullWidth = this.Text.Length; 785184"];
6306 [label="FullWidth 785185"];
6307 [label="this.AdjustFlagsAndWidth(trailing); 785186"];
6308 [label="return 'delegate'; 785187"];
6309 [label="FullWidth = this.Text.Length; 785188"];
6310 [label="FullWidth 785189"];
6311 [label="return 'delegate'; 785190"];
6312 [label="FullWidth = this.Text.Length; 785191"];
6313 [label="FullWidth 785192"];
6314 [label="this.AdjustFlagsAndWidth(leading); 785193"];
6315 [label="return 'delegate'; 785194"];
6316 [label="FullWidth = this.Text.Length; 785195"];
6317 [label="FullWidth 785196"];
6318 [label="this.AdjustFlagsAndWidth(trailing); 785197"];
6319 [label="return 'delegate'; 785198"];
6320 [label="FullWidth = this.Text.Length; 785199"];
6321 [label="FullWidth 785200"];
6322 [label="this.AdjustFlagsAndWidth(trailing); 785201"];
6323 [label="return 'checked'; 785202"];
6324 [label="FullWidth = this.Text.Length; 785203"];
6325 [label="FullWidth 785204"];
6326 [label="return 'checked'; 785205"];
6327 [label="FullWidth = this.Text.Length; 785206"];
6328 [label="FullWidth 785207"];
6329 [label="this.AdjustFlagsAndWidth(leading); 785208"];
6330 [label="return 'checked'; 785209"];
6331 [label="FullWidth = this.Text.Length; 785210"];
6332 [label="FullWidth 785211"];
6333 [label="this.AdjustFlagsAndWidth(trailing); 785212"];
6334 [label="return 'checked'; 785213"];
6335 [label="FullWidth = this.Text.Length; 785214"];
6336 [label="FullWidth 785215"];
6337 [label="this.AdjustFlagsAndWidth(trailing); 785216"];
6338 [label="return 'unchecked'; 785217"];
6339 [label="FullWidth = this.Text.Length; 785218"];
6340 [label="FullWidth 785219"];
6341 [label="return 'unchecked'; 785220"];
6342 [label="FullWidth = this.Text.Length; 785221"];
6343 [label="FullWidth 785222"];
6344 [label="this.AdjustFlagsAndWidth(leading); 785223"];
6345 [label="return 'unchecked'; 785224"];
6346 [label="FullWidth = this.Text.Length; 785225"];
6347 [label="FullWidth 785226"];
6348 [label="this.AdjustFlagsAndWidth(trailing); 785227"];
6349 [label="return 'unchecked'; 785228"];
6350 [label="FullWidth = this.Text.Length; 785229"];
6351 [label="FullWidth 785230"];
6352 [label="this.AdjustFlagsAndWidth(trailing); 785231"];
6353 [label="return 'unsafe'; 785232"];
6354 [label="FullWidth = this.Text.Length; 785233"];
6355 [label="FullWidth 785234"];
6356 [label="return 'unsafe'; 785235"];
6357 [label="FullWidth = this.Text.Length; 785236"];
6358 [label="FullWidth 785237"];
6359 [label="this.AdjustFlagsAndWidth(leading); 785238"];
6360 [label="return 'unsafe'; 785239"];
6361 [label="FullWidth = this.Text.Length; 785240"];
6362 [label="FullWidth 785241"];
6363 [label="this.AdjustFlagsAndWidth(trailing); 785242"];
6364 [label="return 'unsafe'; 785243"];
6365 [label="FullWidth = this.Text.Length; 785244"];
6366 [label="FullWidth 785245"];
6367 [label="this.AdjustFlagsAndWidth(trailing); 785246"];
6368 [label="return 'operator'; 785247"];
6369 [label="FullWidth = this.Text.Length; 785248"];
6370 [label="FullWidth 785249"];
6371 [label="return 'operator'; 785250"];
6372 [label="FullWidth = this.Text.Length; 785251"];
6373 [label="FullWidth 785252"];
6374 [label="this.AdjustFlagsAndWidth(leading); 785253"];
6375 [label="return 'operator'; 785254"];
6376 [label="FullWidth = this.Text.Length; 785255"];
6377 [label="FullWidth 785256"];
6378 [label="this.AdjustFlagsAndWidth(trailing); 785257"];
6379 [label="return 'operator'; 785258"];
6380 [label="FullWidth = this.Text.Length; 785259"];
6381 [label="FullWidth 785260"];
6382 [label="this.AdjustFlagsAndWidth(trailing); 785261"];
6383 [label="return 'explicit'; 785262"];
6384 [label="FullWidth = this.Text.Length; 785263"];
6385 [label="FullWidth 785264"];
6386 [label="return 'explicit'; 785265"];
6387 [label="FullWidth = this.Text.Length; 785266"];
6388 [label="FullWidth 785267"];
6389 [label="this.AdjustFlagsAndWidth(leading); 785268"];
6390 [label="return 'explicit'; 785269"];
6391 [label="FullWidth = this.Text.Length; 785270"];
6392 [label="FullWidth 785271"];
6393 [label="this.AdjustFlagsAndWidth(trailing); 785272"];
6394 [label="return 'explicit'; 785273"];
6395 [label="FullWidth = this.Text.Length; 785274"];
6396 [label="FullWidth 785275"];
6397 [label="this.AdjustFlagsAndWidth(trailing); 785276"];
6398 [label="return 'implicit'; 785277"];
6399 [label="FullWidth = this.Text.Length; 785278"];
6400 [label="FullWidth 785279"];
6401 [label="return 'implicit'; 785280"];
6402 [label="FullWidth = this.Text.Length; 785281"];
6403 [label="FullWidth 785282"];
6404 [label="this.AdjustFlagsAndWidth(leading); 785283"];
6405 [label="return 'implicit'; 785284"];
6406 [label="FullWidth = this.Text.Length; 785285"];
6407 [label="FullWidth 785286"];
6408 [label="this.AdjustFlagsAndWidth(trailing); 785287"];
6409 [label="return 'implicit'; 785288"];
6410 [label="FullWidth = this.Text.Length; 785289"];
6411 [label="FullWidth 785290"];
6412 [label="this.AdjustFlagsAndWidth(trailing); 785291"];
6413 [label="return 'yield'; 785292"];
6414 [label="FullWidth = this.Text.Length; 785293"];
6415 [label="FullWidth 785294"];
6416 [label="return 'yield'; 785295"];
6417 [label="FullWidth = this.Text.Length; 785296"];
6418 [label="FullWidth 785297"];
6419 [label="this.AdjustFlagsAndWidth(leading); 785298"];
6420 [label="return 'yield'; 785299"];
6421 [label="FullWidth = this.Text.Length; 785300"];
6422 [label="FullWidth 785301"];
6423 [label="this.AdjustFlagsAndWidth(trailing); 785302"];
6424 [label="return 'yield'; 785303"];
6425 [label="FullWidth = this.Text.Length; 785304"];
6426 [label="FullWidth 785305"];
6427 [label="this.AdjustFlagsAndWidth(trailing); 785306"];
6428 [label="return 'partial'; 785307"];
6429 [label="FullWidth = this.Text.Length; 785308"];
6430 [label="FullWidth 785309"];
6431 [label="return 'partial'; 785310"];
6432 [label="FullWidth = this.Text.Length; 785311"];
6433 [label="FullWidth 785312"];
6434 [label="this.AdjustFlagsAndWidth(leading); 785313"];
6435 [label="return 'partial'; 785314"];
6436 [label="FullWidth = this.Text.Length; 785315"];
6437 [label="FullWidth 785316"];
6438 [label="this.AdjustFlagsAndWidth(trailing); 785317"];
6439 [label="return 'partial'; 785318"];
6440 [label="FullWidth = this.Text.Length; 785319"];
6441 [label="FullWidth 785320"];
6442 [label="this.AdjustFlagsAndWidth(trailing); 785321"];
6443 [label="return 'alias'; 785322"];
6444 [label="FullWidth = this.Text.Length; 785323"];
6445 [label="FullWidth 785324"];
6446 [label="return 'alias'; 785325"];
6447 [label="FullWidth = this.Text.Length; 785326"];
6448 [label="FullWidth 785327"];
6449 [label="this.AdjustFlagsAndWidth(leading); 785328"];
6450 [label="return 'alias'; 785329"];
6451 [label="FullWidth = this.Text.Length; 785330"];
6452 [label="FullWidth 785331"];
6453 [label="this.AdjustFlagsAndWidth(trailing); 785332"];
6454 [label="return 'alias'; 785333"];
6455 [label="FullWidth = this.Text.Length; 785334"];
6456 [label="FullWidth 785335"];
6457 [label="this.AdjustFlagsAndWidth(trailing); 785336"];
6458 [label="return 'global'; 785337"];
6459 [label="FullWidth = this.Text.Length; 785338"];
6460 [label="FullWidth 785339"];
6461 [label="return 'global'; 785340"];
6462 [label="FullWidth = this.Text.Length; 785341"];
6463 [label="FullWidth 785342"];
6464 [label="this.AdjustFlagsAndWidth(leading); 785343"];
6465 [label="return 'global'; 785344"];
6466 [label="FullWidth = this.Text.Length; 785345"];
6467 [label="FullWidth 785346"];
6468 [label="this.AdjustFlagsAndWidth(trailing); 785347"];
6469 [label="return 'global'; 785348"];
6470 [label="FullWidth = this.Text.Length; 785349"];
6471 [label="FullWidth 785350"];
6472 [label="this.AdjustFlagsAndWidth(trailing); 785351"];
6473 [label="return 'assembly'; 785352"];
6474 [label="FullWidth = this.Text.Length; 785353"];
6475 [label="FullWidth 785354"];
6476 [label="return 'assembly'; 785355"];
6477 [label="FullWidth = this.Text.Length; 785356"];
6478 [label="FullWidth 785357"];
6479 [label="this.AdjustFlagsAndWidth(leading); 785358"];
6480 [label="return 'assembly'; 785359"];
6481 [label="FullWidth = this.Text.Length; 785360"];
6482 [label="FullWidth 785361"];
6483 [label="this.AdjustFlagsAndWidth(trailing); 785362"];
6484 [label="return 'assembly'; 785363"];
6485 [label="FullWidth = this.Text.Length; 785364"];
6486 [label="FullWidth 785365"];
6487 [label="this.AdjustFlagsAndWidth(trailing); 785366"];
6488 [label="return 'module'; 785367"];
6489 [label="FullWidth = this.Text.Length; 785368"];
6490 [label="FullWidth 785369"];
6491 [label="return 'module'; 785370"];
6492 [label="FullWidth = this.Text.Length; 785371"];
6493 [label="FullWidth 785372"];
6494 [label="this.AdjustFlagsAndWidth(leading); 785373"];
6495 [label="return 'module'; 785374"];
6496 [label="FullWidth = this.Text.Length; 785375"];
6497 [label="FullWidth 785376"];
6498 [label="this.AdjustFlagsAndWidth(trailing); 785377"];
6499 [label="return 'module'; 785378"];
6500 [label="FullWidth = this.Text.Length; 785379"];
6501 [label="FullWidth 785380"];
6502 [label="this.AdjustFlagsAndWidth(trailing); 785381"];
6503 [label="return 'type'; 785382"];
6504 [label="FullWidth = this.Text.Length; 785383"];
6505 [label="FullWidth 785384"];
6506 [label="return 'type'; 785385"];
6507 [label="FullWidth = this.Text.Length; 785386"];
6508 [label="FullWidth 785387"];
6509 [label="this.AdjustFlagsAndWidth(leading); 785388"];
6510 [label="return 'type'; 785389"];
6511 [label="FullWidth = this.Text.Length; 785390"];
6512 [label="FullWidth 785391"];
6513 [label="this.AdjustFlagsAndWidth(trailing); 785392"];
6514 [label="return 'type'; 785393"];
6515 [label="FullWidth = this.Text.Length; 785394"];
6516 [label="FullWidth 785395"];
6517 [label="this.AdjustFlagsAndWidth(trailing); 785396"];
6518 [label="return 'field'; 785397"];
6519 [label="FullWidth = this.Text.Length; 785398"];
6520 [label="FullWidth 785399"];
6521 [label="return 'field'; 785400"];
6522 [label="FullWidth = this.Text.Length; 785401"];
6523 [label="FullWidth 785402"];
6524 [label="this.AdjustFlagsAndWidth(leading); 785403"];
6525 [label="return 'field'; 785404"];
6526 [label="FullWidth = this.Text.Length; 785405"];
6527 [label="FullWidth 785406"];
6528 [label="this.AdjustFlagsAndWidth(trailing); 785407"];
6529 [label="return 'field'; 785408"];
6530 [label="FullWidth = this.Text.Length; 785409"];
6531 [label="FullWidth 785410"];
6532 [label="this.AdjustFlagsAndWidth(trailing); 785411"];
6533 [label="return 'method'; 785412"];
6534 [label="FullWidth = this.Text.Length; 785413"];
6535 [label="FullWidth 785414"];
6536 [label="return 'method'; 785415"];
6537 [label="FullWidth = this.Text.Length; 785416"];
6538 [label="FullWidth 785417"];
6539 [label="this.AdjustFlagsAndWidth(leading); 785418"];
6540 [label="return 'method'; 785419"];
6541 [label="FullWidth = this.Text.Length; 785420"];
6542 [label="FullWidth 785421"];
6543 [label="this.AdjustFlagsAndWidth(trailing); 785422"];
6544 [label="return 'method'; 785423"];
6545 [label="FullWidth = this.Text.Length; 785424"];
6546 [label="FullWidth 785425"];
6547 [label="this.AdjustFlagsAndWidth(trailing); 785426"];
6548 [label="return 'param'; 785427"];
6549 [label="FullWidth = this.Text.Length; 785428"];
6550 [label="FullWidth 785429"];
6551 [label="return 'param'; 785430"];
6552 [label="FullWidth = this.Text.Length; 785431"];
6553 [label="FullWidth 785432"];
6554 [label="this.AdjustFlagsAndWidth(leading); 785433"];
6555 [label="return 'param'; 785434"];
6556 [label="FullWidth = this.Text.Length; 785435"];
6557 [label="FullWidth 785436"];
6558 [label="this.AdjustFlagsAndWidth(trailing); 785437"];
6559 [label="return 'param'; 785438"];
6560 [label="FullWidth = this.Text.Length; 785439"];
6561 [label="FullWidth 785440"];
6562 [label="this.AdjustFlagsAndWidth(trailing); 785441"];
6563 [label="return 'property'; 785442"];
6564 [label="FullWidth = this.Text.Length; 785443"];
6565 [label="FullWidth 785444"];
6566 [label="return 'property'; 785445"];
6567 [label="FullWidth = this.Text.Length; 785446"];
6568 [label="FullWidth 785447"];
6569 [label="this.AdjustFlagsAndWidth(leading); 785448"];
6570 [label="return 'property'; 785449"];
6571 [label="FullWidth = this.Text.Length; 785450"];
6572 [label="FullWidth 785451"];
6573 [label="this.AdjustFlagsAndWidth(trailing); 785452"];
6574 [label="return 'property'; 785453"];
6575 [label="FullWidth = this.Text.Length; 785454"];
6576 [label="FullWidth 785455"];
6577 [label="this.AdjustFlagsAndWidth(trailing); 785456"];
6578 [label="return 'typevar'; 785457"];
6579 [label="FullWidth = this.Text.Length; 785458"];
6580 [label="FullWidth 785459"];
6581 [label="return 'typevar'; 785460"];
6582 [label="FullWidth = this.Text.Length; 785461"];
6583 [label="FullWidth 785462"];
6584 [label="this.AdjustFlagsAndWidth(leading); 785463"];
6585 [label="return 'typevar'; 785464"];
6586 [label="FullWidth = this.Text.Length; 785465"];
6587 [label="FullWidth 785466"];
6588 [label="this.AdjustFlagsAndWidth(trailing); 785467"];
6589 [label="return 'typevar'; 785468"];
6590 [label="FullWidth = this.Text.Length; 785469"];
6591 [label="FullWidth 785470"];
6592 [label="this.AdjustFlagsAndWidth(trailing); 785471"];
6593 [label="return 'get'; 785472"];
6594 [label="FullWidth = this.Text.Length; 785473"];
6595 [label="FullWidth 785474"];
6596 [label="return 'get'; 785475"];
6597 [label="FullWidth = this.Text.Length; 785476"];
6598 [label="FullWidth 785477"];
6599 [label="this.AdjustFlagsAndWidth(leading); 785478"];
6600 [label="return 'get'; 785479"];
6601 [label="FullWidth = this.Text.Length; 785480"];
6602 [label="FullWidth 785481"];
6603 [label="this.AdjustFlagsAndWidth(trailing); 785482"];
6604 [label="return 'get'; 785483"];
6605 [label="FullWidth = this.Text.Length; 785484"];
6606 [label="FullWidth 785485"];
6607 [label="this.AdjustFlagsAndWidth(trailing); 785486"];
6608 [label="return 'set'; 785487"];
6609 [label="FullWidth = this.Text.Length; 785488"];
6610 [label="FullWidth 785489"];
6611 [label="return 'set'; 785490"];
6612 [label="FullWidth = this.Text.Length; 785491"];
6613 [label="FullWidth 785492"];
6614 [label="this.AdjustFlagsAndWidth(leading); 785493"];
6615 [label="return 'set'; 785494"];
6616 [label="FullWidth = this.Text.Length; 785495"];
6617 [label="FullWidth 785496"];
6618 [label="this.AdjustFlagsAndWidth(trailing); 785497"];
6619 [label="return 'set'; 785498"];
6620 [label="FullWidth = this.Text.Length; 785499"];
6621 [label="FullWidth 785500"];
6622 [label="this.AdjustFlagsAndWidth(trailing); 785501"];
6623 [label="return 'add'; 785502"];
6624 [label="FullWidth = this.Text.Length; 785503"];
6625 [label="FullWidth 785504"];
6626 [label="return 'add'; 785505"];
6627 [label="FullWidth = this.Text.Length; 785506"];
6628 [label="FullWidth 785507"];
6629 [label="this.AdjustFlagsAndWidth(leading); 785508"];
6630 [label="return 'add'; 785509"];
6631 [label="FullWidth = this.Text.Length; 785510"];
6632 [label="FullWidth 785511"];
6633 [label="this.AdjustFlagsAndWidth(trailing); 785512"];
6634 [label="return 'add'; 785513"];
6635 [label="FullWidth = this.Text.Length; 785514"];
6636 [label="FullWidth 785515"];
6637 [label="this.AdjustFlagsAndWidth(trailing); 785516"];
6638 [label="return 'remove'; 785517"];
6639 [label="FullWidth = this.Text.Length; 785518"];
6640 [label="FullWidth 785519"];
6641 [label="return 'remove'; 785520"];
6642 [label="FullWidth = this.Text.Length; 785521"];
6643 [label="FullWidth 785522"];
6644 [label="this.AdjustFlagsAndWidth(leading); 785523"];
6645 [label="return 'remove'; 785524"];
6646 [label="FullWidth = this.Text.Length; 785525"];
6647 [label="FullWidth 785526"];
6648 [label="this.AdjustFlagsAndWidth(trailing); 785527"];
6649 [label="return 'remove'; 785528"];
6650 [label="FullWidth = this.Text.Length; 785529"];
6651 [label="FullWidth 785530"];
6652 [label="this.AdjustFlagsAndWidth(trailing); 785531"];
6653 [label="return 'where'; 785532"];
6654 [label="FullWidth = this.Text.Length; 785533"];
6655 [label="FullWidth 785534"];
6656 [label="return 'where'; 785535"];
6657 [label="FullWidth = this.Text.Length; 785536"];
6658 [label="FullWidth 785537"];
6659 [label="this.AdjustFlagsAndWidth(leading); 785538"];
6660 [label="return 'where'; 785539"];
6661 [label="FullWidth = this.Text.Length; 785540"];
6662 [label="FullWidth 785541"];
6663 [label="this.AdjustFlagsAndWidth(trailing); 785542"];
6664 [label="return 'where'; 785543"];
6665 [label="FullWidth = this.Text.Length; 785544"];
6666 [label="FullWidth 785545"];
6667 [label="this.AdjustFlagsAndWidth(trailing); 785546"];
6668 [label="return 'from'; 785547"];
6669 [label="FullWidth = this.Text.Length; 785548"];
6670 [label="FullWidth 785549"];
6671 [label="return 'from'; 785550"];
6672 [label="FullWidth = this.Text.Length; 785551"];
6673 [label="FullWidth 785552"];
6674 [label="this.AdjustFlagsAndWidth(leading); 785553"];
6675 [label="return 'from'; 785554"];
6676 [label="FullWidth = this.Text.Length; 785555"];
6677 [label="FullWidth 785556"];
6678 [label="this.AdjustFlagsAndWidth(trailing); 785557"];
6679 [label="return 'from'; 785558"];
6680 [label="FullWidth = this.Text.Length; 785559"];
6681 [label="FullWidth 785560"];
6682 [label="this.AdjustFlagsAndWidth(trailing); 785561"];
6683 [label="return 'group'; 785562"];
6684 [label="FullWidth = this.Text.Length; 785563"];
6685 [label="FullWidth 785564"];
6686 [label="return 'group'; 785565"];
6687 [label="FullWidth = this.Text.Length; 785566"];
6688 [label="FullWidth 785567"];
6689 [label="this.AdjustFlagsAndWidth(leading); 785568"];
6690 [label="return 'group'; 785569"];
6691 [label="FullWidth = this.Text.Length; 785570"];
6692 [label="FullWidth 785571"];
6693 [label="this.AdjustFlagsAndWidth(trailing); 785572"];
6694 [label="return 'group'; 785573"];
6695 [label="FullWidth = this.Text.Length; 785574"];
6696 [label="FullWidth 785575"];
6697 [label="this.AdjustFlagsAndWidth(trailing); 785576"];
6698 [label="return 'join'; 785577"];
6699 [label="FullWidth = this.Text.Length; 785578"];
6700 [label="FullWidth 785579"];
6701 [label="return 'join'; 785580"];
6702 [label="FullWidth = this.Text.Length; 785581"];
6703 [label="FullWidth 785582"];
6704 [label="this.AdjustFlagsAndWidth(leading); 785583"];
6705 [label="return 'join'; 785584"];
6706 [label="FullWidth = this.Text.Length; 785585"];
6707 [label="FullWidth 785586"];
6708 [label="this.AdjustFlagsAndWidth(trailing); 785587"];
6709 [label="return 'join'; 785588"];
6710 [label="FullWidth = this.Text.Length; 785589"];
6711 [label="FullWidth 785590"];
6712 [label="this.AdjustFlagsAndWidth(trailing); 785591"];
6713 [label="return 'into'; 785592"];
6714 [label="FullWidth = this.Text.Length; 785593"];
6715 [label="FullWidth 785594"];
6716 [label="return 'into'; 785595"];
6717 [label="FullWidth = this.Text.Length; 785596"];
6718 [label="FullWidth 785597"];
6719 [label="this.AdjustFlagsAndWidth(leading); 785598"];
6720 [label="return 'into'; 785599"];
6721 [label="FullWidth = this.Text.Length; 785600"];
6722 [label="FullWidth 785601"];
6723 [label="this.AdjustFlagsAndWidth(trailing); 785602"];
6724 [label="return 'into'; 785603"];
6725 [label="FullWidth = this.Text.Length; 785604"];
6726 [label="FullWidth 785605"];
6727 [label="this.AdjustFlagsAndWidth(trailing); 785606"];
6728 [label="return 'let'; 785607"];
6729 [label="FullWidth = this.Text.Length; 785608"];
6730 [label="FullWidth 785609"];
6731 [label="return 'let'; 785610"];
6732 [label="FullWidth = this.Text.Length; 785611"];
6733 [label="FullWidth 785612"];
6734 [label="this.AdjustFlagsAndWidth(leading); 785613"];
6735 [label="return 'let'; 785614"];
6736 [label="FullWidth = this.Text.Length; 785615"];
6737 [label="FullWidth 785616"];
6738 [label="this.AdjustFlagsAndWidth(trailing); 785617"];
6739 [label="return 'let'; 785618"];
6740 [label="FullWidth = this.Text.Length; 785619"];
6741 [label="FullWidth 785620"];
6742 [label="this.AdjustFlagsAndWidth(trailing); 785621"];
6743 [label="return 'by'; 785622"];
6744 [label="FullWidth = this.Text.Length; 785623"];
6745 [label="FullWidth 785624"];
6746 [label="return 'by'; 785625"];
6747 [label="FullWidth = this.Text.Length; 785626"];
6748 [label="FullWidth 785627"];
6749 [label="this.AdjustFlagsAndWidth(leading); 785628"];
6750 [label="return 'by'; 785629"];
6751 [label="FullWidth = this.Text.Length; 785630"];
6752 [label="FullWidth 785631"];
6753 [label="this.AdjustFlagsAndWidth(trailing); 785632"];
6754 [label="return 'by'; 785633"];
6755 [label="FullWidth = this.Text.Length; 785634"];
6756 [label="FullWidth 785635"];
6757 [label="this.AdjustFlagsAndWidth(trailing); 785636"];
6758 [label="return 'select'; 785637"];
6759 [label="FullWidth = this.Text.Length; 785638"];
6760 [label="FullWidth 785639"];
6761 [label="return 'select'; 785640"];
6762 [label="FullWidth = this.Text.Length; 785641"];
6763 [label="FullWidth 785642"];
6764 [label="this.AdjustFlagsAndWidth(leading); 785643"];
6765 [label="return 'select'; 785644"];
6766 [label="FullWidth = this.Text.Length; 785645"];
6767 [label="FullWidth 785646"];
6768 [label="this.AdjustFlagsAndWidth(trailing); 785647"];
6769 [label="return 'select'; 785648"];
6770 [label="FullWidth = this.Text.Length; 785649"];
6771 [label="FullWidth 785650"];
6772 [label="this.AdjustFlagsAndWidth(trailing); 785651"];
6773 [label="return 'orderby'; 785652"];
6774 [label="FullWidth = this.Text.Length; 785653"];
6775 [label="FullWidth 785654"];
6776 [label="return 'orderby'; 785655"];
6777 [label="FullWidth = this.Text.Length; 785656"];
6778 [label="FullWidth 785657"];
6779 [label="this.AdjustFlagsAndWidth(leading); 785658"];
6780 [label="return 'orderby'; 785659"];
6781 [label="FullWidth = this.Text.Length; 785660"];
6782 [label="FullWidth 785661"];
6783 [label="this.AdjustFlagsAndWidth(trailing); 785662"];
6784 [label="return 'orderby'; 785663"];
6785 [label="FullWidth = this.Text.Length; 785664"];
6786 [label="FullWidth 785665"];
6787 [label="this.AdjustFlagsAndWidth(trailing); 785666"];
6788 [label="return 'on'; 785667"];
6789 [label="FullWidth = this.Text.Length; 785668"];
6790 [label="FullWidth 785669"];
6791 [label="return 'on'; 785670"];
6792 [label="FullWidth = this.Text.Length; 785671"];
6793 [label="FullWidth 785672"];
6794 [label="this.AdjustFlagsAndWidth(leading); 785673"];
6795 [label="return 'on'; 785674"];
6796 [label="FullWidth = this.Text.Length; 785675"];
6797 [label="FullWidth 785676"];
6798 [label="this.AdjustFlagsAndWidth(trailing); 785677"];
6799 [label="return 'on'; 785678"];
6800 [label="FullWidth = this.Text.Length; 785679"];
6801 [label="FullWidth 785680"];
6802 [label="this.AdjustFlagsAndWidth(trailing); 785681"];
6803 [label="return 'equals'; 785682"];
6804 [label="FullWidth = this.Text.Length; 785683"];
6805 [label="FullWidth 785684"];
6806 [label="return 'equals'; 785685"];
6807 [label="FullWidth = this.Text.Length; 785686"];
6808 [label="FullWidth 785687"];
6809 [label="this.AdjustFlagsAndWidth(leading); 785688"];
6810 [label="return 'equals'; 785689"];
6811 [label="FullWidth = this.Text.Length; 785690"];
6812 [label="FullWidth 785691"];
6813 [label="this.AdjustFlagsAndWidth(trailing); 785692"];
6814 [label="return 'equals'; 785693"];
6815 [label="FullWidth = this.Text.Length; 785694"];
6816 [label="FullWidth 785695"];
6817 [label="this.AdjustFlagsAndWidth(trailing); 785696"];
6818 [label="return 'ascending'; 785697"];
6819 [label="FullWidth = this.Text.Length; 785698"];
6820 [label="FullWidth 785699"];
6821 [label="return 'ascending'; 785700"];
6822 [label="FullWidth = this.Text.Length; 785701"];
6823 [label="FullWidth 785702"];
6824 [label="this.AdjustFlagsAndWidth(leading); 785703"];
6825 [label="return 'ascending'; 785704"];
6826 [label="FullWidth = this.Text.Length; 785705"];
6827 [label="FullWidth 785706"];
6828 [label="this.AdjustFlagsAndWidth(trailing); 785707"];
6829 [label="return 'ascending'; 785708"];
6830 [label="FullWidth = this.Text.Length; 785709"];
6831 [label="FullWidth 785710"];
6832 [label="this.AdjustFlagsAndWidth(trailing); 785711"];
6833 [label="return 'descending'; 785712"];
6834 [label="FullWidth = this.Text.Length; 785713"];
6835 [label="FullWidth 785714"];
6836 [label="return 'descending'; 785715"];
6837 [label="FullWidth = this.Text.Length; 785716"];
6838 [label="FullWidth 785717"];
6839 [label="this.AdjustFlagsAndWidth(leading); 785718"];
6840 [label="return 'descending'; 785719"];
6841 [label="FullWidth = this.Text.Length; 785720"];
6842 [label="FullWidth 785721"];
6843 [label="this.AdjustFlagsAndWidth(trailing); 785722"];
6844 [label="return 'descending'; 785723"];
6845 [label="FullWidth = this.Text.Length; 785724"];
6846 [label="FullWidth 785725"];
6847 [label="this.AdjustFlagsAndWidth(trailing); 785726"];
6848 [label="return 'nameof'; 785727"];
6849 [label="FullWidth = this.Text.Length; 785728"];
6850 [label="FullWidth 785729"];
6851 [label="return 'nameof'; 785730"];
6852 [label="FullWidth = this.Text.Length; 785731"];
6853 [label="FullWidth 785732"];
6854 [label="this.AdjustFlagsAndWidth(leading); 785733"];
6855 [label="return 'nameof'; 785734"];
6856 [label="FullWidth = this.Text.Length; 785735"];
6857 [label="FullWidth 785736"];
6858 [label="this.AdjustFlagsAndWidth(trailing); 785737"];
6859 [label="return 'nameof'; 785738"];
6860 [label="FullWidth = this.Text.Length; 785739"];
6861 [label="FullWidth 785740"];
6862 [label="this.AdjustFlagsAndWidth(trailing); 785741"];
6863 [label="return 'async'; 785742"];
6864 [label="FullWidth = this.Text.Length; 785743"];
6865 [label="FullWidth 785744"];
6866 [label="return 'async'; 785745"];
6867 [label="FullWidth = this.Text.Length; 785746"];
6868 [label="FullWidth 785747"];
6869 [label="this.AdjustFlagsAndWidth(leading); 785748"];
6870 [label="return 'async'; 785749"];
6871 [label="FullWidth = this.Text.Length; 785750"];
6872 [label="FullWidth 785751"];
6873 [label="this.AdjustFlagsAndWidth(trailing); 785752"];
6874 [label="return 'async'; 785753"];
6875 [label="FullWidth = this.Text.Length; 785754"];
6876 [label="FullWidth 785755"];
6877 [label="this.AdjustFlagsAndWidth(trailing); 785756"];
6878 [label="return 'await'; 785757"];
6879 [label="FullWidth = this.Text.Length; 785758"];
6880 [label="FullWidth 785759"];
6881 [label="return 'await'; 785760"];
6882 [label="FullWidth = this.Text.Length; 785761"];
6883 [label="FullWidth 785762"];
6884 [label="this.AdjustFlagsAndWidth(leading); 785763"];
6885 [label="return 'await'; 785764"];
6886 [label="FullWidth = this.Text.Length; 785765"];
6887 [label="FullWidth 785766"];
6888 [label="this.AdjustFlagsAndWidth(trailing); 785767"];
6889 [label="return 'await'; 785768"];
6890 [label="FullWidth = this.Text.Length; 785769"];
6891 [label="FullWidth 785770"];
6892 [label="this.AdjustFlagsAndWidth(trailing); 785771"];
6893 [label="return 'when'; 785772"];
6894 [label="FullWidth = this.Text.Length; 785773"];
6895 [label="FullWidth 785774"];
6896 [label="return 'when'; 785775"];
6897 [label="FullWidth = this.Text.Length; 785776"];
6898 [label="FullWidth 785777"];
6899 [label="this.AdjustFlagsAndWidth(leading); 785778"];
6900 [label="return 'when'; 785779"];
6901 [label="FullWidth = this.Text.Length; 785780"];
6902 [label="FullWidth 785781"];
6903 [label="this.AdjustFlagsAndWidth(trailing); 785782"];
6904 [label="return 'when'; 785783"];
6905 [label="FullWidth = this.Text.Length; 785784"];
6906 [label="FullWidth 785785"];
6907 [label="this.AdjustFlagsAndWidth(trailing); 785786"];
6908 [label="return 'or'; 785787"];
6909 [label="FullWidth = this.Text.Length; 785788"];
6910 [label="FullWidth 785789"];
6911 [label="return 'or'; 785790"];
6912 [label="FullWidth = this.Text.Length; 785791"];
6913 [label="FullWidth 785792"];
6914 [label="this.AdjustFlagsAndWidth(leading); 785793"];
6915 [label="return 'or'; 785794"];
6916 [label="FullWidth = this.Text.Length; 785795"];
6917 [label="FullWidth 785796"];
6918 [label="this.AdjustFlagsAndWidth(trailing); 785797"];
6919 [label="return 'or'; 785798"];
6920 [label="FullWidth = this.Text.Length; 785799"];
6921 [label="FullWidth 785800"];
6922 [label="this.AdjustFlagsAndWidth(trailing); 785801"];
6923 [label="return 'and'; 785802"];
6924 [label="FullWidth = this.Text.Length; 785803"];
6925 [label="FullWidth 785804"];
6926 [label="return 'and'; 785805"];
6927 [label="FullWidth = this.Text.Length; 785806"];
6928 [label="FullWidth 785807"];
6929 [label="this.AdjustFlagsAndWidth(leading); 785808"];
6930 [label="return 'and'; 785809"];
6931 [label="FullWidth = this.Text.Length; 785810"];
6932 [label="FullWidth 785811"];
6933 [label="this.AdjustFlagsAndWidth(trailing); 785812"];
6934 [label="return 'and'; 785813"];
6935 [label="FullWidth = this.Text.Length; 785814"];
6936 [label="FullWidth 785815"];
6937 [label="this.AdjustFlagsAndWidth(trailing); 785816"];
6938 [label="return 'not'; 785817"];
6939 [label="FullWidth = this.Text.Length; 785818"];
6940 [label="FullWidth 785819"];
6941 [label="return 'not'; 785820"];
6942 [label="FullWidth = this.Text.Length; 785821"];
6943 [label="FullWidth 785822"];
6944 [label="this.AdjustFlagsAndWidth(leading); 785823"];
6945 [label="return 'not'; 785824"];
6946 [label="FullWidth = this.Text.Length; 785825"];
6947 [label="FullWidth 785826"];
6948 [label="this.AdjustFlagsAndWidth(trailing); 785827"];
6949 [label="return 'not'; 785828"];
6950 [label="FullWidth = this.Text.Length; 785829"];
6951 [label="FullWidth 785830"];
6952 [label="this.AdjustFlagsAndWidth(trailing); 785831"];
6953 [label="return 'data'; 785832"];
6954 [label="FullWidth = this.Text.Length; 785833"];
6955 [label="FullWidth 785834"];
6956 [label="return 'data'; 785835"];
6957 [label="FullWidth = this.Text.Length; 785836"];
6958 [label="FullWidth 785837"];
6959 [label="this.AdjustFlagsAndWidth(leading); 785838"];
6960 [label="return 'data'; 785839"];
6961 [label="FullWidth = this.Text.Length; 785840"];
6962 [label="FullWidth 785841"];
6963 [label="this.AdjustFlagsAndWidth(trailing); 785842"];
6964 [label="return 'data'; 785843"];
6965 [label="FullWidth = this.Text.Length; 785844"];
6966 [label="FullWidth 785845"];
6967 [label="this.AdjustFlagsAndWidth(trailing); 785846"];
6968 [label="return 'with'; 785847"];
6969 [label="FullWidth = this.Text.Length; 785848"];
6970 [label="FullWidth 785849"];
6971 [label="return 'with'; 785850"];
6972 [label="FullWidth = this.Text.Length; 785851"];
6973 [label="FullWidth 785852"];
6974 [label="this.AdjustFlagsAndWidth(leading); 785853"];
6975 [label="return 'with'; 785854"];
6976 [label="FullWidth = this.Text.Length; 785855"];
6977 [label="FullWidth 785856"];
6978 [label="this.AdjustFlagsAndWidth(trailing); 785857"];
6979 [label="return 'with'; 785858"];
6980 [label="FullWidth = this.Text.Length; 785859"];
6981 [label="FullWidth 785860"];
6982 [label="this.AdjustFlagsAndWidth(trailing); 785861"];
6983 [label="return 'init'; 785862"];
6984 [label="FullWidth = this.Text.Length; 785863"];
6985 [label="FullWidth 785864"];
6986 [label="return 'init'; 785865"];
6987 [label="FullWidth = this.Text.Length; 785866"];
6988 [label="FullWidth 785867"];
6989 [label="this.AdjustFlagsAndWidth(leading); 785868"];
6990 [label="return 'init'; 785869"];
6991 [label="FullWidth = this.Text.Length; 785870"];
6992 [label="FullWidth 785871"];
6993 [label="this.AdjustFlagsAndWidth(trailing); 785872"];
6994 [label="return 'init'; 785873"];
6995 [label="FullWidth = this.Text.Length; 785874"];
6996 [label="FullWidth 785875"];
6997 [label="this.AdjustFlagsAndWidth(trailing); 785876"];
6998 [label="return 'record'; 785877"];
6999 [label="FullWidth = this.Text.Length; 785878"];
7000 [label="FullWidth 785879"];
7001 [label="return 'record'; 785880"];
7002 [label="FullWidth = this.Text.Length; 785881"];
7003 [label="FullWidth 785882"];
7004 [label="this.AdjustFlagsAndWidth(leading); 785883"];
7005 [label="return 'record'; 785884"];
7006 [label="FullWidth = this.Text.Length; 785885"];
7007 [label="FullWidth 785886"];
7008 [label="this.AdjustFlagsAndWidth(trailing); 785887"];
7009 [label="return 'record'; 785888"];
7010 [label="FullWidth = this.Text.Length; 785889"];
7011 [label="FullWidth 785890"];
7012 [label="this.AdjustFlagsAndWidth(trailing); 785891"];
7013 [label="return 'managed'; 785892"];
7014 [label="FullWidth = this.Text.Length; 785893"];
7015 [label="FullWidth 785894"];
7016 [label="return 'managed'; 785895"];
7017 [label="FullWidth = this.Text.Length; 785896"];
7018 [label="FullWidth 785897"];
7019 [label="this.AdjustFlagsAndWidth(leading); 785898"];
7020 [label="return 'managed'; 785899"];
7021 [label="FullWidth = this.Text.Length; 785900"];
7022 [label="FullWidth 785901"];
7023 [label="this.AdjustFlagsAndWidth(trailing); 785902"];
7024 [label="return 'managed'; 785903"];
7025 [label="FullWidth = this.Text.Length; 785904"];
7026 [label="FullWidth 785905"];
7027 [label="this.AdjustFlagsAndWidth(trailing); 785906"];
7028 [label="return 'unmanaged'; 785907"];
7029 [label="FullWidth = this.Text.Length; 785908"];
7030 [label="FullWidth 785909"];
7031 [label="return 'unmanaged'; 785910"];
7032 [label="FullWidth = this.Text.Length; 785911"];
7033 [label="FullWidth 785912"];
7034 [label="this.AdjustFlagsAndWidth(leading); 785913"];
7035 [label="return 'unmanaged'; 785914"];
7036 [label="FullWidth = this.Text.Length; 785915"];
7037 [label="FullWidth 785916"];
7038 [label="this.AdjustFlagsAndWidth(trailing); 785917"];
7039 [label="return 'unmanaged'; 785918"];
7040 [label="FullWidth = this.Text.Length; 785919"];
7041 [label="FullWidth 785920"];
7042 [label="this.AdjustFlagsAndWidth(trailing); 785921"];
7043 [label="return 'elif'; 785922"];
7044 [label="FullWidth = this.Text.Length; 785923"];
7045 [label="FullWidth 785924"];
7046 [label="return 'elif'; 785925"];
7047 [label="FullWidth = this.Text.Length; 785926"];
7048 [label="FullWidth 785927"];
7049 [label="this.AdjustFlagsAndWidth(leading); 785928"];
7050 [label="return 'elif'; 785929"];
7051 [label="FullWidth = this.Text.Length; 785930"];
7052 [label="FullWidth 785931"];
7053 [label="this.AdjustFlagsAndWidth(trailing); 785932"];
7054 [label="return 'elif'; 785933"];
7055 [label="FullWidth = this.Text.Length; 785934"];
7056 [label="FullWidth 785935"];
7057 [label="this.AdjustFlagsAndWidth(trailing); 785936"];
7058 [label="return 'endif'; 785937"];
7059 [label="FullWidth = this.Text.Length; 785938"];
7060 [label="FullWidth 785939"];
7061 [label="return 'endif'; 785940"];
7062 [label="FullWidth = this.Text.Length; 785941"];
7063 [label="FullWidth 785942"];
7064 [label="this.AdjustFlagsAndWidth(leading); 785943"];
7065 [label="return 'endif'; 785944"];
7066 [label="FullWidth = this.Text.Length; 785945"];
7067 [label="FullWidth 785946"];
7068 [label="this.AdjustFlagsAndWidth(trailing); 785947"];
7069 [label="return 'endif'; 785948"];
7070 [label="FullWidth = this.Text.Length; 785949"];
7071 [label="FullWidth 785950"];
7072 [label="this.AdjustFlagsAndWidth(trailing); 785951"];
7073 [label="return 'region'; 785952"];
7074 [label="FullWidth = this.Text.Length; 785953"];
7075 [label="FullWidth 785954"];
7076 [label="return 'region'; 785955"];
7077 [label="FullWidth = this.Text.Length; 785956"];
7078 [label="FullWidth 785957"];
7079 [label="this.AdjustFlagsAndWidth(leading); 785958"];
7080 [label="return 'region'; 785959"];
7081 [label="FullWidth = this.Text.Length; 785960"];
7082 [label="FullWidth 785961"];
7083 [label="this.AdjustFlagsAndWidth(trailing); 785962"];
7084 [label="return 'region'; 785963"];
7085 [label="FullWidth = this.Text.Length; 785964"];
7086 [label="FullWidth 785965"];
7087 [label="this.AdjustFlagsAndWidth(trailing); 785966"];
7088 [label="return 'endregion'; 785967"];
7089 [label="FullWidth = this.Text.Length; 785968"];
7090 [label="FullWidth 785969"];
7091 [label="return 'endregion'; 785970"];
7092 [label="FullWidth = this.Text.Length; 785971"];
7093 [label="FullWidth 785972"];
7094 [label="this.AdjustFlagsAndWidth(leading); 785973"];
7095 [label="return 'endregion'; 785974"];
7096 [label="FullWidth = this.Text.Length; 785975"];
7097 [label="FullWidth 785976"];
7098 [label="this.AdjustFlagsAndWidth(trailing); 785977"];
7099 [label="return 'endregion'; 785978"];
7100 [label="FullWidth = this.Text.Length; 785979"];
7101 [label="FullWidth 785980"];
7102 [label="this.AdjustFlagsAndWidth(trailing); 785981"];
7103 [label="return 'define'; 785982"];
7104 [label="FullWidth = this.Text.Length; 785983"];
7105 [label="FullWidth 785984"];
7106 [label="return 'define'; 785985"];
7107 [label="FullWidth = this.Text.Length; 785986"];
7108 [label="FullWidth 785987"];
7109 [label="this.AdjustFlagsAndWidth(leading); 785988"];
7110 [label="return 'define'; 785989"];
7111 [label="FullWidth = this.Text.Length; 785990"];
7112 [label="FullWidth 785991"];
7113 [label="this.AdjustFlagsAndWidth(trailing); 785992"];
7114 [label="return 'define'; 785993"];
7115 [label="FullWidth = this.Text.Length; 785994"];
7116 [label="FullWidth 785995"];
7117 [label="this.AdjustFlagsAndWidth(trailing); 785996"];
7118 [label="return 'undef'; 785997"];
7119 [label="FullWidth = this.Text.Length; 785998"];
7120 [label="FullWidth 785999"];
7121 [label="return 'undef'; 786000"];
7122 [label="FullWidth = this.Text.Length; 786001"];
7123 [label="FullWidth 786002"];
7124 [label="this.AdjustFlagsAndWidth(leading); 786003"];
7125 [label="return 'undef'; 786004"];
7126 [label="FullWidth = this.Text.Length; 786005"];
7127 [label="FullWidth 786006"];
7128 [label="this.AdjustFlagsAndWidth(trailing); 786007"];
7129 [label="return 'undef'; 786008"];
7130 [label="FullWidth = this.Text.Length; 786009"];
7131 [label="FullWidth 786010"];
7132 [label="this.AdjustFlagsAndWidth(trailing); 786011"];
7133 [label="return 'warning'; 786012"];
7134 [label="FullWidth = this.Text.Length; 786013"];
7135 [label="FullWidth 786014"];
7136 [label="return 'warning'; 786015"];
7137 [label="FullWidth = this.Text.Length; 786016"];
7138 [label="FullWidth 786017"];
7139 [label="this.AdjustFlagsAndWidth(leading); 786018"];
7140 [label="return 'warning'; 786019"];
7141 [label="FullWidth = this.Text.Length; 786020"];
7142 [label="FullWidth 786021"];
7143 [label="this.AdjustFlagsAndWidth(trailing); 786022"];
7144 [label="return 'warning'; 786023"];
7145 [label="FullWidth = this.Text.Length; 786024"];
7146 [label="FullWidth 786025"];
7147 [label="this.AdjustFlagsAndWidth(trailing); 786026"];
7148 [label="return 'error'; 786027"];
7149 [label="FullWidth = this.Text.Length; 786028"];
7150 [label="FullWidth 786029"];
7151 [label="return 'error'; 786030"];
7152 [label="FullWidth = this.Text.Length; 786031"];
7153 [label="FullWidth 786032"];
7154 [label="this.AdjustFlagsAndWidth(leading); 786033"];
7155 [label="return 'error'; 786034"];
7156 [label="FullWidth = this.Text.Length; 786035"];
7157 [label="FullWidth 786036"];
7158 [label="this.AdjustFlagsAndWidth(trailing); 786037"];
7159 [label="return 'error'; 786038"];
7160 [label="FullWidth = this.Text.Length; 786039"];
7161 [label="FullWidth 786040"];
7162 [label="this.AdjustFlagsAndWidth(trailing); 786041"];
7163 [label="return 'line'; 786042"];
7164 [label="FullWidth = this.Text.Length; 786043"];
7165 [label="FullWidth 786044"];
7166 [label="return 'line'; 786045"];
7167 [label="FullWidth = this.Text.Length; 786046"];
7168 [label="FullWidth 786047"];
7169 [label="this.AdjustFlagsAndWidth(leading); 786048"];
7170 [label="return 'line'; 786049"];
7171 [label="FullWidth = this.Text.Length; 786050"];
7172 [label="FullWidth 786051"];
7173 [label="this.AdjustFlagsAndWidth(trailing); 786052"];
7174 [label="return 'line'; 786053"];
7175 [label="FullWidth = this.Text.Length; 786054"];
7176 [label="FullWidth 786055"];
7177 [label="this.AdjustFlagsAndWidth(trailing); 786056"];
7178 [label="return 'pragma'; 786057"];
7179 [label="FullWidth = this.Text.Length; 786058"];
7180 [label="FullWidth 786059"];
7181 [label="return 'pragma'; 786060"];
7182 [label="FullWidth = this.Text.Length; 786061"];
7183 [label="FullWidth 786062"];
7184 [label="this.AdjustFlagsAndWidth(leading); 786063"];
7185 [label="return 'pragma'; 786064"];
7186 [label="FullWidth = this.Text.Length; 786065"];
7187 [label="FullWidth 786066"];
7188 [label="this.AdjustFlagsAndWidth(trailing); 786067"];
7189 [label="return 'pragma'; 786068"];
7190 [label="FullWidth = this.Text.Length; 786069"];
7191 [label="FullWidth 786070"];
7192 [label="this.AdjustFlagsAndWidth(trailing); 786071"];
7193 [label="return 'hidden'; 786072"];
7194 [label="FullWidth = this.Text.Length; 786073"];
7195 [label="FullWidth 786074"];
7196 [label="return 'hidden'; 786075"];
7197 [label="FullWidth = this.Text.Length; 786076"];
7198 [label="FullWidth 786077"];
7199 [label="this.AdjustFlagsAndWidth(leading); 786078"];
7200 [label="return 'hidden'; 786079"];
7201 [label="FullWidth = this.Text.Length; 786080"];
7202 [label="FullWidth 786081"];
7203 [label="this.AdjustFlagsAndWidth(trailing); 786082"];
7204 [label="return 'hidden'; 786083"];
7205 [label="FullWidth = this.Text.Length; 786084"];
7206 [label="FullWidth 786085"];
7207 [label="this.AdjustFlagsAndWidth(trailing); 786086"];
7208 [label="return 'checksum'; 786087"];
7209 [label="FullWidth = this.Text.Length; 786088"];
7210 [label="FullWidth 786089"];
7211 [label="return 'checksum'; 786090"];
7212 [label="FullWidth = this.Text.Length; 786091"];
7213 [label="FullWidth 786092"];
7214 [label="this.AdjustFlagsAndWidth(leading); 786093"];
7215 [label="return 'checksum'; 786094"];
7216 [label="FullWidth = this.Text.Length; 786095"];
7217 [label="FullWidth 786096"];
7218 [label="this.AdjustFlagsAndWidth(trailing); 786097"];
7219 [label="return 'checksum'; 786098"];
7220 [label="FullWidth = this.Text.Length; 786099"];
7221 [label="FullWidth 786100"];
7222 [label="this.AdjustFlagsAndWidth(trailing); 786101"];
7223 [label="return 'disable'; 786102"];
7224 [label="FullWidth = this.Text.Length; 786103"];
7225 [label="FullWidth 786104"];
7226 [label="return 'disable'; 786105"];
7227 [label="FullWidth = this.Text.Length; 786106"];
7228 [label="FullWidth 786107"];
7229 [label="this.AdjustFlagsAndWidth(leading); 786108"];
7230 [label="return 'disable'; 786109"];
7231 [label="FullWidth = this.Text.Length; 786110"];
7232 [label="FullWidth 786111"];
7233 [label="this.AdjustFlagsAndWidth(trailing); 786112"];
7234 [label="return 'disable'; 786113"];
7235 [label="FullWidth = this.Text.Length; 786114"];
7236 [label="FullWidth 786115"];
7237 [label="this.AdjustFlagsAndWidth(trailing); 786116"];
7238 [label="return 'restore'; 786117"];
7239 [label="FullWidth = this.Text.Length; 786118"];
7240 [label="FullWidth 786119"];
7241 [label="return 'restore'; 786120"];
7242 [label="FullWidth = this.Text.Length; 786121"];
7243 [label="FullWidth 786122"];
7244 [label="this.AdjustFlagsAndWidth(leading); 786123"];
7245 [label="return 'restore'; 786124"];
7246 [label="FullWidth = this.Text.Length; 786125"];
7247 [label="FullWidth 786126"];
7248 [label="this.AdjustFlagsAndWidth(trailing); 786127"];
7249 [label="return 'restore'; 786128"];
7250 [label="FullWidth = this.Text.Length; 786129"];
7251 [label="FullWidth 786130"];
7252 [label="this.AdjustFlagsAndWidth(trailing); 786131"];
7253 [label="return 'r'; 786132"];
7254 [label="FullWidth = this.Text.Length; 786133"];
7255 [label="FullWidth 786134"];
7256 [label="return 'r'; 786135"];
7257 [label="FullWidth = this.Text.Length; 786136"];
7258 [label="FullWidth 786137"];
7259 [label="this.AdjustFlagsAndWidth(leading); 786138"];
7260 [label="return 'r'; 786139"];
7261 [label="FullWidth = this.Text.Length; 786140"];
7262 [label="FullWidth 786141"];
7263 [label="this.AdjustFlagsAndWidth(trailing); 786142"];
7264 [label="return 'r'; 786143"];
7265 [label="FullWidth = this.Text.Length; 786144"];
7266 [label="FullWidth 786145"];
7267 [label="this.AdjustFlagsAndWidth(trailing); 786146"];
7268 [label="return '$\\''; 786147"];
7269 [label="FullWidth = this.Text.Length; 786148"];
7270 [label="FullWidth 786149"];
7271 [label="return '$\\''; 786150"];
7272 [label="FullWidth = this.Text.Length; 786151"];
7273 [label="FullWidth 786152"];
7274 [label="this.AdjustFlagsAndWidth(leading); 786153"];
7275 [label="return '$\\''; 786154"];
7276 [label="FullWidth = this.Text.Length; 786155"];
7277 [label="FullWidth 786156"];
7278 [label="this.AdjustFlagsAndWidth(trailing); 786157"];
7279 [label="return '$\\''; 786158"];
7280 [label="FullWidth = this.Text.Length; 786159"];
7281 [label="FullWidth 786160"];
7282 [label="this.AdjustFlagsAndWidth(trailing); 786161"];
7283 [label="return '\\''; 786162"];
7284 [label="FullWidth = this.Text.Length; 786163"];
7285 [label="FullWidth 786164"];
7286 [label="return '\\''; 786165"];
7287 [label="FullWidth = this.Text.Length; 786166"];
7288 [label="FullWidth 786167"];
7289 [label="this.AdjustFlagsAndWidth(leading); 786168"];
7290 [label="return '\\''; 786169"];
7291 [label="FullWidth = this.Text.Length; 786170"];
7292 [label="FullWidth 786171"];
7293 [label="this.AdjustFlagsAndWidth(trailing); 786172"];
7294 [label="return '\\''; 786173"];
7295 [label="FullWidth = this.Text.Length; 786174"];
7296 [label="FullWidth 786175"];
7297 [label="this.AdjustFlagsAndWidth(trailing); 786176"];
7298 [label="return '$@\\''; 786177"];
7299 [label="FullWidth = this.Text.Length; 786178"];
7300 [label="FullWidth 786179"];
7301 [label="return '$@\\''; 786180"];
7302 [label="FullWidth = this.Text.Length; 786181"];
7303 [label="FullWidth 786182"];
7304 [label="this.AdjustFlagsAndWidth(leading); 786183"];
7305 [label="return '$@\\''; 786184"];
7306 [label="FullWidth = this.Text.Length; 786185"];
7307 [label="FullWidth 786186"];
7308 [label="this.AdjustFlagsAndWidth(trailing); 786187"];
7309 [label="return '$@\\''; 786188"];
7310 [label="FullWidth = this.Text.Length; 786189"];
7311 [label="FullWidth 786190"];
7312 [label="this.AdjustFlagsAndWidth(trailing); 786191"];
7313 [label="return 'load'; 786192"];
7314 [label="FullWidth = this.Text.Length; 786193"];
7315 [label="FullWidth 786194"];
7316 [label="return 'load'; 786195"];
7317 [label="FullWidth = this.Text.Length; 786196"];
7318 [label="FullWidth 786197"];
7319 [label="this.AdjustFlagsAndWidth(leading); 786198"];
7320 [label="return 'load'; 786199"];
7321 [label="FullWidth = this.Text.Length; 786200"];
7322 [label="FullWidth 786201"];
7323 [label="this.AdjustFlagsAndWidth(trailing); 786202"];
7324 [label="return 'load'; 786203"];
7325 [label="FullWidth = this.Text.Length; 786204"];
7326 [label="FullWidth 786205"];
7327 [label="this.AdjustFlagsAndWidth(trailing); 786206"];
7328 [label="return 'nullable'; 786207"];
7329 [label="FullWidth = this.Text.Length; 786208"];
7330 [label="FullWidth 786209"];
7331 [label="return 'nullable'; 786210"];
7332 [label="FullWidth = this.Text.Length; 786211"];
7333 [label="FullWidth 786212"];
7334 [label="this.AdjustFlagsAndWidth(leading); 786213"];
7335 [label="return 'nullable'; 786214"];
7336 [label="FullWidth = this.Text.Length; 786215"];
7337 [label="FullWidth 786216"];
7338 [label="this.AdjustFlagsAndWidth(trailing); 786217"];
7339 [label="return 'nullable'; 786218"];
7340 [label="FullWidth = this.Text.Length; 786219"];
7341 [label="FullWidth 786220"];
7342 [label="this.AdjustFlagsAndWidth(trailing); 786221"];
7343 [label="return 'enable'; 786222"];
7344 [label="FullWidth = this.Text.Length; 786223"];
7345 [label="FullWidth 786224"];
7346 [label="return 'enable'; 786225"];
7347 [label="FullWidth = this.Text.Length; 786226"];
7348 [label="FullWidth 786227"];
7349 [label="this.AdjustFlagsAndWidth(leading); 786228"];
7350 [label="return 'enable'; 786229"];
7351 [label="FullWidth = this.Text.Length; 786230"];
7352 [label="FullWidth 786231"];
7353 [label="this.AdjustFlagsAndWidth(trailing); 786232"];
7354 [label="return 'enable'; 786233"];
7355 [label="FullWidth = this.Text.Length; 786234"];
7356 [label="FullWidth 786235"];
7357 [label="this.AdjustFlagsAndWidth(trailing); 786236"];
7358 [label="return 'warnings'; 786237"];
7359 [label="FullWidth = this.Text.Length; 786238"];
7360 [label="FullWidth 786239"];
7361 [label="return 'warnings'; 786240"];
7362 [label="FullWidth = this.Text.Length; 786241"];
7363 [label="FullWidth 786242"];
7364 [label="this.AdjustFlagsAndWidth(leading); 786243"];
7365 [label="return 'warnings'; 786244"];
7366 [label="FullWidth = this.Text.Length; 786245"];
7367 [label="FullWidth 786246"];
7368 [label="this.AdjustFlagsAndWidth(trailing); 786247"];
7369 [label="return 'warnings'; 786248"];
7370 [label="FullWidth = this.Text.Length; 786249"];
7371 [label="FullWidth 786250"];
7372 [label="this.AdjustFlagsAndWidth(trailing); 786251"];
7373 [label="return 'annotations'; 786252"];
7374 [label="FullWidth = this.Text.Length; 786253"];
7375 [label="FullWidth 786254"];
7376 [label="return 'annotations'; 786255"];
7377 [label="FullWidth = this.Text.Length; 786256"];
7378 [label="FullWidth 786257"];
7379 [label="this.AdjustFlagsAndWidth(leading); 786258"];
7380 [label="return 'annotations'; 786259"];
7381 [label="FullWidth = this.Text.Length; 786260"];
7382 [label="FullWidth 786261"];
7383 [label="this.AdjustFlagsAndWidth(trailing); 786262"];
7384 [label="return 'annotations'; 786263"];
7385 [label="FullWidth = this.Text.Length; 786264"];
7386 [label="FullWidth 786265"];
7387 [label="this.AdjustFlagsAndWidth(trailing); 786266"];
7388 [label="return 'var'; 786267"];
7389 [label="FullWidth = this.Text.Length; 786268"];
7390 [label="FullWidth 786269"];
7391 [label="return 'var'; 786270"];
7392 [label="FullWidth = this.Text.Length; 786271"];
7393 [label="FullWidth 786272"];
7394 [label="this.AdjustFlagsAndWidth(leading); 786273"];
7395 [label="return 'var'; 786274"];
7396 [label="FullWidth = this.Text.Length; 786275"];
7397 [label="FullWidth 786276"];
7398 [label="this.AdjustFlagsAndWidth(trailing); 786277"];
7399 [label="return 'var'; 786278"];
7400 [label="FullWidth = this.Text.Length; 786279"];
7401 [label="FullWidth 786280"];
7402 [label="this.AdjustFlagsAndWidth(trailing); 786281"];
7403 [label="return '_'; 786282"];
7404 [label="FullWidth = this.Text.Length; 786283"];
7405 [label="FullWidth 786284"];
7406 [label="return '_'; 786285"];
7407 [label="FullWidth = this.Text.Length; 786286"];
7408 [label="FullWidth 786287"];
7409 [label="this.AdjustFlagsAndWidth(leading); 786288"];
7410 [label="return '_'; 786289"];
7411 [label="FullWidth = this.Text.Length; 786290"];
7412 [label="FullWidth 786291"];
7413 [label="this.AdjustFlagsAndWidth(trailing); 786292"];
7414 [label="return '_'; 786293"];
7415 [label="FullWidth = this.Text.Length; 786294"];
7416 [label="FullWidth 786295"];
7417 [label="this.AdjustFlagsAndWidth(trailing); 786296"];
7418 [label="return SyntaxToken.Create(kind, leading, trailing); 786297"];
7419 [label="return SyntaxToken.Create(kind, leading, trailing); 786298"];
7420 [label="return SyntaxToken.Create(kind, leading, trailing); 786299"];
7421 [label="SyntaxToken.Create(kind, leading, trailing) 786300"];
7422 [label="param Create(SyntaxKind kind) 786301"];
7423 [label="param Create(GreenNode leading) 786302"];
7424 [label="param Create(GreenNode trailing) 786303"];
7425 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 786304"];
7426 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 786305"];
7427 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 786306"];
7428 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 786307"];
7429 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 786308"];
7430 [label="return s_tokensWithNoTrivia[(int)kind].Value; 786309"];
7431 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 786310"];
7432 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 786311"];
7433 [label="return token; 786312"];
7434 [label="this.AddLexedToken(token); 786313"];
7435 [label="this.AddLexedToken(token) 786314"];
7436 [label="param AddLexedToken(SyntaxToken token) 786315"];
7437 [label="param AddLexedToken(this) 786316"];
7438 [label="Debug.Assert(token != null); 786317"];
7439 [label="Debug.Assert(token != null); 786318"];
7440 [label="if (_tokenCount >= _lexedTokens.Length)\n            {\n                this.AddLexedTokenSlot();\n            } 786319"];
7441 [label="_lexedTokens[_tokenCount].Value = token; 786320"];
7442 [label="_lexedTokens[_tokenCount].Value 786321"];
7443 [label="_tokenCount 786322"];
7444 [label="this.AddLexedToken(token); 786323"];
7445 [label="token.Kind 786324"];
7446 [label="get { return (SyntaxKind)this.RawKind; } 786325"];
7447 [label="return (SyntaxKind)this.RawKind; 786326"];
7448 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 786327"];
7449 [label="this.PreLex(); 786328"];
7450 [label="new SyntaxListPool() 786329"];
7451 [label="_pool = new SyntaxListPool() 786330"];
7452 [label="_syntaxFactoryContext 786331"];
7453 [label="_syntaxFactory 786332"];
7454 [label="_recursionDepth 786333"];
7455 [label="_termState 786334"];
7456 [label="_isInTry 786335"];
7457 [label="_checkedTopLevelStatementsFeatureAvailability 786336"];
7458 [label="_syntaxFactoryContext = new SyntaxFactoryContext(); 786337"];
7459 [label="_syntaxFactoryContext 786338"];
7460 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 786339"];
7461 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 786340"];
7462 [label="_syntaxFactory 786341"];
7463 [label="using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 786342"];
7464 [label="parser.ParseCompilationUnit() 786343"];
7465 [label="param ParseCompilationUnit(this) 786344"];
7466 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 786345"];
7467 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 786346"];
7468 [label="ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))) 786347"];
7469 [label="param ParseWithStackGuard(Func<TNode> parseFunc) 786348"];
7470 [label="param ParseWithStackGuard(Func<TNode> createEmptyNodeFunc) 786349"];
7471 [label="param ParseWithStackGuard(this) 786350"];
7472 [label="Debug.Assert(_recursionDepth == 0); 786351"];
7473 [label="Debug.Assert(_recursionDepth == 0); 786352"];
7474 [label="return parseFunc(); 786353"];
7475 [label="return parseFunc(); 786354"];
7476 [label="param ParseCompilationUnitCore(this) 786355"];
7477 [label="SyntaxToken tmp = null; 786356"];
7478 [label="SyntaxListBuilder initialBadNodes = null; 786357"];
7479 [label="var body = new NamespaceBodyBuilder(_pool); 786358"];
7480 [label="var body = new NamespaceBodyBuilder(_pool); 786359"];
7481 [label="new NamespaceBodyBuilder(_pool) 786360"];
7482 [label="param NamespaceBodyBuilder(SyntaxListPool pool) 786361"];
7483 [label="param NamespaceBodyBuilder(this) 786362"];
7484 [label="Externs = pool.Allocate<ExternAliasDirectiveSyntax>(); 786363"];
7485 [label="Externs 786364"];
7486 [label="Usings = pool.Allocate<UsingDirectiveSyntax>(); 786365"];
7487 [label="Usings 786366"];
7488 [label="Attributes = pool.Allocate<AttributeListSyntax>(); 786367"];
7489 [label="Attributes 786368"];
7490 [label="Members = pool.Allocate<MemberDeclarationSyntax>(); 786369"];
7491 [label="Members 786370"];
7492 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 786371"];
7493 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 786372"];
7494 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 786373"];
7495 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 786374"];
7496 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 786375"];
7497 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 786376"];
7498 [label="get\n            {\n                return _syntaxFactoryContext.IsInAsync;\n            } 786377"];
7499 [label="return _syntaxFactoryContext.IsInAsync; 786378"];
7500 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 786379"];
7501 [label="this.FetchCurrentToken() 786380"];
7502 [label="param FetchCurrentToken(this) 786381"];
7503 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 786382"];
7504 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 786383"];
7505 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 786384"];
7506 [label="return _lexedTokens[_tokenOffset]; 786385"];
7507 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 786386"];
7508 [label="_currentToken 786387"];
7509 [label="get { return (SyntaxKind)this.RawKind; } 786388"];
7510 [label="return (SyntaxKind)this.RawKind; 786389"];
7511 [label="param AddIncompleteMembers(ref SyntaxListBuilder<MemberDeclarationSyntax> incompleteMembers) 786390"];
7512 [label="param AddIncompleteMembers(ref NamespaceBodyBuilder body) 786391"];
7513 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 786392"];
7514 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 786393"];
7515 [label="var eof = this.EatToken(SyntaxKind.EndOfFileToken); 786394"];
7516 [label="this.EatToken(SyntaxKind.EndOfFileToken) 786395"];
7517 [label="param EatToken(SyntaxKind kind) 786396"];
7518 [label="param EatToken(this) 786397"];
7519 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 786398"];
7520 [label="SyntaxFacts.IsAnyToken(kind) 786399"];
7521 [label="param IsAnyToken(SyntaxKind kind) 786400"];
7522 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 786401"];
7523 [label="return true; 786402"];
7524 [label="this.CurrentToken 786403"];
7525 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 786404"];
7526 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 786405"];
7527 [label="var ct = this.CurrentToken; 786406"];
7528 [label="ct.Kind 786407"];
7529 [label="get { return (SyntaxKind)this.RawKind; } 786408"];
7530 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 786409"];
7531 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 786410"];
7532 [label="MoveToNextToken() 786411"];
7533 [label="param MoveToNextToken(this) 786412"];
7534 [label="_currentToken.GetTrailingTrivia() 786413"];
7535 [label="param GetTrailingTrivia(this) 786414"];
7536 [label="return null; 786415"];
7537 [label="_prevTokenTrailingTrivia = _currentToken.GetTrailingTrivia(); 786416"];
7538 [label="_prevTokenTrailingTrivia 786417"];
7539 [label="_currentToken = null; 786418"];
7540 [label="_currentToken 786419"];
7541 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 786420"];
7542 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 786421"];
7543 [label="_tokenOffset 786422"];
7544 [label="MoveToNextToken(); 786423"];
7545 [label="return ct; 786424"];
7546 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 786425"];
7547 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 786426"];
7548 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 786427"];
7549 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 786428"];
7550 [label="param CSharpSyntaxNode(SyntaxKind kind) 786429"];
7551 [label="param CSharpSyntaxNode(this) 786430"];
7552 [label="kind 786431"];
7553 [label="param CSharpSyntaxNode(this) 786432"];
7554 [label="param CSharpSyntaxNode(this) 786433"];
7555 [label="GreenStats.NoteGreen(this); 786434"];
7556 [label="GreenStats.NoteGreen(this); 786435"];
7557 [label="param SetFactoryContext(SyntaxFactoryContext context) 786436"];
7558 [label="param SetFactoryContext(this) 786437"];
7559 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 786438"];
7560 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 786439"];
7561 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 786440"];
7562 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 786441"];
7563 [label="return result; 786442"];
7564 [label="body.Free(_pool); 786443"];
7565 [label="body.Free(_pool) 786444"];
7566 [label="param Free(SyntaxListPool pool) 786445"];
7567 [label="param Free(this) 786446"];
7568 [label="pool.Free(Members); 786447"];
7569 [label="pool.Free(Members); 786448"];
7570 [label="pool.Free(Attributes); 786449"];
7571 [label="pool.Free(Attributes); 786450"];
7572 [label="pool.Free(Usings); 786451"];
7573 [label="pool.Free(Usings); 786452"];
7574 [label="pool.Free(Externs); 786453"];
7575 [label="pool.Free(Externs); 786454"];
7576 [label="body.Free(_pool); 786455"];
7577 [label="return parseFunc(); 786456"];
7578 [label="var node = parser.ParseCompilationUnit(); 786457"];
7579 [label="return (CompilationUnitSyntax)node.CreateRed(); 786458"];
7580 [label="return (CompilationUnitSyntax)node.CreateRed(); 786459"];
7581 [label="return (CompilationUnitSyntax)node.CreateRed(); 786460"];
7582 [label="param CSharpSyntaxNode(GreenNode green) 786461"];
7583 [label="param CSharpSyntaxNode(SyntaxNode? parent) 786462"];
7584 [label="param CSharpSyntaxNode(int position) 786463"];
7585 [label="param CSharpSyntaxNode(this) 786464"];
7586 [label="green 786465"];
7587 [label="parent 786466"];
7588 [label="position 786467"];
7589 [label="param CSharpSyntaxNode(this) 786468"];
7590 [label="param CSharpSyntaxNode(this) 786469"];
7591 [label="_node = this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)); 786470"];
7592 [label="this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)) 786471"];
7593 [label="param CloneNodeAsRoot(T node) 786472"];
7594 [label="param CloneNodeAsRoot(this) 786473"];
7595 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 786474"];
7596 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 786475"];
7597 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 786476"];
7598 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 786477"];
7599 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 786478"];
7600 [label="param CSharpSyntaxNode(this) 786479"];
7601 [label="_node 786480"];
7602 [label="Dummy = new DummySyntaxTree() 786481"];
7603 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 786482"];
7604 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 786483"];
7605 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 786484"];
7606 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 786485"];
7607 [label="CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken) 786486"];
7608 [label="param ParseText(SourceText text) 786487"];
7609 [label="param ParseText(CSharpParseOptions? options = null) 786488"];
7610 [label="param ParseText(string path = '') 786489"];
7611 [label="param ParseText(CancellationToken cancellationToken = default) 786490"];
7612 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 786491"];
7613 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 786492"];
7614 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 786493"];
7615 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 786494"];
7616 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 786495"];
7617 [label="ParseText(text, options, path, diagnosticOptions: null, cancellationToken) 786496"];
7618 [label="param ParseText(SourceText text) 786497"];
7619 [label="param ParseText(CSharpParseOptions? options) 786498"];
7620 [label="param ParseText(string path) 786499"];
7621 [label="param ParseText(ImmutableDictionary<string, ReportDiagnostic>? diagnosticOptions) 786500"];
7622 [label="param ParseText(CancellationToken cancellationToken) 786501"];
7623 [label="text 786502"];
7624 [label="options 786503"];
7625 [label="path 786504"];
7626 [label="diagnosticOptions 786505"];
7627 [label="null 786506"];
7628 [label="isGeneratedCode: null 786507"];
7629 [label="cancellationToken 786508"];
7630 [label="ParseText(text, options, path, diagnosticOptions, isGeneratedCode: null, cancellationToken) 786509"];
7631 [label="param ParseText(SourceText text) 786510"];
7632 [label="param ParseText(CSharpParseOptions? options) 786511"];
7633 [label="param ParseText(string path) 786512"];
7634 [label="param ParseText(ImmutableDictionary<string, ReportDiagnostic>? diagnosticOptions) 786513"];
7635 [label="param ParseText(bool? isGeneratedCode) 786514"];
7636 [label="param ParseText(CancellationToken cancellationToken) 786515"];
7637 [label="if (text == null)\n            {\n                throw new ArgumentNullException(nameof(text));\n            } 786516"];
7638 [label="if (text == null)\n            {\n                throw new ArgumentNullException(nameof(text));\n            } 786517"];
7639 [label="options = options ?? CSharpParseOptions.Default; 786518"];
7640 [label="using var lexer = new InternalSyntax.Lexer(text, options); 786519"];
7641 [label="using var lexer = new InternalSyntax.Lexer(text, options); 786520"];
7642 [label="using var lexer = new InternalSyntax.Lexer(text, options); 786521"];
7643 [label="new InternalSyntax.Lexer(text, options) 786522"];
7644 [label="param Lexer(SourceText text) 786523"];
7645 [label="param Lexer(CSharpParseOptions options) 786524"];
7646 [label="param Lexer(bool allowPreprocessorDirectives = true) 786525"];
7647 [label="param Lexer(bool interpolationFollowedByColon = false) 786526"];
7648 [label="param Lexer(this) 786527"];
7649 [label="text 786528"];
7650 [label="param Lexer(this) 786529"];
7651 [label="param AbstractLexer(SourceText text) 786530"];
7652 [label="param AbstractLexer(this) 786531"];
7653 [label="TextWindow 786532"];
7654 [label="_errors 786533"];
7655 [label="this.TextWindow = new SlidingTextWindow(text); 786534"];
7656 [label="this.TextWindow = new SlidingTextWindow(text); 786535"];
7657 [label="new SlidingTextWindow(text) 786536"];
7658 [label="param SlidingTextWindow(SourceText text) 786537"];
7659 [label="param SlidingTextWindow(this) 786538"];
7660 [label="_text 786539"];
7661 [label="_basis 786540"];
7662 [label="_offset 786541"];
7663 [label="_textEnd 786542"];
7664 [label="_characterWindow 786543"];
7665 [label="_characterWindowCount 786544"];
7666 [label="_lexemeStart 786545"];
7667 [label="_strings 786546"];
7668 [label="_text 786547"];
7669 [label="_basis = 0; 786548"];
7670 [label="_basis 786549"];
7671 [label="_offset = 0; 786550"];
7672 [label="_offset 786551"];
7673 [label="_textEnd 786552"];
7674 [label="_strings = StringTable.GetInstance(); 786553"];
7675 [label="_strings 786554"];
7676 [label="_characterWindow = s_windowPool.Allocate(); 786555"];
7677 [label="_lexemeStart = 0; 786556"];
7678 [label="_lexemeStart 786557"];
7679 [label="this.TextWindow 786558"];
7680 [label="_options 786559"];
7681 [label="_mode 786560"];
7682 [label="_builder 786561"];
7683 [label="_identBuffer 786562"];
7684 [label="_identLen 786563"];
7685 [label="_cache 786564"];
7686 [label="_allowPreprocessorDirectives 786565"];
7687 [label="_interpolationFollowedByColon 786566"];
7688 [label="_xmlParser 786567"];
7689 [label="_badTokenCount 786568"];
7690 [label="10 786569"];
7691 [label="new SyntaxListBuilder(10) 786570"];
7692 [label="_leadingTriviaCache = new SyntaxListBuilder(10) 786571"];
7693 [label="10 786572"];
7694 [label="new SyntaxListBuilder(10) 786573"];
7695 [label="_trailingTriviaCache = new SyntaxListBuilder(10) 786574"];
7696 [label="_createWhitespaceTriviaFunction 786575"];
7697 [label="_createQuickTokenFunction 786576"];
7698 [label="Debug.Assert(options != null); 786577"];
7699 [label="Debug.Assert(options != null); 786578"];
7700 [label="_options 786579"];
7701 [label="_builder = new StringBuilder(); 786580"];
7702 [label="_builder 786581"];
7703 [label="_identBuffer = new char[32]; 786582"];
7704 [label="_identBuffer 786583"];
7705 [label="_cache = new LexerCache(); 786584"];
7706 [label="new LexerCache() 786585"];
7707 [label="param LexerCache(this) 786586"];
7708 [label="_triviaMap 786587"];
7709 [label="_tokenMap 786588"];
7710 [label="_keywordKindMap 786589"];
7711 [label="_triviaMap = TextKeyedCache<SyntaxTrivia>.GetInstance(); 786590"];
7712 [label="_triviaMap 786591"];
7713 [label="_tokenMap = TextKeyedCache<SyntaxToken>.GetInstance(); 786592"];
7714 [label="_tokenMap 786593"];
7715 [label="_cache 786594"];
7716 [label="_createQuickTokenFunction 786595"];
7717 [label="_allowPreprocessorDirectives 786596"];
7718 [label="_interpolationFollowedByColon 786597"];
7719 [label="using var parser = new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken); 786598"];
7720 [label="using var parser = new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken); 786599"];
7721 [label="using var parser = new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken); 786600"];
7722 [label="new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken) 786601"];
7723 [label="param LanguageParser(Lexer lexer) 786602"];
7724 [label="param LanguageParser(CSharp.CSharpSyntaxNode oldTree) 786603"];
7725 [label="param LanguageParser(IEnumerable<TextChangeRange> changes) 786604"];
7726 [label="param LanguageParser(LexerMode lexerMode = LexerMode.Syntax) 786605"];
7727 [label="param LanguageParser(CancellationToken cancellationToken = default(CancellationToken)) 786606"];
7728 [label="param LanguageParser(this) 786607"];
7729 [label="lexer 786608"];
7730 [label="lexerMode 786609"];
7731 [label="oldTree 786610"];
7732 [label="changes 786611"];
7733 [label="false 786612"];
7734 [label="true 786613"];
7735 [label="cancellationToken 786614"];
7736 [label="param LanguageParser(this) 786615"];
7737 [label="param SyntaxParser(Lexer lexer) 786616"];
7738 [label="param SyntaxParser(LexerMode mode) 786617"];
7739 [label="param SyntaxParser(CSharp.CSharpSyntaxNode oldTree) 786618"];
7740 [label="param SyntaxParser(IEnumerable<TextChangeRange> changes) 786619"];
7741 [label="param SyntaxParser(bool allowModeReset) 786620"];
7742 [label="param SyntaxParser(bool preLexIfNotIncremental = false) 786621"];
7743 [label="param SyntaxParser(CancellationToken cancellationToken = default(CancellationToken)) 786622"];
7744 [label="param SyntaxParser(this) 786623"];
7745 [label="lexer 786624"];
7746 [label="_isIncremental 786625"];
7747 [label="_allowModeReset 786626"];
7748 [label="_mode 786627"];
7749 [label="_currentToken 786628"];
7750 [label="_lexedTokens 786629"];
7751 [label="_prevTokenTrailingTrivia 786630"];
7752 [label="_firstToken 786631"];
7753 [label="_tokenOffset 786632"];
7754 [label="_tokenCount 786633"];
7755 [label="_resetCount 786634"];
7756 [label="_resetStart 786635"];
7757 [label="_blendedTokens 786636"];
7758 [label="this.lexer 786637"];
7759 [label="_mode 786638"];
7760 [label="_allowModeReset 786639"];
7761 [label="this.cancellationToken 786640"];
7762 [label="_currentNode = default(BlendedNode); 786641"];
7763 [label="_currentNode 786642"];
7764 [label="_isIncremental = oldTree != null; 786643"];
7765 [label="_isIncremental = oldTree != null; 786644"];
7766 [label="_isIncremental 786645"];
7767 [label="this.IsIncremental 786646"];
7768 [label="get\n            {\n                return _isIncremental;\n            } 786647"];
7769 [label="return _isIncremental; 786648"];
7770 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 786649"];
7771 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 786650"];
7772 [label="_firstBlender = default(Blender); 786651"];
7773 [label="_firstBlender 786652"];
7774 [label="_lexedTokens = new ArrayElement<SyntaxToken>[32]; 786653"];
7775 [label="_lexedTokens 786654"];
7776 [label="this.IsIncremental 786655"];
7777 [label="get\n            {\n                return _isIncremental;\n            } 786656"];
7778 [label="return _isIncremental; 786657"];
7779 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 786658"];
7780 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 786659"];
7781 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 786660"];
7782 [label="this.PreLex() 786661"];
7783 [label="param PreLex(this) 786662"];
7784 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 786663"];
7785 [label="this.lexer.TextWindow.Text 786664"];
7786 [label="=> _text 786665"];
7787 [label="_text 786666"];
7788 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 786667"];
7789 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 786668"];
7790 [label="_lexedTokens = new ArrayElement<SyntaxToken>[size]; 786669"];
7791 [label="_lexedTokens 786670"];
7792 [label="var lexer = this.lexer; 786671"];
7793 [label="var mode = _mode; 786672"];
7794 [label="for (int i = 0; i < size; i++)\n            {\n                var token = lexer.Lex(mode);\n                this.AddLexedToken(token);\n                if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                }\n            } 786673"];
7795 [label="var token = lexer.Lex(mode); 786674"];
7796 [label="TokensLexed++; 786675"];
7797 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 786676"];
7798 [label="TextWindow.Start(); 786677"];
7799 [label="TextWindow.Position 786678"];
7800 [label="get\n            {\n                return _basis + _offset;\n            } 786679"];
7801 [label="param LexSyntaxTrivia(bool afterFirstToken) 786680"];
7802 [label="param LexSyntaxTrivia(bool isTrailing) 786681"];
7803 [label="bool onlyWhitespaceOnLine = !isTrailing; 786682"];
7804 [label="this.Start(); 786683"];
7805 [label="TextWindow.PeekChar() 786684"];
7806 [label="param PeekChar(this) 786685"];
7807 [label="if (_lexemeStart > (_characterWindowCount / 4))\n                {\n                    Array.Copy(_characterWindow,\n                        _lexemeStart,\n                        _characterWindow,\n                        0,\n                        _characterWindowCount - _lexemeStart);\n                    _characterWindowCount -= _lexemeStart;\n                    _offset -= _lexemeStart;\n                    _basis += _lexemeStart;\n                    _lexemeStart = 0;\n                } 786686"];
7808 [label="if (_characterWindowCount >= _characterWindow.Length)\n                {\n                    // grow char array, since we need more contiguous space\n                    char[] oldWindow = _characterWindow;\n                    char[] newWindow = new char[_characterWindow.Length * 2];\n                    Array.Copy(oldWindow, 0, newWindow, 0, _characterWindowCount);\n                    s_windowPool.ForgetTrackedObject(oldWindow, newWindow);\n                    _characterWindow = newWindow;\n                } 786687"];
7809 [label="int amountToRead = Math.Min(_textEnd - (_basis + _characterWindowCount),\n                    _characterWindow.Length - _characterWindowCount); 786688"];
7810 [label="int amountToRead = Math.Min(_textEnd - (_basis + _characterWindowCount),\n                    _characterWindow.Length - _characterWindowCount); 786689"];
7811 [label="_text.CopyTo(_basis + _characterWindowCount,\n                    _characterWindow,\n                    _characterWindowCount,\n                    amountToRead); 786690"];
7812 [label="_text.CopyTo(_basis + _characterWindowCount,\n                    _characterWindow,\n                    _characterWindowCount,\n                    amountToRead); 786691"];
7813 [label="_characterWindowCount += amountToRead; 786692"];
7814 [label="_characterWindowCount 786693"];
7815 [label="return amountToRead > 0; 786694"];
7816 [label="return amountToRead > 0; 786695"];
7817 [label="return _characterWindow[_offset]; 786696"];
7818 [label="char ch = TextWindow.PeekChar(); 786697"];
7819 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786698"];
7820 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786699"];
7821 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786700"];
7822 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 786701"];
7823 [label="return; 786702"];
7824 [label="this.Start(); 786703"];
7825 [label="return _characterWindow[_offset]; 786704"];
7826 [label="param ScanIdentifierOrKeyword(ref TokenInfo info) 786705"];
7827 [label="param ScanIdentifierOrKeyword(this) 786706"];
7828 [label="info.ContextualKind 786707"];
7829 [label="if (this.ScanIdentifier(ref info))\n            {\n                // check to see if it is an actual keyword\n                if (!info.IsVerbatim && !info.HasIdentifierEscapeSequence)\n                {\n                    if (this.ModeIs(LexerMode.Directive))\n                    {\n                        SyntaxKind keywordKind = SyntaxFacts.GetPreprocessorKeywordKind(info.Text);\n                        if (SyntaxFacts.IsPreprocessorContextualKeyword(keywordKind))\n                        {\n                            // Let the parser decide which instances are actually keywords.\n                            info.Kind = SyntaxKind.IdentifierToken;\n                            info.ContextualKind = keywordKind;\n                        }\n                        else\n                        {\n                            info.Kind = keywordKind;\n                        }\n                    }\n                    else\n                    {\n                        if (!_cache.TryGetKeywordKind(info.Text, out info.Kind))\n                        {\n                            info.ContextualKind = info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                        else if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                    }\n\n                    if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    }\n                }\n                else\n                {\n                    info.ContextualKind = info.Kind = SyntaxKind.IdentifierToken;\n                }\n\n                return true;\n            }\n            else\n            {\n                info.Kind = SyntaxKind.None;\n                return false;\n            } 786708"];
7830 [label="this.ScanIdentifier(ref info) 786709"];
7831 [label="param ScanIdentifier(ref TokenInfo info) 786710"];
7832 [label="param ScanIdentifier(this) 786711"];
7833 [label="return\n                ScanIdentifier_FastPath(ref info) ||\n                (InXmlCrefOrNameAttributeValue ? ScanIdentifier_CrefSlowPath(ref info) : ScanIdentifier_SlowPath(ref info)); 786712"];
7834 [label="return\n                ScanIdentifier_FastPath(ref info) ||\n                (InXmlCrefOrNameAttributeValue ? ScanIdentifier_CrefSlowPath(ref info) : ScanIdentifier_SlowPath(ref info)); 786713"];
7835 [label="return\n                ScanIdentifier_FastPath(ref info) ||\n                (InXmlCrefOrNameAttributeValue ? ScanIdentifier_CrefSlowPath(ref info) : ScanIdentifier_SlowPath(ref info)); 786714"];
7836 [label="param Intern(char[] array) 786715"];
7837 [label="param Intern(int start) 786716"];
7838 [label="param Intern(int length) 786717"];
7839 [label="param Intern(this) 786718"];
7840 [label="return _strings.Add(array, start, length); 786719"];
7841 [label="return _strings.Add(array, start, length); 786720"];
7842 [label="return _strings.Add(array, start, length); 786721"];
7843 [label="return _strings.Add(array, start, length); 786722"];
7844 [label="if (!info.IsVerbatim && !info.HasIdentifierEscapeSequence)\n                {\n                    if (this.ModeIs(LexerMode.Directive))\n                    {\n                        SyntaxKind keywordKind = SyntaxFacts.GetPreprocessorKeywordKind(info.Text);\n                        if (SyntaxFacts.IsPreprocessorContextualKeyword(keywordKind))\n                        {\n                            // Let the parser decide which instances are actually keywords.\n                            info.Kind = SyntaxKind.IdentifierToken;\n                            info.ContextualKind = keywordKind;\n                        }\n                        else\n                        {\n                            info.Kind = keywordKind;\n                        }\n                    }\n                    else\n                    {\n                        if (!_cache.TryGetKeywordKind(info.Text, out info.Kind))\n                        {\n                            info.ContextualKind = info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                        else if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                    }\n\n                    if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    }\n                }\n                else\n                {\n                    info.ContextualKind = info.Kind = SyntaxKind.IdentifierToken;\n                } 786723"];
7845 [label="if (this.ModeIs(LexerMode.Directive))\n                    {\n                        SyntaxKind keywordKind = SyntaxFacts.GetPreprocessorKeywordKind(info.Text);\n                        if (SyntaxFacts.IsPreprocessorContextualKeyword(keywordKind))\n                        {\n                            // Let the parser decide which instances are actually keywords.\n                            info.Kind = SyntaxKind.IdentifierToken;\n                            info.ContextualKind = keywordKind;\n                        }\n                        else\n                        {\n                            info.Kind = keywordKind;\n                        }\n                    }\n                    else\n                    {\n                        if (!_cache.TryGetKeywordKind(info.Text, out info.Kind))\n                        {\n                            info.ContextualKind = info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                        else if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                    } 786724"];
7846 [label="this.ModeIs(LexerMode.Directive) 786725"];
7847 [label="param ModeIs(LexerMode mode) 786726"];
7848 [label="param ModeIs(this) 786727"];
7849 [label="return ModeOf(_mode) == mode; 786728"];
7850 [label="ModeOf(_mode) 786729"];
7851 [label="param ModeOf(LexerMode mode) 786730"];
7852 [label="return mode & LexerMode.MaskLexMode; 786731"];
7853 [label="return ModeOf(_mode) == mode; 786732"];
7854 [label="if (!_cache.TryGetKeywordKind(info.Text, out info.Kind))\n                        {\n                            info.ContextualKind = info.Kind = SyntaxKind.IdentifierToken;\n                        }\n                        else if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        } 786733"];
7855 [label="_cache.TryGetKeywordKind(info.Text, out info.Kind) 786734"];
7856 [label="param TryGetKeywordKind(string key) 786735"];
7857 [label="param TryGetKeywordKind(out SyntaxKind kind) 786736"];
7858 [label="param TryGetKeywordKind(this) 786737"];
7859 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 786738"];
7860 [label="kind = _keywordKindMap.GetOrMakeValue(key); 786739"];
7861 [label="kind = _keywordKindMap.GetOrMakeValue(key); 786740"];
7862 [label="kind = _keywordKindMap.GetOrMakeValue(key); 786741"];
7863 [label="param GetKeywordKind(string text) 786742"];
7864 [label="switch (text)\n            {\n                case 'bool':\n                    return SyntaxKind.BoolKeyword;\n                case 'byte':\n                    return SyntaxKind.ByteKeyword;\n                case 'sbyte':\n                    return SyntaxKind.SByteKeyword;\n                case 'short':\n                    return SyntaxKind.ShortKeyword;\n                case 'ushort':\n                    return SyntaxKind.UShortKeyword;\n                case 'int':\n                    return SyntaxKind.IntKeyword;\n                case 'uint':\n                    return SyntaxKind.UIntKeyword;\n                case 'long':\n                    return SyntaxKind.LongKeyword;\n                case 'ulong':\n                    return SyntaxKind.ULongKeyword;\n                case 'double':\n                    return SyntaxKind.DoubleKeyword;\n                case 'float':\n                    return SyntaxKind.FloatKeyword;\n                case 'decimal':\n                    return SyntaxKind.DecimalKeyword;\n                case 'string':\n                    return SyntaxKind.StringKeyword;\n                case 'char':\n                    return SyntaxKind.CharKeyword;\n                case 'void':\n                    return SyntaxKind.VoidKeyword;\n                case 'object':\n                    return SyntaxKind.ObjectKeyword;\n                case 'typeof':\n                    return SyntaxKind.TypeOfKeyword;\n                case 'sizeof':\n                    return SyntaxKind.SizeOfKeyword;\n                case 'null':\n                    return SyntaxKind.NullKeyword;\n                case 'true':\n                    return SyntaxKind.TrueKeyword;\n                case 'false':\n                    return SyntaxKind.FalseKeyword;\n                case 'if':\n                    return SyntaxKind.IfKeyword;\n                case 'else':\n                    return SyntaxKind.ElseKeyword;\n                case 'while':\n                    return SyntaxKind.WhileKeyword;\n                case 'for':\n                    return SyntaxKind.ForKeyword;\n                case 'foreach':\n                    return SyntaxKind.ForEachKeyword;\n                case 'do':\n                    return SyntaxKind.DoKeyword;\n                case 'switch':\n                    return SyntaxKind.SwitchKeyword;\n                case 'case':\n                    return SyntaxKind.CaseKeyword;\n                case 'default':\n                    return SyntaxKind.DefaultKeyword;\n                case 'lock':\n                    return SyntaxKind.LockKeyword;\n                case 'try':\n                    return SyntaxKind.TryKeyword;\n                case 'throw':\n                    return SyntaxKind.ThrowKeyword;\n                case 'catch':\n                    return SyntaxKind.CatchKeyword;\n                case 'finally':\n                    return SyntaxKind.FinallyKeyword;\n                case 'goto':\n                    return SyntaxKind.GotoKeyword;\n                case 'break':\n                    return SyntaxKind.BreakKeyword;\n                case 'continue':\n                    return SyntaxKind.ContinueKeyword;\n                case 'return':\n                    return SyntaxKind.ReturnKeyword;\n                case 'public':\n                    return SyntaxKind.PublicKeyword;\n                case 'private':\n                    return SyntaxKind.PrivateKeyword;\n                case 'internal':\n                    return SyntaxKind.InternalKeyword;\n                case 'protected':\n                    return SyntaxKind.ProtectedKeyword;\n                case 'static':\n                    return SyntaxKind.StaticKeyword;\n                case 'readonly':\n                    return SyntaxKind.ReadOnlyKeyword;\n                case 'sealed':\n                    return SyntaxKind.SealedKeyword;\n                case 'const':\n                    return SyntaxKind.ConstKeyword;\n                case 'fixed':\n                    return SyntaxKind.FixedKeyword;\n                case 'stackalloc':\n                    return SyntaxKind.StackAllocKeyword;\n                case 'volatile':\n                    return SyntaxKind.VolatileKeyword;\n                case 'new':\n                    return SyntaxKind.NewKeyword;\n                case 'override':\n                    return SyntaxKind.OverrideKeyword;\n                case 'abstract':\n                    return SyntaxKind.AbstractKeyword;\n                case 'virtual':\n                    return SyntaxKind.VirtualKeyword;\n                case 'event':\n                    return SyntaxKind.EventKeyword;\n                case 'extern':\n                    return SyntaxKind.ExternKeyword;\n                case 'ref':\n                    return SyntaxKind.RefKeyword;\n                case 'out':\n                    return SyntaxKind.OutKeyword;\n                case 'in':\n                    return SyntaxKind.InKeyword;\n                case 'is':\n                    return SyntaxKind.IsKeyword;\n                case 'as':\n                    return SyntaxKind.AsKeyword;\n                case 'params':\n                    return SyntaxKind.ParamsKeyword;\n                case '__arglist':\n                    return SyntaxKind.ArgListKeyword;\n                case '__makeref':\n                    return SyntaxKind.MakeRefKeyword;\n                case '__reftype':\n                    return SyntaxKind.RefTypeKeyword;\n                case '__refvalue':\n                    return SyntaxKind.RefValueKeyword;\n                case 'this':\n                    return SyntaxKind.ThisKeyword;\n                case 'base':\n                    return SyntaxKind.BaseKeyword;\n                case 'namespace':\n                    return SyntaxKind.NamespaceKeyword;\n                case 'using':\n                    return SyntaxKind.UsingKeyword;\n                case 'class':\n                    return SyntaxKind.ClassKeyword;\n                case 'struct':\n                    return SyntaxKind.StructKeyword;\n                case 'interface':\n                    return SyntaxKind.InterfaceKeyword;\n                case 'enum':\n                    return SyntaxKind.EnumKeyword;\n                case 'delegate':\n                    return SyntaxKind.DelegateKeyword;\n                case 'checked':\n                    return SyntaxKind.CheckedKeyword;\n                case 'unchecked':\n                    return SyntaxKind.UncheckedKeyword;\n                case 'unsafe':\n                    return SyntaxKind.UnsafeKeyword;\n                case 'operator':\n                    return SyntaxKind.OperatorKeyword;\n                case 'implicit':\n                    return SyntaxKind.ImplicitKeyword;\n                case 'explicit':\n                    return SyntaxKind.ExplicitKeyword;\n                default:\n                    return SyntaxKind.None;\n            } 786743"];
7865 [label="return SyntaxKind.NamespaceKeyword; 786744"];
7866 [label="return kind != SyntaxKind.None; 786745"];
7867 [label="if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        } 786746"];
7868 [label="SyntaxFacts.IsContextualKeyword(info.Kind) 786747"];
7869 [label="param IsContextualKeyword(SyntaxKind kind) 786748"];
7870 [label="switch (kind)\n            {\n                case SyntaxKind.YieldKeyword:\n                case SyntaxKind.PartialKeyword:\n                case SyntaxKind.FromKeyword:\n                case SyntaxKind.GroupKeyword:\n                case SyntaxKind.JoinKeyword:\n                case SyntaxKind.IntoKeyword:\n                case SyntaxKind.LetKeyword:\n                case SyntaxKind.ByKeyword:\n                case SyntaxKind.WhereKeyword:\n                case SyntaxKind.SelectKeyword:\n                case SyntaxKind.GetKeyword:\n                case SyntaxKind.SetKeyword:\n                case SyntaxKind.AddKeyword:\n                case SyntaxKind.RemoveKeyword:\n                case SyntaxKind.OrderByKeyword:\n                case SyntaxKind.AliasKeyword:\n                case SyntaxKind.OnKeyword:\n                case SyntaxKind.EqualsKeyword:\n                case SyntaxKind.AscendingKeyword:\n                case SyntaxKind.DescendingKeyword:\n                case SyntaxKind.AssemblyKeyword:\n                case SyntaxKind.ModuleKeyword:\n                case SyntaxKind.TypeKeyword:\n                case SyntaxKind.GlobalKeyword:\n                case SyntaxKind.FieldKeyword:\n                case SyntaxKind.MethodKeyword:\n                case SyntaxKind.ParamKeyword:\n                case SyntaxKind.PropertyKeyword:\n                case SyntaxKind.TypeVarKeyword:\n                case SyntaxKind.NameOfKeyword:\n                case SyntaxKind.AsyncKeyword:\n                case SyntaxKind.AwaitKeyword:\n                case SyntaxKind.WhenKeyword:\n                case SyntaxKind.UnderscoreToken:\n                case SyntaxKind.VarKeyword:\n                case SyntaxKind.OrKeyword:\n                case SyntaxKind.AndKeyword:\n                case SyntaxKind.NotKeyword:\n                case SyntaxKind.DataKeyword:\n                case SyntaxKind.WithKeyword:\n                case SyntaxKind.InitKeyword:\n                case SyntaxKind.RecordKeyword:\n                case SyntaxKind.ManagedKeyword:\n                case SyntaxKind.UnmanagedKeyword:\n                    return true;\n                default:\n                    return false;\n            } 786749"];
7871 [label="return false; 786750"];
7872 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 786751"];
7873 [label="return true; 786752"];
7874 [label="this.ScanSyntaxToken(ref tokenInfo); 786753"];
7875 [label="var errors = this.GetErrors(GetFullWidth(leading)); 786754"];
7876 [label="GetFullWidth(leading) 786755"];
7877 [label="param GetFullWidth(SyntaxListBuilder builder) 786756"];
7878 [label="int width = 0; 786757"];
7879 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 786758"];
7880 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 786759"];
7881 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 786760"];
7882 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 786761"];
7883 [label="return width; 786762"];
7884 [label="var errors = this.GetErrors(GetFullWidth(leading)); 786763"];
7885 [label="this.GetErrors(GetFullWidth(leading)) 786764"];
7886 [label="param GetErrors(int leadingTriviaWidth) 786765"];
7887 [label="param GetErrors(this) 786766"];
7888 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 786767"];
7889 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 786768"];
7890 [label="return null; 786769"];
7891 [label="var errors = this.GetErrors(GetFullWidth(leading)); 786770"];
7892 [label="param LexSyntaxTrivia(bool afterFirstToken) 786771"];
7893 [label="char ch = TextWindow.PeekChar(); 786772"];
7894 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786773"];
7895 [label="this.AddTrivia(this.ScanWhitespace(), ref triviaList); 786774"];
7896 [label="this.AddTrivia(this.ScanWhitespace(), ref triviaList); 786775"];
7897 [label="param AdvanceChar(this) 786776"];
7898 [label="_offset 786777"];
7899 [label="get\n            {\n                return _offset - _lexemeStart;\n            } 786778"];
7900 [label="return _offset - _lexemeStart; 786779"];
7901 [label="this.AddTrivia(this.ScanWhitespace(), ref triviaList); 786780"];
7902 [label="this.AddTrivia(this.ScanWhitespace(), ref triviaList) 786781"];
7903 [label="param AddTrivia(CSharpSyntaxNode trivia) 786782"];
7904 [label="param AddTrivia(ref SyntaxListBuilder list) 786783"];
7905 [label="param AddTrivia(this) 786784"];
7906 [label="this.HasErrors 786785"];
7907 [label="get { return _errors != null; } 786786"];
7908 [label="return _errors != null; 786787"];
7909 [label="return _errors != null; 786788"];
7910 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 786789"];
7911 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 786790"];
7912 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 786791"];
7913 [label="list.Add(trivia); 786792"];
7914 [label="list.Add(trivia); 786793"];
7915 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786794"];
7916 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 786795"];
7917 [label="return; 786796"];
7918 [label="param Create(ref TokenInfo info) 786797"];
7919 [label="param Create(SyntaxDiagnosticInfo[] errors) 786798"];
7920 [label="param Create(this) 786799"];
7921 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 786800"];
7922 [label="SyntaxToken token; 786801"];
7923 [label="if (info.RequiresTextForXmlEntity)\n            {\n                token = SyntaxFactory.Token(leadingNode, info.Kind, info.Text, info.StringValue, trailingNode);\n            }\n            else\n            {\n                switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                }\n            } 786802"];
7924 [label="switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                } 786803"];
7925 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 786804"];
7926 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 786805"];
7927 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 786806"];
7928 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 786807"];
7929 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 786808"];
7930 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 786809"];
7931 [label="SyntaxFactory.Token(leadingNode, info.Kind, trailingNode) 786810"];
7932 [label="param Token(GreenNode leading) 786811"];
7933 [label="param Token(SyntaxKind kind) 786812"];
7934 [label="param Token(GreenNode trailing) 786813"];
7935 [label="return SyntaxToken.Create(kind, leading, trailing); 786814"];
7936 [label="return SyntaxToken.Create(kind, leading, trailing); 786815"];
7937 [label="return SyntaxToken.Create(kind, leading, trailing); 786816"];
7938 [label="SyntaxToken.Create(kind, leading, trailing) 786817"];
7939 [label="param Create(SyntaxKind kind) 786818"];
7940 [label="param Create(GreenNode leading) 786819"];
7941 [label="param Create(GreenNode trailing) 786820"];
7942 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 786821"];
7943 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 786822"];
7944 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 786823"];
7945 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 786824"];
7946 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 786825"];
7947 [label="if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 786826"];
7948 [label="return s_tokensWithSingleTrailingSpace[(int)kind].Value; 786827"];
7949 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 786828"];
7950 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 786829"];
7951 [label="return token; 786830"];
7952 [label="this.AddLexedToken(token); 786831"];
7953 [label="this.AddLexedToken(token) 786832"];
7954 [label="param AddLexedToken(SyntaxToken token) 786833"];
7955 [label="param AddLexedToken(this) 786834"];
7956 [label="Debug.Assert(token != null); 786835"];
7957 [label="Debug.Assert(token != null); 786836"];
7958 [label="if (_tokenCount >= _lexedTokens.Length)\n            {\n                this.AddLexedTokenSlot();\n            } 786837"];
7959 [label="_lexedTokens[_tokenCount].Value = token; 786838"];
7960 [label="_lexedTokens[_tokenCount].Value 786839"];
7961 [label="_tokenCount 786840"];
7962 [label="this.AddLexedToken(token); 786841"];
7963 [label="token.Kind 786842"];
7964 [label="get { return (SyntaxKind)this.RawKind; } 786843"];
7965 [label="return (SyntaxKind)this.RawKind; 786844"];
7966 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 786845"];
7967 [label="TextWindow.Start(); 786846"];
7968 [label="get\n            {\n                return _lexemeStart;\n            } 786847"];
7969 [label="return _lexemeStart; 786848"];
7970 [label="param LookupToken(char[] textBuffer) 786849"];
7971 [label="param LookupToken(int keyStart) 786850"];
7972 [label="param LookupToken(int keyLength) 786851"];
7973 [label="param LookupToken(int hashCode) 786852"];
7974 [label="param LookupToken(Func<SyntaxToken> createTokenFunction) 786853"];
7975 [label="param LookupToken(this) 786854"];
7976 [label="var value = _tokenMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 786855"];
7977 [label="var value = _tokenMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 786856"];
7978 [label="var value = _tokenMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 786857"];
7979 [label="var value = _tokenMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 786858"];
7980 [label="var value = _tokenMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 786859"];
7981 [label="if (value == null)\n            {\n#if COLLECT_STATS\n                    Miss();\n#endif\n                value = createTokenFunction();\n                _tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value);\n            }\n            else\n            {\n#if COLLECT_STATS\n                    Hit();\n#endif\n            } 786860"];
7982 [label="if (value == null)\n            {\n#if COLLECT_STATS\n                    Miss();\n#endif\n                value = createTokenFunction();\n                _tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value);\n            }\n            else\n            {\n#if COLLECT_STATS\n                    Hit();\n#endif\n            } 786861"];
7983 [label="value = createTokenFunction(); 786862"];
7984 [label="value = createTokenFunction(); 786863"];
7985 [label="param CreateQuickToken(this) 786864"];
7986 [label="TextWindow.Width 786865"];
7987 [label="get\n            {\n                return _offset - _lexemeStart;\n            } 786866"];
7988 [label="var quickWidth = TextWindow.Width; 786867"];
7989 [label="TextWindow.LexemeStartPosition 786868"];
7990 [label="get\n            {\n                return _basis + _lexemeStart;\n            } 786869"];
7991 [label="TextWindow.Reset(TextWindow.LexemeStartPosition); 786870"];
7992 [label="TextWindow.Reset(TextWindow.LexemeStartPosition) 786871"];
7993 [label="param Reset(int position) 786872"];
7994 [label="param Reset(this) 786873"];
7995 [label="TextWindow.Reset(TextWindow.LexemeStartPosition); 786874"];
7996 [label="this.LexSyntaxToken() 786875"];
7997 [label="param LexSyntaxToken(this) 786876"];
7998 [label="_leadingTriviaCache.Clear(); 786877"];
7999 [label="TextWindow.Position 786878"];
8000 [label="get\n            {\n                return _basis + _offset;\n            } 786879"];
8001 [label="param LexSyntaxTrivia(bool afterFirstToken) 786880"];
8002 [label="param LexSyntaxTrivia(bool isTrailing) 786881"];
8003 [label="bool onlyWhitespaceOnLine = !isTrailing; 786882"];
8004 [label="TextWindow.Start(); 786883"];
8005 [label="this.Start(); 786884"];
8006 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786885"];
8007 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 786886"];
8008 [label="return; 786887"];
8009 [label="this.Start(); 786888"];
8010 [label="param TryGetKeywordKind(out SyntaxKind kind) 786889"];
8011 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 786890"];
8012 [label="return SyntaxKind.None; 786891"];
8013 [label="param GetContextualKeywordKind(string text) 786892"];
8014 [label="switch (text)\n            {\n                case 'yield':\n                    return SyntaxKind.YieldKeyword;\n                case 'partial':\n                    return SyntaxKind.PartialKeyword;\n                case 'from':\n                    return SyntaxKind.FromKeyword;\n                case 'group':\n                    return SyntaxKind.GroupKeyword;\n                case 'join':\n                    return SyntaxKind.JoinKeyword;\n                case 'into':\n                    return SyntaxKind.IntoKeyword;\n                case 'let':\n                    return SyntaxKind.LetKeyword;\n                case 'by':\n                    return SyntaxKind.ByKeyword;\n                case 'where':\n                    return SyntaxKind.WhereKeyword;\n                case 'select':\n                    return SyntaxKind.SelectKeyword;\n                case 'get':\n                    return SyntaxKind.GetKeyword;\n                case 'set':\n                    return SyntaxKind.SetKeyword;\n                case 'add':\n                    return SyntaxKind.AddKeyword;\n                case 'remove':\n                    return SyntaxKind.RemoveKeyword;\n                case 'orderby':\n                    return SyntaxKind.OrderByKeyword;\n                case 'alias':\n                    return SyntaxKind.AliasKeyword;\n                case 'on':\n                    return SyntaxKind.OnKeyword;\n                case 'equals':\n                    return SyntaxKind.EqualsKeyword;\n                case 'ascending':\n                    return SyntaxKind.AscendingKeyword;\n                case 'descending':\n                    return SyntaxKind.DescendingKeyword;\n                case 'assembly':\n                    return SyntaxKind.AssemblyKeyword;\n                case 'module':\n                    return SyntaxKind.ModuleKeyword;\n                case 'type':\n                    return SyntaxKind.TypeKeyword;\n                case 'field':\n                    return SyntaxKind.FieldKeyword;\n                case 'method':\n                    return SyntaxKind.MethodKeyword;\n                case 'param':\n                    return SyntaxKind.ParamKeyword;\n                case 'property':\n                    return SyntaxKind.PropertyKeyword;\n                case 'typevar':\n                    return SyntaxKind.TypeVarKeyword;\n                case 'global':\n                    return SyntaxKind.GlobalKeyword;\n                case 'async':\n                    return SyntaxKind.AsyncKeyword;\n                case 'await':\n                    return SyntaxKind.AwaitKeyword;\n                case 'when':\n                    return SyntaxKind.WhenKeyword;\n                case 'nameof':\n                    return SyntaxKind.NameOfKeyword;\n                case '_':\n                    return SyntaxKind.UnderscoreToken;\n                case 'var':\n                    return SyntaxKind.VarKeyword;\n                case 'and':\n                    return SyntaxKind.AndKeyword;\n                case 'or':\n                    return SyntaxKind.OrKeyword;\n                case 'not':\n                    return SyntaxKind.NotKeyword;\n                case 'data':\n                    return SyntaxKind.DataKeyword;\n                case 'with':\n                    return SyntaxKind.WithKeyword;\n                case 'init':\n                    return SyntaxKind.InitKeyword;\n                case 'record':\n                    return SyntaxKind.RecordKeyword;\n                case 'managed':\n                    return SyntaxKind.ManagedKeyword;\n                case 'unmanaged':\n                    return SyntaxKind.UnmanagedKeyword;\n                default:\n                    return SyntaxKind.None;\n            } 786893"];
8015 [label="return SyntaxKind.None; 786894"];
8016 [label="kind = _keywordKindMap.GetOrMakeValue(key); 786895"];
8017 [label="return kind != SyntaxKind.None; 786896"];
8018 [label="info.Kind 786897"];
8019 [label="info.ContextualKind 786898"];
8020 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 786899"];
8021 [label="this.ScanSyntaxToken(ref tokenInfo); 786900"];
8022 [label="var errors = this.GetErrors(GetFullWidth(leading)); 786901"];
8023 [label="GetFullWidth(leading) 786902"];
8024 [label="param GetFullWidth(SyntaxListBuilder builder) 786903"];
8025 [label="int width = 0; 786904"];
8026 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 786905"];
8027 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 786906"];
8028 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 786907"];
8029 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 786908"];
8030 [label="return width; 786909"];
8031 [label="var errors = this.GetErrors(GetFullWidth(leading)); 786910"];
8032 [label="this.GetErrors(GetFullWidth(leading)) 786911"];
8033 [label="param GetErrors(int leadingTriviaWidth) 786912"];
8034 [label="param GetErrors(this) 786913"];
8035 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 786914"];
8036 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 786915"];
8037 [label="return null; 786916"];
8038 [label="var errors = this.GetErrors(GetFullWidth(leading)); 786917"];
8039 [label="param LexSyntaxTrivia(bool afterFirstToken) 786918"];
8040 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 786919"];
8041 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 786920"];
8042 [label="this.ScanEndOfLine() 786921"];
8043 [label="param ScanEndOfLine(this) 786922"];
8044 [label="char ch; 786923"];
8045 [label="TextWindow.PeekChar() 786924"];
8046 [label="param PeekChar(this) 786925"];
8047 [label="switch (ch = TextWindow.PeekChar())\n            {\n                case '\\r':\n                    TextWindow.AdvanceChar();\n                    if (TextWindow.PeekChar() == '\\n')\n                    {\n                        TextWindow.AdvanceChar();\n                        return SyntaxFactory.CarriageReturnLineFeed;\n                    }\n\n                    return SyntaxFactory.CarriageReturn;\n                case '\\n':\n                    TextWindow.AdvanceChar();\n                    return SyntaxFactory.LineFeed;\n                default:\n                    if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        TextWindow.AdvanceChar();\n                        return SyntaxFactory.EndOfLine(ch.ToString());\n                    }\n\n                    return null;\n            } 786926"];
8048 [label="TextWindow.AdvanceChar() 786927"];
8049 [label="TextWindow.AdvanceChar(); 786928"];
8050 [label="TextWindow.PeekChar() 786929"];
8051 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 786930"];
8052 [label="return _characterWindow[_offset]; 786931"];
8053 [label="if (TextWindow.PeekChar() == '\\n')\n                    {\n                        TextWindow.AdvanceChar();\n                        return SyntaxFactory.CarriageReturnLineFeed;\n                    } 786932"];
8054 [label="if (TextWindow.PeekChar() == '\\n')\n                    {\n                        TextWindow.AdvanceChar();\n                        return SyntaxFactory.CarriageReturnLineFeed;\n                    } 786933"];
8055 [label="TextWindow.AdvanceChar() 786934"];
8056 [label="TextWindow.AdvanceChar(); 786935"];
8057 [label="return SyntaxFactory.CarriageReturnLineFeed; 786936"];
8058 [label="this.AddTrivia(this.ScanEndOfLine(), ref triviaList); 786937"];
8059 [label="this.AddTrivia(this.ScanEndOfLine(), ref triviaList); 786938"];
8060 [label="this.AddTrivia(this.ScanEndOfLine(), ref triviaList) 786939"];
8061 [label="param AddTrivia(CSharpSyntaxNode trivia) 786940"];
8062 [label="param AddTrivia(ref SyntaxListBuilder list) 786941"];
8063 [label="param AddTrivia(this) 786942"];
8064 [label="this.HasErrors 786943"];
8065 [label="get { return _errors != null; } 786944"];
8066 [label="return _errors != null; 786945"];
8067 [label="return _errors != null; 786946"];
8068 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 786947"];
8069 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 786948"];
8070 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 786949"];
8071 [label="list.Add(trivia); 786950"];
8072 [label="this.AddTrivia(this.ScanEndOfLine(), ref triviaList); 786951"];
8073 [label="if (isTrailing)\n                        {\n                            return;\n                        } 786952"];
8074 [label="return; 786953"];
8075 [label="param Create(ref TokenInfo info) 786954"];
8076 [label="param Create(SyntaxDiagnosticInfo[] errors) 786955"];
8077 [label="param Create(this) 786956"];
8078 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 786957"];
8079 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 786958"];
8080 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 786959"];
8081 [label="SyntaxToken token; 786960"];
8082 [label="if (info.RequiresTextForXmlEntity)\n            {\n                token = SyntaxFactory.Token(leadingNode, info.Kind, info.Text, info.StringValue, trailingNode);\n            }\n            else\n            {\n                switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                }\n            } 786961"];
8083 [label="switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                } 786962"];
8084 [label="token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode); 786963"];
8085 [label="token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode); 786964"];
8086 [label="SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode) 786965"];
8087 [label="param Identifier(SyntaxKind contextualKind) 786966"];
8088 [label="param Identifier(GreenNode leading) 786967"];
8089 [label="param Identifier(string text) 786968"];
8090 [label="param Identifier(string valueText) 786969"];
8091 [label="param Identifier(GreenNode trailing) 786970"];
8092 [label="return SyntaxToken.Identifier(contextualKind, leading, text, valueText, trailing); 786971"];
8093 [label="return SyntaxToken.Identifier(contextualKind, leading, text, valueText, trailing); 786972"];
8094 [label="return SyntaxToken.Identifier(contextualKind, leading, text, valueText, trailing); 786973"];
8095 [label="return SyntaxToken.Identifier(contextualKind, leading, text, valueText, trailing); 786974"];
8096 [label="return SyntaxToken.Identifier(contextualKind, leading, text, valueText, trailing); 786975"];
8097 [label="SyntaxToken.Identifier(contextualKind, leading, text, valueText, trailing) 786976"];
8098 [label="param Identifier(SyntaxKind contextualKind) 786977"];
8099 [label="param Identifier(GreenNode leading) 786978"];
8100 [label="param Identifier(string text) 786979"];
8101 [label="param Identifier(string valueText) 786980"];
8102 [label="param Identifier(GreenNode trailing) 786981"];
8103 [label="if (contextualKind == SyntaxKind.IdentifierToken && valueText == text)\n            {\n                return Identifier(leading, text, trailing);\n            } 786982"];
8104 [label="if (contextualKind == SyntaxKind.IdentifierToken && valueText == text)\n            {\n                return Identifier(leading, text, trailing);\n            } 786983"];
8105 [label="if (contextualKind == SyntaxKind.IdentifierToken && valueText == text)\n            {\n                return Identifier(leading, text, trailing);\n            } 786984"];
8106 [label="return Identifier(leading, text, trailing); 786985"];
8107 [label="return Identifier(leading, text, trailing); 786986"];
8108 [label="return Identifier(leading, text, trailing); 786987"];
8109 [label="Identifier(leading, text, trailing) 786988"];
8110 [label="param Identifier(GreenNode leading) 786989"];
8111 [label="param Identifier(string text) 786990"];
8112 [label="param Identifier(GreenNode trailing) 786991"];
8113 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return Identifier(text);\n                }\n                else\n                {\n                    return new SyntaxIdentifierWithTrailingTrivia(text, trailing);\n                }\n            } 786992"];
8114 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return Identifier(text);\n                }\n                else\n                {\n                    return new SyntaxIdentifierWithTrailingTrivia(text, trailing);\n                }\n            } 786993"];
8115 [label="if (trailing == null)\n                {\n                    return Identifier(text);\n                }\n                else\n                {\n                    return new SyntaxIdentifierWithTrailingTrivia(text, trailing);\n                } 786994"];
8116 [label="if (trailing == null)\n                {\n                    return Identifier(text);\n                }\n                else\n                {\n                    return new SyntaxIdentifierWithTrailingTrivia(text, trailing);\n                } 786995"];
8117 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxIdentifierWithTrailingTrivia), r => new SyntaxIdentifierWithTrailingTrivia(r)); 786996"];
8118 [label="return new SyntaxIdentifierWithTrailingTrivia(text, trailing); 786997"];
8119 [label="return new SyntaxIdentifierWithTrailingTrivia(text, trailing); 786998"];
8120 [label="return new SyntaxIdentifierWithTrailingTrivia(text, trailing); 786999"];
8121 [label="new SyntaxIdentifierWithTrailingTrivia(text, trailing) 787000"];
8122 [label="param SyntaxIdentifierWithTrailingTrivia(string text) 787001"];
8123 [label="param SyntaxIdentifierWithTrailingTrivia(GreenNode trailing) 787002"];
8124 [label="param SyntaxIdentifierWithTrailingTrivia(this) 787003"];
8125 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxIdentifier), r => new SyntaxIdentifier(r)); 787004"];
8126 [label="text 787005"];
8127 [label="param SyntaxIdentifierWithTrailingTrivia(this) 787006"];
8128 [label="param SyntaxIdentifier(string text) 787007"];
8129 [label="param SyntaxIdentifier(this) 787008"];
8130 [label="SyntaxKind.IdentifierToken 787009"];
8131 [label="text 787010"];
8132 [label="param SyntaxIdentifier(this) 787011"];
8133 [label="param SyntaxToken(SyntaxKind kind) 787012"];
8134 [label="param SyntaxToken(int fullWidth) 787013"];
8135 [label="param SyntaxToken(this) 787014"];
8136 [label="kind 787015"];
8137 [label="fullWidth 787016"];
8138 [label="param SyntaxToken(this) 787017"];
8139 [label="param CSharpSyntaxNode(SyntaxKind kind) 787018"];
8140 [label="param CSharpSyntaxNode(int fullWidth) 787019"];
8141 [label="param CSharpSyntaxNode(this) 787020"];
8142 [label="kind 787021"];
8143 [label="fullWidth 787022"];
8144 [label="param CSharpSyntaxNode(this) 787023"];
8145 [label="param CSharpSyntaxNode(this) 787024"];
8146 [label="GreenStats.NoteGreen(this); 787025"];
8147 [label="GreenStats.NoteGreen(this); 787026"];
8148 [label="this.flags |= NodeFlags.IsNotMissing; 787027"];
8149 [label="this.flags 787028"];
8150 [label="TextField 787029"];
8151 [label="this.TextField 787030"];
8152 [label="_trailing 787031"];
8153 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    _trailing = trailing;\n                } 787032"];
8154 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    _trailing = trailing;\n                } 787033"];
8155 [label="this.AdjustFlagsAndWidth(trailing); 787034"];
8156 [label="this.AdjustFlagsAndWidth(trailing); 787035"];
8157 [label="_trailing 787036"];
8158 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787037"];
8159 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787038"];
8160 [label="return token; 787039"];
8161 [label="var token = this.LexSyntaxToken(); 787040"];
8162 [label="Debug.Assert(quickWidth == token.FullWidth); 787041"];
8163 [label="return token; 787042"];
8164 [label="value = createTokenFunction(); 787043"];
8165 [label="_tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787044"];
8166 [label="_tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787045"];
8167 [label="_tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787046"];
8168 [label="_tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787047"];
8169 [label="_tokenMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787048"];
8170 [label="return value; 787049"];
8171 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 787050"];
8172 [label="this.AddLexedToken(token); 787051"];
8173 [label="param AddLexedToken(SyntaxToken token) 787052"];
8174 [label="Debug.Assert(token != null); 787053"];
8175 [label="if (_tokenCount >= _lexedTokens.Length)\n            {\n                this.AddLexedTokenSlot();\n            } 787054"];
8176 [label="_lexedTokens[_tokenCount].Value = token; 787055"];
8177 [label="_lexedTokens[_tokenCount].Value 787056"];
8178 [label="get { return (SyntaxKind)this.RawKind; } 787057"];
8179 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787058"];
8180 [label="TextWindow.Start(); 787059"];
8181 [label="TextWindow.Width 787060"];
8182 [label="var quickWidth = TextWindow.Width; 787061"];
8183 [label="TextWindow.Position 787062"];
8184 [label="param LexSyntaxTrivia(bool afterFirstToken) 787063"];
8185 [label="param LexSyntaxTrivia(bool isTrailing) 787064"];
8186 [label="bool onlyWhitespaceOnLine = !isTrailing; 787065"];
8187 [label="this.Start(); 787066"];
8188 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787067"];
8189 [label="return; 787068"];
8190 [label="this.Start(); 787069"];
8191 [label="var errors = this.GetErrors(GetFullWidth(leading)); 787070"];
8192 [label="GetFullWidth(leading) 787071"];
8193 [label="param GetFullWidth(SyntaxListBuilder builder) 787072"];
8194 [label="int width = 0; 787073"];
8195 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 787074"];
8196 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 787075"];
8197 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 787076"];
8198 [label="return width; 787077"];
8199 [label="var errors = this.GetErrors(GetFullWidth(leading)); 787078"];
8200 [label="this.GetErrors(GetFullWidth(leading)) 787079"];
8201 [label="param GetErrors(int leadingTriviaWidth) 787080"];
8202 [label="param GetErrors(this) 787081"];
8203 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787082"];
8204 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787083"];
8205 [label="return null; 787084"];
8206 [label="var errors = this.GetErrors(GetFullWidth(leading)); 787085"];
8207 [label="param LexSyntaxTrivia(bool afterFirstToken) 787086"];
8208 [label="param LexSyntaxTrivia(bool isTrailing) 787087"];
8209 [label="bool onlyWhitespaceOnLine = !isTrailing; 787088"];
8210 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787089"];
8211 [label="char ch; 787090"];
8212 [label="TextWindow.AdvanceChar(); 787091"];
8213 [label="TextWindow.AdvanceChar(); 787092"];
8214 [label="param AddTrivia(this) 787093"];
8215 [label="this.HasErrors 787094"];
8216 [label="get { return _errors != null; } 787095"];
8217 [label="return _errors != null; 787096"];
8218 [label="return _errors != null; 787097"];
8219 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787098"];
8220 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787099"];
8221 [label="if (isTrailing)\n                        {\n                            return;\n                        } 787100"];
8222 [label="return; 787101"];
8223 [label="param Create(SyntaxDiagnosticInfo[] errors) 787102"];
8224 [label="param Create(this) 787103"];
8225 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787104"];
8226 [label="SyntaxToken token; 787105"];
8227 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787106"];
8228 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787107"];
8229 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787108"];
8230 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787109"];
8231 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 787110"];
8232 [label="SyntaxFactory.Token(leadingNode, info.Kind, trailingNode) 787111"];
8233 [label="param Token(GreenNode leading) 787112"];
8234 [label="param Token(SyntaxKind kind) 787113"];
8235 [label="param Token(GreenNode trailing) 787114"];
8236 [label="return SyntaxToken.Create(kind, leading, trailing); 787115"];
8237 [label="return SyntaxToken.Create(kind, leading, trailing); 787116"];
8238 [label="return SyntaxToken.Create(kind, leading, trailing); 787117"];
8239 [label="SyntaxToken.Create(kind, leading, trailing) 787118"];
8240 [label="param Create(SyntaxKind kind) 787119"];
8241 [label="param Create(GreenNode leading) 787120"];
8242 [label="param Create(GreenNode trailing) 787121"];
8243 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787122"];
8244 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 787123"];
8245 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 787124"];
8246 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 787125"];
8247 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 787126"];
8248 [label="if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 787127"];
8249 [label="if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 787128"];
8250 [label="return s_tokensWithSingleTrailingCRLF[(int)kind].Value; 787129"];
8251 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787130"];
8252 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787131"];
8253 [label="Debug.Assert(quickWidth == token.FullWidth); 787132"];
8254 [label="this.AddLexedToken(token); 787133"];
8255 [label="param AddLexedToken(SyntaxToken token) 787134"];
8256 [label="Debug.Assert(token != null); 787135"];
8257 [label="_lexedTokens[_tokenCount].Value 787136"];
8258 [label="get { return (SyntaxKind)this.RawKind; } 787137"];
8259 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787138"];
8260 [label="TextWindow.Start(); 787139"];
8261 [label="TextWindow.Width 787140"];
8262 [label="var quickWidth = TextWindow.Width; 787141"];
8263 [label="param LexSyntaxTrivia(bool afterFirstToken) 787142"];
8264 [label="param LexSyntaxTrivia(bool isTrailing) 787143"];
8265 [label="bool onlyWhitespaceOnLine = !isTrailing; 787144"];
8266 [label="this.Start(); 787145"];
8267 [label="param LookupTrivia(char[] textBuffer) 787146"];
8268 [label="param LookupTrivia(int keyStart) 787147"];
8269 [label="param LookupTrivia(int keyLength) 787148"];
8270 [label="param LookupTrivia(int hashCode) 787149"];
8271 [label="param LookupTrivia(Func<SyntaxTrivia> createTriviaFunction) 787150"];
8272 [label="param LookupTrivia(this) 787151"];
8273 [label="var value = _triviaMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 787152"];
8274 [label="var value = _triviaMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 787153"];
8275 [label="var value = _triviaMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 787154"];
8276 [label="var value = _triviaMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 787155"];
8277 [label="var value = _triviaMap.FindItem(textBuffer, keyStart, keyLength, hashCode); 787156"];
8278 [label="if (value == null)\n            {\n                value = createTriviaFunction();\n                _triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value);\n            } 787157"];
8279 [label="if (value == null)\n            {\n                value = createTriviaFunction();\n                _triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value);\n            } 787158"];
8280 [label="value = createTriviaFunction(); 787159"];
8281 [label="value = createTriviaFunction(); 787160"];
8282 [label="param CreateWhitespaceTrivia(this) 787161"];
8283 [label="return SyntaxFactory.Whitespace(TextWindow.GetText(intern: true)); 787162"];
8284 [label="TextWindow.GetText(intern: true) 787163"];
8285 [label="param GetText(bool intern) 787164"];
8286 [label="param GetText(this) 787165"];
8287 [label="this.LexemeStartPosition 787166"];
8288 [label="get\n            {\n                return _basis + _lexemeStart;\n            } 787167"];
8289 [label="return this.GetText(this.LexemeStartPosition, this.Width, intern); 787168"];
8290 [label="this.Width 787169"];
8291 [label="get\n            {\n                return _offset - _lexemeStart;\n            } 787170"];
8292 [label="return this.GetText(this.LexemeStartPosition, this.Width, intern); 787171"];
8293 [label="return this.GetText(this.LexemeStartPosition, this.Width, intern); 787172"];
8294 [label="this.GetText(this.LexemeStartPosition, this.Width, intern) 787173"];
8295 [label="param GetText(int position) 787174"];
8296 [label="param GetText(int length) 787175"];
8297 [label="param GetText(bool intern) 787176"];
8298 [label="param GetText(this) 787177"];
8299 [label="int offset = position - _basis; 787178"];
8300 [label="switch (length)\n            {\n                case 0:\n                    return string.Empty;\n\n                case 1:\n                    if (_characterWindow[offset] == ' ')\n                    {\n                        return ' ';\n                    }\n                    if (_characterWindow[offset] == '\\n')\n                    {\n                        return '\\n';\n                    }\n                    break;\n\n                case 2:\n                    char firstChar = _characterWindow[offset];\n                    if (firstChar == '\\r' && _characterWindow[offset + 1] == '\\n')\n                    {\n                        return '\\r\\n';\n                    }\n                    if (firstChar == '/' && _characterWindow[offset + 1] == '/')\n                    {\n                        return '//';\n                    }\n                    break;\n\n                case 3:\n                    if (_characterWindow[offset] == '/' && _characterWindow[offset + 1] == '/' && _characterWindow[offset + 2] == ' ')\n                    {\n                        return '// ';\n                    }\n                    break;\n            } 787179"];
8301 [label="if (intern)\n            {\n                return this.Intern(_characterWindow, offset, length);\n            }\n            else\n            {\n                return new string(_characterWindow, offset, length);\n            } 787180"];
8302 [label="return this.Intern(_characterWindow, offset, length); 787181"];
8303 [label="return this.Intern(_characterWindow, offset, length); 787182"];
8304 [label="return this.Intern(_characterWindow, offset, length); 787183"];
8305 [label="this.Intern(_characterWindow, offset, length) 787184"];
8306 [label="param Intern(char[] array) 787185"];
8307 [label="param Intern(int start) 787186"];
8308 [label="param Intern(int length) 787187"];
8309 [label="param Intern(this) 787188"];
8310 [label="return _strings.Add(array, start, length); 787189"];
8311 [label="SyntaxFactory.Whitespace(TextWindow.GetText(intern: true)) 787190"];
8312 [label="param Whitespace(string text) 787191"];
8313 [label="param Whitespace(bool elastic = false) 787192"];
8314 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 787193"];
8315 [label="_triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787194"];
8316 [label="_triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787195"];
8317 [label="_triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787196"];
8318 [label="_triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787197"];
8319 [label="_triviaMap.AddItem(textBuffer, keyStart, keyLength, hashCode, value); 787198"];
8320 [label="return value; 787199"];
8321 [label="this.AddTrivia(this.ScanWhitespace(), ref triviaList); 787200"];
8322 [label="param AddTrivia(this) 787201"];
8323 [label="this.HasErrors 787202"];
8324 [label="get { return _errors != null; } 787203"];
8325 [label="return _errors != null; 787204"];
8326 [label="return _errors != null; 787205"];
8327 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787206"];
8328 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787207"];
8329 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787208"];
8330 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787209"];
8331 [label="return; 787210"];
8332 [label="this.Start(); 787211"];
8333 [label="param TryGetKeywordKind(out SyntaxKind kind) 787212"];
8334 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 787213"];
8335 [label="return SyntaxKind.PublicKeyword; 787214"];
8336 [label="if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        } 787215"];
8337 [label="SyntaxFacts.IsContextualKeyword(info.Kind) 787216"];
8338 [label="param IsContextualKeyword(SyntaxKind kind) 787217"];
8339 [label="switch (kind)\n            {\n                case SyntaxKind.YieldKeyword:\n                case SyntaxKind.PartialKeyword:\n                case SyntaxKind.FromKeyword:\n                case SyntaxKind.GroupKeyword:\n                case SyntaxKind.JoinKeyword:\n                case SyntaxKind.IntoKeyword:\n                case SyntaxKind.LetKeyword:\n                case SyntaxKind.ByKeyword:\n                case SyntaxKind.WhereKeyword:\n                case SyntaxKind.SelectKeyword:\n                case SyntaxKind.GetKeyword:\n                case SyntaxKind.SetKeyword:\n                case SyntaxKind.AddKeyword:\n                case SyntaxKind.RemoveKeyword:\n                case SyntaxKind.OrderByKeyword:\n                case SyntaxKind.AliasKeyword:\n                case SyntaxKind.OnKeyword:\n                case SyntaxKind.EqualsKeyword:\n                case SyntaxKind.AscendingKeyword:\n                case SyntaxKind.DescendingKeyword:\n                case SyntaxKind.AssemblyKeyword:\n                case SyntaxKind.ModuleKeyword:\n                case SyntaxKind.TypeKeyword:\n                case SyntaxKind.GlobalKeyword:\n                case SyntaxKind.FieldKeyword:\n                case SyntaxKind.MethodKeyword:\n                case SyntaxKind.ParamKeyword:\n                case SyntaxKind.PropertyKeyword:\n                case SyntaxKind.TypeVarKeyword:\n                case SyntaxKind.NameOfKeyword:\n                case SyntaxKind.AsyncKeyword:\n                case SyntaxKind.AwaitKeyword:\n                case SyntaxKind.WhenKeyword:\n                case SyntaxKind.UnderscoreToken:\n                case SyntaxKind.VarKeyword:\n                case SyntaxKind.OrKeyword:\n                case SyntaxKind.AndKeyword:\n                case SyntaxKind.NotKeyword:\n                case SyntaxKind.DataKeyword:\n                case SyntaxKind.WithKeyword:\n                case SyntaxKind.InitKeyword:\n                case SyntaxKind.RecordKeyword:\n                case SyntaxKind.ManagedKeyword:\n                case SyntaxKind.UnmanagedKeyword:\n                    return true;\n                default:\n                    return false;\n            } 787218"];
8340 [label="return false; 787219"];
8341 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 787220"];
8342 [label="var errors = this.GetErrors(GetFullWidth(leading)); 787221"];
8343 [label="GetFullWidth(leading) 787222"];
8344 [label="param GetFullWidth(SyntaxListBuilder builder) 787223"];
8345 [label="int width = 0; 787224"];
8346 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 787225"];
8347 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 787226"];
8348 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 787227"];
8349 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 787228"];
8350 [label="width += builder[i].FullWidth; 787229"];
8351 [label="width += builder[i].FullWidth; 787230"];
8352 [label="return width; 787231"];
8353 [label="this.GetErrors(GetFullWidth(leading)) 787232"];
8354 [label="param GetErrors(int leadingTriviaWidth) 787233"];
8355 [label="param GetErrors(this) 787234"];
8356 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787235"];
8357 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787236"];
8358 [label="return null; 787237"];
8359 [label="param AddTrivia(this) 787238"];
8360 [label="this.HasErrors 787239"];
8361 [label="get { return _errors != null; } 787240"];
8362 [label="return _errors != null; 787241"];
8363 [label="return _errors != null; 787242"];
8364 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787243"];
8365 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787244"];
8366 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787245"];
8367 [label="return; 787246"];
8368 [label="param Create(SyntaxDiagnosticInfo[] errors) 787247"];
8369 [label="param Create(this) 787248"];
8370 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787249"];
8371 [label="SyntaxToken token; 787250"];
8372 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787251"];
8373 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787252"];
8374 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787253"];
8375 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787254"];
8376 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787255"];
8377 [label="if (leading == SyntaxFactory.ElasticZeroSpace && trailing == SyntaxFactory.ElasticZeroSpace)\n            {\n                return s_tokensWithElasticTrivia[(int)kind].Value;\n            } 787256"];
8378 [label="return new SyntaxTokenWithTrivia(kind, leading, trailing); 787257"];
8379 [label="return new SyntaxTokenWithTrivia(kind, leading, trailing); 787258"];
8380 [label="new SyntaxTokenWithTrivia(kind, leading, trailing) 787259"];
8381 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 787260"];
8382 [label="param SyntaxTokenWithTrivia(GreenNode leading) 787261"];
8383 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 787262"];
8384 [label="param SyntaxTokenWithTrivia(this) 787263"];
8385 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 787264"];
8386 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 787265"];
8387 [label="this.AdjustFlagsAndWidth(leading); 787266"];
8388 [label="this.LeadingField 787267"];
8389 [label="this.AdjustFlagsAndWidth(trailing); 787268"];
8390 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787269"];
8391 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787270"];
8392 [label="Debug.Assert(quickWidth == token.FullWidth); 787271"];
8393 [label="this.AddLexedToken(token); 787272"];
8394 [label="param AddLexedToken(SyntaxToken token) 787273"];
8395 [label="Debug.Assert(token != null); 787274"];
8396 [label="_lexedTokens[_tokenCount].Value 787275"];
8397 [label="get { return (SyntaxKind)this.RawKind; } 787276"];
8398 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787277"];
8399 [label="TextWindow.Start(); 787278"];
8400 [label="var quickWidth = TextWindow.Width; 787279"];
8401 [label="param LexSyntaxTrivia(bool afterFirstToken) 787280"];
8402 [label="param LexSyntaxTrivia(bool isTrailing) 787281"];
8403 [label="bool onlyWhitespaceOnLine = !isTrailing; 787282"];
8404 [label="this.Start(); 787283"];
8405 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787284"];
8406 [label="return; 787285"];
8407 [label="this.Start(); 787286"];
8408 [label="param TryGetKeywordKind(out SyntaxKind kind) 787287"];
8409 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 787288"];
8410 [label="return SyntaxKind.ClassKeyword; 787289"];
8411 [label="if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        } 787290"];
8412 [label="SyntaxFacts.IsContextualKeyword(info.Kind) 787291"];
8413 [label="param IsContextualKeyword(SyntaxKind kind) 787292"];
8414 [label="switch (kind)\n            {\n                case SyntaxKind.YieldKeyword:\n                case SyntaxKind.PartialKeyword:\n                case SyntaxKind.FromKeyword:\n                case SyntaxKind.GroupKeyword:\n                case SyntaxKind.JoinKeyword:\n                case SyntaxKind.IntoKeyword:\n                case SyntaxKind.LetKeyword:\n                case SyntaxKind.ByKeyword:\n                case SyntaxKind.WhereKeyword:\n                case SyntaxKind.SelectKeyword:\n                case SyntaxKind.GetKeyword:\n                case SyntaxKind.SetKeyword:\n                case SyntaxKind.AddKeyword:\n                case SyntaxKind.RemoveKeyword:\n                case SyntaxKind.OrderByKeyword:\n                case SyntaxKind.AliasKeyword:\n                case SyntaxKind.OnKeyword:\n                case SyntaxKind.EqualsKeyword:\n                case SyntaxKind.AscendingKeyword:\n                case SyntaxKind.DescendingKeyword:\n                case SyntaxKind.AssemblyKeyword:\n                case SyntaxKind.ModuleKeyword:\n                case SyntaxKind.TypeKeyword:\n                case SyntaxKind.GlobalKeyword:\n                case SyntaxKind.FieldKeyword:\n                case SyntaxKind.MethodKeyword:\n                case SyntaxKind.ParamKeyword:\n                case SyntaxKind.PropertyKeyword:\n                case SyntaxKind.TypeVarKeyword:\n                case SyntaxKind.NameOfKeyword:\n                case SyntaxKind.AsyncKeyword:\n                case SyntaxKind.AwaitKeyword:\n                case SyntaxKind.WhenKeyword:\n                case SyntaxKind.UnderscoreToken:\n                case SyntaxKind.VarKeyword:\n                case SyntaxKind.OrKeyword:\n                case SyntaxKind.AndKeyword:\n                case SyntaxKind.NotKeyword:\n                case SyntaxKind.DataKeyword:\n                case SyntaxKind.WithKeyword:\n                case SyntaxKind.InitKeyword:\n                case SyntaxKind.RecordKeyword:\n                case SyntaxKind.ManagedKeyword:\n                case SyntaxKind.UnmanagedKeyword:\n                    return true;\n                default:\n                    return false;\n            } 787293"];
8415 [label="return false; 787294"];
8416 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 787295"];
8417 [label="int width = 0; 787296"];
8418 [label="return width; 787297"];
8419 [label="this.GetErrors(GetFullWidth(leading)) 787298"];
8420 [label="param GetErrors(int leadingTriviaWidth) 787299"];
8421 [label="param GetErrors(this) 787300"];
8422 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787301"];
8423 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787302"];
8424 [label="return null; 787303"];
8425 [label="param AddTrivia(this) 787304"];
8426 [label="this.HasErrors 787305"];
8427 [label="get { return _errors != null; } 787306"];
8428 [label="return _errors != null; 787307"];
8429 [label="return _errors != null; 787308"];
8430 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787309"];
8431 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787310"];
8432 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787311"];
8433 [label="return; 787312"];
8434 [label="param Create(SyntaxDiagnosticInfo[] errors) 787313"];
8435 [label="param Create(this) 787314"];
8436 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787315"];
8437 [label="SyntaxToken token; 787316"];
8438 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787317"];
8439 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787318"];
8440 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787319"];
8441 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787320"];
8442 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787321"];
8443 [label="return s_tokensWithSingleTrailingSpace[(int)kind].Value; 787322"];
8444 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787323"];
8445 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787324"];
8446 [label="Debug.Assert(quickWidth == token.FullWidth); 787325"];
8447 [label="this.AddLexedToken(token); 787326"];
8448 [label="param AddLexedToken(SyntaxToken token) 787327"];
8449 [label="Debug.Assert(token != null); 787328"];
8450 [label="_lexedTokens[_tokenCount].Value 787329"];
8451 [label="get { return (SyntaxKind)this.RawKind; } 787330"];
8452 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787331"];
8453 [label="TextWindow.Start(); 787332"];
8454 [label="var quickWidth = TextWindow.Width; 787333"];
8455 [label="param LexSyntaxTrivia(bool afterFirstToken) 787334"];
8456 [label="param LexSyntaxTrivia(bool isTrailing) 787335"];
8457 [label="bool onlyWhitespaceOnLine = !isTrailing; 787336"];
8458 [label="this.Start(); 787337"];
8459 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787338"];
8460 [label="return; 787339"];
8461 [label="this.Start(); 787340"];
8462 [label="param TryGetKeywordKind(out SyntaxKind kind) 787341"];
8463 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 787342"];
8464 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 787343"];
8465 [label="int width = 0; 787344"];
8466 [label="return width; 787345"];
8467 [label="this.GetErrors(GetFullWidth(leading)) 787346"];
8468 [label="param GetErrors(int leadingTriviaWidth) 787347"];
8469 [label="param GetErrors(this) 787348"];
8470 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787349"];
8471 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787350"];
8472 [label="return null; 787351"];
8473 [label="param AddTrivia(this) 787352"];
8474 [label="this.HasErrors 787353"];
8475 [label="get { return _errors != null; } 787354"];
8476 [label="return _errors != null; 787355"];
8477 [label="return _errors != null; 787356"];
8478 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787357"];
8479 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787358"];
8480 [label="char ch; 787359"];
8481 [label="TextWindow.AdvanceChar(); 787360"];
8482 [label="TextWindow.AdvanceChar(); 787361"];
8483 [label="if (isTrailing)\n                        {\n                            return;\n                        } 787362"];
8484 [label="return; 787363"];
8485 [label="param Create(SyntaxDiagnosticInfo[] errors) 787364"];
8486 [label="param Create(this) 787365"];
8487 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787366"];
8488 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787367"];
8489 [label="SyntaxToken token; 787368"];
8490 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787369"];
8491 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787370"];
8492 [label="Debug.Assert(quickWidth == token.FullWidth); 787371"];
8493 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787372"];
8494 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787373"];
8495 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787374"];
8496 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787375"];
8497 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787376"];
8498 [label="if (leading == SyntaxFactory.ElasticZeroSpace && trailing == SyntaxFactory.ElasticZeroSpace)\n            {\n                return s_tokensWithElasticTrivia[(int)kind].Value;\n            } 787377"];
8499 [label="switch (length)\n            {\n                case 0:\n                    return string.Empty;\n\n                case 1:\n                    if (_characterWindow[offset] == ' ')\n                    {\n                        return ' ';\n                    }\n                    if (_characterWindow[offset] == '\\n')\n                    {\n                        return '\\n';\n                    }\n                    break;\n\n                case 2:\n                    char firstChar = _characterWindow[offset];\n                    if (firstChar == '\\r' && _characterWindow[offset + 1] == '\\n')\n                    {\n                        return '\\r\\n';\n                    }\n                    if (firstChar == '/' && _characterWindow[offset + 1] == '/')\n                    {\n                        return '//';\n                    }\n                    break;\n\n                case 3:\n                    if (_characterWindow[offset] == '/' && _characterWindow[offset + 1] == '/' && _characterWindow[offset + 2] == ' ')\n                    {\n                        return '// ';\n                    }\n                    break;\n            } 787378"];
8500 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 787379"];
8501 [label="return SyntaxKind.IntKeyword; 787380"];
8502 [label="if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        } 787381"];
8503 [label="SyntaxFacts.IsContextualKeyword(info.Kind) 787382"];
8504 [label="param IsContextualKeyword(SyntaxKind kind) 787383"];
8505 [label="switch (kind)\n            {\n                case SyntaxKind.YieldKeyword:\n                case SyntaxKind.PartialKeyword:\n                case SyntaxKind.FromKeyword:\n                case SyntaxKind.GroupKeyword:\n                case SyntaxKind.JoinKeyword:\n                case SyntaxKind.IntoKeyword:\n                case SyntaxKind.LetKeyword:\n                case SyntaxKind.ByKeyword:\n                case SyntaxKind.WhereKeyword:\n                case SyntaxKind.SelectKeyword:\n                case SyntaxKind.GetKeyword:\n                case SyntaxKind.SetKeyword:\n                case SyntaxKind.AddKeyword:\n                case SyntaxKind.RemoveKeyword:\n                case SyntaxKind.OrderByKeyword:\n                case SyntaxKind.AliasKeyword:\n                case SyntaxKind.OnKeyword:\n                case SyntaxKind.EqualsKeyword:\n                case SyntaxKind.AscendingKeyword:\n                case SyntaxKind.DescendingKeyword:\n                case SyntaxKind.AssemblyKeyword:\n                case SyntaxKind.ModuleKeyword:\n                case SyntaxKind.TypeKeyword:\n                case SyntaxKind.GlobalKeyword:\n                case SyntaxKind.FieldKeyword:\n                case SyntaxKind.MethodKeyword:\n                case SyntaxKind.ParamKeyword:\n                case SyntaxKind.PropertyKeyword:\n                case SyntaxKind.TypeVarKeyword:\n                case SyntaxKind.NameOfKeyword:\n                case SyntaxKind.AsyncKeyword:\n                case SyntaxKind.AwaitKeyword:\n                case SyntaxKind.WhenKeyword:\n                case SyntaxKind.UnderscoreToken:\n                case SyntaxKind.VarKeyword:\n                case SyntaxKind.OrKeyword:\n                case SyntaxKind.AndKeyword:\n                case SyntaxKind.NotKeyword:\n                case SyntaxKind.DataKeyword:\n                case SyntaxKind.WithKeyword:\n                case SyntaxKind.InitKeyword:\n                case SyntaxKind.RecordKeyword:\n                case SyntaxKind.ManagedKeyword:\n                case SyntaxKind.UnmanagedKeyword:\n                    return true;\n                default:\n                    return false;\n            } 787384"];
8506 [label="return false; 787385"];
8507 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 787386"];
8508 [label="width += builder[i].FullWidth; 787387"];
8509 [label="return width; 787388"];
8510 [label="param GetErrors(int leadingTriviaWidth) 787389"];
8511 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787390"];
8512 [label="return null; 787391"];
8513 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787392"];
8514 [label="return; 787393"];
8515 [label="param Create(SyntaxDiagnosticInfo[] errors) 787394"];
8516 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787395"];
8517 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787396"];
8518 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787397"];
8519 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787398"];
8520 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787399"];
8521 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787400"];
8522 [label="if (leading == SyntaxFactory.ElasticZeroSpace && trailing == SyntaxFactory.ElasticZeroSpace)\n            {\n                return s_tokensWithElasticTrivia[(int)kind].Value;\n            } 787401"];
8523 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787402"];
8524 [label="Debug.Assert(quickWidth == token.FullWidth); 787403"];
8525 [label="this.AddLexedToken(token); 787404"];
8526 [label="param AddLexedToken(SyntaxToken token) 787405"];
8527 [label="Debug.Assert(token != null); 787406"];
8528 [label="_lexedTokens[_tokenCount].Value 787407"];
8529 [label="get { return (SyntaxKind)this.RawKind; } 787408"];
8530 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787409"];
8531 [label="TextWindow.Start(); 787410"];
8532 [label="var quickWidth = TextWindow.Width; 787411"];
8533 [label="param LexSyntaxTrivia(bool afterFirstToken) 787412"];
8534 [label="param LexSyntaxTrivia(bool isTrailing) 787413"];
8535 [label="bool onlyWhitespaceOnLine = !isTrailing; 787414"];
8536 [label="this.Start(); 787415"];
8537 [label="this.Start(); 787416"];
8538 [label="int width = 0; 787417"];
8539 [label="return width; 787418"];
8540 [label="this.GetErrors(GetFullWidth(leading)) 787419"];
8541 [label="param GetErrors(int leadingTriviaWidth) 787420"];
8542 [label="param GetErrors(this) 787421"];
8543 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787422"];
8544 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787423"];
8545 [label="return null; 787424"];
8546 [label="param AddTrivia(this) 787425"];
8547 [label="this.HasErrors 787426"];
8548 [label="get { return _errors != null; } 787427"];
8549 [label="return _errors != null; 787428"];
8550 [label="return _errors != null; 787429"];
8551 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787430"];
8552 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787431"];
8553 [label="param Create(SyntaxDiagnosticInfo[] errors) 787432"];
8554 [label="param Create(this) 787433"];
8555 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787434"];
8556 [label="SyntaxToken token; 787435"];
8557 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787436"];
8558 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787437"];
8559 [label="Debug.Assert(quickWidth == token.FullWidth); 787438"];
8560 [label="param TryGetKeywordKind(out SyntaxKind kind) 787439"];
8561 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 787440"];
8562 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 787441"];
8563 [label="if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        } 787442"];
8564 [label="return; 787443"];
8565 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787444"];
8566 [label="IsConflictMarkerTrivia() 787445"];
8567 [label="param IsConflictMarkerTrivia(this) 787446"];
8568 [label="TextWindow.Position 787447"];
8569 [label="get\n            {\n                return _basis + _offset;\n            } 787448"];
8570 [label="var position = TextWindow.Position; 787449"];
8571 [label="TextWindow.Text 787450"];
8572 [label="=> _text 787451"];
8573 [label="var text = TextWindow.Text; 787452"];
8574 [label="if (position == 0 || SyntaxFacts.IsNewLine(text[position - 1]))\n            {\n                var firstCh = text[position];\n                Debug.Assert(firstCh == '<' || firstCh == '=' || firstCh == '>');\n\n                if ((position + s_conflictMarkerLength) <= text.Length)\n                {\n                    for (int i = 0, n = s_conflictMarkerLength; i < n; i++)\n                    {\n                        if (text[position + i] != firstCh)\n                        {\n                            return false;\n                        }\n                    }\n\n                    if (firstCh == '=')\n                    {\n                        return true;\n                    }\n\n                    return (position + s_conflictMarkerLength) < text.Length &&\n                        text[position + s_conflictMarkerLength] == ' ';\n                }\n            } 787453"];
8575 [label="if (position == 0 || SyntaxFacts.IsNewLine(text[position - 1]))\n            {\n                var firstCh = text[position];\n                Debug.Assert(firstCh == '<' || firstCh == '=' || firstCh == '>');\n\n                if ((position + s_conflictMarkerLength) <= text.Length)\n                {\n                    for (int i = 0, n = s_conflictMarkerLength; i < n; i++)\n                    {\n                        if (text[position + i] != firstCh)\n                        {\n                            return false;\n                        }\n                    }\n\n                    if (firstCh == '=')\n                    {\n                        return true;\n                    }\n\n                    return (position + s_conflictMarkerLength) < text.Length &&\n                        text[position + s_conflictMarkerLength] == ' ';\n                }\n            } 787454"];
8576 [label="if (position == 0 || SyntaxFacts.IsNewLine(text[position - 1]))\n            {\n                var firstCh = text[position];\n                Debug.Assert(firstCh == '<' || firstCh == '=' || firstCh == '>');\n\n                if ((position + s_conflictMarkerLength) <= text.Length)\n                {\n                    for (int i = 0, n = s_conflictMarkerLength; i < n; i++)\n                    {\n                        if (text[position + i] != firstCh)\n                        {\n                            return false;\n                        }\n                    }\n\n                    if (firstCh == '=')\n                    {\n                        return true;\n                    }\n\n                    return (position + s_conflictMarkerLength) < text.Length &&\n                        text[position + s_conflictMarkerLength] == ' ';\n                }\n            } 787455"];
8577 [label="SyntaxFacts.IsNewLine(text[position - 1]) 787456"];
8578 [label="param IsNewLine(char ch) 787457"];
8579 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 787458"];
8580 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 787459"];
8581 [label="return false; 787460"];
8582 [label="if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            } 787461"];
8583 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787462"];
8584 [label="return null; 787463"];
8585 [label="param AddTrivia(this) 787464"];
8586 [label="this.HasErrors 787465"];
8587 [label="get { return _errors != null; } 787466"];
8588 [label="return _errors != null; 787467"];
8589 [label="return _errors != null; 787468"];
8590 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787469"];
8591 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787470"];
8592 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787471"];
8593 [label="return; 787472"];
8594 [label="param Create(SyntaxDiagnosticInfo[] errors) 787473"];
8595 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787474"];
8596 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787475"];
8597 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787476"];
8598 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787477"];
8599 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787478"];
8600 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787479"];
8601 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787480"];
8602 [label="Debug.Assert(quickWidth == token.FullWidth); 787481"];
8603 [label="this.AddLexedToken(token); 787482"];
8604 [label="param AddLexedToken(SyntaxToken token) 787483"];
8605 [label="Debug.Assert(token != null); 787484"];
8606 [label="_lexedTokens[_tokenCount].Value 787485"];
8607 [label="get { return (SyntaxKind)this.RawKind; } 787486"];
8608 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787487"];
8609 [label="TextWindow.Start(); 787488"];
8610 [label="var quickWidth = TextWindow.Width; 787489"];
8611 [label="param LexSyntaxTrivia(bool afterFirstToken) 787490"];
8612 [label="bool onlyWhitespaceOnLine = !isTrailing; 787491"];
8613 [label="this.Start(); 787492"];
8614 [label="this.Start(); 787493"];
8615 [label="param TryGetKeywordKind(out SyntaxKind kind) 787494"];
8616 [label="if (key.Length > MaxKeywordLength)\n            {\n                kind = SyntaxKind.None;\n                return false;\n            } 787495"];
8617 [label="return SyntaxKind.NullKeyword; 787496"];
8618 [label="if (SyntaxFacts.IsContextualKeyword(info.Kind))\n                        {\n                            info.ContextualKind = info.Kind;\n                            info.Kind = SyntaxKind.IdentifierToken;\n                        } 787497"];
8619 [label="SyntaxFacts.IsContextualKeyword(info.Kind) 787498"];
8620 [label="param IsContextualKeyword(SyntaxKind kind) 787499"];
8621 [label="switch (kind)\n            {\n                case SyntaxKind.YieldKeyword:\n                case SyntaxKind.PartialKeyword:\n                case SyntaxKind.FromKeyword:\n                case SyntaxKind.GroupKeyword:\n                case SyntaxKind.JoinKeyword:\n                case SyntaxKind.IntoKeyword:\n                case SyntaxKind.LetKeyword:\n                case SyntaxKind.ByKeyword:\n                case SyntaxKind.WhereKeyword:\n                case SyntaxKind.SelectKeyword:\n                case SyntaxKind.GetKeyword:\n                case SyntaxKind.SetKeyword:\n                case SyntaxKind.AddKeyword:\n                case SyntaxKind.RemoveKeyword:\n                case SyntaxKind.OrderByKeyword:\n                case SyntaxKind.AliasKeyword:\n                case SyntaxKind.OnKeyword:\n                case SyntaxKind.EqualsKeyword:\n                case SyntaxKind.AscendingKeyword:\n                case SyntaxKind.DescendingKeyword:\n                case SyntaxKind.AssemblyKeyword:\n                case SyntaxKind.ModuleKeyword:\n                case SyntaxKind.TypeKeyword:\n                case SyntaxKind.GlobalKeyword:\n                case SyntaxKind.FieldKeyword:\n                case SyntaxKind.MethodKeyword:\n                case SyntaxKind.ParamKeyword:\n                case SyntaxKind.PropertyKeyword:\n                case SyntaxKind.TypeVarKeyword:\n                case SyntaxKind.NameOfKeyword:\n                case SyntaxKind.AsyncKeyword:\n                case SyntaxKind.AwaitKeyword:\n                case SyntaxKind.WhenKeyword:\n                case SyntaxKind.UnderscoreToken:\n                case SyntaxKind.VarKeyword:\n                case SyntaxKind.OrKeyword:\n                case SyntaxKind.AndKeyword:\n                case SyntaxKind.NotKeyword:\n                case SyntaxKind.DataKeyword:\n                case SyntaxKind.WithKeyword:\n                case SyntaxKind.InitKeyword:\n                case SyntaxKind.RecordKeyword:\n                case SyntaxKind.ManagedKeyword:\n                case SyntaxKind.UnmanagedKeyword:\n                    return true;\n                default:\n                    return false;\n            } 787500"];
8622 [label="return false; 787501"];
8623 [label="if (info.Kind == SyntaxKind.None)\n                    {\n                        info.Kind = SyntaxKind.IdentifierToken;\n                    } 787502"];
8624 [label="int width = 0; 787503"];
8625 [label="return width; 787504"];
8626 [label="this.GetErrors(GetFullWidth(leading)) 787505"];
8627 [label="param GetErrors(int leadingTriviaWidth) 787506"];
8628 [label="param GetErrors(this) 787507"];
8629 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787508"];
8630 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787509"];
8631 [label="return null; 787510"];
8632 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787511"];
8633 [label="return; 787512"];
8634 [label="param Create(SyntaxDiagnosticInfo[] errors) 787513"];
8635 [label="param Create(this) 787514"];
8636 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787515"];
8637 [label="SyntaxToken token; 787516"];
8638 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787517"];
8639 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787518"];
8640 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787519"];
8641 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787520"];
8642 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787521"];
8643 [label="return s_tokensWithNoTrivia[(int)kind].Value; 787522"];
8644 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787523"];
8645 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787524"];
8646 [label="Debug.Assert(quickWidth == token.FullWidth); 787525"];
8647 [label="this.AddLexedToken(token); 787526"];
8648 [label="param AddLexedToken(SyntaxToken token) 787527"];
8649 [label="Debug.Assert(token != null); 787528"];
8650 [label="_lexedTokens[_tokenCount].Value 787529"];
8651 [label="get { return (SyntaxKind)this.RawKind; } 787530"];
8652 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787531"];
8653 [label="TextWindow.Start(); 787532"];
8654 [label="var quickWidth = TextWindow.Width; 787533"];
8655 [label="param LexSyntaxTrivia(bool afterFirstToken) 787534"];
8656 [label="bool onlyWhitespaceOnLine = !isTrailing; 787535"];
8657 [label="this.Start(); 787536"];
8658 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 787537"];
8659 [label="return; 787538"];
8660 [label="this.Start(); 787539"];
8661 [label="int width = 0; 787540"];
8662 [label="return width; 787541"];
8663 [label="this.GetErrors(GetFullWidth(leading)) 787542"];
8664 [label="param GetErrors(int leadingTriviaWidth) 787543"];
8665 [label="param GetErrors(this) 787544"];
8666 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787545"];
8667 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 787546"];
8668 [label="return null; 787547"];
8669 [label="char ch; 787548"];
8670 [label="TextWindow.AdvanceChar(); 787549"];
8671 [label="TextWindow.AdvanceChar(); 787550"];
8672 [label="param AddTrivia(this) 787551"];
8673 [label="this.HasErrors 787552"];
8674 [label="get { return _errors != null; } 787553"];
8675 [label="return _errors != null; 787554"];
8676 [label="return _errors != null; 787555"];
8677 [label="if (this.HasErrors)\n            {\n                trivia = trivia.WithDiagnosticsGreen(this.GetErrors(leadingTriviaWidth: 0));\n            } 787556"];
8678 [label="if (list == null)\n            {\n                list = new SyntaxListBuilder(TriviaListInitialCapacity);\n            } 787557"];
8679 [label="if (isTrailing)\n                        {\n                            return;\n                        } 787558"];
8680 [label="return; 787559"];
8681 [label="param Create(SyntaxDiagnosticInfo[] errors) 787560"];
8682 [label="param Create(this) 787561"];
8683 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 787562"];
8684 [label="SyntaxToken token; 787563"];
8685 [label="Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind)); 787564"];
8686 [label="SyntaxFacts.IsPunctuationOrKeyword(info.Kind) 787565"];
8687 [label="param IsPunctuationOrKeyword(SyntaxKind kind) 787566"];
8688 [label="return kind >= SyntaxKind.TildeToken && kind <= SyntaxKind.EndOfFileToken; 787567"];
8689 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787568"];
8690 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787569"];
8691 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 787570"];
8692 [label="Debug.Assert(quickWidth == token.FullWidth); 787571"];
8693 [label="if (leading == SyntaxFactory.ElasticZeroSpace && trailing == SyntaxFactory.ElasticZeroSpace)\n            {\n                return s_tokensWithElasticTrivia[(int)kind].Value;\n            } 787572"];
8694 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 787573"];
8695 [label="SyntaxFacts.IsWhitespace(ch) 787574"];
8696 [label="param IsWhitespace(char ch) 787575"];
8697 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 787576"];
8698 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 787577"];
8699 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 787578"];
8700 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 787579"];
8701 [label="SyntaxFacts.IsNewLine(ch) 787580"];
8702 [label="param IsNewLine(char ch) 787581"];
8703 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 787582"];
8704 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 787583"];
8705 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 787584"];
8706 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 787585"];
8707 [label="SyntaxFactory.Token(leadingNode, info.Kind, trailingNode) 787586"];
8708 [label="param Token(GreenNode leading) 787587"];
8709 [label="param Token(SyntaxKind kind) 787588"];
8710 [label="param Token(GreenNode trailing) 787589"];
8711 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 787590"];
8712 [label="this.AddLexedToken(token); 787591"];
8713 [label="param AddLexedToken(SyntaxToken token) 787592"];
8714 [label="Debug.Assert(token != null); 787593"];
8715 [label="_lexedTokens[_tokenCount].Value 787594"];
8716 [label="get { return (SyntaxKind)this.RawKind; } 787595"];
8717 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 787596"];
8718 [label="this.PreLex(); 787597"];
8719 [label="new SyntaxListPool() 787598"];
8720 [label="_pool = new SyntaxListPool() 787599"];
8721 [label="_syntaxFactoryContext 787600"];
8722 [label="_syntaxFactory 787601"];
8723 [label="_recursionDepth 787602"];
8724 [label="_termState 787603"];
8725 [label="_isInTry 787604"];
8726 [label="_checkedTopLevelStatementsFeatureAvailability 787605"];
8727 [label="_syntaxFactoryContext = new SyntaxFactoryContext(); 787606"];
8728 [label="_syntaxFactoryContext 787607"];
8729 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 787608"];
8730 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 787609"];
8731 [label="_syntaxFactory 787610"];
8732 [label="parser.ParseCompilationUnit() 787611"];
8733 [label="param ParseCompilationUnit(this) 787612"];
8734 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 787613"];
8735 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 787614"];
8736 [label="ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))) 787615"];
8737 [label="param ParseWithStackGuard(Func<TNode> parseFunc) 787616"];
8738 [label="param ParseWithStackGuard(Func<TNode> createEmptyNodeFunc) 787617"];
8739 [label="param ParseWithStackGuard(this) 787618"];
8740 [label="Debug.Assert(_recursionDepth == 0); 787619"];
8741 [label="Debug.Assert(_recursionDepth == 0); 787620"];
8742 [label="return parseFunc(); 787621"];
8743 [label="return parseFunc(); 787622"];
8744 [label="param ParseCompilationUnitCore(this) 787623"];
8745 [label="SyntaxToken tmp = null; 787624"];
8746 [label="SyntaxListBuilder initialBadNodes = null; 787625"];
8747 [label="var body = new NamespaceBodyBuilder(_pool); 787626"];
8748 [label="var body = new NamespaceBodyBuilder(_pool); 787627"];
8749 [label="new NamespaceBodyBuilder(_pool) 787628"];
8750 [label="param NamespaceBodyBuilder(SyntaxListPool pool) 787629"];
8751 [label="param NamespaceBodyBuilder(this) 787630"];
8752 [label="Externs = pool.Allocate<ExternAliasDirectiveSyntax>(); 787631"];
8753 [label="Externs 787632"];
8754 [label="Usings = pool.Allocate<UsingDirectiveSyntax>(); 787633"];
8755 [label="Usings 787634"];
8756 [label="Attributes = pool.Allocate<AttributeListSyntax>(); 787635"];
8757 [label="Attributes 787636"];
8758 [label="Members = pool.Allocate<MemberDeclarationSyntax>(); 787637"];
8759 [label="Members 787638"];
8760 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 787639"];
8761 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 787640"];
8762 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 787641"];
8763 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 787642"];
8764 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 787643"];
8765 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 787644"];
8766 [label="get\n            {\n                return _syntaxFactoryContext.IsInAsync;\n            } 787645"];
8767 [label="return _syntaxFactoryContext.IsInAsync; 787646"];
8768 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787647"];
8769 [label="this.FetchCurrentToken() 787648"];
8770 [label="param FetchCurrentToken(this) 787649"];
8771 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 787650"];
8772 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787651"];
8773 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787652"];
8774 [label="return _lexedTokens[_tokenOffset]; 787653"];
8775 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787654"];
8776 [label="_currentToken 787655"];
8777 [label="get { return (SyntaxKind)this.RawKind; } 787656"];
8778 [label="return (SyntaxKind)this.RawKind; 787657"];
8779 [label="param AddIncompleteMembers(ref SyntaxListBuilder<MemberDeclarationSyntax> incompleteMembers) 787658"];
8780 [label="param AddIncompleteMembers(ref NamespaceBodyBuilder body) 787659"];
8781 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 787660"];
8782 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 787661"];
8783 [label="param ParseNamespaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists) 787662"];
8784 [label="param ParseNamespaceDeclaration(SyntaxListBuilder modifiers) 787663"];
8785 [label="param ParseNamespaceDeclaration(this) 787664"];
8786 [label="_recursionDepth 787665"];
8787 [label="StackGuard.EnsureSufficientExecutionStack(_recursionDepth); 787666"];
8788 [label="var result = ParseNamespaceDeclarationCore(attributeLists, modifiers); 787667"];
8789 [label="var result = ParseNamespaceDeclarationCore(attributeLists, modifiers); 787668"];
8790 [label="ParseNamespaceDeclarationCore(attributeLists, modifiers) 787669"];
8791 [label="param ParseNamespaceDeclarationCore(SyntaxList<AttributeListSyntax> attributeLists) 787670"];
8792 [label="param ParseNamespaceDeclarationCore(SyntaxListBuilder modifiers) 787671"];
8793 [label="param ParseNamespaceDeclarationCore(this) 787672"];
8794 [label="this.CurrentToken 787673"];
8795 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787674"];
8796 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787675"];
8797 [label="Debug.Assert(this.CurrentToken.Kind == SyntaxKind.NamespaceKeyword); 787676"];
8798 [label="this.CurrentToken.Kind 787677"];
8799 [label="get { return (SyntaxKind)this.RawKind; } 787678"];
8800 [label="var namespaceToken = this.EatToken(SyntaxKind.NamespaceKeyword); 787679"];
8801 [label="this.EatToken(SyntaxKind.NamespaceKeyword) 787680"];
8802 [label="param EatToken(SyntaxKind kind) 787681"];
8803 [label="param EatToken(this) 787682"];
8804 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 787683"];
8805 [label="SyntaxFacts.IsAnyToken(kind) 787684"];
8806 [label="param IsAnyToken(SyntaxKind kind) 787685"];
8807 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 787686"];
8808 [label="return true; 787687"];
8809 [label="this.CurrentToken 787688"];
8810 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787689"];
8811 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787690"];
8812 [label="var ct = this.CurrentToken; 787691"];
8813 [label="ct.Kind 787692"];
8814 [label="get { return (SyntaxKind)this.RawKind; } 787693"];
8815 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 787694"];
8816 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 787695"];
8817 [label="MoveToNextToken() 787696"];
8818 [label="param MoveToNextToken(this) 787697"];
8819 [label="_currentToken.GetTrailingTrivia() 787698"];
8820 [label="param GetTrailingTrivia(this) 787699"];
8821 [label="return this.TrailingField; 787700"];
8822 [label="_prevTokenTrailingTrivia = _currentToken.GetTrailingTrivia(); 787701"];
8823 [label="_prevTokenTrailingTrivia 787702"];
8824 [label="_currentToken = null; 787703"];
8825 [label="_currentToken 787704"];
8826 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 787705"];
8827 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 787706"];
8828 [label="_tokenOffset 787707"];
8829 [label="MoveToNextToken(); 787708"];
8830 [label="return ct; 787709"];
8831 [label="IsScript 787710"];
8832 [label="get { return Options.Kind == SourceCodeKind.Script; } 787711"];
8833 [label="Options 787712"];
8834 [label="get { return this.lexer.Options; } 787713"];
8835 [label="this.lexer.Options 787714"];
8836 [label="get { return _options; } 787715"];
8837 [label="return _options; 787716"];
8838 [label="return this.lexer.Options; 787717"];
8839 [label="return Options.Kind == SourceCodeKind.Script; 787718"];
8840 [label="if (IsScript)\n            {\n                namespaceToken = this.AddError(namespaceToken, ErrorCode.ERR_NamespaceNotAllowedInScript);\n            } 787719"];
8841 [label="var name = this.ParseQualifiedName(); 787720"];
8842 [label="this.ParseQualifiedName() 787721"];
8843 [label="param ParseQualifiedName(NameOptions options = NameOptions.None) 787722"];
8844 [label="param ParseQualifiedName(this) 787723"];
8845 [label="NameSyntax name = this.ParseAliasQualifiedName(options); 787724"];
8846 [label="this.ParseAliasQualifiedName(options) 787725"];
8847 [label="param ParseAliasQualifiedName(NameOptions allowedParts = NameOptions.None) 787726"];
8848 [label="param ParseAliasQualifiedName(this) 787727"];
8849 [label="NameSyntax name = this.ParseSimpleName(allowedParts); 787728"];
8850 [label="this.ParseSimpleName(allowedParts) 787729"];
8851 [label="param ParseSimpleName(NameOptions options = NameOptions.None) 787730"];
8852 [label="param ParseSimpleName(this) 787731"];
8853 [label="var id = this.ParseIdentifierName(); 787732"];
8854 [label="this.ParseIdentifierName() 787733"];
8855 [label="param ParseIdentifierName(ErrorCode code = ErrorCode.ERR_IdentifierExpected) 787734"];
8856 [label="param ParseIdentifierName(this) 787735"];
8857 [label="this.IsIncrementalAndFactoryContextMatches 787736"];
8858 [label="get\n            {\n                if (!base.IsIncremental)\n                {\n                    return false;\n                }\n\n                CSharp.CSharpSyntaxNode current = this.CurrentNode;\n                return current != null && MatchesFactoryContext(current.Green, _syntaxFactoryContext);\n            } 787737"];
8859 [label="base.IsIncremental 787738"];
8860 [label="get\n            {\n                return _isIncremental;\n            } 787739"];
8861 [label="return _isIncremental; 787740"];
8862 [label="if (!base.IsIncremental)\n                {\n                    return false;\n                } 787741"];
8863 [label="return false; 787742"];
8864 [label="if (this.IsIncrementalAndFactoryContextMatches && this.CurrentNodeKind == SyntaxKind.IdentifierName)\n            {\n                if (!SyntaxFacts.IsContextualKeyword(((CSharp.Syntax.IdentifierNameSyntax)this.CurrentNode).Identifier.Kind()))\n                {\n                    return (IdentifierNameSyntax)this.EatNode();\n                }\n            } 787743"];
8865 [label="var tk = ParseIdentifierToken(code); 787744"];
8866 [label="ParseIdentifierToken(code) 787745"];
8867 [label="param ParseIdentifierToken(ErrorCode code = ErrorCode.ERR_IdentifierExpected) 787746"];
8868 [label="param ParseIdentifierToken(this) 787747"];
8869 [label="this.CurrentToken 787748"];
8870 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787749"];
8871 [label="this.FetchCurrentToken() 787750"];
8872 [label="param FetchCurrentToken(this) 787751"];
8873 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 787752"];
8874 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787753"];
8875 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787754"];
8876 [label="return _lexedTokens[_tokenOffset]; 787755"];
8877 [label="var ctk = this.CurrentToken.Kind; 787756"];
8878 [label="this.CurrentToken.Kind 787757"];
8879 [label="get { return (SyntaxKind)this.RawKind; } 787758"];
8880 [label="if (ctk == SyntaxKind.IdentifierToken)\n            {\n                // Error tolerance for IntelliSense. Consider the following case: [EditorBrowsable( partial class Goo {\n                // } Because we're parsing an attribute argument we'll end up consuming the 'partial' identifier and\n                // we'll eventually end up in a pretty confused state.  Because of that it becomes very difficult to\n                // show the correct parameter help in this case.  So, when we see 'partial' we check if it's being used\n                // as an identifier or as a contextual keyword.  If it's the latter then we bail out.  See\n                // Bug: vswhidbey/542125\n                if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                }\n\n                SyntaxToken identifierToken = this.EatToken();\n\n                if (this.IsInAsync && identifierToken.ContextualKind == SyntaxKind.AwaitKeyword)\n                {\n                    identifierToken = this.AddError(identifierToken, ErrorCode.ERR_BadAwaitAsIdentifier);\n                }\n\n                return identifierToken;\n            }\n            else\n            {\n                var name = CreateMissingIdentifierToken();\n                name = this.AddError(name, code);\n                return name;\n            } 787759"];
8881 [label="IsCurrentTokenPartialKeywordOfPartialMethodOrType() 787760"];
8882 [label="param IsCurrentTokenPartialKeywordOfPartialMethodOrType(this) 787761"];
8883 [label="this.CurrentToken 787762"];
8884 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787763"];
8885 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.PartialKeyword)\n            {\n                if (this.IsPartialType() || this.IsPartialMember())\n                {\n                    return true;\n                }\n            } 787764"];
8886 [label="this.CurrentToken.ContextualKind 787765"];
8887 [label="get\n            {\n                return this.Kind;\n            } 787766"];
8888 [label="this.Kind 787767"];
8889 [label="get { return (SyntaxKind)this.RawKind; } 787768"];
8890 [label="return this.Kind; 787769"];
8891 [label="return false; 787770"];
8892 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 787771"];
8893 [label="IsCurrentTokenQueryKeywordInQuery() 787772"];
8894 [label="param IsCurrentTokenQueryKeywordInQuery(this) 787773"];
8895 [label="this.IsInQuery 787774"];
8896 [label="get { return _syntaxFactoryContext.IsInQuery; } 787775"];
8897 [label="return _syntaxFactoryContext.IsInQuery; 787776"];
8898 [label="return this.IsInQuery && this.IsCurrentTokenQueryContextualKeyword; 787777"];
8899 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 787778"];
8900 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 787779"];
8901 [label="this.EatToken() 787780"];
8902 [label="param EatToken(this) 787781"];
8903 [label="this.CurrentToken 787782"];
8904 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787783"];
8905 [label="var ct = this.CurrentToken; 787784"];
8906 [label="MoveToNextToken() 787785"];
8907 [label="param MoveToNextToken(this) 787786"];
8908 [label="param GetTrailingTrivia(this) 787787"];
8909 [label="return _trailing; 787788"];
8910 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 787789"];
8911 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 787790"];
8912 [label="MoveToNextToken(); 787791"];
8913 [label="return ct; 787792"];
8914 [label="SyntaxToken identifierToken = this.EatToken(); 787793"];
8915 [label="this.IsInAsync 787794"];
8916 [label="return _syntaxFactoryContext.IsInAsync; 787795"];
8917 [label="if (this.IsInAsync && identifierToken.ContextualKind == SyntaxKind.AwaitKeyword)\n                {\n                    identifierToken = this.AddError(identifierToken, ErrorCode.ERR_BadAwaitAsIdentifier);\n                } 787796"];
8918 [label="return identifierToken; 787797"];
8919 [label="var tk = ParseIdentifierToken(code); 787798"];
8920 [label="return SyntaxFactory.IdentifierName(tk); 787799"];
8921 [label="return SyntaxFactory.IdentifierName(tk); 787800"];
8922 [label="param CSharpSyntaxNode(SyntaxKind kind) 787801"];
8923 [label="param CSharpSyntaxNode(this) 787802"];
8924 [label="kind 787803"];
8925 [label="param CSharpSyntaxNode(this) 787804"];
8926 [label="param CSharpSyntaxNode(this) 787805"];
8927 [label="GreenStats.NoteGreen(this); 787806"];
8928 [label="GreenStats.NoteGreen(this); 787807"];
8929 [label="var id = this.ParseIdentifierName(); 787808"];
8930 [label="if (id.Identifier.IsMissing)\n            {\n                return id;\n            } 787809"];
8931 [label="SimpleNameSyntax name = id; 787810"];
8932 [label="this.CurrentToken 787811"];
8933 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787812"];
8934 [label="this.FetchCurrentToken() 787813"];
8935 [label="param FetchCurrentToken(this) 787814"];
8936 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 787815"];
8937 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787816"];
8938 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787817"];
8939 [label="return _lexedTokens[_tokenOffset]; 787818"];
8940 [label="if (this.CurrentToken.Kind == SyntaxKind.LessThanToken)\n            {\n                var pt = this.GetResetPoint();\n                var kind = this.ScanTypeArgumentList(options);\n                this.Reset(ref pt);\n                this.Release(ref pt);\n\n                if (kind == ScanTypeArgumentListKind.DefiniteTypeArgumentList || (kind == ScanTypeArgumentListKind.PossibleTypeArgumentList && (options & NameOptions.InTypeList) != 0))\n                {\n                    Debug.Assert(this.CurrentToken.Kind == SyntaxKind.LessThanToken);\n                    SyntaxToken open;\n                    var types = _pool.AllocateSeparated<TypeSyntax>();\n                    SyntaxToken close;\n                    this.ParseTypeArgumentList(out open, types, out close);\n                    name = _syntaxFactory.GenericName(id.Identifier,\n                        _syntaxFactory.TypeArgumentList(open, types, close));\n                    _pool.Free(types);\n                }\n            } 787819"];
8941 [label="this.CurrentToken.Kind 787820"];
8942 [label="get { return (SyntaxKind)this.RawKind; } 787821"];
8943 [label="return name; 787822"];
8944 [label="NameSyntax name = this.ParseSimpleName(allowedParts); 787823"];
8945 [label="this.CurrentToken 787824"];
8946 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787825"];
8947 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787826"];
8948 [label="if (this.CurrentToken.Kind == SyntaxKind.ColonColonToken)\n            {\n                var token = this.EatToken();\n\n                name = ParseQualifiedNameRight(allowedParts, name, token);\n            } 787827"];
8949 [label="this.CurrentToken.Kind 787828"];
8950 [label="get { return (SyntaxKind)this.RawKind; } 787829"];
8951 [label="return name; 787830"];
8952 [label="NameSyntax name = this.ParseAliasQualifiedName(options); 787831"];
8953 [label="this.IsDotOrColonColon() 787832"];
8954 [label="param IsDotOrColonColon(this) 787833"];
8955 [label="this.CurrentToken 787834"];
8956 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787835"];
8957 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787836"];
8958 [label="return this.CurrentToken.Kind == SyntaxKind.DotToken || this.CurrentToken.Kind == SyntaxKind.ColonColonToken; 787837"];
8959 [label="this.CurrentToken.Kind 787838"];
8960 [label="get { return (SyntaxKind)this.RawKind; } 787839"];
8961 [label="this.CurrentToken 787840"];
8962 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787841"];
8963 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787842"];
8964 [label="return this.CurrentToken.Kind == SyntaxKind.DotToken || this.CurrentToken.Kind == SyntaxKind.ColonColonToken; 787843"];
8965 [label="this.CurrentToken.Kind 787844"];
8966 [label="get { return (SyntaxKind)this.RawKind; } 787845"];
8967 [label="return this.CurrentToken.Kind == SyntaxKind.DotToken || this.CurrentToken.Kind == SyntaxKind.ColonColonToken; 787846"];
8968 [label="while (this.IsDotOrColonColon() || this.CurrentToken.Kind == SyntaxKind.DotDotToken)\n            {\n                if (this.PeekToken(1).Kind == SyntaxKind.ThisKeyword)\n                {\n                    break;\n                }\n\n                var separator = this.EatToken();\n                name = ParseQualifiedNameRight(options, name, separator);\n            } 787847"];
8969 [label="this.CurrentToken 787848"];
8970 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787849"];
8971 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787850"];
8972 [label="while (this.IsDotOrColonColon() || this.CurrentToken.Kind == SyntaxKind.DotDotToken)\n            {\n                if (this.PeekToken(1).Kind == SyntaxKind.ThisKeyword)\n                {\n                    break;\n                }\n\n                var separator = this.EatToken();\n                name = ParseQualifiedNameRight(options, name, separator);\n            } 787851"];
8973 [label="this.CurrentToken.Kind 787852"];
8974 [label="get { return (SyntaxKind)this.RawKind; } 787853"];
8975 [label="while (this.IsDotOrColonColon() || this.CurrentToken.Kind == SyntaxKind.DotDotToken)\n            {\n                if (this.PeekToken(1).Kind == SyntaxKind.ThisKeyword)\n                {\n                    break;\n                }\n\n                var separator = this.EatToken();\n                name = ParseQualifiedNameRight(options, name, separator);\n            } 787854"];
8976 [label="return name; 787855"];
8977 [label="var name = this.ParseQualifiedName(); 787856"];
8978 [label="SyntaxToken openBrace; 787857"];
8979 [label="this.CurrentToken 787858"];
8980 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787859"];
8981 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787860"];
8982 [label="if (this.CurrentToken.Kind == SyntaxKind.OpenBraceToken || IsPossibleNamespaceMemberDeclaration())\n            {\n                //either we see the brace we expect here or we see something that could come after a brace\n                //so we insert a missing one\n                openBrace = this.EatToken(SyntaxKind.OpenBraceToken);\n            }\n            else\n            {\n                //the next character is neither the brace we expect, nor a token that could follow the expected\n                //brace so we assume it's a mistake and replace it with a missing brace \n                openBrace = this.EatTokenWithPrejudice(SyntaxKind.OpenBraceToken);\n                openBrace = this.ConvertToMissingWithTrailingTrivia(openBrace, SyntaxKind.OpenBraceToken);\n            } 787861"];
8983 [label="this.CurrentToken.Kind 787862"];
8984 [label="get { return (SyntaxKind)this.RawKind; } 787863"];
8985 [label="openBrace = this.EatToken(SyntaxKind.OpenBraceToken); 787864"];
8986 [label="this.EatToken(SyntaxKind.OpenBraceToken) 787865"];
8987 [label="param EatToken(SyntaxKind kind) 787866"];
8988 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 787867"];
8989 [label="SyntaxFacts.IsAnyToken(kind) 787868"];
8990 [label="param IsAnyToken(SyntaxKind kind) 787869"];
8991 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 787870"];
8992 [label="return true; 787871"];
8993 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 787872"];
8994 [label="MoveToNextToken(); 787873"];
8995 [label="return ct; 787874"];
8996 [label="var body = new NamespaceBodyBuilder(_pool); 787875"];
8997 [label="var body = new NamespaceBodyBuilder(_pool); 787876"];
8998 [label="new NamespaceBodyBuilder(_pool) 787877"];
8999 [label="param NamespaceBodyBuilder(SyntaxListPool pool) 787878"];
9000 [label="param NamespaceBodyBuilder(this) 787879"];
9001 [label="Externs = pool.Allocate<ExternAliasDirectiveSyntax>(); 787880"];
9002 [label="SyntaxListBuilder initialBadNodes = null; 787881"];
9003 [label="this.ParseNamespaceBody(ref openBrace, ref body, ref initialBadNodes, SyntaxKind.NamespaceDeclaration); 787882"];
9004 [label="this.ParseNamespaceBody(ref openBrace, ref body, ref initialBadNodes, SyntaxKind.NamespaceDeclaration); 787883"];
9005 [label="this.ParseNamespaceBody(ref openBrace, ref body, ref initialBadNodes, SyntaxKind.NamespaceDeclaration); 787884"];
9006 [label="this.ParseNamespaceBody(ref openBrace, ref body, ref initialBadNodes, SyntaxKind.NamespaceDeclaration); 787885"];
9007 [label="this.ParseNamespaceBody(ref openBrace, ref body, ref initialBadNodes, SyntaxKind.NamespaceDeclaration); 787886"];
9008 [label="this.ParseNamespaceBody(ref openBrace, ref body, ref initialBadNodes, SyntaxKind.NamespaceDeclaration); 787887"];
9009 [label="this.FetchCurrentToken() 787888"];
9010 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 787889"];
9011 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787890"];
9012 [label="param ParseMemberDeclaration(SyntaxKind parentKind) 787891"];
9013 [label="param ParseMemberDeclaration(this) 787892"];
9014 [label="_recursionDepth 787893"];
9015 [label="StackGuard.EnsureSufficientExecutionStack(_recursionDepth); 787894"];
9016 [label="var result = ParseMemberDeclarationCore(parentKind); 787895"];
9017 [label="var result = ParseMemberDeclarationCore(parentKind); 787896"];
9018 [label="var result = ParseMemberDeclarationCore(parentKind); 787897"];
9019 [label="get\n            {\n                if (!base.IsIncremental)\n                {\n                    return false;\n                }\n\n                CSharp.CSharpSyntaxNode current = this.CurrentNode;\n                return current != null && MatchesFactoryContext(current.Green, _syntaxFactoryContext);\n            } 787898"];
9020 [label="base.IsIncremental 787899"];
9021 [label="get\n            {\n                return _isIncremental;\n            } 787900"];
9022 [label="return _isIncremental; 787901"];
9023 [label="if (!base.IsIncremental)\n                {\n                    return false;\n                } 787902"];
9024 [label="return false; 787903"];
9025 [label="param ParseAttributeDeclarations(this) 787904"];
9026 [label="var attributes = _pool.Allocate<AttributeListSyntax>(); 787905"];
9027 [label="var saveTerm = _termState; 787906"];
9028 [label="_termState |= TerminatorState.IsAttributeDeclarationTerminator; 787907"];
9029 [label="_termState 787908"];
9030 [label="this.IsPossibleAttributeDeclaration() 787909"];
9031 [label="param IsPossibleAttributeDeclaration(this) 787910"];
9032 [label="this.CurrentToken 787911"];
9033 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787912"];
9034 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787913"];
9035 [label="return this.CurrentToken.Kind == SyntaxKind.OpenBracketToken; 787914"];
9036 [label="this.CurrentToken.Kind 787915"];
9037 [label="get { return (SyntaxKind)this.RawKind; } 787916"];
9038 [label="while (this.IsPossibleAttributeDeclaration())\n                {\n                    attributes.Add(this.ParseAttributeDeclaration());\n                } 787917"];
9039 [label="_termState 787918"];
9040 [label="return attributes.ToList(); 787919"];
9041 [label="_pool.Free(attributes); 787920"];
9042 [label="_pool.Free(attributes); 787921"];
9043 [label="param ParseModifiers(SyntaxListBuilder tokens) 787922"];
9044 [label="param ParseModifiers(bool forAccessors) 787923"];
9045 [label="param ParseModifiers(this) 787924"];
9046 [label="while (true)\n            {\n                var newMod = GetModifier(this.CurrentToken);\n                if (newMod == DeclarationModifiers.None)\n                {\n                    break;\n                }\n\n                SyntaxToken modTok;\n                switch (newMod)\n                {\n                    case DeclarationModifiers.Partial:\n                        var nextToken = PeekToken(1);\n                        var isPartialType = this.IsPartialType();\n                        var isPartialMember = this.IsPartialMember();\n                        if (isPartialType || isPartialMember)\n                        {\n                            // Standard legal cases.\n                            modTok = ConvertToKeyword(this.EatToken());\n                            modTok = CheckFeatureAvailability(modTok,\n                                isPartialType ? MessageID.IDS_FeaturePartialTypes : MessageID.IDS_FeaturePartialMethod);\n                        }\n                        else if (nextToken.Kind == SyntaxKind.NamespaceKeyword)\n                        {\n                            // Error reported in binding\n                            modTok = ConvertToKeyword(this.EatToken());\n                        }\n                        else if (\n                            nextToken.Kind == SyntaxKind.EnumKeyword ||\n                            nextToken.Kind == SyntaxKind.DelegateKeyword ||\n                            (IsPossibleStartOfTypeDeclaration(nextToken.Kind) && GetModifier(nextToken) != DeclarationModifiers.None))\n                        {\n                            // Misplaced partial\n                            // TODO(https://github.com/dotnet/roslyn/issues/22439):\n                            // We should consider moving this check into binding, but avoid holding on to trees\n                            modTok = AddError(ConvertToKeyword(this.EatToken()), ErrorCode.ERR_PartialMisplaced);\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                        break;\n\n                    case DeclarationModifiers.Ref:\n                        // 'ref' is only a modifier if used on a ref struct\n                        // it must be either immediately before the 'struct'\n                        // keyword, or immediately before 'partial struct' if\n                        // this is a partial ref struct declaration\n                        {\n                            var next = PeekToken(1);\n                            if (next.Kind == SyntaxKind.StructKeyword ||\n                                (next.ContextualKind == SyntaxKind.PartialKeyword &&\n                                 PeekToken(2).Kind == SyntaxKind.StructKeyword))\n                            {\n                                modTok = this.EatToken();\n                                modTok = CheckFeatureAvailability(modTok, MessageID.IDS_FeatureRefStructs);\n                            }\n                            else if (forAccessors && this.IsPossibleAccessorModifier())\n                            {\n                                // Accept ref as a modifier for properties and event accessors, to produce an error later during binding.\n                                modTok = this.EatToken();\n                            }\n                            else\n                            {\n                                return;\n                            }\n                            break;\n                        }\n\n                    case DeclarationModifiers.Async:\n                        if (!ShouldAsyncBeTreatedAsModifier(parsingStatementNotDeclaration: false))\n                        {\n                            return;\n                        }\n\n                        modTok = ConvertToKeyword(this.EatToken());\n                        modTok = CheckFeatureAvailability(modTok, MessageID.IDS_FeatureAsync);\n                        break;\n\n                    case DeclarationModifiers.Data:\n                        return;\n\n                    default:\n                        modTok = this.EatToken();\n                        break;\n                }\n\n                tokens.Add(modTok);\n            } 787925"];
9047 [label="this.CurrentToken 787926"];
9048 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787927"];
9049 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787928"];
9050 [label="var newMod = GetModifier(this.CurrentToken); 787929"];
9051 [label="GetModifier(this.CurrentToken) 787930"];
9052 [label="param GetModifier(SyntaxToken token) 787931"];
9053 [label="token.Kind 787932"];
9054 [label="get { return (SyntaxKind)this.RawKind; } 787933"];
9055 [label="token.ContextualKind 787934"];
9056 [label="get\n            {\n                return this.Kind;\n            } 787935"];
9057 [label="this.Kind 787936"];
9058 [label="get { return (SyntaxKind)this.RawKind; } 787937"];
9059 [label="return this.Kind; 787938"];
9060 [label="GetModifier(token.Kind, token.ContextualKind) 787939"];
9061 [label="if (newMod == DeclarationModifiers.None)\n                {\n                    break;\n                } 787940"];
9062 [label="SyntaxToken modTok; 787941"];
9063 [label="switch (newMod)\n                {\n                    case DeclarationModifiers.Partial:\n                        var nextToken = PeekToken(1);\n                        var isPartialType = this.IsPartialType();\n                        var isPartialMember = this.IsPartialMember();\n                        if (isPartialType || isPartialMember)\n                        {\n                            // Standard legal cases.\n                            modTok = ConvertToKeyword(this.EatToken());\n                            modTok = CheckFeatureAvailability(modTok,\n                                isPartialType ? MessageID.IDS_FeaturePartialTypes : MessageID.IDS_FeaturePartialMethod);\n                        }\n                        else if (nextToken.Kind == SyntaxKind.NamespaceKeyword)\n                        {\n                            // Error reported in binding\n                            modTok = ConvertToKeyword(this.EatToken());\n                        }\n                        else if (\n                            nextToken.Kind == SyntaxKind.EnumKeyword ||\n                            nextToken.Kind == SyntaxKind.DelegateKeyword ||\n                            (IsPossibleStartOfTypeDeclaration(nextToken.Kind) && GetModifier(nextToken) != DeclarationModifiers.None))\n                        {\n                            // Misplaced partial\n                            // TODO(https://github.com/dotnet/roslyn/issues/22439):\n                            // We should consider moving this check into binding, but avoid holding on to trees\n                            modTok = AddError(ConvertToKeyword(this.EatToken()), ErrorCode.ERR_PartialMisplaced);\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                        break;\n\n                    case DeclarationModifiers.Ref:\n                        // 'ref' is only a modifier if used on a ref struct\n                        // it must be either immediately before the 'struct'\n                        // keyword, or immediately before 'partial struct' if\n                        // this is a partial ref struct declaration\n                        {\n                            var next = PeekToken(1);\n                            if (next.Kind == SyntaxKind.StructKeyword ||\n                                (next.ContextualKind == SyntaxKind.PartialKeyword &&\n                                 PeekToken(2).Kind == SyntaxKind.StructKeyword))\n                            {\n                                modTok = this.EatToken();\n                                modTok = CheckFeatureAvailability(modTok, MessageID.IDS_FeatureRefStructs);\n                            }\n                            else if (forAccessors && this.IsPossibleAccessorModifier())\n                            {\n                                // Accept ref as a modifier for properties and event accessors, to produce an error later during binding.\n                                modTok = this.EatToken();\n                            }\n                            else\n                            {\n                                return;\n                            }\n                            break;\n                        }\n\n                    case DeclarationModifiers.Async:\n                        if (!ShouldAsyncBeTreatedAsModifier(parsingStatementNotDeclaration: false))\n                        {\n                            return;\n                        }\n\n                        modTok = ConvertToKeyword(this.EatToken());\n                        modTok = CheckFeatureAvailability(modTok, MessageID.IDS_FeatureAsync);\n                        break;\n\n                    case DeclarationModifiers.Data:\n                        return;\n\n                    default:\n                        modTok = this.EatToken();\n                        break;\n                } 787942"];
9064 [label="this.EatToken() 787943"];
9065 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 787944"];
9066 [label="MoveToNextToken(); 787945"];
9067 [label="modTok = this.EatToken(); 787946"];
9068 [label="tokens.Add(modTok); 787947"];
9069 [label="tokens.Add(modTok); 787948"];
9070 [label="this.FetchCurrentToken() 787949"];
9071 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 787950"];
9072 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 787951"];
9073 [label="if (newMod == DeclarationModifiers.None)\n                {\n                    break;\n                } 787952"];
9074 [label="param IsTypeDeclarationStart(this) 787953"];
9075 [label="this.CurrentToken 787954"];
9076 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787955"];
9077 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787956"];
9078 [label="switch (this.CurrentToken.Kind)\n            {\n                case SyntaxKind.ClassKeyword:\n                case SyntaxKind.DelegateKeyword when !IsFunctionPointerStart():\n                case SyntaxKind.EnumKeyword:\n                case SyntaxKind.InterfaceKeyword:\n                case SyntaxKind.StructKeyword:\n                    return true;\n\n                case SyntaxKind.IdentifierToken:\n                    if (CurrentToken.ContextualKind == SyntaxKind.RecordKeyword)\n                    {\n                        // This is an unusual use of LangVersion. Normally we only produce errors when the langversion\n                        // does not support a feature, but in this case we are effectively making a language breaking\n                        // change to consider 'record' a type declaration in all ambiguous cases. To avoid breaking\n                        // older code that is not using C# 9 we conditionally parse based on langversion\n                        return IsFeatureEnabled(MessageID.IDS_FeatureRecords);\n                    }\n                    return false;\n\n                default:\n                    return false;\n            } 787957"];
9079 [label="this.CurrentToken.Kind 787958"];
9080 [label="get { return (SyntaxKind)this.RawKind; } 787959"];
9081 [label="return true; 787960"];
9082 [label="param ParseTypeDeclaration(SyntaxList<AttributeListSyntax> attributes) 787961"];
9083 [label="param ParseTypeDeclaration(SyntaxListBuilder modifiers) 787962"];
9084 [label="param ParseTypeDeclaration(this) 787963"];
9085 [label="IsInAsync 787964"];
9086 [label="get\n            {\n                return _syntaxFactoryContext.IsInAsync;\n            } 787965"];
9087 [label="return _syntaxFactoryContext.IsInAsync; 787966"];
9088 [label="Debug.Assert(!IsInAsync); 787967"];
9089 [label="cancellationToken.ThrowIfCancellationRequested(); 787968"];
9090 [label="this.CurrentToken 787969"];
9091 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787970"];
9092 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787971"];
9093 [label="switch (this.CurrentToken.Kind)\n            {\n                case SyntaxKind.ClassKeyword:\n                    // report use of 'static class' if feature is unsupported \n                    CheckForVersionSpecificModifiers(modifiers, SyntaxKind.StaticKeyword, MessageID.IDS_FeatureStaticClasses);\n                    return this.ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers);\n\n                case SyntaxKind.StructKeyword:\n                    // report use of 'readonly struct' if feature is unsupported\n                    CheckForVersionSpecificModifiers(modifiers, SyntaxKind.ReadOnlyKeyword, MessageID.IDS_FeatureReadOnlyStructs);\n                    return this.ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers);\n\n                case SyntaxKind.InterfaceKeyword:\n                    return this.ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers);\n\n                case SyntaxKind.DelegateKeyword:\n                    return this.ParseDelegateDeclaration(attributes, modifiers);\n\n                case SyntaxKind.EnumKeyword:\n                    return this.ParseEnumDeclaration(attributes, modifiers);\n\n                case SyntaxKind.IdentifierToken:\n                    Debug.Assert(CurrentToken.ContextualKind == SyntaxKind.RecordKeyword);\n                    return ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(this.CurrentToken.Kind);\n            } 787972"];
9094 [label="this.CurrentToken.Kind 787973"];
9095 [label="get { return (SyntaxKind)this.RawKind; } 787974"];
9096 [label="CheckForVersionSpecificModifiers(modifiers, SyntaxKind.StaticKeyword, MessageID.IDS_FeatureStaticClasses); 787975"];
9097 [label="CheckForVersionSpecificModifiers(modifiers, SyntaxKind.StaticKeyword, MessageID.IDS_FeatureStaticClasses); 787976"];
9098 [label="CheckForVersionSpecificModifiers(modifiers, SyntaxKind.StaticKeyword, MessageID.IDS_FeatureStaticClasses) 787977"];
9099 [label="param CheckForVersionSpecificModifiers(SyntaxListBuilder modifiers) 787978"];
9100 [label="param CheckForVersionSpecificModifiers(SyntaxKind kind) 787979"];
9101 [label="param CheckForVersionSpecificModifiers(MessageID feature) 787980"];
9102 [label="param CheckForVersionSpecificModifiers(this) 787981"];
9103 [label="for (int i = 0, n = modifiers.Count; i < n; i++)\n            {\n                if (modifiers[i].RawKind == (int)kind)\n                {\n                    modifiers[i] = CheckFeatureAvailability(modifiers[i], feature);\n                }\n            } 787982"];
9104 [label="for (int i = 0, n = modifiers.Count; i < n; i++)\n            {\n                if (modifiers[i].RawKind == (int)kind)\n                {\n                    modifiers[i] = CheckFeatureAvailability(modifiers[i], feature);\n                }\n            } 787983"];
9105 [label="if (modifiers[i].RawKind == (int)kind)\n                {\n                    modifiers[i] = CheckFeatureAvailability(modifiers[i], feature);\n                } 787984"];
9106 [label="if (modifiers[i].RawKind == (int)kind)\n                {\n                    modifiers[i] = CheckFeatureAvailability(modifiers[i], feature);\n                } 787985"];
9107 [label="CheckForVersionSpecificModifiers(modifiers, SyntaxKind.StaticKeyword, MessageID.IDS_FeatureStaticClasses); 787986"];
9108 [label="return this.ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers); 787987"];
9109 [label="return this.ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers); 787988"];
9110 [label="this.ParseClassOrStructOrInterfaceDeclaration(attributes, modifiers) 787989"];
9111 [label="param ParseClassOrStructOrInterfaceDeclaration(SyntaxList<AttributeListSyntax> attributes) 787990"];
9112 [label="param ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder modifiers) 787991"];
9113 [label="param ParseClassOrStructOrInterfaceDeclaration(this) 787992"];
9114 [label="this.CurrentToken 787993"];
9115 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 787994"];
9116 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 787995"];
9117 [label="Debug.Assert(this.CurrentToken.Kind == SyntaxKind.ClassKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.StructKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.InterfaceKeyword ||\n                CurrentToken.ContextualKind == SyntaxKind.RecordKeyword); 787996"];
9118 [label="this.CurrentToken.Kind 787997"];
9119 [label="get { return (SyntaxKind)this.RawKind; } 787998"];
9120 [label="IsInAsync 787999"];
9121 [label="get\n            {\n                return _syntaxFactoryContext.IsInAsync;\n            } 788000"];
9122 [label="return _syntaxFactoryContext.IsInAsync; 788001"];
9123 [label="Debug.Assert(!IsInAsync); 788002"];
9124 [label="this.EatToken() 788003"];
9125 [label="param EatToken(this) 788004"];
9126 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788005"];
9127 [label="param GetTrailingTrivia(this) 788006"];
9128 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788007"];
9129 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788008"];
9130 [label="_tokenOffset 788009"];
9131 [label="MoveToNextToken(); 788010"];
9132 [label="var keyword = ConvertToKeyword(this.EatToken()); 788011"];
9133 [label="ConvertToKeyword(this.EatToken()) 788012"];
9134 [label="param ConvertToKeyword(SyntaxToken token) 788013"];
9135 [label="token.Kind 788014"];
9136 [label="get { return (SyntaxKind)this.RawKind; } 788015"];
9137 [label="if (token.Kind != token.ContextualKind)\n            {\n                var kw = token.IsMissing\n                        ? SyntaxFactory.MissingToken(token.LeadingTrivia.Node, token.ContextualKind, token.TrailingTrivia.Node)\n                        : SyntaxFactory.Token(token.LeadingTrivia.Node, token.ContextualKind, token.TrailingTrivia.Node);\n                var d = token.GetDiagnostics();\n                if (d != null && d.Length > 0)\n                {\n                    kw = kw.WithDiagnosticsGreen(d);\n                }\n\n                return kw;\n            } 788016"];
9138 [label="token.ContextualKind 788017"];
9139 [label="get\n            {\n                return this.Kind;\n            } 788018"];
9140 [label="if (token.Kind != token.ContextualKind)\n            {\n                var kw = token.IsMissing\n                        ? SyntaxFactory.MissingToken(token.LeadingTrivia.Node, token.ContextualKind, token.TrailingTrivia.Node)\n                        : SyntaxFactory.Token(token.LeadingTrivia.Node, token.ContextualKind, token.TrailingTrivia.Node);\n                var d = token.GetDiagnostics();\n                if (d != null && d.Length > 0)\n                {\n                    kw = kw.WithDiagnosticsGreen(d);\n                }\n\n                return kw;\n            } 788019"];
9141 [label="if (token.Kind != token.ContextualKind)\n            {\n                var kw = token.IsMissing\n                        ? SyntaxFactory.MissingToken(token.LeadingTrivia.Node, token.ContextualKind, token.TrailingTrivia.Node)\n                        : SyntaxFactory.Token(token.LeadingTrivia.Node, token.ContextualKind, token.TrailingTrivia.Node);\n                var d = token.GetDiagnostics();\n                if (d != null && d.Length > 0)\n                {\n                    kw = kw.WithDiagnosticsGreen(d);\n                }\n\n                return kw;\n            } 788020"];
9142 [label="return token; 788021"];
9143 [label="var outerSaveTerm = _termState; 788022"];
9144 [label="keyword.Kind 788023"];
9145 [label="get { return (SyntaxKind)this.RawKind; } 788024"];
9146 [label="if (keyword.Kind == SyntaxKind.RecordKeyword)\n            {\n                _termState |= TerminatorState.IsEndOfRecordSignature;\n            } 788025"];
9147 [label="var saveTerm = _termState; 788026"];
9148 [label="_termState |= TerminatorState.IsPossibleAggregateClauseStartOrStop; 788027"];
9149 [label="_termState 788028"];
9150 [label="var name = this.ParseIdentifierToken(); 788029"];
9151 [label="this.ParseIdentifierToken() 788030"];
9152 [label="param ParseIdentifierToken(ErrorCode code = ErrorCode.ERR_IdentifierExpected) 788031"];
9153 [label="param ParseIdentifierToken(this) 788032"];
9154 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788033"];
9155 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 788034"];
9156 [label="return _lexedTokens[_tokenOffset]; 788035"];
9157 [label="IsCurrentTokenPartialKeywordOfPartialMethodOrType() 788036"];
9158 [label="param IsCurrentTokenPartialKeywordOfPartialMethodOrType(this) 788037"];
9159 [label="this.CurrentToken 788038"];
9160 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788039"];
9161 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.PartialKeyword)\n            {\n                if (this.IsPartialType() || this.IsPartialMember())\n                {\n                    return true;\n                }\n            } 788040"];
9162 [label="this.CurrentToken.ContextualKind 788041"];
9163 [label="get\n            {\n                return this.Kind;\n            } 788042"];
9164 [label="return false; 788043"];
9165 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 788044"];
9166 [label="IsCurrentTokenQueryKeywordInQuery() 788045"];
9167 [label="param IsCurrentTokenQueryKeywordInQuery(this) 788046"];
9168 [label="this.IsInQuery 788047"];
9169 [label="get { return _syntaxFactoryContext.IsInQuery; } 788048"];
9170 [label="return _syntaxFactoryContext.IsInQuery; 788049"];
9171 [label="return this.IsInQuery && this.IsCurrentTokenQueryContextualKeyword; 788050"];
9172 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 788051"];
9173 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 788052"];
9174 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788053"];
9175 [label="MoveToNextToken(); 788054"];
9176 [label="this.IsInAsync 788055"];
9177 [label="if (this.IsInAsync && identifierToken.ContextualKind == SyntaxKind.AwaitKeyword)\n                {\n                    identifierToken = this.AddError(identifierToken, ErrorCode.ERR_BadAwaitAsIdentifier);\n                } 788056"];
9178 [label="var name = this.ParseIdentifierToken(); 788057"];
9179 [label="this.ParseTypeParameterList() 788058"];
9180 [label="param ParseTypeParameterList(this) 788059"];
9181 [label="this.CurrentToken 788060"];
9182 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788061"];
9183 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788062"];
9184 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 788063"];
9185 [label="return _lexedTokens[_tokenOffset]; 788064"];
9186 [label="if (this.CurrentToken.Kind != SyntaxKind.LessThanToken)\n            {\n                return null;\n            } 788065"];
9187 [label="this.CurrentToken.Kind 788066"];
9188 [label="get { return (SyntaxKind)this.RawKind; } 788067"];
9189 [label="return null; 788068"];
9190 [label="var typeParameters = this.ParseTypeParameterList(); 788069"];
9191 [label="keyword.Kind 788070"];
9192 [label="get { return (SyntaxKind)this.RawKind; } 788071"];
9193 [label="var paramList = keyword.Kind == SyntaxKind.RecordKeyword && CurrentToken.Kind == SyntaxKind.OpenParenToken\n                ? ParseParenthesizedParameterList() : null; 788072"];
9194 [label="keyword.Kind == SyntaxKind.RecordKeyword && CurrentToken.Kind == SyntaxKind.OpenParenToken 788073"];
9195 [label="var baseList = this.ParseBaseList(keyword, paramList is object); 788074"];
9196 [label="var baseList = this.ParseBaseList(keyword, paramList is object); 788075"];
9197 [label="this.ParseBaseList(keyword, paramList is object) 788076"];
9198 [label="param ParseBaseList(SyntaxToken typeKeyword) 788077"];
9199 [label="param ParseBaseList(bool haveParameters) 788078"];
9200 [label="param ParseBaseList(this) 788079"];
9201 [label="this.CurrentToken 788080"];
9202 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788081"];
9203 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788082"];
9204 [label="if (this.CurrentToken.Kind != SyntaxKind.ColonToken)\n            {\n                return null;\n            } 788083"];
9205 [label="this.CurrentToken.Kind 788084"];
9206 [label="get { return (SyntaxKind)this.RawKind; } 788085"];
9207 [label="return null; 788086"];
9208 [label="var baseList = this.ParseBaseList(keyword, paramList is object); 788087"];
9209 [label="_termState 788088"];
9210 [label="bool parseMembers = true; 788089"];
9211 [label="SyntaxListBuilder<MemberDeclarationSyntax> members = default(SyntaxListBuilder<MemberDeclarationSyntax>); 788090"];
9212 [label="var constraints = default(SyntaxListBuilder<TypeParameterConstraintClauseSyntax>); 788091"];
9213 [label="this.CurrentToken 788092"];
9214 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788093"];
9215 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788094"];
9216 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.WhereKeyword)\n                {\n                    constraints = _pool.Allocate<TypeParameterConstraintClauseSyntax>();\n                    this.ParseTypeParameterConstraintClauses(constraints);\n                } 788095"];
9217 [label="this.CurrentToken.ContextualKind 788096"];
9218 [label="get\n            {\n                return this.Kind;\n            } 788097"];
9219 [label="_termState 788098"];
9220 [label="SyntaxToken semicolon; 788099"];
9221 [label="SyntaxToken? openBrace; 788100"];
9222 [label="SyntaxToken? closeBrace; 788101"];
9223 [label="keyword.Kind 788102"];
9224 [label="get { return (SyntaxKind)this.RawKind; } 788103"];
9225 [label="if (!(keyword.Kind == SyntaxKind.RecordKeyword) || CurrentToken.Kind != SyntaxKind.SemicolonToken)\n                {\n                    openBrace = this.EatToken(SyntaxKind.OpenBraceToken);\n\n                    // ignore members if missing type name or missing open curly\n                    if (name.IsMissing || openBrace.IsMissing)\n                    {\n                        parseMembers = false;\n                    }\n\n                    // even if we saw a { or think we should parse members bail out early since\n                    // we know namespaces can't be nested inside types\n                    if (parseMembers)\n                    {\n                        members = _pool.Allocate<MemberDeclarationSyntax>();\n\n                        while (true)\n                        {\n                            SyntaxKind kind = this.CurrentToken.Kind;\n\n                            if (CanStartMember(kind))\n                            {\n                                // This token can start a member -- go parse it\n                                var saveTerm2 = _termState;\n                                _termState |= TerminatorState.IsPossibleMemberStartOrStop;\n\n                                var member = this.ParseMemberDeclaration(keyword.Kind);\n                                if (member != null)\n                                {\n                                    // statements are accepted here, a semantic error will be reported later\n                                    members.Add(member);\n                                }\n                                else\n                                {\n                                    // we get here if we couldn't parse the lookahead as a statement or a declaration (we haven't consumed any tokens):\n                                    this.SkipBadMemberListTokens(ref openBrace, members);\n                                }\n\n                                _termState = saveTerm2;\n                            }\n                            else if (kind == SyntaxKind.CloseBraceToken || kind == SyntaxKind.EndOfFileToken || this.IsTerminator())\n                            {\n                                // This marks the end of members of this class\n                                break;\n                            }\n                            else\n                            {\n                                // Error -- try to sync up with intended reality\n                                this.SkipBadMemberListTokens(ref openBrace, members);\n                            }\n                        }\n                    }\n\n                    if (openBrace.IsMissing)\n                    {\n                        closeBrace = SyntaxFactory.MissingToken(SyntaxKind.CloseBraceToken);\n                        closeBrace = WithAdditionalDiagnostics(closeBrace, this.GetExpectedTokenError(SyntaxKind.CloseBraceToken, this.CurrentToken.Kind));\n                    }\n                    else\n                    {\n                        closeBrace = this.EatToken(SyntaxKind.CloseBraceToken);\n                    }\n                    semicolon = TryEatToken(SyntaxKind.SemicolonToken);\n                }\n                else\n                {\n                    semicolon = CheckFeatureAvailability(EatToken(SyntaxKind.SemicolonToken), MessageID.IDS_FeatureRecords);\n                    openBrace = null;\n                    closeBrace = null;\n                } 788104"];
9226 [label="openBrace = this.EatToken(SyntaxKind.OpenBraceToken); 788105"];
9227 [label="this.EatToken(SyntaxKind.OpenBraceToken) 788106"];
9228 [label="param EatToken(SyntaxKind kind) 788107"];
9229 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 788108"];
9230 [label="SyntaxFacts.IsAnyToken(kind) 788109"];
9231 [label="param IsAnyToken(SyntaxKind kind) 788110"];
9232 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 788111"];
9233 [label="return true; 788112"];
9234 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788113"];
9235 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 788114"];
9236 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788115"];
9237 [label="MoveToNextToken(); 788116"];
9238 [label="if (name.IsMissing || openBrace.IsMissing)\n                    {\n                        parseMembers = false;\n                    } 788117"];
9239 [label="if (parseMembers)\n                    {\n                        members = _pool.Allocate<MemberDeclarationSyntax>();\n\n                        while (true)\n                        {\n                            SyntaxKind kind = this.CurrentToken.Kind;\n\n                            if (CanStartMember(kind))\n                            {\n                                // This token can start a member -- go parse it\n                                var saveTerm2 = _termState;\n                                _termState |= TerminatorState.IsPossibleMemberStartOrStop;\n\n                                var member = this.ParseMemberDeclaration(keyword.Kind);\n                                if (member != null)\n                                {\n                                    // statements are accepted here, a semantic error will be reported later\n                                    members.Add(member);\n                                }\n                                else\n                                {\n                                    // we get here if we couldn't parse the lookahead as a statement or a declaration (we haven't consumed any tokens):\n                                    this.SkipBadMemberListTokens(ref openBrace, members);\n                                }\n\n                                _termState = saveTerm2;\n                            }\n                            else if (kind == SyntaxKind.CloseBraceToken || kind == SyntaxKind.EndOfFileToken || this.IsTerminator())\n                            {\n                                // This marks the end of members of this class\n                                break;\n                            }\n                            else\n                            {\n                                // Error -- try to sync up with intended reality\n                                this.SkipBadMemberListTokens(ref openBrace, members);\n                            }\n                        }\n                    } 788118"];
9240 [label="members = _pool.Allocate<MemberDeclarationSyntax>(); 788119"];
9241 [label="while (true)\n                        {\n                            SyntaxKind kind = this.CurrentToken.Kind;\n\n                            if (CanStartMember(kind))\n                            {\n                                // This token can start a member -- go parse it\n                                var saveTerm2 = _termState;\n                                _termState |= TerminatorState.IsPossibleMemberStartOrStop;\n\n                                var member = this.ParseMemberDeclaration(keyword.Kind);\n                                if (member != null)\n                                {\n                                    // statements are accepted here, a semantic error will be reported later\n                                    members.Add(member);\n                                }\n                                else\n                                {\n                                    // we get here if we couldn't parse the lookahead as a statement or a declaration (we haven't consumed any tokens):\n                                    this.SkipBadMemberListTokens(ref openBrace, members);\n                                }\n\n                                _termState = saveTerm2;\n                            }\n                            else if (kind == SyntaxKind.CloseBraceToken || kind == SyntaxKind.EndOfFileToken || this.IsTerminator())\n                            {\n                                // This marks the end of members of this class\n                                break;\n                            }\n                            else\n                            {\n                                // Error -- try to sync up with intended reality\n                                this.SkipBadMemberListTokens(ref openBrace, members);\n                            }\n                        } 788120"];
9242 [label="this.CurrentToken 788121"];
9243 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788122"];
9244 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 788123"];
9245 [label="SyntaxKind kind = this.CurrentToken.Kind; 788124"];
9246 [label="this.CurrentToken.Kind 788125"];
9247 [label="get { return (SyntaxKind)this.RawKind; } 788126"];
9248 [label="if (CanStartMember(kind))\n                            {\n                                // This token can start a member -- go parse it\n                                var saveTerm2 = _termState;\n                                _termState |= TerminatorState.IsPossibleMemberStartOrStop;\n\n                                var member = this.ParseMemberDeclaration(keyword.Kind);\n                                if (member != null)\n                                {\n                                    // statements are accepted here, a semantic error will be reported later\n                                    members.Add(member);\n                                }\n                                else\n                                {\n                                    // we get here if we couldn't parse the lookahead as a statement or a declaration (we haven't consumed any tokens):\n                                    this.SkipBadMemberListTokens(ref openBrace, members);\n                                }\n\n                                _termState = saveTerm2;\n                            }\n                            else if (kind == SyntaxKind.CloseBraceToken || kind == SyntaxKind.EndOfFileToken || this.IsTerminator())\n                            {\n                                // This marks the end of members of this class\n                                break;\n                            }\n                            else\n                            {\n                                // Error -- try to sync up with intended reality\n                                this.SkipBadMemberListTokens(ref openBrace, members);\n                            } 788127"];
9249 [label="CanStartMember(kind) 788128"];
9250 [label="param CanStartMember(SyntaxKind kind) 788129"];
9251 [label="switch (kind)\n            {\n                case SyntaxKind.AbstractKeyword:\n                case SyntaxKind.BoolKeyword:\n                case SyntaxKind.ByteKeyword:\n                case SyntaxKind.CharKeyword:\n                case SyntaxKind.ClassKeyword:\n                case SyntaxKind.ConstKeyword:\n                case SyntaxKind.DecimalKeyword:\n                case SyntaxKind.DelegateKeyword:\n                case SyntaxKind.DoubleKeyword:\n                case SyntaxKind.EnumKeyword:\n                case SyntaxKind.EventKeyword:\n                case SyntaxKind.ExternKeyword:\n                case SyntaxKind.FixedKeyword:\n                case SyntaxKind.FloatKeyword:\n                case SyntaxKind.IntKeyword:\n                case SyntaxKind.InterfaceKeyword:\n                case SyntaxKind.InternalKeyword:\n                case SyntaxKind.LongKeyword:\n                case SyntaxKind.NewKeyword:\n                case SyntaxKind.ObjectKeyword:\n                case SyntaxKind.OverrideKeyword:\n                case SyntaxKind.PrivateKeyword:\n                case SyntaxKind.ProtectedKeyword:\n                case SyntaxKind.PublicKeyword:\n                case SyntaxKind.ReadOnlyKeyword:\n                case SyntaxKind.SByteKeyword:\n                case SyntaxKind.SealedKeyword:\n                case SyntaxKind.ShortKeyword:\n                case SyntaxKind.StaticKeyword:\n                case SyntaxKind.StringKeyword:\n                case SyntaxKind.StructKeyword:\n                case SyntaxKind.UIntKeyword:\n                case SyntaxKind.ULongKeyword:\n                case SyntaxKind.UnsafeKeyword:\n                case SyntaxKind.UShortKeyword:\n                case SyntaxKind.VirtualKeyword:\n                case SyntaxKind.VoidKeyword:\n                case SyntaxKind.VolatileKeyword:\n                case SyntaxKind.IdentifierToken:\n                case SyntaxKind.TildeToken:\n                case SyntaxKind.OpenBracketToken:\n                case SyntaxKind.ImplicitKeyword:\n                case SyntaxKind.ExplicitKeyword:\n                case SyntaxKind.OpenParenToken:    //tuple\n                case SyntaxKind.RefKeyword:\n                    return true;\n\n                default:\n                    return false;\n            } 788130"];
9252 [label="return true; 788131"];
9253 [label="var saveTerm2 = _termState; 788132"];
9254 [label="_termState |= TerminatorState.IsPossibleMemberStartOrStop; 788133"];
9255 [label="_termState 788134"];
9256 [label="keyword.Kind 788135"];
9257 [label="var member = this.ParseMemberDeclaration(keyword.Kind); 788136"];
9258 [label="this.ParseMemberDeclaration(keyword.Kind) 788137"];
9259 [label="param ParseMemberDeclaration(SyntaxKind parentKind) 788138"];
9260 [label="StackGuard.EnsureSufficientExecutionStack(_recursionDepth); 788139"];
9261 [label="var result = ParseMemberDeclarationCore(parentKind); 788140"];
9262 [label="this.IsPossibleAttributeDeclaration() 788141"];
9263 [label="param IsPossibleAttributeDeclaration(this) 788142"];
9264 [label="this.CurrentToken 788143"];
9265 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788144"];
9266 [label="return this.CurrentToken.Kind == SyntaxKind.OpenBracketToken; 788145"];
9267 [label="this.CurrentToken.Kind 788146"];
9268 [label="get { return (SyntaxKind)this.RawKind; } 788147"];
9269 [label="while (this.IsPossibleAttributeDeclaration())\n                {\n                    attributes.Add(this.ParseAttributeDeclaration());\n                } 788148"];
9270 [label="param ParseModifiers(bool forAccessors) 788149"];
9271 [label="if (newMod == DeclarationModifiers.None)\n                {\n                    break;\n                } 788150"];
9272 [label="return false; 788151"];
9273 [label="param ParseReturnType(this) 788152"];
9274 [label="var saveTerm = _termState; 788153"];
9275 [label="_termState |= TerminatorState.IsEndOfReturnType; 788154"];
9276 [label="_termState 788155"];
9277 [label="this.ParseTypeOrVoid() 788156"];
9278 [label="param ParseTypeOrVoid(this) 788157"];
9279 [label="this.CurrentToken 788158"];
9280 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788159"];
9281 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788160"];
9282 [label="if (this.CurrentToken.Kind == SyntaxKind.VoidKeyword && this.PeekToken(1).Kind != SyntaxKind.AsteriskToken)\n            {\n                // Must be 'void' type, so create such a type node and return it.\n                return _syntaxFactory.PredefinedType(this.EatToken());\n            } 788161"];
9283 [label="this.CurrentToken.Kind 788162"];
9284 [label="get { return (SyntaxKind)this.RawKind; } 788163"];
9285 [label="return this.ParseType(); 788164"];
9286 [label="this.ParseType() 788165"];
9287 [label="param ParseType(ParseTypeMode mode = ParseTypeMode.Normal) 788166"];
9288 [label="param ParseType(this) 788167"];
9289 [label="this.CurrentToken 788168"];
9290 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788169"];
9291 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788170"];
9292 [label="if (this.CurrentToken.Kind == SyntaxKind.RefKeyword)\n            {\n                var refKeyword = this.EatToken();\n                refKeyword = this.CheckFeatureAvailability(refKeyword, MessageID.IDS_FeatureRefLocalsReturns);\n\n                SyntaxToken readonlyKeyword = null;\n                if (this.CurrentToken.Kind == SyntaxKind.ReadOnlyKeyword)\n                {\n                    readonlyKeyword = this.EatToken();\n                    readonlyKeyword = this.CheckFeatureAvailability(readonlyKeyword, MessageID.IDS_FeatureReadOnlyReferences);\n                }\n\n                var type = ParseTypeCore(ParseTypeMode.AfterRef);\n                return _syntaxFactory.RefType(refKeyword, readonlyKeyword, type);\n            } 788171"];
9293 [label="this.CurrentToken.Kind 788172"];
9294 [label="get { return (SyntaxKind)this.RawKind; } 788173"];
9295 [label="return ParseTypeCore(mode); 788174"];
9296 [label="return ParseTypeCore(mode); 788175"];
9297 [label="return ParseTypeCore(mode); 788176"];
9298 [label="param ParseUnderlyingType(ParseTypeMode mode) 788177"];
9299 [label="param ParseUnderlyingType(NameOptions options = NameOptions.None) 788178"];
9300 [label="param ParseUnderlyingType(this) 788179"];
9301 [label="this.CurrentToken 788180"];
9302 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788181"];
9303 [label="if (IsPredefinedType(this.CurrentToken.Kind))\n            {\n                // This is a predefined type\n                var token = this.EatToken();\n                if (token.Kind == SyntaxKind.VoidKeyword && this.CurrentToken.Kind != SyntaxKind.AsteriskToken)\n                {\n                    token = this.AddError(token, mode == ParseTypeMode.Parameter ? ErrorCode.ERR_NoVoidParameter : ErrorCode.ERR_NoVoidHere);\n                }\n\n                return _syntaxFactory.PredefinedType(token);\n            } 788182"];
9304 [label="this.CurrentToken.Kind 788183"];
9305 [label="get { return (SyntaxKind)this.RawKind; } 788184"];
9306 [label="IsPredefinedType(this.CurrentToken.Kind) 788185"];
9307 [label="param IsPredefinedType(SyntaxKind keyword) 788186"];
9308 [label="return SyntaxFacts.IsPredefinedType(keyword); 788187"];
9309 [label="SyntaxFacts.IsPredefinedType(keyword) 788188"];
9310 [label="param IsPredefinedType(SyntaxKind kind) 788189"];
9311 [label="switch (kind)\n            {\n                case SyntaxKind.BoolKeyword:\n                case SyntaxKind.ByteKeyword:\n                case SyntaxKind.SByteKeyword:\n                case SyntaxKind.IntKeyword:\n                case SyntaxKind.UIntKeyword:\n                case SyntaxKind.ShortKeyword:\n                case SyntaxKind.UShortKeyword:\n                case SyntaxKind.LongKeyword:\n                case SyntaxKind.ULongKeyword:\n                case SyntaxKind.FloatKeyword:\n                case SyntaxKind.DoubleKeyword:\n                case SyntaxKind.DecimalKeyword:\n                case SyntaxKind.StringKeyword:\n                case SyntaxKind.CharKeyword:\n                case SyntaxKind.ObjectKeyword:\n                case SyntaxKind.VoidKeyword:\n                    return true;\n                default:\n                    return false;\n            } 788190"];
9312 [label="return true; 788191"];
9313 [label="this.EatToken() 788192"];
9314 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788193"];
9315 [label="MoveToNextToken(); 788194"];
9316 [label="var token = this.EatToken(); 788195"];
9317 [label="token.Kind 788196"];
9318 [label="get { return (SyntaxKind)this.RawKind; } 788197"];
9319 [label="if (token.Kind == SyntaxKind.VoidKeyword && this.CurrentToken.Kind != SyntaxKind.AsteriskToken)\n                {\n                    token = this.AddError(token, mode == ParseTypeMode.Parameter ? ErrorCode.ERR_NoVoidParameter : ErrorCode.ERR_NoVoidHere);\n                } 788198"];
9320 [label="return _syntaxFactory.PredefinedType(token); 788199"];
9321 [label="return _syntaxFactory.PredefinedType(token); 788200"];
9322 [label="param TryGetNode(int kind) 788201"];
9323 [label="param TryGetNode(GreenNode child1) 788202"];
9324 [label="param TryGetNode(SyntaxFactoryContext context) 788203"];
9325 [label="param TryGetNode(out int hash) 788204"];
9326 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788205"];
9327 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788206"];
9328 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788207"];
9329 [label="GetNodeFlags(context) 788208"];
9330 [label="param GetNodeFlags(SyntaxFactoryContext context) 788209"];
9331 [label="var flags = SyntaxNodeCache.GetDefaultNodeFlags(); 788210"];
9332 [label="if (context.IsInAsync)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInAsync;\n            } 788211"];
9333 [label="if (context.IsInQuery)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInQuery;\n            } 788212"];
9334 [label="return flags; 788213"];
9335 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788214"];
9336 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788215"];
9337 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788216"];
9338 [label="param SetFactoryContext(SyntaxFactoryContext context) 788217"];
9339 [label="param SetFactoryContext(this) 788218"];
9340 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788219"];
9341 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788220"];
9342 [label="param IsMakingProgress(ref int lastTokenPosition) 788221"];
9343 [label="param IsMakingProgress(bool assertIfFalse = true) 788222"];
9344 [label="param IsMakingProgress(this) 788223"];
9345 [label="CurrentTokenPosition 788224"];
9346 [label="=> _firstToken + _tokenOffset 788225"];
9347 [label="_firstToken + _tokenOffset 788226"];
9348 [label="var pos = CurrentTokenPosition; 788227"];
9349 [label="if (pos > lastTokenPosition)\n            {\n                lastTokenPosition = pos;\n                return true;\n            } 788228"];
9350 [label="lastTokenPosition = pos; 788229"];
9351 [label="return true; 788230"];
9352 [label="return ParseTypeCore(mode); 788231"];
9353 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788232"];
9354 [label="param PeekToken(int n) 788233"];
9355 [label="param PeekToken(this) 788234"];
9356 [label="Debug.Assert(n >= 0); 788235"];
9357 [label="Debug.Assert(n >= 0); 788236"];
9358 [label="while (_tokenOffset + n >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788237"];
9359 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset + n].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset + n];\n            } 788238"];
9360 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset + n].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset + n];\n            } 788239"];
9361 [label="return _lexedTokens[_tokenOffset + n]; 788240"];
9362 [label="param EatNullableQualifierIfApplicable(ParseTypeMode mode) 788241"];
9363 [label="param EatNullableQualifierIfApplicable(this) 788242"];
9364 [label="this.CurrentToken 788243"];
9365 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788244"];
9366 [label="Debug.Assert(this.CurrentToken.Kind == SyntaxKind.QuestionToken); 788245"];
9367 [label="this.CurrentToken.Kind 788246"];
9368 [label="get { return (SyntaxKind)this.RawKind; } 788247"];
9369 [label="this.GetResetPoint() 788248"];
9370 [label="param GetResetPoint(this) 788249"];
9371 [label="base.GetResetPoint() 788250"];
9372 [label="param GetResetPoint(this) 788251"];
9373 [label="CurrentTokenPosition 788252"];
9374 [label="=> _firstToken + _tokenOffset 788253"];
9375 [label="var pos = CurrentTokenPosition; 788254"];
9376 [label="if (_resetCount == 0)\n            {\n                _resetStart = pos; // low water mark\n            } 788255"];
9377 [label="if (_resetCount == 0)\n            {\n                _resetStart = pos; // low water mark\n            } 788256"];
9378 [label="_resetStart 788257"];
9379 [label="_resetCount 788258"];
9380 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788259"];
9381 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788260"];
9382 [label="return new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth); 788261"];
9383 [label="return new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth); 788262"];
9384 [label="return new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth); 788263"];
9385 [label="new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth) 788264"];
9386 [label="param ResetPoint(SyntaxParser.ResetPoint resetPoint) 788265"];
9387 [label="param ResetPoint(TerminatorState terminatorState) 788266"];
9388 [label="param ResetPoint(bool isInTry) 788267"];
9389 [label="param ResetPoint(bool isInAsync) 788268"];
9390 [label="param ResetPoint(int queryDepth) 788269"];
9391 [label="param ResetPoint(this) 788270"];
9392 [label="this.BaseResetPoint 788271"];
9393 [label="this.TerminatorState 788272"];
9394 [label="this.IsInTry 788273"];
9395 [label="this.IsInAsync 788274"];
9396 [label="this.QueryDepth 788275"];
9397 [label="var resetPoint = this.GetResetPoint(); 788276"];
9398 [label="this.EatToken() 788277"];
9399 [label="param EatToken(this) 788278"];
9400 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788279"];
9401 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788280"];
9402 [label="MoveToNextToken(); 788281"];
9403 [label="var questionToken = this.EatToken(); 788282"];
9404 [label="if (!canFollowNullableType(mode))\n                {\n                    // Restore current token index\n                    this.Reset(ref resetPoint);\n                    return null;\n                } 788283"];
9405 [label="canFollowNullableType(mode) 788284"];
9406 [label="bool canFollowNullableType(ParseTypeMode lMode)\n                {\n                    switch (lMode)\n                    {\n                        case ParseTypeMode.AfterIs:\n                        case ParseTypeMode.DefinitePattern:\n                        case ParseTypeMode.AsExpression:\n                            // These contexts might be a type that is at the end of an expression.\n                            // In these contexts we only permit the nullable qualifier if it is followed\n                            // by a token that could not start an expression, because for backward\n                            // compatibility we want to consider a `?` token as part of the `?:`\n                            // operator if possible.\n                            return !CanStartExpression();\n                        case ParseTypeMode.NewExpression:\n                            // A nullable qualifier is permitted as part of the type in a `new` expression.\n                            // e.g. `new int?()` is allowed.  It creates a null value of type `Nullable<int>`.\n                            // Similarly `new int? {}` is allowed.\n                            return\n                                this.CurrentToken.Kind == SyntaxKind.OpenParenToken ||   // ctor parameters\n                                this.CurrentToken.Kind == SyntaxKind.OpenBracketToken ||   // array type\n                                this.CurrentToken.Kind == SyntaxKind.OpenBraceToken;   // object initializer\n                        default:\n                            return true;\n                    }\n                } 788285"];
9407 [label="bool canFollowNullableType(ParseTypeMode lMode)\n                {\n                    switch (lMode)\n                    {\n                        case ParseTypeMode.AfterIs:\n                        case ParseTypeMode.DefinitePattern:\n                        case ParseTypeMode.AsExpression:\n                            // These contexts might be a type that is at the end of an expression.\n                            // In these contexts we only permit the nullable qualifier if it is followed\n                            // by a token that could not start an expression, because for backward\n                            // compatibility we want to consider a `?` token as part of the `?:`\n                            // operator if possible.\n                            return !CanStartExpression();\n                        case ParseTypeMode.NewExpression:\n                            // A nullable qualifier is permitted as part of the type in a `new` expression.\n                            // e.g. `new int?()` is allowed.  It creates a null value of type `Nullable<int>`.\n                            // Similarly `new int? {}` is allowed.\n                            return\n                                this.CurrentToken.Kind == SyntaxKind.OpenParenToken ||   // ctor parameters\n                                this.CurrentToken.Kind == SyntaxKind.OpenBracketToken ||   // array type\n                                this.CurrentToken.Kind == SyntaxKind.OpenBraceToken;   // object initializer\n                        default:\n                            return true;\n                    }\n                } 788286"];
9408 [label="switch (lMode)\n                    {\n                        case ParseTypeMode.AfterIs:\n                        case ParseTypeMode.DefinitePattern:\n                        case ParseTypeMode.AsExpression:\n                            // These contexts might be a type that is at the end of an expression.\n                            // In these contexts we only permit the nullable qualifier if it is followed\n                            // by a token that could not start an expression, because for backward\n                            // compatibility we want to consider a `?` token as part of the `?:`\n                            // operator if possible.\n                            return !CanStartExpression();\n                        case ParseTypeMode.NewExpression:\n                            // A nullable qualifier is permitted as part of the type in a `new` expression.\n                            // e.g. `new int?()` is allowed.  It creates a null value of type `Nullable<int>`.\n                            // Similarly `new int? {}` is allowed.\n                            return\n                                this.CurrentToken.Kind == SyntaxKind.OpenParenToken ||   // ctor parameters\n                                this.CurrentToken.Kind == SyntaxKind.OpenBracketToken ||   // array type\n                                this.CurrentToken.Kind == SyntaxKind.OpenBraceToken;   // object initializer\n                        default:\n                            return true;\n                    } 788287"];
9409 [label="return true; 788288"];
9410 [label="return CheckFeatureAvailability(questionToken, MessageID.IDS_FeatureNullable); 788289"];
9411 [label="return CheckFeatureAvailability(questionToken, MessageID.IDS_FeatureNullable); 788290"];
9412 [label="return CheckFeatureAvailability(questionToken, MessageID.IDS_FeatureNullable); 788291"];
9413 [label="CheckFeatureAvailability(questionToken, MessageID.IDS_FeatureNullable) 788292"];
9414 [label="param CheckFeatureAvailability(TNode node) 788293"];
9415 [label="param CheckFeatureAvailability(MessageID feature) 788294"];
9416 [label="param CheckFeatureAvailability(bool forceWarning = false) 788295"];
9417 [label="param CheckFeatureAvailability(this) 788296"];
9418 [label="this.Options 788297"];
9419 [label="get { return this.lexer.Options; } 788298"];
9420 [label="this.lexer.Options 788299"];
9421 [label="get { return _options; } 788300"];
9422 [label="return _options; 788301"];
9423 [label="return this.lexer.Options; 788302"];
9424 [label="LanguageVersion availableVersion = this.Options.LanguageVersion; 788303"];
9425 [label="LanguageVersion requiredVersion = feature.RequiredVersion(); 788304"];
9426 [label="feature.RequiredVersion() 788305"];
9427 [label="param RequiredVersion(this MessageID feature) 788306"];
9428 [label="Debug.Assert(RequiredFeature(feature) == null); 788307"];
9429 [label="RequiredFeature(feature) 788308"];
9430 [label="param RequiredFeature(this MessageID feature) 788309"];
9431 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 788310"];
9432 [label="return null; 788311"];
9433 [label="Debug.Assert(RequiredFeature(feature) == null); 788312"];
9434 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 788313"];
9435 [label="return LanguageVersion.CSharp2; 788314"];
9436 [label="switch (feature)\n            {\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return availableVersion >= LanguageVersion.CSharp2\n                        ? node\n                        : this.AddError(node, ErrorCode.WRN_NonECMAFeature, feature.Localize());\n\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                    return availableVersion >= requiredVersion\n                        ? node\n                        : this.AddError(node, ErrorCode.ERR_AltInterpolatedVerbatimStringsNotAvailable,\n                            new CSharpRequiredLanguageVersion(requiredVersion));\n            } 788315"];
9437 [label="var info = feature.GetFeatureAvailabilityDiagnosticInfo(this.Options); 788316"];
9438 [label="this.Options 788317"];
9439 [label="get { return this.lexer.Options; } 788318"];
9440 [label="this.lexer.Options 788319"];
9441 [label="get { return _options; } 788320"];
9442 [label="return _options; 788321"];
9443 [label="return this.lexer.Options; 788322"];
9444 [label="var info = feature.GetFeatureAvailabilityDiagnosticInfo(this.Options); 788323"];
9445 [label="feature.GetFeatureAvailabilityDiagnosticInfo(this.Options) 788324"];
9446 [label="param GetFeatureAvailabilityDiagnosticInfo(this MessageID feature) 788325"];
9447 [label="param GetFeatureAvailabilityDiagnosticInfo(CSharpParseOptions options) 788326"];
9448 [label="feature 788327"];
9449 [label="options.IsFeatureEnabled(feature) 788328"];
9450 [label="param IsFeatureEnabled(MessageID feature) 788329"];
9451 [label="param IsFeatureEnabled(this) 788330"];
9452 [label="string? featureFlag = feature.RequiredFeature(); 788331"];
9453 [label="feature.RequiredFeature() 788332"];
9454 [label="param RequiredFeature(this MessageID feature) 788333"];
9455 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 788334"];
9456 [label="return null; 788335"];
9457 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 788336"];
9458 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 788337"];
9459 [label="LanguageVersion availableVersion = LanguageVersion; 788338"];
9460 [label="LanguageVersion requiredVersion = feature.RequiredVersion(); 788339"];
9461 [label="feature.RequiredVersion() 788340"];
9462 [label="param RequiredVersion(this MessageID feature) 788341"];
9463 [label="Debug.Assert(RequiredFeature(feature) == null); 788342"];
9464 [label="RequiredFeature(feature) 788343"];
9465 [label="param RequiredFeature(this MessageID feature) 788344"];
9466 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 788345"];
9467 [label="return null; 788346"];
9468 [label="Debug.Assert(RequiredFeature(feature) == null); 788347"];
9469 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 788348"];
9470 [label="return LanguageVersion.CSharp2; 788349"];
9471 [label="return availableVersion >= requiredVersion; 788350"];
9472 [label="null 788351"];
9473 [label="options.IsFeatureEnabled(feature) ? null : GetDisabledFeatureDiagnosticInfo(feature, options.LanguageVersion) 788352"];
9474 [label="if (info != null)\n            {\n                if (forceWarning)\n                {\n                    return AddError(node, ErrorCode.WRN_ErrorOverride, info, (int)info.Code);\n                }\n\n                return AddError(node, info.Code, info.Arguments);\n            } 788353"];
9475 [label="if (info != null)\n            {\n                if (forceWarning)\n                {\n                    return AddError(node, ErrorCode.WRN_ErrorOverride, info, (int)info.Code);\n                }\n\n                return AddError(node, info.Code, info.Arguments);\n            } 788354"];
9476 [label="return node; 788355"];
9477 [label="this.Release(ref resetPoint); 788356"];
9478 [label="this.Release(ref resetPoint) 788357"];
9479 [label="param Release(ref ResetPoint state) 788358"];
9480 [label="param Release(this) 788359"];
9481 [label="base.Release(ref state.BaseResetPoint); 788360"];
9482 [label="base.Release(ref state.BaseResetPoint) 788361"];
9483 [label="param Release(ref ResetPoint point) 788362"];
9484 [label="param Release(this) 788363"];
9485 [label="Debug.Assert(_resetCount == point.ResetCount); 788364"];
9486 [label="_resetCount 788365"];
9487 [label="if (_resetCount == 0)\n            {\n                _resetStart = -1;\n            } 788366"];
9488 [label="if (_resetCount == 0)\n            {\n                _resetStart = -1;\n            } 788367"];
9489 [label="_resetStart = -1; 788368"];
9490 [label="_resetStart 788369"];
9491 [label="base.Release(ref state.BaseResetPoint); 788370"];
9492 [label="this.Release(ref resetPoint); 788371"];
9493 [label="param TryGetNode(int kind) 788372"];
9494 [label="param TryGetNode(GreenNode child1) 788373"];
9495 [label="param TryGetNode(GreenNode child2) 788374"];
9496 [label="param TryGetNode(SyntaxFactoryContext context) 788375"];
9497 [label="param TryGetNode(out int hash) 788376"];
9498 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788377"];
9499 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788378"];
9500 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788379"];
9501 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788380"];
9502 [label="GetNodeFlags(context) 788381"];
9503 [label="param GetNodeFlags(SyntaxFactoryContext context) 788382"];
9504 [label="var flags = SyntaxNodeCache.GetDefaultNodeFlags(); 788383"];
9505 [label="if (context.IsInAsync)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInAsync;\n            } 788384"];
9506 [label="if (context.IsInQuery)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInQuery;\n            } 788385"];
9507 [label="return flags; 788386"];
9508 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788387"];
9509 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788388"];
9510 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788389"];
9511 [label="param SetFactoryContext(SyntaxFactoryContext context) 788390"];
9512 [label="param SetFactoryContext(this) 788391"];
9513 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788392"];
9514 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788393"];
9515 [label="param IsMakingProgress(bool assertIfFalse = true) 788394"];
9516 [label="return true; 788395"];
9517 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788396"];
9518 [label="return ParseTypeCore(mode); 788397"];
9519 [label="var type = this.ParseTypeOrVoid(); 788398"];
9520 [label="_termState 788399"];
9521 [label="return type; 788400"];
9522 [label="var result = ParseMemberDeclarationCore(parentKind); 788401"];
9523 [label="param GetResetPoint(this) 788402"];
9524 [label="base.GetResetPoint() 788403"];
9525 [label="param GetResetPoint(this) 788404"];
9526 [label="CurrentTokenPosition 788405"];
9527 [label="=> _firstToken + _tokenOffset 788406"];
9528 [label="_firstToken + _tokenOffset 788407"];
9529 [label="var pos = CurrentTokenPosition; 788408"];
9530 [label="if (_resetCount == 0)\n            {\n                _resetStart = pos; // low water mark\n            } 788409"];
9531 [label="if (_resetCount == 0)\n            {\n                _resetStart = pos; // low water mark\n            } 788410"];
9532 [label="_resetStart 788411"];
9533 [label="_resetCount 788412"];
9534 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788413"];
9535 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788414"];
9536 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788415"];
9537 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788416"];
9538 [label="return new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth); 788417"];
9539 [label="return new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth); 788418"];
9540 [label="return new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth); 788419"];
9541 [label="new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth) 788420"];
9542 [label="param ResetPoint(SyntaxParser.ResetPoint resetPoint) 788421"];
9543 [label="param ResetPoint(TerminatorState terminatorState) 788422"];
9544 [label="param ResetPoint(bool isInTry) 788423"];
9545 [label="param ResetPoint(bool isInAsync) 788424"];
9546 [label="param ResetPoint(int queryDepth) 788425"];
9547 [label="param ResetPoint(this) 788426"];
9548 [label="this.BaseResetPoint 788427"];
9549 [label="this.TerminatorState 788428"];
9550 [label="this.IsInTry 788429"];
9551 [label="this.IsInAsync 788430"];
9552 [label="this.QueryDepth 788431"];
9553 [label="var result = ParseMemberDeclarationCore(parentKind); 788432"];
9554 [label="param IsMisplacedModifier(SyntaxListBuilder modifiers) 788433"];
9555 [label="param IsMisplacedModifier(SyntaxList<AttributeListSyntax> attributes) 788434"];
9556 [label="param IsMisplacedModifier(TypeSyntax type) 788435"];
9557 [label="param IsMisplacedModifier(out MemberDeclarationSyntax result) 788436"];
9558 [label="param IsMisplacedModifier(this) 788437"];
9559 [label="this.CurrentToken 788438"];
9560 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788439"];
9561 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788440"];
9562 [label="if (GetModifier(this.CurrentToken) != DeclarationModifiers.None &&\n                this.CurrentToken.ContextualKind != SyntaxKind.PartialKeyword &&\n                this.CurrentToken.ContextualKind != SyntaxKind.AsyncKeyword &&\n                this.CurrentToken.ContextualKind != SyntaxKind.DataKeyword &&\n                IsComplete(type))\n            {\n                var misplacedModifier = this.CurrentToken;\n                type = this.AddError(\n                    type,\n                    type.FullWidth + misplacedModifier.GetLeadingTriviaWidth(),\n                    misplacedModifier.Width,\n                    ErrorCode.ERR_BadModifierLocation,\n                    misplacedModifier.Text);\n\n                result = _syntaxFactory.IncompleteMember(attributes, modifiers.ToList(), type);\n                return true;\n            } 788441"];
9563 [label="GetModifier(this.CurrentToken) 788442"];
9564 [label="param GetModifier(SyntaxToken token) 788443"];
9565 [label="result = null; 788444"];
9566 [label="return false; 788445"];
9567 [label="var result = ParseMemberDeclarationCore(parentKind); 788446"];
9568 [label="param IsOperatorKeyword(this) 788447"];
9569 [label="this.CurrentToken 788448"];
9570 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788449"];
9571 [label="return\n                this.CurrentToken.Kind == SyntaxKind.ImplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.ExplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.OperatorKeyword; 788450"];
9572 [label="this.CurrentToken.Kind 788451"];
9573 [label="get { return (SyntaxKind)this.RawKind; } 788452"];
9574 [label="this.CurrentToken 788453"];
9575 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788454"];
9576 [label="return\n                this.CurrentToken.Kind == SyntaxKind.ImplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.ExplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.OperatorKeyword; 788455"];
9577 [label="this.CurrentToken.Kind 788456"];
9578 [label="get { return (SyntaxKind)this.RawKind; } 788457"];
9579 [label="return\n                this.CurrentToken.Kind == SyntaxKind.ImplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.ExplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.OperatorKeyword; 788458"];
9580 [label="this.CurrentToken 788459"];
9581 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788460"];
9582 [label="return\n                this.CurrentToken.Kind == SyntaxKind.ImplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.ExplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.OperatorKeyword; 788461"];
9583 [label="this.CurrentToken.Kind 788462"];
9584 [label="get { return (SyntaxKind)this.RawKind; } 788463"];
9585 [label="return\n                this.CurrentToken.Kind == SyntaxKind.ImplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.ExplicitKeyword ||\n                this.CurrentToken.Kind == SyntaxKind.OperatorKeyword; 788464"];
9586 [label="param IsFieldDeclaration(bool isEvent) 788465"];
9587 [label="param IsFieldDeclaration(this) 788466"];
9588 [label="this.CurrentToken 788467"];
9589 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788468"];
9590 [label="if (this.CurrentToken.Kind != SyntaxKind.IdentifierToken)\n            {\n                return false;\n            } 788469"];
9591 [label="this.CurrentToken.Kind 788470"];
9592 [label="get { return (SyntaxKind)this.RawKind; } 788471"];
9593 [label="var kind = this.PeekToken(1).Kind; 788472"];
9594 [label="this.PeekToken(1) 788473"];
9595 [label="param PeekToken(int n) 788474"];
9596 [label="param PeekToken(this) 788475"];
9597 [label="Debug.Assert(n >= 0); 788476"];
9598 [label="Debug.Assert(n >= 0); 788477"];
9599 [label="while (_tokenOffset + n >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788478"];
9600 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset + n].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset + n];\n            } 788479"];
9601 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset + n].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset + n];\n            } 788480"];
9602 [label="return _lexedTokens[_tokenOffset + n]; 788481"];
9603 [label="this.PeekToken(1).Kind 788482"];
9604 [label="get { return (SyntaxKind)this.RawKind; } 788483"];
9605 [label="switch (kind)\n            {\n                case SyntaxKind.DotToken:                   // Goo.     explicit\n                case SyntaxKind.ColonColonToken:            // Goo::    explicit\n                case SyntaxKind.LessThanToken:            // Goo<     explicit or generic method\n                case SyntaxKind.OpenBraceToken:        // Goo {    property\n                case SyntaxKind.EqualsGreaterThanToken:     // Goo =>   property\n                    return false;\n                case SyntaxKind.OpenParenToken:             // Goo(     method\n                    return isEvent;\n                default:\n                    return true;\n            } 788484"];
9606 [label="return true; 788485"];
9607 [label="param ParseNormalFieldDeclaration(SyntaxList<AttributeListSyntax> attributes) 788486"];
9608 [label="param ParseNormalFieldDeclaration(SyntaxListBuilder modifiers) 788487"];
9609 [label="param ParseNormalFieldDeclaration(TypeSyntax type) 788488"];
9610 [label="param ParseNormalFieldDeclaration(SyntaxKind parentKind) 788489"];
9611 [label="param ParseNormalFieldDeclaration(this) 788490"];
9612 [label="var saveTerm = _termState; 788491"];
9613 [label="_termState |= TerminatorState.IsEndOfFieldDeclaration; 788492"];
9614 [label="_termState 788493"];
9615 [label="var variables = _pool.AllocateSeparated<VariableDeclaratorSyntax>(); 788494"];
9616 [label="this.ParseVariableDeclarators(type, flags: 0, variables: variables, parentKind: parentKind); 788495"];
9617 [label="this.ParseVariableDeclarators(type, flags: 0, variables: variables, parentKind: parentKind); 788496"];
9618 [label="this.ParseVariableDeclarators(type, flags: 0, variables: variables, parentKind: parentKind); 788497"];
9619 [label="this.ParseVariableDeclarators(type, flags: 0, variables: variables, parentKind: parentKind); 788498"];
9620 [label="this.ParseVariableDeclarators(type, flags: 0, variables: variables, parentKind: parentKind) 788499"];
9621 [label="param ParseVariableDeclarators(TypeSyntax type) 788500"];
9622 [label="param ParseVariableDeclarators(VariableFlags flags) 788501"];
9623 [label="param ParseVariableDeclarators(SeparatedSyntaxListBuilder<VariableDeclaratorSyntax> variables) 788502"];
9624 [label="param ParseVariableDeclarators(SyntaxKind parentKind) 788503"];
9625 [label="param ParseVariableDeclarators(this) 788504"];
9626 [label="bool variableDeclarationsExpected =\n                parentKind != SyntaxKind.NamespaceDeclaration &&\n                (parentKind != SyntaxKind.CompilationUnit || IsScript); 788505"];
9627 [label="LocalFunctionStatementSyntax localFunction; 788506"];
9628 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction); 788507"];
9629 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction); 788508"];
9630 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction); 788509"];
9631 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction); 788510"];
9632 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction); 788511"];
9633 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction); 788512"];
9634 [label="ParseVariableDeclarators(\n                type: type,\n                flags: flags,\n                variables: variables,\n                variableDeclarationsExpected: variableDeclarationsExpected,\n                allowLocalFunctions: false,\n                attributes: default,\n                mods: default,\n                localFunction: out localFunction) 788513"];
9635 [label="param ParseVariableDeclarators(TypeSyntax type) 788514"];
9636 [label="param ParseVariableDeclarators(VariableFlags flags) 788515"];
9637 [label="param ParseVariableDeclarators(SeparatedSyntaxListBuilder<VariableDeclaratorSyntax> variables) 788516"];
9638 [label="param ParseVariableDeclarators(bool variableDeclarationsExpected) 788517"];
9639 [label="param ParseVariableDeclarators(bool allowLocalFunctions) 788518"];
9640 [label="param ParseVariableDeclarators(SyntaxList<AttributeListSyntax> attributes) 788519"];
9641 [label="param ParseVariableDeclarators(SyntaxList<SyntaxToken> mods) 788520"];
9642 [label="param ParseVariableDeclarators(out LocalFunctionStatementSyntax localFunction) 788521"];
9643 [label="param ParseVariableDeclarators(this) 788522"];
9644 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788523"];
9645 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788524"];
9646 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788525"];
9647 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788526"];
9648 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788527"];
9649 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788528"];
9650 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788529"];
9651 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788530"];
9652 [label="param GetResetPoint(this) 788531"];
9653 [label="base.GetResetPoint() 788532"];
9654 [label="param GetResetPoint(this) 788533"];
9655 [label="CurrentTokenPosition 788534"];
9656 [label="=> _firstToken + _tokenOffset 788535"];
9657 [label="_firstToken + _tokenOffset 788536"];
9658 [label="var pos = CurrentTokenPosition; 788537"];
9659 [label="if (_resetCount == 0)\n            {\n                _resetStart = pos; // low water mark\n            } 788538"];
9660 [label="if (_resetCount == 0)\n            {\n                _resetStart = pos; // low water mark\n            } 788539"];
9661 [label="_resetCount 788540"];
9662 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788541"];
9663 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788542"];
9664 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788543"];
9665 [label="return new ResetPoint(_resetCount, _mode, pos, _prevTokenTrailingTrivia); 788544"];
9666 [label="new ResetPoint(\n                base.GetResetPoint(),\n                _termState,\n                _isInTry,\n                _syntaxFactoryContext.IsInAsync,\n                _syntaxFactoryContext.QueryDepth) 788545"];
9667 [label="param ResetPoint(SyntaxParser.ResetPoint resetPoint) 788546"];
9668 [label="param ResetPoint(TerminatorState terminatorState) 788547"];
9669 [label="param ResetPoint(bool isInTry) 788548"];
9670 [label="param ResetPoint(bool isInAsync) 788549"];
9671 [label="param ResetPoint(int queryDepth) 788550"];
9672 [label="param ResetPoint(this) 788551"];
9673 [label="this.BaseResetPoint 788552"];
9674 [label="this.TerminatorState 788553"];
9675 [label="this.IsInTry 788554"];
9676 [label="this.IsInAsync 788555"];
9677 [label="this.QueryDepth 788556"];
9678 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788557"];
9679 [label="param GetLastToken(this) 788558"];
9680 [label="return (SyntaxToken)this.GetLastTerminal(); 788559"];
9681 [label="get { return new SyntaxList<CSharpSyntaxNode>(this.GetTrailingTrivia()); } 788560"];
9682 [label="this.GetTrailingTrivia() 788561"];
9683 [label="param GetTrailingTrivia(this) 788562"];
9684 [label="return this.TrailingField; 788563"];
9685 [label="return new SyntaxList<CSharpSyntaxNode>(this.GetTrailingTrivia()); 788564"];
9686 [label="param Reset(ref ResetPoint state) 788565"];
9687 [label="param Reset(this) 788566"];
9688 [label="_termState 788567"];
9689 [label="_isInTry 788568"];
9690 [label="_syntaxFactoryContext.IsInAsync 788569"];
9691 [label="_syntaxFactoryContext.QueryDepth 788570"];
9692 [label="base.Reset(ref state.BaseResetPoint); 788571"];
9693 [label="base.Reset(ref state.BaseResetPoint) 788572"];
9694 [label="param Reset(ref ResetPoint point) 788573"];
9695 [label="param Reset(this) 788574"];
9696 [label="var offset = point.Position - _firstToken; 788575"];
9697 [label="Debug.Assert(offset >= 0); 788576"];
9698 [label="Debug.Assert(offset >= 0); 788577"];
9699 [label="if (offset >= _tokenCount)\n            {\n                // Re-fetch tokens to the position in the reset point\n                PeekToken(offset - _tokenOffset);\n\n                // Re-calculate new offset in case tokens got shifted to the left while we were peeking. \n                offset = point.Position - _firstToken;\n            } 788578"];
9700 [label="_mode 788579"];
9701 [label="Debug.Assert(offset >= 0 && offset < _tokenCount); 788580"];
9702 [label="Debug.Assert(offset >= 0 && offset < _tokenCount); 788581"];
9703 [label="Debug.Assert(offset >= 0 && offset < _tokenCount); 788582"];
9704 [label="_tokenOffset 788583"];
9705 [label="_currentToken = null; 788584"];
9706 [label="_currentToken 788585"];
9707 [label="_currentNode = default(BlendedNode); 788586"];
9708 [label="_currentNode 788587"];
9709 [label="_prevTokenTrailingTrivia 788588"];
9710 [label="if (_blendedTokens != null)\n            {\n                // look forward for slots not holding a token\n                for (int i = _tokenOffset; i < _tokenCount; i++)\n                {\n                    if (_blendedTokens[i].Token == null)\n                    {\n                        // forget anything after and including any slot not holding a token\n                        _tokenCount = i;\n                        if (_tokenCount == _tokenOffset)\n                        {\n                            FetchCurrentToken();\n                        }\n                        break;\n                    }\n                }\n            } 788589"];
9711 [label="if (_blendedTokens != null)\n            {\n                // look forward for slots not holding a token\n                for (int i = _tokenOffset; i < _tokenCount; i++)\n                {\n                    if (_blendedTokens[i].Token == null)\n                    {\n                        // forget anything after and including any slot not holding a token\n                        _tokenCount = i;\n                        if (_tokenCount == _tokenOffset)\n                        {\n                            FetchCurrentToken();\n                        }\n                        break;\n                    }\n                }\n            } 788590"];
9712 [label="base.Reset(ref state.BaseResetPoint); 788591"];
9713 [label="param Release(ref ResetPoint state) 788592"];
9714 [label="param Release(this) 788593"];
9715 [label="base.Release(ref state.BaseResetPoint); 788594"];
9716 [label="base.Release(ref state.BaseResetPoint) 788595"];
9717 [label="param Release(ref ResetPoint point) 788596"];
9718 [label="param Release(this) 788597"];
9719 [label="Debug.Assert(_resetCount == point.ResetCount); 788598"];
9720 [label="_resetCount 788599"];
9721 [label="if (_resetCount == 0)\n            {\n                _resetStart = -1;\n            } 788600"];
9722 [label="if (_resetCount == 0)\n            {\n                _resetStart = -1;\n            } 788601"];
9723 [label="base.Release(ref state.BaseResetPoint); 788602"];
9724 [label="param ParseIdentifierToken(ErrorCode code = ErrorCode.ERR_IdentifierExpected) 788603"];
9725 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788604"];
9726 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 788605"];
9727 [label="return _lexedTokens[_tokenOffset]; 788606"];
9728 [label="IsCurrentTokenPartialKeywordOfPartialMethodOrType() 788607"];
9729 [label="param IsCurrentTokenPartialKeywordOfPartialMethodOrType(this) 788608"];
9730 [label="this.CurrentToken 788609"];
9731 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788610"];
9732 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.PartialKeyword)\n            {\n                if (this.IsPartialType() || this.IsPartialMember())\n                {\n                    return true;\n                }\n            } 788611"];
9733 [label="this.CurrentToken.ContextualKind 788612"];
9734 [label="get\n            {\n                return this.Kind;\n            } 788613"];
9735 [label="return false; 788614"];
9736 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 788615"];
9737 [label="IsCurrentTokenQueryKeywordInQuery() 788616"];
9738 [label="param IsCurrentTokenQueryKeywordInQuery(this) 788617"];
9739 [label="this.IsInQuery 788618"];
9740 [label="get { return _syntaxFactoryContext.IsInQuery; } 788619"];
9741 [label="return _syntaxFactoryContext.IsInQuery; 788620"];
9742 [label="return this.IsInQuery && this.IsCurrentTokenQueryContextualKeyword; 788621"];
9743 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 788622"];
9744 [label="if (IsCurrentTokenPartialKeywordOfPartialMethodOrType() || IsCurrentTokenQueryKeywordInQuery())\n                {\n                    var result = CreateMissingIdentifierToken();\n                    result = this.AddError(result, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    return result;\n                } 788623"];
9745 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788624"];
9746 [label="MoveToNextToken(); 788625"];
9747 [label="this.IsInAsync 788626"];
9748 [label="if (this.IsInAsync && identifierToken.ContextualKind == SyntaxKind.AwaitKeyword)\n                {\n                    identifierToken = this.AddError(identifierToken, ErrorCode.ERR_BadAwaitAsIdentifier);\n                } 788627"];
9749 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788628"];
9750 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788629"];
9751 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788630"];
9752 [label="MoveToNextToken(); 788631"];
9753 [label="param ParseVariableInitializer(this) 788632"];
9754 [label="this.CurrentToken 788633"];
9755 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788634"];
9756 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788635"];
9757 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 788636"];
9758 [label="switch (this.CurrentToken.Kind)\n            {\n                case SyntaxKind.OpenBraceToken:\n                    return this.ParseArrayInitializer();\n                default:\n                    return this.ParseExpressionCore();\n            } 788637"];
9759 [label="this.CurrentToken.Kind 788638"];
9760 [label="get { return (SyntaxKind)this.RawKind; } 788639"];
9761 [label="this.ParseExpressionCore() 788640"];
9762 [label="param ParseExpressionCore(this) 788641"];
9763 [label="return this.ParseSubExpression(Precedence.Expression); 788642"];
9764 [label="this.ParseSubExpression(Precedence.Expression) 788643"];
9765 [label="param ParseSubExpression(Precedence precedence) 788644"];
9766 [label="param ParseSubExpression(this) 788645"];
9767 [label="_recursionDepth 788646"];
9768 [label="StackGuard.EnsureSufficientExecutionStack(_recursionDepth); 788647"];
9769 [label="var result = ParseSubExpressionCore(precedence); 788648"];
9770 [label="ParseSubExpressionCore(precedence) 788649"];
9771 [label="param ParseSubExpressionCore(Precedence precedence) 788650"];
9772 [label="param ParseSubExpressionCore(this) 788651"];
9773 [label="ExpressionSyntax leftOperand; 788652"];
9774 [label="Precedence newPrecedence = 0; 788653"];
9775 [label="this.CurrentToken 788654"];
9776 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788655"];
9777 [label="var tk = this.CurrentToken.Kind; 788656"];
9778 [label="this.CurrentToken.Kind 788657"];
9779 [label="get { return (SyntaxKind)this.RawKind; } 788658"];
9780 [label="if (IsInvalidSubExpression(tk))\n            {\n                return this.AddError(this.CreateMissingIdentifierName(), ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            } 788659"];
9781 [label="IsInvalidSubExpression(tk) 788660"];
9782 [label="param IsInvalidSubExpression(SyntaxKind kind) 788661"];
9783 [label="switch (kind)\n            {\n                case SyntaxKind.BreakKeyword:\n                case SyntaxKind.CaseKeyword:\n                case SyntaxKind.CatchKeyword:\n                case SyntaxKind.ConstKeyword:\n                case SyntaxKind.ContinueKeyword:\n                case SyntaxKind.DoKeyword:\n                case SyntaxKind.FinallyKeyword:\n                case SyntaxKind.ForKeyword:\n                case SyntaxKind.ForEachKeyword:\n                case SyntaxKind.GotoKeyword:\n                case SyntaxKind.IfKeyword:\n                case SyntaxKind.ElseKeyword:\n                case SyntaxKind.LockKeyword:\n                case SyntaxKind.ReturnKeyword:\n                case SyntaxKind.SwitchKeyword:\n                case SyntaxKind.TryKeyword:\n                case SyntaxKind.UsingKeyword:\n                case SyntaxKind.WhileKeyword:\n                    return true;\n                default:\n                    return false;\n            } 788662"];
9784 [label="return false; 788663"];
9785 [label="if (IsExpectedPrefixUnaryOperator(tk))\n            {\n                var opKind = SyntaxFacts.GetPrefixUnaryExpression(tk);\n                newPrecedence = GetPrecedence(opKind);\n                var opToken = this.EatToken();\n                var operand = this.ParseSubExpression(newPrecedence);\n                leftOperand = _syntaxFactory.PrefixUnaryExpression(opKind, opToken, operand);\n            }\n            else if (tk == SyntaxKind.DotDotToken)\n            {\n                // Operator '..' here can either be a prefix unary operator or a stand alone empty range:\n                var opToken = this.EatToken();\n                newPrecedence = GetPrecedence(SyntaxKind.RangeExpression);\n\n                ExpressionSyntax rightOperand;\n                if (CanStartExpression())\n                {\n                    rightOperand = this.ParseSubExpression(newPrecedence);\n                }\n                else\n                {\n                    rightOperand = null;\n                }\n\n                leftOperand = _syntaxFactory.RangeExpression(leftOperand: null, opToken, rightOperand);\n            }\n            else if (IsAwaitExpression())\n            {\n                newPrecedence = GetPrecedence(SyntaxKind.AwaitExpression);\n                var awaitToken = this.EatContextualToken(SyntaxKind.AwaitKeyword);\n                awaitToken = CheckFeatureAvailability(awaitToken, MessageID.IDS_FeatureAsync);\n                var operand = this.ParseSubExpression(newPrecedence);\n                leftOperand = _syntaxFactory.AwaitExpression(awaitToken, operand);\n            }\n            else if (this.IsQueryExpression(mayBeVariableDeclaration: false, mayBeMemberDeclaration: false))\n            {\n                leftOperand = this.ParseQueryExpression(precedence);\n            }\n            else if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword && IsInQuery)\n            {\n                // If this 'from' token wasn't the start of a query then it's not really an expression.\n                // Consume it so that we don't try to parse it again as the next argument in an\n                // argument list.\n                SyntaxToken skipped = this.EatToken(); // consume but skip 'from'\n                skipped = this.AddError(skipped, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                leftOperand = AddTrailingSkippedSyntax(this.CreateMissingIdentifierName(), skipped);\n            }\n            else if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788664"];
9786 [label="IsExpectedPrefixUnaryOperator(tk) 788665"];
9787 [label="param IsExpectedPrefixUnaryOperator(SyntaxKind kind) 788666"];
9788 [label="return SyntaxFacts.IsPrefixUnaryExpression(kind) && kind != SyntaxKind.RefKeyword && kind != SyntaxKind.OutKeyword; 788667"];
9789 [label="SyntaxFacts.IsPrefixUnaryExpression(kind) 788668"];
9790 [label="param IsPrefixUnaryExpression(SyntaxKind token) 788669"];
9791 [label="return GetPrefixUnaryExpression(token) != SyntaxKind.None; 788670"];
9792 [label="GetPrefixUnaryExpression(token) 788671"];
9793 [label="param GetPrefixUnaryExpression(SyntaxKind token) 788672"];
9794 [label="switch (token)\n            {\n                case SyntaxKind.PlusToken:\n                    return SyntaxKind.UnaryPlusExpression;\n                case SyntaxKind.MinusToken:\n                    return SyntaxKind.UnaryMinusExpression;\n                case SyntaxKind.TildeToken:\n                    return SyntaxKind.BitwiseNotExpression;\n                case SyntaxKind.ExclamationToken:\n                    return SyntaxKind.LogicalNotExpression;\n                case SyntaxKind.PlusPlusToken:\n                    return SyntaxKind.PreIncrementExpression;\n                case SyntaxKind.MinusMinusToken:\n                    return SyntaxKind.PreDecrementExpression;\n                case SyntaxKind.AmpersandToken:\n                    return SyntaxKind.AddressOfExpression;\n                case SyntaxKind.AsteriskToken:\n                    return SyntaxKind.PointerIndirectionExpression;\n                case SyntaxKind.CaretToken:\n                    return SyntaxKind.IndexExpression;\n                default:\n                    return SyntaxKind.None;\n            } 788673"];
9795 [label="return SyntaxKind.None; 788674"];
9796 [label="if (tk == SyntaxKind.DotDotToken)\n            {\n                // Operator '..' here can either be a prefix unary operator or a stand alone empty range:\n                var opToken = this.EatToken();\n                newPrecedence = GetPrecedence(SyntaxKind.RangeExpression);\n\n                ExpressionSyntax rightOperand;\n                if (CanStartExpression())\n                {\n                    rightOperand = this.ParseSubExpression(newPrecedence);\n                }\n                else\n                {\n                    rightOperand = null;\n                }\n\n                leftOperand = _syntaxFactory.RangeExpression(leftOperand: null, opToken, rightOperand);\n            }\n            else if (IsAwaitExpression())\n            {\n                newPrecedence = GetPrecedence(SyntaxKind.AwaitExpression);\n                var awaitToken = this.EatContextualToken(SyntaxKind.AwaitKeyword);\n                awaitToken = CheckFeatureAvailability(awaitToken, MessageID.IDS_FeatureAsync);\n                var operand = this.ParseSubExpression(newPrecedence);\n                leftOperand = _syntaxFactory.AwaitExpression(awaitToken, operand);\n            }\n            else if (this.IsQueryExpression(mayBeVariableDeclaration: false, mayBeMemberDeclaration: false))\n            {\n                leftOperand = this.ParseQueryExpression(precedence);\n            }\n            else if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword && IsInQuery)\n            {\n                // If this 'from' token wasn't the start of a query then it's not really an expression.\n                // Consume it so that we don't try to parse it again as the next argument in an\n                // argument list.\n                SyntaxToken skipped = this.EatToken(); // consume but skip 'from'\n                skipped = this.AddError(skipped, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                leftOperand = AddTrailingSkippedSyntax(this.CreateMissingIdentifierName(), skipped);\n            }\n            else if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788675"];
9797 [label="IsAwaitExpression() 788676"];
9798 [label="param IsAwaitExpression(this) 788677"];
9799 [label="this.CurrentToken 788678"];
9800 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788679"];
9801 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.AwaitKeyword)\n            {\n                if (this.IsInAsync)\n                {\n                    // If we see an await in an async function, parse it as an unop.\n                    return true;\n                }\n\n                // If we see an await followed by a token that cannot follow an identifier, parse await as a unop.\n                // BindAwait() catches the cases where await successfully parses as a unop but is not in an async\n                // function, and reports an appropriate ERR_BadAwaitWithoutAsync* error.\n                var next = PeekToken(1);\n                switch (next.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        return next.ContextualKind != SyntaxKind.WithKeyword;\n\n                    // Keywords\n                    case SyntaxKind.NewKeyword:\n                    case SyntaxKind.ThisKeyword:\n                    case SyntaxKind.BaseKeyword:\n                    case SyntaxKind.DelegateKeyword:\n                    case SyntaxKind.TypeOfKeyword:\n                    case SyntaxKind.CheckedKeyword:\n                    case SyntaxKind.UncheckedKeyword:\n                    case SyntaxKind.DefaultKeyword:\n\n                    // Literals\n                    case SyntaxKind.TrueKeyword:\n                    case SyntaxKind.FalseKeyword:\n                    case SyntaxKind.StringLiteralToken:\n                    case SyntaxKind.InterpolatedStringStartToken:\n                    case SyntaxKind.InterpolatedStringToken:\n                    case SyntaxKind.NumericLiteralToken:\n                    case SyntaxKind.NullKeyword:\n                    case SyntaxKind.CharacterLiteralToken:\n                        return true;\n                }\n            } 788680"];
9802 [label="this.CurrentToken.ContextualKind 788681"];
9803 [label="get\n            {\n                return this.Kind;\n            } 788682"];
9804 [label="return false; 788683"];
9805 [label="if (IsAwaitExpression())\n            {\n                newPrecedence = GetPrecedence(SyntaxKind.AwaitExpression);\n                var awaitToken = this.EatContextualToken(SyntaxKind.AwaitKeyword);\n                awaitToken = CheckFeatureAvailability(awaitToken, MessageID.IDS_FeatureAsync);\n                var operand = this.ParseSubExpression(newPrecedence);\n                leftOperand = _syntaxFactory.AwaitExpression(awaitToken, operand);\n            }\n            else if (this.IsQueryExpression(mayBeVariableDeclaration: false, mayBeMemberDeclaration: false))\n            {\n                leftOperand = this.ParseQueryExpression(precedence);\n            }\n            else if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword && IsInQuery)\n            {\n                // If this 'from' token wasn't the start of a query then it's not really an expression.\n                // Consume it so that we don't try to parse it again as the next argument in an\n                // argument list.\n                SyntaxToken skipped = this.EatToken(); // consume but skip 'from'\n                skipped = this.AddError(skipped, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                leftOperand = AddTrailingSkippedSyntax(this.CreateMissingIdentifierName(), skipped);\n            }\n            else if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788684"];
9806 [label="if (this.IsQueryExpression(mayBeVariableDeclaration: false, mayBeMemberDeclaration: false))\n            {\n                leftOperand = this.ParseQueryExpression(precedence);\n            }\n            else if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword && IsInQuery)\n            {\n                // If this 'from' token wasn't the start of a query then it's not really an expression.\n                // Consume it so that we don't try to parse it again as the next argument in an\n                // argument list.\n                SyntaxToken skipped = this.EatToken(); // consume but skip 'from'\n                skipped = this.AddError(skipped, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                leftOperand = AddTrailingSkippedSyntax(this.CreateMissingIdentifierName(), skipped);\n            }\n            else if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788685"];
9807 [label="this.IsQueryExpression(mayBeVariableDeclaration: false, mayBeMemberDeclaration: false) 788686"];
9808 [label="param IsQueryExpression(bool mayBeVariableDeclaration) 788687"];
9809 [label="param IsQueryExpression(bool mayBeMemberDeclaration) 788688"];
9810 [label="param IsQueryExpression(this) 788689"];
9811 [label="this.CurrentToken 788690"];
9812 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788691"];
9813 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword)\n            {\n                return this.IsQueryExpressionAfterFrom(mayBeVariableDeclaration, mayBeMemberDeclaration);\n            } 788692"];
9814 [label="this.CurrentToken.ContextualKind 788693"];
9815 [label="get\n            {\n                return this.Kind;\n            } 788694"];
9816 [label="return false; 788695"];
9817 [label="if (this.IsQueryExpression(mayBeVariableDeclaration: false, mayBeMemberDeclaration: false))\n            {\n                leftOperand = this.ParseQueryExpression(precedence);\n            }\n            else if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword && IsInQuery)\n            {\n                // If this 'from' token wasn't the start of a query then it's not really an expression.\n                // Consume it so that we don't try to parse it again as the next argument in an\n                // argument list.\n                SyntaxToken skipped = this.EatToken(); // consume but skip 'from'\n                skipped = this.AddError(skipped, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                leftOperand = AddTrailingSkippedSyntax(this.CreateMissingIdentifierName(), skipped);\n            }\n            else if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788696"];
9818 [label="this.CurrentToken 788697"];
9819 [label="if (this.CurrentToken.ContextualKind == SyntaxKind.FromKeyword && IsInQuery)\n            {\n                // If this 'from' token wasn't the start of a query then it's not really an expression.\n                // Consume it so that we don't try to parse it again as the next argument in an\n                // argument list.\n                SyntaxToken skipped = this.EatToken(); // consume but skip 'from'\n                skipped = this.AddError(skipped, ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                leftOperand = AddTrailingSkippedSyntax(this.CreateMissingIdentifierName(), skipped);\n            }\n            else if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788698"];
9820 [label="this.CurrentToken.ContextualKind 788699"];
9821 [label="get\n            {\n                return this.Kind;\n            } 788700"];
9822 [label="if (tk == SyntaxKind.ThrowKeyword)\n            {\n                var result = ParseThrowExpression();\n                // we parse a throw expression even at the wrong precedence for better recovery\n                return (precedence <= Precedence.Coalescing) ? result :\n                    this.AddError(result, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n            }\n            else if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788701"];
9823 [label="if (this.IsPossibleDeconstructionLeft(precedence))\n            {\n                leftOperand = ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n            }\n            else\n            {\n                // Not a unary operator - get a primary expression.\n                leftOperand = this.ParseTerm(precedence);\n            } 788702"];
9824 [label="this.IsPossibleDeconstructionLeft(precedence) 788703"];
9825 [label="param IsPossibleDeconstructionLeft(Precedence precedence) 788704"];
9826 [label="param IsPossibleDeconstructionLeft(this) 788705"];
9827 [label="if (precedence > Precedence.Assignment || !(this.CurrentToken.IsIdentifierVar() || IsPredefinedType(this.CurrentToken.Kind)))\n            {\n                return false;\n            } 788706"];
9828 [label="this.CurrentToken 788707"];
9829 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788708"];
9830 [label="if (precedence > Precedence.Assignment || !(this.CurrentToken.IsIdentifierVar() || IsPredefinedType(this.CurrentToken.Kind)))\n            {\n                return false;\n            } 788709"];
9831 [label="this.CurrentToken.IsIdentifierVar() 788710"];
9832 [label="param IsIdentifierVar(this Syntax.InternalSyntax.SyntaxToken node) 788711"];
9833 [label="node.ContextualKind 788712"];
9834 [label="get\n            {\n                return this.Kind;\n            } 788713"];
9835 [label="return node.ContextualKind == SyntaxKind.VarKeyword; 788714"];
9836 [label="this.CurrentToken 788715"];
9837 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788716"];
9838 [label="if (precedence > Precedence.Assignment || !(this.CurrentToken.IsIdentifierVar() || IsPredefinedType(this.CurrentToken.Kind)))\n            {\n                return false;\n            } 788717"];
9839 [label="this.CurrentToken.Kind 788718"];
9840 [label="get { return (SyntaxKind)this.RawKind; } 788719"];
9841 [label="IsPredefinedType(this.CurrentToken.Kind) 788720"];
9842 [label="param IsPredefinedType(SyntaxKind keyword) 788721"];
9843 [label="return SyntaxFacts.IsPredefinedType(keyword); 788722"];
9844 [label="SyntaxFacts.IsPredefinedType(keyword) 788723"];
9845 [label="param IsPredefinedType(SyntaxKind kind) 788724"];
9846 [label="switch (kind)\n            {\n                case SyntaxKind.BoolKeyword:\n                case SyntaxKind.ByteKeyword:\n                case SyntaxKind.SByteKeyword:\n                case SyntaxKind.IntKeyword:\n                case SyntaxKind.UIntKeyword:\n                case SyntaxKind.ShortKeyword:\n                case SyntaxKind.UShortKeyword:\n                case SyntaxKind.LongKeyword:\n                case SyntaxKind.ULongKeyword:\n                case SyntaxKind.FloatKeyword:\n                case SyntaxKind.DoubleKeyword:\n                case SyntaxKind.DecimalKeyword:\n                case SyntaxKind.StringKeyword:\n                case SyntaxKind.CharKeyword:\n                case SyntaxKind.ObjectKeyword:\n                case SyntaxKind.VoidKeyword:\n                    return true;\n                default:\n                    return false;\n            } 788725"];
9847 [label="return false; 788726"];
9848 [label="if (precedence > Precedence.Assignment || !(this.CurrentToken.IsIdentifierVar() || IsPredefinedType(this.CurrentToken.Kind)))\n            {\n                return false;\n            } 788727"];
9849 [label="if (precedence > Precedence.Assignment || !(this.CurrentToken.IsIdentifierVar() || IsPredefinedType(this.CurrentToken.Kind)))\n            {\n                return false;\n            } 788728"];
9850 [label="return false; 788729"];
9851 [label="leftOperand = this.ParseTerm(precedence); 788730"];
9852 [label="this.ParseTerm(precedence) 788731"];
9853 [label="param ParseTerm(Precedence precedence) 788732"];
9854 [label="=> this.ParsePostFixExpression(ParseTermWithoutPostfix(precedence)) 788733"];
9855 [label="precedence 788734"];
9856 [label="ParseTermWithoutPostfix(precedence) 788735"];
9857 [label="param ParseTermWithoutPostfix(Precedence precedence) 788736"];
9858 [label="param ParseTermWithoutPostfix(this) 788737"];
9859 [label="this.CurrentToken 788738"];
9860 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788739"];
9861 [label="var tk = this.CurrentToken.Kind; 788740"];
9862 [label="this.CurrentToken.Kind 788741"];
9863 [label="get { return (SyntaxKind)this.RawKind; } 788742"];
9864 [label="switch (tk)\n            {\n                case SyntaxKind.TypeOfKeyword:\n                    return this.ParseTypeOfExpression();\n                case SyntaxKind.DefaultKeyword:\n                    return this.ParseDefaultExpression();\n                case SyntaxKind.SizeOfKeyword:\n                    return this.ParseSizeOfExpression();\n                case SyntaxKind.MakeRefKeyword:\n                    return this.ParseMakeRefExpression();\n                case SyntaxKind.RefTypeKeyword:\n                    return this.ParseRefTypeExpression();\n                case SyntaxKind.CheckedKeyword:\n                case SyntaxKind.UncheckedKeyword:\n                    return this.ParseCheckedOrUncheckedExpression();\n                case SyntaxKind.RefValueKeyword:\n                    return this.ParseRefValueExpression();\n                case SyntaxKind.ColonColonToken:\n                    // misplaced ::\n                    // Calling ParseAliasQualifiedName will cause us to create a missing identifier node that then\n                    // properly consumes the :: and the reset of the alias name afterwards.\n                    return this.ParseAliasQualifiedName(NameOptions.InExpression);\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return this.ParseLambdaExpression();\n                case SyntaxKind.StaticKeyword:\n                    if (this.IsPossibleAnonymousMethodExpression())\n                    {\n                        return this.ParseAnonymousMethodExpression();\n                    }\n                    else if (this.IsPossibleLambdaExpression(precedence))\n                    {\n                        return this.ParseLambdaExpression();\n                    }\n                    else\n                    {\n                        return this.AddError(this.CreateMissingIdentifierName(), ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    }\n                case SyntaxKind.IdentifierToken:\n                    if (this.IsTrueIdentifier())\n                    {\n                        if (this.IsPossibleAnonymousMethodExpression())\n                        {\n                            return this.ParseAnonymousMethodExpression();\n                        }\n                        else if (this.IsPossibleLambdaExpression(precedence))\n                        {\n                            return this.ParseLambdaExpression();\n                        }\n                        else if (this.IsPossibleDeconstructionLeft(precedence))\n                        {\n                            return ParseDeclarationExpression(ParseTypeMode.Normal, MessageID.IDS_FeatureTuples);\n                        }\n                        else\n                        {\n                            return this.ParseAliasQualifiedName(NameOptions.InExpression);\n                        }\n                    }\n                    else\n                    {\n                        return this.AddError(this.CreateMissingIdentifierName(), ErrorCode.ERR_InvalidExprTerm, this.CurrentToken.Text);\n                    }\n                case SyntaxKind.ThisKeyword:\n                    return _syntaxFactory.ThisExpression(this.EatToken());\n                case SyntaxKind.BaseKeyword:\n                    return ParseBaseExpression();\n\n                case SyntaxKind.ArgListKeyword:\n                case SyntaxKind.FalseKeyword:\n                case SyntaxKind.TrueKeyword:\n                case SyntaxKind.NullKeyword:\n                case SyntaxKind.NumericLiteralToken:\n                case SyntaxKind.StringLiteralToken:\n                case SyntaxKind.CharacterLiteralToken:\n                    return _syntaxFactory.LiteralExpression(SyntaxFacts.GetLiteralExpression(tk), this.EatToken());\n                case SyntaxKind.InterpolatedStringStartToken:\n                    throw new NotImplementedException(); // this should not occur because these tokens are produced and parsed immediately\n                case SyntaxKind.InterpolatedStringToken:\n                    return this.ParseInterpolatedStringToken();\n                case SyntaxKind.OpenParenToken:\n                    return this.ParseCastOrParenExpressionOrLambdaOrTuple(precedence);\n                case SyntaxKind.NewKeyword:\n                    return this.ParseNewExpression();\n                case SyntaxKind.StackAllocKeyword:\n                    return this.ParseStackAllocExpression();\n                case SyntaxKind.DelegateKeyword:\n                    return this.ParseAnonymousMethodExpression();\n                case SyntaxKind.RefKeyword:\n                    // ref is not expected to appear in this position.\n                    return this.AddError(ParsePossibleRefExpression(), ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n                default:\n                    // check for intrinsic type followed by '.'\n                    if (IsPredefinedType(tk))\n                    {\n                        var expr = _syntaxFactory.PredefinedType(this.EatToken());\n\n                        if (this.CurrentToken.Kind != SyntaxKind.DotToken || tk == SyntaxKind.VoidKeyword)\n                        {\n                            expr = this.AddError(expr, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n                        }\n\n                        return expr;\n                    }\n                    else\n                    {\n                        var expr = this.CreateMissingIdentifierName();\n\n                        if (tk == SyntaxKind.EndOfFileToken)\n                        {\n                            expr = this.AddError(expr, ErrorCode.ERR_ExpressionExpected);\n                        }\n                        else\n                        {\n                            expr = this.AddError(expr, ErrorCode.ERR_InvalidExprTerm, SyntaxFacts.GetText(tk));\n                        }\n\n                        return expr;\n                    }\n            } 788743"];
9865 [label="return _syntaxFactory.LiteralExpression(SyntaxFacts.GetLiteralExpression(tk), this.EatToken()); 788744"];
9866 [label="SyntaxFacts.GetLiteralExpression(tk) 788745"];
9867 [label="param GetLiteralExpression(SyntaxKind token) 788746"];
9868 [label="switch (token)\n            {\n                case SyntaxKind.StringLiteralToken:\n                    return SyntaxKind.StringLiteralExpression;\n                case SyntaxKind.CharacterLiteralToken:\n                    return SyntaxKind.CharacterLiteralExpression;\n                case SyntaxKind.NumericLiteralToken:\n                    return SyntaxKind.NumericLiteralExpression;\n                case SyntaxKind.NullKeyword:\n                    return SyntaxKind.NullLiteralExpression;\n                case SyntaxKind.TrueKeyword:\n                    return SyntaxKind.TrueLiteralExpression;\n                case SyntaxKind.FalseKeyword:\n                    return SyntaxKind.FalseLiteralExpression;\n                case SyntaxKind.ArgListKeyword:\n                    return SyntaxKind.ArgListExpression;\n                default:\n                    return SyntaxKind.None;\n            } 788747"];
9869 [label="return SyntaxKind.NullLiteralExpression; 788748"];
9870 [label="this.EatToken() 788749"];
9871 [label="param GetTrailingTrivia(this) 788750"];
9872 [label="return null; 788751"];
9873 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788752"];
9874 [label="MoveToNextToken(); 788753"];
9875 [label="return _syntaxFactory.LiteralExpression(SyntaxFacts.GetLiteralExpression(tk), this.EatToken()); 788754"];
9876 [label="return _syntaxFactory.LiteralExpression(SyntaxFacts.GetLiteralExpression(tk), this.EatToken()); 788755"];
9877 [label="return _syntaxFactory.LiteralExpression(SyntaxFacts.GetLiteralExpression(tk), this.EatToken()); 788756"];
9878 [label="param TryGetNode(int kind) 788757"];
9879 [label="param TryGetNode(GreenNode child1) 788758"];
9880 [label="param TryGetNode(SyntaxFactoryContext context) 788759"];
9881 [label="param TryGetNode(out int hash) 788760"];
9882 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788761"];
9883 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788762"];
9884 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788763"];
9885 [label="GetNodeFlags(context) 788764"];
9886 [label="param GetNodeFlags(SyntaxFactoryContext context) 788765"];
9887 [label="var flags = SyntaxNodeCache.GetDefaultNodeFlags(); 788766"];
9888 [label="if (context.IsInAsync)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInAsync;\n            } 788767"];
9889 [label="if (context.IsInQuery)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInQuery;\n            } 788768"];
9890 [label="return flags; 788769"];
9891 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788770"];
9892 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788771"];
9893 [label="return SyntaxNodeCache.TryGetNode(kind, child1, GetNodeFlags(context), out hash); 788772"];
9894 [label="param SetFactoryContext(SyntaxFactoryContext context) 788773"];
9895 [label="param SetFactoryContext(this) 788774"];
9896 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788775"];
9897 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788776"];
9898 [label="this.ParsePostFixExpression(ParseTermWithoutPostfix(precedence)) 788777"];
9899 [label="this.ParsePostFixExpression(ParseTermWithoutPostfix(precedence)) 788778"];
9900 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788779"];
9901 [label="leftOperand = this.ParseTerm(precedence); 788780"];
9902 [label="return ParseExpressionContinued(leftOperand, precedence); 788781"];
9903 [label="return ParseExpressionContinued(leftOperand, precedence); 788782"];
9904 [label="ParseExpressionContinued(leftOperand, precedence) 788783"];
9905 [label="param ParseExpressionContinued(ExpressionSyntax leftOperand) 788784"];
9906 [label="param ParseExpressionContinued(Precedence precedence) 788785"];
9907 [label="param ParseExpressionContinued(this) 788786"];
9908 [label="while (true)\n            {\n                // We either have a binary or assignment operator here, or we're finished.\n                var tk = this.CurrentToken.ContextualKind;\n\n                bool isAssignmentOperator = false;\n                SyntaxKind opKind;\n                if (IsExpectedBinaryOperator(tk))\n                {\n                    opKind = SyntaxFacts.GetBinaryExpression(tk);\n                }\n                else if (IsExpectedAssignmentOperator(tk))\n                {\n                    opKind = SyntaxFacts.GetAssignmentExpression(tk);\n                    isAssignmentOperator = true;\n                }\n                else if (tk == SyntaxKind.DotDotToken)\n                {\n                    opKind = SyntaxKind.RangeExpression;\n                }\n                else if (tk == SyntaxKind.SwitchKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.SwitchExpression;\n                }\n                else if (tk == SyntaxKind.WithKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.WithExpression;\n                }\n                else\n                {\n                    break;\n                }\n\n                var newPrecedence = GetPrecedence(opKind);\n\n                // check for >> or >>=\n                bool doubleOp = false;\n                if (tk == SyntaxKind.GreaterThanToken\n                    && (this.PeekToken(1).Kind == SyntaxKind.GreaterThanToken || this.PeekToken(1).Kind == SyntaxKind.GreaterThanEqualsToken))\n                {\n                    // check to see if they really are adjacent\n                    if (this.CurrentToken.GetTrailingTriviaWidth() == 0 && this.PeekToken(1).GetLeadingTriviaWidth() == 0)\n                    {\n                        if (this.PeekToken(1).Kind == SyntaxKind.GreaterThanToken)\n                        {\n                            opKind = SyntaxFacts.GetBinaryExpression(SyntaxKind.GreaterThanGreaterThanToken);\n                        }\n                        else\n                        {\n                            opKind = SyntaxFacts.GetAssignmentExpression(SyntaxKind.GreaterThanGreaterThanEqualsToken);\n                            isAssignmentOperator = true;\n                        }\n                        newPrecedence = GetPrecedence(opKind);\n                        doubleOp = true;\n                    }\n                }\n\n                // Check the precedence to see if we should 'take' this operator\n                if (newPrecedence < precedence)\n                {\n                    break;\n                }\n\n                // Same precedence, but not right-associative -- deal with this 'later'\n                if ((newPrecedence == precedence) && !IsRightAssociative(opKind))\n                {\n                    break;\n                }\n\n                // We'll 'take' this operator, as precedence is tentatively OK.\n                var opToken = this.EatContextualToken(tk);\n\n                var leftPrecedence = GetPrecedence(leftOperand.Kind);\n                if (newPrecedence > leftPrecedence)\n                {\n                    // Normally, a left operand with a looser precedence will consume all right operands that\n                    // have a tighter precedence.  For example, in the expression `a + b * c`, the `* c` part\n                    // will be consumed as part of the right operand of the addition.  However, there are a\n                    // few circumstances in which a tighter precedence is not consumed: that occurs when the\n                    // left hand operator does not have an expression as its right operand.  This occurs for\n                    // the is-type operator and the is-pattern operator.  Source text such as\n                    // `a is {} + b` should produce a syntax error, as parsing the `+` with an `is`\n                    // expression as its left operand would be a precedence inversion.  Similarly, it occurs\n                    // with an anonymous method expression or a lambda expression with a block body.  No\n                    // further parsing will find a way to fix things up, so we accept the operator but issue\n                    // a diagnostic.\n                    ErrorCode errorCode = leftOperand.Kind == SyntaxKind.IsPatternExpression ? ErrorCode.ERR_UnexpectedToken : ErrorCode.WRN_PrecedenceInversion;\n                    opToken = this.AddError(opToken, errorCode, opToken.Text);\n                }\n\n                if (doubleOp)\n                {\n                    // combine tokens into a single token\n                    var opToken2 = this.EatToken();\n                    var kind = opToken2.Kind == SyntaxKind.GreaterThanToken ? SyntaxKind.GreaterThanGreaterThanToken : SyntaxKind.GreaterThanGreaterThanEqualsToken;\n                    opToken = SyntaxFactory.Token(opToken.GetLeadingTrivia(), kind, opToken2.GetTrailingTrivia());\n                }\n\n                if (opKind == SyntaxKind.AsExpression)\n                {\n                    var type = this.ParseType(ParseTypeMode.AsExpression);\n                    leftOperand = _syntaxFactory.BinaryExpression(opKind, leftOperand, opToken, type);\n                }\n                else if (opKind == SyntaxKind.IsExpression)\n                {\n                    leftOperand = ParseIsExpression(leftOperand, opToken);\n                }\n                else if (isAssignmentOperator)\n                {\n                    ExpressionSyntax rhs = opKind == SyntaxKind.SimpleAssignmentExpression && CurrentToken.Kind == SyntaxKind.RefKeyword\n                        ? rhs = CheckFeatureAvailability(ParsePossibleRefExpression(), MessageID.IDS_FeatureRefReassignment)\n                        : rhs = this.ParseSubExpression(newPrecedence);\n\n                    if (opKind == SyntaxKind.CoalesceAssignmentExpression)\n                    {\n                        opToken = CheckFeatureAvailability(opToken, MessageID.IDS_FeatureCoalesceAssignmentExpression);\n                    }\n\n                    leftOperand = _syntaxFactory.AssignmentExpression(opKind, leftOperand, opToken, rhs);\n                }\n                else if (opKind == SyntaxKind.SwitchExpression)\n                {\n                    leftOperand = ParseSwitchExpression(leftOperand, opToken);\n                }\n                else if (opKind == SyntaxKind.WithExpression)\n                {\n                    leftOperand = ParseWithExpression(leftOperand, opToken);\n                }\n                else if (tk == SyntaxKind.DotDotToken)\n                {\n                    // Operator '..' here can either be a binary or a postfix unary operator:\n                    Debug.Assert(opKind == SyntaxKind.RangeExpression);\n\n                    ExpressionSyntax rightOperand;\n                    if (CanStartExpression())\n                    {\n                        newPrecedence = GetPrecedence(opKind);\n                        rightOperand = this.ParseSubExpression(newPrecedence);\n                    }\n                    else\n                    {\n                        rightOperand = null;\n                    }\n\n                    leftOperand = _syntaxFactory.RangeExpression(leftOperand, opToken, rightOperand);\n                }\n                else\n                {\n                    Debug.Assert(IsExpectedBinaryOperator(tk));\n                    leftOperand = _syntaxFactory.BinaryExpression(opKind, leftOperand, opToken, this.ParseSubExpression(newPrecedence));\n                }\n            } 788787"];
9909 [label="this.CurrentToken 788788"];
9910 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788789"];
9911 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788790"];
9912 [label="var tk = this.CurrentToken.ContextualKind; 788791"];
9913 [label="this.CurrentToken.ContextualKind 788792"];
9914 [label="get\n            {\n                return this.Kind;\n            } 788793"];
9915 [label="bool isAssignmentOperator = false; 788794"];
9916 [label="SyntaxKind opKind; 788795"];
9917 [label="if (IsExpectedBinaryOperator(tk))\n                {\n                    opKind = SyntaxFacts.GetBinaryExpression(tk);\n                }\n                else if (IsExpectedAssignmentOperator(tk))\n                {\n                    opKind = SyntaxFacts.GetAssignmentExpression(tk);\n                    isAssignmentOperator = true;\n                }\n                else if (tk == SyntaxKind.DotDotToken)\n                {\n                    opKind = SyntaxKind.RangeExpression;\n                }\n                else if (tk == SyntaxKind.SwitchKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.SwitchExpression;\n                }\n                else if (tk == SyntaxKind.WithKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.WithExpression;\n                }\n                else\n                {\n                    break;\n                } 788796"];
9918 [label="IsExpectedBinaryOperator(tk) 788797"];
9919 [label="param IsExpectedBinaryOperator(SyntaxKind kind) 788798"];
9920 [label="return SyntaxFacts.IsBinaryExpression(kind); 788799"];
9921 [label="SyntaxFacts.IsBinaryExpression(kind) 788800"];
9922 [label="param IsBinaryExpression(SyntaxKind token) 788801"];
9923 [label="return GetBinaryExpression(token) != SyntaxKind.None; 788802"];
9924 [label="GetBinaryExpression(token) 788803"];
9925 [label="param GetBinaryExpression(SyntaxKind token) 788804"];
9926 [label="switch (token)\n            {\n                case SyntaxKind.QuestionQuestionToken:\n                    return SyntaxKind.CoalesceExpression;\n                case SyntaxKind.IsKeyword:\n                    return SyntaxKind.IsExpression;\n                case SyntaxKind.AsKeyword:\n                    return SyntaxKind.AsExpression;\n                case SyntaxKind.BarToken:\n                    return SyntaxKind.BitwiseOrExpression;\n                case SyntaxKind.CaretToken:\n                    return SyntaxKind.ExclusiveOrExpression;\n                case SyntaxKind.AmpersandToken:\n                    return SyntaxKind.BitwiseAndExpression;\n                case SyntaxKind.EqualsEqualsToken:\n                    return SyntaxKind.EqualsExpression;\n                case SyntaxKind.ExclamationEqualsToken:\n                    return SyntaxKind.NotEqualsExpression;\n                case SyntaxKind.LessThanToken:\n                    return SyntaxKind.LessThanExpression;\n                case SyntaxKind.LessThanEqualsToken:\n                    return SyntaxKind.LessThanOrEqualExpression;\n                case SyntaxKind.GreaterThanToken:\n                    return SyntaxKind.GreaterThanExpression;\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return SyntaxKind.GreaterThanOrEqualExpression;\n                case SyntaxKind.LessThanLessThanToken:\n                    return SyntaxKind.LeftShiftExpression;\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return SyntaxKind.RightShiftExpression;\n                case SyntaxKind.PlusToken:\n                    return SyntaxKind.AddExpression;\n                case SyntaxKind.MinusToken:\n                    return SyntaxKind.SubtractExpression;\n                case SyntaxKind.AsteriskToken:\n                    return SyntaxKind.MultiplyExpression;\n                case SyntaxKind.SlashToken:\n                    return SyntaxKind.DivideExpression;\n                case SyntaxKind.PercentToken:\n                    return SyntaxKind.ModuloExpression;\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return SyntaxKind.LogicalAndExpression;\n                case SyntaxKind.BarBarToken:\n                    return SyntaxKind.LogicalOrExpression;\n                default:\n                    return SyntaxKind.None;\n            } 788805"];
9927 [label="return SyntaxKind.None; 788806"];
9928 [label="if (IsExpectedAssignmentOperator(tk))\n                {\n                    opKind = SyntaxFacts.GetAssignmentExpression(tk);\n                    isAssignmentOperator = true;\n                }\n                else if (tk == SyntaxKind.DotDotToken)\n                {\n                    opKind = SyntaxKind.RangeExpression;\n                }\n                else if (tk == SyntaxKind.SwitchKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.SwitchExpression;\n                }\n                else if (tk == SyntaxKind.WithKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.WithExpression;\n                }\n                else\n                {\n                    break;\n                } 788807"];
9929 [label="IsExpectedAssignmentOperator(tk) 788808"];
9930 [label="param IsExpectedAssignmentOperator(SyntaxKind kind) 788809"];
9931 [label="return SyntaxFacts.IsAssignmentExpressionOperatorToken(kind); 788810"];
9932 [label="SyntaxFacts.IsAssignmentExpressionOperatorToken(kind) 788811"];
9933 [label="param IsAssignmentExpressionOperatorToken(SyntaxKind token) 788812"];
9934 [label="switch (token)\n            {\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                case SyntaxKind.BarEqualsToken:\n                case SyntaxKind.AmpersandEqualsToken:\n                case SyntaxKind.CaretEqualsToken:\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                case SyntaxKind.PlusEqualsToken:\n                case SyntaxKind.MinusEqualsToken:\n                case SyntaxKind.AsteriskEqualsToken:\n                case SyntaxKind.SlashEqualsToken:\n                case SyntaxKind.PercentEqualsToken:\n                case SyntaxKind.EqualsToken:\n                    return true;\n                default:\n                    return false;\n            } 788813"];
9935 [label="return false; 788814"];
9936 [label="if (tk == SyntaxKind.DotDotToken)\n                {\n                    opKind = SyntaxKind.RangeExpression;\n                }\n                else if (tk == SyntaxKind.SwitchKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.SwitchExpression;\n                }\n                else if (tk == SyntaxKind.WithKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.WithExpression;\n                }\n                else\n                {\n                    break;\n                } 788815"];
9937 [label="if (tk == SyntaxKind.SwitchKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.SwitchExpression;\n                }\n                else if (tk == SyntaxKind.WithKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.WithExpression;\n                }\n                else\n                {\n                    break;\n                } 788816"];
9938 [label="if (tk == SyntaxKind.WithKeyword && this.PeekToken(1).Kind == SyntaxKind.OpenBraceToken)\n                {\n                    opKind = SyntaxKind.WithExpression;\n                }\n                else\n                {\n                    break;\n                } 788817"];
9939 [label="CurrentToken 788818"];
9940 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788819"];
9941 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788820"];
9942 [label="if (CurrentToken.Kind == SyntaxKind.QuestionToken && precedence <= Precedence.Conditional)\n            {\n                var questionToken = this.EatToken();\n                var colonLeft = this.ParsePossibleRefExpression();\n                if (this.CurrentToken.Kind == SyntaxKind.EndOfFileToken && this.lexer.InterpolationFollowedByColon)\n                {\n                    // We have an interpolated string with an interpolation that contains a conditional expression.\n                    // Unfortunately, the precedence demands that the colon is considered to signal the start of the\n                    // format string. Without this code, the compiler would complain about a missing colon, and point\n                    // to the colon that is present, which would be confusing. We aim to give a better error message.\n                    var colon = SyntaxFactory.MissingToken(SyntaxKind.ColonToken);\n                    var colonRight = _syntaxFactory.IdentifierName(SyntaxFactory.MissingToken(SyntaxKind.IdentifierToken));\n                    leftOperand = _syntaxFactory.ConditionalExpression(leftOperand, questionToken, colonLeft, colon, colonRight);\n                    leftOperand = this.AddError(leftOperand, ErrorCode.ERR_ConditionalInInterpolation);\n                }\n                else\n                {\n                    var colon = this.EatToken(SyntaxKind.ColonToken);\n                    var colonRight = this.ParsePossibleRefExpression();\n                    leftOperand = _syntaxFactory.ConditionalExpression(leftOperand, questionToken, colonLeft, colon, colonRight);\n                }\n            } 788821"];
9943 [label="CurrentToken.Kind 788822"];
9944 [label="get { return (SyntaxKind)this.RawKind; } 788823"];
9945 [label="return leftOperand; 788824"];
9946 [label="_ = GetPrecedence(result.Kind); 788825"];
9947 [label="result.Kind 788826"];
9948 [label="get { return (SyntaxKind)this.RawKind; } 788827"];
9949 [label="_ = GetPrecedence(result.Kind); 788828"];
9950 [label="GetPrecedence(result.Kind) 788829"];
9951 [label="param GetPrecedence(SyntaxKind op) 788830"];
9952 [label="switch (op)\n            {\n                case SyntaxKind.QueryExpression:\n                    return Precedence.Expression;\n                case SyntaxKind.ParenthesizedLambdaExpression:\n                case SyntaxKind.SimpleLambdaExpression:\n                case SyntaxKind.AnonymousMethodExpression:\n                    return Precedence.Lambda;\n                case SyntaxKind.SimpleAssignmentExpression:\n                case SyntaxKind.AddAssignmentExpression:\n                case SyntaxKind.SubtractAssignmentExpression:\n                case SyntaxKind.MultiplyAssignmentExpression:\n                case SyntaxKind.DivideAssignmentExpression:\n                case SyntaxKind.ModuloAssignmentExpression:\n                case SyntaxKind.AndAssignmentExpression:\n                case SyntaxKind.ExclusiveOrAssignmentExpression:\n                case SyntaxKind.OrAssignmentExpression:\n                case SyntaxKind.LeftShiftAssignmentExpression:\n                case SyntaxKind.RightShiftAssignmentExpression:\n                case SyntaxKind.CoalesceAssignmentExpression:\n                    return Precedence.Assignment;\n                case SyntaxKind.CoalesceExpression:\n                case SyntaxKind.ThrowExpression:\n                    return Precedence.Coalescing;\n                case SyntaxKind.LogicalOrExpression:\n                    return Precedence.ConditionalOr;\n                case SyntaxKind.LogicalAndExpression:\n                    return Precedence.ConditionalAnd;\n                case SyntaxKind.BitwiseOrExpression:\n                    return Precedence.LogicalOr;\n                case SyntaxKind.ExclusiveOrExpression:\n                    return Precedence.LogicalXor;\n                case SyntaxKind.BitwiseAndExpression:\n                    return Precedence.LogicalAnd;\n                case SyntaxKind.EqualsExpression:\n                case SyntaxKind.NotEqualsExpression:\n                    return Precedence.Equality;\n                case SyntaxKind.LessThanExpression:\n                case SyntaxKind.LessThanOrEqualExpression:\n                case SyntaxKind.GreaterThanExpression:\n                case SyntaxKind.GreaterThanOrEqualExpression:\n                case SyntaxKind.IsExpression:\n                case SyntaxKind.AsExpression:\n                case SyntaxKind.IsPatternExpression:\n                    return Precedence.Relational;\n                case SyntaxKind.SwitchExpression:\n                case SyntaxKind.WithExpression:\n                    return Precedence.Switch;\n                case SyntaxKind.LeftShiftExpression:\n                case SyntaxKind.RightShiftExpression:\n                    return Precedence.Shift;\n                case SyntaxKind.AddExpression:\n                case SyntaxKind.SubtractExpression:\n                    return Precedence.Additive;\n                case SyntaxKind.MultiplyExpression:\n                case SyntaxKind.DivideExpression:\n                case SyntaxKind.ModuloExpression:\n                    return Precedence.Mutiplicative;\n                case SyntaxKind.UnaryPlusExpression:\n                case SyntaxKind.UnaryMinusExpression:\n                case SyntaxKind.BitwiseNotExpression:\n                case SyntaxKind.LogicalNotExpression:\n                case SyntaxKind.PreIncrementExpression:\n                case SyntaxKind.PreDecrementExpression:\n                case SyntaxKind.TypeOfExpression:\n                case SyntaxKind.SizeOfExpression:\n                case SyntaxKind.CheckedExpression:\n                case SyntaxKind.UncheckedExpression:\n                case SyntaxKind.MakeRefExpression:\n                case SyntaxKind.RefValueExpression:\n                case SyntaxKind.RefTypeExpression:\n                case SyntaxKind.AwaitExpression:\n                case SyntaxKind.IndexExpression:\n                    return Precedence.Unary;\n                case SyntaxKind.CastExpression:\n                    return Precedence.Cast;\n                case SyntaxKind.PointerIndirectionExpression:\n                    return Precedence.PointerIndirection;\n                case SyntaxKind.AddressOfExpression:\n                    return Precedence.AddressOf;\n                case SyntaxKind.RangeExpression:\n                    return Precedence.Range;\n                case SyntaxKind.ConditionalExpression:\n                    return Precedence.Expression;\n                case SyntaxKind.AliasQualifiedName:\n                case SyntaxKind.AnonymousObjectCreationExpression:\n                case SyntaxKind.ArgListExpression:\n                case SyntaxKind.ArrayCreationExpression:\n                case SyntaxKind.BaseExpression:\n                case SyntaxKind.CharacterLiteralExpression:\n                case SyntaxKind.ConditionalAccessExpression:\n                case SyntaxKind.DeclarationExpression:\n                case SyntaxKind.DefaultExpression:\n                case SyntaxKind.DefaultLiteralExpression:\n                case SyntaxKind.ElementAccessExpression:\n                case SyntaxKind.FalseLiteralExpression:\n                case SyntaxKind.GenericName:\n                case SyntaxKind.IdentifierName:\n                case SyntaxKind.ImplicitArrayCreationExpression:\n                case SyntaxKind.ImplicitStackAllocArrayCreationExpression:\n                case SyntaxKind.ImplicitObjectCreationExpression:\n                case SyntaxKind.InterpolatedStringExpression:\n                case SyntaxKind.InvocationExpression:\n                case SyntaxKind.NullLiteralExpression:\n                case SyntaxKind.NumericLiteralExpression:\n                case SyntaxKind.ObjectCreationExpression:\n                case SyntaxKind.ParenthesizedExpression:\n                case SyntaxKind.PointerMemberAccessExpression:\n                case SyntaxKind.PostDecrementExpression:\n                case SyntaxKind.PostIncrementExpression:\n                case SyntaxKind.PredefinedType:\n                case SyntaxKind.RefExpression:\n                case SyntaxKind.SimpleMemberAccessExpression:\n                case SyntaxKind.StackAllocArrayCreationExpression:\n                case SyntaxKind.StringLiteralExpression:\n                case SyntaxKind.SuppressNullableWarningExpression:\n                case SyntaxKind.ThisExpression:\n                case SyntaxKind.TrueLiteralExpression:\n                case SyntaxKind.TupleExpression:\n                    return Precedence.Primary;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(op);\n            } 788831"];
9953 [label="return Precedence.Primary; 788832"];
9954 [label="_recursionDepth 788833"];
9955 [label="return result; 788834"];
9956 [label="return this.ParseExpressionCore(); 788835"];
9957 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788836"];
9958 [label="param TryGetNode(int kind) 788837"];
9959 [label="param TryGetNode(GreenNode child1) 788838"];
9960 [label="param TryGetNode(GreenNode child2) 788839"];
9961 [label="param TryGetNode(SyntaxFactoryContext context) 788840"];
9962 [label="param TryGetNode(out int hash) 788841"];
9963 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788842"];
9964 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788843"];
9965 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788844"];
9966 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788845"];
9967 [label="GetNodeFlags(context) 788846"];
9968 [label="param GetNodeFlags(SyntaxFactoryContext context) 788847"];
9969 [label="var flags = SyntaxNodeCache.GetDefaultNodeFlags(); 788848"];
9970 [label="if (context.IsInAsync)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInAsync;\n            } 788849"];
9971 [label="if (context.IsInQuery)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInQuery;\n            } 788850"];
9972 [label="return flags; 788851"];
9973 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788852"];
9974 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788853"];
9975 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788854"];
9976 [label="param SetFactoryContext(SyntaxFactoryContext context) 788855"];
9977 [label="param SetFactoryContext(this) 788856"];
9978 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788857"];
9979 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788858"];
9980 [label="param TryGetNode(int kind) 788859"];
9981 [label="param TryGetNode(GreenNode child1) 788860"];
9982 [label="param TryGetNode(GreenNode child2) 788861"];
9983 [label="param TryGetNode(GreenNode child3) 788862"];
9984 [label="param TryGetNode(SyntaxFactoryContext context) 788863"];
9985 [label="param TryGetNode(out int hash) 788864"];
9986 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788865"];
9987 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788866"];
9988 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788867"];
9989 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788868"];
9990 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788869"];
9991 [label="GetNodeFlags(context) 788870"];
9992 [label="param GetNodeFlags(SyntaxFactoryContext context) 788871"];
9993 [label="var flags = SyntaxNodeCache.GetDefaultNodeFlags(); 788872"];
9994 [label="if (context.IsInAsync)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInAsync;\n            } 788873"];
9995 [label="if (context.IsInQuery)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInQuery;\n            } 788874"];
9996 [label="return flags; 788875"];
9997 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788876"];
9998 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788877"];
9999 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, child3, GetNodeFlags(context), out hash); 788878"];
10000 [label="param SetFactoryContext(SyntaxFactoryContext context) 788879"];
10001 [label="param SetFactoryContext(this) 788880"];
10002 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788881"];
10003 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788882"];
10004 [label="variables.Add(\n                this.ParseVariableDeclarator(\n                    type,\n                    flags,\n                    isFirst: true,\n                    allowLocalFunctions: allowLocalFunctions,\n                    attributes: attributes,\n                    mods: mods,\n                    localFunction: out localFunction)); 788883"];
10005 [label="if (localFunction != null)\n            {\n                // ParseVariableDeclarator returns null, so it is not added to variables\n                Debug.Assert(variables.Count == 0);\n                return;\n            } 788884"];
10006 [label="if (localFunction != null)\n            {\n                // ParseVariableDeclarator returns null, so it is not added to variables\n                Debug.Assert(variables.Count == 0);\n                return;\n            } 788885"];
10007 [label="while (true)\n            {\n                if (this.CurrentToken.Kind == SyntaxKind.SemicolonToken)\n                {\n                    break;\n                }\n                else if (this.CurrentToken.Kind == SyntaxKind.CommaToken)\n                {\n                    variables.AddSeparator(this.EatToken(SyntaxKind.CommaToken));\n                    variables.Add(\n                        this.ParseVariableDeclarator(\n                            type,\n                            flags,\n                            isFirst: false,\n                            allowLocalFunctions: false,\n                            attributes: attributes,\n                            mods: mods,\n                            localFunction: out localFunction));\n                }\n                else if (!variableDeclarationsExpected || this.SkipBadVariableListTokens(variables, SyntaxKind.CommaToken) == PostSkipAction.Abort)\n                {\n                    break;\n                }\n            } 788886"];
10008 [label="this.CurrentToken 788887"];
10009 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788888"];
10010 [label="if (this.CurrentToken.Kind == SyntaxKind.SemicolonToken)\n                {\n                    break;\n                }\n                else if (this.CurrentToken.Kind == SyntaxKind.CommaToken)\n                {\n                    variables.AddSeparator(this.EatToken(SyntaxKind.CommaToken));\n                    variables.Add(\n                        this.ParseVariableDeclarator(\n                            type,\n                            flags,\n                            isFirst: false,\n                            allowLocalFunctions: false,\n                            attributes: attributes,\n                            mods: mods,\n                            localFunction: out localFunction));\n                }\n                else if (!variableDeclarationsExpected || this.SkipBadVariableListTokens(variables, SyntaxKind.CommaToken) == PostSkipAction.Abort)\n                {\n                    break;\n                } 788889"];
10011 [label="this.CurrentToken.Kind 788890"];
10012 [label="get { return (SyntaxKind)this.RawKind; } 788891"];
10013 [label="Debug.Assert(localFunction == null); 788892"];
10014 [label="Debug.Assert(localFunction == null); 788893"];
10015 [label="var semicolon = this.EatToken(SyntaxKind.SemicolonToken); 788894"];
10016 [label="this.EatToken(SyntaxKind.SemicolonToken) 788895"];
10017 [label="param EatToken(SyntaxKind kind) 788896"];
10018 [label="param EatToken(this) 788897"];
10019 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 788898"];
10020 [label="SyntaxFacts.IsAnyToken(kind) 788899"];
10021 [label="param IsAnyToken(SyntaxKind kind) 788900"];
10022 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 788901"];
10023 [label="return true; 788902"];
10024 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 788903"];
10025 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788904"];
10026 [label="MoveToNextToken(); 788905"];
10027 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788906"];
10028 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788907"];
10029 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788908"];
10030 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788909"];
10031 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788910"];
10032 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788911"];
10033 [label="param TryGetNode(SyntaxFactoryContext context) 788912"];
10034 [label="GetNodeFlags(context) 788913"];
10035 [label="param GetNodeFlags(SyntaxFactoryContext context) 788914"];
10036 [label="var flags = SyntaxNodeCache.GetDefaultNodeFlags(); 788915"];
10037 [label="if (context.IsInAsync)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInAsync;\n            } 788916"];
10038 [label="if (context.IsInQuery)\n            {\n                flags |= GreenNode.NodeFlags.FactoryContextIsInQuery;\n            } 788917"];
10039 [label="return flags; 788918"];
10040 [label="return SyntaxNodeCache.TryGetNode(kind, child1, child2, GetNodeFlags(context), out hash); 788919"];
10041 [label="param SetFactoryContext(SyntaxFactoryContext context) 788920"];
10042 [label="param SetFactoryContext(this) 788921"];
10043 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788922"];
10044 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788923"];
10045 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788924"];
10046 [label="return _syntaxFactory.FieldDeclaration(\n                    attributes,\n                    modifiers.ToList(),\n                    _syntaxFactory.VariableDeclaration(type, variables),\n                    semicolon); 788925"];
10047 [label="param SetFactoryContext(SyntaxFactoryContext context) 788926"];
10048 [label="param SetFactoryContext(this) 788927"];
10049 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 788928"];
10050 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 788929"];
10051 [label="_termState 788930"];
10052 [label="_pool.Free(variables); 788931"];
10053 [label="_pool.Free(variables); 788932"];
10054 [label="param Release(ref ResetPoint state) 788933"];
10055 [label="param Release(this) 788934"];
10056 [label="base.Release(ref state.BaseResetPoint); 788935"];
10057 [label="base.Release(ref state.BaseResetPoint) 788936"];
10058 [label="param Release(ref ResetPoint point) 788937"];
10059 [label="param Release(this) 788938"];
10060 [label="Debug.Assert(_resetCount == point.ResetCount); 788939"];
10061 [label="_resetCount 788940"];
10062 [label="if (_resetCount == 0)\n            {\n                _resetStart = -1;\n            } 788941"];
10063 [label="if (_resetCount == 0)\n            {\n                _resetStart = -1;\n            } 788942"];
10064 [label="_resetStart = -1; 788943"];
10065 [label="_resetStart 788944"];
10066 [label="base.Release(ref state.BaseResetPoint); 788945"];
10067 [label="var result = ParseMemberDeclarationCore(parentKind); 788946"];
10068 [label="_recursionDepth 788947"];
10069 [label="return result; 788948"];
10070 [label="if (member != null)\n                                {\n                                    // statements are accepted here, a semantic error will be reported later\n                                    members.Add(member);\n                                }\n                                else\n                                {\n                                    // we get here if we couldn't parse the lookahead as a statement or a declaration (we haven't consumed any tokens):\n                                    this.SkipBadMemberListTokens(ref openBrace, members);\n                                } 788949"];
10071 [label="if (member != null)\n                                {\n                                    // statements are accepted here, a semantic error will be reported later\n                                    members.Add(member);\n                                }\n                                else\n                                {\n                                    // we get here if we couldn't parse the lookahead as a statement or a declaration (we haven't consumed any tokens):\n                                    this.SkipBadMemberListTokens(ref openBrace, members);\n                                } 788950"];
10072 [label="members.Add(member); 788951"];
10073 [label="members.Add(member); 788952"];
10074 [label="_termState 788953"];
10075 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788954"];
10076 [label="return _lexedTokens[_tokenOffset]; 788955"];
10077 [label="return false; 788956"];
10078 [label="if (kind == SyntaxKind.CloseBraceToken || kind == SyntaxKind.EndOfFileToken || this.IsTerminator())\n                            {\n                                // This marks the end of members of this class\n                                break;\n                            }\n                            else\n                            {\n                                // Error -- try to sync up with intended reality\n                                this.SkipBadMemberListTokens(ref openBrace, members);\n                            } 788957"];
10079 [label="if (openBrace.IsMissing)\n                    {\n                        closeBrace = SyntaxFactory.MissingToken(SyntaxKind.CloseBraceToken);\n                        closeBrace = WithAdditionalDiagnostics(closeBrace, this.GetExpectedTokenError(SyntaxKind.CloseBraceToken, this.CurrentToken.Kind));\n                    }\n                    else\n                    {\n                        closeBrace = this.EatToken(SyntaxKind.CloseBraceToken);\n                    } 788958"];
10080 [label="closeBrace = this.EatToken(SyntaxKind.CloseBraceToken); 788959"];
10081 [label="this.EatToken(SyntaxKind.CloseBraceToken) 788960"];
10082 [label="param EatToken(SyntaxKind kind) 788961"];
10083 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 788962"];
10084 [label="SyntaxFacts.IsAnyToken(kind) 788963"];
10085 [label="param IsAnyToken(SyntaxKind kind) 788964"];
10086 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 788965"];
10087 [label="return true; 788966"];
10088 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 788967"];
10089 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 788968"];
10090 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 788969"];
10091 [label="MoveToNextToken(); 788970"];
10092 [label="semicolon = TryEatToken(SyntaxKind.SemicolonToken); 788971"];
10093 [label="TryEatToken(SyntaxKind.SemicolonToken) 788972"];
10094 [label="param TryEatToken(SyntaxKind kind) 788973"];
10095 [label="=> this.CurrentToken.Kind == kind ? this.EatToken() : null 788974"];
10096 [label="this.CurrentToken 788975"];
10097 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 788976"];
10098 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 788977"];
10099 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 788978"];
10100 [label="return _lexedTokens[_tokenOffset]; 788979"];
10101 [label="this.CurrentToken.Kind 788980"];
10102 [label="get { return (SyntaxKind)this.RawKind; } 788981"];
10103 [label="this.CurrentToken.Kind == kind 788982"];
10104 [label="null 788983"];
10105 [label="this.CurrentToken.Kind == kind ? this.EatToken() : null 788984"];
10106 [label="var modifiersList = (SyntaxList<SyntaxToken>)modifiers.ToList(); 788985"];
10107 [label="var membersList = (SyntaxList<MemberDeclarationSyntax>)members; 788986"];
10108 [label="var constraintsList = (SyntaxList<TypeParameterConstraintClauseSyntax>)constraints; 788987"];
10109 [label="keyword.Kind 788988"];
10110 [label="get { return (SyntaxKind)this.RawKind; } 788989"];
10111 [label="return (SyntaxKind)this.RawKind; 788990"];
10112 [label="switch (keyword.Kind)\n                {\n                    case SyntaxKind.ClassKeyword:\n                        RoslynDebug.Assert(paramList is null);\n                        RoslynDebug.Assert(openBrace != null);\n                        RoslynDebug.Assert(closeBrace != null);\n                        return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon);\n\n                    case SyntaxKind.StructKeyword:\n                        RoslynDebug.Assert(paramList is null);\n                        RoslynDebug.Assert(openBrace != null);\n                        RoslynDebug.Assert(closeBrace != null);\n                        return _syntaxFactory.StructDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon);\n\n                    case SyntaxKind.InterfaceKeyword:\n                        RoslynDebug.Assert(paramList is null);\n                        RoslynDebug.Assert(openBrace != null);\n                        RoslynDebug.Assert(closeBrace != null);\n                        return _syntaxFactory.InterfaceDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon);\n\n                    case SyntaxKind.RecordKeyword:\n                        return _syntaxFactory.RecordDeclaration(\n                            attributes,\n                            modifiers.ToList(),\n                            keyword,\n                            name,\n                            typeParameters,\n                            paramList,\n                            baseList,\n                            constraints,\n                            openBrace,\n                            members,\n                            closeBrace,\n                            semicolon);\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(keyword.Kind);\n                } 788991"];
10113 [label="RoslynDebug.Assert(paramList is null); 788992"];
10114 [label="RoslynDebug.Assert(openBrace != null); 788993"];
10115 [label="RoslynDebug.Assert(closeBrace != null); 788994"];
10116 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 788995"];
10117 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 788996"];
10118 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 788997"];
10119 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 788998"];
10120 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 788999"];
10121 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789000"];
10122 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789001"];
10123 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789002"];
10124 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789003"];
10125 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789004"];
10126 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789005"];
10127 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789006"];
10128 [label="return _syntaxFactory.ClassDeclaration(\n                            attributes,\n                            modifiersList,\n                            keyword,\n                            name,\n                            typeParameters,\n                            baseList,\n                            constraintsList,\n                            openBrace,\n                            membersList,\n                            closeBrace,\n                            semicolon); 789007"];
10129 [label="param SetFactoryContext(SyntaxFactoryContext context) 789008"];
10130 [label="param SetFactoryContext(this) 789009"];
10131 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 789010"];
10132 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 789011"];
10133 [label="if (!members.IsNull)\n                {\n                    _pool.Free(members);\n                } 789012"];
10134 [label="_pool.Free(members); 789013"];
10135 [label="if (!constraints.IsNull)\n                {\n                    _pool.Free(constraints);\n                } 789014"];
10136 [label="param AddIncompleteMembers(ref SyntaxListBuilder<MemberDeclarationSyntax> incompleteMembers) 789015"];
10137 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 789016"];
10138 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 789017"];
10139 [label="var closeBrace = this.EatToken(SyntaxKind.CloseBraceToken); 789018"];
10140 [label="this.EatToken(SyntaxKind.CloseBraceToken) 789019"];
10141 [label="param EatToken(SyntaxKind kind) 789020"];
10142 [label="param EatToken(this) 789021"];
10143 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 789022"];
10144 [label="SyntaxFacts.IsAnyToken(kind) 789023"];
10145 [label="param IsAnyToken(SyntaxKind kind) 789024"];
10146 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 789025"];
10147 [label="return true; 789026"];
10148 [label="this.CurrentToken 789027"];
10149 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 789028"];
10150 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 789029"];
10151 [label="ct.Kind 789030"];
10152 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 789031"];
10153 [label="param GetTrailingTrivia(this) 789032"];
10154 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 789033"];
10155 [label="MoveToNextToken(); 789034"];
10156 [label="var semicolon = this.TryEatToken(SyntaxKind.SemicolonToken); 789035"];
10157 [label="this.TryEatToken(SyntaxKind.SemicolonToken) 789036"];
10158 [label="param TryEatToken(SyntaxKind kind) 789037"];
10159 [label="=> this.CurrentToken.Kind == kind ? this.EatToken() : null 789038"];
10160 [label="this.CurrentToken 789039"];
10161 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 789040"];
10162 [label="this.FetchCurrentToken() 789041"];
10163 [label="param FetchCurrentToken(this) 789042"];
10164 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 789043"];
10165 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 789044"];
10166 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 789045"];
10167 [label="return _lexedTokens[_tokenOffset]; 789046"];
10168 [label="this.CurrentToken.Kind 789047"];
10169 [label="this.CurrentToken.Kind == kind 789048"];
10170 [label="Debug.Assert(initialBadNodes == null); 789049"];
10171 [label="Debug.Assert(initialBadNodes == null); 789050"];
10172 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789051"];
10173 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789052"];
10174 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789053"];
10175 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789054"];
10176 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789055"];
10177 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789056"];
10178 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789057"];
10179 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789058"];
10180 [label="return _syntaxFactory.NamespaceDeclaration(\n                    attributeLists, modifiers.ToList(),\n                    namespaceToken, name, openBrace, body.Externs, body.Usings, body.Members, closeBrace, semicolon); 789059"];
10181 [label="param CSharpSyntaxNode(this) 789060"];
10182 [label="GreenStats.NoteGreen(this); 789061"];
10183 [label="param SetFactoryContext(SyntaxFactoryContext context) 789062"];
10184 [label="param SetFactoryContext(this) 789063"];
10185 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 789064"];
10186 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 789065"];
10187 [label="body.Free(_pool); 789066"];
10188 [label="body.Free(_pool) 789067"];
10189 [label="param Free(SyntaxListPool pool) 789068"];
10190 [label="param Free(this) 789069"];
10191 [label="pool.Free(Members); 789070"];
10192 [label="pool.Free(Members); 789071"];
10193 [label="pool.Free(Attributes); 789072"];
10194 [label="pool.Free(Attributes); 789073"];
10195 [label="pool.Free(Usings); 789074"];
10196 [label="pool.Free(Usings); 789075"];
10197 [label="pool.Free(Externs); 789076"];
10198 [label="pool.Free(Externs); 789077"];
10199 [label="body.Free(_pool); 789078"];
10200 [label="_recursionDepth 789079"];
10201 [label="return result; 789080"];
10202 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 789081"];
10203 [label="get { return (SyntaxKind)this.RawKind; } 789082"];
10204 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 789083"];
10205 [label="param AddIncompleteMembers(ref SyntaxListBuilder<MemberDeclarationSyntax> incompleteMembers) 789084"];
10206 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 789085"];
10207 [label="var eof = this.EatToken(SyntaxKind.EndOfFileToken); 789086"];
10208 [label="this.EatToken(SyntaxKind.EndOfFileToken) 789087"];
10209 [label="param EatToken(SyntaxKind kind) 789088"];
10210 [label="param EatToken(this) 789089"];
10211 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 789090"];
10212 [label="SyntaxFacts.IsAnyToken(kind) 789091"];
10213 [label="param IsAnyToken(SyntaxKind kind) 789092"];
10214 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 789093"];
10215 [label="return true; 789094"];
10216 [label="this.CurrentToken 789095"];
10217 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 789096"];
10218 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 789097"];
10219 [label="ct.Kind 789098"];
10220 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 789099"];
10221 [label="param GetTrailingTrivia(this) 789100"];
10222 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 789101"];
10223 [label="MoveToNextToken(); 789102"];
10224 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 789103"];
10225 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 789104"];
10226 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 789105"];
10227 [label="param CSharpSyntaxNode(this) 789106"];
10228 [label="GreenStats.NoteGreen(this); 789107"];
10229 [label="param SetFactoryContext(SyntaxFactoryContext context) 789108"];
10230 [label="param SetFactoryContext(this) 789109"];
10231 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 789110"];
10232 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 789111"];
10233 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 789112"];
10234 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 789113"];
10235 [label="return result; 789114"];
10236 [label="body.Free(_pool); 789115"];
10237 [label="body.Free(_pool) 789116"];
10238 [label="param Free(SyntaxListPool pool) 789117"];
10239 [label="param Free(this) 789118"];
10240 [label="body.Free(_pool); 789119"];
10241 [label="return parseFunc(); 789120"];
10242 [label="var compilationUnit = (CompilationUnitSyntax)parser.ParseCompilationUnit().CreateRed(); 789121"];
10243 [label="var compilationUnit = (CompilationUnitSyntax)parser.ParseCompilationUnit().CreateRed(); 789122"];
10244 [label="param CSharpSyntaxNode(GreenNode green) 789123"];
10245 [label="param CSharpSyntaxNode(SyntaxNode? parent) 789124"];
10246 [label="param CSharpSyntaxNode(int position) 789125"];
10247 [label="param CSharpSyntaxNode(this) 789126"];
10248 [label="green 789127"];
10249 [label="parent 789128"];
10250 [label="position 789129"];
10251 [label="param CSharpSyntaxNode(this) 789130"];
10252 [label="param CSharpSyntaxNode(this) 789131"];
10253 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789132"];
10254 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789133"];
10255 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789134"];
10256 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789135"];
10257 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789136"];
10258 [label="parser.Directives 789137"];
10259 [label="get { return lexer.Directives; } 789138"];
10260 [label="lexer.Directives 789139"];
10261 [label="get { return _directives; } 789140"];
10262 [label="return _directives; 789141"];
10263 [label="return lexer.Directives; 789142"];
10264 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789143"];
10265 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789144"];
10266 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 789145"];
10267 [label="new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true) 789146"];
10268 [label="param ParsedSyntaxTree(SourceText? textOpt) 789147"];
10269 [label="param ParsedSyntaxTree(Encoding? encodingOpt) 789148"];
10270 [label="param ParsedSyntaxTree(SourceHashAlgorithm checksumAlgorithm) 789149"];
10271 [label="param ParsedSyntaxTree(string path) 789150"];
10272 [label="param ParsedSyntaxTree(CSharpParseOptions options) 789151"];
10273 [label="param ParsedSyntaxTree(CSharpSyntaxNode root) 789152"];
10274 [label="param ParsedSyntaxTree(Syntax.InternalSyntax.DirectiveStack directives) 789153"];
10275 [label="param ParsedSyntaxTree(ImmutableDictionary<string, ReportDiagnostic>? diagnosticOptions) 789154"];
10276 [label="param ParsedSyntaxTree(bool cloneRoot) 789155"];
10277 [label="param ParsedSyntaxTree(this) 789156"];
10278 [label="param ParsedSyntaxTree(this) 789157"];
10279 [label="param CSharpSyntaxTree(this) 789158"];
10280 [label="param CSharpSyntaxTree(this) 789159"];
10281 [label="_hasDirectives 789160"];
10282 [label="_lazyLineDirectiveMap 789161"];
10283 [label="_lazyPragmaWarningStateMap 789162"];
10284 [label="_lazyNullableContextStateMap 789163"];
10285 [label="_lazyIsGeneratedCode = GeneratedKind.Unknown 789164"];
10286 [label="_options 789165"];
10287 [label="_path 789166"];
10288 [label="_root 789167"];
10289 [label="_hasCompilationUnitRoot 789168"];
10290 [label="_encodingOpt 789169"];
10291 [label="_checksumAlgorithm 789170"];
10292 [label="_diagnosticOptions 789171"];
10293 [label="_lazyText 789172"];
10294 [label="Debug.Assert(root != null); 789173"];
10295 [label="Debug.Assert(root != null); 789174"];
10296 [label="Debug.Assert(options != null); 789175"];
10297 [label="Debug.Assert(options != null); 789176"];
10298 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 789177"];
10299 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 789178"];
10300 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 789179"];
10301 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 789180"];
10302 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 789181"];
10303 [label="_lazyText 789182"];
10304 [label="_encodingOpt = encodingOpt ?? textOpt?.Encoding; 789183"];
10305 [label="_encodingOpt 789184"];
10306 [label="_checksumAlgorithm 789185"];
10307 [label="_options 789186"];
10308 [label="_path = path ?? string.Empty; 789187"];
10309 [label="_path 789188"];
10310 [label="cloneRoot 789189"];
10311 [label="_root = cloneRoot ? this.CloneNodeAsRoot(root) : root; 789190"];
10312 [label="this.CloneNodeAsRoot(root) 789191"];
10313 [label="param CloneNodeAsRoot(T node) 789192"];
10314 [label="param CloneNodeAsRoot(this) 789193"];
10315 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 789194"];
10316 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 789195"];
10317 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 789196"];
10318 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 789197"];
10319 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 789198"];
10320 [label="param CSharpSyntaxNode(this) 789199"];
10321 [label="_root 789200"];
10322 [label="root.Kind() 789201"];
10323 [label="param Kind(this) 789202"];
10324 [label="return (SyntaxKind)this.Green.RawKind; 789203"];
10325 [label="_hasCompilationUnitRoot = root.Kind() == SyntaxKind.CompilationUnit; 789204"];
10326 [label="_hasCompilationUnitRoot 789205"];
10327 [label="_diagnosticOptions = diagnosticOptions ?? EmptyDiagnosticOptions; 789206"];
10328 [label="_diagnosticOptions = diagnosticOptions ?? EmptyDiagnosticOptions; 789207"];
10329 [label="_diagnosticOptions 789208"];
10330 [label="this.SetDirectiveStack(directives); 789209"];
10331 [label="this.SetDirectiveStack(directives) 789210"];
10332 [label="param SetDirectiveStack(InternalSyntax.DirectiveStack directives) 789211"];
10333 [label="param SetDirectiveStack(this) 789212"];
10334 [label="_directives 789213"];
10335 [label="_hasDirectives = true; 789214"];
10336 [label="_hasDirectives 789215"];
10337 [label="this.SetDirectiveStack(directives); 789216"];
10338 [label="tree.VerifySource(); 789217"];
10339 [label="tree.VerifySource(); 789218"];
10340 [label="tree.VerifySource(); 789219"];
10341 [label="param GetRootCore(CancellationToken cancellationToken) 789220"];
10342 [label="param GetRootCore(this) 789221"];
10343 [label="return this.GetRoot(cancellationToken); 789222"];
10344 [label="this.GetRoot(cancellationToken) 789223"];
10345 [label="param GetRoot(CancellationToken cancellationToken) 789224"];
10346 [label="param GetRoot(this) 789225"];
10347 [label="return _root; 789226"];
10348 [label="return this.GetRoot(cancellationToken); 789227"];
10349 [label="param GetText(CancellationToken cancellationToken) 789228"];
10350 [label="param GetText(this) 789229"];
10351 [label="if (_lazyText == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyText, this.GetRoot(cancellationToken).GetText(_encodingOpt, _checksumAlgorithm), null);\n                } 789230"];
10352 [label="if (_lazyText == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyText, this.GetRoot(cancellationToken).GetText(_encodingOpt, _checksumAlgorithm), null);\n                } 789231"];
10353 [label="return _lazyText; 789232"];
10354 [label="=> true 789233"];
10355 [label="true 789234"];
10356 [label="tree.VerifySource(); 789235"];
10357 [label="param WriteTokenTo(System.IO.TextWriter writer) 789236"];
10358 [label="param WriteTokenTo(bool leading) 789237"];
10359 [label="param WriteTokenTo(bool trailing) 789238"];
10360 [label="param WriteTokenTo(this) 789239"];
10361 [label="if (leading)\n            {\n                var trivia = this.GetLeadingTrivia();\n                if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                }\n            } 789240"];
10362 [label="this.GetLeadingTrivia() 789241"];
10363 [label="param GetLeadingTrivia(this) 789242"];
10364 [label="return this.LeadingField; 789243"];
10365 [label="var trivia = this.GetLeadingTrivia(); 789244"];
10366 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789245"];
10367 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789246"];
10368 [label="this.Text 789247"];
10369 [label="get { return SyntaxFacts.GetText(this.Kind); } 789248"];
10370 [label="this.Kind 789249"];
10371 [label="return (SyntaxKind)this.RawKind; 789250"];
10372 [label="SyntaxFacts.GetText(this.Kind) 789251"];
10373 [label="writer.Write(this.Text); 789252"];
10374 [label="writer.Write(this.Text); 789253"];
10375 [label="if (trailing)\n            {\n                var trivia = this.GetTrailingTrivia();\n                if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                }\n            } 789254"];
10376 [label="this.GetTrailingTrivia() 789255"];
10377 [label="param GetTrailingTrivia(this) 789256"];
10378 [label="return this.TrailingField; 789257"];
10379 [label="var trivia = this.GetTrailingTrivia(); 789258"];
10380 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789259"];
10381 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789260"];
10382 [label="trivia.WriteTo(writer, true, true); 789261"];
10383 [label="trivia.WriteTo(writer, true, true); 789262"];
10384 [label="=> true 789263"];
10385 [label="true 789264"];
10386 [label="param WriteTriviaTo(System.IO.TextWriter writer) 789265"];
10387 [label="param WriteTriviaTo(this) 789266"];
10388 [label="writer.Write(Text); 789267"];
10389 [label="writer.Write(Text); 789268"];
10390 [label="param GetLeadingTrivia(this) 789269"];
10391 [label="return null; 789270"];
10392 [label="var trivia = this.GetLeadingTrivia(); 789271"];
10393 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789272"];
10394 [label="get { return this.TextField; } 789273"];
10395 [label="return this.TextField; 789274"];
10396 [label="param GetTrailingTrivia(this) 789275"];
10397 [label="=> true 789276"];
10398 [label="return this.LeadingField; 789277"];
10399 [label="var trivia = this.GetLeadingTrivia(); 789278"];
10400 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789279"];
10401 [label="trivia.WriteTo(writer, true, true); 789280"];
10402 [label="trivia.WriteTo(writer, true, true); 789281"];
10403 [label="=> true 789282"];
10404 [label="=> true 789283"];
10405 [label="param GetTrailingTrivia(this) 789284"];
10406 [label="var trivia = this.GetTrailingTrivia(); 789285"];
10407 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 789286"];
10408 [label="return tree; 789287"];
10409 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 789288"];
10410 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 789289"];
10411 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 789290"];
10412 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 789291"];
10413 [label="param CheckSerializable(SyntaxTree tree) 789292"];
10414 [label="var stream = new MemoryStream(); 789293"];
10415 [label="var root = tree.GetRoot(); 789294"];
10416 [label="var root = tree.GetRoot(); 789295"];
10417 [label="param GetRootCore(CancellationToken cancellationToken) 789296"];
10418 [label="this.GetRoot(cancellationToken) 789297"];
10419 [label="param GetRoot(CancellationToken cancellationToken) 789298"];
10420 [label="root.SerializeTo(stream); 789299"];
10421 [label="root.SerializeTo(stream); 789300"];
10422 [label="root.SerializeTo(stream); 789301"];
10423 [label="=> base.ShouldReuseInSerialization &&\n                                                             FullWidth < Lexer.MaxCachedTokenSize 789302"];
10424 [label="FullWidth < Lexer.MaxCachedTokenSize 789303"];
10425 [label="base.ShouldReuseInSerialization &&\n                                                             FullWidth < Lexer.MaxCachedTokenSize 789304"];
10426 [label="param WriteTo(ObjectWriter writer) 789305"];
10427 [label="param WriteTo(this) 789306"];
10428 [label="base.WriteTo(writer); 789307"];
10429 [label="base.WriteTo(writer); 789308"];
10430 [label="writer.WriteValue(this.LeadingField); 789309"];
10431 [label="writer.WriteValue(this.TrailingField); 789310"];
10432 [label="writer.WriteValue(this.TrailingField); 789311"];
10433 [label="=> this.Kind == SyntaxKind.WhitespaceTrivia &&\n                                                             FullWidth < Lexer.MaxCachedTokenSize 789312"];
10434 [label="this.Kind 789313"];
10435 [label="get { return (SyntaxKind)this.RawKind; } 789314"];
10436 [label="this.Kind == SyntaxKind.WhitespaceTrivia 789315"];
10437 [label="FullWidth < Lexer.MaxCachedTokenSize 789316"];
10438 [label="this.Kind == SyntaxKind.WhitespaceTrivia &&\n                                                             FullWidth < Lexer.MaxCachedTokenSize 789317"];
10439 [label="param WriteTo(ObjectWriter writer) 789318"];
10440 [label="param WriteTo(this) 789319"];
10441 [label="base.WriteTo(writer); 789320"];
10442 [label="base.WriteTo(writer); 789321"];
10443 [label="writer.WriteString(this.Text); 789322"];
10444 [label="param WriteTo(ObjectWriter writer) 789323"];
10445 [label="param WriteTo(this) 789324"];
10446 [label="base.WriteTo(writer); 789325"];
10447 [label="base.WriteTo(writer) 789326"];
10448 [label="param WriteTo(ObjectWriter writer) 789327"];
10449 [label="param WriteTo(this) 789328"];
10450 [label="base.WriteTo(writer); 789329"];
10451 [label="base.WriteTo(writer); 789330"];
10452 [label="writer.WriteString(this.TextField); 789331"];
10453 [label="base.WriteTo(writer); 789332"];
10454 [label="writer.WriteValue(_trailing); 789333"];
10455 [label="writer.WriteValue(_trailing); 789334"];
10456 [label="this.Kind 789335"];
10457 [label="writer.WriteValue(this.LeadingField); 789336"];
10458 [label="this.Kind 789337"];
10459 [label="stream.Position = 0; 789338"];
10460 [label="stream.Position 789339"];
10461 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 789340"];
10462 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 789341"];
10463 [label="CSharpSyntaxNode.DeserializeFrom(stream) 789342"];
10464 [label="param DeserializeFrom(Stream stream) 789343"];
10465 [label="param DeserializeFrom(CancellationToken cancellationToken = default) 789344"];
10466 [label="if (stream == null)\n            {\n                throw new ArgumentNullException(nameof(stream));\n            } 789345"];
10467 [label="if (stream == null)\n            {\n                throw new ArgumentNullException(nameof(stream));\n            } 789346"];
10468 [label="if (!stream.CanRead)\n            {\n                throw new InvalidOperationException(CodeAnalysisResources.TheStreamCannotBeReadFrom);\n            } 789347"];
10469 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 789348"];
10470 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 789349"];
10471 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 789350"];
10472 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 789351"];
10473 [label="if (reader == null)\n            {\n                throw new ArgumentException(CodeAnalysisResources.Stream_contains_invalid_data, nameof(stream));\n            } 789352"];
10474 [label="if (reader == null)\n            {\n                throw new ArgumentException(CodeAnalysisResources.Stream_contains_invalid_data, nameof(stream));\n            } 789353"];
10475 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 789354"];
10476 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 789355"];
10477 [label="param CSharpSyntaxNode(ObjectReader reader) 789356"];
10478 [label="param CSharpSyntaxNode(this) 789357"];
10479 [label="reader 789358"];
10480 [label="param CSharpSyntaxNode(this) 789359"];
10481 [label="param CSharpSyntaxNode(this) 789360"];
10482 [label="param SyntaxTokenWithTrivia(ObjectReader reader) 789361"];
10483 [label="param SyntaxTokenWithTrivia(this) 789362"];
10484 [label="reader 789363"];
10485 [label="param SyntaxTokenWithTrivia(this) 789364"];
10486 [label="param SyntaxToken(ObjectReader reader) 789365"];
10487 [label="param SyntaxToken(this) 789366"];
10488 [label="reader 789367"];
10489 [label="param SyntaxToken(this) 789368"];
10490 [label="param CSharpSyntaxNode(ObjectReader reader) 789369"];
10491 [label="param CSharpSyntaxNode(this) 789370"];
10492 [label="reader 789371"];
10493 [label="param CSharpSyntaxNode(this) 789372"];
10494 [label="param CSharpSyntaxNode(this) 789373"];
10495 [label="this.Text 789374"];
10496 [label="get { return SyntaxFacts.GetText(this.Kind); } 789375"];
10497 [label="this.Kind 789376"];
10498 [label="return (SyntaxKind)this.RawKind; 789377"];
10499 [label="SyntaxFacts.GetText(this.Kind) 789378"];
10500 [label="var text = this.Text; 789379"];
10501 [label="if (text != null)\n            {\n                FullWidth = text.Length;\n            } 789380"];
10502 [label="if (text != null)\n            {\n                FullWidth = text.Length;\n            } 789381"];
10503 [label="FullWidth 789382"];
10504 [label="this.flags |= NodeFlags.IsNotMissing; 789383"];
10505 [label="this.flags 789384"];
10506 [label="var leading = (GreenNode)reader.ReadValue(); 789385"];
10507 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 789386"];
10508 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 789387"];
10509 [label="var trailing = (GreenNode)reader.ReadValue(); 789388"];
10510 [label="var trailing = (GreenNode)reader.ReadValue(); 789389"];
10511 [label="var trailing = (GreenNode)reader.ReadValue(); 789390"];
10512 [label="param SyntaxTrivia(ObjectReader reader) 789391"];
10513 [label="param SyntaxTrivia(this) 789392"];
10514 [label="reader 789393"];
10515 [label="param SyntaxTrivia(this) 789394"];
10516 [label="param CSharpSyntaxNode(ObjectReader reader) 789395"];
10517 [label="param CSharpSyntaxNode(this) 789396"];
10518 [label="param CSharpSyntaxNode(this) 789397"];
10519 [label="this.Text = reader.ReadString(); 789398"];
10520 [label="this.Text 789399"];
10521 [label="this.FullWidth 789400"];
10522 [label="this.Kind 789401"];
10523 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 789402"];
10524 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 789403"];
10525 [label="this.AdjustFlagsAndWidth(trailing); 789404"];
10526 [label="this.TrailingField 789405"];
10527 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 789406"];
10528 [label="param SyntaxIdentifierWithTrailingTrivia(ObjectReader reader) 789407"];
10529 [label="param SyntaxIdentifierWithTrailingTrivia(this) 789408"];
10530 [label="reader 789409"];
10531 [label="param SyntaxIdentifierWithTrailingTrivia(this) 789410"];
10532 [label="param SyntaxIdentifier(ObjectReader reader) 789411"];
10533 [label="param SyntaxIdentifier(this) 789412"];
10534 [label="reader 789413"];
10535 [label="param SyntaxIdentifier(this) 789414"];
10536 [label="param SyntaxToken(ObjectReader reader) 789415"];
10537 [label="param SyntaxToken(this) 789416"];
10538 [label="reader 789417"];
10539 [label="param SyntaxToken(this) 789418"];
10540 [label="param CSharpSyntaxNode(ObjectReader reader) 789419"];
10541 [label="param CSharpSyntaxNode(this) 789420"];
10542 [label="reader 789421"];
10543 [label="param CSharpSyntaxNode(this) 789422"];
10544 [label="param CSharpSyntaxNode(this) 789423"];
10545 [label="this.Text 789424"];
10546 [label="get { return this.TextField; } 789425"];
10547 [label="if (text != null)\n            {\n                FullWidth = text.Length;\n            } 789426"];
10548 [label="this.TextField = reader.ReadString(); 789427"];
10549 [label="this.TextField 789428"];
10550 [label="this.FullWidth 789429"];
10551 [label="var trailing = (GreenNode)reader.ReadValue(); 789430"];
10552 [label="var trailing = (GreenNode)reader.ReadValue(); 789431"];
10553 [label="var trailing = (GreenNode)reader.ReadValue(); 789432"];
10554 [label="param SyntaxTrivia(this) 789433"];
10555 [label="param SyntaxTrivia(this) 789434"];
10556 [label="param CSharpSyntaxNode(this) 789435"];
10557 [label="param CSharpSyntaxNode(this) 789436"];
10558 [label="this.Kind 789437"];
10559 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    _trailing = trailing;\n                } 789438"];
10560 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    _trailing = trailing;\n                } 789439"];
10561 [label="this.AdjustFlagsAndWidth(trailing); 789440"];
10562 [label="_trailing 789441"];
10563 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 789442"];
10564 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 789443"];
10565 [label="var leading = (GreenNode)reader.ReadValue(); 789444"];
10566 [label="var leading = (GreenNode)reader.ReadValue(); 789445"];
10567 [label="param SyntaxTrivia(this) 789446"];
10568 [label="param SyntaxTrivia(this) 789447"];
10569 [label="param CSharpSyntaxNode(this) 789448"];
10570 [label="param CSharpSyntaxNode(this) 789449"];
10571 [label="this.Kind 789450"];
10572 [label="this.AdjustFlagsAndWidth(leading); 789451"];
10573 [label="this.LeadingField 789452"];
10574 [label="var trailing = (GreenNode)reader.ReadValue(); 789453"];
10575 [label="param SyntaxToken(ObjectReader reader) 789454"];
10576 [label="param SyntaxToken(this) 789455"];
10577 [label="reader 789456"];
10578 [label="param SyntaxToken(this) 789457"];
10579 [label="param CSharpSyntaxNode(ObjectReader reader) 789458"];
10580 [label="param CSharpSyntaxNode(this) 789459"];
10581 [label="reader 789460"];
10582 [label="param CSharpSyntaxNode(this) 789461"];
10583 [label="this.Text 789462"];
10584 [label="get { return SyntaxFacts.GetText(this.Kind); } 789463"];
10585 [label="this.Kind 789464"];
10586 [label="SyntaxFacts.GetText(this.Kind) 789465"];
10587 [label="if (text != null)\n            {\n                FullWidth = text.Length;\n            } 789466"];
10588 [label="return root.CreateRed(); 789467"];
10589 [label="return root.CreateRed(); 789468"];
10590 [label="param CSharpSyntaxNode(this) 789469"];
10591 [label="return tree; 789470"];
10592 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 789471"];
10593 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 789472"];
10594 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 789473"];
10595 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 789474"];
10596 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 789475"];
10597 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 789476"];
10598 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 789477"];
10599 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 789478"];
10600 [label="this.GetRoot(cancellationToken) 789479"];
10601 [label="param GetRoot(CancellationToken cancellationToken) 789480"];
10602 [label="param CSharpSyntaxNode(this) 789481"];
10603 [label="=> true 789482"];
10604 [label="true 789483"];
10605 [label="hasTopLevelStatements 789484"];
10606 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 789485"];
10607 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 789486"];
10608 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 789487"];
10609 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 789488"];
10610 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 789489"];
10611 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 789490"];
10612 [label="param ValidateIOperations(Func<Compilation> createCompilation) 789491"];
10613 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 789492"];
10614 [label="return; 789493"];
10615 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 789494"];
10616 [label="var compilation = createCompilationLambda(); 789495"];
10617 [label="var compilation = createCompilationLambda(); 789496"];
10618 [label="return Guid.NewGuid().ToString('D'); 789497"];
10619 [label="var compilation = createCompilationLambda(); 789498"];
10620 [label="OutputKind.ConsoleApplication 789499"];
10621 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 789500"];
10622 [label="param CSharpCompilationOptions(OutputKind outputKind) 789501"];
10623 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 789502"];
10624 [label="param CSharpCompilationOptions(string? moduleName = null) 789503"];
10625 [label="param CSharpCompilationOptions(string? mainTypeName = null) 789504"];
10626 [label="param CSharpCompilationOptions(string? scriptClassName = null) 789505"];
10627 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 789506"];
10628 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 789507"];
10629 [label="param CSharpCompilationOptions(bool checkOverflow = false) 789508"];
10630 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 789509"];
10631 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 789510"];
10632 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 789511"];
10633 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 789512"];
10634 [label="param CSharpCompilationOptions(bool? delaySign = null) 789513"];
10635 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 789514"];
10636 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 789515"];
10637 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 789516"];
10638 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 789517"];
10639 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 789518"];
10640 [label="param CSharpCompilationOptions(bool deterministic = false) 789519"];
10641 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 789520"];
10642 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 789521"];
10643 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 789522"];
10644 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 789523"];
10645 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 789524"];
10646 [label="param CSharpCompilationOptions(bool publicSign = false) 789525"];
10647 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 789526"];
10648 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 789527"];
10649 [label="param CSharpCompilationOptions(this) 789528"];
10650 [label="outputKind 789529"];
10651 [label="reportSuppressedDiagnostics 789530"];
10652 [label="moduleName 789531"];
10653 [label="mainTypeName 789532"];
10654 [label="scriptClassName 789533"];
10655 [label="usings 789534"];
10656 [label="optimizationLevel 789535"];
10657 [label="checkOverflow 789536"];
10658 [label="allowUnsafe 789537"];
10659 [label="cryptoKeyContainer 789538"];
10660 [label="cryptoKeyFile 789539"];
10661 [label="cryptoPublicKey 789540"];
10662 [label="delaySign 789541"];
10663 [label="platform 789542"];
10664 [label="generalDiagnosticOption 789543"];
10665 [label="warningLevel 789544"];
10666 [label="specificDiagnosticOptions 789545"];
10667 [label="concurrentBuild 789546"];
10668 [label="deterministic 789547"];
10669 [label="default 789548"];
10670 [label="false 789549"];
10671 [label="xmlReferenceResolver 789550"];
10672 [label="sourceReferenceResolver 789551"];
10673 [label="null 789552"];
10674 [label="metadataReferenceResolver 789553"];
10675 [label="assemblyIdentityComparer 789554"];
10676 [label="strongNameProvider 789555"];
10677 [label="metadataImportOptions 789556"];
10678 [label="false 789557"];
10679 [label="publicSign 789558"];
10680 [label="BinderFlags.None 789559"];
10681 [label="nullableContextOptions 789560"];
10682 [label="param CSharpCompilationOptions(OutputKind outputKind) 789561"];
10683 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 789562"];
10684 [label="param CSharpCompilationOptions(string? moduleName) 789563"];
10685 [label="param CSharpCompilationOptions(string? mainTypeName) 789564"];
10686 [label="param CSharpCompilationOptions(string? scriptClassName) 789565"];
10687 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 789566"];
10688 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 789567"];
10689 [label="param CSharpCompilationOptions(bool checkOverflow) 789568"];
10690 [label="param CSharpCompilationOptions(bool allowUnsafe) 789569"];
10691 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 789570"];
10692 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 789571"];
10693 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 789572"];
10694 [label="param CSharpCompilationOptions(bool? delaySign) 789573"];
10695 [label="param CSharpCompilationOptions(Platform platform) 789574"];
10696 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 789575"];
10697 [label="param CSharpCompilationOptions(int warningLevel) 789576"];
10698 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 789577"];
10699 [label="param CSharpCompilationOptions(bool concurrentBuild) 789578"];
10700 [label="param CSharpCompilationOptions(bool deterministic) 789579"];
10701 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 789580"];
10702 [label="param CSharpCompilationOptions(bool debugPlusMode) 789581"];
10703 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 789582"];
10704 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 789583"];
10705 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 789584"];
10706 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 789585"];
10707 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 789586"];
10708 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 789587"];
10709 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 789588"];
10710 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 789589"];
10711 [label="param CSharpCompilationOptions(bool publicSign) 789590"];
10712 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 789591"];
10713 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 789592"];
10714 [label="param CSharpCompilationOptions(this) 789593"];
10715 [label="outputKind 789594"];
10716 [label="reportSuppressedDiagnostics 789595"];
10717 [label="moduleName 789596"];
10718 [label="mainTypeName 789597"];
10719 [label="scriptClassName 789598"];
10720 [label="cryptoKeyContainer 789599"];
10721 [label="cryptoKeyFile 789600"];
10722 [label="cryptoPublicKey 789601"];
10723 [label="delaySign 789602"];
10724 [label="publicSign 789603"];
10725 [label="optimizationLevel 789604"];
10726 [label="checkOverflow 789605"];
10727 [label="platform 789606"];
10728 [label="generalDiagnosticOption 789607"];
10729 [label="warningLevel 789608"];
10730 [label="specificDiagnosticOptions 789609"];
10731 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 789610"];
10732 [label="concurrentBuild 789611"];
10733 [label="deterministic 789612"];
10734 [label="currentLocalTime 789613"];
10735 [label="debugPlusMode 789614"];
10736 [label="xmlReferenceResolver 789615"];
10737 [label="sourceReferenceResolver 789616"];
10738 [label="syntaxTreeOptionsProvider 789617"];
10739 [label="metadataReferenceResolver 789618"];
10740 [label="assemblyIdentityComparer 789619"];
10741 [label="strongNameProvider 789620"];
10742 [label="metadataImportOptions 789621"];
10743 [label="referencesSupersedeLowerVersions 789622"];
10744 [label="param CSharpCompilationOptions(this) 789623"];
10745 [label="public bool AllowUnsafe { get; private set; } 789624"];
10746 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 789625"];
10747 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 789626"];
10748 [label="this.Usings = usings.AsImmutableOrEmpty(); 789627"];
10749 [label="this.Usings 789628"];
10750 [label="this.AllowUnsafe 789629"];
10751 [label="this.TopLevelBinderFlags 789630"];
10752 [label="this.NullableContextOptions 789631"];
10753 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 789632"];
10754 [label="OutputKind.DynamicallyLinkedLibrary 789633"];
10755 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 789634"];
10756 [label="param CSharpCompilationOptions(OutputKind outputKind) 789635"];
10757 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 789636"];
10758 [label="param CSharpCompilationOptions(string? moduleName = null) 789637"];
10759 [label="param CSharpCompilationOptions(string? mainTypeName = null) 789638"];
10760 [label="param CSharpCompilationOptions(string? scriptClassName = null) 789639"];
10761 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 789640"];
10762 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 789641"];
10763 [label="param CSharpCompilationOptions(bool checkOverflow = false) 789642"];
10764 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 789643"];
10765 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 789644"];
10766 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 789645"];
10767 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 789646"];
10768 [label="param CSharpCompilationOptions(bool? delaySign = null) 789647"];
10769 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 789648"];
10770 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 789649"];
10771 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 789650"];
10772 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 789651"];
10773 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 789652"];
10774 [label="param CSharpCompilationOptions(bool deterministic = false) 789653"];
10775 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 789654"];
10776 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 789655"];
10777 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 789656"];
10778 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 789657"];
10779 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 789658"];
10780 [label="param CSharpCompilationOptions(bool publicSign = false) 789659"];
10781 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 789660"];
10782 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 789661"];
10783 [label="param CSharpCompilationOptions(this) 789662"];
10784 [label="outputKind 789663"];
10785 [label="reportSuppressedDiagnostics 789664"];
10786 [label="moduleName 789665"];
10787 [label="mainTypeName 789666"];
10788 [label="scriptClassName 789667"];
10789 [label="usings 789668"];
10790 [label="optimizationLevel 789669"];
10791 [label="checkOverflow 789670"];
10792 [label="allowUnsafe 789671"];
10793 [label="cryptoKeyContainer 789672"];
10794 [label="cryptoKeyFile 789673"];
10795 [label="cryptoPublicKey 789674"];
10796 [label="delaySign 789675"];
10797 [label="platform 789676"];
10798 [label="generalDiagnosticOption 789677"];
10799 [label="warningLevel 789678"];
10800 [label="specificDiagnosticOptions 789679"];
10801 [label="concurrentBuild 789680"];
10802 [label="deterministic 789681"];
10803 [label="default 789682"];
10804 [label="false 789683"];
10805 [label="xmlReferenceResolver 789684"];
10806 [label="sourceReferenceResolver 789685"];
10807 [label="null 789686"];
10808 [label="metadataReferenceResolver 789687"];
10809 [label="assemblyIdentityComparer 789688"];
10810 [label="strongNameProvider 789689"];
10811 [label="metadataImportOptions 789690"];
10812 [label="false 789691"];
10813 [label="publicSign 789692"];
10814 [label="BinderFlags.None 789693"];
10815 [label="nullableContextOptions 789694"];
10816 [label="param CSharpCompilationOptions(OutputKind outputKind) 789695"];
10817 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 789696"];
10818 [label="param CSharpCompilationOptions(string? moduleName) 789697"];
10819 [label="param CSharpCompilationOptions(string? mainTypeName) 789698"];
10820 [label="param CSharpCompilationOptions(string? scriptClassName) 789699"];
10821 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 789700"];
10822 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 789701"];
10823 [label="param CSharpCompilationOptions(bool checkOverflow) 789702"];
10824 [label="param CSharpCompilationOptions(bool allowUnsafe) 789703"];
10825 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 789704"];
10826 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 789705"];
10827 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 789706"];
10828 [label="param CSharpCompilationOptions(bool? delaySign) 789707"];
10829 [label="param CSharpCompilationOptions(Platform platform) 789708"];
10830 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 789709"];
10831 [label="param CSharpCompilationOptions(int warningLevel) 789710"];
10832 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 789711"];
10833 [label="param CSharpCompilationOptions(bool concurrentBuild) 789712"];
10834 [label="param CSharpCompilationOptions(bool deterministic) 789713"];
10835 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 789714"];
10836 [label="param CSharpCompilationOptions(bool debugPlusMode) 789715"];
10837 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 789716"];
10838 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 789717"];
10839 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 789718"];
10840 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 789719"];
10841 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 789720"];
10842 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 789721"];
10843 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 789722"];
10844 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 789723"];
10845 [label="param CSharpCompilationOptions(bool publicSign) 789724"];
10846 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 789725"];
10847 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 789726"];
10848 [label="param CSharpCompilationOptions(this) 789727"];
10849 [label="outputKind 789728"];
10850 [label="reportSuppressedDiagnostics 789729"];
10851 [label="moduleName 789730"];
10852 [label="mainTypeName 789731"];
10853 [label="scriptClassName 789732"];
10854 [label="cryptoKeyContainer 789733"];
10855 [label="cryptoKeyFile 789734"];
10856 [label="cryptoPublicKey 789735"];
10857 [label="delaySign 789736"];
10858 [label="publicSign 789737"];
10859 [label="optimizationLevel 789738"];
10860 [label="checkOverflow 789739"];
10861 [label="platform 789740"];
10862 [label="generalDiagnosticOption 789741"];
10863 [label="warningLevel 789742"];
10864 [label="specificDiagnosticOptions 789743"];
10865 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 789744"];
10866 [label="concurrentBuild 789745"];
10867 [label="deterministic 789746"];
10868 [label="currentLocalTime 789747"];
10869 [label="debugPlusMode 789748"];
10870 [label="xmlReferenceResolver 789749"];
10871 [label="sourceReferenceResolver 789750"];
10872 [label="syntaxTreeOptionsProvider 789751"];
10873 [label="metadataReferenceResolver 789752"];
10874 [label="assemblyIdentityComparer 789753"];
10875 [label="strongNameProvider 789754"];
10876 [label="metadataImportOptions 789755"];
10877 [label="referencesSupersedeLowerVersions 789756"];
10878 [label="param CSharpCompilationOptions(this) 789757"];
10879 [label="public bool AllowUnsafe { get; private set; } 789758"];
10880 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 789759"];
10881 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 789760"];
10882 [label="this.Usings = usings.AsImmutableOrEmpty(); 789761"];
10883 [label="this.Usings 789762"];
10884 [label="this.AllowUnsafe 789763"];
10885 [label="this.TopLevelBinderFlags 789764"];
10886 [label="this.NullableContextOptions 789765"];
10887 [label="true 789766"];
10888 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 789767"];
10889 [label="param WithReferencesSupersedeLowerVersions(bool value) 789768"];
10890 [label="param WithReferencesSupersedeLowerVersions(this) 789769"];
10891 [label="if (value == this.ReferencesSupersedeLowerVersions)\n            {\n                return this;\n            } 789770"];
10892 [label="return new CSharpCompilationOptions(this) { ReferencesSupersedeLowerVersions = value }; 789771"];
10893 [label="return new CSharpCompilationOptions(this) { ReferencesSupersedeLowerVersions = value }; 789772"];
10894 [label="new CSharpCompilationOptions(this) { ReferencesSupersedeLowerVersions = value } 789773"];
10895 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 789774"];
10896 [label="param CSharpCompilationOptions(this) 789775"];
10897 [label="other.OutputKind 789776"];
10898 [label="other.ModuleName 789777"];
10899 [label="other.MainTypeName 789778"];
10900 [label="other.ScriptClassName 789779"];
10901 [label="other.Usings 789780"];
10902 [label="other.OptimizationLevel 789781"];
10903 [label="other.CheckOverflow 789782"];
10904 [label="other.AllowUnsafe 789783"];
10905 [label="other.CryptoKeyContainer 789784"];
10906 [label="other.CryptoKeyFile 789785"];
10907 [label="other.CryptoPublicKey 789786"];
10908 [label="other.DelaySign 789787"];
10909 [label="other.Platform 789788"];
10910 [label="other.GeneralDiagnosticOption 789789"];
10911 [label="other.WarningLevel 789790"];
10912 [label="other.SpecificDiagnosticOptions 789791"];
10913 [label="other.ConcurrentBuild 789792"];
10914 [label="other.Deterministic 789793"];
10915 [label="other.CurrentLocalTime 789794"];
10916 [label="other.DebugPlusMode 789795"];
10917 [label="other.XmlReferenceResolver 789796"];
10918 [label="other.SourceReferenceResolver 789797"];
10919 [label="other.SyntaxTreeOptionsProvider 789798"];
10920 [label="other.MetadataReferenceResolver 789799"];
10921 [label="other.AssemblyIdentityComparer 789800"];
10922 [label="other.StrongNameProvider 789801"];
10923 [label="other.MetadataImportOptions 789802"];
10924 [label="other.ReferencesSupersedeLowerVersions 789803"];
10925 [label="other.ReportSuppressedDiagnostics 789804"];
10926 [label="other.PublicSign 789805"];
10927 [label="other.TopLevelBinderFlags 789806"];
10928 [label="other.NullableContextOptions 789807"];
10929 [label="param CSharpCompilationOptions(this) 789808"];
10930 [label="param CSharpCompilationOptions(OutputKind outputKind) 789809"];
10931 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 789810"];
10932 [label="param CSharpCompilationOptions(string? moduleName) 789811"];
10933 [label="param CSharpCompilationOptions(string? mainTypeName) 789812"];
10934 [label="param CSharpCompilationOptions(string? scriptClassName) 789813"];
10935 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 789814"];
10936 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 789815"];
10937 [label="param CSharpCompilationOptions(bool checkOverflow) 789816"];
10938 [label="param CSharpCompilationOptions(bool allowUnsafe) 789817"];
10939 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 789818"];
10940 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 789819"];
10941 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 789820"];
10942 [label="param CSharpCompilationOptions(bool? delaySign) 789821"];
10943 [label="param CSharpCompilationOptions(Platform platform) 789822"];
10944 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 789823"];
10945 [label="param CSharpCompilationOptions(int warningLevel) 789824"];
10946 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 789825"];
10947 [label="param CSharpCompilationOptions(bool concurrentBuild) 789826"];
10948 [label="param CSharpCompilationOptions(bool deterministic) 789827"];
10949 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 789828"];
10950 [label="param CSharpCompilationOptions(bool debugPlusMode) 789829"];
10951 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 789830"];
10952 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 789831"];
10953 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 789832"];
10954 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 789833"];
10955 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 789834"];
10956 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 789835"];
10957 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 789836"];
10958 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 789837"];
10959 [label="param CSharpCompilationOptions(bool publicSign) 789838"];
10960 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 789839"];
10961 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 789840"];
10962 [label="param CSharpCompilationOptions(this) 789841"];
10963 [label="param CSharpCompilationOptions(this) 789842"];
10964 [label="param CSharpCompilationOptions(this) 789843"];
10965 [label="public bool AllowUnsafe { get; private set; } 789844"];
10966 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 789845"];
10967 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 789846"];
10968 [label="this.Usings = usings.AsImmutableOrEmpty(); 789847"];
10969 [label="this.Usings 789848"];
10970 [label="this.AllowUnsafe 789849"];
10971 [label="ReferencesSupersedeLowerVersions 789850"];
10972 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 789851"];
10973 [label="param Create(string? assemblyName) 789852"];
10974 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 789853"];
10975 [label="param Create(IEnumerable<MetadataReference>? references = null) 789854"];
10976 [label="param Create(CSharpCompilationOptions? options = null) 789855"];
10977 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 789856"];
10978 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 789857"];
10979 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 789858"];
10980 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 789859"];
10981 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 789860"];
10982 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 789861"];
10983 [label="param Create(string? assemblyName) 789862"];
10984 [label="param Create(CSharpCompilationOptions options) 789863"];
10985 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 789864"];
10986 [label="param Create(IEnumerable<MetadataReference>? references) 789865"];
10987 [label="param Create(CSharpCompilation? previousSubmission) 789866"];
10988 [label="param Create(Type? returnType) 789867"];
10989 [label="param Create(Type? hostObjectType) 789868"];
10990 [label="param Create(bool isSubmission) 789869"];
10991 [label="RoslynDebug.Assert(options != null); 789870"];
10992 [label="RoslynDebug.Assert(options != null); 789871"];
10993 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 789872"];
10994 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 789873"];
10995 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 789874"];
10996 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789875"];
10997 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789876"];
10998 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789877"];
10999 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789878"];
11000 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789879"];
11001 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789880"];
11002 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789881"];
11003 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789882"];
11004 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789883"];
11005 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789884"];
11006 [label="new MessageProvider() 789885"];
11007 [label="param MessageProvider(this) 789886"];
11008 [label="Instance = new MessageProvider() 789887"];
11009 [label="ObjectBinder.RegisterTypeReader(typeof(MessageProvider), r => Instance); 789888"];
11010 [label="ObjectBinder.RegisterTypeReader(typeof(MessageProvider), r => Instance); 789889"];
11011 [label="ObjectBinder.RegisterTypeReader(typeof(MessageProvider), r => Instance); 789890"];
11012 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789891"];
11013 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 789892"];
11014 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 789893"];
11015 [label="param SyntaxAndDeclarationManager(string scriptClassName) 789894"];
11016 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 789895"];
11017 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 789896"];
11018 [label="param SyntaxAndDeclarationManager(bool isSubmission) 789897"];
11019 [label="param SyntaxAndDeclarationManager(State state) 789898"];
11020 [label="param SyntaxAndDeclarationManager(this) 789899"];
11021 [label="externalSyntaxTrees 789900"];
11022 [label="scriptClassName 789901"];
11023 [label="resolver 789902"];
11024 [label="messageProvider 789903"];
11025 [label="isSubmission 789904"];
11026 [label="param SyntaxAndDeclarationManager(this) 789905"];
11027 [label="param SyntaxAndDeclarationManager(this) 789906"];
11028 [label="_lazyState 789907"];
11029 [label="_lazyState 789908"];
11030 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 789909"];
11031 [label="param CSharpCompilation(string? assemblyName) 789910"];
11032 [label="param CSharpCompilation(CSharpCompilationOptions options) 789911"];
11033 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 789912"];
11034 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 789913"];
11035 [label="param CSharpCompilation(Type? submissionReturnType) 789914"];
11036 [label="param CSharpCompilation(Type? hostObjectType) 789915"];
11037 [label="param CSharpCompilation(bool isSubmission) 789916"];
11038 [label="param CSharpCompilation(ReferenceManager? referenceManager) 789917"];
11039 [label="param CSharpCompilation(bool reuseReferenceManager) 789918"];
11040 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 789919"];
11041 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 789920"];
11042 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 789921"];
11043 [label="param CSharpCompilation(this) 789922"];
11044 [label="assemblyName 789923"];
11045 [label="options 789924"];
11046 [label="references 789925"];
11047 [label="previousSubmission 789926"];
11048 [label="submissionReturnType 789927"];
11049 [label="hostObjectType 789928"];
11050 [label="isSubmission 789929"];
11051 [label="referenceManager 789930"];
11052 [label="reuseReferenceManager 789931"];
11053 [label="syntaxAndDeclarations 789932"];
11054 [label="syntaxAndDeclarations.ExternalSyntaxTrees 789933"];
11055 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 789934"];
11056 [label="semanticModelProvider 789935"];
11057 [label="eventQueue 789936"];
11058 [label="param CSharpCompilation(this) 789937"];
11059 [label="param CSharpCompilation(string? assemblyName) 789938"];
11060 [label="param CSharpCompilation(CSharpCompilationOptions options) 789939"];
11061 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 789940"];
11062 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 789941"];
11063 [label="param CSharpCompilation(Type? submissionReturnType) 789942"];
11064 [label="param CSharpCompilation(Type? hostObjectType) 789943"];
11065 [label="param CSharpCompilation(bool isSubmission) 789944"];
11066 [label="param CSharpCompilation(ReferenceManager? referenceManager) 789945"];
11067 [label="param CSharpCompilation(bool reuseReferenceManager) 789946"];
11068 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 789947"];
11069 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 789948"];
11070 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 789949"];
11071 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 789950"];
11072 [label="param CSharpCompilation(this) 789951"];
11073 [label="assemblyName 789952"];
11074 [label="references 789953"];
11075 [label="features 789954"];
11076 [label="isSubmission 789955"];
11077 [label="semanticModelProvider 789956"];
11078 [label="eventQueue 789957"];
11079 [label="param CSharpCompilation(this) 789958"];
11080 [label="param CSharpCompilation(this) 789959"];
11081 [label="_options 789960"];
11082 [label="_globalImports 789961"];
11083 [label="_previousSubmissionImports 789962"];
11084 [label="_globalNamespaceAlias 789963"];
11085 [label="_scriptClass 789964"];
11086 [label="_lazyHostObjectTypeSymbol 789965"];
11087 [label="_lazyImportInfos 789966"];
11088 [label="_conversions 789967"];
11089 [label="_anonymousTypeManager 789968"];
11090 [label="_lazyGlobalNamespace 789969"];
11091 [label="builtInOperators 789970"];
11092 [label="_lazyAssemblySymbol 789971"];
11093 [label="_referenceManager 789972"];
11094 [label="_syntaxAndDeclarations 789973"];
11095 [label="_lazyEntryPoint 789974"];
11096 [label="_lazyEmitNullablePublicOnly 789975"];
11097 [label="_lazyCompilationUnitCompletedTrees 789976"];
11098 [label="NullableAnalysisData 789977"];
11099 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 789978"];
11100 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 789979"];
11101 [label="_externAliasTargets 789980"];
11102 [label="_moduleInitializerMethods 789981"];
11103 [label="_binderFactories 789982"];
11104 [label="_ignoreAccessibilityBinderFactories 789983"];
11105 [label="_lazyDeclarationDiagnostics 789984"];
11106 [label="_declarationDiagnosticsFrozen 789985"];
11107 [label="new DiagnosticBag() 789986"];
11108 [label="_additionalCodegenWarnings = new DiagnosticBag() 789987"];
11109 [label="WellKnownMemberSignatureComparer 789988"];
11110 [label="_lazyWellKnownTypes 789989"];
11111 [label="_lazyWellKnownTypeMembers 789990"];
11112 [label="_usesNullableAttributes 789991"];
11113 [label="_needsGeneratedAttributes 789992"];
11114 [label="_needsGeneratedAttributes_IsFrozen 789993"];
11115 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 789994"];
11116 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 789995"];
11117 [label="new WellKnownMembersSignatureComparer(this) 789996"];
11118 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 789997"];
11119 [label="param WellKnownMembersSignatureComparer(this) 789998"];
11120 [label="new SpecialMembersSignatureComparer() 789999"];
11121 [label="param SpecialMembersSignatureComparer(this) 790000"];
11122 [label="Instance = new SpecialMembersSignatureComparer() 790001"];
11123 [label="param WellKnownMembersSignatureComparer(this) 790002"];
11124 [label="param SpecialMembersSignatureComparer(this) 790003"];
11125 [label="param SpecialMembersSignatureComparer(this) 790004"];
11126 [label="_compilation 790005"];
11127 [label="_compilation 790006"];
11128 [label="WellKnownMemberSignatureComparer 790007"];
11129 [label="_options 790008"];
11130 [label="this.builtInOperators = new BuiltInOperators(this); 790009"];
11131 [label="this.builtInOperators = new BuiltInOperators(this); 790010"];
11132 [label="new BuiltInOperators(this) 790011"];
11133 [label="param BuiltInOperators(CSharpCompilation compilation) 790012"];
11134 [label="param BuiltInOperators(this) 790013"];
11135 [label="_compilation 790014"];
11136 [label="_builtInUnaryOperators 790015"];
11137 [label="_builtInOperators 790016"];
11138 [label="_compilation 790017"];
11139 [label="this.builtInOperators 790018"];
11140 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 790019"];
11141 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 790020"];
11142 [label="_scriptClass 790021"];
11143 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 790022"];
11144 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 790023"];
11145 [label="_globalImports 790024"];
11146 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 790025"];
11147 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 790026"];
11148 [label="_previousSubmissionImports 790027"];
11149 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 790028"];
11150 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 790029"];
11151 [label="_globalNamespaceAlias 790030"];
11152 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 790031"];
11153 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 790032"];
11154 [label="new AnonymousTypeManager(this) 790033"];
11155 [label="param AnonymousTypeManager(CSharpCompilation compilation) 790034"];
11156 [label="param AnonymousTypeManager(this) 790035"];
11157 [label="param AnonymousTypeManager(this) 790036"];
11158 [label="public CSharpCompilation Compilation { get; } 790037"];
11159 [label="_lazyAnonymousTypeTemplates 790038"];
11160 [label="_lazySynthesizedDelegates 790039"];
11161 [label="new ConcurrentDictionary<Location, bool>() 790040"];
11162 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 790041"];
11163 [label="Debug.Assert(compilation != null); 790042"];
11164 [label="Debug.Assert(compilation != null); 790043"];
11165 [label="this.Compilation 790044"];
11166 [label="_anonymousTypeManager 790045"];
11167 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 790046"];
11168 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 790047"];
11169 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 790048"];
11170 [label="LanguageVersion? result = null; 790049"];
11171 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 790050"];
11172 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 790051"];
11173 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 790052"];
11174 [label="LanguageVersion.Default.MapSpecifiedToEffectiveVersion() 790053"];
11175 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 790054"];
11176 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 790055"];
11177 [label="return LanguageVersion.CSharp9; 790056"];
11178 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 790057"];
11179 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 790058"];
11180 [label="this.LanguageVersion 790059"];
11181 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 790060"];
11182 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790061"];
11183 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790062"];
11184 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790063"];
11185 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790064"];
11186 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790065"];
11187 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790066"];
11188 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 790067"];
11189 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 790068"];
11190 [label="this.Options 790069"];
11191 [label="get\n            {\n                return _options;\n            } 790070"];
11192 [label="return _options; 790071"];
11193 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 790072"];
11194 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 790073"];
11195 [label="new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata) 790074"];
11196 [label="param ReferenceManager(string simpleAssemblyName) 790075"];
11197 [label="param ReferenceManager(AssemblyIdentityComparer identityComparer) 790076"];
11198 [label="param ReferenceManager(Dictionary<MetadataReference, MetadataOrDiagnostic>? observedMetadata) 790077"];
11199 [label="param ReferenceManager(this) 790078"];
11200 [label="simpleAssemblyName 790079"];
11201 [label="identityComparer 790080"];
11202 [label="observedMetadata 790081"];
11203 [label="param ReferenceManager(this) 790082"];
11204 [label="param ReferenceManager(this) 790083"];
11205 [label="_referenceManager 790084"];
11206 [label="_syntaxAndDeclarations 790085"];
11207 [label="Debug.Assert(_lazyAssemblySymbol is null); 790086"];
11208 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790087"];
11209 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790088"];
11210 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 790089"];
11211 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 790090"];
11212 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 790091"];
11213 [label="compilation.AddSyntaxTrees(syntaxTrees) 790092"];
11214 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 790093"];
11215 [label="param AddSyntaxTrees(this) 790094"];
11216 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 790095"];
11217 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 790096"];
11218 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 790097"];
11219 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 790098"];
11220 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 790099"];
11221 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 790100"];
11222 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 790101"];
11223 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 790102"];
11224 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 790103"];
11225 [label="bool reuseReferenceManager = true; 790104"];
11226 [label="int i = 0; 790105"];
11227 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 790106"];
11228 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 790107"];
11229 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 790108"];
11230 [label="tree.HasCompilationUnitRoot 790109"];
11231 [label="get\n                {\n                    return _hasCompilationUnitRoot;\n                } 790110"];
11232 [label="return _hasCompilationUnitRoot; 790111"];
11233 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 790112"];
11234 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 790113"];
11235 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 790114"];
11236 [label="externalSyntaxTrees.Add(tree); 790115"];
11237 [label="externalSyntaxTrees.Add(tree); 790116"];
11238 [label="tree.HasReferenceOrLoadDirectives 790117"];
11239 [label="get\n            {\n                Debug.Assert(HasCompilationUnitRoot);\n\n                if (Options.Kind == SourceCodeKind.Script)\n                {\n                    var compilationUnitRoot = GetCompilationUnitRoot();\n                    return compilationUnitRoot.GetReferenceDirectives().Count > 0 || compilationUnitRoot.GetLoadDirectives().Count > 0;\n                }\n\n                return false;\n            } 790118"];
11240 [label="HasCompilationUnitRoot 790119"];
11241 [label="get\n                {\n                    return _hasCompilationUnitRoot;\n                } 790120"];
11242 [label="return _hasCompilationUnitRoot; 790121"];
11243 [label="Debug.Assert(HasCompilationUnitRoot); 790122"];
11244 [label="Options 790123"];
11245 [label="get\n                {\n                    return _options;\n                } 790124"];
11246 [label="return _options; 790125"];
11247 [label="if (Options.Kind == SourceCodeKind.Script)\n                {\n                    var compilationUnitRoot = GetCompilationUnitRoot();\n                    return compilationUnitRoot.GetReferenceDirectives().Count > 0 || compilationUnitRoot.GetLoadDirectives().Count > 0;\n                } 790126"];
11248 [label="return false; 790127"];
11249 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 790128"];
11250 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 790129"];
11251 [label="i++; 790130"];
11252 [label="externalSyntaxTrees.Free(); 790131"];
11253 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 790132"];
11254 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 790133"];
11255 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 790134"];
11256 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 790135"];
11257 [label="param AddSyntaxTrees(this) 790136"];
11258 [label="var scriptClassName = this.ScriptClassName; 790137"];
11259 [label="var resolver = this.Resolver; 790138"];
11260 [label="var messageProvider = this.MessageProvider; 790139"];
11261 [label="var isSubmission = this.IsSubmission; 790140"];
11262 [label="var state = _lazyState; 790141"];
11263 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 790142"];
11264 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 790143"];
11265 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 790144"];
11266 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 790145"];
11267 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 790146"];
11268 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 790147"];
11269 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 790148"];
11270 [label="param WithExternalSyntaxTrees(this) 790149"];
11271 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 790150"];
11272 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 790151"];
11273 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 790152"];
11274 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 790153"];
11275 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 790154"];
11276 [label="param SyntaxAndDeclarationManager(string scriptClassName) 790155"];
11277 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 790156"];
11278 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 790157"];
11279 [label="param SyntaxAndDeclarationManager(bool isSubmission) 790158"];
11280 [label="param SyntaxAndDeclarationManager(State state) 790159"];
11281 [label="param SyntaxAndDeclarationManager(this) 790160"];
11282 [label="param SyntaxAndDeclarationManager(this) 790161"];
11283 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 790162"];
11284 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 790163"];
11285 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 790164"];
11286 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 790165"];
11287 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 790166"];
11288 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 790167"];
11289 [label="param Update(ReferenceManager referenceManager) 790168"];
11290 [label="param Update(bool reuseReferenceManager) 790169"];
11291 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 790170"];
11292 [label="param Update(this) 790171"];
11293 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790172"];
11294 [label="this.PreviousSubmission 790173"];
11295 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 790174"];
11296 [label="ScriptCompilationInfo 790175"];
11297 [label="ScriptCompilationInfo?.PreviousScriptCompilation 790176"];
11298 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790177"];
11299 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790178"];
11300 [label="this.SubmissionReturnType 790179"];
11301 [label="=> ScriptCompilationInfo 790180"];
11302 [label="ScriptCompilationInfo 790181"];
11303 [label="this.HostObjectType 790182"];
11304 [label="=> ScriptCompilationInfo 790183"];
11305 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790184"];
11306 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790185"];
11307 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790186"];
11308 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 790187"];
11309 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 790188"];
11310 [label="param CSharpCompilation(string? assemblyName) 790189"];
11311 [label="param CSharpCompilation(CSharpCompilationOptions options) 790190"];
11312 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 790191"];
11313 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 790192"];
11314 [label="param CSharpCompilation(Type? submissionReturnType) 790193"];
11315 [label="param CSharpCompilation(Type? hostObjectType) 790194"];
11316 [label="param CSharpCompilation(bool isSubmission) 790195"];
11317 [label="param CSharpCompilation(ReferenceManager? referenceManager) 790196"];
11318 [label="param CSharpCompilation(bool reuseReferenceManager) 790197"];
11319 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 790198"];
11320 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 790199"];
11321 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 790200"];
11322 [label="param CSharpCompilation(this) 790201"];
11323 [label="previousSubmission 790202"];
11324 [label="submissionReturnType 790203"];
11325 [label="hostObjectType 790204"];
11326 [label="syntaxAndDeclarations.ExternalSyntaxTrees 790205"];
11327 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 790206"];
11328 [label="get\n            {\n                return this.Options;\n            } 790207"];
11329 [label="this.Options 790208"];
11330 [label="get\n                {\n                    return _options;\n                } 790209"];
11331 [label="return _options; 790210"];
11332 [label="return this.Options; 790211"];
11333 [label="eventQueue 790212"];
11334 [label="param CSharpCompilation(this) 790213"];
11335 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 790214"];
11336 [label="param CSharpCompilation(Type? submissionReturnType) 790215"];
11337 [label="param CSharpCompilation(Type? hostObjectType) 790216"];
11338 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 790217"];
11339 [label="param CSharpCompilation(this) 790218"];
11340 [label="eventQueue 790219"];
11341 [label="param CSharpCompilation(this) 790220"];
11342 [label="_options 790221"];
11343 [label="_globalImports 790222"];
11344 [label="_previousSubmissionImports 790223"];
11345 [label="_globalNamespaceAlias 790224"];
11346 [label="_scriptClass 790225"];
11347 [label="_lazyHostObjectTypeSymbol 790226"];
11348 [label="_lazyImportInfos 790227"];
11349 [label="_conversions 790228"];
11350 [label="_anonymousTypeManager 790229"];
11351 [label="_lazyGlobalNamespace 790230"];
11352 [label="builtInOperators 790231"];
11353 [label="_lazyAssemblySymbol 790232"];
11354 [label="_referenceManager 790233"];
11355 [label="_syntaxAndDeclarations 790234"];
11356 [label="_lazyEntryPoint 790235"];
11357 [label="_lazyEmitNullablePublicOnly 790236"];
11358 [label="_lazyCompilationUnitCompletedTrees 790237"];
11359 [label="NullableAnalysisData 790238"];
11360 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 790239"];
11361 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 790240"];
11362 [label="_externAliasTargets 790241"];
11363 [label="_moduleInitializerMethods 790242"];
11364 [label="_binderFactories 790243"];
11365 [label="_ignoreAccessibilityBinderFactories 790244"];
11366 [label="_lazyDeclarationDiagnostics 790245"];
11367 [label="_declarationDiagnosticsFrozen 790246"];
11368 [label="new DiagnosticBag() 790247"];
11369 [label="_additionalCodegenWarnings = new DiagnosticBag() 790248"];
11370 [label="WellKnownMemberSignatureComparer 790249"];
11371 [label="_lazyWellKnownTypes 790250"];
11372 [label="_lazyWellKnownTypeMembers 790251"];
11373 [label="_usesNullableAttributes 790252"];
11374 [label="_needsGeneratedAttributes 790253"];
11375 [label="_needsGeneratedAttributes_IsFrozen 790254"];
11376 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 790255"];
11377 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 790256"];
11378 [label="new WellKnownMembersSignatureComparer(this) 790257"];
11379 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 790258"];
11380 [label="param WellKnownMembersSignatureComparer(this) 790259"];
11381 [label="param WellKnownMembersSignatureComparer(this) 790260"];
11382 [label="param SpecialMembersSignatureComparer(this) 790261"];
11383 [label="param SpecialMembersSignatureComparer(this) 790262"];
11384 [label="_compilation 790263"];
11385 [label="_compilation 790264"];
11386 [label="WellKnownMemberSignatureComparer 790265"];
11387 [label="this.builtInOperators = new BuiltInOperators(this); 790266"];
11388 [label="this.builtInOperators = new BuiltInOperators(this); 790267"];
11389 [label="new BuiltInOperators(this) 790268"];
11390 [label="param BuiltInOperators(CSharpCompilation compilation) 790269"];
11391 [label="param BuiltInOperators(this) 790270"];
11392 [label="_compilation 790271"];
11393 [label="_builtInUnaryOperators 790272"];
11394 [label="_builtInOperators 790273"];
11395 [label="_compilation 790274"];
11396 [label="this.builtInOperators 790275"];
11397 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 790276"];
11398 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 790277"];
11399 [label="new AnonymousTypeManager(this) 790278"];
11400 [label="param AnonymousTypeManager(CSharpCompilation compilation) 790279"];
11401 [label="param AnonymousTypeManager(this) 790280"];
11402 [label="param AnonymousTypeManager(this) 790281"];
11403 [label="public CSharpCompilation Compilation { get; } 790282"];
11404 [label="_lazyAnonymousTypeTemplates 790283"];
11405 [label="_lazySynthesizedDelegates 790284"];
11406 [label="new ConcurrentDictionary<Location, bool>() 790285"];
11407 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 790286"];
11408 [label="Debug.Assert(compilation != null); 790287"];
11409 [label="Debug.Assert(compilation != null); 790288"];
11410 [label="this.Compilation 790289"];
11411 [label="_anonymousTypeManager 790290"];
11412 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 790291"];
11413 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 790292"];
11414 [label="LanguageVersion? result = null; 790293"];
11415 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 790294"];
11416 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 790295"];
11417 [label="tree.Options 790296"];
11418 [label="get\n            {\n                return this.Options;\n            } 790297"];
11419 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 790298"];
11420 [label="result = version; 790299"];
11421 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 790300"];
11422 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790301"];
11423 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790302"];
11424 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790303"];
11425 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790304"];
11426 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790305"];
11427 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790306"];
11428 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 790307"];
11429 [label="referenceManager.AssertCanReuseForCompilation(this); 790308"];
11430 [label="referenceManager.AssertCanReuseForCompilation(this); 790309"];
11431 [label="_referenceManager 790310"];
11432 [label="Debug.Assert(_lazyAssemblySymbol is null); 790311"];
11433 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790312"];
11434 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790313"];
11435 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 790314"];
11436 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 790315"];
11437 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 790316"];
11438 [label="return compilation; 790317"];
11439 [label="var compilation = createCompilationLambda(); 790318"];
11440 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 790319"];
11441 [label="IsNullableEnabled(compilation) 790320"];
11442 [label="param IsNullableEnabled(CSharpCompilation compilation) 790321"];
11443 [label="compilation.SyntaxTrees 790322"];
11444 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 790323"];
11445 [label="_syntaxAndDeclarations.GetLazyState() 790324"];
11446 [label="param GetLazyState(this) 790325"];
11447 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790326"];
11448 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790327"];
11449 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 790328"];
11450 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 790329"];
11451 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 790330"];
11452 [label="param CreateState(string scriptClassName) 790331"];
11453 [label="param CreateState(SourceReferenceResolver resolver) 790332"];
11454 [label="param CreateState(CommonMessageProvider messageProvider) 790333"];
11455 [label="param CreateState(bool isSubmission) 790334"];
11456 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 790335"];
11457 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 790336"];
11458 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 790337"];
11459 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 790338"];
11460 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 790339"];
11461 [label="allOlderRootDeclarations: ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration>.Empty 790340"];
11462 [label="null 790341"];
11463 [label="latestLazyRootDeclaration: null 790342"];
11464 [label="null 790343"];
11465 [label="cache: null 790344"];
11466 [label="new DeclarationTable(\n            allOlderRootDeclarations: ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration>.Empty,\n            latestLazyRootDeclaration: null,\n            cache: null) 790345"];
11467 [label="param DeclarationTable(ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration> allOlderRootDeclarations) 790346"];
11468 [label="param DeclarationTable(Lazy<RootSingleNamespaceDeclaration> latestLazyRootDeclaration) 790347"];
11469 [label="param DeclarationTable(Cache cache) 790348"];
11470 [label="param DeclarationTable(this) 790349"];
11471 [label="_allOlderRootDeclarations 790350"];
11472 [label="_latestLazyRootDeclaration 790351"];
11473 [label="_cache 790352"];
11474 [label="_mergedRoot 790353"];
11475 [label="_typeNames 790354"];
11476 [label="_namespaceNames 790355"];
11477 [label="_referenceDirectives 790356"];
11478 [label="_allOlderRootDeclarations 790357"];
11479 [label="_latestLazyRootDeclaration 790358"];
11480 [label="_cache = cache ?? new Cache(this); 790359"];
11481 [label="_cache = cache ?? new Cache(this); 790360"];
11482 [label="new Cache(this) 790361"];
11483 [label="param Cache(DeclarationTable table) 790362"];
11484 [label="param Cache(this) 790363"];
11485 [label="MergedRoot 790364"];
11486 [label="TypeNames 790365"];
11487 [label="NamespaceNames 790366"];
11488 [label="ReferenceDirectives 790367"];
11489 [label="this.MergedRoot = new Lazy<MergedNamespaceDeclaration>(\n                    () => MergedNamespaceDeclaration.Create(table._allOlderRootDeclarations.InInsertionOrder.AsImmutable<SingleNamespaceDeclaration>())); 790368"];
11490 [label="this.MergedRoot 790369"];
11491 [label="this.TypeNames = new Lazy<ISet<string>>(\n                    () => GetTypeNames(this.MergedRoot.Value)); 790370"];
11492 [label="this.TypeNames 790371"];
11493 [label="this.NamespaceNames = new Lazy<ISet<string>>(\n                    () => GetNamespaceNames(this.MergedRoot.Value)); 790372"];
11494 [label="this.NamespaceNames 790373"];
11495 [label="this.ReferenceDirectives = new Lazy<ImmutableArray<ReferenceDirective>>(\n                    () => MergedRoot.Value.Declarations.OfType<RootSingleNamespaceDeclaration>().SelectMany(r => r.ReferenceDirectives).AsImmutable()); 790374"];
11496 [label="this.ReferenceDirectives 790375"];
11497 [label="_cache = cache ?? new Cache(this); 790376"];
11498 [label="_cache 790377"];
11499 [label="_typeNames = new Lazy<ICollection<string>>(GetMergedTypeNames); 790378"];
11500 [label="_typeNames 790379"];
11501 [label="_namespaceNames = new Lazy<ICollection<string>>(GetMergedNamespaceNames); 790380"];
11502 [label="_namespaceNames 790381"];
11503 [label="_referenceDirectives = new Lazy<ICollection<ReferenceDirective>>(GetMergedReferenceDirectives); 790382"];
11504 [label="_referenceDirectives 790383"];
11505 [label="Empty = new DeclarationTable(\n            allOlderRootDeclarations: ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration>.Empty,\n            latestLazyRootDeclaration: null,\n            cache: null) 790384"];
11506 [label="d => d.Kind == DeclarationKind.Namespace 790385"];
11507 [label="s_isNamespacePredicate = d => d.Kind == DeclarationKind.Namespace 790386"];
11508 [label="d => d.Kind != DeclarationKind.Namespace 790387"];
11509 [label="s_isTypePredicate = d => d.Kind != DeclarationKind.Namespace 790388"];
11510 [label="var declTable = DeclarationTable.Empty; 790389"];
11511 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 790390"];
11512 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790391"];
11513 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790392"];
11514 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790393"];
11515 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790394"];
11516 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790395"];
11517 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790396"];
11518 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790397"];
11519 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790398"];
11520 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790399"];
11521 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790400"];
11522 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 790401"];
11523 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 790402"];
11524 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 790403"];
11525 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 790404"];
11526 [label="param AppendAllSyntaxTrees(string scriptClassName) 790405"];
11527 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 790406"];
11528 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 790407"];
11529 [label="param AppendAllSyntaxTrees(bool isSubmission) 790408"];
11530 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 790409"];
11531 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 790410"];
11532 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 790411"];
11533 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 790412"];
11534 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 790413"];
11535 [label="var sourceCodeKind = tree.Options.Kind; 790414"];
11536 [label="tree.Options 790415"];
11537 [label="get\n            {\n                return this.Options;\n            } 790416"];
11538 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 790417"];
11539 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 790418"];
11540 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 790419"];
11541 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 790420"];
11542 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 790421"];
11543 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 790422"];
11544 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 790423"];
11545 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 790424"];
11546 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 790425"];
11547 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 790426"];
11548 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 790427"];
11549 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 790428"];
11550 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 790429"];
11551 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 790430"];
11552 [label="declMapBuilder.Add(tree, lazyRoot); 790431"];
11553 [label="declMapBuilder.Add(tree, lazyRoot); 790432"];
11554 [label="declMapBuilder.Add(tree, lazyRoot); 790433"];
11555 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 790434"];
11556 [label="declTable.AddRootDeclaration(lazyRoot) 790435"];
11557 [label="param AddRootDeclaration(Lazy<RootSingleNamespaceDeclaration> lazyRootDeclaration) 790436"];
11558 [label="param AddRootDeclaration(this) 790437"];
11559 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache);\n            }\n            else\n            {\n                // we already had a 'latest' item.  This means we're hearing about a change to a\n                // different tree.  Realize the old latest item, add it to the 'oldest' collection\n                // and don't reuse the cache.\n                return new DeclarationTable(_allOlderRootDeclarations.Add(_latestLazyRootDeclaration.Value), lazyRootDeclaration, cache: null);\n            } 790438"];
11560 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache);\n            }\n            else\n            {\n                // we already had a 'latest' item.  This means we're hearing about a change to a\n                // different tree.  Realize the old latest item, add it to the 'oldest' collection\n                // and don't reuse the cache.\n                return new DeclarationTable(_allOlderRootDeclarations.Add(_latestLazyRootDeclaration.Value), lazyRootDeclaration, cache: null);\n            } 790439"];
11561 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 790440"];
11562 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 790441"];
11563 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 790442"];
11564 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 790443"];
11565 [label="new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache) 790444"];
11566 [label="param DeclarationTable(ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration> allOlderRootDeclarations) 790445"];
11567 [label="param DeclarationTable(Lazy<RootSingleNamespaceDeclaration> latestLazyRootDeclaration) 790446"];
11568 [label="param DeclarationTable(Cache cache) 790447"];
11569 [label="param DeclarationTable(this) 790448"];
11570 [label="_allOlderRootDeclarations 790449"];
11571 [label="_latestLazyRootDeclaration 790450"];
11572 [label="_cache 790451"];
11573 [label="_mergedRoot 790452"];
11574 [label="_typeNames 790453"];
11575 [label="_namespaceNames 790454"];
11576 [label="_referenceDirectives 790455"];
11577 [label="_typeNames = new Lazy<ICollection<string>>(GetMergedTypeNames); 790456"];
11578 [label="_typeNames 790457"];
11579 [label="_namespaceNames = new Lazy<ICollection<string>>(GetMergedNamespaceNames); 790458"];
11580 [label="_namespaceNames 790459"];
11581 [label="_referenceDirectives = new Lazy<ICollection<ReferenceDirective>>(GetMergedReferenceDirectives); 790460"];
11582 [label="_referenceDirectives 790461"];
11583 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 790462"];
11584 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 790463"];
11585 [label="treesBuilder.Add(tree); 790464"];
11586 [label="treesBuilder.Add(tree); 790465"];
11587 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 790466"];
11588 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 790467"];
11589 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 790468"];
11590 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 790469"];
11591 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 790470"];
11592 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 790471"];
11593 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 790472"];
11594 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 790473"];
11595 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 790474"];
11596 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 790475"];
11597 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 790476"];
11598 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 790477"];
11599 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 790478"];
11600 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 790479"];
11601 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 790480"];
11602 [label="param State(DeclarationTable declarationTable) 790481"];
11603 [label="param State(this) 790482"];
11604 [label="OrdinalMap 790483"];
11605 [label="LoadDirectiveMap 790484"];
11606 [label="LoadedSyntaxTreeMap 790485"];
11607 [label="RootNamespaces 790486"];
11608 [label="DeclarationTable 790487"];
11609 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 790488"];
11610 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 790489"];
11611 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 790490"];
11612 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 790491"];
11613 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 790492"];
11614 [label="this.SyntaxTrees 790493"];
11615 [label="this.OrdinalMap 790494"];
11616 [label="this.LoadDirectiveMap 790495"];
11617 [label="this.LoadedSyntaxTreeMap 790496"];
11618 [label="this.RootNamespaces 790497"];
11619 [label="this.DeclarationTable 790498"];
11620 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 790499"];
11621 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 790500"];
11622 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 790501"];
11623 [label="return _lazyState; 790502"];
11624 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 790503"];
11625 [label="var trees = compilation.SyntaxTrees; 790504"];
11626 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 790505"];
11627 [label="var options = (CSharpParseOptions)trees[0].Options; 790506"];
11628 [label="var options = (CSharpParseOptions)trees[0].Options; 790507"];
11629 [label="trees[0].Options 790508"];
11630 [label="get\n            {\n                return this.Options;\n            } 790509"];
11631 [label="this.Options 790510"];
11632 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 790511"];
11633 [label="options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes) 790512"];
11634 [label="param IsFeatureEnabled(MessageID feature) 790513"];
11635 [label="param IsFeatureEnabled(this) 790514"];
11636 [label="string? featureFlag = feature.RequiredFeature(); 790515"];
11637 [label="feature.RequiredFeature() 790516"];
11638 [label="param RequiredFeature(this MessageID feature) 790517"];
11639 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 790518"];
11640 [label="return null; 790519"];
11641 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 790520"];
11642 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 790521"];
11643 [label="LanguageVersion availableVersion = LanguageVersion; 790522"];
11644 [label="LanguageVersion requiredVersion = feature.RequiredVersion(); 790523"];
11645 [label="feature.RequiredVersion() 790524"];
11646 [label="param RequiredVersion(this MessageID feature) 790525"];
11647 [label="Debug.Assert(RequiredFeature(feature) == null); 790526"];
11648 [label="RequiredFeature(feature) 790527"];
11649 [label="param RequiredFeature(this MessageID feature) 790528"];
11650 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 790529"];
11651 [label="return null; 790530"];
11652 [label="Debug.Assert(RequiredFeature(feature) == null); 790531"];
11653 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 790532"];
11654 [label="return LanguageVersion.CSharp8; 790533"];
11655 [label="return availableVersion >= requiredVersion; 790534"];
11656 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 790535"];
11657 [label="return compilation; 790536"];
11658 [label="comp.GlobalNamespace 790537"];
11659 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 790538"];
11660 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 790539"];
11661 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 790540"];
11662 [label="GetAllUnaliasedModules(modules); 790541"];
11663 [label="GetAllUnaliasedModules(modules) 790542"];
11664 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 790543"];
11665 [label="param GetAllUnaliasedModules(this) 790544"];
11666 [label="Assembly 790545"];
11667 [label="get\n            {\n                return SourceAssembly;\n            } 790546"];
11668 [label="SourceAssembly 790547"];
11669 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 790548"];
11670 [label="GetBoundReferenceManager() 790549"];
11671 [label="param GetBoundReferenceManager(this) 790550"];
11672 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 790551"];
11673 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 790552"];
11674 [label="_referenceManager.CreateSourceAssemblyForCompilation(this) 790553"];
11675 [label="param CreateSourceAssemblyForCompilation(CSharpCompilation compilation) 790554"];
11676 [label="param CreateSourceAssemblyForCompilation(this) 790555"];
11677 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 790556"];
11678 [label="CreateAndSetSourceAssemblyFullBind(compilation) 790557"];
11679 [label="param CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation) 790558"];
11680 [label="param CreateAndSetSourceAssemblyFullBind(this) 790559"];
11681 [label="var resolutionDiagnostics = DiagnosticBag.GetInstance(); 790560"];
11682 [label="var assemblyReferencesBySimpleName = PooledDictionary<string, List<ReferencedAssemblyIdentity>>.GetInstance(); 790561"];
11683 [label="compilation.Options 790562"];
11684 [label="get\n            {\n                return _options;\n            } 790563"];
11685 [label="bool supersedeLowerVersions = compilation.Options.ReferencesSupersedeLowerVersions; 790564"];
11686 [label="IDictionary<(string, string), MetadataReference>? boundReferenceDirectiveMap; 790565"];
11687 [label="ImmutableArray<MetadataReference> boundReferenceDirectives; 790566"];
11688 [label="boundReferenceDirectives 790567"];
11689 [label="ImmutableArray<AssemblyData> referencedAssemblies; 790568"];
11690 [label="referencedAssemblies 790569"];
11691 [label="ImmutableArray<PEModule> modules; 790570"];
11692 [label="modules 790571"];
11693 [label="ImmutableArray<MetadataReference> explicitReferences; 790572"];
11694 [label="explicitReferences 790573"];
11695 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790574"];
11696 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790575"];
11697 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790576"];
11698 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790577"];
11699 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790578"];
11700 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790579"];
11701 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790580"];
11702 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790581"];
11703 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790582"];
11704 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 790583"];
11705 [label="get { return this.Declarations.ReferenceDirectives; } 790584"];
11706 [label="this.Declarations 790585"];
11707 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 790586"];
11708 [label="_syntaxAndDeclarations.GetLazyState() 790587"];
11709 [label="param GetLazyState(this) 790588"];
11710 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 790589"];
11711 [label="return this.Declarations.ReferenceDirectives; 790590"];
11712 [label="this.Declarations.ReferenceDirectives 790591"];
11713 [label="get\n            {\n                return _referenceDirectives.Value;\n            } 790592"];
11714 [label="return _referenceDirectives.Value; 790593"];
11715 [label="_referenceDirectives.Value 790594"];
11716 [label="param GetMergedReferenceDirectives(this) 790595"];
11717 [label="var cachedReferenceDirectives = _cache.ReferenceDirectives.Value; 790596"];
11718 [label="_cache.ReferenceDirectives.Value 790597"];
11719 [label="param Create(ImmutableArray<SingleNamespaceDeclaration> declarations) 790598"];
11720 [label="return new MergedNamespaceDeclaration(declarations); 790599"];
11721 [label="return new MergedNamespaceDeclaration(declarations); 790600"];
11722 [label="new MergedNamespaceDeclaration(declarations) 790601"];
11723 [label="param MergedNamespaceDeclaration(ImmutableArray<SingleNamespaceDeclaration> declarations) 790602"];
11724 [label="param MergedNamespaceDeclaration(this) 790603"];
11725 [label="declarations.IsEmpty 790604"];
11726 [label="string.Empty 790605"];
11727 [label="param MergedNamespaceDeclaration(this) 790606"];
11728 [label="param MergedNamespaceOrTypeDeclaration(string name) 790607"];
11729 [label="param MergedNamespaceOrTypeDeclaration(this) 790608"];
11730 [label="name 790609"];
11731 [label="param MergedNamespaceOrTypeDeclaration(this) 790610"];
11732 [label="param Declaration(string name) 790611"];
11733 [label="param Declaration(this) 790612"];
11734 [label="name 790613"];
11735 [label="this.name 790614"];
11736 [label="_declarations 790615"];
11737 [label="var cachedReferenceDirectives = _cache.ReferenceDirectives.Value; 790616"];
11738 [label="var cachedReferenceDirectives = _cache.ReferenceDirectives.Value; 790617"];
11739 [label="get { return _declarations; } 790618"];
11740 [label="return _declarations; 790619"];
11741 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return cachedReferenceDirectives;\n            }\n            else\n            {\n                return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives);\n            } 790620"];
11742 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return cachedReferenceDirectives;\n            }\n            else\n            {\n                return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives);\n            } 790621"];
11743 [label="() => ImmutableHashSet.CreateBuilder<string>() 790622"];
11744 [label="new ObjectPool<ImmutableHashSet<string>.Builder>(() => ImmutableHashSet.CreateBuilder<string>()) 790623"];
11745 [label="s_memberNameBuilderPool =\n            new ObjectPool<ImmutableHashSet<string>.Builder>(() => ImmutableHashSet.CreateBuilder<string>()) 790624"];
11746 [label="return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives); 790625"];
11747 [label="return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives); 790626"];
11748 [label="_latestLazyRootDeclaration.Value 790627"];
11749 [label="param ForTree(SyntaxTree syntaxTree) 790628"];
11750 [label="param ForTree(string scriptClassName) 790629"];
11751 [label="param ForTree(bool isSubmission) 790630"];
11752 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 790631"];
11753 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 790632"];
11754 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 790633"];
11755 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 790634"];
11756 [label="new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission) 790635"];
11757 [label="param DeclarationTreeBuilder(SyntaxTree syntaxTree) 790636"];
11758 [label="param DeclarationTreeBuilder(string scriptClassName) 790637"];
11759 [label="param DeclarationTreeBuilder(bool isSubmission) 790638"];
11760 [label="param DeclarationTreeBuilder(this) 790639"];
11761 [label="param DeclarationTreeBuilder(this) 790640"];
11762 [label="param CSharpSyntaxVisitor(this) 790641"];
11763 [label="_syntaxTree 790642"];
11764 [label="_scriptClassName 790643"];
11765 [label="_isSubmission 790644"];
11766 [label="_syntaxTree 790645"];
11767 [label="_scriptClassName 790646"];
11768 [label="_isSubmission 790647"];
11769 [label="return (RootSingleNamespaceDeclaration)builder.Visit(syntaxTree.GetRoot()); 790648"];
11770 [label="return (RootSingleNamespaceDeclaration)builder.Visit(syntaxTree.GetRoot()); 790649"];
11771 [label="param GetRoot(CancellationToken cancellationToken) 790650"];
11772 [label="builder.Visit(syntaxTree.GetRoot()) 790651"];
11773 [label="param Visit(SyntaxNode? node) 790652"];
11774 [label="param Visit(this) 790653"];
11775 [label="if (node != null)\n            {\n                return ((CSharpSyntaxNode)node).Accept(this);\n            } 790654"];
11776 [label="if (node != null)\n            {\n                return ((CSharpSyntaxNode)node).Accept(this);\n            } 790655"];
11777 [label="return ((CSharpSyntaxNode)node).Accept(this); 790656"];
11778 [label="return ((CSharpSyntaxNode)node).Accept(this); 790657"];
11779 [label="return ((CSharpSyntaxNode)node).Accept(this); 790658"];
11780 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 790659"];
11781 [label="param VisitCompilationUnit(this) 790660"];
11782 [label="if (_syntaxTree.Options.Kind != SourceCodeKind.Regular)\n            {\n                return CreateScriptRootDeclaration(compilationUnit);\n            } 790661"];
11783 [label="_syntaxTree.Options 790662"];
11784 [label="get\n            {\n                return this.Options;\n            } 790663"];
11785 [label="var children = VisitNamespaceChildren(compilationUnit, compilationUnit.Members, ((Syntax.InternalSyntax.CompilationUnitSyntax)(compilationUnit.Green)).Members); 790664"];
11786 [label="var children = VisitNamespaceChildren(compilationUnit, compilationUnit.Members, ((Syntax.InternalSyntax.CompilationUnitSyntax)(compilationUnit.Green)).Members); 790665"];
11787 [label="VisitNamespaceChildren(compilationUnit, compilationUnit.Members, ((Syntax.InternalSyntax.CompilationUnitSyntax)(compilationUnit.Green)).Members) 790666"];
11788 [label="param VisitNamespaceChildren(CSharpSyntaxNode node) 790667"];
11789 [label="param VisitNamespaceChildren(SyntaxList<MemberDeclarationSyntax> members) 790668"];
11790 [label="param VisitNamespaceChildren(CoreInternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax> internalMembers) 790669"];
11791 [label="param VisitNamespaceChildren(this) 790670"];
11792 [label="node.Kind() 790671"];
11793 [label="param Kind(this) 790672"];
11794 [label="return (SyntaxKind)this.Green.RawKind; 790673"];
11795 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 790674"];
11796 [label="node.Kind() 790675"];
11797 [label="param Kind(this) 790676"];
11798 [label="return (SyntaxKind)this.Green.RawKind; 790677"];
11799 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 790678"];
11800 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 790679"];
11801 [label="_syntaxTree.Options 790680"];
11802 [label="get\n            {\n                return this.Options;\n            } 790681"];
11803 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 790682"];
11804 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 790683"];
11805 [label="if (members.Count == 0)\n            {\n                return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty;\n            } 790684"];
11806 [label="if (members.Count == 0)\n            {\n                return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty;\n            } 790685"];
11807 [label="bool hasGlobalMembers = false; 790686"];
11808 [label="node.Kind() 790687"];
11809 [label="param Kind(this) 790688"];
11810 [label="return (SyntaxKind)this.Green.RawKind; 790689"];
11811 [label="bool acceptSimpleProgram = node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular; 790690"];
11812 [label="bool acceptSimpleProgram = node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular; 790691"];
11813 [label="_syntaxTree.Options 790692"];
11814 [label="get\n            {\n                return this.Options;\n            } 790693"];
11815 [label="bool acceptSimpleProgram = node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular; 790694"];
11816 [label="bool hasAwaitExpressions = false; 790695"];
11817 [label="bool isIterator = false; 790696"];
11818 [label="bool hasReturnWithExpression = false; 790697"];
11819 [label="GlobalStatementSyntax firstGlobalStatement = null; 790698"];
11820 [label="var childrenBuilder = ArrayBuilder<SingleNamespaceOrTypeDeclaration>.GetInstance(); 790699"];
11821 [label="foreach (var member in members)\n            {\n                SingleNamespaceOrTypeDeclaration namespaceOrType = Visit(member);\n                if (namespaceOrType != null)\n                {\n                    childrenBuilder.Add(namespaceOrType);\n                }\n                else if (acceptSimpleProgram && member.IsKind(SyntaxKind.GlobalStatement))\n                {\n                    var global = (GlobalStatementSyntax)member;\n                    // LAFHIS\n                    if (firstGlobalStatement == null)\n                        firstGlobalStatement = global;\n                    var topLevelStatement = global.Statement;\n\n                    if (!hasAwaitExpressions)\n                    {\n                        hasAwaitExpressions = SyntaxFacts.HasAwaitOperations(topLevelStatement);\n                    }\n\n                    if (!isIterator)\n                    {\n                        isIterator = SyntaxFacts.HasYieldOperations(topLevelStatement);\n                    }\n\n                    if (!hasReturnWithExpression)\n                    {\n                        hasReturnWithExpression = SyntaxFacts.HasReturnWithExpression(topLevelStatement);\n                    }\n                }\n                else if (!hasGlobalMembers && member.Kind() != SyntaxKind.IncompleteMember)\n                {\n                    hasGlobalMembers = true;\n                }\n            } 790700"];
11822 [label="SingleNamespaceOrTypeDeclaration namespaceOrType = Visit(member); 790701"];
11823 [label="Visit(member) 790702"];
11824 [label="param Visit(SyntaxNode? node) 790703"];
11825 [label="param Visit(this) 790704"];
11826 [label="return ((CSharpSyntaxNode)node).Accept(this); 790705"];
11827 [label="return ((CSharpSyntaxNode)node).Accept(this); 790706"];
11828 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax node) 790707"];
11829 [label="param VisitNamespaceDeclaration(this) 790708"];
11830 [label="var children = VisitNamespaceChildren(node, node.Members, node.Green.Members); 790709"];
11831 [label="var children = VisitNamespaceChildren(node, node.Members, node.Green.Members); 790710"];
11832 [label="node.Members 790711"];
11833 [label="param CSharpSyntaxNode(GreenNode green) 790712"];
11834 [label="param CSharpSyntaxNode(SyntaxNode? parent) 790713"];
11835 [label="param CSharpSyntaxNode(int position) 790714"];
11836 [label="param CSharpSyntaxNode(this) 790715"];
11837 [label="node.Green 790716"];
11838 [label="get\n            {\n                return (InternalSyntax.NamespaceDeclarationSyntax)base.Green;\n            } 790717"];
11839 [label="return (InternalSyntax.NamespaceDeclarationSyntax)base.Green; 790718"];
11840 [label="VisitNamespaceChildren(node, node.Members, node.Green.Members) 790719"];
11841 [label="param VisitNamespaceChildren(CSharpSyntaxNode node) 790720"];
11842 [label="param VisitNamespaceChildren(SyntaxList<MemberDeclarationSyntax> members) 790721"];
11843 [label="param VisitNamespaceChildren(CoreInternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax> internalMembers) 790722"];
11844 [label="param VisitNamespaceChildren(this) 790723"];
11845 [label="node.Kind() 790724"];
11846 [label="param Kind(this) 790725"];
11847 [label="return (SyntaxKind)this.Green.RawKind; 790726"];
11848 [label="if (members.Count == 0)\n            {\n                return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty;\n            } 790727"];
11849 [label="if (members.Count == 0)\n            {\n                return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty;\n            } 790728"];
11850 [label="bool hasGlobalMembers = false; 790729"];
11851 [label="node.Kind() 790730"];
11852 [label="param Kind(this) 790731"];
11853 [label="return (SyntaxKind)this.Green.RawKind; 790732"];
11854 [label="bool hasAwaitExpressions = false; 790733"];
11855 [label="bool isIterator = false; 790734"];
11856 [label="bool hasReturnWithExpression = false; 790735"];
11857 [label="GlobalStatementSyntax firstGlobalStatement = null; 790736"];
11858 [label="var childrenBuilder = ArrayBuilder<SingleNamespaceOrTypeDeclaration>.GetInstance(); 790737"];
11859 [label="param Visit(this) 790738"];
11860 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 790739"];
11861 [label="param VisitClassDeclaration(this) 790740"];
11862 [label="return VisitTypeDeclaration(node, DeclarationKind.Class); 790741"];
11863 [label="return VisitTypeDeclaration(node, DeclarationKind.Class); 790742"];
11864 [label="VisitTypeDeclaration(node, DeclarationKind.Class) 790743"];
11865 [label="param VisitTypeDeclaration(TypeDeclarationSyntax node) 790744"];
11866 [label="param VisitTypeDeclaration(DeclarationKind kind) 790745"];
11867 [label="param VisitTypeDeclaration(this) 790746"];
11868 [label="SingleTypeDeclaration.TypeDeclarationFlags declFlags = node.AttributeLists.Any() ?\n                SingleTypeDeclaration.TypeDeclarationFlags.HasAnyAttributes :\n                SingleTypeDeclaration.TypeDeclarationFlags.None; 790747"];
11869 [label="node.AttributeLists.Any() 790748"];
11870 [label="if (node.BaseList != null)\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.HasBaseDeclarations;\n            } 790749"];
11871 [label="if (node.BaseList != null)\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.HasBaseDeclarations;\n            } 790750"];
11872 [label="var diagnostics = DiagnosticBag.GetInstance(); 790751"];
11873 [label="node.Arity 790752"];
11874 [label="get\n            {\n                return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count;\n            } 790753"];
11875 [label="return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count; 790754"];
11876 [label="return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count; 790755"];
11877 [label="this.TypeParameterList == null 790756"];
11878 [label="if (node.Arity == 0)\n            {\n                Symbol.ReportErrorIfHasConstraints(node.ConstraintClauses, diagnostics);\n            } 790757"];
11879 [label="if (node.Arity == 0)\n            {\n                Symbol.ReportErrorIfHasConstraints(node.ConstraintClauses, diagnostics);\n            } 790758"];
11880 [label="SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 790759"];
11881 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 790760"];
11882 [label="SymbolDisplayCompilerInternalOptions.None 790761"];
11883 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 790762"];
11884 [label="s_debuggerDisplayFormat =\n            SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 790763"];
11885 [label="Symbol.ReportErrorIfHasConstraints(node.ConstraintClauses, diagnostics); 790764"];
11886 [label="Symbol.ReportErrorIfHasConstraints(node.ConstraintClauses, diagnostics); 790765"];
11887 [label="Symbol.ReportErrorIfHasConstraints(node.ConstraintClauses, diagnostics) 790766"];
11888 [label="param ReportErrorIfHasConstraints(SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses) 790767"];
11889 [label="param ReportErrorIfHasConstraints(DiagnosticBag diagnostics) 790768"];
11890 [label="if (constraintClauses.Count > 0)\n            {\n                diagnostics.Add(\n                    ErrorCode.ERR_ConstraintOnlyAllowedOnGenericDecl,\n                    constraintClauses[0].WhereKeyword.GetLocation());\n            } 790769"];
11891 [label="if (constraintClauses.Count > 0)\n            {\n                diagnostics.Add(\n                    ErrorCode.ERR_ConstraintOnlyAllowedOnGenericDecl,\n                    constraintClauses[0].WhereKeyword.GetLocation());\n            } 790770"];
11892 [label="Symbol.ReportErrorIfHasConstraints(node.ConstraintClauses, diagnostics); 790771"];
11893 [label="var memberNames = GetNonTypeMemberNames(((Syntax.InternalSyntax.TypeDeclarationSyntax)(node.Green)).Members,\n                                                    ref declFlags); 790772"];
11894 [label="var memberNames = GetNonTypeMemberNames(((Syntax.InternalSyntax.TypeDeclarationSyntax)(node.Green)).Members,\n                                                    ref declFlags); 790773"];
11895 [label="var memberNames = GetNonTypeMemberNames(((Syntax.InternalSyntax.TypeDeclarationSyntax)(node.Green)).Members,\n                                                    ref declFlags); 790774"];
11896 [label="GetNonTypeMemberNames(((Syntax.InternalSyntax.TypeDeclarationSyntax)(node.Green)).Members,\n                                                    ref declFlags) 790775"];
11897 [label="param GetNonTypeMemberNames(CoreInternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax> members) 790776"];
11898 [label="param GetNonTypeMemberNames(ref SingleTypeDeclaration.TypeDeclarationFlags declFlags) 790777"];
11899 [label="param GetNonTypeMemberNames(bool skipGlobalStatements = false) 790778"];
11900 [label="bool anyMethodHadExtensionSyntax = false; 790779"];
11901 [label="bool anyMemberHasAttributes = false; 790780"];
11902 [label="bool anyNonTypeMembers = false; 790781"];
11903 [label="var memberNameBuilder = s_memberNameBuilderPool.Allocate(); 790782"];
11904 [label="foreach (var member in members)\n            {\n                AddNonTypeMemberNames(member, memberNameBuilder, ref anyNonTypeMembers, skipGlobalStatements);\n\n                // Check to see if any method contains a 'this' modifier on its first parameter.\n                // This data is used to determine if a type needs to have its members materialized\n                // as part of extension method lookup.\n                if (!anyMethodHadExtensionSyntax && CheckMethodMemberForExtensionSyntax(member))\n                {\n                    anyMethodHadExtensionSyntax = true;\n                }\n\n                if (!anyMemberHasAttributes && CheckMemberForAttributes(member))\n                {\n                    anyMemberHasAttributes = true;\n                }\n            } 790783"];
11905 [label="AddNonTypeMemberNames(member, memberNameBuilder, ref anyNonTypeMembers, skipGlobalStatements); 790784"];
11906 [label="AddNonTypeMemberNames(member, memberNameBuilder, ref anyNonTypeMembers, skipGlobalStatements); 790785"];
11907 [label="AddNonTypeMemberNames(member, memberNameBuilder, ref anyNonTypeMembers, skipGlobalStatements); 790786"];
11908 [label="AddNonTypeMemberNames(member, memberNameBuilder, ref anyNonTypeMembers, skipGlobalStatements); 790787"];
11909 [label="AddNonTypeMemberNames(member, memberNameBuilder, ref anyNonTypeMembers, skipGlobalStatements) 790788"];
11910 [label="param AddNonTypeMemberNames(Syntax.InternalSyntax.CSharpSyntaxNode member) 790789"];
11911 [label="param AddNonTypeMemberNames(ImmutableHashSet<string>.Builder set) 790790"];
11912 [label="param AddNonTypeMemberNames(ref bool anyNonTypeMembers) 790791"];
11913 [label="param AddNonTypeMemberNames(bool skipGlobalStatements) 790792"];
11914 [label="member.Kind 790793"];
11915 [label="get { return (SyntaxKind)this.RawKind; } 790794"];
11916 [label="switch (member.Kind)\n            {\n                case SyntaxKind.FieldDeclaration:\n                    anyNonTypeMembers = true;\n                    CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.VariableDeclaratorSyntax> fieldDeclarators =\n                        ((Syntax.InternalSyntax.FieldDeclarationSyntax)member).Declaration.Variables;\n                    int numFieldDeclarators = fieldDeclarators.Count;\n                    for (int i = 0; i < numFieldDeclarators; i++)\n                    {\n                        set.Add(fieldDeclarators[i].Identifier.ValueText);\n                    }\n                    break;\n\n                case SyntaxKind.EventFieldDeclaration:\n                    anyNonTypeMembers = true;\n                    CoreInternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.VariableDeclaratorSyntax> eventDeclarators =\n                        ((Syntax.InternalSyntax.EventFieldDeclarationSyntax)member).Declaration.Variables;\n                    int numEventDeclarators = eventDeclarators.Count;\n                    for (int i = 0; i < numEventDeclarators; i++)\n                    {\n                        set.Add(eventDeclarators[i].Identifier.ValueText);\n                    }\n                    break;\n\n                case SyntaxKind.MethodDeclaration:\n                    anyNonTypeMembers = true;\n                    // Member names are exposed via NamedTypeSymbol.MemberNames and are used primarily\n                    // as an acid test to determine whether a more in-depth search of a type is worthwhile.\n                    // We decided that it was reasonable to exclude explicit interface implementations\n                    // from the list of member names.\n                    var methodDecl = (Syntax.InternalSyntax.MethodDeclarationSyntax)member;\n                    if (methodDecl.ExplicitInterfaceSpecifier == null)\n                    {\n                        set.Add(methodDecl.Identifier.ValueText);\n                    }\n                    break;\n\n                case SyntaxKind.PropertyDeclaration:\n                    anyNonTypeMembers = true;\n                    // Handle in the same way as explicit method implementations\n                    var propertyDecl = (Syntax.InternalSyntax.PropertyDeclarationSyntax)member;\n                    if (propertyDecl.ExplicitInterfaceSpecifier == null)\n                    {\n                        set.Add(propertyDecl.Identifier.ValueText);\n                    }\n                    break;\n\n                case SyntaxKind.EventDeclaration:\n                    anyNonTypeMembers = true;\n                    // Handle in the same way as explicit method implementations\n                    var eventDecl = (Syntax.InternalSyntax.EventDeclarationSyntax)member;\n                    if (eventDecl.ExplicitInterfaceSpecifier == null)\n                    {\n                        set.Add(eventDecl.Identifier.ValueText);\n                    }\n                    break;\n\n                case SyntaxKind.ConstructorDeclaration:\n                    anyNonTypeMembers = true;\n                    set.Add(((Syntax.InternalSyntax.ConstructorDeclarationSyntax)member).Modifiers.Any((int)SyntaxKind.StaticKeyword)\n                        ? WellKnownMemberNames.StaticConstructorName\n                        : WellKnownMemberNames.InstanceConstructorName);\n                    break;\n\n                case SyntaxKind.DestructorDeclaration:\n                    anyNonTypeMembers = true;\n                    set.Add(WellKnownMemberNames.DestructorName);\n                    break;\n\n                case SyntaxKind.IndexerDeclaration:\n                    anyNonTypeMembers = true;\n                    set.Add(WellKnownMemberNames.Indexer);\n                    break;\n\n                case SyntaxKind.OperatorDeclaration:\n                    anyNonTypeMembers = true;\n                    var opDecl = (Syntax.InternalSyntax.OperatorDeclarationSyntax)member;\n                    var name = OperatorFacts.OperatorNameFromDeclaration(opDecl);\n                    set.Add(name);\n                    break;\n\n                case SyntaxKind.ConversionOperatorDeclaration:\n                    anyNonTypeMembers = true;\n                    set.Add(((Syntax.InternalSyntax.ConversionOperatorDeclarationSyntax)member).ImplicitOrExplicitKeyword.Kind == SyntaxKind.ImplicitKeyword\n                        ? WellKnownMemberNames.ImplicitConversionName\n                        : WellKnownMemberNames.ExplicitConversionName);\n                    break;\n\n                case SyntaxKind.GlobalStatement:\n                    if (!skipGlobalStatements)\n                    {\n                        anyNonTypeMembers = true;\n                    }\n                    break;\n            } 790795"];
11917 [label="anyNonTypeMembers = true; 790796"];
11918 [label="CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.VariableDeclaratorSyntax> fieldDeclarators =\n                        ((Syntax.InternalSyntax.FieldDeclarationSyntax)member).Declaration.Variables; 790797"];
11919 [label="int numFieldDeclarators = fieldDeclarators.Count; 790798"];
11920 [label="for (int i = 0; i < numFieldDeclarators; i++)\n                    {\n                        set.Add(fieldDeclarators[i].Identifier.ValueText);\n                    } 790799"];
11921 [label="for (int i = 0; i < numFieldDeclarators; i++)\n                    {\n                        set.Add(fieldDeclarators[i].Identifier.ValueText);\n                    } 790800"];
11922 [label="set.Add(fieldDeclarators[i].Identifier.ValueText); 790801"];
11923 [label="fieldDeclarators[i].Identifier.ValueText 790802"];
11924 [label="get { return this.TextField; } 790803"];
11925 [label="return this.TextField; 790804"];
11926 [label="set.Add(fieldDeclarators[i].Identifier.ValueText); 790805"];
11927 [label="if (!anyMethodHadExtensionSyntax && CheckMethodMemberForExtensionSyntax(member))\n                {\n                    anyMethodHadExtensionSyntax = true;\n                } 790806"];
11928 [label="CheckMethodMemberForExtensionSyntax(member) 790807"];
11929 [label="param CheckMethodMemberForExtensionSyntax(Syntax.InternalSyntax.CSharpSyntaxNode member) 790808"];
11930 [label="member.Kind 790809"];
11931 [label="get { return (SyntaxKind)this.RawKind; } 790810"];
11932 [label="return (SyntaxKind)this.RawKind; 790811"];
11933 [label="if (member.Kind == SyntaxKind.MethodDeclaration)\n            {\n                var methodDecl = (Syntax.InternalSyntax.MethodDeclarationSyntax)member;\n\n                var paramList = methodDecl.parameterList;\n                if (paramList != null)\n                {\n                    var parameters = paramList.Parameters;\n\n                    if (parameters.Count != 0)\n                    {\n                        var firstParameter = parameters[0];\n                        foreach (var modifier in firstParameter.Modifiers)\n                        {\n                            if (modifier.Kind == SyntaxKind.ThisKeyword)\n                            {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            } 790812"];
11934 [label="return false; 790813"];
11935 [label="if (!anyMethodHadExtensionSyntax && CheckMethodMemberForExtensionSyntax(member))\n                {\n                    anyMethodHadExtensionSyntax = true;\n                } 790814"];
11936 [label="if (!anyMethodHadExtensionSyntax && CheckMethodMemberForExtensionSyntax(member))\n                {\n                    anyMethodHadExtensionSyntax = true;\n                } 790815"];
11937 [label="if (!anyMemberHasAttributes && CheckMemberForAttributes(member))\n                {\n                    anyMemberHasAttributes = true;\n                } 790816"];
11938 [label="CheckMemberForAttributes(member) 790817"];
11939 [label="param CheckMemberForAttributes(Syntax.InternalSyntax.CSharpSyntaxNode member) 790818"];
11940 [label="member.Kind 790819"];
11941 [label="get { return (SyntaxKind)this.RawKind; } 790820"];
11942 [label="return (SyntaxKind)this.RawKind; 790821"];
11943 [label="switch (member.Kind)\n            {\n                case SyntaxKind.CompilationUnit:\n                    return (((Syntax.InternalSyntax.CompilationUnitSyntax)member).AttributeLists).Any();\n\n                case SyntaxKind.ClassDeclaration:\n                case SyntaxKind.StructDeclaration:\n                case SyntaxKind.InterfaceDeclaration:\n                case SyntaxKind.EnumDeclaration:\n                case SyntaxKind.RecordDeclaration:\n                    return (((Syntax.InternalSyntax.BaseTypeDeclarationSyntax)member).AttributeLists).Any();\n\n                case SyntaxKind.DelegateDeclaration:\n                    return (((Syntax.InternalSyntax.DelegateDeclarationSyntax)member).AttributeLists).Any();\n\n                case SyntaxKind.FieldDeclaration:\n                case SyntaxKind.EventFieldDeclaration:\n                    return (((Syntax.InternalSyntax.BaseFieldDeclarationSyntax)member).AttributeLists).Any();\n\n                case SyntaxKind.MethodDeclaration:\n                case SyntaxKind.OperatorDeclaration:\n                case SyntaxKind.ConversionOperatorDeclaration:\n                case SyntaxKind.ConstructorDeclaration:\n                case SyntaxKind.DestructorDeclaration:\n                    return (((Syntax.InternalSyntax.BaseMethodDeclarationSyntax)member).AttributeLists).Any();\n\n                case SyntaxKind.PropertyDeclaration:\n                case SyntaxKind.EventDeclaration:\n                case SyntaxKind.IndexerDeclaration:\n                    var baseProp = (Syntax.InternalSyntax.BasePropertyDeclarationSyntax)member;\n                    bool hasAttributes = baseProp.AttributeLists.Any();\n\n                    if (!hasAttributes && baseProp.AccessorList != null)\n                    {\n                        foreach (var accessor in baseProp.AccessorList.Accessors)\n                        {\n                            hasAttributes |= accessor.AttributeLists.Any();\n                        }\n                    }\n\n                    return hasAttributes;\n            } 790822"];
11944 [label="return (((Syntax.InternalSyntax.BaseFieldDeclarationSyntax)member).AttributeLists).Any(); 790823"];
11945 [label="if (!anyMemberHasAttributes && CheckMemberForAttributes(member))\n                {\n                    anyMemberHasAttributes = true;\n                } 790824"];
11946 [label="if (anyMethodHadExtensionSyntax)\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.AnyMemberHasExtensionMethodSyntax;\n            } 790825"];
11947 [label="if (anyMemberHasAttributes)\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.AnyMemberHasAttributes;\n            } 790826"];
11948 [label="if (anyNonTypeMembers)\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.HasAnyNontypeMembers;\n            } 790827"];
11949 [label="declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.HasAnyNontypeMembers; 790828"];
11950 [label="return ToImmutableAndFree(memberNameBuilder); 790829"];
11951 [label="ToImmutableAndFree(memberNameBuilder) 790830"];
11952 [label="param ToImmutableAndFree(ImmutableHashSet<string>.Builder builder) 790831"];
11953 [label="var result = builder.ToImmutable(); 790832"];
11954 [label="builder.Clear(); 790833"];
11955 [label="s_memberNameBuilderPool.Free(builder); 790834"];
11956 [label="s_memberNameBuilderPool.Free(builder); 790835"];
11957 [label="return result; 790836"];
11958 [label="if (((declFlags & SingleTypeDeclaration.TypeDeclarationFlags.HasAnyNontypeMembers) == 0) &&\n                node is RecordDeclarationSyntax { ParameterList: { } })\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.HasAnyNontypeMembers;\n            } 790837"];
11959 [label="if (((declFlags & SingleTypeDeclaration.TypeDeclarationFlags.HasAnyNontypeMembers) == 0) &&\n                node is RecordDeclarationSyntax { ParameterList: { } })\n            {\n                declFlags |= SingleTypeDeclaration.TypeDeclarationFlags.HasAnyNontypeMembers;\n            } 790838"];
11960 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790839"];
11961 [label="node.Modifiers 790840"];
11962 [label="=> true 790841"];
11963 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790842"];
11964 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790843"];
11965 [label="param ToDeclarationModifiers(this SyntaxTokenList modifiers) 790844"];
11966 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 790845"];
11967 [label="var result = DeclarationModifiers.None; 790846"];
11968 [label="bool seenNoDuplicates = true; 790847"];
11969 [label="bool seenNoAccessibilityDuplicates = true; 790848"];
11970 [label="foreach (var modifier in modifiers)\n            {\n                DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind());\n\n                ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics);\n\n                result |= one;\n            } 790849"];
11971 [label="foreach (var modifier in modifiers)\n            {\n                DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind());\n\n                ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics);\n\n                result |= one;\n            } 790850"];
11972 [label="=> true 790851"];
11973 [label="DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind()); 790852"];
11974 [label="modifier.ContextualKind() 790853"];
11975 [label="param ContextualKind(this SyntaxToken token) 790854"];
11976 [label="token.Language 790855"];
11977 [label="get { return LanguageNames.CSharp; } 790856"];
11978 [label="return LanguageNames.CSharp; 790857"];
11979 [label="return (object)token.Language == (object)LanguageNames.CSharp ? (SyntaxKind)token.RawContextualKind : SyntaxKind.None; 790858"];
11980 [label="(object)token.Language == (object)LanguageNames.CSharp 790859"];
11981 [label="token.RawContextualKind 790860"];
11982 [label="get\n            {\n                return (int)this.ContextualKind;\n            } 790861"];
11983 [label="this.ContextualKind 790862"];
11984 [label="get\n            {\n                return this.Kind;\n            } 790863"];
11985 [label="return (int)this.ContextualKind; 790864"];
11986 [label="ToDeclarationModifier(modifier.ContextualKind()) 790865"];
11987 [label="param ToDeclarationModifier(SyntaxKind kind) 790866"];
11988 [label="switch (kind)\n            {\n                case SyntaxKind.AbstractKeyword:\n                    return DeclarationModifiers.Abstract;\n                case SyntaxKind.AsyncKeyword:\n                    return DeclarationModifiers.Async;\n                case SyntaxKind.SealedKeyword:\n                    return DeclarationModifiers.Sealed;\n                case SyntaxKind.StaticKeyword:\n                    return DeclarationModifiers.Static;\n                case SyntaxKind.NewKeyword:\n                    return DeclarationModifiers.New;\n                case SyntaxKind.PublicKeyword:\n                    return DeclarationModifiers.Public;\n                case SyntaxKind.ProtectedKeyword:\n                    return DeclarationModifiers.Protected;\n                case SyntaxKind.InternalKeyword:\n                    return DeclarationModifiers.Internal;\n                case SyntaxKind.PrivateKeyword:\n                    return DeclarationModifiers.Private;\n                case SyntaxKind.ExternKeyword:\n                    return DeclarationModifiers.Extern;\n                case SyntaxKind.ReadOnlyKeyword:\n                    return DeclarationModifiers.ReadOnly;\n                case SyntaxKind.PartialKeyword:\n                    return DeclarationModifiers.Partial;\n                case SyntaxKind.UnsafeKeyword:\n                    return DeclarationModifiers.Unsafe;\n                case SyntaxKind.VirtualKeyword:\n                    return DeclarationModifiers.Virtual;\n                case SyntaxKind.OverrideKeyword:\n                    return DeclarationModifiers.Override;\n                case SyntaxKind.ConstKeyword:\n                    return DeclarationModifiers.Const;\n                case SyntaxKind.FixedKeyword:\n                    return DeclarationModifiers.Fixed;\n                case SyntaxKind.VolatileKeyword:\n                    return DeclarationModifiers.Volatile;\n                case SyntaxKind.RefKeyword:\n                    return DeclarationModifiers.Ref;\n                case SyntaxKind.DataKeyword:\n                    return DeclarationModifiers.Data;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 790867"];
11989 [label="return DeclarationModifiers.Public; 790868"];
11990 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 790869"];
11991 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 790870"];
11992 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 790871"];
11993 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 790872"];
11994 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 790873"];
11995 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 790874"];
11996 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 790875"];
11997 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 790876"];
11998 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 790877"];
11999 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 790878"];
12000 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 790879"];
12001 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 790880"];
12002 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 790881"];
12003 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 790882"];
12004 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 790883"];
12005 [label="result |= one; 790884"];
12006 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 790885"];
12007 [label="return result; 790886"];
12008 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790887"];
12009 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790888"];
12010 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790889"];
12011 [label="var modifiers = node.Modifiers.ToDeclarationModifiers(diagnostics: diagnostics); 790890"];
12012 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790891"];
12013 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790892"];
12014 [label="node.Identifier 790893"];
12015 [label="=> true 790894"];
12016 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790895"];
12017 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790896"];
12018 [label="param GetValueText(this) 790897"];
12019 [label="this.ValueText 790898"];
12020 [label="get { return this.TextField; } 790899"];
12021 [label="return this.TextField; 790900"];
12022 [label="return this.ValueText; 790901"];
12023 [label="get\n            {\n                return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count;\n            } 790902"];
12024 [label="return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count; 790903"];
12025 [label="return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count; 790904"];
12026 [label="this.TypeParameterList == null 790905"];
12027 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790906"];
12028 [label="node.Arity 790907"];
12029 [label="param GetReference(SyntaxNode node) 790908"];
12030 [label="param GetReference(this) 790909"];
12031 [label="return new SimpleSyntaxReference(node); 790910"];
12032 [label="return new SimpleSyntaxReference(node); 790911"];
12033 [label="new SimpleSyntaxReference(node) 790912"];
12034 [label="param SimpleSyntaxReference(SyntaxNode node) 790913"];
12035 [label="param SimpleSyntaxReference(this) 790914"];
12036 [label="param SimpleSyntaxReference(this) 790915"];
12037 [label="_node 790916"];
12038 [label="_node 790917"];
12039 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790918"];
12040 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790919"];
12041 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790920"];
12042 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790921"];
12043 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790922"];
12044 [label="node.Identifier 790923"];
12045 [label="=> true 790924"];
12046 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790925"];
12047 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790926"];
12048 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790927"];
12049 [label="get\n            {\n                return this.SyntaxTree;\n            } 790928"];
12050 [label="this.SyntaxTree 790929"];
12051 [label="get\n            {\n                var result = this._syntaxTree ?? ComputeSyntaxTree(this);\n                Debug.Assert(result != null);\n                return result;\n            } 790930"];
12052 [label="var result = this._syntaxTree ?? ComputeSyntaxTree(this); 790931"];
12053 [label="ComputeSyntaxTree(this) 790932"];
12054 [label="param ComputeSyntaxTree(CSharpSyntaxNode node) 790933"];
12055 [label="ArrayBuilder<CSharpSyntaxNode>? nodes = null; 790934"];
12056 [label="SyntaxTree? tree = null; 790935"];
12057 [label="while (true)\n            {\n                tree = node._syntaxTree;\n                if (tree != null)\n                {\n                    break;\n                }\n\n                var parent = node.Parent;\n                if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                }\n\n                tree = parent._syntaxTree;\n                if (tree != null)\n                {\n                    node._syntaxTree = tree;\n                    break;\n                }\n\n                (nodes ?? (nodes = ArrayBuilder<CSharpSyntaxNode>.GetInstance())).Add(node);\n                node = parent;\n            } 790936"];
12058 [label="tree = node._syntaxTree; 790937"];
12059 [label="if (tree != null)\n                {\n                    break;\n                } 790938"];
12060 [label="if (tree != null)\n                {\n                    break;\n                } 790939"];
12061 [label="node.Parent 790940"];
12062 [label="get\n            {\n                return (CSharpSyntaxNode?)base.Parent;\n            } 790941"];
12063 [label="return (CSharpSyntaxNode?)base.Parent; 790942"];
12064 [label="var parent = node.Parent; 790943"];
12065 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 790944"];
12066 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 790945"];
12067 [label="tree = parent._syntaxTree; 790946"];
12068 [label="if (tree != null)\n                {\n                    node._syntaxTree = tree;\n                    break;\n                } 790947"];
12069 [label="if (tree != null)\n                {\n                    node._syntaxTree = tree;\n                    break;\n                } 790948"];
12070 [label="(nodes ?? (nodes = ArrayBuilder<CSharpSyntaxNode>.GetInstance())).Add(node); 790949"];
12071 [label="(nodes ?? (nodes = ArrayBuilder<CSharpSyntaxNode>.GetInstance())).Add(node); 790950"];
12072 [label="node = parent; 790951"];
12073 [label="tree = node._syntaxTree; 790952"];
12074 [label="if (tree != null)\n                {\n                    break;\n                } 790953"];
12075 [label="return (CSharpSyntaxNode?)base.Parent; 790954"];
12076 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 790955"];
12077 [label="tree = parent._syntaxTree; 790956"];
12078 [label="if (tree != null)\n                {\n                    node._syntaxTree = tree;\n                    break;\n                } 790957"];
12079 [label="node._syntaxTree 790958"];
12080 [label="if (nodes != null)\n            {\n                Debug.Assert(tree != null);\n\n                foreach (var n in nodes)\n                {\n                    var existingTree = n._syntaxTree;\n                    if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    }\n                    n._syntaxTree = tree;\n                }\n\n                nodes.Free();\n            } 790959"];
12081 [label="if (nodes != null)\n            {\n                Debug.Assert(tree != null);\n\n                foreach (var n in nodes)\n                {\n                    var existingTree = n._syntaxTree;\n                    if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    }\n                    n._syntaxTree = tree;\n                }\n\n                nodes.Free();\n            } 790960"];
12082 [label="Debug.Assert(tree != null); 790961"];
12083 [label="Debug.Assert(tree != null); 790962"];
12084 [label="foreach (var n in nodes)\n                {\n                    var existingTree = n._syntaxTree;\n                    if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    }\n                    n._syntaxTree = tree;\n                } 790963"];
12085 [label="foreach (var n in nodes)\n                {\n                    var existingTree = n._syntaxTree;\n                    if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    }\n                    n._syntaxTree = tree;\n                } 790964"];
12086 [label="var existingTree = n._syntaxTree; 790965"];
12087 [label="if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    } 790966"];
12088 [label="if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    } 790967"];
12089 [label="n._syntaxTree 790968"];
12090 [label="nodes.Free(); 790969"];
12091 [label="return tree; 790970"];
12092 [label="var result = this._syntaxTree ?? ComputeSyntaxTree(this); 790971"];
12093 [label="Debug.Assert(result != null); 790972"];
12094 [label="Debug.Assert(result != null); 790973"];
12095 [label="return result; 790974"];
12096 [label="return this.SyntaxTree; 790975"];
12097 [label="param GetLeadingTriviaWidth(this) 790976"];
12098 [label="this.GetLeadingTrivia() 790977"];
12099 [label="param GetLeadingTrivia(this) 790978"];
12100 [label="return null; 790979"];
12101 [label="var leading = this.GetLeadingTrivia(); 790980"];
12102 [label="return leading != null ? leading.FullWidth : 0; 790981"];
12103 [label="return leading != null ? leading.FullWidth : 0; 790982"];
12104 [label="leading != null 790983"];
12105 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790984"];
12106 [label="get { return this.Text.Length; } 790985"];
12107 [label="this.Text 790986"];
12108 [label="get { return this.TextField; } 790987"];
12109 [label="return this.TextField; 790988"];
12110 [label="return this.Text.Length; 790989"];
12111 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 790990"];
12112 [label="VisitTypeChildren(node) 790991"];
12113 [label="param VisitTypeChildren(TypeDeclarationSyntax node) 790992"];
12114 [label="param VisitTypeChildren(this) 790993"];
12115 [label="if (node.Members.Count == 0)\n            {\n                return ImmutableArray<SingleTypeDeclaration>.Empty;\n            } 790994"];
12116 [label="node.Members 790995"];
12117 [label="param CSharpSyntaxNode(GreenNode green) 790996"];
12118 [label="param CSharpSyntaxNode(SyntaxNode? parent) 790997"];
12119 [label="param CSharpSyntaxNode(int position) 790998"];
12120 [label="param CSharpSyntaxNode(this) 790999"];
12121 [label="if (node.Members.Count == 0)\n            {\n                return ImmutableArray<SingleTypeDeclaration>.Empty;\n            } 791000"];
12122 [label="var children = ArrayBuilder<SingleTypeDeclaration>.GetInstance(); 791001"];
12123 [label="foreach (var member in node.Members)\n            {\n                var typeDecl = Visit(member) as SingleTypeDeclaration;\n                if (typeDecl != null)\n                {\n                    children.Add(typeDecl);\n                }\n            } 791002"];
12124 [label="var typeDecl = Visit(member) as SingleTypeDeclaration; 791003"];
12125 [label="Visit(member) 791004"];
12126 [label="param Visit(SyntaxNode? node) 791005"];
12127 [label="param Visit(this) 791006"];
12128 [label="return ((CSharpSyntaxNode)node).Accept(this); 791007"];
12129 [label="param DefaultVisit(SyntaxNode node) 791008"];
12130 [label="param DefaultVisit(this) 791009"];
12131 [label="return default; 791010"];
12132 [label="return ((CSharpSyntaxNode)node).Accept(this); 791011"];
12133 [label="if (typeDecl != null)\n                {\n                    children.Add(typeDecl);\n                } 791012"];
12134 [label="if (typeDecl != null)\n                {\n                    children.Add(typeDecl);\n                } 791013"];
12135 [label="return children.ToImmutableAndFree(); 791014"];
12136 [label="return new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791015"];
12137 [label="new SingleTypeDeclaration(\n                kind: kind,\n                name: node.Identifier.ValueText,\n                modifiers: modifiers,\n                arity: node.Arity,\n                declFlags: declFlags,\n                syntaxReference: _syntaxTree.GetReference(node),\n                nameLocation: new SourceLocation(node.Identifier),\n                memberNames: memberNames,\n                children: VisitTypeChildren(node),\n                diagnostics: diagnostics.ToReadOnlyAndFree()) 791016"];
12138 [label="param SingleTypeDeclaration(DeclarationKind kind) 791017"];
12139 [label="param SingleTypeDeclaration(string name) 791018"];
12140 [label="param SingleTypeDeclaration(int arity) 791019"];
12141 [label="param SingleTypeDeclaration(DeclarationModifiers modifiers) 791020"];
12142 [label="param SingleTypeDeclaration(TypeDeclarationFlags declFlags) 791021"];
12143 [label="param SingleTypeDeclaration(SyntaxReference syntaxReference) 791022"];
12144 [label="param SingleTypeDeclaration(SourceLocation nameLocation) 791023"];
12145 [label="param SingleTypeDeclaration(ImmutableHashSet<string> memberNames) 791024"];
12146 [label="param SingleTypeDeclaration(ImmutableArray<SingleTypeDeclaration> children) 791025"];
12147 [label="param SingleTypeDeclaration(ImmutableArray<Diagnostic> diagnostics) 791026"];
12148 [label="param SingleTypeDeclaration(this) 791027"];
12149 [label="name 791028"];
12150 [label="syntaxReference 791029"];
12151 [label="nameLocation 791030"];
12152 [label="diagnostics 791031"];
12153 [label="param SingleTypeDeclaration(this) 791032"];
12154 [label="param SingleNamespaceOrTypeDeclaration(string name) 791033"];
12155 [label="param SingleNamespaceOrTypeDeclaration(SyntaxReference syntaxReference) 791034"];
12156 [label="param SingleNamespaceOrTypeDeclaration(SourceLocation nameLocation) 791035"];
12157 [label="param SingleNamespaceOrTypeDeclaration(ImmutableArray<Diagnostic> diagnostics) 791036"];
12158 [label="param SingleNamespaceOrTypeDeclaration(this) 791037"];
12159 [label="name 791038"];
12160 [label="param SingleNamespaceOrTypeDeclaration(this) 791039"];
12161 [label="param Declaration(string name) 791040"];
12162 [label="name 791041"];
12163 [label="_syntaxReference 791042"];
12164 [label="_nameLocation 791043"];
12165 [label="_syntaxReference 791044"];
12166 [label="_nameLocation 791045"];
12167 [label="Diagnostics 791046"];
12168 [label="_kind 791047"];
12169 [label="_flags 791048"];
12170 [label="_arity 791049"];
12171 [label="_modifiers 791050"];
12172 [label="public ImmutableHashSet<string> MemberNames { get; } 791051"];
12173 [label="Debug.Assert(kind != DeclarationKind.Namespace); 791052"];
12174 [label="_kind 791053"];
12175 [label="_arity 791054"];
12176 [label="_modifiers 791055"];
12177 [label="MemberNames 791056"];
12178 [label="_children 791057"];
12179 [label="_flags 791058"];
12180 [label="return VisitTypeDeclaration(node, DeclarationKind.Class); 791059"];
12181 [label="return ((CSharpSyntaxNode)node).Accept(this); 791060"];
12182 [label="if (namespaceOrType != null)\n                {\n                    childrenBuilder.Add(namespaceOrType);\n                }\n                else if (acceptSimpleProgram && member.IsKind(SyntaxKind.GlobalStatement))\n                {\n                    var global = (GlobalStatementSyntax)member;\n                    // LAFHIS\n                    if (firstGlobalStatement == null)\n                        firstGlobalStatement = global;\n                    var topLevelStatement = global.Statement;\n\n                    if (!hasAwaitExpressions)\n                    {\n                        hasAwaitExpressions = SyntaxFacts.HasAwaitOperations(topLevelStatement);\n                    }\n\n                    if (!isIterator)\n                    {\n                        isIterator = SyntaxFacts.HasYieldOperations(topLevelStatement);\n                    }\n\n                    if (!hasReturnWithExpression)\n                    {\n                        hasReturnWithExpression = SyntaxFacts.HasReturnWithExpression(topLevelStatement);\n                    }\n                }\n                else if (!hasGlobalMembers && member.Kind() != SyntaxKind.IncompleteMember)\n                {\n                    hasGlobalMembers = true;\n                } 791061"];
12183 [label="if (namespaceOrType != null)\n                {\n                    childrenBuilder.Add(namespaceOrType);\n                }\n                else if (acceptSimpleProgram && member.IsKind(SyntaxKind.GlobalStatement))\n                {\n                    var global = (GlobalStatementSyntax)member;\n                    // LAFHIS\n                    if (firstGlobalStatement == null)\n                        firstGlobalStatement = global;\n                    var topLevelStatement = global.Statement;\n\n                    if (!hasAwaitExpressions)\n                    {\n                        hasAwaitExpressions = SyntaxFacts.HasAwaitOperations(topLevelStatement);\n                    }\n\n                    if (!isIterator)\n                    {\n                        isIterator = SyntaxFacts.HasYieldOperations(topLevelStatement);\n                    }\n\n                    if (!hasReturnWithExpression)\n                    {\n                        hasReturnWithExpression = SyntaxFacts.HasReturnWithExpression(topLevelStatement);\n                    }\n                }\n                else if (!hasGlobalMembers && member.Kind() != SyntaxKind.IncompleteMember)\n                {\n                    hasGlobalMembers = true;\n                } 791062"];
12184 [label="childrenBuilder.Add(namespaceOrType); 791063"];
12185 [label="childrenBuilder.Add(namespaceOrType); 791064"];
12186 [label="if (firstGlobalStatement is object)\n            {\n                childrenBuilder.Add(CreateSimpleProgram(firstGlobalStatement, hasAwaitExpressions, isIterator, hasReturnWithExpression));\n            } 791065"];
12187 [label="if (hasGlobalMembers)\n            {\n                //The implicit class is not static and has no extensions\n                SingleTypeDeclaration.TypeDeclarationFlags declFlags = SingleTypeDeclaration.TypeDeclarationFlags.None;\n                var memberNames = GetNonTypeMemberNames(internalMembers, ref declFlags, skipGlobalStatements: acceptSimpleProgram);\n                var container = _syntaxTree.GetReference(node);\n\n                childrenBuilder.Add(CreateImplicitClass(memberNames, container, declFlags));\n            } 791066"];
12188 [label="return childrenBuilder.ToImmutableAndFree(); 791067"];
12189 [label="bool hasUsings = node.Usings.Any(); 791068"];
12190 [label="bool hasExterns = node.Externs.Any(); 791069"];
12191 [label="NameSyntax name = node.Name; 791070"];
12192 [label="node.Name 791071"];
12193 [label="param CSharpSyntaxNode(GreenNode green) 791072"];
12194 [label="param CSharpSyntaxNode(SyntaxNode? parent) 791073"];
12195 [label="param CSharpSyntaxNode(int position) 791074"];
12196 [label="param CSharpSyntaxNode(this) 791075"];
12197 [label="CSharpSyntaxNode currentNode = node; 791076"];
12198 [label="QualifiedNameSyntax dotted; 791077"];
12199 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n            {\n                var ns = SingleNamespaceDeclaration.Create(\n                    name: dotted.Right.Identifier.ValueText,\n                    hasUsings: hasUsings,\n                    hasExternAliases: hasExterns,\n                    syntaxReference: _syntaxTree.GetReference(currentNode),\n                    nameLocation: new SourceLocation(dotted.Right),\n                    children: children,\n                    diagnostics: ImmutableArray<Diagnostic>.Empty);\n\n                var nsDeclaration = new[] { ns };\n                children = nsDeclaration.AsImmutableOrNull<SingleNamespaceOrTypeDeclaration>();\n                currentNode = name = dotted.Left;\n                hasUsings = false;\n                hasExterns = false;\n            } 791078"];
12200 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n            {\n                var ns = SingleNamespaceDeclaration.Create(\n                    name: dotted.Right.Identifier.ValueText,\n                    hasUsings: hasUsings,\n                    hasExternAliases: hasExterns,\n                    syntaxReference: _syntaxTree.GetReference(currentNode),\n                    nameLocation: new SourceLocation(dotted.Right),\n                    children: children,\n                    diagnostics: ImmutableArray<Diagnostic>.Empty);\n\n                var nsDeclaration = new[] { ns };\n                children = nsDeclaration.AsImmutableOrNull<SingleNamespaceOrTypeDeclaration>();\n                currentNode = name = dotted.Left;\n                hasUsings = false;\n                hasExterns = false;\n            } 791079"];
12201 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n            {\n                var ns = SingleNamespaceDeclaration.Create(\n                    name: dotted.Right.Identifier.ValueText,\n                    hasUsings: hasUsings,\n                    hasExternAliases: hasExterns,\n                    syntaxReference: _syntaxTree.GetReference(currentNode),\n                    nameLocation: new SourceLocation(dotted.Right),\n                    children: children,\n                    diagnostics: ImmutableArray<Diagnostic>.Empty);\n\n                var nsDeclaration = new[] { ns };\n                children = nsDeclaration.AsImmutableOrNull<SingleNamespaceOrTypeDeclaration>();\n                currentNode = name = dotted.Left;\n                hasUsings = false;\n                hasExterns = false;\n            } 791080"];
12202 [label="var diagnostics = DiagnosticBag.GetInstance(); 791081"];
12203 [label="if (ContainsGeneric(node.Name))\n            {\n                // We're not allowed to have generics.\n                diagnostics.Add(ErrorCode.ERR_UnexpectedGenericName, node.Name.GetLocation());\n            } 791082"];
12204 [label="ContainsGeneric(node.Name) 791083"];
12205 [label="param ContainsGeneric(NameSyntax name) 791084"];
12206 [label="name.Kind() 791085"];
12207 [label="param Kind(this) 791086"];
12208 [label="switch (name.Kind())\n            {\n                case SyntaxKind.GenericName:\n                    return true;\n                case SyntaxKind.AliasQualifiedName:\n                    return ContainsGeneric(((AliasQualifiedNameSyntax)name).Name);\n                case SyntaxKind.QualifiedName:\n                    var qualifiedName = (QualifiedNameSyntax)name;\n                    return ContainsGeneric(qualifiedName.Left) || ContainsGeneric(qualifiedName.Right);\n            } 791087"];
12209 [label="return false; 791088"];
12210 [label="if (ContainsGeneric(node.Name))\n            {\n                // We're not allowed to have generics.\n                diagnostics.Add(ErrorCode.ERR_UnexpectedGenericName, node.Name.GetLocation());\n            } 791089"];
12211 [label="if (ContainsAlias(node.Name))\n            {\n                diagnostics.Add(ErrorCode.ERR_UnexpectedAliasedName, node.Name.GetLocation());\n            } 791090"];
12212 [label="ContainsAlias(node.Name) 791091"];
12213 [label="param ContainsAlias(NameSyntax name) 791092"];
12214 [label="name.Kind() 791093"];
12215 [label="param Kind(this) 791094"];
12216 [label="switch (name.Kind())\n            {\n                case SyntaxKind.GenericName:\n                    return false;\n                case SyntaxKind.AliasQualifiedName:\n                    return true;\n                case SyntaxKind.QualifiedName:\n                    var qualifiedName = (QualifiedNameSyntax)name;\n                    return ContainsAlias(qualifiedName.Left);\n            } 791095"];
12217 [label="return false; 791096"];
12218 [label="if (ContainsAlias(node.Name))\n            {\n                diagnostics.Add(ErrorCode.ERR_UnexpectedAliasedName, node.Name.GetLocation());\n            } 791097"];
12219 [label="if (node.AttributeLists.Count > 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_BadModifiersOnNamespace, node.AttributeLists[0].GetLocation());\n            } 791098"];
12220 [label="if (node.AttributeLists.Count > 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_BadModifiersOnNamespace, node.AttributeLists[0].GetLocation());\n            } 791099"];
12221 [label="if (node.Modifiers.Count > 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_BadModifiersOnNamespace, node.Modifiers[0].GetLocation());\n            } 791100"];
12222 [label="node.Modifiers 791101"];
12223 [label="get\n            {\n                return (InternalSyntax.NamespaceDeclarationSyntax)base.Green;\n            } 791102"];
12224 [label="return (InternalSyntax.NamespaceDeclarationSyntax)base.Green; 791103"];
12225 [label="if (node.Modifiers.Count > 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_BadModifiersOnNamespace, node.Modifiers[0].GetLocation());\n            } 791104"];
12226 [label="name.GetUnqualifiedName() 791105"];
12227 [label="param GetUnqualifiedName(this) 791106"];
12228 [label="return this; 791107"];
12229 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791108"];
12230 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791109"];
12231 [label="name.GetUnqualifiedName().Identifier 791110"];
12232 [label="=> true 791111"];
12233 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791112"];
12234 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791113"];
12235 [label="param GetValueText(this) 791114"];
12236 [label="this.ValueText 791115"];
12237 [label="param GetReference(SyntaxNode node) 791116"];
12238 [label="param GetReference(this) 791117"];
12239 [label="return new SimpleSyntaxReference(node); 791118"];
12240 [label="new SimpleSyntaxReference(node) 791119"];
12241 [label="param SimpleSyntaxReference(this) 791120"];
12242 [label="param SimpleSyntaxReference(this) 791121"];
12243 [label="_node 791122"];
12244 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791123"];
12245 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791124"];
12246 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791125"];
12247 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791126"];
12248 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791127"];
12249 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791128"];
12250 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791129"];
12251 [label="this.SyntaxTree 791130"];
12252 [label="ComputeSyntaxTree(this) 791131"];
12253 [label="ArrayBuilder<CSharpSyntaxNode>? nodes = null; 791132"];
12254 [label="SyntaxTree? tree = null; 791133"];
12255 [label="while (true)\n            {\n                tree = node._syntaxTree;\n                if (tree != null)\n                {\n                    break;\n                }\n\n                var parent = node.Parent;\n                if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                }\n\n                tree = parent._syntaxTree;\n                if (tree != null)\n                {\n                    node._syntaxTree = tree;\n                    break;\n                }\n\n                (nodes ?? (nodes = ArrayBuilder<CSharpSyntaxNode>.GetInstance())).Add(node);\n                node = parent;\n            } 791134"];
12256 [label="tree = node._syntaxTree; 791135"];
12257 [label="if (tree != null)\n                {\n                    break;\n                } 791136"];
12258 [label="if (tree != null)\n                {\n                    break;\n                } 791137"];
12259 [label="node.Parent 791138"];
12260 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 791139"];
12261 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 791140"];
12262 [label="if (tree != null)\n                {\n                    node._syntaxTree = tree;\n                    break;\n                } 791141"];
12263 [label="if (nodes != null)\n            {\n                Debug.Assert(tree != null);\n\n                foreach (var n in nodes)\n                {\n                    var existingTree = n._syntaxTree;\n                    if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    }\n                    n._syntaxTree = tree;\n                }\n\n                nodes.Free();\n            } 791142"];
12264 [label="if (nodes != null)\n            {\n                Debug.Assert(tree != null);\n\n                foreach (var n in nodes)\n                {\n                    var existingTree = n._syntaxTree;\n                    if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    }\n                    n._syntaxTree = tree;\n                }\n\n                nodes.Free();\n            } 791143"];
12265 [label="Debug.Assert(result != null); 791144"];
12266 [label="Debug.Assert(result != null); 791145"];
12267 [label="param GetLeadingTriviaWidth(this) 791146"];
12268 [label="this.GetLeadingTrivia() 791147"];
12269 [label="param GetLeadingTrivia(this) 791148"];
12270 [label="return null; 791149"];
12271 [label="var leading = this.GetLeadingTrivia(); 791150"];
12272 [label="return leading != null ? leading.FullWidth : 0; 791151"];
12273 [label="return leading != null ? leading.FullWidth : 0; 791152"];
12274 [label="leading != null 791153"];
12275 [label="param GetTrailingTriviaWidth(this) 791154"];
12276 [label="this.GetTrailingTrivia() 791155"];
12277 [label="param GetTrailingTrivia(this) 791156"];
12278 [label="var trailing = this.GetTrailingTrivia(); 791157"];
12279 [label="return trailing != null ? trailing.FullWidth : 0; 791158"];
12280 [label="return trailing != null ? trailing.FullWidth : 0; 791159"];
12281 [label="trailing != null 791160"];
12282 [label="trailing.FullWidth 791161"];
12283 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791162"];
12284 [label="return SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()); 791163"];
12285 [label="SingleNamespaceDeclaration.Create(\n                name: name.GetUnqualifiedName().Identifier.ValueText,\n                hasUsings: hasUsings,\n                hasExternAliases: hasExterns,\n                syntaxReference: _syntaxTree.GetReference(currentNode),\n                nameLocation: new SourceLocation(name),\n                children: children,\n                diagnostics: diagnostics.ToReadOnlyAndFree()) 791164"];
12286 [label="param Create(string name) 791165"];
12287 [label="param Create(bool hasUsings) 791166"];
12288 [label="param Create(bool hasExternAliases) 791167"];
12289 [label="param Create(SyntaxReference syntaxReference) 791168"];
12290 [label="param Create(SourceLocation nameLocation) 791169"];
12291 [label="param Create(ImmutableArray<SingleNamespaceOrTypeDeclaration> children) 791170"];
12292 [label="param Create(ImmutableArray<Diagnostic> diagnostics) 791171"];
12293 [label="if (!hasUsings && !hasExternAliases)\n            {\n                return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics);\n            }\n            else\n            {\n                return new SingleNamespaceDeclarationEx(\n                    name, hasUsings, hasExternAliases, syntaxReference, nameLocation, children, diagnostics);\n            } 791172"];
12294 [label="return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics); 791173"];
12295 [label="return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics); 791174"];
12296 [label="return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics); 791175"];
12297 [label="return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics); 791176"];
12298 [label="return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics); 791177"];
12299 [label="return new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics); 791178"];
12300 [label="new SingleNamespaceDeclaration(\n                    name, syntaxReference, nameLocation, children, diagnostics) 791179"];
12301 [label="param SingleNamespaceDeclaration(string name) 791180"];
12302 [label="param SingleNamespaceDeclaration(SyntaxReference syntaxReference) 791181"];
12303 [label="param SingleNamespaceDeclaration(SourceLocation nameLocation) 791182"];
12304 [label="param SingleNamespaceDeclaration(ImmutableArray<SingleNamespaceOrTypeDeclaration> children) 791183"];
12305 [label="param SingleNamespaceDeclaration(ImmutableArray<Diagnostic> diagnostics) 791184"];
12306 [label="param SingleNamespaceDeclaration(this) 791185"];
12307 [label="name 791186"];
12308 [label="syntaxReference 791187"];
12309 [label="nameLocation 791188"];
12310 [label="diagnostics 791189"];
12311 [label="param SingleNamespaceDeclaration(this) 791190"];
12312 [label="param SingleNamespaceOrTypeDeclaration(string name) 791191"];
12313 [label="param SingleNamespaceOrTypeDeclaration(SyntaxReference syntaxReference) 791192"];
12314 [label="param SingleNamespaceOrTypeDeclaration(SourceLocation nameLocation) 791193"];
12315 [label="param SingleNamespaceOrTypeDeclaration(ImmutableArray<Diagnostic> diagnostics) 791194"];
12316 [label="name 791195"];
12317 [label="_syntaxReference 791196"];
12318 [label="_nameLocation 791197"];
12319 [label="_children 791198"];
12320 [label="return ((CSharpSyntaxNode)node).Accept(this); 791199"];
12321 [label="if (namespaceOrType != null)\n                {\n                    childrenBuilder.Add(namespaceOrType);\n                }\n                else if (acceptSimpleProgram && member.IsKind(SyntaxKind.GlobalStatement))\n                {\n                    var global = (GlobalStatementSyntax)member;\n                    // LAFHIS\n                    if (firstGlobalStatement == null)\n                        firstGlobalStatement = global;\n                    var topLevelStatement = global.Statement;\n\n                    if (!hasAwaitExpressions)\n                    {\n                        hasAwaitExpressions = SyntaxFacts.HasAwaitOperations(topLevelStatement);\n                    }\n\n                    if (!isIterator)\n                    {\n                        isIterator = SyntaxFacts.HasYieldOperations(topLevelStatement);\n                    }\n\n                    if (!hasReturnWithExpression)\n                    {\n                        hasReturnWithExpression = SyntaxFacts.HasReturnWithExpression(topLevelStatement);\n                    }\n                }\n                else if (!hasGlobalMembers && member.Kind() != SyntaxKind.IncompleteMember)\n                {\n                    hasGlobalMembers = true;\n                } 791200"];
12322 [label="if (firstGlobalStatement is object)\n            {\n                childrenBuilder.Add(CreateSimpleProgram(firstGlobalStatement, hasAwaitExpressions, isIterator, hasReturnWithExpression));\n            } 791201"];
12323 [label="if (hasGlobalMembers)\n            {\n                //The implicit class is not static and has no extensions\n                SingleTypeDeclaration.TypeDeclarationFlags declFlags = SingleTypeDeclaration.TypeDeclarationFlags.None;\n                var memberNames = GetNonTypeMemberNames(internalMembers, ref declFlags, skipGlobalStatements: acceptSimpleProgram);\n                var container = _syntaxTree.GetReference(node);\n\n                childrenBuilder.Add(CreateImplicitClass(memberNames, container, declFlags));\n            } 791202"];
12324 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 791203"];
12325 [label="compilationUnit.Usings 791204"];
12326 [label="param GetReference(SyntaxNode node) 791205"];
12327 [label="param GetReference(this) 791206"];
12328 [label="return new SimpleSyntaxReference(node); 791207"];
12329 [label="new SimpleSyntaxReference(node) 791208"];
12330 [label="param SimpleSyntaxReference(this) 791209"];
12331 [label="param SimpleSyntaxReference(this) 791210"];
12332 [label="_node 791211"];
12333 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 791212"];
12334 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 791213"];
12335 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 791214"];
12336 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 791215"];
12337 [label="compilationUnit.AttributeLists 791216"];
12338 [label="param RootSingleNamespaceDeclaration(bool hasUsings) 791217"];
12339 [label="param RootSingleNamespaceDeclaration(bool hasExternAliases) 791218"];
12340 [label="param RootSingleNamespaceDeclaration(SyntaxReference treeNode) 791219"];
12341 [label="param RootSingleNamespaceDeclaration(ImmutableArray<SingleNamespaceOrTypeDeclaration> children) 791220"];
12342 [label="param RootSingleNamespaceDeclaration(ImmutableArray<ReferenceDirective> referenceDirectives) 791221"];
12343 [label="param RootSingleNamespaceDeclaration(bool hasAssemblyAttributes) 791222"];
12344 [label="param RootSingleNamespaceDeclaration(this) 791223"];
12345 [label="string.Empty 791224"];
12346 [label="treeNode 791225"];
12347 [label="treeNode 791226"];
12348 [label="new SourceLocation(treeNode) 791227"];
12349 [label="new SourceLocation(treeNode) 791228"];
12350 [label="get\n            {\n                return _node.SyntaxTree;\n            } 791229"];
12351 [label="return _node.SyntaxTree; 791230"];
12352 [label="_node.SyntaxTree 791231"];
12353 [label="get\n            {\n                return this.SyntaxTree;\n            } 791232"];
12354 [label="this.SyntaxTree 791233"];
12355 [label="Debug.Assert(result != null); 791234"];
12356 [label="Debug.Assert(result != null); 791235"];
12357 [label="get\n            {\n                return _node.Span;\n            } 791236"];
12358 [label="return _node.Span; 791237"];
12359 [label="_node.Span 791238"];
12360 [label="param GetLeadingTriviaWidth(this) 791239"];
12361 [label="this.GetLeadingTrivia() 791240"];
12362 [label="return leading != null ? leading.FullWidth : 0; 791241"];
12363 [label="param GetTrailingTriviaWidth(this) 791242"];
12364 [label="this.GetTrailingTrivia() 791243"];
12365 [label="param GetTrailingTrivia(this) 791244"];
12366 [label="var trailing = this.GetTrailingTrivia(); 791245"];
12367 [label="return trailing != null ? trailing.FullWidth : 0; 791246"];
12368 [label="return trailing != null ? trailing.FullWidth : 0; 791247"];
12369 [label="trailing != null 791248"];
12370 [label="return _node.Span; 791249"];
12371 [label="children 791250"];
12372 [label="ImmutableArray<Diagnostic>.Empty 791251"];
12373 [label="param RootSingleNamespaceDeclaration(this) 791252"];
12374 [label="param SingleNamespaceDeclaration(string name) 791253"];
12375 [label="param SingleNamespaceDeclaration(SyntaxReference syntaxReference) 791254"];
12376 [label="param SingleNamespaceDeclaration(SourceLocation nameLocation) 791255"];
12377 [label="param SingleNamespaceDeclaration(ImmutableArray<SingleNamespaceOrTypeDeclaration> children) 791256"];
12378 [label="param SingleNamespaceDeclaration(ImmutableArray<Diagnostic> diagnostics) 791257"];
12379 [label="name 791258"];
12380 [label="diagnostics 791259"];
12381 [label="param SingleNamespaceDeclaration(this) 791260"];
12382 [label="param SingleNamespaceOrTypeDeclaration(string name) 791261"];
12383 [label="param SingleNamespaceOrTypeDeclaration(ImmutableArray<Diagnostic> diagnostics) 791262"];
12384 [label="name 791263"];
12385 [label="param SingleNamespaceOrTypeDeclaration(this) 791264"];
12386 [label="param Declaration(string name) 791265"];
12387 [label="name 791266"];
12388 [label="this.name 791267"];
12389 [label="_syntaxReference 791268"];
12390 [label="_nameLocation 791269"];
12391 [label="Diagnostics 791270"];
12392 [label="_hasAssemblyAttributes 791271"];
12393 [label="_hasUsings 791272"];
12394 [label="_hasExternAliases 791273"];
12395 [label="Debug.Assert(!referenceDirectives.IsDefault); 791274"];
12396 [label="_referenceDirectives 791275"];
12397 [label="_hasAssemblyAttributes 791276"];
12398 [label="_hasUsings 791277"];
12399 [label="_hasExternAliases 791278"];
12400 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 791279"];
12401 [label="_latestLazyRootDeclaration.Value.ReferenceDirectives 791280"];
12402 [label="get\n            {\n                return _referenceDirectives;\n            } 791281"];
12403 [label="return _referenceDirectives; 791282"];
12404 [label="get { return _options; } 791283"];
12405 [label="return _options; 791284"];
12406 [label="get { return CSharp.MessageProvider.Instance; } 791285"];
12407 [label="return CSharp.MessageProvider.Instance; 791286"];
12408 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 791287"];
12409 [label="param CreateAssemblyDataForFile(PEAssembly assembly) 791288"];
12410 [label="param CreateAssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 791289"];
12411 [label="param CreateAssemblyDataForFile(DocumentationProvider documentationProvider) 791290"];
12412 [label="param CreateAssemblyDataForFile(string sourceAssemblySimpleName) 791291"];
12413 [label="param CreateAssemblyDataForFile(MetadataImportOptions importOptions) 791292"];
12414 [label="param CreateAssemblyDataForFile(bool embedInteropTypes) 791293"];
12415 [label="param CreateAssemblyDataForFile(this) 791294"];
12416 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791295"];
12417 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791296"];
12418 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791297"];
12419 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791298"];
12420 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791299"];
12421 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791300"];
12422 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 791301"];
12423 [label="new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions) 791302"];
12424 [label="param AssemblyDataForFile(PEAssembly assembly) 791303"];
12425 [label="param AssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 791304"];
12426 [label="param AssemblyDataForFile(bool embedInteropTypes) 791305"];
12427 [label="param AssemblyDataForFile(DocumentationProvider documentationProvider) 791306"];
12428 [label="param AssemblyDataForFile(string sourceAssemblySimpleName) 791307"];
12429 [label="param AssemblyDataForFile(MetadataImportOptions compilationImportOptions) 791308"];
12430 [label="param AssemblyDataForFile(this) 791309"];
12431 [label="assembly.Identity 791310"];
12432 [label="assembly.AssemblyReferences 791311"];
12433 [label="embedInteropTypes 791312"];
12434 [label="param AssemblyDataForFile(this) 791313"];
12435 [label="param AssemblyDataForMetadataOrCompilation(AssemblyIdentity identity) 791314"];
12436 [label="param AssemblyDataForMetadataOrCompilation(ImmutableArray<AssemblyIdentity> referencedAssemblies) 791315"];
12437 [label="param AssemblyDataForMetadataOrCompilation(bool embedInteropTypes) 791316"];
12438 [label="param AssemblyDataForMetadataOrCompilation(this) 791317"];
12439 [label="param AssemblyDataForMetadataOrCompilation(this) 791318"];
12440 [label="_assemblies 791319"];
12441 [label="_identity 791320"];
12442 [label="_embedInteropTypes 791321"];
12443 [label="RoslynDebug.Assert(identity != null); 791322"];
12444 [label="RoslynDebug.Assert(identity != null); 791323"];
12445 [label="Debug.Assert(!referencedAssemblies.IsDefault); 791324"];
12446 [label="_embedInteropTypes 791325"];
12447 [label="_identity 791326"];
12448 [label="_referencedAssemblies 791327"];
12449 [label="Assembly 791328"];
12450 [label="CachedSymbols 791329"];
12451 [label="DocumentationProvider 791330"];
12452 [label="_compilationImportOptions 791331"];
12453 [label="_sourceAssemblySimpleName 791332"];
12454 [label="_internalsVisibleComputed 791333"];
12455 [label="_internalsPotentiallyVisibleToCompilation 791334"];
12456 [label="RoslynDebug.Assert(documentationProvider != null); 791335"];
12457 [label="RoslynDebug.Assert(documentationProvider != null); 791336"];
12458 [label="RoslynDebug.Assert(cachedSymbols != null); 791337"];
12459 [label="RoslynDebug.Assert(cachedSymbols != null); 791338"];
12460 [label="CachedSymbols 791339"];
12461 [label="Assembly 791340"];
12462 [label="DocumentationProvider 791341"];
12463 [label="_compilationImportOptions 791342"];
12464 [label="_sourceAssemblySimpleName 791343"];
12465 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 791344"];
12466 [label="RoslynDebug.Assert(identity != null); 791345"];
12467 [label="Debug.Assert(!referencedAssemblies.IsDefault); 791346"];
12468 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 791347"];
12469 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 791348"];
12470 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 791349"];
12471 [label="get\n                    {\n                        return _identity;\n                    } 791350"];
12472 [label="return _identity; 791351"];
12473 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 791352"];
12474 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 791353"];
12475 [label="bool hasCircularReference; 791354"];
12476 [label="int corLibraryIndex; 791355"];
12477 [label="ImmutableArray<MetadataReference> implicitlyResolvedReferences; 791356"];
12478 [label="implicitlyResolvedReferences 791357"];
12479 [label="ImmutableArray<ResolvedReference> implicitlyResolvedReferenceMap; 791358"];
12480 [label="implicitlyResolvedReferenceMap 791359"];
12481 [label="ImmutableArray<AssemblyData> allAssemblyData; 791360"];
12482 [label="allAssemblyData 791361"];
12483 [label="var temp1 = compilation.ScriptCompilationInfo; 791362"];
12484 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 791363"];
12485 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 791364"];
12486 [label="temp1 != null 791365"];
12487 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 791366"];
12488 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 791367"];
12489 [label="temp2 != null 791368"];
12490 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 791369"];
12491 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 791370"];
12492 [label="temp3 != null 791371"];
12493 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 791372"];
12494 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 791373"];
12495 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791374"];
12496 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791375"];
12497 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791376"];
12498 [label="compilation.Options 791377"];
12499 [label="get\n            {\n                return _options;\n            } 791378"];
12500 [label="return _options; 791379"];
12501 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791380"];
12502 [label="compilation.Options 791381"];
12503 [label="get\n            {\n                return _options;\n            } 791382"];
12504 [label="return _options; 791383"];
12505 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791384"];
12506 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791385"];
12507 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791386"];
12508 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791387"];
12509 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791388"];
12510 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791389"];
12511 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791390"];
12512 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791391"];
12513 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791392"];
12514 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791393"];
12515 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791394"];
12516 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 791395"];
12517 [label="param BindAssemblyReferences(ImmutableArray<AssemblyData> assemblies) 791396"];
12518 [label="param BindAssemblyReferences(AssemblyIdentityComparer assemblyIdentityComparer) 791397"];
12519 [label="param BindAssemblyReferences(this) 791398"];
12520 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 791399"];
12521 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 791400"];
12522 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 791401"];
12523 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 791402"];
12524 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 791403"];
12525 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 791404"];
12526 [label="return _embedInteropTypes; 791405"];
12527 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 791406"];
12528 [label="return _referencedAssemblies; 791407"];
12529 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 791408"];
12530 [label="return Assembly.ContainsNoPiaLocalTypes(); 791409"];
12531 [label="get\n                    {\n                        return Assembly.DeclaresTheObjectClass;\n                    } 791410"];
12532 [label="return Assembly.DeclaresTheObjectClass; 791411"];
12533 [label="get\n                    {\n                        if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        }\n\n                        return _assemblies;\n                    } 791412"];
12534 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 791413"];
12535 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 791414"];
12536 [label="_assemblies = new List<AssemblySymbol>(); 791415"];
12537 [label="_assemblies 791416"];
12538 [label="AddAvailableSymbols(_assemblies); 791417"];
12539 [label="AddAvailableSymbols(_assemblies) 791418"];
12540 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 791419"];
12541 [label="param AddAvailableSymbols(this) 791420"];
12542 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 791421"];
12543 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 791422"];
12544 [label="AddAvailableSymbols(_assemblies); 791423"];
12545 [label="return _assemblies; 791424"];
12546 [label="AddAvailableSymbols(_assemblies); 791425"];
12547 [label="AddAvailableSymbols(_assemblies) 791426"];
12548 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 791427"];
12549 [label="param AddAvailableSymbols(this) 791428"];
12550 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 791429"];
12551 [label="AddAvailableSymbols(_assemblies); 791430"];
12552 [label="Debug.Assert(bindingResult.Length == allAssemblyData.Length); 791431"];
12553 [label="var references = explicitReferences.AddRange(implicitlyResolvedReferences); 791432"];
12554 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 791433"];
12555 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 791434"];
12556 [label="Dictionary<MetadataReference, int> referencedAssembliesMap, referencedModulesMap; 791435"];
12557 [label="ImmutableArray<ImmutableArray<string>> aliasesOfReferencedAssemblies; 791436"];
12558 [label="aliasesOfReferencedAssemblies 791437"];
12559 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791438"];
12560 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791439"];
12561 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791440"];
12562 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791441"];
12563 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791442"];
12564 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791443"];
12565 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791444"];
12566 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791445"];
12567 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791446"];
12568 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 791447"];
12569 [label="var newSymbols = new List<int>(); 791448"];
12570 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 791449"];
12571 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 791450"];
12572 [label="ref BoundInputAssembly bound = ref bindingResult[i]; 791451"];
12573 [label="if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        } 791452"];
12574 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 791453"];
12575 [label="((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol() 791454"];
12576 [label="param CreateAssemblySymbol(this) 791455"];
12577 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 791456"];
12578 [label="this.IsLinked 791457"];
12579 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 791458"];
12580 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 791459"];
12581 [label="this.EffectiveImportOptions 791460"];
12582 [label="get\n                    {\n                        // We need to import internal members if they might be visible to the compilation being compiled:\n                        if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        }\n\n                        return _compilationImportOptions;\n                    } 791461"];
12583 [label="InternalsMayBeVisibleToCompilation 791462"];
12584 [label="get\n                    {\n                        if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        }\n\n                        return _internalsPotentiallyVisibleToCompilation;\n                    } 791463"];
12585 [label="if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        } 791464"];
12586 [label="_internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly); 791465"];
12587 [label="_internalsPotentiallyVisibleToCompilation 791466"];
12588 [label="_internalsVisibleComputed = true; 791467"];
12589 [label="_internalsVisibleComputed 791468"];
12590 [label="return _internalsPotentiallyVisibleToCompilation; 791469"];
12591 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 791470"];
12592 [label="return _compilationImportOptions; 791471"];
12593 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 791472"];
12594 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 791473"];
12595 [label="new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions) 791474"];
12596 [label="param PEAssemblySymbol(PEAssembly assembly) 791475"];
12597 [label="param PEAssemblySymbol(DocumentationProvider documentationProvider) 791476"];
12598 [label="param PEAssemblySymbol(bool isLinked) 791477"];
12599 [label="param PEAssemblySymbol(MetadataImportOptions importOptions) 791478"];
12600 [label="param PEAssemblySymbol(this) 791479"];
12601 [label="param PEAssemblySymbol(this) 791480"];
12602 [label="param MetadataOrSourceAssemblySymbol(this) 791481"];
12603 [label="param MetadataOrSourceAssemblySymbol(this) 791482"];
12604 [label="param NonMissingAssemblySymbol(this) 791483"];
12605 [label="new char[] { '+' } 791484"];
12606 [label="'+' 791485"];
12607 [label="new char[] { '+' } 791486"];
12608 [label="s_nestedTypeNameSeparators = new char[] { '+' } 791487"];
12609 [label="param NonMissingAssemblySymbol(this) 791488"];
12610 [label="param AssemblySymbol(this) 791489"];
12611 [label="param AssemblySymbol(this) 791490"];
12612 [label="param Symbol(this) 791491"];
12613 [label="_lazyISymbol 791492"];
12614 [label="_corLibrary 791493"];
12615 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 791494"];
12616 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 791495"];
12617 [label="_globalNamespace 791496"];
12618 [label="_lazySpecialTypes 791497"];
12619 [label="_cachedSpecialTypes 791498"];
12620 [label="_lazyNativeIntegerTypes 791499"];
12621 [label="_lazyTypeNames 791500"];
12622 [label="_lazyNamespaceNames 791501"];
12623 [label="_lazySpecialTypeMembers 791502"];
12624 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 791503"];
12625 [label="_assembly 791504"];
12626 [label="_documentationProvider 791505"];
12627 [label="_isLinked 791506"];
12628 [label="Debug.Assert(assembly != null); 791507"];
12629 [label="Debug.Assert(assembly != null); 791508"];
12630 [label="Debug.Assert(documentationProvider != null); 791509"];
12631 [label="Debug.Assert(documentationProvider != null); 791510"];
12632 [label="_assembly 791511"];
12633 [label="_documentationProvider 791512"];
12634 [label="var modules = new ModuleSymbol[assembly.Modules.Length]; 791513"];
12635 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 791514"];
12636 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 791515"];
12637 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 791516"];
12638 [label="31 791517"];
12639 [label="DefaultTypeMapCapacity = 31 791518"];
12640 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 791519"];
12641 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 791520"];
12642 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 791521"];
12643 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 791522"];
12644 [label="new PEModuleSymbol(this, assembly.Modules[i], importOptions, i) 791523"];
12645 [label="param PEModuleSymbol(PEAssemblySymbol assemblySymbol) 791524"];
12646 [label="param PEModuleSymbol(PEModule module) 791525"];
12647 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 791526"];
12648 [label="param PEModuleSymbol(int ordinal) 791527"];
12649 [label="param PEModuleSymbol(this) 791528"];
12650 [label="assemblySymbol 791529"];
12651 [label="module 791530"];
12652 [label="importOptions 791531"];
12653 [label="ordinal 791532"];
12654 [label="param PEModuleSymbol(this) 791533"];
12655 [label="param PEModuleSymbol(AssemblySymbol assemblySymbol) 791534"];
12656 [label="param PEModuleSymbol(PEModule module) 791535"];
12657 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 791536"];
12658 [label="param PEModuleSymbol(int ordinal) 791537"];
12659 [label="param PEModuleSymbol(this) 791538"];
12660 [label="param PEModuleSymbol(this) 791539"];
12661 [label="param NonMissingModuleSymbol(this) 791540"];
12662 [label="param NonMissingModuleSymbol(this) 791541"];
12663 [label="param ModuleSymbol(this) 791542"];
12664 [label="param ModuleSymbol(this) 791543"];
12665 [label="param Symbol(this) 791544"];
12666 [label="_lazyISymbol 791545"];
12667 [label="_moduleReferences 791546"];
12668 [label="_assemblySymbol 791547"];
12669 [label="_ordinal 791548"];
12670 [label="_module 791549"];
12671 [label="_globalNamespace 791550"];
12672 [label="_lazySystemTypeSymbol 791551"];
12673 [label="_lazyEventRegistrationTokenSymbol 791552"];
12674 [label="_lazyEventRegistrationTokenTableSymbol 791553"];
12675 [label="2 791554"];
12676 [label="concurrencyLevel: 2 791555"];
12677 [label="capacity: DefaultTypeMapCapacity 791556"];
12678 [label="new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 791557"];
12679 [label="TypeHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 791558"];
12680 [label="2 791559"];
12681 [label="concurrencyLevel: 2 791560"];
12682 [label="capacity: DefaultTypeMapCapacity 791561"];
12683 [label="new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 791562"];
12684 [label="TypeRefHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 791563"];
12685 [label="ImportOptions 791564"];
12686 [label="_lazyTypeNames 791565"];
12687 [label="_lazyNamespaceNames 791566"];
12688 [label="_lazyNullableMemberMetadata 791567"];
12689 [label="Debug.Assert((object)assemblySymbol != null); 791568"];
12690 [label="Debug.Assert((object)assemblySymbol != null); 791569"];
12691 [label="Debug.Assert(module != null); 791570"];
12692 [label="Debug.Assert(module != null); 791571"];
12693 [label="_assemblySymbol 791572"];
12694 [label="_ordinal 791573"];
12695 [label="_module 791574"];
12696 [label="this.ImportOptions 791575"];
12697 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 791576"];
12698 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 791577"];
12699 [label="new PEGlobalNamespaceSymbol(this) 791578"];
12700 [label="param PEGlobalNamespaceSymbol(PEModuleSymbol moduleSymbol) 791579"];
12701 [label="param PEGlobalNamespaceSymbol(this) 791580"];
12702 [label="param PEGlobalNamespaceSymbol(this) 791581"];
12703 [label="param PENamespaceSymbol(this) 791582"];
12704 [label="param PENamespaceSymbol(this) 791583"];
12705 [label="param NamespaceSymbol(this) 791584"];
12706 [label="param NamespaceSymbol(this) 791585"];
12707 [label="param NamespaceOrTypeSymbol(this) 791586"];
12708 [label="param NamespaceOrTypeSymbol(this) 791587"];
12709 [label="param Symbol(this) 791588"];
12710 [label="_lazyISymbol 791589"];
12711 [label="_lazyAdapter 791590"];
12712 [label="_lazyQualifiedName 791591"];
12713 [label="lazyNamespaces 791592"];
12714 [label="lazyTypes 791593"];
12715 [label="_lazyNoPiaLocalTypes 791594"];
12716 [label="_moduleSymbol 791595"];
12717 [label="Debug.Assert((object)moduleSymbol != null); 791596"];
12718 [label="Debug.Assert((object)moduleSymbol != null); 791597"];
12719 [label="_moduleSymbol 791598"];
12720 [label="_globalNamespace 791599"];
12721 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 791600"];
12722 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 791601"];
12723 [label="this.MetadataLocation 791602"];
12724 [label="Debug.Assert(ordinal >= 0); 791603"];
12725 [label="Debug.Assert(ordinal >= 0); 791604"];
12726 [label="modules[i] 791605"];
12727 [label="_modules = modules.AsImmutableOrNull(); 791606"];
12728 [label="_modules = modules.AsImmutableOrNull(); 791607"];
12729 [label="_modules 791608"];
12730 [label="_isLinked 791609"];
12731 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 791610"];
12732 [label="bound.AssemblySymbol 791611"];
12733 [label="newSymbols.Add(i); 791612"];
12734 [label="newSymbols.Add(i); 791613"];
12735 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 791614"];
12736 [label="allAssemblyData[i].IsLinked 791615"];
12737 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 791616"];
12738 [label="bound.AssemblySymbol.IsLinked 791617"];
12739 [label="get\n            {\n                return _isLinked;\n            } 791618"];
12740 [label="return _isLinked; 791619"];
12741 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 791620"];
12742 [label="return _internalsPotentiallyVisibleToCompilation; 791621"];
12743 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 791622"];
12744 [label="_assembly 791623"];
12745 [label="_documentationProvider 791624"];
12746 [label="Debug.Assert(assembly != null); 791625"];
12747 [label="Debug.Assert(documentationProvider != null); 791626"];
12748 [label="_assemblySymbol 791627"];
12749 [label="_ordinal 791628"];
12750 [label="_module 791629"];
12751 [label="_globalNamespace 791630"];
12752 [label="ImportOptions 791631"];
12753 [label="Debug.Assert((object)assemblySymbol != null); 791632"];
12754 [label="Debug.Assert(module != null); 791633"];
12755 [label="_moduleSymbol 791634"];
12756 [label="Debug.Assert((object)moduleSymbol != null); 791635"];
12757 [label="Debug.Assert(ordinal >= 0); 791636"];
12758 [label="bound.AssemblySymbol 791637"];
12759 [label="newSymbols.Add(i); 791638"];
12760 [label="newSymbols.Add(i); 791639"];
12761 [label="allAssemblyData[i].IsLinked 791640"];
12762 [label="bound.AssemblySymbol.IsLinked 791641"];
12763 [label="get\n            {\n                return _isLinked;\n            } 791642"];
12764 [label="return _isLinked; 791643"];
12765 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 791644"];
12766 [label="_assembly 791645"];
12767 [label="_documentationProvider 791646"];
12768 [label="_assemblySymbol 791647"];
12769 [label="_ordinal 791648"];
12770 [label="_module 791649"];
12771 [label="_globalNamespace 791650"];
12772 [label="ImportOptions 791651"];
12773 [label="Debug.Assert((object)assemblySymbol != null); 791652"];
12774 [label="Debug.Assert(module != null); 791653"];
12775 [label="_moduleSymbol 791654"];
12776 [label="Debug.Assert((object)moduleSymbol != null); 791655"];
12777 [label="Debug.Assert(ordinal >= 0); 791656"];
12778 [label="bound.AssemblySymbol 791657"];
12779 [label="newSymbols.Add(i); 791658"];
12780 [label="get\n            {\n                return _isLinked;\n            } 791659"];
12781 [label="return _isLinked; 791660"];
12782 [label="return _internalsPotentiallyVisibleToCompilation; 791661"];
12783 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 791662"];
12784 [label="_assembly 791663"];
12785 [label="_documentationProvider 791664"];
12786 [label="Debug.Assert(assembly != null); 791665"];
12787 [label="Debug.Assert(documentationProvider != null); 791666"];
12788 [label="Debug.Assert(ordinal >= 0); 791667"];
12789 [label="bound.AssemblySymbol 791668"];
12790 [label="newSymbols.Add(i); 791669"];
12791 [label="newSymbols.Add(i); 791670"];
12792 [label="bound.AssemblySymbol.IsLinked 791671"];
12793 [label="get\n            {\n                return _isLinked;\n            } 791672"];
12794 [label="return _isLinked; 791673"];
12795 [label="newSymbols.Add(i); 791674"];
12796 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 791675"];
12797 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 791676"];
12798 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 791677"];
12799 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 791678"];
12800 [label="t_assemblyForWhichCurrentThreadIsComputingKeys 791679"];
12801 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 791680"];
12802 [label="new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules) 791681"];
12803 [label="param SourceAssemblySymbol(CSharpCompilation compilation) 791682"];
12804 [label="param SourceAssemblySymbol(string assemblySimpleName) 791683"];
12805 [label="param SourceAssemblySymbol(string moduleName) 791684"];
12806 [label="param SourceAssemblySymbol(ImmutableArray<PEModule> netModules) 791685"];
12807 [label="param SourceAssemblySymbol(this) 791686"];
12808 [label="param SourceAssemblySymbol(this) 791687"];
12809 [label="param MetadataOrSourceAssemblySymbol(this) 791688"];
12810 [label="param MetadataOrSourceAssemblySymbol(this) 791689"];
12811 [label="param NonMissingAssemblySymbol(this) 791690"];
12812 [label="param NonMissingAssemblySymbol(this) 791691"];
12813 [label="param AssemblySymbol(this) 791692"];
12814 [label="param AssemblySymbol(this) 791693"];
12815 [label="param Symbol(this) 791694"];
12816 [label="_lazyISymbol 791695"];
12817 [label="_corLibrary 791696"];
12818 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 791697"];
12819 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 791698"];
12820 [label="_globalNamespace 791699"];
12821 [label="_lazySpecialTypes 791700"];
12822 [label="_cachedSpecialTypes 791701"];
12823 [label="_lazyNativeIntegerTypes 791702"];
12824 [label="_lazyTypeNames 791703"];
12825 [label="_lazyNamespaceNames 791704"];
12826 [label="_lazySpecialTypeMembers 791705"];
12827 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 791706"];
12828 [label="_compilation 791707"];
12829 [label="lazyAssemblyIdentity 791708"];
12830 [label="_assemblySimpleName 791709"];
12831 [label="_lazyStrongNameKeys 791710"];
12832 [label="_lazySourceAttributesBag 791711"];
12833 [label="_lazyNetModuleAttributesBag 791712"];
12834 [label="_lazyForwardedTypesFromSource 791713"];
12835 [label="_lazyOmittedAttributeIndices 791714"];
12836 [label="_lazyContainsExtensionMethods 791715"];
12837 [label="new ConcurrentDictionary<FieldSymbol, bool>() 791716"];
12838 [label="_unassignedFieldsMap = new ConcurrentDictionary<FieldSymbol, bool>() 791717"];
12839 [label="new ConcurrentSet<FieldSymbol>() 791718"];
12840 [label="_unreadFields = new ConcurrentSet<FieldSymbol>() 791719"];
12841 [label="new ConcurrentSet<TypeSymbol>() 791720"];
12842 [label="TypesReferencedInExternalMethods = new ConcurrentSet<TypeSymbol>() 791721"];
12843 [label="_optimisticallyGrantedInternalsAccess 791722"];
12844 [label="_lazyInternalsVisibleToMap 791723"];
12845 [label="Debug.Assert(compilation != null); 791724"];
12846 [label="Debug.Assert(compilation != null); 791725"];
12847 [label="Debug.Assert(assemblySimpleName != null); 791726"];
12848 [label="Debug.Assert(assemblySimpleName != null); 791727"];
12849 [label="Debug.Assert(!String.IsNullOrWhiteSpace(moduleName)); 791728"];
12850 [label="Debug.Assert(!netModules.IsDefault); 791729"];
12851 [label="_compilation 791730"];
12852 [label="_assemblySimpleName 791731"];
12853 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 791732"];
12854 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 791733"];
12855 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 791734"];
12856 [label="compilation.Declarations 791735"];
12857 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 791736"];
12858 [label="_syntaxAndDeclarations.GetLazyState() 791737"];
12859 [label="param GetLazyState(this) 791738"];
12860 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 791739"];
12861 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 791740"];
12862 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 791741"];
12863 [label="new SourceModuleSymbol(this, compilation.Declarations, moduleName) 791742"];
12864 [label="param SourceModuleSymbol(SourceAssemblySymbol assemblySymbol) 791743"];
12865 [label="param SourceModuleSymbol(DeclarationTable declarations) 791744"];
12866 [label="param SourceModuleSymbol(string moduleName) 791745"];
12867 [label="param SourceModuleSymbol(this) 791746"];
12868 [label="param SourceModuleSymbol(this) 791747"];
12869 [label="param NonMissingModuleSymbol(this) 791748"];
12870 [label="param NonMissingModuleSymbol(this) 791749"];
12871 [label="param ModuleSymbol(this) 791750"];
12872 [label="param ModuleSymbol(this) 791751"];
12873 [label="param Symbol(this) 791752"];
12874 [label="_lazyISymbol 791753"];
12875 [label="_moduleReferences 791754"];
12876 [label="_assemblySymbol 791755"];
12877 [label="_lazyContainsExplicitDefinitionOfNoPiaLocalTypes = ThreeState.Unknown 791756"];
12878 [label="_sources 791757"];
12879 [label="_lazyCustomAttributesBag 791758"];
12880 [label="_globalNamespace 791759"];
12881 [label="_hasBadAttributes 791760"];
12882 [label="_name 791761"];
12883 [label="Debug.Assert((object)assemblySymbol != null); 791762"];
12884 [label="Debug.Assert((object)assemblySymbol != null); 791763"];
12885 [label="_assemblySymbol 791764"];
12886 [label="_sources 791765"];
12887 [label="_name 791766"];
12888 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 791767"];
12889 [label="compilation.Options 791768"];
12890 [label="get\n            {\n                return _options;\n            } 791769"];
12891 [label="return _options; 791770"];
12892 [label="var importOptions = (compilation.Options.MetadataImportOptions == MetadataImportOptions.All) ?\n                MetadataImportOptions.All : MetadataImportOptions.Internal; 791771"];
12893 [label="(compilation.Options.MetadataImportOptions == MetadataImportOptions.All) 791772"];
12894 [label="foreach (PEModule netModule in netModules)\n            {\n                moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count));\n                // SetReferences will be called later by the ReferenceManager (in CreateSourceAssemblyFullBind for \n                // a fresh manager, in CreateSourceAssemblyReuseData for a reused one).\n            } 791773"];
12895 [label="_modules = moduleBuilder.ToImmutableAndFree(); 791774"];
12896 [label="_modules 791775"];
12897 [label="compilation.Options 791776"];
12898 [label="get\n            {\n                return _options;\n            } 791777"];
12899 [label="return _options; 791778"];
12900 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 791779"];
12901 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 791780"];
12902 [label="AssemblySymbol? corLibrary; 791781"];
12903 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 791782"];
12904 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 791783"];
12905 [label="if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 791784"];
12906 [label="corLibrary = bindingResult[corLibraryIndex].AssemblySymbol; 791785"];
12907 [label="assemblySymbol.SetCorLibrary(corLibrary); 791786"];
12908 [label="assemblySymbol.SetCorLibrary(corLibrary) 791787"];
12909 [label="param SetCorLibrary(AssemblySymbol corLibrary) 791788"];
12910 [label="param SetCorLibrary(this) 791789"];
12911 [label="Debug.Assert((object)_corLibrary == null); 791790"];
12912 [label="Debug.Assert((object)_corLibrary == null); 791791"];
12913 [label="_corLibrary 791792"];
12914 [label="assemblySymbol.SetCorLibrary(corLibrary); 791793"];
12915 [label="Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies = null; 791794"];
12916 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 791795"];
12917 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 791796"];
12918 [label="ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences; 791797"];
12919 [label="moduleReferences 791798"];
12920 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791799"];
12921 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791800"];
12922 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791801"];
12923 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791802"];
12924 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791803"];
12925 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791804"];
12926 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences) 791805"];
12927 [label="param SetupReferencesForSourceAssembly(SourceAssemblySymbol sourceAssembly) 791806"];
12928 [label="param SetupReferencesForSourceAssembly(ImmutableArray<PEModule> modules) 791807"];
12929 [label="param SetupReferencesForSourceAssembly(int totalReferencedAssemblyCount) 791808"];
12930 [label="param SetupReferencesForSourceAssembly(BoundInputAssembly[] bindingResult) 791809"];
12931 [label="param SetupReferencesForSourceAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 791810"];
12932 [label="param SetupReferencesForSourceAssembly(out ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences) 791811"];
12933 [label="sourceAssembly.Modules 791812"];
12934 [label="get\n            {\n                return _modules;\n            } 791813"];
12935 [label="return _modules; 791814"];
12936 [label="var moduleSymbols = sourceAssembly.Modules; 791815"];
12937 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 791816"];
12938 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 791817"];
12939 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 791818"];
12940 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 791819"];
12941 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 791820"];
12942 [label="(moduleSymbols.Length > 1) 791821"];
12943 [label="int refsUsed = 0; 791822"];
12944 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 791823"];
12945 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 791824"];
12946 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 791825"];
12947 [label="(moduleIndex == 0) 791826"];
12948 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 791827"];
12949 [label="var identities = new AssemblyIdentity[refsCount]; 791828"];
12950 [label="var symbols = new AssemblySymbol[refsCount]; 791829"];
12951 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 791830"];
12952 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 791831"];
12953 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 791832"];
12954 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 791833"];
12955 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 791834"];
12956 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 791835"];
12957 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 791836"];
12958 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 791837"];
12959 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 791838"];
12960 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 791839"];
12961 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 791840"];
12962 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791841"];
12963 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791842"];
12964 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791843"];
12965 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 791844"];
12966 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 791845"];
12967 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 791846"];
12968 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 791847"];
12969 [label="Debug.Assert(referenceBinding.IsBound); 791848"];
12970 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 791849"];
12971 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 791850"];
12972 [label="Debug.Assert(assembly is object); 791851"];
12973 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 791852"];
12974 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 791853"];
12975 [label="return assembly; 791854"];
12976 [label="symbols[k] 791855"];
12977 [label="identities[k] 791856"];
12978 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 791857"];
12979 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 791858"];
12980 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 791859"];
12981 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 791860"];
12982 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791861"];
12983 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791862"];
12984 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 791863"];
12985 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 791864"];
12986 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 791865"];
12987 [label="Debug.Assert(referenceBinding.IsBound); 791866"];
12988 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 791867"];
12989 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 791868"];
12990 [label="Debug.Assert(assembly is object); 791869"];
12991 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 791870"];
12992 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 791871"];
12993 [label="return assembly; 791872"];
12994 [label="symbols[k] 791873"];
12995 [label="identities[k] 791874"];
12996 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 791875"];
12997 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 791876"];
12998 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 791877"];
12999 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 791878"];
13000 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 791879"];
13001 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 791880"];
13002 [label="if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    } 791881"];
13003 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 791882"];
13004 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 791883"];
13005 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 791884"];
13006 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly) 791885"];
13007 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 791886"];
13008 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 791887"];
13009 [label="param SetReferences(this) 791888"];
13010 [label="Debug.Assert(moduleReferences != null); 791889"];
13011 [label="Debug.Assert(moduleReferences != null); 791890"];
13012 [label="AssertReferencesUninitialized() 791891"];
13013 [label="param AssertReferencesUninitialized(this) 791892"];
13014 [label="Debug.Assert(_moduleReferences == null); 791893"];
13015 [label="Debug.Assert(_moduleReferences == null); 791894"];
13016 [label="AssertReferencesUninitialized(); 791895"];
13017 [label="_moduleReferences 791896"];
13018 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 791897"];
13019 [label="refsUsed += refsCount; 791898"];
13020 [label="moduleReferences = moduleReferencesBuilder.ToImmutableOrEmptyAndFree(); 791899"];
13021 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 791900"];
13022 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 791901"];
13023 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 791902"];
13024 [label="if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        } 791903"];
13025 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 791904"];
13026 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 791905"];
13027 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 791906"];
13028 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 791907"];
13029 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies) 791908"];
13030 [label="param InitializeNewSymbols(List<int> newSymbols) 791909"];
13031 [label="param InitializeNewSymbols(SourceAssemblySymbol sourceAssembly) 791910"];
13032 [label="param InitializeNewSymbols(ImmutableArray<AssemblyData> assemblies) 791911"];
13033 [label="param InitializeNewSymbols(BoundInputAssembly[] bindingResult) 791912"];
13034 [label="param InitializeNewSymbols(Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 791913"];
13035 [label="Debug.Assert(newSymbols.Count > 0); 791914"];
13036 [label="Debug.Assert(newSymbols.Count > 0); 791915"];
13037 [label="sourceAssembly.CorLibrary 791916"];
13038 [label="get\n            {\n                return _corLibrary;\n            } 791917"];
13039 [label="return _corLibrary; 791918"];
13040 [label="var corLibrary = sourceAssembly.CorLibrary; 791919"];
13041 [label="RoslynDebug.Assert((object)corLibrary != null); 791920"];
13042 [label="RoslynDebug.Assert((object)corLibrary != null); 791921"];
13043 [label="foreach (int i in newSymbols)\n                {\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n\n                    if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                } 791922"];
13044 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 791923"];
13045 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 791924"];
13046 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 791925"];
13047 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 791926"];
13048 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791927"];
13049 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791928"];
13050 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791929"];
13051 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791930"];
13052 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791931"];
13053 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly) 791932"];
13054 [label="param SetupReferencesForFileAssembly(AssemblyDataForFile fileData) 791933"];
13055 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 791934"];
13056 [label="param SetupReferencesForFileAssembly(ref BoundInputAssembly currentBindingResult) 791935"];
13057 [label="param SetupReferencesForFileAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 791936"];
13058 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 791937"];
13059 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 791938"];
13060 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 791939"];
13061 [label="var portableExecutableAssemblySymbol = (PEAssemblySymbol)currentBindingResult.AssemblySymbol; 791940"];
13062 [label="portableExecutableAssemblySymbol.Modules 791941"];
13063 [label="get\n            {\n                return _modules;\n            } 791942"];
13064 [label="return _modules; 791943"];
13065 [label="ImmutableArray<ModuleSymbol> modules = portableExecutableAssemblySymbol.Modules; 791944"];
13066 [label="int moduleCount = modules.Length; 791945"];
13067 [label="int refsUsed = 0; 791946"];
13068 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 791947"];
13069 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 791948"];
13070 [label="int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j]; 791949"];
13071 [label="var identities = new AssemblyIdentity[moduleReferenceCount]; 791950"];
13072 [label="var symbols = new AssemblySymbol[moduleReferenceCount]; 791951"];
13073 [label="fileData.AssemblyReferences 791952"];
13074 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 791953"];
13075 [label="return _referencedAssemblies; 791954"];
13076 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 791955"];
13077 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 791956"];
13078 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 791957"];
13079 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 791958"];
13080 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 791959"];
13081 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 791960"];
13082 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 791961"];
13083 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 791962"];
13084 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 791963"];
13085 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 791964"];
13086 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 791965"];
13087 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 791966"];
13088 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 791967"];
13089 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 791968"];
13090 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 791969"];
13091 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 791970"];
13092 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 791971"];
13093 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly) 791972"];
13094 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 791973"];
13095 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 791974"];
13096 [label="param SetReferences(this) 791975"];
13097 [label="Debug.Assert(moduleReferences != null); 791976"];
13098 [label="Debug.Assert(moduleReferences != null); 791977"];
13099 [label="AssertReferencesUninitialized() 791978"];
13100 [label="param AssertReferencesUninitialized(this) 791979"];
13101 [label="Debug.Assert(_moduleReferences == null); 791980"];
13102 [label="Debug.Assert(_moduleReferences == null); 791981"];
13103 [label="AssertReferencesUninitialized(); 791982"];
13104 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 791983"];
13105 [label="refsUsed += moduleReferenceCount; 791984"];
13106 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791985"];
13107 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791986"];
13108 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 791987"];
13109 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 791988"];
13110 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 791989"];
13111 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 791990"];
13112 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 791991"];
13113 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 791992"];
13114 [label="var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k]; 791993"];
13115 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        } 791994"];
13116 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791995"];
13117 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791996"];
13118 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 791997"];
13119 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 791998"];
13120 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 791999"];
13121 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 792000"];
13122 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 792001"];
13123 [label="Debug.Assert(referenceBinding.IsBound); 792002"];
13124 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 792003"];
13125 [label="Debug.Assert(assembly is object); 792004"];
13126 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 792005"];
13127 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 792006"];
13128 [label="symbols[k] 792007"];
13129 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 792008"];
13130 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 792009"];
13131 [label="GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies) 792010"];
13132 [label="param GetOrAddMissingAssemblySymbol(AssemblyIdentity assemblyIdentity) 792011"];
13133 [label="param GetOrAddMissingAssemblySymbol(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 792012"];
13134 [label="MissingAssemblySymbol? missingAssembly; 792013"];
13135 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 792014"];
13136 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 792015"];
13137 [label="missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>(); 792016"];
13138 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 792017"];
13139 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 792018"];
13140 [label="new MissingAssemblySymbol(assemblyIdentity) 792019"];
13141 [label="param MissingAssemblySymbol(AssemblyIdentity identity) 792020"];
13142 [label="param MissingAssemblySymbol(this) 792021"];
13143 [label="param MissingAssemblySymbol(this) 792022"];
13144 [label="identity 792023"];
13145 [label="moduleSymbol 792024"];
13146 [label="Debug.Assert(identity != null); 792025"];
13147 [label="Debug.Assert(identity != null); 792026"];
13148 [label="this.identity 792027"];
13149 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 792028"];
13150 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 792029"];
13151 [label="new MissingModuleSymbol(this, 0) 792030"];
13152 [label="param MissingModuleSymbol(AssemblySymbol assembly) 792031"];
13153 [label="param MissingModuleSymbol(int ordinal) 792032"];
13154 [label="param MissingModuleSymbol(this) 792033"];
13155 [label="param MissingModuleSymbol(this) 792034"];
13156 [label="assembly 792035"];
13157 [label="ordinal 792036"];
13158 [label="globalNamespace 792037"];
13159 [label="Debug.Assert((object)assembly != null); 792038"];
13160 [label="Debug.Assert((object)assembly != null); 792039"];
13161 [label="Debug.Assert(ordinal >= -1); 792040"];
13162 [label="Debug.Assert(ordinal >= -1); 792041"];
13163 [label="this.assembly 792042"];
13164 [label="this.ordinal 792043"];
13165 [label="globalNamespace = new MissingNamespaceSymbol(this); 792044"];
13166 [label="globalNamespace = new MissingNamespaceSymbol(this); 792045"];
13167 [label="new MissingNamespaceSymbol(this) 792046"];
13168 [label="param MissingNamespaceSymbol(MissingModuleSymbol containingModule) 792047"];
13169 [label="param MissingNamespaceSymbol(this) 792048"];
13170 [label="param MissingNamespaceSymbol(this) 792049"];
13171 [label="_name 792050"];
13172 [label="_containingSymbol 792051"];
13173 [label="Debug.Assert((object)containingModule != null); 792052"];
13174 [label="Debug.Assert((object)containingModule != null); 792053"];
13175 [label="_containingSymbol 792054"];
13176 [label="_name 792055"];
13177 [label="globalNamespace 792056"];
13178 [label="moduleSymbol 792057"];
13179 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 792058"];
13180 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 792059"];
13181 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 792060"];
13182 [label="return missingAssembly; 792061"];
13183 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 792062"];
13184 [label="symbols[k] 792063"];
13185 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 792064"];
13186 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 792065"];
13187 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 792066"];
13188 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 792067"];
13189 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 792068"];
13190 [label="Debug.Assert(moduleReferences != null); 792069"];
13191 [label="Debug.Assert(moduleReferences != null); 792070"];
13192 [label="AssertReferencesUninitialized() 792071"];
13193 [label="param AssertReferencesUninitialized(this) 792072"];
13194 [label="Debug.Assert(_moduleReferences == null); 792073"];
13195 [label="Debug.Assert(_moduleReferences == null); 792074"];
13196 [label="AssertReferencesUninitialized(); 792075"];
13197 [label="refsUsed += moduleReferenceCount; 792076"];
13198 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 792077"];
13199 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 792078"];
13200 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 792079"];
13201 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 792080"];
13202 [label="Debug.Assert(referenceBinding.IsBound); 792081"];
13203 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 792082"];
13204 [label="Debug.Assert(assembly is object); 792083"];
13205 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 792084"];
13206 [label="return missingAssembly; 792085"];
13207 [label="identity 792086"];
13208 [label="moduleSymbol 792087"];
13209 [label="Debug.Assert(identity != null); 792088"];
13210 [label="Debug.Assert(identity != null); 792089"];
13211 [label="assembly 792090"];
13212 [label="ordinal 792091"];
13213 [label="globalNamespace 792092"];
13214 [label="Debug.Assert((object)assembly != null); 792093"];
13215 [label="Debug.Assert((object)assembly != null); 792094"];
13216 [label="Debug.Assert(ordinal >= -1); 792095"];
13217 [label="Debug.Assert(ordinal >= -1); 792096"];
13218 [label="_name 792097"];
13219 [label="_containingSymbol 792098"];
13220 [label="Debug.Assert((object)containingModule != null); 792099"];
13221 [label="Debug.Assert((object)containingModule != null); 792100"];
13222 [label="identity 792101"];
13223 [label="moduleSymbol 792102"];
13224 [label="Debug.Assert(identity != null); 792103"];
13225 [label="assembly 792104"];
13226 [label="ordinal 792105"];
13227 [label="globalNamespace 792106"];
13228 [label="Debug.Assert((object)assembly != null); 792107"];
13229 [label="Debug.Assert(ordinal >= -1); 792108"];
13230 [label="_name 792109"];
13231 [label="_containingSymbol 792110"];
13232 [label="Debug.Assert((object)containingModule != null); 792111"];
13233 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 792112"];
13234 [label="Debug.Assert(moduleReferences != null); 792113"];
13235 [label="Debug.Assert(moduleReferences != null); 792114"];
13236 [label="AssertReferencesUninitialized() 792115"];
13237 [label="param AssertReferencesUninitialized(this) 792116"];
13238 [label="Debug.Assert(_moduleReferences == null); 792117"];
13239 [label="Debug.Assert(_moduleReferences == null); 792118"];
13240 [label="AssertReferencesUninitialized(); 792119"];
13241 [label="refsUsed += moduleReferenceCount; 792120"];
13242 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 792121"];
13243 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 792122"];
13244 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 792123"];
13245 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 792124"];
13246 [label="Debug.Assert(referenceBinding.IsBound); 792125"];
13247 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 792126"];
13248 [label="Debug.Assert(assembly is object); 792127"];
13249 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 792128"];
13250 [label="if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    } 792129"];
13251 [label="unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>(); 792130"];
13252 [label="unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity)); 792131"];
13253 [label="unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity)); 792132"];
13254 [label="identity 792133"];
13255 [label="moduleSymbol 792134"];
13256 [label="Debug.Assert(identity != null); 792135"];
13257 [label="assembly 792136"];
13258 [label="ordinal 792137"];
13259 [label="globalNamespace 792138"];
13260 [label="Debug.Assert((object)assembly != null); 792139"];
13261 [label="Debug.Assert(ordinal >= -1); 792140"];
13262 [label="_name 792141"];
13263 [label="_containingSymbol 792142"];
13264 [label="Debug.Assert((object)containingModule != null); 792143"];
13265 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 792144"];
13266 [label="Debug.Assert(moduleReferences != null); 792145"];
13267 [label="Debug.Assert(moduleReferences != null); 792146"];
13268 [label="AssertReferencesUninitialized() 792147"];
13269 [label="param AssertReferencesUninitialized(this) 792148"];
13270 [label="Debug.Assert(_moduleReferences == null); 792149"];
13271 [label="Debug.Assert(_moduleReferences == null); 792150"];
13272 [label="AssertReferencesUninitialized(); 792151"];
13273 [label="refsUsed += moduleReferenceCount; 792152"];
13274 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 792153"];
13275 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 792154"];
13276 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 792155"];
13277 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 792156"];
13278 [label="Debug.Assert(referenceBinding.IsBound); 792157"];
13279 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 792158"];
13280 [label="Debug.Assert(assembly is object); 792159"];
13281 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 792160"];
13282 [label="Debug.Assert(moduleReferences != null); 792161"];
13283 [label="AssertReferencesUninitialized() 792162"];
13284 [label="param AssertReferencesUninitialized(this) 792163"];
13285 [label="Debug.Assert(_moduleReferences == null); 792164"];
13286 [label="Debug.Assert(_moduleReferences == null); 792165"];
13287 [label="AssertReferencesUninitialized(); 792166"];
13288 [label="refsUsed += moduleReferenceCount; 792167"];
13289 [label="var linkedReferencedAssembliesBuilder = ArrayBuilder<AssemblySymbol>.GetInstance(); 792168"];
13290 [label="sourceAssembly.Modules 792169"];
13291 [label="get\n            {\n                return _modules;\n            } 792170"];
13292 [label="return _modules; 792171"];
13293 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 792172"];
13294 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 792173"];
13295 [label="sourceAssembly.Modules[0].GetReferencedAssemblySymbols() 792174"];
13296 [label="param GetReferencedAssemblySymbols(this) 792175"];
13297 [label="AssertReferencesInitialized() 792176"];
13298 [label="param AssertReferencesInitialized(this) 792177"];
13299 [label="Debug.Assert(_moduleReferences != null); 792178"];
13300 [label="Debug.Assert(_moduleReferences != null); 792179"];
13301 [label="AssertReferencesInitialized(); 792180"];
13302 [label="return _moduleReferences.Symbols; 792181"];
13303 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly currentBindingResult = ref bindingResult[i];\n                    Debug.Assert(currentBindingResult.AssemblySymbol is object);\n                    Debug.Assert(currentBindingResult.ReferenceBinding is object);\n\n                    if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    }\n\n                    // Setup linked referenced assemblies.\n                    linkedReferencedAssembliesBuilder.Clear();\n\n                    if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    }\n\n                    foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    }\n\n                    if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    }\n\n                    currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary);\n                } 792182"];
13304 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 792183"];
13305 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 792184"];
13306 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 792185"];
13307 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 792186"];
13308 [label="assemblies[i].ContainsNoPiaLocalTypes 792187"];
13309 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 792188"];
13310 [label="linkedReferencedAssembliesBuilder.Clear(); 792189"];
13311 [label="if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    } 792190"];
13312 [label="assemblies[i].IsLinked 792191"];
13313 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 792192"];
13314 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 792193"];
13315 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 792194"];
13316 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 792195"];
13317 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 792196"];
13318 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 792197"];
13319 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary) 792198"];
13320 [label="param SetCorLibrary(AssemblySymbol corLibrary) 792199"];
13321 [label="param SetCorLibrary(this) 792200"];
13322 [label="Debug.Assert((object)_corLibrary == null); 792201"];
13323 [label="Debug.Assert((object)_corLibrary == null); 792202"];
13324 [label="_corLibrary 792203"];
13325 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 792204"];
13326 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 792205"];
13327 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 792206"];
13328 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 792207"];
13329 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 792208"];
13330 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 792209"];
13331 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 792210"];
13332 [label="if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        } 792211"];
13333 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 792212"];
13334 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 792213"];
13335 [label="Debug.Assert((object)_corLibrary == null); 792214"];
13336 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 792215"];
13337 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 792216"];
13338 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 792217"];
13339 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 792218"];
13340 [label="Debug.Assert((object)_corLibrary == null); 792219"];
13341 [label="linkedReferencedAssembliesBuilder.Free(); 792220"];
13342 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 792221"];
13343 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 792222"];
13344 [label="foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    } 792223"];
13345 [label="missingAssembly.SetCorLibrary(corLibrary); 792224"];
13346 [label="missingAssembly.SetCorLibrary(corLibrary) 792225"];
13347 [label="param SetCorLibrary(AssemblySymbol corLibrary) 792226"];
13348 [label="Debug.Assert((object)_corLibrary == null); 792227"];
13349 [label="missingAssembly.SetCorLibrary(corLibrary); 792228"];
13350 [label="Debug.Assert((object)_corLibrary == null); 792229"];
13351 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 792230"];
13352 [label="if (compilation._lazyAssemblySymbol is null)\n                    {\n                        lock (SymbolCacheAndReferenceManagerStateGuard)\n                        {\n                            if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            }\n                        }\n                    } 792231"];
13353 [label="if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            } 792232"];
13354 [label="if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                } 792233"];
13355 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 792234"];
13356 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 792235"];
13357 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult) 792236"];
13358 [label="param UpdateSymbolCacheNoLock(List<int> newSymbols) 792237"];
13359 [label="param UpdateSymbolCacheNoLock(ImmutableArray<AssemblyData> assemblies) 792238"];
13360 [label="param UpdateSymbolCacheNoLock(BoundInputAssembly[] bindingResult) 792239"];
13361 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly current = ref bindingResult[i];\n                    Debug.Assert(current.AssemblySymbol is object);\n\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n                    if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    }\n                } 792240"];
13362 [label="ref BoundInputAssembly current = ref bindingResult[i]; 792241"];
13363 [label="Debug.Assert(current.AssemblySymbol is object); 792242"];
13364 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 792243"];
13365 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 792244"];
13366 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 792245"];
13367 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 792246"];
13368 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 792247"];
13369 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 792248"];
13370 [label="Debug.Assert(current.AssemblySymbol is object); 792249"];
13371 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 792250"];
13372 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792251"];
13373 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792252"];
13374 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792253"];
13375 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792254"];
13376 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792255"];
13377 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792256"];
13378 [label="ReferenceEquals(corLibrary, assemblySymbol) 792257"];
13379 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792258"];
13380 [label="assemblySymbol.SourceModule 792259"];
13381 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 792260"];
13382 [label="this.Modules 792261"];
13383 [label="get\n            {\n                return _modules;\n            } 792262"];
13384 [label="return _modules; 792263"];
13385 [label="return (SourceModuleSymbol)this.Modules[0]; 792264"];
13386 [label="return (SourceModuleSymbol)this.Modules[0]; 792265"];
13387 [label="assemblySymbol.SourceModule.GetReferencedAssemblySymbols() 792266"];
13388 [label="param GetReferencedAssemblySymbols(this) 792267"];
13389 [label="AssertReferencesInitialized() 792268"];
13390 [label="param AssertReferencesInitialized(this) 792269"];
13391 [label="Debug.Assert(_moduleReferences != null); 792270"];
13392 [label="Debug.Assert(_moduleReferences != null); 792271"];
13393 [label="AssertReferencesInitialized(); 792272"];
13394 [label="return _moduleReferences.Symbols; 792273"];
13395 [label="assemblySymbol.SourceModule 792274"];
13396 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 792275"];
13397 [label="this.Modules 792276"];
13398 [label="get\n            {\n                return _modules;\n            } 792277"];
13399 [label="return _modules; 792278"];
13400 [label="return (SourceModuleSymbol)this.Modules[0]; 792279"];
13401 [label="assemblySymbol.SourceModule.GetUnifiedAssemblies() 792280"];
13402 [label="param GetUnifiedAssemblies(this) 792281"];
13403 [label="AssertReferencesInitialized() 792282"];
13404 [label="param AssertReferencesInitialized(this) 792283"];
13405 [label="Debug.Assert(_moduleReferences != null); 792284"];
13406 [label="Debug.Assert(_moduleReferences != null); 792285"];
13407 [label="AssertReferencesInitialized(); 792286"];
13408 [label="return _moduleReferences.UnifiedAssemblies; 792287"];
13409 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 792288"];
13410 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 792289"];
13411 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 792290"];
13412 [label="compilation._referenceManager 792291"];
13413 [label="compilation._lazyAssemblySymbol 792292"];
13414 [label="return true; 792293"];
13415 [label="resolutionDiagnostics.Free(); 792294"];
13416 [label="assemblyReferencesBySimpleName.Free(); 792295"];
13417 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 792296"];
13418 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 792297"];
13419 [label="AssertBound(); 792298"];
13420 [label="Debug.Assert(compilation._lazyAssemblySymbol is object); 792299"];
13421 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 792300"];
13422 [label="Debug.Assert(_lazyAssemblySymbol is object); 792301"];
13423 [label="return _referenceManager; 792302"];
13424 [label="GetBoundReferenceManager(); 792303"];
13425 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 792304"];
13426 [label="return _lazyAssemblySymbol; 792305"];
13427 [label="return SourceAssembly; 792306"];
13428 [label="modules.AddRange(Assembly.Modules); 792307"];
13429 [label="Assembly.Modules 792308"];
13430 [label="get\n            {\n                return _modules;\n            } 792309"];
13431 [label="modules.AddRange(Assembly.Modules); 792310"];
13432 [label="GetBoundReferenceManager() 792311"];
13433 [label="param GetBoundReferenceManager(this) 792312"];
13434 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792313"];
13435 [label="return _referenceManager; 792314"];
13436 [label="var referenceManager = GetBoundReferenceManager(); 792315"];
13437 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 792316"];
13438 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 792317"];
13439 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 792318"];
13440 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 792319"];
13441 [label="referenceManager.ReferencedAssemblies[i].Modules 792320"];
13442 [label="get\n            {\n                return _modules;\n            } 792321"];
13443 [label="GetAllUnaliasedModules(modules); 792322"];
13444 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 792323"];
13445 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 792324"];
13446 [label="new NamespaceExtent(this) 792325"];
13447 [label="param NamespaceExtent(CSharpCompilation compilation) 792326"];
13448 [label="param NamespaceExtent(this) 792327"];
13449 [label="_kind 792328"];
13450 [label="_symbolOrCompilation 792329"];
13451 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 792330"];
13452 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 792331"];
13453 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 792332"];
13454 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 792333"];
13455 [label="var diagnostics = DiagnosticBag.GetInstance(); 792334"];
13456 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 792335"];
13457 [label="DeclaringCompilation 792336"];
13458 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 792337"];
13459 [label="_assemblySymbol.DeclaringCompilation 792338"];
13460 [label="get\n            {\n                return _compilation;\n            } 792339"];
13461 [label="return _compilation; 792340"];
13462 [label="return _assemblySymbol.DeclaringCompilation; 792341"];
13463 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 792342"];
13464 [label="DeclaringCompilation.MergedRootDeclaration 792343"];
13465 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 792344"];
13466 [label="Declarations 792345"];
13467 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 792346"];
13468 [label="return Declarations.GetMergedRoot(this); 792347"];
13469 [label="return Declarations.GetMergedRoot(this); 792348"];
13470 [label="Declarations.GetMergedRoot(this) 792349"];
13471 [label="param GetMergedRoot(CSharpCompilation compilation) 792350"];
13472 [label="param GetMergedRoot(this) 792351"];
13473 [label="compilation.Declarations 792352"];
13474 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 792353"];
13475 [label="Debug.Assert(compilation.Declarations == this); 792354"];
13476 [label="Debug.Assert(compilation.Declarations == this); 792355"];
13477 [label="if (_mergedRoot == null)\n            {\n                Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null);\n            } 792356"];
13478 [label="if (_mergedRoot == null)\n            {\n                Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null);\n            } 792357"];
13479 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 792358"];
13480 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 792359"];
13481 [label="CalculateMergedRoot(compilation) 792360"];
13482 [label="param CalculateMergedRoot(CSharpCompilation compilation) 792361"];
13483 [label="param CalculateMergedRoot(this) 792362"];
13484 [label="var oldRoot = _cache.MergedRoot.Value; 792363"];
13485 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return oldRoot;\n            }\n            else if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 792364"];
13486 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return oldRoot;\n            }\n            else if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 792365"];
13487 [label="if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 792366"];
13488 [label="if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 792367"];
13489 [label="oldRoot.Declarations 792368"];
13490 [label="var oldRootDeclarations = oldRoot.Declarations; 792369"];
13491 [label="var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1); 792370"];
13492 [label="var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1); 792371"];
13493 [label="builder.AddRange(oldRootDeclarations); 792372"];
13494 [label="builder.AddRange(oldRootDeclarations); 792373"];
13495 [label="builder.Add(_latestLazyRootDeclaration.Value); 792374"];
13496 [label="if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                } 792375"];
13497 [label="if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                } 792376"];
13498 [label="builder.Sort(new RootNamespaceLocationComparer(compilation)); 792377"];
13499 [label="builder.Sort(new RootNamespaceLocationComparer(compilation)); 792378"];
13500 [label="new RootNamespaceLocationComparer(compilation) 792379"];
13501 [label="param RootNamespaceLocationComparer(CSharpCompilation compilation) 792380"];
13502 [label="param RootNamespaceLocationComparer(this) 792381"];
13503 [label="_compilation 792382"];
13504 [label="_compilation 792383"];
13505 [label="builder.Sort(new RootNamespaceLocationComparer(compilation)); 792384"];
13506 [label="return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree()); 792385"];
13507 [label="MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree()) 792386"];
13508 [label="param Create(ImmutableArray<SingleNamespaceDeclaration> declarations) 792387"];
13509 [label="0 792388"];
13510 [label="declarations[0] 792389"];
13511 [label="declarations[0].Name 792390"];
13512 [label="get\n            {\n                return this.name;\n            } 792391"];
13513 [label="return this.name; 792392"];
13514 [label="name 792393"];
13515 [label="return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree()); 792394"];
13516 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 792395"];
13517 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 792396"];
13518 [label="return _mergedRoot; 792397"];
13519 [label="0x1 792398"];
13520 [label="LazyAllMembersIsSorted = 0x1 792399"];
13521 [label="d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 792400"];
13522 [label="s_declaringSyntaxReferencesSelector = d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 792401"];
13523 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 792402"];
13524 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 792403"];
13525 [label="new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics) 792404"];
13526 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 792405"];
13527 [label="param SourceNamespaceSymbol(Symbol container) 792406"];
13528 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 792407"];
13529 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 792408"];
13530 [label="param SourceNamespaceSymbol(this) 792409"];
13531 [label="param SourceNamespaceSymbol(this) 792410"];
13532 [label="_module 792411"];
13533 [label="_container 792412"];
13534 [label="_mergedDeclaration 792413"];
13535 [label="_nameToMembersMap 792414"];
13536 [label="_nameToTypeMembersMap 792415"];
13537 [label="_flags 792416"];
13538 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 792417"];
13539 [label="1 792418"];
13540 [label="_treeOrdinal 792419"];
13541 [label="0 792420"];
13542 [label="_position 792421"];
13543 [label="NotInSource = new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 792422"];
13544 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 792423"];
13545 [label="1 792424"];
13546 [label="_treeOrdinal 792425"];
13547 [label="1 792426"];
13548 [label="_position 792427"];
13549 [label="NotInitialized = new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 792428"];
13550 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 792429"];
13551 [label="_treeOrdinal 792430"];
13552 [label="1 792431"];
13553 [label="int.MaxValue - 1 792432"];
13554 [label="_position 792433"];
13555 [label="SynthesizedCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 792434"];
13556 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 792435"];
13557 [label="_treeOrdinal 792436"];
13558 [label="_position 792437"];
13559 [label="SynthesizedCCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 792438"];
13560 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 792439"];
13561 [label="Debug.Assert(mergedDeclaration != null); 792440"];
13562 [label="Debug.Assert(mergedDeclaration != null); 792441"];
13563 [label="_module 792442"];
13564 [label="_container 792443"];
13565 [label="_mergedDeclaration 792444"];
13566 [label="mergedDeclaration.Declarations 792445"];
13567 [label="get { return _declarations; } 792446"];
13568 [label="foreach (var singleDeclaration in mergedDeclaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 792447"];
13569 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 792448"];
13570 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 792449"];
13571 [label="Debug.Assert(diagnostics.IsEmptyWithoutResolution); 792450"];
13572 [label="diagnostics.Free(); 792451"];
13573 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 792452"];
13574 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 792453"];
13575 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 792454"];
13576 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 792455"];
13577 [label="return _globalNamespace; 792456"];
13578 [label="param GetHashCode(this) 792457"];
13579 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 792458"];
13580 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 792459"];
13581 [label="get { return _globalNamespace; } 792460"];
13582 [label="return _globalNamespace; 792461"];
13583 [label="MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)) 792462"];
13584 [label="param Create(NamespaceExtent extent) 792463"];
13585 [label="param Create(NamespaceSymbol containingNamespace) 792464"];
13586 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 792465"];
13587 [label="param Create(string nameOpt = null) 792466"];
13588 [label="Debug.Assert(namespacesToMerge.Length != 0); 792467"];
13589 [label="Debug.Assert(namespacesToMerge.Length != 0); 792468"];
13590 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 792469"];
13591 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 792470"];
13592 [label="(namespacesToMerge.Length == 1 && nameOpt == null) 792471"];
13593 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 792472"];
13594 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 792473"];
13595 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 792474"];
13596 [label="new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt) 792475"];
13597 [label="param MergedNamespaceSymbol(NamespaceExtent extent) 792476"];
13598 [label="param MergedNamespaceSymbol(NamespaceSymbol containingNamespace) 792477"];
13599 [label="param MergedNamespaceSymbol(ImmutableArray<NamespaceSymbol> namespacesToMerge) 792478"];
13600 [label="param MergedNamespaceSymbol(string nameOpt) 792479"];
13601 [label="param MergedNamespaceSymbol(this) 792480"];
13602 [label="param MergedNamespaceSymbol(this) 792481"];
13603 [label="_containingNamespace 792482"];
13604 [label="_nameOpt 792483"];
13605 [label="_cachedLookup 792484"];
13606 [label="_extent 792485"];
13607 [label="_namespacesToMerge 792486"];
13608 [label="_containingNamespace 792487"];
13609 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 792488"];
13610 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 792489"];
13611 [label="_cachedLookup 792490"];
13612 [label="_nameOpt 792491"];
13613 [label="foreach (NamespaceSymbol ns in namespacesToMerge)\n            {\n                Debug.Assert(ns.ConstituentNamespaces.Length == 1);\n            } 792492"];
13614 [label="ns.ConstituentNamespaces 792493"];
13615 [label="get\n            {\n                return ImmutableArray.Create(this);\n            } 792494"];
13616 [label="return ImmutableArray.Create(this); 792495"];
13617 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 792496"];
13618 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 792497"];
13619 [label="modules.Free(); 792498"];
13620 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792499"];
13621 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792500"];
13622 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792501"];
13623 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792502"];
13624 [label="return _lazyGlobalNamespace; 792503"];
13625 [label="var namespaceNS = comp.GlobalNamespace.GetMembers('NS').First() as NamespaceOrTypeSymbol; 792504"];
13626 [label="var namespaceNS = comp.GlobalNamespace.GetMembers('NS').First() as NamespaceOrTypeSymbol; 792505"];
13627 [label="comp.GlobalNamespace.GetMembers('NS') 792506"];
13628 [label="param GetMembers(string name) 792507"];
13629 [label="param GetMembers(this) 792508"];
13630 [label="return _cachedLookup[name]; 792509"];
13631 [label="_cachedLookup 792510"];
13632 [label="param SlowGetChildrenOfName(string name) 792511"];
13633 [label="param SlowGetChildrenOfName(this) 792512"];
13634 [label="ArrayBuilder<NamespaceSymbol> namespaceSymbols = null; 792513"];
13635 [label="var otherSymbols = ArrayBuilder<Symbol>.GetInstance(); 792514"];
13636 [label="foreach (NamespaceSymbol namespaceSymbol in _namespacesToMerge)\n            {\n                foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                }\n            } 792515"];
13637 [label="foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                } 792516"];
13638 [label="namespaceSymbol.GetMembers(name) 792517"];
13639 [label="param GetMembers(string name) 792518"];
13640 [label="param GetMembers(this) 792519"];
13641 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 792520"];
13642 [label="members 792521"];
13643 [label="this.GetNameToMembersMap() 792522"];
13644 [label="param GetNameToMembersMap(this) 792523"];
13645 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 792524"];
13646 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 792525"];
13647 [label="var diagnostics = DiagnosticBag.GetInstance(); 792526"];
13648 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 792527"];
13649 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 792528"];
13650 [label="MakeNameToMembersMap(diagnostics) 792529"];
13651 [label="param MakeNameToMembersMap(DiagnosticBag diagnostics) 792530"];
13652 [label="param MakeNameToMembersMap(this) 792531"];
13653 [label="_mergedDeclaration.Children 792532"];
13654 [label="get\n            {\n                if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                }\n\n                return _lazyChildren;\n            } 792533"];
13655 [label="if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                } 792534"];
13656 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren()); 792535"];
13657 [label="MakeChildren() 792536"];
13658 [label="param MakeChildren(this) 792537"];
13659 [label="ArrayBuilder<SingleNamespaceDeclaration> namespaces = null; 792538"];
13660 [label="ArrayBuilder<SingleTypeDeclaration> types = null; 792539"];
13661 [label="bool allNamespacesHaveSameName = true; 792540"];
13662 [label="bool allTypesHaveSameIdentity = true; 792541"];
13663 [label="foreach (var decl in _declarations)\n            {\n                foreach (var child in decl.Children)\n                {\n                    // it is either a type (more likely)\n                    var asType = child as SingleTypeDeclaration;\n                    if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    }\n\n                    // or it is a namespace\n                    var asNamespace = child as SingleNamespaceDeclaration;\n                    if (asNamespace != null)\n                    {\n                        // handle namespace\n                        if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        }\n\n                        namespaces.Add(asNamespace);\n                        continue;\n                    }\n\n                    // Not sure if we can get here, perhaps, if we have errors, \n                    // but we care only about types and namespaces anyways.\n                }\n            } 792542"];
13664 [label="decl.Children 792543"];
13665 [label="get\n            {\n                return this.GetNamespaceOrTypeDeclarationChildren();\n            } 792544"];
13666 [label="this.GetNamespaceOrTypeDeclarationChildren() 792545"];
13667 [label="param GetNamespaceOrTypeDeclarationChildren(this) 792546"];
13668 [label="return _children; 792547"];
13669 [label="return this.GetNamespaceOrTypeDeclarationChildren(); 792548"];
13670 [label="foreach (var child in decl.Children)\n                {\n                    // it is either a type (more likely)\n                    var asType = child as SingleTypeDeclaration;\n                    if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    }\n\n                    // or it is a namespace\n                    var asNamespace = child as SingleNamespaceDeclaration;\n                    if (asNamespace != null)\n                    {\n                        // handle namespace\n                        if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        }\n\n                        namespaces.Add(asNamespace);\n                        continue;\n                    }\n\n                    // Not sure if we can get here, perhaps, if we have errors, \n                    // but we care only about types and namespaces anyways.\n                } 792549"];
13671 [label="var asType = child as SingleTypeDeclaration; 792550"];
13672 [label="if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    } 792551"];
13673 [label="if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    } 792552"];
13674 [label="var asNamespace = child as SingleNamespaceDeclaration; 792553"];
13675 [label="if (asNamespace != null)\n                    {\n                        // handle namespace\n                        if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        }\n\n                        namespaces.Add(asNamespace);\n                        continue;\n                    } 792554"];
13676 [label="if (asNamespace != null)\n                    {\n                        // handle namespace\n                        if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        }\n\n                        namespaces.Add(asNamespace);\n                        continue;\n                    } 792555"];
13677 [label="if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        } 792556"];
13678 [label="if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        } 792557"];
13679 [label="namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(); 792558"];
13680 [label="namespaces.Add(asNamespace); 792559"];
13681 [label="namespaces.Add(asNamespace); 792560"];
13682 [label="var children = ArrayBuilder<MergedNamespaceOrTypeDeclaration>.GetInstance(); 792561"];
13683 [label="if (namespaces != null)\n            {\n                if (allNamespacesHaveSameName)\n                {\n                    children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var namespaceGroups = namespaces.ToDictionary(n => n.Name, StringOrdinalComparer.Instance);\n                    namespaces.Free();\n\n                    foreach (var namespaceGroup in namespaceGroups.Values)\n                    {\n                        children.Add(MergedNamespaceDeclaration.Create(namespaceGroup));\n                    }\n                }\n            } 792562"];
13684 [label="if (allNamespacesHaveSameName)\n                {\n                    children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var namespaceGroups = namespaces.ToDictionary(n => n.Name, StringOrdinalComparer.Instance);\n                    namespaces.Free();\n\n                    foreach (var namespaceGroup in namespaceGroups.Values)\n                    {\n                        children.Add(MergedNamespaceDeclaration.Create(namespaceGroup));\n                    }\n                } 792563"];
13685 [label="children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree())); 792564"];
13686 [label="MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree()) 792565"];
13687 [label="param Create(ImmutableArray<SingleNamespaceDeclaration> declarations) 792566"];
13688 [label="name 792567"];
13689 [label="children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree())); 792568"];
13690 [label="children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree())); 792569"];
13691 [label="if (types != null)\n            {\n                if (allTypesHaveSameIdentity)\n                {\n                    children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var typeGroups = types.ToDictionary(t => t.Identity);\n                    types.Free();\n\n                    foreach (var typeGroup in typeGroups.Values)\n                    {\n                        children.Add(new MergedTypeDeclaration(typeGroup));\n                    }\n                }\n            } 792570"];
13692 [label="if (types != null)\n            {\n                if (allTypesHaveSameIdentity)\n                {\n                    children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var typeGroups = types.ToDictionary(t => t.Identity);\n                    types.Free();\n\n                    foreach (var typeGroup in typeGroups.Values)\n                    {\n                        children.Add(new MergedTypeDeclaration(typeGroup));\n                    }\n                }\n            } 792571"];
13693 [label="return children.ToImmutableAndFree(); 792572"];
13694 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren()); 792573"];
13695 [label="return _lazyChildren; 792574"];
13696 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 792575"];
13697 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 792576"];
13698 [label="new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length) 792577"];
13699 [label="param NameToSymbolMapBuilder(int capacity) 792578"];
13700 [label="param NameToSymbolMapBuilder(this) 792579"];
13701 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 792580"];
13702 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 792581"];
13703 [label="_dictionary 792582"];
13704 [label="_mergedDeclaration.Children 792583"];
13705 [label="get\n            {\n                if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                }\n\n                return _lazyChildren;\n            } 792584"];
13706 [label="return _lazyChildren; 792585"];
13707 [label="foreach (var declaration in _mergedDeclaration.Children)\n            {\n                builder.Add(BuildSymbol(declaration, diagnostics));\n            } 792586"];
13708 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 792587"];
13709 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 792588"];
13710 [label="BuildSymbol(declaration, diagnostics) 792589"];
13711 [label="param BuildSymbol(MergedNamespaceOrTypeDeclaration declaration) 792590"];
13712 [label="param BuildSymbol(DiagnosticBag diagnostics) 792591"];
13713 [label="param BuildSymbol(this) 792592"];
13714 [label="declaration.Kind 792593"];
13715 [label="get\n            {\n                return DeclarationKind.Namespace;\n            } 792594"];
13716 [label="return DeclarationKind.Namespace; 792595"];
13717 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Namespace:\n                    return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Script:\n                case DeclarationKind.Submission:\n                case DeclarationKind.ImplicitClass:\n                    return new ImplicitNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.SimpleProgram:\n                    return new SimpleProgramNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaration.Kind);\n            } 792596"];
13718 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 792597"];
13719 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 792598"];
13720 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 792599"];
13721 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 792600"];
13722 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 792601"];
13723 [label="new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics) 792602"];
13724 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 792603"];
13725 [label="param SourceNamespaceSymbol(Symbol container) 792604"];
13726 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 792605"];
13727 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 792606"];
13728 [label="param SourceNamespaceSymbol(this) 792607"];
13729 [label="_module 792608"];
13730 [label="_container 792609"];
13731 [label="_mergedDeclaration 792610"];
13732 [label="Debug.Assert(mergedDeclaration != null); 792611"];
13733 [label="Debug.Assert(mergedDeclaration != null); 792612"];
13734 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 792613"];
13735 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 792614"];
13736 [label="builder.Add(BuildSymbol(declaration, diagnostics)) 792615"];
13737 [label="param Add(NamespaceOrTypeSymbol symbol) 792616"];
13738 [label="param Add(this) 792617"];
13739 [label="symbol.Name 792618"];
13740 [label="=> _mergedDeclaration.Name 792619"];
13741 [label="_mergedDeclaration.Name 792620"];
13742 [label="get\n            {\n                return this.name;\n            } 792621"];
13743 [label="return this.name; 792622"];
13744 [label="string name = symbol.Name; 792623"];
13745 [label="object item; 792624"];
13746 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 792625"];
13747 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 792626"];
13748 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 792627"];
13749 [label="_dictionary 792628"];
13750 [label="builder.CreateMap() 792629"];
13751 [label="param CreateMap(this) 792630"];
13752 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 792631"];
13753 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 792632"];
13754 [label="foreach (var kvp in _dictionary)\n                {\n                    object value = kvp.Value;\n                    ImmutableArray<NamespaceOrTypeSymbol> members;\n\n                    var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    }\n\n                    result.Add(kvp.Key, members);\n                } 792633"];
13755 [label="object value = kvp.Value; 792634"];
13756 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 792635"];
13757 [label="members 792636"];
13758 [label="var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>; 792637"];
13759 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 792638"];
13760 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 792639"];
13761 [label="NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value; 792640"];
13762 [label="symbol.Kind 792641"];
13763 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 792642"];
13764 [label="return SymbolKind.Namespace; 792643"];
13765 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 792644"];
13766 [label="symbol.Kind == SymbolKind.Namespace 792645"];
13767 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 792646"];
13768 [label="result.Add(kvp.Key, members); 792647"];
13769 [label="result.Add(kvp.Key, members); 792648"];
13770 [label="result.Add(kvp.Key, members); 792649"];
13771 [label="return result; 792650"];
13772 [label="var result = builder.CreateMap(); 792651"];
13773 [label="CheckMembers(this, result, diagnostics); 792652"];
13774 [label="CheckMembers(this, result, diagnostics); 792653"];
13775 [label="CheckMembers(this, result, diagnostics); 792654"];
13776 [label="CheckMembers(this, result, diagnostics) 792655"];
13777 [label="param CheckMembers(NamespaceSymbol @namespace) 792656"];
13778 [label="param CheckMembers(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> result) 792657"];
13779 [label="param CheckMembers(DiagnosticBag diagnostics) 792658"];
13780 [label="var memberOfArity = new Symbol[10]; 792659"];
13781 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 792660"];
13782 [label="@namespace.ContainingAssembly 792661"];
13783 [label="=> _module.ContainingAssembly 792662"];
13784 [label="_module.ContainingAssembly 792663"];
13785 [label="get\n            {\n                return _assemblySymbol;\n            } 792664"];
13786 [label="return _assemblySymbol; 792665"];
13787 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 792666"];
13788 [label="@namespace.ContainingAssembly.Modules 792667"];
13789 [label="get\n            {\n                return _modules;\n            } 792668"];
13790 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 792669"];
13791 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 792670"];
13792 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 792671"];
13793 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 792672"];
13794 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 792673"];
13795 [label="foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                } 792674"];
13796 [label="var nts = symbol as NamedTypeSymbol; 792675"];
13797 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 792676"];
13798 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 792677"];
13799 [label="((object)nts != null) 792678"];
13800 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 792679"];
13801 [label="var other = memberOfArity[arity]; 792680"];
13802 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 792681"];
13803 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 792682"];
13804 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 792683"];
13805 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 792684"];
13806 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 792685"];
13807 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 792686"];
13808 [label="memberOfArity[arity] 792687"];
13809 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 792688"];
13810 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 792689"];
13811 [label="CheckMembers(this, result, diagnostics); 792690"];
13812 [label="return result; 792691"];
13813 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 792692"];
13814 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 792693"];
13815 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 792694"];
13816 [label="this.DeclaringCompilation 792695"];
13817 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 792696"];
13818 [label="this.Kind 792697"];
13819 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 792698"];
13820 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 792699"];
13821 [label="this.ContainingModule 792700"];
13822 [label="get\n            {\n                return _module;\n            } 792701"];
13823 [label="return _module; 792702"];
13824 [label="var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol; 792703"];
13825 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 792704"];
13826 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 792705"];
13827 [label="(object)sourceModuleSymbol == null 792706"];
13828 [label="sourceModuleSymbol.DeclaringCompilation 792707"];
13829 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 792708"];
13830 [label="this.DeclaringCompilation.DeclarationDiagnostics 792709"];
13831 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 792710"];
13832 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 792711"];
13833 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 792712"];
13834 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 792713"];
13835 [label="var diagnostics = new DiagnosticBag(); 792714"];
13836 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 792715"];
13837 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 792716"];
13838 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 792717"];
13839 [label="return _lazyDeclarationDiagnostics; 792718"];
13840 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 792719"];
13841 [label="RegisterDeclaredCorTypes() 792720"];
13842 [label="param RegisterDeclaredCorTypes(this) 792721"];
13843 [label="ContainingAssembly 792722"];
13844 [label="=> _module.ContainingAssembly 792723"];
13845 [label="_module.ContainingAssembly 792724"];
13846 [label="get\n            {\n                return _assemblySymbol;\n            } 792725"];
13847 [label="return _assemblySymbol; 792726"];
13848 [label="AssemblySymbol containingAssembly = ContainingAssembly; 792727"];
13849 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 792728"];
13850 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 792729"];
13851 [label="this.CorLibrary 792730"];
13852 [label="get\n            {\n                return _corLibrary;\n            } 792731"];
13853 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 792732"];
13854 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 792733"];
13855 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 792734"];
13856 [label="RegisterDeclaredCorTypes(); 792735"];
13857 [label="DeclaringCompilation 792736"];
13858 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 792737"];
13859 [label="this.Kind 792738"];
13860 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 792739"];
13861 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 792740"];
13862 [label="this.ContainingModule 792741"];
13863 [label="get\n            {\n                return _module;\n            } 792742"];
13864 [label="return _module; 792743"];
13865 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 792744"];
13866 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 792745"];
13867 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 792746"];
13868 [label="DeclaringCompilation.SymbolDeclaredEvent(this) 792747"];
13869 [label="param SymbolDeclaredEvent(Symbol symbol) 792748"];
13870 [label="param SymbolDeclaredEvent(this) 792749"];
13871 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 792750"];
13872 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 792751"];
13873 [label="var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap); 792752"];
13874 [label="_state.NotePartComplete(CompletionPart.NameToMembersMap) 792753"];
13875 [label="param NotePartComplete(CompletionPart part) 792754"];
13876 [label="param NotePartComplete(this) 792755"];
13877 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 792756"];
13878 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 792757"];
13879 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 792758"];
13880 [label="Debug.Assert(wasSetThisThread); 792759"];
13881 [label="diagnostics.Free(); 792760"];
13882 [label="return _nameToMembersMap; 792761"];
13883 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 792762"];
13884 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 792763"];
13885 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 792764"];
13886 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 792765"];
13887 [label="this.GetNameToMembersMap().TryGetValue(name, out members) 792766"];
13888 [label="childSymbol.Kind 792767"];
13889 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 792768"];
13890 [label="if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    } 792769"];
13891 [label="namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance(); 792770"];
13892 [label="namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance(); 792771"];
13893 [label="namespaceSymbols.Add((NamespaceSymbol)childSymbol); 792772"];
13894 [label="namespaceSymbols.Add((NamespaceSymbol)childSymbol); 792773"];
13895 [label="param GetMembers(string name) 792774"];
13896 [label="param GetMembers(this) 792775"];
13897 [label="EnsureAllMembersLoaded() 792776"];
13898 [label="param EnsureAllMembersLoaded(this) 792777"];
13899 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 792778"];
13900 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 792779"];
13901 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 792780"];
13902 [label="_moduleSymbol.Module 792781"];
13903 [label="get\n            {\n                return _module;\n            } 792782"];
13904 [label="return _module; 792783"];
13905 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 792784"];
13906 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 792785"];
13907 [label="LoadAllMembers(groups); 792786"];
13908 [label="LoadAllMembers(groups) 792787"];
13909 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 792788"];
13910 [label="param LoadAllMembers(this) 792789"];
13911 [label="Debug.Assert(typesByNS != null); 792790"];
13912 [label="Debug.Assert(typesByNS != null); 792791"];
13913 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> nestedTypes = null; 792792"];
13914 [label="IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> nestedNamespaces = null; 792793"];
13915 [label="this.IsGlobalNamespace 792794"];
13916 [label="get\n            {\n                return true;\n            } 792795"];
13917 [label="return true; 792796"];
13918 [label="bool isGlobalNamespace = this.IsGlobalNamespace; 792797"];
13919 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792798"];
13920 [label="isGlobalNamespace 792799"];
13921 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792800"];
13922 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792801"];
13923 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792802"];
13924 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792803"];
13925 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792804"];
13926 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 792805"];
13927 [label="LazyInitializeNamespaces(nestedNamespaces); 792806"];
13928 [label="LazyInitializeNamespaces(nestedNamespaces) 792807"];
13929 [label="param LazyInitializeNamespaces(IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> childNamespaces) 792808"];
13930 [label="param LazyInitializeNamespaces(this) 792809"];
13931 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 792810"];
13932 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 792811"];
13933 [label="var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance); 792812"];
13934 [label="foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                } 792813"];
13935 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 792814"];
13936 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 792815"];
13937 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 792816"];
13938 [label="new PENestedNamespaceSymbol(child.Key, this, child.Value) 792817"];
13939 [label="param PENestedNamespaceSymbol(string name) 792818"];
13940 [label="param PENestedNamespaceSymbol(PENamespaceSymbol containingNamespace) 792819"];
13941 [label="param PENestedNamespaceSymbol(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 792820"];
13942 [label="param PENestedNamespaceSymbol(this) 792821"];
13943 [label="param PENestedNamespaceSymbol(this) 792822"];
13944 [label="_containingNamespaceSymbol 792823"];
13945 [label="_name 792824"];
13946 [label="_typesByNS 792825"];
13947 [label="Debug.Assert(name != null); 792826"];
13948 [label="Debug.Assert(name != null); 792827"];
13949 [label="Debug.Assert((object)containingNamespace != null); 792828"];
13950 [label="Debug.Assert((object)containingNamespace != null); 792829"];
13951 [label="Debug.Assert(typesByNS != null); 792830"];
13952 [label="Debug.Assert(typesByNS != null); 792831"];
13953 [label="_containingNamespaceSymbol 792832"];
13954 [label="_name 792833"];
13955 [label="_typesByNS 792834"];
13956 [label="c.Name 792835"];
13957 [label="get\n            {\n                return _name;\n            } 792836"];
13958 [label="return _name; 792837"];
13959 [label="namespaces.Add(c.Name, c); 792838"];
13960 [label="namespaces.Add(c.Name, c); 792839"];
13961 [label="namespaces.Add(c.Name, c); 792840"];
13962 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 792841"];
13963 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 792842"];
13964 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 792843"];
13965 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 792844"];
13966 [label="LazyInitializeNamespaces(nestedNamespaces); 792845"];
13967 [label="LazyInitializeTypes(nestedTypes); 792846"];
13968 [label="LazyInitializeTypes(nestedTypes) 792847"];
13969 [label="param LazyInitializeTypes(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typeGroups) 792848"];
13970 [label="param LazyInitializeTypes(this) 792849"];
13971 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 792850"];
13972 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 792851"];
13973 [label="ContainingPEModule 792852"];
13974 [label="get\n            {\n                return _moduleSymbol;\n            } 792853"];
13975 [label="return _moduleSymbol; 792854"];
13976 [label="var moduleSymbol = ContainingPEModule; 792855"];
13977 [label="var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance(); 792856"];
13978 [label="moduleSymbol.Module 792857"];
13979 [label="get\n            {\n                return _module;\n            } 792858"];
13980 [label="var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes(); 792859"];
13981 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 792860"];
13982 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 792861"];
13983 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 792862"];
13984 [label="foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    } 792863"];
13985 [label="if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        } 792864"];
13986 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 792865"];
13987 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 792866"];
13988 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 792867"];
13989 [label="EmptyComparer.Instance 792868"];
13990 [label="new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 792869"];
13991 [label="s_emptyNestedTypes = new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 792870"];
13992 [label="new UncommonProperties() 792871"];
13993 [label="param UncommonProperties(this) 792872"];
13994 [label="lazyEnumUnderlyingType 792873"];
13995 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 792874"];
13996 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 792875"];
13997 [label="lazyContainsExtensionMethods 792876"];
13998 [label="lazyIsByRefLike 792877"];
13999 [label="lazyIsReadOnly 792878"];
14000 [label="lazyDefaultMemberName 792879"];
14001 [label="new UnsupportedMetadataTypeSymbol() 792880"];
14002 [label="param UnsupportedMetadataTypeSymbol(BadImageFormatException? mrEx = null) 792881"];
14003 [label="param UnsupportedMetadataTypeSymbol(this) 792882"];
14004 [label="param ErrorTypeSymbol(this) 792883"];
14005 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 792884"];
14006 [label="symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 792885"];
14007 [label="IsInstanceFieldOrEvent = symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 792886"];
14008 [label="type => !type.HasType 792887"];
14009 [label="TypeWithAnnotationsIsNullFunction = type => !type.HasType 792888"];
14010 [label="type => type.HasType && type.Type.IsErrorType() 792889"];
14011 [label="TypeWithAnnotationsIsErrorType = type => type.HasType && type.Type.IsErrorType() 792890"];
14012 [label="8 792891"];
14013 [label="ValueTupleRestPosition = 8 792892"];
14014 [label="1 792893"];
14015 [label="ValueTupleRestPosition - 1 792894"];
14016 [label="ValueTupleRestIndex = ValueTupleRestPosition - 1 792895"];
14017 [label="'ValueTuple' 792896"];
14018 [label="ValueTupleTypeName = 'ValueTuple' 792897"];
14019 [label="'Rest' 792898"];
14020 [label="ValueTupleRestFieldName = 'Rest' 792899"];
14021 [label="{\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 792900"];
14022 [label="tupleTypes = {\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 792901"];
14023 [label="{\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 792902"];
14024 [label="tupleCtors = {\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 792903"];
14025 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792904"];
14026 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 } 792905"];
14027 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 } 792906"];
14028 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 } 792907"];
14029 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 } 792908"];
14030 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 } 792909"];
14031 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 } 792910"];
14032 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 } 792911"];
14033 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest } 792912"];
14034 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792913"];
14035 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792914"];
14036 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792915"];
14037 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792916"];
14038 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792917"];
14039 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792918"];
14040 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792919"];
14041 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792920"];
14042 [label="tupleMembers = new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 792921"];
14043 [label="tupleData 792922"];
14044 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 792923"];
14045 [label="param NamedTypeSymbol(this) 792924"];
14046 [label="'<invalid-global-code>' 792925"];
14047 [label="ImplicitTypeName = '<invalid-global-code>' 792926"];
14048 [label="0 792927"];
14049 [label="TypeCompareKind.ConsiderEverything 792928"];
14050 [label="new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 792929"];
14051 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792930"];
14052 [label="param SymbolEqualityComparer(this) 792931"];
14053 [label="_comparison 792932"];
14054 [label="_comparison 792933"];
14055 [label="ConsiderEverything = new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 792934"];
14056 [label="TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 792935"];
14057 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792936"];
14058 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792937"];
14059 [label="param SymbolEqualityComparer(this) 792938"];
14060 [label="_comparison 792939"];
14061 [label="_comparison 792940"];
14062 [label="IgnoringTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792941"];
14063 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 792942"];
14064 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792943"];
14065 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792944"];
14066 [label="param SymbolEqualityComparer(this) 792945"];
14067 [label="_comparison 792946"];
14068 [label="_comparison 792947"];
14069 [label="IgnoringDynamicTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792948"];
14070 [label="TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 792949"];
14071 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792950"];
14072 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792951"];
14073 [label="param SymbolEqualityComparer(this) 792952"];
14074 [label="_comparison 792953"];
14075 [label="_comparison 792954"];
14076 [label="IgnoringNullable = new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792955"];
14077 [label="TypeCompareKind.ObliviousNullableModifierMatchesAny 792956"];
14078 [label="new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 792957"];
14079 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792958"];
14080 [label="param SymbolEqualityComparer(this) 792959"];
14081 [label="_comparison 792960"];
14082 [label="_comparison 792961"];
14083 [label="ObliviousNullableModifierMatchesAny = new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 792962"];
14084 [label="TypeCompareKind.AllIgnoreOptions 792963"];
14085 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 792964"];
14086 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792965"];
14087 [label="param SymbolEqualityComparer(this) 792966"];
14088 [label="_comparison 792967"];
14089 [label="_comparison 792968"];
14090 [label="AllIgnoreOptions = new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 792969"];
14091 [label="TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 792970"];
14092 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 792971"];
14093 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792972"];
14094 [label="param SymbolEqualityComparer(this) 792973"];
14095 [label="_comparison 792974"];
14096 [label="_comparison 792975"];
14097 [label="AllIgnoreOptionsPlusNullableWithUnknownMatchesAny =\n                                                                  new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 792976"];
14098 [label="TypeCompareKind.CLRSignatureCompareOptions 792977"];
14099 [label="new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 792978"];
14100 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 792979"];
14101 [label="param SymbolEqualityComparer(this) 792980"];
14102 [label="_comparison 792981"];
14103 [label="_comparison 792982"];
14104 [label="CLRSignature = new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 792983"];
14105 [label="SymbolEqualityComparer.CLRSignature 792984"];
14106 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 792985"];
14107 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 792986"];
14108 [label="EmptyInterfacesAndTheirBaseInterfaces =\n                                                new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 792987"];
14109 [label="new InterfaceInfo() 792988"];
14110 [label="param InterfaceInfo(this) 792989"];
14111 [label="interfacesAndTheirBaseInterfaces 792990"];
14112 [label="_implementationForInterfaceMemberMap 792991"];
14113 [label="explicitInterfaceImplementationMap 792992"];
14114 [label="s_noInterfaces = new InterfaceInfo() 792993"];
14115 [label="(type) => type.SetUnknownNullabilityForReferenceTypes() 792994"];
14116 [label="s_setUnknownNullability =\n            (type) => type.SetUnknownNullabilityForReferenceTypes() 792995"];
14117 [label="param TypeSymbol(this) 792996"];
14118 [label="param NamespaceOrTypeSymbol(this) 792997"];
14119 [label="param Symbol(this) 792998"];
14120 [label="_lazyISymbol 792999"];
14121 [label="_lazyAbstractMembers 793000"];
14122 [label="_lazyInterfaceInfo 793001"];
14123 [label="_lazyAdapter 793002"];
14124 [label="_hasNoBaseCycles 793003"];
14125 [label="_lazyTupleData 793004"];
14126 [label="_lazyTupleData 793005"];
14127 [label="_mrEx 793006"];
14128 [label="_mrEx 793007"];
14129 [label="UnknownResultType = new UnsupportedMetadataTypeSymbol() 793008"];
14130 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 793009"];
14131 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 793010"];
14132 [label="s_noUncommonProperties = new UncommonProperties() 793011"];
14133 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 793012"];
14134 [label="PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key) 793013"];
14135 [label="param Create(PEModuleSymbol moduleSymbol) 793014"];
14136 [label="param Create(PENamespaceSymbol containingNamespace) 793015"];
14137 [label="param Create(TypeDefinitionHandle handle) 793016"];
14138 [label="param Create(string emittedNamespaceName) 793017"];
14139 [label="GenericParameterHandleCollection genericParameterHandles; 793018"];
14140 [label="genericParameterHandles 793019"];
14141 [label="ushort arity; 793020"];
14142 [label="BadImageFormatException mrEx = null; 793021"];
14143 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 793022"];
14144 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 793023"];
14145 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 793024"];
14146 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 793025"];
14147 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 793026"];
14148 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx) 793027"];
14149 [label="param GetGenericInfo(PEModuleSymbol moduleSymbol) 793028"];
14150 [label="param GetGenericInfo(TypeDefinitionHandle handle) 793029"];
14151 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793030"];
14152 [label="param GetGenericInfo(out ushort arity) 793031"];
14153 [label="param GetGenericInfo(out BadImageFormatException mrEx) 793032"];
14154 [label="moduleSymbol.Module 793033"];
14155 [label="get\n            {\n                return _module;\n            } 793034"];
14156 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 793035"];
14157 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 793036"];
14158 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 793037"];
14159 [label="arity = (ushort)genericParameterHandles.Count; 793038"];
14160 [label="mrEx = null; 793039"];
14161 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 793040"];
14162 [label="bool mangleName; 793041"];
14163 [label="PENamedTypeSymbol result; 793042"];
14164 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 793043"];
14165 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 793044"];
14166 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 793045"];
14167 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 793046"];
14168 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 793047"];
14169 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 793048"];
14170 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 793049"];
14171 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 793050"];
14172 [label="new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName) 793051"];
14173 [label="param PENamedTypeSymbolNonGeneric(PEModuleSymbol moduleSymbol) 793052"];
14174 [label="param PENamedTypeSymbolNonGeneric(NamespaceOrTypeSymbol container) 793053"];
14175 [label="param PENamedTypeSymbolNonGeneric(TypeDefinitionHandle handle) 793054"];
14176 [label="param PENamedTypeSymbolNonGeneric(string emittedNamespaceName) 793055"];
14177 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 793056"];
14178 [label="param PENamedTypeSymbolNonGeneric(this) 793057"];
14179 [label="moduleSymbol 793058"];
14180 [label="container 793059"];
14181 [label="handle 793060"];
14182 [label="emittedNamespaceName 793061"];
14183 [label="0 793062"];
14184 [label="mangleName 793063"];
14185 [label="param PENamedTypeSymbolNonGeneric(this) 793064"];
14186 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 793065"];
14187 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 793066"];
14188 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 793067"];
14189 [label="param PENamedTypeSymbol(string emittedNamespaceName) 793068"];
14190 [label="param PENamedTypeSymbol(ushort arity) 793069"];
14191 [label="param PENamedTypeSymbol(out bool mangleName) 793070"];
14192 [label="param PENamedTypeSymbol(this) 793071"];
14193 [label="param PENamedTypeSymbol(this) 793072"];
14194 [label="param NamedTypeSymbol(this) 793073"];
14195 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 793074"];
14196 [label="param NamedTypeSymbol(this) 793075"];
14197 [label="param TypeSymbol(this) 793076"];
14198 [label="param TypeSymbol(this) 793077"];
14199 [label="_lazyAbstractMembers 793078"];
14200 [label="_lazyInterfaceInfo 793079"];
14201 [label="_lazyAdapter 793080"];
14202 [label="_hasNoBaseCycles 793081"];
14203 [label="_lazyTupleData 793082"];
14204 [label="_lazyTupleData 793083"];
14205 [label="_container 793084"];
14206 [label="_name 793085"];
14207 [label="_flags 793086"];
14208 [label="_corTypeId 793087"];
14209 [label="_lazyMemberNames 793088"];
14210 [label="_lazyMembersByName 793089"];
14211 [label="_lazyNestedTypes 793090"];
14212 [label="_lazyKind 793091"];
14213 [label="_lazyNullableContextValue 793092"];
14214 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 793093"];
14215 [label="default(ImmutableArray<NamedTypeSymbol>) 793094"];
14216 [label="_lazyInterfaces = default(ImmutableArray<NamedTypeSymbol>) 793095"];
14217 [label="_lazyDeclaredBaseType = ErrorTypeSymbol.UnknownResultType 793096"];
14218 [label="default(ImmutableArray<NamedTypeSymbol>) 793097"];
14219 [label="_lazyDeclaredInterfaces = default(ImmutableArray<NamedTypeSymbol>) 793098"];
14220 [label="_lazyDocComment 793099"];
14221 [label="0 793100"];
14222 [label="new CSDiagnosticInfo(0) 793101"];
14223 [label="param CSDiagnosticInfo(ErrorCode code) 793102"];
14224 [label="param CSDiagnosticInfo(this) 793103"];
14225 [label="code 793104"];
14226 [label="Array.Empty<object>() 793105"];
14227 [label="ImmutableArray<Symbol>.Empty 793106"];
14228 [label="ImmutableArray<Location>.Empty 793107"];
14229 [label="param CSDiagnosticInfo(ErrorCode code) 793108"];
14230 [label="param CSDiagnosticInfo(object[] args) 793109"];
14231 [label="param CSDiagnosticInfo(ImmutableArray<Symbol> symbols) 793110"];
14232 [label="param CSDiagnosticInfo(ImmutableArray<Location> additionalLocations) 793111"];
14233 [label="param CSDiagnosticInfo(this) 793112"];
14234 [label="code 793113"];
14235 [label="args 793114"];
14236 [label="symbols 793115"];
14237 [label="param DiagnosticInfoWithSymbols(ErrorCode errorCode) 793116"];
14238 [label="param DiagnosticInfoWithSymbols(object[] arguments) 793117"];
14239 [label="param DiagnosticInfoWithSymbols(ImmutableArray<Symbol> symbols) 793118"];
14240 [label="param DiagnosticInfoWithSymbols(this) 793119"];
14241 [label="CSharp.MessageProvider.Instance 793120"];
14242 [label="errorCode 793121"];
14243 [label="arguments 793122"];
14244 [label="param DiagnosticInfoWithSymbols(this) 793123"];
14245 [label="param GetSeverity(int code) 793124"];
14246 [label="param GetSeverity(this) 793125"];
14247 [label="'_Title' 793126"];
14248 [label="s_titleSuffix = '_Title' 793127"];
14249 [label="'_Description' 793128"];
14250 [label="s_descriptionSuffix = '_Description' 793129"];
14251 [label="CreateCategoriesMap 793130"];
14252 [label="new Lazy<ImmutableDictionary<ErrorCode, string>>(CreateCategoriesMap) 793131"];
14253 [label="s_categoriesMap = new Lazy<ImmutableDictionary<ErrorCode, string>>(CreateCategoriesMap) 793132"];
14254 [label="NullableWarnings 793133"];
14255 [label="s_resourceManager 793134"];
14256 [label="ImmutableHashSet<string>.Builder nullableWarnings = ImmutableHashSet.CreateBuilder<string>(); 793135"];
14257 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceAssignment)); 793136"];
14258 [label="GetId(ErrorCode.WRN_NullReferenceAssignment) 793137"];
14259 [label="param GetId(ErrorCode errorCode) 793138"];
14260 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793139"];
14261 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793140"];
14262 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793141"];
14263 [label="get\n            {\n                return 'CS';\n            } 793142"];
14264 [label="return 'CS'; 793143"];
14265 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793144"];
14266 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceAssignment)); 793145"];
14267 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReceiver)); 793146"];
14268 [label="GetId(ErrorCode.WRN_NullReferenceReceiver) 793147"];
14269 [label="param GetId(ErrorCode errorCode) 793148"];
14270 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793149"];
14271 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793150"];
14272 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793151"];
14273 [label="get\n            {\n                return 'CS';\n            } 793152"];
14274 [label="return 'CS'; 793153"];
14275 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReceiver)); 793154"];
14276 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReturn)); 793155"];
14277 [label="GetId(ErrorCode.WRN_NullReferenceReturn) 793156"];
14278 [label="param GetId(ErrorCode errorCode) 793157"];
14279 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793158"];
14280 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793159"];
14281 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793160"];
14282 [label="get\n            {\n                return 'CS';\n            } 793161"];
14283 [label="return 'CS'; 793162"];
14284 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReturn)); 793163"];
14285 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceArgument)); 793164"];
14286 [label="GetId(ErrorCode.WRN_NullReferenceArgument) 793165"];
14287 [label="param GetId(ErrorCode errorCode) 793166"];
14288 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793167"];
14289 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793168"];
14290 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793169"];
14291 [label="get\n            {\n                return 'CS';\n            } 793170"];
14292 [label="return 'CS'; 793171"];
14293 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceArgument)); 793172"];
14294 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UninitializedNonNullableField)); 793173"];
14295 [label="GetId(ErrorCode.WRN_UninitializedNonNullableField) 793174"];
14296 [label="param GetId(ErrorCode errorCode) 793175"];
14297 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793176"];
14298 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793177"];
14299 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793178"];
14300 [label="get\n            {\n                return 'CS';\n            } 793179"];
14301 [label="return 'CS'; 793180"];
14302 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UninitializedNonNullableField)); 793181"];
14303 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInAssignment)); 793182"];
14304 [label="GetId(ErrorCode.WRN_NullabilityMismatchInAssignment) 793183"];
14305 [label="param GetId(ErrorCode errorCode) 793184"];
14306 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793185"];
14307 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793186"];
14308 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793187"];
14309 [label="get\n            {\n                return 'CS';\n            } 793188"];
14310 [label="return 'CS'; 793189"];
14311 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInAssignment)); 793190"];
14312 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgument)); 793191"];
14313 [label="GetId(ErrorCode.WRN_NullabilityMismatchInArgument) 793192"];
14314 [label="param GetId(ErrorCode errorCode) 793193"];
14315 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793194"];
14316 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793195"];
14317 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793196"];
14318 [label="get\n            {\n                return 'CS';\n            } 793197"];
14319 [label="return 'CS'; 793198"];
14320 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgument)); 793199"];
14321 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgumentForOutput)); 793200"];
14322 [label="GetId(ErrorCode.WRN_NullabilityMismatchInArgumentForOutput) 793201"];
14323 [label="param GetId(ErrorCode errorCode) 793202"];
14324 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793203"];
14325 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793204"];
14326 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793205"];
14327 [label="get\n            {\n                return 'CS';\n            } 793206"];
14328 [label="return 'CS'; 793207"];
14329 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgumentForOutput)); 793208"];
14330 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate)); 793209"];
14331 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate) 793210"];
14332 [label="param GetId(ErrorCode errorCode) 793211"];
14333 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793212"];
14334 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793213"];
14335 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793214"];
14336 [label="get\n            {\n                return 'CS';\n            } 793215"];
14337 [label="return 'CS'; 793216"];
14338 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate)); 793217"];
14339 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate)); 793218"];
14340 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate) 793219"];
14341 [label="param GetId(ErrorCode errorCode) 793220"];
14342 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793221"];
14343 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793222"];
14344 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793223"];
14345 [label="get\n            {\n                return 'CS';\n            } 793224"];
14346 [label="return 'CS'; 793225"];
14347 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate)); 793226"];
14348 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullAsNonNullable)); 793227"];
14349 [label="GetId(ErrorCode.WRN_NullAsNonNullable) 793228"];
14350 [label="param GetId(ErrorCode errorCode) 793229"];
14351 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793230"];
14352 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793231"];
14353 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793232"];
14354 [label="get\n            {\n                return 'CS';\n            } 793233"];
14355 [label="return 'CS'; 793234"];
14356 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullAsNonNullable)); 793235"];
14357 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullableValueTypeMayBeNull)); 793236"];
14358 [label="GetId(ErrorCode.WRN_NullableValueTypeMayBeNull) 793237"];
14359 [label="param GetId(ErrorCode errorCode) 793238"];
14360 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793239"];
14361 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793240"];
14362 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793241"];
14363 [label="get\n            {\n                return 'CS';\n            } 793242"];
14364 [label="return 'CS'; 793243"];
14365 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullableValueTypeMayBeNull)); 793244"];
14366 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint)); 793245"];
14367 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint) 793246"];
14368 [label="param GetId(ErrorCode errorCode) 793247"];
14369 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793248"];
14370 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793249"];
14371 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793250"];
14372 [label="get\n            {\n                return 'CS';\n            } 793251"];
14373 [label="return 'CS'; 793252"];
14374 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint)); 793253"];
14375 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint)); 793254"];
14376 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint) 793255"];
14377 [label="param GetId(ErrorCode errorCode) 793256"];
14378 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793257"];
14379 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793258"];
14380 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793259"];
14381 [label="get\n            {\n                return 'CS';\n            } 793260"];
14382 [label="return 'CS'; 793261"];
14383 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint)); 793262"];
14384 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint)); 793263"];
14385 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint) 793264"];
14386 [label="param GetId(ErrorCode errorCode) 793265"];
14387 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793266"];
14388 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793267"];
14389 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793268"];
14390 [label="get\n            {\n                return 'CS';\n            } 793269"];
14391 [label="return 'CS'; 793270"];
14392 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint)); 793271"];
14393 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ThrowPossibleNull)); 793272"];
14394 [label="GetId(ErrorCode.WRN_ThrowPossibleNull) 793273"];
14395 [label="param GetId(ErrorCode errorCode) 793274"];
14396 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793275"];
14397 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793276"];
14398 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793277"];
14399 [label="get\n            {\n                return 'CS';\n            } 793278"];
14400 [label="return 'CS'; 793279"];
14401 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ThrowPossibleNull)); 793280"];
14402 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UnboxPossibleNull)); 793281"];
14403 [label="GetId(ErrorCode.WRN_UnboxPossibleNull) 793282"];
14404 [label="param GetId(ErrorCode errorCode) 793283"];
14405 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793284"];
14406 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793285"];
14407 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793286"];
14408 [label="get\n            {\n                return 'CS';\n            } 793287"];
14409 [label="return 'CS'; 793288"];
14410 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UnboxPossibleNull)); 793289"];
14411 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull)); 793290"];
14412 [label="GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull) 793291"];
14413 [label="param GetId(ErrorCode errorCode) 793292"];
14414 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793293"];
14415 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793294"];
14416 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793295"];
14417 [label="get\n            {\n                return 'CS';\n            } 793296"];
14418 [label="return 'CS'; 793297"];
14419 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull)); 793298"];
14420 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen)); 793299"];
14421 [label="GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen) 793300"];
14422 [label="param GetId(ErrorCode errorCode) 793301"];
14423 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793302"];
14424 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793303"];
14425 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793304"];
14426 [label="get\n            {\n                return 'CS';\n            } 793305"];
14427 [label="return 'CS'; 793306"];
14428 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen)); 793307"];
14429 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ConvertingNullableToNonNullable)); 793308"];
14430 [label="GetId(ErrorCode.WRN_ConvertingNullableToNonNullable) 793309"];
14431 [label="param GetId(ErrorCode errorCode) 793310"];
14432 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793311"];
14433 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793312"];
14434 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793313"];
14435 [label="get\n            {\n                return 'CS';\n            } 793314"];
14436 [label="return 'CS'; 793315"];
14437 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ConvertingNullableToNonNullable)); 793316"];
14438 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment)); 793317"];
14439 [label="GetId(ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment) 793318"];
14440 [label="param GetId(ErrorCode errorCode) 793319"];
14441 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793320"];
14442 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793321"];
14443 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793322"];
14444 [label="get\n            {\n                return 'CS';\n            } 793323"];
14445 [label="return 'CS'; 793324"];
14446 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment)); 793325"];
14447 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterConditionallyDisallowsNull)); 793326"];
14448 [label="GetId(ErrorCode.WRN_ParameterConditionallyDisallowsNull) 793327"];
14449 [label="param GetId(ErrorCode errorCode) 793328"];
14450 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793329"];
14451 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793330"];
14452 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793331"];
14453 [label="get\n            {\n                return 'CS';\n            } 793332"];
14454 [label="return 'CS'; 793333"];
14455 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterConditionallyDisallowsNull)); 793334"];
14456 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 793335"];
14457 [label="GetId(ErrorCode.WRN_ShouldNotReturn) 793336"];
14458 [label="param GetId(ErrorCode errorCode) 793337"];
14459 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793338"];
14460 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793339"];
14461 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793340"];
14462 [label="get\n            {\n                return 'CS';\n            } 793341"];
14463 [label="return 'CS'; 793342"];
14464 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 793343"];
14465 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnOverride)); 793344"];
14466 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnOverride) 793345"];
14467 [label="param GetId(ErrorCode errorCode) 793346"];
14468 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793347"];
14469 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793348"];
14470 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793349"];
14471 [label="get\n            {\n                return 'CS';\n            } 793350"];
14472 [label="return 'CS'; 793351"];
14473 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnOverride)); 793352"];
14474 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride)); 793353"];
14475 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride) 793354"];
14476 [label="param GetId(ErrorCode errorCode) 793355"];
14477 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793356"];
14478 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793357"];
14479 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793358"];
14480 [label="get\n            {\n                return 'CS';\n            } 793359"];
14481 [label="return 'CS'; 793360"];
14482 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride)); 793361"];
14483 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial)); 793362"];
14484 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial) 793363"];
14485 [label="param GetId(ErrorCode errorCode) 793364"];
14486 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793365"];
14487 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793366"];
14488 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793367"];
14489 [label="get\n            {\n                return 'CS';\n            } 793368"];
14490 [label="return 'CS'; 793369"];
14491 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial)); 793370"];
14492 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride)); 793371"];
14493 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride) 793372"];
14494 [label="param GetId(ErrorCode errorCode) 793373"];
14495 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793374"];
14496 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793375"];
14497 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793376"];
14498 [label="get\n            {\n                return 'CS';\n            } 793377"];
14499 [label="return 'CS'; 793378"];
14500 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride)); 793379"];
14501 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial)); 793380"];
14502 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial) 793381"];
14503 [label="param GetId(ErrorCode errorCode) 793382"];
14504 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793383"];
14505 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793384"];
14506 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793385"];
14507 [label="get\n            {\n                return 'CS';\n            } 793386"];
14508 [label="return 'CS'; 793387"];
14509 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial)); 793388"];
14510 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation)); 793389"];
14511 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation) 793390"];
14512 [label="param GetId(ErrorCode errorCode) 793391"];
14513 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793392"];
14514 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793393"];
14515 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793394"];
14516 [label="get\n            {\n                return 'CS';\n            } 793395"];
14517 [label="return 'CS'; 793396"];
14518 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation)); 793397"];
14519 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation)); 793398"];
14520 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation) 793399"];
14521 [label="param GetId(ErrorCode errorCode) 793400"];
14522 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793401"];
14523 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793402"];
14524 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793403"];
14525 [label="get\n            {\n                return 'CS';\n            } 793404"];
14526 [label="return 'CS'; 793405"];
14527 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation)); 793406"];
14528 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation)); 793407"];
14529 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation) 793408"];
14530 [label="param GetId(ErrorCode errorCode) 793409"];
14531 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793410"];
14532 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793411"];
14533 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793412"];
14534 [label="get\n            {\n                return 'CS';\n            } 793413"];
14535 [label="return 'CS'; 793414"];
14536 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation)); 793415"];
14537 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation)); 793416"];
14538 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation) 793417"];
14539 [label="param GetId(ErrorCode errorCode) 793418"];
14540 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793419"];
14541 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793420"];
14542 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793421"];
14543 [label="get\n            {\n                return 'CS';\n            } 793422"];
14544 [label="return 'CS'; 793423"];
14545 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation)); 793424"];
14546 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation)); 793425"];
14547 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation) 793426"];
14548 [label="param GetId(ErrorCode errorCode) 793427"];
14549 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793428"];
14550 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793429"];
14551 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793430"];
14552 [label="get\n            {\n                return 'CS';\n            } 793431"];
14553 [label="return 'CS'; 793432"];
14554 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation)); 793433"];
14555 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation)); 793434"];
14556 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation) 793435"];
14557 [label="param GetId(ErrorCode errorCode) 793436"];
14558 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793437"];
14559 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793438"];
14560 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793439"];
14561 [label="get\n            {\n                return 'CS';\n            } 793440"];
14562 [label="return 'CS'; 793441"];
14563 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation)); 793442"];
14564 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation)); 793443"];
14565 [label="GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation) 793444"];
14566 [label="param GetId(ErrorCode errorCode) 793445"];
14567 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793446"];
14568 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793447"];
14569 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793448"];
14570 [label="get\n            {\n                return 'CS';\n            } 793449"];
14571 [label="return 'CS'; 793450"];
14572 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation)); 793451"];
14573 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface)); 793452"];
14574 [label="GetId(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface) 793453"];
14575 [label="param GetId(ErrorCode errorCode) 793454"];
14576 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793455"];
14577 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793456"];
14578 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793457"];
14579 [label="get\n            {\n                return 'CS';\n            } 793458"];
14580 [label="return 'CS'; 793459"];
14581 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface)); 793460"];
14582 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase)); 793461"];
14583 [label="GetId(ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase) 793462"];
14584 [label="param GetId(ErrorCode errorCode) 793463"];
14585 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793464"];
14586 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793465"];
14587 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793466"];
14588 [label="get\n            {\n                return 'CS';\n            } 793467"];
14589 [label="return 'CS'; 793468"];
14590 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase)); 793469"];
14591 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList)); 793470"];
14592 [label="GetId(ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList) 793471"];
14593 [label="param GetId(ErrorCode errorCode) 793472"];
14594 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793473"];
14595 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793474"];
14596 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793475"];
14597 [label="get\n            {\n                return 'CS';\n            } 793476"];
14598 [label="return 'CS'; 793477"];
14599 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList)); 793478"];
14600 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation)); 793479"];
14601 [label="GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation) 793480"];
14602 [label="param GetId(ErrorCode errorCode) 793481"];
14603 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793482"];
14604 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793483"];
14605 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793484"];
14606 [label="get\n            {\n                return 'CS';\n            } 793485"];
14607 [label="return 'CS'; 793486"];
14608 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation)); 793487"];
14609 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceInitializer)); 793488"];
14610 [label="GetId(ErrorCode.WRN_NullReferenceInitializer) 793489"];
14611 [label="param GetId(ErrorCode errorCode) 793490"];
14612 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793491"];
14613 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793492"];
14614 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793493"];
14615 [label="get\n            {\n                return 'CS';\n            } 793494"];
14616 [label="return 'CS'; 793495"];
14617 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceInitializer)); 793496"];
14618 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 793497"];
14619 [label="GetId(ErrorCode.WRN_ShouldNotReturn) 793498"];
14620 [label="param GetId(ErrorCode errorCode) 793499"];
14621 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793500"];
14622 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793501"];
14623 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793502"];
14624 [label="get\n            {\n                return 'CS';\n            } 793503"];
14625 [label="return 'CS'; 793504"];
14626 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 793505"];
14627 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DoesNotReturnMismatch)); 793506"];
14628 [label="GetId(ErrorCode.WRN_DoesNotReturnMismatch) 793507"];
14629 [label="param GetId(ErrorCode errorCode) 793508"];
14630 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793509"];
14631 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793510"];
14632 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793511"];
14633 [label="get\n            {\n                return 'CS';\n            } 793512"];
14634 [label="return 'CS'; 793513"];
14635 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DoesNotReturnMismatch)); 793514"];
14636 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation)); 793515"];
14637 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation) 793516"];
14638 [label="param GetId(ErrorCode errorCode) 793517"];
14639 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793518"];
14640 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793519"];
14641 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793520"];
14642 [label="get\n            {\n                return 'CS';\n            } 793521"];
14643 [label="return 'CS'; 793522"];
14644 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation)); 793523"];
14645 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation)); 793524"];
14646 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation) 793525"];
14647 [label="param GetId(ErrorCode errorCode) 793526"];
14648 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793527"];
14649 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793528"];
14650 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793529"];
14651 [label="get\n            {\n                return 'CS';\n            } 793530"];
14652 [label="return 'CS'; 793531"];
14653 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation)); 793532"];
14654 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride)); 793533"];
14655 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride) 793534"];
14656 [label="param GetId(ErrorCode errorCode) 793535"];
14657 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793536"];
14658 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793537"];
14659 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793538"];
14660 [label="get\n            {\n                return 'CS';\n            } 793539"];
14661 [label="return 'CS'; 793540"];
14662 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride)); 793541"];
14663 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation)); 793542"];
14664 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation) 793543"];
14665 [label="param GetId(ErrorCode errorCode) 793544"];
14666 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793545"];
14667 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793546"];
14668 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793547"];
14669 [label="get\n            {\n                return 'CS';\n            } 793548"];
14670 [label="return 'CS'; 793549"];
14671 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation)); 793550"];
14672 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation)); 793551"];
14673 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation) 793552"];
14674 [label="param GetId(ErrorCode errorCode) 793553"];
14675 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793554"];
14676 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793555"];
14677 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793556"];
14678 [label="get\n            {\n                return 'CS';\n            } 793557"];
14679 [label="return 'CS'; 793558"];
14680 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation)); 793559"];
14681 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride)); 793560"];
14682 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride) 793561"];
14683 [label="param GetId(ErrorCode errorCode) 793562"];
14684 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793563"];
14685 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793564"];
14686 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793565"];
14687 [label="get\n            {\n                return 'CS';\n            } 793566"];
14688 [label="return 'CS'; 793567"];
14689 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride)); 793568"];
14690 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNull)); 793569"];
14691 [label="GetId(ErrorCode.WRN_MemberNotNull) 793570"];
14692 [label="param GetId(ErrorCode errorCode) 793571"];
14693 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793572"];
14694 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793573"];
14695 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793574"];
14696 [label="get\n            {\n                return 'CS';\n            } 793575"];
14697 [label="return 'CS'; 793576"];
14698 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNull)); 793577"];
14699 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullBadMember)); 793578"];
14700 [label="GetId(ErrorCode.WRN_MemberNotNullBadMember) 793579"];
14701 [label="param GetId(ErrorCode errorCode) 793580"];
14702 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793581"];
14703 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793582"];
14704 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793583"];
14705 [label="get\n            {\n                return 'CS';\n            } 793584"];
14706 [label="return 'CS'; 793585"];
14707 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullBadMember)); 793586"];
14708 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullWhen)); 793587"];
14709 [label="GetId(ErrorCode.WRN_MemberNotNullWhen) 793588"];
14710 [label="param GetId(ErrorCode errorCode) 793589"];
14711 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793590"];
14712 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793591"];
14713 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793592"];
14714 [label="get\n            {\n                return 'CS';\n            } 793593"];
14715 [label="return 'CS'; 793594"];
14716 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullWhen)); 793595"];
14717 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterDisallowsNull)); 793596"];
14718 [label="GetId(ErrorCode.WRN_ParameterDisallowsNull) 793597"];
14719 [label="param GetId(ErrorCode errorCode) 793598"];
14720 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793599"];
14721 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793600"];
14722 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793601"];
14723 [label="get\n            {\n                return 'CS';\n            } 793602"];
14724 [label="return 'CS'; 793603"];
14725 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterDisallowsNull)); 793604"];
14726 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterNotNullIfNotNull)); 793605"];
14727 [label="GetId(ErrorCode.WRN_ParameterNotNullIfNotNull) 793606"];
14728 [label="param GetId(ErrorCode errorCode) 793607"];
14729 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793608"];
14730 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793609"];
14731 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793610"];
14732 [label="get\n            {\n                return 'CS';\n            } 793611"];
14733 [label="return 'CS'; 793612"];
14734 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterNotNullIfNotNull)); 793613"];
14735 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ReturnNotNullIfNotNull)); 793614"];
14736 [label="GetId(ErrorCode.WRN_ReturnNotNullIfNotNull) 793615"];
14737 [label="param GetId(ErrorCode errorCode) 793616"];
14738 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793617"];
14739 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793618"];
14740 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 793619"];
14741 [label="get\n            {\n                return 'CS';\n            } 793620"];
14742 [label="return 'CS'; 793621"];
14743 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ReturnNotNullIfNotNull)); 793622"];
14744 [label="NullableWarnings = nullableWarnings.ToImmutable(); 793623"];
14745 [label="return ErrorFacts.GetSeverity((ErrorCode)code); 793624"];
14746 [label="ErrorFacts.GetSeverity((ErrorCode)code) 793625"];
14747 [label="param GetSeverity(ErrorCode code) 793626"];
14748 [label="if (code == ErrorCode.Void)\n            {\n                return InternalDiagnosticSeverity.Void;\n            }\n            else if (code == ErrorCode.Unknown)\n            {\n                return InternalDiagnosticSeverity.Unknown;\n            }\n            else if (IsWarning(code))\n            {\n                return DiagnosticSeverity.Warning;\n            }\n            else if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 793627"];
14749 [label="if (code == ErrorCode.Unknown)\n            {\n                return InternalDiagnosticSeverity.Unknown;\n            }\n            else if (IsWarning(code))\n            {\n                return DiagnosticSeverity.Warning;\n            }\n            else if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 793628"];
14750 [label="if (IsWarning(code))\n            {\n                return DiagnosticSeverity.Warning;\n            }\n            else if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 793629"];
14751 [label="IsWarning(code) 793630"];
14752 [label="param IsWarning(ErrorCode code) 793631"];
14753 [label="switch (code)\n            {\n                case ErrorCode.WRN_InvalidMainSig:\n                case ErrorCode.WRN_UnreferencedEvent:\n                case ErrorCode.WRN_LowercaseEllSuffix:\n                case ErrorCode.WRN_DuplicateUsing:\n                case ErrorCode.WRN_NewRequired:\n                case ErrorCode.WRN_NewNotRequired:\n                case ErrorCode.WRN_NewOrOverrideExpected:\n                case ErrorCode.WRN_UnreachableCode:\n                case ErrorCode.WRN_UnreferencedLabel:\n                case ErrorCode.WRN_UnreferencedVar:\n                case ErrorCode.WRN_UnreferencedField:\n                case ErrorCode.WRN_IsAlwaysTrue:\n                case ErrorCode.WRN_IsAlwaysFalse:\n                case ErrorCode.WRN_ByRefNonAgileField:\n                case ErrorCode.WRN_UnreferencedVarAssg:\n                case ErrorCode.WRN_NegativeArrayIndex:\n                case ErrorCode.WRN_BadRefCompareLeft:\n                case ErrorCode.WRN_BadRefCompareRight:\n                case ErrorCode.WRN_PatternIsAmbiguous:\n                case ErrorCode.WRN_PatternNotPublicOrNotInstance:\n                case ErrorCode.WRN_PatternBadSignature:\n                case ErrorCode.WRN_SequentialOnPartialClass:\n                case ErrorCode.WRN_MainCantBeGeneric:\n                case ErrorCode.WRN_UnreferencedFieldAssg:\n                case ErrorCode.WRN_AmbiguousXMLReference:\n                case ErrorCode.WRN_VolatileByRef:\n                case ErrorCode.WRN_SameFullNameThisNsAgg:\n                case ErrorCode.WRN_SameFullNameThisAggAgg:\n                case ErrorCode.WRN_SameFullNameThisAggNs:\n                case ErrorCode.WRN_GlobalAliasDefn:\n                case ErrorCode.WRN_AlwaysNull:\n                case ErrorCode.WRN_CmpAlwaysFalse:\n                case ErrorCode.WRN_FinalizeMethod:\n                case ErrorCode.WRN_GotoCaseShouldConvert:\n                case ErrorCode.WRN_NubExprIsConstBool:\n                case ErrorCode.WRN_ExplicitImplCollision:\n                case ErrorCode.WRN_DeprecatedSymbol:\n                case ErrorCode.WRN_DeprecatedSymbolStr:\n                case ErrorCode.WRN_ExternMethodNoImplementation:\n                case ErrorCode.WRN_ProtectedInSealed:\n                case ErrorCode.WRN_PossibleMistakenNullStatement:\n                case ErrorCode.WRN_UnassignedInternalField:\n                case ErrorCode.WRN_VacuousIntegralComp:\n                case ErrorCode.WRN_AttributeLocationOnBadDeclaration:\n                case ErrorCode.WRN_InvalidAttributeLocation:\n                case ErrorCode.WRN_EqualsWithoutGetHashCode:\n                case ErrorCode.WRN_EqualityOpWithoutEquals:\n                case ErrorCode.WRN_EqualityOpWithoutGetHashCode:\n                case ErrorCode.WRN_IncorrectBooleanAssg:\n                case ErrorCode.WRN_NonObsoleteOverridingObsolete:\n                case ErrorCode.WRN_BitwiseOrSignExtend:\n                case ErrorCode.WRN_CoClassWithoutComImport:\n                case ErrorCode.WRN_TypeParameterSameAsOuterTypeParameter:\n                case ErrorCode.WRN_AssignmentToLockOrDispose:\n                case ErrorCode.WRN_ObsoleteOverridingNonObsolete:\n                case ErrorCode.WRN_DebugFullNameTooLong:\n                case ErrorCode.WRN_ExternCtorNoImplementation:\n                case ErrorCode.WRN_WarningDirective:\n                case ErrorCode.WRN_UnreachableGeneralCatch:\n                case ErrorCode.WRN_DeprecatedCollectionInitAddStr:\n                case ErrorCode.WRN_DeprecatedCollectionInitAdd:\n                case ErrorCode.WRN_DefaultValueForUnconsumedLocation:\n                case ErrorCode.WRN_IdentifierOrNumericLiteralExpected:\n                case ErrorCode.WRN_EmptySwitch:\n                case ErrorCode.WRN_XMLParseError:\n                case ErrorCode.WRN_DuplicateParamTag:\n                case ErrorCode.WRN_UnmatchedParamTag:\n                case ErrorCode.WRN_MissingParamTag:\n                case ErrorCode.WRN_BadXMLRef:\n                case ErrorCode.WRN_BadXMLRefParamType:\n                case ErrorCode.WRN_BadXMLRefReturnType:\n                case ErrorCode.WRN_BadXMLRefSyntax:\n                case ErrorCode.WRN_UnprocessedXMLComment:\n                case ErrorCode.WRN_FailedInclude:\n                case ErrorCode.WRN_InvalidInclude:\n                case ErrorCode.WRN_MissingXMLComment:\n                case ErrorCode.WRN_XMLParseIncludeError:\n                case ErrorCode.WRN_ALinkWarn:\n                case ErrorCode.WRN_CmdOptionConflictsSource:\n                case ErrorCode.WRN_IllegalPragma:\n                case ErrorCode.WRN_IllegalPPWarning:\n                case ErrorCode.WRN_BadRestoreNumber:\n                case ErrorCode.WRN_NonECMAFeature:\n                case ErrorCode.WRN_ErrorOverride:\n                case ErrorCode.WRN_InvalidSearchPathDir:\n                case ErrorCode.WRN_MultiplePredefTypes:\n                case ErrorCode.WRN_TooManyLinesForDebugger:\n                case ErrorCode.WRN_CallOnNonAgileField:\n                case ErrorCode.WRN_InvalidNumber:\n                case ErrorCode.WRN_IllegalPPChecksum:\n                case ErrorCode.WRN_EndOfPPLineExpected:\n                case ErrorCode.WRN_ConflictingChecksum:\n                case ErrorCode.WRN_InvalidAssemblyName:\n                case ErrorCode.WRN_UnifyReferenceMajMin:\n                case ErrorCode.WRN_UnifyReferenceBldRev:\n                case ErrorCode.WRN_DuplicateTypeParamTag:\n                case ErrorCode.WRN_UnmatchedTypeParamTag:\n                case ErrorCode.WRN_MissingTypeParamTag:\n                case ErrorCode.WRN_AssignmentToSelf:\n                case ErrorCode.WRN_ComparisonToSelf:\n                case ErrorCode.WRN_DotOnDefault:\n                case ErrorCode.WRN_BadXMLRefTypeVar:\n                case ErrorCode.WRN_UnmatchedParamRefTag:\n                case ErrorCode.WRN_UnmatchedTypeParamRefTag:\n                case ErrorCode.WRN_ReferencedAssemblyReferencesLinkedPIA:\n                case ErrorCode.WRN_CantHaveManifestForModule:\n                case ErrorCode.WRN_MultipleRuntimeImplementationMatches:\n                case ErrorCode.WRN_MultipleRuntimeOverrideMatches:\n                case ErrorCode.WRN_DynamicDispatchToConditionalMethod:\n                case ErrorCode.WRN_IsDynamicIsConfusing:\n                case ErrorCode.WRN_AsyncLacksAwaits:\n                case ErrorCode.WRN_FileAlreadyIncluded:\n                case ErrorCode.WRN_NoSources:\n                case ErrorCode.WRN_NoConfigNotOnCommandLine:\n                case ErrorCode.WRN_DefineIdentifierRequired:\n                case ErrorCode.WRN_BadUILang:\n                case ErrorCode.WRN_CLS_NoVarArgs:\n                case ErrorCode.WRN_CLS_BadArgType:\n                case ErrorCode.WRN_CLS_BadReturnType:\n                case ErrorCode.WRN_CLS_BadFieldPropType:\n                case ErrorCode.WRN_CLS_BadIdentifierCase:\n                case ErrorCode.WRN_CLS_OverloadRefOut:\n                case ErrorCode.WRN_CLS_OverloadUnnamed:\n                case ErrorCode.WRN_CLS_BadIdentifier:\n                case ErrorCode.WRN_CLS_BadBase:\n                case ErrorCode.WRN_CLS_BadInterfaceMember:\n                case ErrorCode.WRN_CLS_NoAbstractMembers:\n                case ErrorCode.WRN_CLS_NotOnModules:\n                case ErrorCode.WRN_CLS_ModuleMissingCLS:\n                case ErrorCode.WRN_CLS_AssemblyNotCLS:\n                case ErrorCode.WRN_CLS_BadAttributeType:\n                case ErrorCode.WRN_CLS_ArrayArgumentToAttribute:\n                case ErrorCode.WRN_CLS_NotOnModules2:\n                case ErrorCode.WRN_CLS_IllegalTrueInFalse:\n                case ErrorCode.WRN_CLS_MeaninglessOnPrivateType:\n                case ErrorCode.WRN_CLS_AssemblyNotCLS2:\n                case ErrorCode.WRN_CLS_MeaninglessOnParam:\n                case ErrorCode.WRN_CLS_MeaninglessOnReturn:\n                case ErrorCode.WRN_CLS_BadTypeVar:\n                case ErrorCode.WRN_CLS_VolatileField:\n                case ErrorCode.WRN_CLS_BadInterface:\n                case ErrorCode.WRN_UnobservedAwaitableExpression:\n                case ErrorCode.WRN_CallerLineNumberParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerFilePathParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerMemberNameParamForUnconsumedLocation:\n                case ErrorCode.WRN_MainIgnored:\n                case ErrorCode.WRN_StaticInAsOrIs:\n                case ErrorCode.WRN_DelaySignButNoKey:\n                case ErrorCode.WRN_InvalidVersionFormat:\n                case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:\n                case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:\n                case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:\n                case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:\n                case ErrorCode.WRN_FilterIsConstantTrue:\n                case ErrorCode.WRN_UnimplementedCommandLineSwitch:\n                case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:\n                case ErrorCode.WRN_RefCultureMismatch:\n                case ErrorCode.WRN_ConflictingMachineAssembly:\n                case ErrorCode.WRN_UnqualifiedNestedTypeInCref:\n                case ErrorCode.WRN_NoRuntimeMetadataVersion:\n                case ErrorCode.WRN_PdbLocalNameTooLong:\n                case ErrorCode.WRN_AnalyzerCannotBeCreated:\n                case ErrorCode.WRN_NoAnalyzerInAssembly:\n                case ErrorCode.WRN_UnableToLoadAnalyzer:\n                case ErrorCode.WRN_NubExprIsConstBool2:\n                case ErrorCode.WRN_AlignmentMagnitude:\n                case ErrorCode.WRN_AttributeIgnoredWhenPublicSigning:\n                case ErrorCode.WRN_TupleLiteralNameMismatch:\n                case ErrorCode.WRN_Experimental:\n                case ErrorCode.WRN_UnreferencedLocalFunction:\n                case ErrorCode.WRN_FilterIsConstantFalse:\n                case ErrorCode.WRN_FilterIsConstantFalseRedundantTryCatch:\n                case ErrorCode.WRN_AttributesOnBackingFieldsNotAvailable:\n                case ErrorCode.WRN_TupleBinopLiteralNameMismatch:\n                case ErrorCode.WRN_TypeParameterSameAsOuterMethodTypeParameter:\n                case ErrorCode.WRN_UnconsumedEnumeratorCancellationAttributeUsage:\n                case ErrorCode.WRN_UndecoratedCancellationTokenParameter:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustive:\n                case ErrorCode.WRN_CaseConstantNamedUnderscore:\n                case ErrorCode.WRN_IsTypeNamedUnderscore:\n                case ErrorCode.WRN_GivenExpressionNeverMatchesPattern:\n                case ErrorCode.WRN_GivenExpressionAlwaysMatchesConstant:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue:\n                case ErrorCode.WRN_ThrowPossibleNull:\n                case ErrorCode.WRN_ConvertingNullableToNonNullable:\n                case ErrorCode.WRN_NullReferenceAssignment:\n                case ErrorCode.WRN_NullReferenceReceiver:\n                case ErrorCode.WRN_NullReferenceReturn:\n                case ErrorCode.WRN_NullReferenceArgument:\n                case ErrorCode.WRN_UnboxPossibleNull:\n                case ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation:\n                case ErrorCode.WRN_UninitializedNonNullableField:\n                case ErrorCode.WRN_NullabilityMismatchInAssignment:\n                case ErrorCode.WRN_NullabilityMismatchInArgument:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate:\n                case ErrorCode.WRN_NullabilityMismatchInArgumentForOutput:\n                case ErrorCode.WRN_NullAsNonNullable:\n                case ErrorCode.WRN_NullableValueTypeMayBeNull:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint:\n                case ErrorCode.WRN_MissingNonNullTypesContextForAnnotation:\n                case ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint:\n                case ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface:\n                case ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase:\n                case ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull:\n                case ErrorCode.WRN_ImplicitCopyInReadOnlyMember:\n                case ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation:\n                case ErrorCode.WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode:\n                case ErrorCode.WRN_NullReferenceInitializer:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint:\n                case ErrorCode.WRN_ParameterConditionallyDisallowsNull:\n                case ErrorCode.WRN_ShouldNotReturn:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation:\n                case ErrorCode.WRN_DoesNotReturnMismatch:\n                case ErrorCode.WRN_MemberNotNull:\n                case ErrorCode.WRN_MemberNotNullWhen:\n                case ErrorCode.WRN_MemberNotNullBadMember:\n                case ErrorCode.WRN_ParameterDisallowsNull:\n                case ErrorCode.WRN_ConstOutOfRangeChecked:\n                case ErrorCode.WRN_GeneratorFailedDuringInitialization:\n                case ErrorCode.WRN_GeneratorFailedDuringGeneration:\n                case ErrorCode.WRN_GivenExpressionAlwaysMatchesPattern:\n                case ErrorCode.WRN_IsPatternAlways:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial:\n                case ErrorCode.WRN_ParameterNotNullIfNotNull:\n                case ErrorCode.WRN_ReturnNotNullIfNotNull:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveWithWhen:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen:\n                case ErrorCode.WRN_PrecedenceInversion:\n                case ErrorCode.WRN_AnalyzerReferencesFramework:\n                case ErrorCode.WRN_RecordEqualsWithoutGetHashCode:\n                case ErrorCode.WRN_RecordNamedDisallowed:\n                case ErrorCode.WRN_UnassignedThisAutoProperty:\n                case ErrorCode.WRN_UnassignedThis:\n                case ErrorCode.WRN_ParamUnassigned:\n                case ErrorCode.WRN_UseDefViolationProperty:\n                case ErrorCode.WRN_UseDefViolationField:\n                case ErrorCode.WRN_UseDefViolationThis:\n                case ErrorCode.WRN_UseDefViolationOut:\n                case ErrorCode.WRN_UseDefViolation:\n                case ErrorCode.WRN_SyncAndAsyncEntryPoints:\n                case ErrorCode.WRN_ParameterIsStaticClass:\n                case ErrorCode.WRN_ReturnTypeIsStaticClass:\n                case ErrorCode.WRN_UnreadRecordParameter:\n                case ErrorCode.WRN_DoNotCompareFunctionPointers:\n                    return true;\n                default:\n                    return false;\n            } 793632"];
14754 [label="return false; 793633"];
14755 [label="if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 793634"];
14756 [label="IsInfo(code) 793635"];
14757 [label="param IsInfo(ErrorCode code) 793636"];
14758 [label="switch (code)\n            {\n                case ErrorCode.INF_UnableToLoadSomeTypesInAnalyzer:\n                    return true;\n                default:\n                    return false;\n            } 793637"];
14759 [label="return false; 793638"];
14760 [label="if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 793639"];
14761 [label="IsHidden(code) 793640"];
14762 [label="param IsHidden(ErrorCode code) 793641"];
14763 [label="switch (code)\n            {\n                case ErrorCode.HDN_UnusedUsingDirective:\n                case ErrorCode.HDN_UnusedExternAlias:\n                    return true;\n                default:\n                    return false;\n            } 793642"];
14764 [label="return false; 793643"];
14765 [label="return DiagnosticSeverity.Error; 793644"];
14766 [label="param DiagnosticInfoWithSymbols(this) 793645"];
14767 [label="this.Symbols 793646"];
14768 [label="_additionalLocations 793647"];
14769 [label="Debug.Assert(code != ErrorCode.ERR_InternalError); 793648"];
14770 [label="additionalLocations.IsDefaultOrEmpty 793649"];
14771 [label="_additionalLocations = additionalLocations.IsDefaultOrEmpty ? SpecializedCollections.EmptyReadOnlyList<Location>() : additionalLocations; 793650"];
14772 [label="_additionalLocations 793651"];
14773 [label="EmptyErrorInfo = new CSDiagnosticInfo(0) 793652"];
14774 [label="ErrorCode.Void 793653"];
14775 [label="new CSDiagnosticInfo(ErrorCode.Void) 793654"];
14776 [label="param CSDiagnosticInfo(ErrorCode code) 793655"];
14777 [label="param CSDiagnosticInfo(this) 793656"];
14778 [label="code 793657"];
14779 [label="Array.Empty<object>() 793658"];
14780 [label="ImmutableArray<Symbol>.Empty 793659"];
14781 [label="ImmutableArray<Location>.Empty 793660"];
14782 [label="param CSDiagnosticInfo(ErrorCode code) 793661"];
14783 [label="param CSDiagnosticInfo(object[] args) 793662"];
14784 [label="param CSDiagnosticInfo(ImmutableArray<Symbol> symbols) 793663"];
14785 [label="param CSDiagnosticInfo(ImmutableArray<Location> additionalLocations) 793664"];
14786 [label="param CSDiagnosticInfo(this) 793665"];
14787 [label="code 793666"];
14788 [label="args 793667"];
14789 [label="symbols 793668"];
14790 [label="param DiagnosticInfoWithSymbols(ErrorCode errorCode) 793669"];
14791 [label="param DiagnosticInfoWithSymbols(object[] arguments) 793670"];
14792 [label="param DiagnosticInfoWithSymbols(ImmutableArray<Symbol> symbols) 793671"];
14793 [label="param DiagnosticInfoWithSymbols(this) 793672"];
14794 [label="CSharp.MessageProvider.Instance 793673"];
14795 [label="errorCode 793674"];
14796 [label="arguments 793675"];
14797 [label="param DiagnosticInfoWithSymbols(this) 793676"];
14798 [label="param GetSeverity(this) 793677"];
14799 [label="ErrorFacts.GetSeverity((ErrorCode)code) 793678"];
14800 [label="return InternalDiagnosticSeverity.Void; 793679"];
14801 [label="this.Symbols 793680"];
14802 [label="_additionalLocations 793681"];
14803 [label="Debug.Assert(code != ErrorCode.ERR_InternalError); 793682"];
14804 [label="additionalLocations.IsDefaultOrEmpty 793683"];
14805 [label="_additionalLocations = additionalLocations.IsDefaultOrEmpty ? SpecializedCollections.EmptyReadOnlyList<Location>() : additionalLocations; 793684"];
14806 [label="_additionalLocations 793685"];
14807 [label="VoidDiagnosticInfo = new CSDiagnosticInfo(ErrorCode.Void) 793686"];
14808 [label="_lazyUseSiteDiagnostic = CSDiagnosticInfo.EmptyErrorInfo 793687"];
14809 [label="_lazyUncommonProperties 793688"];
14810 [label="public IEnumerable<object> fieldDefs { get; set; } 793689"];
14811 [label="Debug.Assert(!handle.IsNil); 793690"];
14812 [label="Debug.Assert((object)container != null); 793691"];
14813 [label="Debug.Assert((object)container != null); 793692"];
14814 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793693"];
14815 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793694"];
14816 [label="string metadataName; 793695"];
14817 [label="bool makeBad = false; 793696"];
14818 [label="moduleSymbol.Module 793697"];
14819 [label="get\n            {\n                return _module;\n            } 793698"];
14820 [label="return _module; 793699"];
14821 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 793700"];
14822 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 793701"];
14823 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 793702"];
14824 [label="_handle 793703"];
14825 [label="_container 793704"];
14826 [label="moduleSymbol.Module 793705"];
14827 [label="get\n            {\n                return _module;\n            } 793706"];
14828 [label="return _module; 793707"];
14829 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 793708"];
14830 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 793709"];
14831 [label="_flags 793710"];
14832 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 793711"];
14833 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 793712"];
14834 [label="_name 793713"];
14835 [label="mangleName = false; 793714"];
14836 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793715"];
14837 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793716"];
14838 [label="moduleSymbol.ContainingAssembly 793717"];
14839 [label="get\n            {\n                return _assemblySymbol;\n            } 793718"];
14840 [label="return _assemblySymbol; 793719"];
14841 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793720"];
14842 [label="moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 793721"];
14843 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 793722"];
14844 [label="this.CorLibrary 793723"];
14845 [label="get\n            {\n                return _corLibrary;\n            } 793724"];
14846 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 793725"];
14847 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 793726"];
14848 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 793727"];
14849 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793728"];
14850 [label="this.DeclaredAccessibility 793729"];
14851 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 793730"];
14852 [label="Accessibility access = Accessibility.Private; 793731"];
14853 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 793732"];
14854 [label="access = Accessibility.Internal; 793733"];
14855 [label="return access; 793734"];
14856 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793735"];
14857 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793736"];
14858 [label="_corTypeId 793737"];
14859 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 793738"];
14860 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793739"];
14861 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793740"];
14862 [label="return result; 793741"];
14863 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 793742"];
14864 [label="GenericParameterHandleCollection genericParameterHandles; 793743"];
14865 [label="genericParameterHandles 793744"];
14866 [label="ushort arity; 793745"];
14867 [label="BadImageFormatException mrEx = null; 793746"];
14868 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793747"];
14869 [label="param GetGenericInfo(out ushort arity) 793748"];
14870 [label="param GetGenericInfo(out BadImageFormatException mrEx) 793749"];
14871 [label="mrEx = null; 793750"];
14872 [label="bool mangleName; 793751"];
14873 [label="PENamedTypeSymbol result; 793752"];
14874 [label="result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName); 793753"];
14875 [label="result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName); 793754"];
14876 [label="new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName) 793755"];
14877 [label="param PENamedTypeSymbolGeneric(PEModuleSymbol moduleSymbol) 793756"];
14878 [label="param PENamedTypeSymbolGeneric(NamespaceOrTypeSymbol container) 793757"];
14879 [label="param PENamedTypeSymbolGeneric(TypeDefinitionHandle handle) 793758"];
14880 [label="param PENamedTypeSymbolGeneric(string emittedNamespaceName) 793759"];
14881 [label="param PENamedTypeSymbolGeneric(GenericParameterHandleCollection genericParameterHandles) 793760"];
14882 [label="param PENamedTypeSymbolGeneric(ushort arity) 793761"];
14883 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 793762"];
14884 [label="param PENamedTypeSymbolGeneric(this) 793763"];
14885 [label="moduleSymbol 793764"];
14886 [label="container 793765"];
14887 [label="handle 793766"];
14888 [label="emittedNamespaceName 793767"];
14889 [label="arity 793768"];
14890 [label="mangleName 793769"];
14891 [label="param PENamedTypeSymbolGeneric(this) 793770"];
14892 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 793771"];
14893 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 793772"];
14894 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 793773"];
14895 [label="param PENamedTypeSymbol(string emittedNamespaceName) 793774"];
14896 [label="param PENamedTypeSymbol(ushort arity) 793775"];
14897 [label="param PENamedTypeSymbol(out bool mangleName) 793776"];
14898 [label="_lazyTupleData 793777"];
14899 [label="_container 793778"];
14900 [label="_name 793779"];
14901 [label="_flags 793780"];
14902 [label="_corTypeId 793781"];
14903 [label="Debug.Assert(!handle.IsNil); 793782"];
14904 [label="Debug.Assert((object)container != null); 793783"];
14905 [label="Debug.Assert((object)container != null); 793784"];
14906 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793785"];
14907 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793786"];
14908 [label="string metadataName; 793787"];
14909 [label="bool makeBad = false; 793788"];
14910 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 793789"];
14911 [label="_name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity); 793790"];
14912 [label="_name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity); 793791"];
14913 [label="_name 793792"];
14914 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 793793"];
14915 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 793794"];
14916 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 793795"];
14917 [label="mangleName = !ReferenceEquals(_name, metadataName); 793796"];
14918 [label="mangleName = !ReferenceEquals(_name, metadataName); 793797"];
14919 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 793798"];
14920 [label="Accessibility access = Accessibility.Private; 793799"];
14921 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 793800"];
14922 [label="_arity 793801"];
14923 [label="_mangleName 793802"];
14924 [label="Debug.Assert(genericParameterHandles.Count > 0); 793803"];
14925 [label="Debug.Assert(genericParameterHandles.Count > 0); 793804"];
14926 [label="_arity 793805"];
14927 [label="_genericParameterHandles 793806"];
14928 [label="_mangleName 793807"];
14929 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793808"];
14930 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793809"];
14931 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 793810"];
14932 [label="GenericParameterHandleCollection genericParameterHandles; 793811"];
14933 [label="genericParameterHandles 793812"];
14934 [label="ushort arity; 793813"];
14935 [label="BadImageFormatException mrEx = null; 793814"];
14936 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793815"];
14937 [label="param GetGenericInfo(out ushort arity) 793816"];
14938 [label="param GetGenericInfo(out BadImageFormatException mrEx) 793817"];
14939 [label="mrEx = null; 793818"];
14940 [label="bool mangleName; 793819"];
14941 [label="PENamedTypeSymbol result; 793820"];
14942 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 793821"];
14943 [label="mangleName 793822"];
14944 [label="param PENamedTypeSymbol(out bool mangleName) 793823"];
14945 [label="_lazyTupleData 793824"];
14946 [label="_container 793825"];
14947 [label="_name 793826"];
14948 [label="_flags 793827"];
14949 [label="_corTypeId 793828"];
14950 [label="Debug.Assert(!handle.IsNil); 793829"];
14951 [label="Debug.Assert((object)container != null); 793830"];
14952 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793831"];
14953 [label="string metadataName; 793832"];
14954 [label="bool makeBad = false; 793833"];
14955 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 793834"];
14956 [label="Accessibility access = Accessibility.Private; 793835"];
14957 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 793836"];
14958 [label="_arity 793837"];
14959 [label="_mangleName 793838"];
14960 [label="Debug.Assert(genericParameterHandles.Count > 0); 793839"];
14961 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793840"];
14962 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793841"];
14963 [label="GenericParameterHandleCollection genericParameterHandles; 793842"];
14964 [label="genericParameterHandles 793843"];
14965 [label="ushort arity; 793844"];
14966 [label="BadImageFormatException mrEx = null; 793845"];
14967 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793846"];
14968 [label="param GetGenericInfo(out ushort arity) 793847"];
14969 [label="param GetGenericInfo(out BadImageFormatException mrEx) 793848"];
14970 [label="mrEx = null; 793849"];
14971 [label="PENamedTypeSymbol result; 793850"];
14972 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 793851"];
14973 [label="mangleName 793852"];
14974 [label="param PENamedTypeSymbol(out bool mangleName) 793853"];
14975 [label="Debug.Assert(!handle.IsNil); 793854"];
14976 [label="mangleName = false; 793855"];
14977 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793856"];
14978 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793857"];
14979 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 793858"];
14980 [label="mangleName 793859"];
14981 [label="param PENamedTypeSymbol(out bool mangleName) 793860"];
14982 [label="_lazyTupleData 793861"];
14983 [label="_container 793862"];
14984 [label="_name 793863"];
14985 [label="_flags 793864"];
14986 [label="_corTypeId 793865"];
14987 [label="Debug.Assert(!handle.IsNil); 793866"];
14988 [label="Debug.Assert((object)container != null); 793867"];
14989 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793868"];
14990 [label="string metadataName; 793869"];
14991 [label="bool makeBad = false; 793870"];
14992 [label="mangleName = false; 793871"];
14993 [label="Accessibility access = Accessibility.Private; 793872"];
14994 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 793873"];
14995 [label="genericParameterHandles 793874"];
14996 [label="ushort arity; 793875"];
14997 [label="BadImageFormatException mrEx = null; 793876"];
14998 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793877"];
14999 [label="param GetGenericInfo(out ushort arity) 793878"];
15000 [label="param GetGenericInfo(out BadImageFormatException mrEx) 793879"];
15001 [label="mrEx = null; 793880"];
15002 [label="PENamedTypeSymbol result; 793881"];
15003 [label="Debug.Assert(!handle.IsNil); 793882"];
15004 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793883"];
15005 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793884"];
15006 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793885"];
15007 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 793886"];
15008 [label="mangleName 793887"];
15009 [label="param PENamedTypeSymbol(out bool mangleName) 793888"];
15010 [label="_lazyTupleData 793889"];
15011 [label="_container 793890"];
15012 [label="_name 793891"];
15013 [label="_flags 793892"];
15014 [label="_corTypeId 793893"];
15015 [label="Debug.Assert(!handle.IsNil); 793894"];
15016 [label="Debug.Assert((object)container != null); 793895"];
15017 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793896"];
15018 [label="string metadataName; 793897"];
15019 [label="bool makeBad = false; 793898"];
15020 [label="mangleName = false; 793899"];
15021 [label="Accessibility access = Accessibility.Private; 793900"];
15022 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 793901"];
15023 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 793902"];
15024 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 793903"];
15025 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 793904"];
15026 [label="get\n            {\n                return _name;\n            } 793905"];
15027 [label="return _name; 793906"];
15028 [label="children.Free(); 793907"];
15029 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 793908"];
15030 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 793909"];
15031 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 793910"];
15032 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 793911"];
15033 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 793912"];
15034 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 793913"];
15035 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 793914"];
15036 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 793915"];
15037 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 793916"];
15038 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 793917"];
15039 [label="param OnNewTypeDeclarationsLoaded(this) 793918"];
15040 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 793919"];
15041 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 793920"];
15042 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 793921"];
15043 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 793922"];
15044 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 793923"];
15045 [label="foreach (var types in typesDict.Values)\n            {\n                foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                }\n            } 793924"];
15046 [label="foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                } 793925"];
15047 [label="bool added; 793926"];
15048 [label="type.Handle 793927"];
15049 [label="get\n            {\n                return _handle;\n            } 793928"];
15050 [label="return _handle; 793929"];
15051 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 793930"];
15052 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 793931"];
15053 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 793932"];
15054 [label="Debug.Assert(added); 793933"];
15055 [label="type.SpecialType 793934"];
15056 [label="get\n            {\n                return _corTypeId;\n            } 793935"];
15057 [label="return _corTypeId; 793936"];
15058 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 793937"];
15059 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 793938"];
15060 [label="bool added; 793939"];
15061 [label="Debug.Assert(added); 793940"];
15062 [label="type.SpecialType 793941"];
15063 [label="get\n            {\n                return _corTypeId;\n            } 793942"];
15064 [label="return _corTypeId; 793943"];
15065 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 793944"];
15066 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 793945"];
15067 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 793946"];
15068 [label="LazyInitializeTypes(nestedTypes); 793947"];
15069 [label="LoadAllMembers(groups); 793948"];
15070 [label="EnsureAllMembersLoaded(); 793949"];
15071 [label="PENestedNamespaceSymbol ns = null; 793950"];
15072 [label="ImmutableArray<PENamedTypeSymbol> t; 793951"];
15073 [label="t 793952"];
15074 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 793953"];
15075 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 793954"];
15076 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 793955"];
15077 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 793956"];
15078 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 793957"];
15079 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 793958"];
15080 [label="return ImmutableArray<Symbol>.Empty; 793959"];
15081 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 793960"];
15082 [label="Debug.Assert(typesByNS != null); 793961"];
15083 [label="get\n            {\n                return true;\n            } 793962"];
15084 [label="_containingNamespaceSymbol 793963"];
15085 [label="_name 793964"];
15086 [label="_typesByNS 793965"];
15087 [label="Debug.Assert(name != null); 793966"];
15088 [label="Debug.Assert((object)containingNamespace != null); 793967"];
15089 [label="Debug.Assert(typesByNS != null); 793968"];
15090 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 793969"];
15091 [label="genericParameterHandles 793970"];
15092 [label="BadImageFormatException mrEx = null; 793971"];
15093 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793972"];
15094 [label="param GetGenericInfo(out ushort arity) 793973"];
15095 [label="param GetGenericInfo(out BadImageFormatException mrEx) 793974"];
15096 [label="mrEx = null; 793975"];
15097 [label="PENamedTypeSymbol result; 793976"];
15098 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 793977"];
15099 [label="mangleName 793978"];
15100 [label="param PENamedTypeSymbol(out bool mangleName) 793979"];
15101 [label="_lazyTupleData 793980"];
15102 [label="_container 793981"];
15103 [label="_name 793982"];
15104 [label="_flags 793983"];
15105 [label="_corTypeId 793984"];
15106 [label="Debug.Assert(!handle.IsNil); 793985"];
15107 [label="Debug.Assert((object)container != null); 793986"];
15108 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 793987"];
15109 [label="string metadataName; 793988"];
15110 [label="bool makeBad = false; 793989"];
15111 [label="mangleName = false; 793990"];
15112 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 793991"];
15113 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793992"];
15114 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 793993"];
15115 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 793994"];
15116 [label="param GetGenericInfo(out ushort arity) 793995"];
15117 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 793996"];
15118 [label="mangleName 793997"];
15119 [label="param PENamedTypeSymbol(out bool mangleName) 793998"];
15120 [label="_lazyTupleData 793999"];
15121 [label="_container 794000"];
15122 [label="_name 794001"];
15123 [label="_flags 794002"];
15124 [label="_corTypeId 794003"];
15125 [label="Debug.Assert(!handle.IsNil); 794004"];
15126 [label="Debug.Assert((object)container != null); 794005"];
15127 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 794006"];
15128 [label="string metadataName; 794007"];
15129 [label="bool makeBad = false; 794008"];
15130 [label="mangleName = false; 794009"];
15131 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 794010"];
15132 [label="genericParameterHandles 794011"];
15133 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 794012"];
15134 [label="param GetGenericInfo(out ushort arity) 794013"];
15135 [label="param GetGenericInfo(out BadImageFormatException mrEx) 794014"];
15136 [label="mrEx = null; 794015"];
15137 [label="PENamedTypeSymbol result; 794016"];
15138 [label="Debug.Assert(!handle.IsNil); 794017"];
15139 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 794018"];
15140 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 794019"];
15141 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 794020"];
15142 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 794021"];
15143 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 794022"];
15144 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 794023"];
15145 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 794024"];
15146 [label="bool added; 794025"];
15147 [label="Debug.Assert(added); 794026"];
15148 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 794027"];
15149 [label="EnsureAllMembersLoaded(); 794028"];
15150 [label="return ImmutableArray<Symbol>.Empty; 794029"];
15151 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 794030"];
15152 [label="Debug.Assert(typesByNS != null); 794031"];
15153 [label="get\n            {\n                return true;\n            } 794032"];
15154 [label="_containingNamespaceSymbol 794033"];
15155 [label="_name 794034"];
15156 [label="_typesByNS 794035"];
15157 [label="Debug.Assert(name != null); 794036"];
15158 [label="Debug.Assert((object)containingNamespace != null); 794037"];
15159 [label="Debug.Assert(typesByNS != null); 794038"];
15160 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 794039"];
15161 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 794040"];
15162 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 794041"];
15163 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 794042"];
15164 [label="bool added; 794043"];
15165 [label="Debug.Assert(added); 794044"];
15166 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 794045"];
15167 [label="EnsureAllMembersLoaded(); 794046"];
15168 [label="return ImmutableArray<Symbol>.Empty; 794047"];
15169 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 794048"];
15170 [label="Debug.Assert(typesByNS != null); 794049"];
15171 [label="get\n            {\n                return true;\n            } 794050"];
15172 [label="_containingNamespaceSymbol 794051"];
15173 [label="_name 794052"];
15174 [label="_typesByNS 794053"];
15175 [label="Debug.Assert(name != null); 794054"];
15176 [label="Debug.Assert((object)containingNamespace != null); 794055"];
15177 [label="Debug.Assert(typesByNS != null); 794056"];
15178 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 794057"];
15179 [label="genericParameterHandles 794058"];
15180 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 794059"];
15181 [label="param GetGenericInfo(out ushort arity) 794060"];
15182 [label="param GetGenericInfo(out BadImageFormatException mrEx) 794061"];
15183 [label="mrEx = null; 794062"];
15184 [label="PENamedTypeSymbol result; 794063"];
15185 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 794064"];
15186 [label="mangleName 794065"];
15187 [label="param PENamedTypeSymbol(out bool mangleName) 794066"];
15188 [label="_lazyTupleData 794067"];
15189 [label="_container 794068"];
15190 [label="_name 794069"];
15191 [label="_flags 794070"];
15192 [label="_corTypeId 794071"];
15193 [label="Debug.Assert(!handle.IsNil); 794072"];
15194 [label="Debug.Assert((object)container != null); 794073"];
15195 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 794074"];
15196 [label="string metadataName; 794075"];
15197 [label="bool makeBad = false; 794076"];
15198 [label="mangleName = false; 794077"];
15199 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 794078"];
15200 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 794079"];
15201 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 794080"];
15202 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 794081"];
15203 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 794082"];
15204 [label="EnsureAllMembersLoaded(); 794083"];
15205 [label="return ImmutableArray<Symbol>.Empty; 794084"];
15206 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 794085"];
15207 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 794086"];
15208 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 794087"];
15209 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 794088"];
15210 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 794089"];
15211 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 794090"];
15212 [label="MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()) 794091"];
15213 [label="param Create(NamespaceExtent extent) 794092"];
15214 [label="param Create(NamespaceSymbol containingNamespace) 794093"];
15215 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 794094"];
15216 [label="param Create(string nameOpt = null) 794095"];
15217 [label="Debug.Assert(namespacesToMerge.Length != 0); 794096"];
15218 [label="Debug.Assert(namespacesToMerge.Length != 0); 794097"];
15219 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 794098"];
15220 [label="return otherSymbols.ToImmutableAndFree(); 794099"];
15221 [label="var classA = namespaceNS.GetTypeMembers('A').First(); 794100"];
15222 [label="namespaceNS.GetTypeMembers('A') 794101"];
15223 [label="param GetTypeMembers(string name) 794102"];
15224 [label="param GetTypeMembers(this) 794103"];
15225 [label="ImmutableArray<NamedTypeSymbol> members; 794104"];
15226 [label="members 794105"];
15227 [label="this.GetNameToTypeMembersMap() 794106"];
15228 [label="param GetNameToTypeMembersMap(this) 794107"];
15229 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 794108"];
15230 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 794109"];
15231 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 794110"];
15232 [label="GetNameToMembersMap() 794111"];
15233 [label="ArrayBuilder<SingleTypeDeclaration> types = null; 794112"];
15234 [label="bool allTypesHaveSameIdentity = true; 794113"];
15235 [label="var asType = child as SingleTypeDeclaration; 794114"];
15236 [label="if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    } 794115"];
15237 [label="if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    } 794116"];
15238 [label="if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        } 794117"];
15239 [label="if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        } 794118"];
15240 [label="types = ArrayBuilder<SingleTypeDeclaration>.GetInstance(); 794119"];
15241 [label="types.Add(asType); 794120"];
15242 [label="types.Add(asType); 794121"];
15243 [label="if (types != null)\n            {\n                if (allTypesHaveSameIdentity)\n                {\n                    children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var typeGroups = types.ToDictionary(t => t.Identity);\n                    types.Free();\n\n                    foreach (var typeGroup in typeGroups.Values)\n                    {\n                        children.Add(new MergedTypeDeclaration(typeGroup));\n                    }\n                }\n            } 794122"];
15244 [label="if (allTypesHaveSameIdentity)\n                {\n                    children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var typeGroups = types.ToDictionary(t => t.Identity);\n                    types.Free();\n\n                    foreach (var typeGroup in typeGroups.Values)\n                    {\n                        children.Add(new MergedTypeDeclaration(typeGroup));\n                    }\n                } 794123"];
15245 [label="children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree())); 794124"];
15246 [label="children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree())); 794125"];
15247 [label="new MergedTypeDeclaration(types.ToImmutableAndFree()) 794126"];
15248 [label="param MergedTypeDeclaration(ImmutableArray<SingleTypeDeclaration> declarations) 794127"];
15249 [label="param MergedTypeDeclaration(this) 794128"];
15250 [label="0 794129"];
15251 [label="declarations[0] 794130"];
15252 [label="declarations[0].Name 794131"];
15253 [label="get\n            {\n                return this.name;\n            } 794132"];
15254 [label="param MergedTypeDeclaration(this) 794133"];
15255 [label="param MergedNamespaceOrTypeDeclaration(string name) 794134"];
15256 [label="name 794135"];
15257 [label="_lazyMemberNames 794136"];
15258 [label="_declarations 794137"];
15259 [label="children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree())); 794138"];
15260 [label="param BuildSymbol(this) 794139"];
15261 [label="get\n            {\n                return this.Declarations[0].Kind;\n            } 794140"];
15262 [label="this.Declarations 794141"];
15263 [label="get\n            {\n                return _declarations;\n            } 794142"];
15264 [label="return _declarations; 794143"];
15265 [label="return this.Declarations[0].Kind; 794144"];
15266 [label="return this.Declarations[0].Kind; 794145"];
15267 [label="this.Declarations[0].Kind 794146"];
15268 [label="get\n            {\n                return _kind;\n            } 794147"];
15269 [label="return _kind; 794148"];
15270 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 794149"];
15271 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 794150"];
15272 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 794151"];
15273 [label="new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics) 794152"];
15274 [label="param SourceNamedTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 794153"];
15275 [label="param SourceNamedTypeSymbol(MergedTypeDeclaration declaration) 794154"];
15276 [label="param SourceNamedTypeSymbol(DiagnosticBag diagnostics) 794155"];
15277 [label="param SourceNamedTypeSymbol(TupleExtraData tupleData = null) 794156"];
15278 [label="param SourceNamedTypeSymbol(this) 794157"];
15279 [label="false 794158"];
15280 [label="considerName: false 794159"];
15281 [label="false 794160"];
15282 [label="considerExplicitlyImplementedInterfaces: false 794161"];
15283 [label="true 794162"];
15284 [label="considerReturnType: true 794163"];
15285 [label="false 794164"];
15286 [label="considerTypeConstraints: false 794165"];
15287 [label="true 794166"];
15288 [label="considerRefKindDifferences: true 794167"];
15289 [label="true 794168"];
15290 [label="considerCallingConvention: true 794169"];
15291 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794170"];
15292 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794171"];
15293 [label="param MemberSignatureComparer(bool considerName) 794172"];
15294 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794173"];
15295 [label="param MemberSignatureComparer(bool considerReturnType) 794174"];
15296 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794175"];
15297 [label="param MemberSignatureComparer(bool considerCallingConvention) 794176"];
15298 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794177"];
15299 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794178"];
15300 [label="param MemberSignatureComparer(this) 794179"];
15301 [label="_considerName 794180"];
15302 [label="_considerExplicitlyImplementedInterfaces 794181"];
15303 [label="_considerReturnType 794182"];
15304 [label="_considerTypeConstraints 794183"];
15305 [label="_considerCallingConvention 794184"];
15306 [label="_considerRefKindDifferences 794185"];
15307 [label="_typeComparison 794186"];
15308 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794187"];
15309 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794188"];
15310 [label="_considerName 794189"];
15311 [label="_considerExplicitlyImplementedInterfaces 794190"];
15312 [label="_considerReturnType 794191"];
15313 [label="_considerTypeConstraints 794192"];
15314 [label="_considerCallingConvention 794193"];
15315 [label="_considerRefKindDifferences 794194"];
15316 [label="_typeComparison 794195"];
15317 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794196"];
15318 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794197"];
15319 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794198"];
15320 [label="ExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794199"];
15321 [label="true 794200"];
15322 [label="considerName: true 794201"];
15323 [label="true 794202"];
15324 [label="considerExplicitlyImplementedInterfaces: true 794203"];
15325 [label="true 794204"];
15326 [label="considerReturnType: true 794205"];
15327 [label="false 794206"];
15328 [label="considerTypeConstraints: false 794207"];
15329 [label="true 794208"];
15330 [label="considerCallingConvention: true 794209"];
15331 [label="true 794210"];
15332 [label="considerRefKindDifferences: true 794211"];
15333 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794212"];
15334 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794213"];
15335 [label="param MemberSignatureComparer(bool considerName) 794214"];
15336 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794215"];
15337 [label="param MemberSignatureComparer(bool considerReturnType) 794216"];
15338 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794217"];
15339 [label="param MemberSignatureComparer(bool considerCallingConvention) 794218"];
15340 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794219"];
15341 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794220"];
15342 [label="param MemberSignatureComparer(this) 794221"];
15343 [label="_considerName 794222"];
15344 [label="_considerExplicitlyImplementedInterfaces 794223"];
15345 [label="_considerReturnType 794224"];
15346 [label="_considerTypeConstraints 794225"];
15347 [label="_considerCallingConvention 794226"];
15348 [label="_considerRefKindDifferences 794227"];
15349 [label="_typeComparison 794228"];
15350 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794229"];
15351 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794230"];
15352 [label="_considerName 794231"];
15353 [label="_considerExplicitlyImplementedInterfaces 794232"];
15354 [label="_considerReturnType 794233"];
15355 [label="_considerTypeConstraints 794234"];
15356 [label="_considerCallingConvention 794235"];
15357 [label="_considerRefKindDifferences 794236"];
15358 [label="_typeComparison 794237"];
15359 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794238"];
15360 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794239"];
15361 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794240"];
15362 [label="CSharpImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794241"];
15363 [label="true 794242"];
15364 [label="considerName: true 794243"];
15365 [label="true 794244"];
15366 [label="considerExplicitlyImplementedInterfaces: true 794245"];
15367 [label="false 794246"];
15368 [label="considerReturnType: false 794247"];
15369 [label="false 794248"];
15370 [label="considerTypeConstraints: false 794249"];
15371 [label="false 794250"];
15372 [label="considerCallingConvention: false 794251"];
15373 [label="true 794252"];
15374 [label="considerRefKindDifferences: true 794253"];
15375 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794254"];
15376 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794255"];
15377 [label="param MemberSignatureComparer(bool considerName) 794256"];
15378 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794257"];
15379 [label="param MemberSignatureComparer(bool considerReturnType) 794258"];
15380 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794259"];
15381 [label="param MemberSignatureComparer(bool considerCallingConvention) 794260"];
15382 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794261"];
15383 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794262"];
15384 [label="param MemberSignatureComparer(this) 794263"];
15385 [label="_considerName 794264"];
15386 [label="_considerExplicitlyImplementedInterfaces 794265"];
15387 [label="_considerReturnType 794266"];
15388 [label="_considerTypeConstraints 794267"];
15389 [label="_considerCallingConvention 794268"];
15390 [label="_considerRefKindDifferences 794269"];
15391 [label="_typeComparison 794270"];
15392 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794271"];
15393 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794272"];
15394 [label="_considerName 794273"];
15395 [label="_considerExplicitlyImplementedInterfaces 794274"];
15396 [label="_considerReturnType 794275"];
15397 [label="_considerTypeConstraints 794276"];
15398 [label="_considerCallingConvention 794277"];
15399 [label="_considerRefKindDifferences 794278"];
15400 [label="_typeComparison 794279"];
15401 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794280"];
15402 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794281"];
15403 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794282"];
15404 [label="CSharpCloseImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794283"];
15405 [label="true 794284"];
15406 [label="considerName: true 794285"];
15407 [label="true 794286"];
15408 [label="considerExplicitlyImplementedInterfaces: true 794287"];
15409 [label="false 794288"];
15410 [label="considerReturnType: false 794289"];
15411 [label="false 794290"];
15412 [label="considerTypeConstraints: false 794291"];
15413 [label="false 794292"];
15414 [label="considerCallingConvention: false 794293"];
15415 [label="false 794294"];
15416 [label="considerRefKindDifferences: false 794295"];
15417 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794296"];
15418 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794297"];
15419 [label="param MemberSignatureComparer(bool considerName) 794298"];
15420 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794299"];
15421 [label="param MemberSignatureComparer(bool considerReturnType) 794300"];
15422 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794301"];
15423 [label="param MemberSignatureComparer(bool considerCallingConvention) 794302"];
15424 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794303"];
15425 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794304"];
15426 [label="param MemberSignatureComparer(this) 794305"];
15427 [label="_considerName 794306"];
15428 [label="_considerExplicitlyImplementedInterfaces 794307"];
15429 [label="_considerReturnType 794308"];
15430 [label="_considerTypeConstraints 794309"];
15431 [label="_considerCallingConvention 794310"];
15432 [label="_considerRefKindDifferences 794311"];
15433 [label="_typeComparison 794312"];
15434 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794313"];
15435 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794314"];
15436 [label="_considerName 794315"];
15437 [label="_considerExplicitlyImplementedInterfaces 794316"];
15438 [label="_considerReturnType 794317"];
15439 [label="_considerTypeConstraints 794318"];
15440 [label="_considerCallingConvention 794319"];
15441 [label="_considerRefKindDifferences 794320"];
15442 [label="_typeComparison 794321"];
15443 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794322"];
15444 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794323"];
15445 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794324"];
15446 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 794325"];
15447 [label="_typeComparison 794326"];
15448 [label="DuplicateSourceComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794327"];
15449 [label="true 794328"];
15450 [label="considerName: true 794329"];
15451 [label="true 794330"];
15452 [label="considerExplicitlyImplementedInterfaces: true 794331"];
15453 [label="false 794332"];
15454 [label="considerReturnType: false 794333"];
15455 [label="false 794334"];
15456 [label="considerTypeConstraints: false 794335"];
15457 [label="false 794336"];
15458 [label="considerCallingConvention: false 794337"];
15459 [label="true 794338"];
15460 [label="considerRefKindDifferences: true 794339"];
15461 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794340"];
15462 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794341"];
15463 [label="param MemberSignatureComparer(bool considerName) 794342"];
15464 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794343"];
15465 [label="param MemberSignatureComparer(bool considerReturnType) 794344"];
15466 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794345"];
15467 [label="param MemberSignatureComparer(bool considerCallingConvention) 794346"];
15468 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794347"];
15469 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794348"];
15470 [label="param MemberSignatureComparer(this) 794349"];
15471 [label="_considerName 794350"];
15472 [label="_considerExplicitlyImplementedInterfaces 794351"];
15473 [label="_considerReturnType 794352"];
15474 [label="_considerTypeConstraints 794353"];
15475 [label="_considerCallingConvention 794354"];
15476 [label="_considerRefKindDifferences 794355"];
15477 [label="_typeComparison 794356"];
15478 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794357"];
15479 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794358"];
15480 [label="_considerName 794359"];
15481 [label="_considerExplicitlyImplementedInterfaces 794360"];
15482 [label="_considerReturnType 794361"];
15483 [label="_considerTypeConstraints 794362"];
15484 [label="_considerCallingConvention 794363"];
15485 [label="_considerRefKindDifferences 794364"];
15486 [label="_typeComparison 794365"];
15487 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794366"];
15488 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794367"];
15489 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794368"];
15490 [label="RecordAPISignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794369"];
15491 [label="true 794370"];
15492 [label="considerName: true 794371"];
15493 [label="true 794372"];
15494 [label="considerExplicitlyImplementedInterfaces: true 794373"];
15495 [label="false 794374"];
15496 [label="considerReturnType: false 794375"];
15497 [label="false 794376"];
15498 [label="considerTypeConstraints: false 794377"];
15499 [label="false 794378"];
15500 [label="considerCallingConvention: false 794379"];
15501 [label="true 794380"];
15502 [label="considerRefKindDifferences: true 794381"];
15503 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794382"];
15504 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794383"];
15505 [label="param MemberSignatureComparer(bool considerName) 794384"];
15506 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794385"];
15507 [label="param MemberSignatureComparer(bool considerReturnType) 794386"];
15508 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794387"];
15509 [label="param MemberSignatureComparer(bool considerCallingConvention) 794388"];
15510 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794389"];
15511 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794390"];
15512 [label="param MemberSignatureComparer(this) 794391"];
15513 [label="_considerName 794392"];
15514 [label="_considerExplicitlyImplementedInterfaces 794393"];
15515 [label="_considerReturnType 794394"];
15516 [label="_considerTypeConstraints 794395"];
15517 [label="_considerCallingConvention 794396"];
15518 [label="_considerRefKindDifferences 794397"];
15519 [label="_typeComparison 794398"];
15520 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794399"];
15521 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794400"];
15522 [label="_considerName 794401"];
15523 [label="_considerExplicitlyImplementedInterfaces 794402"];
15524 [label="_considerReturnType 794403"];
15525 [label="_considerTypeConstraints 794404"];
15526 [label="_considerCallingConvention 794405"];
15527 [label="_considerRefKindDifferences 794406"];
15528 [label="_typeComparison 794407"];
15529 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794408"];
15530 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794409"];
15531 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794410"];
15532 [label="PartialMethodsComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794411"];
15533 [label="true 794412"];
15534 [label="considerName: true 794413"];
15535 [label="false 794414"];
15536 [label="considerExplicitlyImplementedInterfaces: false 794415"];
15537 [label="false 794416"];
15538 [label="considerReturnType: false 794417"];
15539 [label="false 794418"];
15540 [label="considerTypeConstraints: false 794419"];
15541 [label="false 794420"];
15542 [label="considerCallingConvention: false 794421"];
15543 [label="true 794422"];
15544 [label="considerRefKindDifferences: true 794423"];
15545 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794424"];
15546 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794425"];
15547 [label="param MemberSignatureComparer(bool considerName) 794426"];
15548 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794427"];
15549 [label="param MemberSignatureComparer(bool considerReturnType) 794428"];
15550 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794429"];
15551 [label="param MemberSignatureComparer(bool considerCallingConvention) 794430"];
15552 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794431"];
15553 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794432"];
15554 [label="param MemberSignatureComparer(this) 794433"];
15555 [label="_considerName 794434"];
15556 [label="_considerExplicitlyImplementedInterfaces 794435"];
15557 [label="_considerReturnType 794436"];
15558 [label="_considerTypeConstraints 794437"];
15559 [label="_considerCallingConvention 794438"];
15560 [label="_considerRefKindDifferences 794439"];
15561 [label="_typeComparison 794440"];
15562 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794441"];
15563 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794442"];
15564 [label="_considerName 794443"];
15565 [label="_considerExplicitlyImplementedInterfaces 794444"];
15566 [label="_considerReturnType 794445"];
15567 [label="_considerTypeConstraints 794446"];
15568 [label="_considerCallingConvention 794447"];
15569 [label="_considerRefKindDifferences 794448"];
15570 [label="_typeComparison 794449"];
15571 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794450"];
15572 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794451"];
15573 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794452"];
15574 [label="CSharpOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794453"];
15575 [label="true 794454"];
15576 [label="considerName: true 794455"];
15577 [label="false 794456"];
15578 [label="considerExplicitlyImplementedInterfaces: false 794457"];
15579 [label="true 794458"];
15580 [label="considerReturnType: true 794459"];
15581 [label="false 794460"];
15582 [label="considerTypeConstraints: false 794461"];
15583 [label="false 794462"];
15584 [label="considerCallingConvention: false 794463"];
15585 [label="false 794464"];
15586 [label="considerRefKindDifferences: false 794465"];
15587 [label="TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 794466"];
15588 [label="typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 794467"];
15589 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 794468"];
15590 [label="param MemberSignatureComparer(bool considerName) 794469"];
15591 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794470"];
15592 [label="param MemberSignatureComparer(bool considerReturnType) 794471"];
15593 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794472"];
15594 [label="param MemberSignatureComparer(bool considerCallingConvention) 794473"];
15595 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794474"];
15596 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794475"];
15597 [label="param MemberSignatureComparer(this) 794476"];
15598 [label="_considerName 794477"];
15599 [label="_considerExplicitlyImplementedInterfaces 794478"];
15600 [label="_considerReturnType 794479"];
15601 [label="_considerTypeConstraints 794480"];
15602 [label="_considerCallingConvention 794481"];
15603 [label="_considerRefKindDifferences 794482"];
15604 [label="_typeComparison 794483"];
15605 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794484"];
15606 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794485"];
15607 [label="_considerName 794486"];
15608 [label="_considerExplicitlyImplementedInterfaces 794487"];
15609 [label="_considerReturnType 794488"];
15610 [label="_considerTypeConstraints 794489"];
15611 [label="_considerCallingConvention 794490"];
15612 [label="_considerRefKindDifferences 794491"];
15613 [label="_typeComparison 794492"];
15614 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794493"];
15615 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794494"];
15616 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794495"];
15617 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 794496"];
15618 [label="_typeComparison 794497"];
15619 [label="CSharpWithTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 794498"];
15620 [label="true 794499"];
15621 [label="considerName: true 794500"];
15622 [label="false 794501"];
15623 [label="considerExplicitlyImplementedInterfaces: false 794502"];
15624 [label="true 794503"];
15625 [label="considerReturnType: true 794504"];
15626 [label="false 794505"];
15627 [label="considerTypeConstraints: false 794506"];
15628 [label="false 794507"];
15629 [label="considerCallingConvention: false 794508"];
15630 [label="false 794509"];
15631 [label="considerRefKindDifferences: false 794510"];
15632 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794511"];
15633 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794512"];
15634 [label="param MemberSignatureComparer(bool considerName) 794513"];
15635 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794514"];
15636 [label="param MemberSignatureComparer(bool considerReturnType) 794515"];
15637 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794516"];
15638 [label="param MemberSignatureComparer(bool considerCallingConvention) 794517"];
15639 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794518"];
15640 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794519"];
15641 [label="param MemberSignatureComparer(this) 794520"];
15642 [label="_considerName 794521"];
15643 [label="_considerExplicitlyImplementedInterfaces 794522"];
15644 [label="_considerReturnType 794523"];
15645 [label="_considerTypeConstraints 794524"];
15646 [label="_considerCallingConvention 794525"];
15647 [label="_considerRefKindDifferences 794526"];
15648 [label="_typeComparison 794527"];
15649 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794528"];
15650 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794529"];
15651 [label="_considerName 794530"];
15652 [label="_considerExplicitlyImplementedInterfaces 794531"];
15653 [label="_considerReturnType 794532"];
15654 [label="_considerTypeConstraints 794533"];
15655 [label="_considerCallingConvention 794534"];
15656 [label="_considerRefKindDifferences 794535"];
15657 [label="_typeComparison 794536"];
15658 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794537"];
15659 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794538"];
15660 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794539"];
15661 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 794540"];
15662 [label="_typeComparison 794541"];
15663 [label="CSharpWithoutTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794542"];
15664 [label="false 794543"];
15665 [label="considerName: false 794544"];
15666 [label="false 794545"];
15667 [label="considerExplicitlyImplementedInterfaces: false 794546"];
15668 [label="false 794547"];
15669 [label="considerReturnType: false 794548"];
15670 [label="false 794549"];
15671 [label="considerTypeConstraints: false 794550"];
15672 [label="false 794551"];
15673 [label="considerCallingConvention: false 794552"];
15674 [label="true 794553"];
15675 [label="considerRefKindDifferences: true 794554"];
15676 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 794555"];
15677 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794556"];
15678 [label="param MemberSignatureComparer(bool considerName) 794557"];
15679 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794558"];
15680 [label="param MemberSignatureComparer(bool considerReturnType) 794559"];
15681 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794560"];
15682 [label="param MemberSignatureComparer(bool considerCallingConvention) 794561"];
15683 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794562"];
15684 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794563"];
15685 [label="param MemberSignatureComparer(this) 794564"];
15686 [label="_considerName 794565"];
15687 [label="_considerExplicitlyImplementedInterfaces 794566"];
15688 [label="_considerReturnType 794567"];
15689 [label="_considerTypeConstraints 794568"];
15690 [label="_considerCallingConvention 794569"];
15691 [label="_considerRefKindDifferences 794570"];
15692 [label="_typeComparison 794571"];
15693 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794572"];
15694 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794573"];
15695 [label="_considerName 794574"];
15696 [label="_considerExplicitlyImplementedInterfaces 794575"];
15697 [label="_considerReturnType 794576"];
15698 [label="_considerTypeConstraints 794577"];
15699 [label="_considerCallingConvention 794578"];
15700 [label="_considerRefKindDifferences 794579"];
15701 [label="_typeComparison 794580"];
15702 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794581"];
15703 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794582"];
15704 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794583"];
15705 [label="CSharpAccessorOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 794584"];
15706 [label="true 794585"];
15707 [label="considerName: true 794586"];
15708 [label="false 794587"];
15709 [label="considerExplicitlyImplementedInterfaces: false 794588"];
15710 [label="true 794589"];
15711 [label="considerReturnType: true 794590"];
15712 [label="false 794591"];
15713 [label="considerTypeConstraints: false 794592"];
15714 [label="false 794593"];
15715 [label="considerCallingConvention: false 794594"];
15716 [label="true 794595"];
15717 [label="considerRefKindDifferences: true 794596"];
15718 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794597"];
15719 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794598"];
15720 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794599"];
15721 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794600"];
15722 [label="param MemberSignatureComparer(bool considerName) 794601"];
15723 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794602"];
15724 [label="param MemberSignatureComparer(bool considerReturnType) 794603"];
15725 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794604"];
15726 [label="param MemberSignatureComparer(bool considerCallingConvention) 794605"];
15727 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794606"];
15728 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794607"];
15729 [label="param MemberSignatureComparer(this) 794608"];
15730 [label="_considerName 794609"];
15731 [label="_considerExplicitlyImplementedInterfaces 794610"];
15732 [label="_considerReturnType 794611"];
15733 [label="_considerTypeConstraints 794612"];
15734 [label="_considerCallingConvention 794613"];
15735 [label="_considerRefKindDifferences 794614"];
15736 [label="_typeComparison 794615"];
15737 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794616"];
15738 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794617"];
15739 [label="_considerName 794618"];
15740 [label="_considerExplicitlyImplementedInterfaces 794619"];
15741 [label="_considerReturnType 794620"];
15742 [label="_considerTypeConstraints 794621"];
15743 [label="_considerCallingConvention 794622"];
15744 [label="_considerRefKindDifferences 794623"];
15745 [label="_typeComparison 794624"];
15746 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794625"];
15747 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794626"];
15748 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794627"];
15749 [label="CSharpCustomModifierOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794628"];
15750 [label="false 794629"];
15751 [label="considerName: false 794630"];
15752 [label="false 794631"];
15753 [label="considerExplicitlyImplementedInterfaces: false 794632"];
15754 [label="false 794633"];
15755 [label="considerReturnType: false 794634"];
15756 [label="false 794635"];
15757 [label="considerTypeConstraints: false 794636"];
15758 [label="false 794637"];
15759 [label="considerCallingConvention: false 794638"];
15760 [label="false 794639"];
15761 [label="considerRefKindDifferences: false 794640"];
15762 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794641"];
15763 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 794642"];
15764 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 794643"];
15765 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 794644"];
15766 [label="param MemberSignatureComparer(bool considerName) 794645"];
15767 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794646"];
15768 [label="param MemberSignatureComparer(bool considerReturnType) 794647"];
15769 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794648"];
15770 [label="param MemberSignatureComparer(bool considerCallingConvention) 794649"];
15771 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794650"];
15772 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794651"];
15773 [label="param MemberSignatureComparer(this) 794652"];
15774 [label="_considerName 794653"];
15775 [label="_considerExplicitlyImplementedInterfaces 794654"];
15776 [label="_considerReturnType 794655"];
15777 [label="_considerTypeConstraints 794656"];
15778 [label="_considerCallingConvention 794657"];
15779 [label="_considerRefKindDifferences 794658"];
15780 [label="_typeComparison 794659"];
15781 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794660"];
15782 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794661"];
15783 [label="_considerName 794662"];
15784 [label="_considerExplicitlyImplementedInterfaces 794663"];
15785 [label="_considerReturnType 794664"];
15786 [label="_considerTypeConstraints 794665"];
15787 [label="_considerCallingConvention 794666"];
15788 [label="_considerRefKindDifferences 794667"];
15789 [label="_typeComparison 794668"];
15790 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794669"];
15791 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794670"];
15792 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794671"];
15793 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 794672"];
15794 [label="_typeComparison 794673"];
15795 [label="SloppyOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 794674"];
15796 [label="true 794675"];
15797 [label="considerName: true 794676"];
15798 [label="false 794677"];
15799 [label="considerExplicitlyImplementedInterfaces: false 794678"];
15800 [label="true 794679"];
15801 [label="considerReturnType: true 794680"];
15802 [label="false 794681"];
15803 [label="considerTypeConstraints: false 794682"];
15804 [label="true 794683"];
15805 [label="considerCallingConvention: true 794684"];
15806 [label="false 794685"];
15807 [label="considerRefKindDifferences: false 794686"];
15808 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794687"];
15809 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794688"];
15810 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794689"];
15811 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794690"];
15812 [label="param MemberSignatureComparer(bool considerName) 794691"];
15813 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794692"];
15814 [label="param MemberSignatureComparer(bool considerReturnType) 794693"];
15815 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794694"];
15816 [label="param MemberSignatureComparer(bool considerCallingConvention) 794695"];
15817 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794696"];
15818 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794697"];
15819 [label="param MemberSignatureComparer(this) 794698"];
15820 [label="_considerName 794699"];
15821 [label="_considerExplicitlyImplementedInterfaces 794700"];
15822 [label="_considerReturnType 794701"];
15823 [label="_considerTypeConstraints 794702"];
15824 [label="_considerCallingConvention 794703"];
15825 [label="_considerRefKindDifferences 794704"];
15826 [label="_typeComparison 794705"];
15827 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794706"];
15828 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794707"];
15829 [label="_considerName 794708"];
15830 [label="_considerExplicitlyImplementedInterfaces 794709"];
15831 [label="_considerReturnType 794710"];
15832 [label="_considerTypeConstraints 794711"];
15833 [label="_considerCallingConvention 794712"];
15834 [label="_considerRefKindDifferences 794713"];
15835 [label="_typeComparison 794714"];
15836 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794715"];
15837 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794716"];
15838 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794717"];
15839 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 794718"];
15840 [label="_typeComparison 794719"];
15841 [label="RuntimeSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794720"];
15842 [label="true 794721"];
15843 [label="considerName: true 794722"];
15844 [label="false 794723"];
15845 [label="considerExplicitlyImplementedInterfaces: false 794724"];
15846 [label="true 794725"];
15847 [label="considerReturnType: true 794726"];
15848 [label="false 794727"];
15849 [label="considerTypeConstraints: false 794728"];
15850 [label="true 794729"];
15851 [label="considerCallingConvention: true 794730"];
15852 [label="true 794731"];
15853 [label="considerRefKindDifferences: true 794732"];
15854 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794733"];
15855 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794734"];
15856 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794735"];
15857 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794736"];
15858 [label="param MemberSignatureComparer(bool considerName) 794737"];
15859 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794738"];
15860 [label="param MemberSignatureComparer(bool considerReturnType) 794739"];
15861 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794740"];
15862 [label="param MemberSignatureComparer(bool considerCallingConvention) 794741"];
15863 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794742"];
15864 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794743"];
15865 [label="param MemberSignatureComparer(this) 794744"];
15866 [label="_considerName 794745"];
15867 [label="_considerExplicitlyImplementedInterfaces 794746"];
15868 [label="_considerReturnType 794747"];
15869 [label="_considerTypeConstraints 794748"];
15870 [label="_considerCallingConvention 794749"];
15871 [label="_considerRefKindDifferences 794750"];
15872 [label="_typeComparison 794751"];
15873 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794752"];
15874 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794753"];
15875 [label="_considerName 794754"];
15876 [label="_considerExplicitlyImplementedInterfaces 794755"];
15877 [label="_considerReturnType 794756"];
15878 [label="_considerTypeConstraints 794757"];
15879 [label="_considerCallingConvention 794758"];
15880 [label="_considerRefKindDifferences 794759"];
15881 [label="_typeComparison 794760"];
15882 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794761"];
15883 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794762"];
15884 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794763"];
15885 [label="RuntimePlusRefOutSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794764"];
15886 [label="true 794765"];
15887 [label="considerName: true 794766"];
15888 [label="true 794767"];
15889 [label="considerExplicitlyImplementedInterfaces: true 794768"];
15890 [label="true 794769"];
15891 [label="considerReturnType: true 794770"];
15892 [label="false 794771"];
15893 [label="considerTypeConstraints: false 794772"];
15894 [label="true 794773"];
15895 [label="considerCallingConvention: true 794774"];
15896 [label="false 794775"];
15897 [label="considerRefKindDifferences: false 794776"];
15898 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794777"];
15899 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794778"];
15900 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794779"];
15901 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794780"];
15902 [label="param MemberSignatureComparer(bool considerName) 794781"];
15903 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794782"];
15904 [label="param MemberSignatureComparer(bool considerReturnType) 794783"];
15905 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794784"];
15906 [label="param MemberSignatureComparer(bool considerCallingConvention) 794785"];
15907 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794786"];
15908 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794787"];
15909 [label="param MemberSignatureComparer(this) 794788"];
15910 [label="_considerName 794789"];
15911 [label="_considerExplicitlyImplementedInterfaces 794790"];
15912 [label="_considerReturnType 794791"];
15913 [label="_considerTypeConstraints 794792"];
15914 [label="_considerCallingConvention 794793"];
15915 [label="_considerRefKindDifferences 794794"];
15916 [label="_typeComparison 794795"];
15917 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794796"];
15918 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794797"];
15919 [label="_considerName 794798"];
15920 [label="_considerExplicitlyImplementedInterfaces 794799"];
15921 [label="_considerReturnType 794800"];
15922 [label="_considerTypeConstraints 794801"];
15923 [label="_considerCallingConvention 794802"];
15924 [label="_considerRefKindDifferences 794803"];
15925 [label="_typeComparison 794804"];
15926 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794805"];
15927 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794806"];
15928 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794807"];
15929 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 794808"];
15930 [label="_typeComparison 794809"];
15931 [label="RuntimeImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794810"];
15932 [label="true 794811"];
15933 [label="considerName: true 794812"];
15934 [label="true 794813"];
15935 [label="considerExplicitlyImplementedInterfaces: true 794814"];
15936 [label="true 794815"];
15937 [label="considerReturnType: true 794816"];
15938 [label="true 794817"];
15939 [label="considerTypeConstraints: true 794818"];
15940 [label="true 794819"];
15941 [label="considerCallingConvention: true 794820"];
15942 [label="true 794821"];
15943 [label="considerRefKindDifferences: true 794822"];
15944 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794823"];
15945 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794824"];
15946 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794825"];
15947 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794826"];
15948 [label="param MemberSignatureComparer(bool considerName) 794827"];
15949 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794828"];
15950 [label="param MemberSignatureComparer(bool considerReturnType) 794829"];
15951 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794830"];
15952 [label="param MemberSignatureComparer(bool considerCallingConvention) 794831"];
15953 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794832"];
15954 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794833"];
15955 [label="param MemberSignatureComparer(this) 794834"];
15956 [label="_considerName 794835"];
15957 [label="_considerExplicitlyImplementedInterfaces 794836"];
15958 [label="_considerReturnType 794837"];
15959 [label="_considerTypeConstraints 794838"];
15960 [label="_considerCallingConvention 794839"];
15961 [label="_considerRefKindDifferences 794840"];
15962 [label="_typeComparison 794841"];
15963 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794842"];
15964 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794843"];
15965 [label="_considerName 794844"];
15966 [label="_considerExplicitlyImplementedInterfaces 794845"];
15967 [label="_considerReturnType 794846"];
15968 [label="_considerTypeConstraints 794847"];
15969 [label="_considerCallingConvention 794848"];
15970 [label="_considerRefKindDifferences 794849"];
15971 [label="_typeComparison 794850"];
15972 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794851"];
15973 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794852"];
15974 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794853"];
15975 [label="CSharpSignatureAndConstraintsAndReturnTypeComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794854"];
15976 [label="true 794855"];
15977 [label="considerName: true 794856"];
15978 [label="false 794857"];
15979 [label="considerExplicitlyImplementedInterfaces: false 794858"];
15980 [label="true 794859"];
15981 [label="considerReturnType: true 794860"];
15982 [label="false 794861"];
15983 [label="considerTypeConstraints: false 794862"];
15984 [label="true 794863"];
15985 [label="considerCallingConvention: true 794864"];
15986 [label="true 794865"];
15987 [label="considerRefKindDifferences: true 794866"];
15988 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794867"];
15989 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794868"];
15990 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 794869"];
15991 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794870"];
15992 [label="param MemberSignatureComparer(bool considerName) 794871"];
15993 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794872"];
15994 [label="param MemberSignatureComparer(bool considerReturnType) 794873"];
15995 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794874"];
15996 [label="param MemberSignatureComparer(bool considerCallingConvention) 794875"];
15997 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794876"];
15998 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794877"];
15999 [label="param MemberSignatureComparer(this) 794878"];
16000 [label="_considerName 794879"];
16001 [label="_considerExplicitlyImplementedInterfaces 794880"];
16002 [label="_considerReturnType 794881"];
16003 [label="_considerTypeConstraints 794882"];
16004 [label="_considerCallingConvention 794883"];
16005 [label="_considerRefKindDifferences 794884"];
16006 [label="_typeComparison 794885"];
16007 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794886"];
16008 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794887"];
16009 [label="_considerName 794888"];
16010 [label="_considerExplicitlyImplementedInterfaces 794889"];
16011 [label="_considerReturnType 794890"];
16012 [label="_considerTypeConstraints 794891"];
16013 [label="_considerCallingConvention 794892"];
16014 [label="_considerRefKindDifferences 794893"];
16015 [label="_typeComparison 794894"];
16016 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794895"];
16017 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794896"];
16018 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794897"];
16019 [label="RetargetedExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 794898"];
16020 [label="false 794899"];
16021 [label="considerName: false 794900"];
16022 [label="false 794901"];
16023 [label="considerExplicitlyImplementedInterfaces: false 794902"];
16024 [label="false 794903"];
16025 [label="considerReturnType: false 794904"];
16026 [label="false 794905"];
16027 [label="considerTypeConstraints: false 794906"];
16028 [label="false 794907"];
16029 [label="considerCallingConvention: false 794908"];
16030 [label="true 794909"];
16031 [label="considerRefKindDifferences: true 794910"];
16032 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 794911"];
16033 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 794912"];
16034 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 794913"];
16035 [label="new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 794914"];
16036 [label="param MemberSignatureComparer(bool considerName) 794915"];
16037 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 794916"];
16038 [label="param MemberSignatureComparer(bool considerReturnType) 794917"];
16039 [label="param MemberSignatureComparer(bool considerTypeConstraints) 794918"];
16040 [label="param MemberSignatureComparer(bool considerCallingConvention) 794919"];
16041 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 794920"];
16042 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 794921"];
16043 [label="param MemberSignatureComparer(this) 794922"];
16044 [label="_considerName 794923"];
16045 [label="_considerExplicitlyImplementedInterfaces 794924"];
16046 [label="_considerReturnType 794925"];
16047 [label="_considerTypeConstraints 794926"];
16048 [label="_considerCallingConvention 794927"];
16049 [label="_considerRefKindDifferences 794928"];
16050 [label="_typeComparison 794929"];
16051 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794930"];
16052 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 794931"];
16053 [label="_considerName 794932"];
16054 [label="_considerExplicitlyImplementedInterfaces 794933"];
16055 [label="_considerReturnType 794934"];
16056 [label="_considerTypeConstraints 794935"];
16057 [label="_considerCallingConvention 794936"];
16058 [label="_considerRefKindDifferences 794937"];
16059 [label="_typeComparison 794938"];
16060 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794939"];
16061 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 794940"];
16062 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 794941"];
16063 [label="CrefComparer = new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 794942"];
16064 [label="MemberSignatureComparer.RecordAPISignatureComparer 794943"];
16065 [label="PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 794944"];
16066 [label="s_duplicateRecordMemberSignatureDictionary =\n            PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 794945"];
16067 [label="EmptyComparer.Instance 794946"];
16068 [label="new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 794947"];
16069 [label="s_emptyTypeMembers = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 794948"];
16070 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 794949"];
16071 [label="ReportBadReturn =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 794950"];
16072 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 794951"];
16073 [label="ReportBadParameter =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 794952"];
16074 [label="containingSymbol 794953"];
16075 [label="declaration 794954"];
16076 [label="diagnostics 794955"];
16077 [label="tupleData 794956"];
16078 [label="param SourceNamedTypeSymbol(this) 794957"];
16079 [label="param SourceMemberContainerTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 794958"];
16080 [label="param SourceMemberContainerTypeSymbol(MergedTypeDeclaration declaration) 794959"];
16081 [label="param SourceMemberContainerTypeSymbol(DiagnosticBag diagnostics) 794960"];
16082 [label="param SourceMemberContainerTypeSymbol(TupleExtraData? tupleData = null) 794961"];
16083 [label="param SourceMemberContainerTypeSymbol(this) 794962"];
16084 [label="tupleData 794963"];
16085 [label="param SourceMemberContainerTypeSymbol(this) 794964"];
16086 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 794965"];
16087 [label="_lazyTupleData 794966"];
16088 [label="_declModifiers 794967"];
16089 [label="_containingSymbol 794968"];
16090 [label="declaration 794969"];
16091 [label="new DeclaredMembersAndInitializers() 794970"];
16092 [label="param DeclaredMembersAndInitializers(this) 794971"];
16093 [label="HaveIndexers 794972"];
16094 [label="RecordDeclarationWithParameters 794973"];
16095 [label="RecordPrimaryConstructor 794974"];
16096 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 794975"];
16097 [label="IsNullableEnabledForInstanceConstructorsAndFields 794976"];
16098 [label="IsNullableEnabledForStaticConstructorsAndFields 794977"];
16099 [label="UninitializedSentinel = new DeclaredMembersAndInitializers() 794978"];
16100 [label="_lazyDeclaredMembersAndInitializers = DeclaredMembersAndInitializers.UninitializedSentinel 794979"];
16101 [label="_lazyMembersAndInitializers 794980"];
16102 [label="_lazyMembersDictionary 794981"];
16103 [label="_lazyEarlyAttributeDecodingMembersDictionary 794982"];
16104 [label="_lazyTypeMembers 794983"];
16105 [label="_lazyKnownCircularStruct 794984"];
16106 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 794985"];
16107 [label="_lazyContainsExtensionMethods 794986"];
16108 [label="_lazyAnyMemberHasAttributes 794987"];
16109 [label="_containingSymbol 794988"];
16110 [label="this.declaration 794989"];
16111 [label="declaration.Kind 794990"];
16112 [label="get\n            {\n                return this.Declarations[0].Kind;\n            } 794991"];
16113 [label="TypeKind typeKind = declaration.Kind.ToTypeKind(); 794992"];
16114 [label="declaration.Kind.ToTypeKind() 794993"];
16115 [label="param ToTypeKind(this DeclarationKind kind) 794994"];
16116 [label="switch (kind)\n            {\n                case DeclarationKind.Class:\n                case DeclarationKind.Script:\n                case DeclarationKind.ImplicitClass:\n                case DeclarationKind.SimpleProgram:\n                case DeclarationKind.Record:\n                    return TypeKind.Class;\n\n                case DeclarationKind.Submission:\n                    return TypeKind.Submission;\n\n                case DeclarationKind.Delegate:\n                    return TypeKind.Delegate;\n\n                case DeclarationKind.Enum:\n                    return TypeKind.Enum;\n\n                case DeclarationKind.Interface:\n                    return TypeKind.Interface;\n\n                case DeclarationKind.Struct:\n                    return TypeKind.Struct;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 794995"];
16117 [label="return TypeKind.Class; 794996"];
16118 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 794997"];
16119 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 794998"];
16120 [label="MakeModifiers(typeKind, diagnostics) 794999"];
16121 [label="param MakeModifiers(TypeKind typeKind) 795000"];
16122 [label="param MakeModifiers(DiagnosticBag diagnostics) 795001"];
16123 [label="param MakeModifiers(this) 795002"];
16124 [label="this.ContainingSymbol 795003"];
16125 [label="get\n            {\n                return _containingSymbol;\n            } 795004"];
16126 [label="return _containingSymbol; 795005"];
16127 [label="Symbol containingSymbol = this.ContainingSymbol; 795006"];
16128 [label="DeclarationModifiers defaultAccess; 795007"];
16129 [label="var allowedModifiers = DeclarationModifiers.AccessibilityMask; 795008"];
16130 [label="containingSymbol.Kind 795009"];
16131 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 795010"];
16132 [label="if (containingSymbol.Kind == SymbolKind.Namespace)\n            {\n                defaultAccess = DeclarationModifiers.Internal;\n            }\n            else\n            {\n                allowedModifiers |= DeclarationModifiers.New;\n\n                if (((NamedTypeSymbol)containingSymbol).IsInterface)\n                {\n                    defaultAccess = DeclarationModifiers.Public;\n                }\n                else\n                {\n                    defaultAccess = DeclarationModifiers.Private;\n                }\n            } 795011"];
16133 [label="defaultAccess = DeclarationModifiers.Internal; 795012"];
16134 [label="switch (typeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Submission:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe;\n\n                    if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    }\n\n                    break;\n                case TypeKind.Struct:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Interface:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Delegate:\n                    allowedModifiers |= DeclarationModifiers.Unsafe;\n                    break;\n            } 795013"];
16135 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe; 795014"];
16136 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe; 795015"];
16137 [label="this.IsRecord 795016"];
16138 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.Record;\n            } 795017"];
16139 [label="this.declaration.Declarations 795018"];
16140 [label="get\n            {\n                return _declarations;\n            } 795019"];
16141 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 795020"];
16142 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 795021"];
16143 [label="this.declaration.Declarations[0].Kind 795022"];
16144 [label="get\n            {\n                return _kind;\n            } 795023"];
16145 [label="if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    } 795024"];
16146 [label="allowedModifiers |= DeclarationModifiers.Static; 795025"];
16147 [label="bool modifierErrors; 795026"];
16148 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 795027"];
16149 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 795028"];
16150 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 795029"];
16151 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 795030"];
16152 [label="MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors) 795031"];
16153 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers defaultAccess) 795032"];
16154 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers allowedModifiers) 795033"];
16155 [label="param MakeAndCheckTypeModifiers(DiagnosticBag diagnostics) 795034"];
16156 [label="param MakeAndCheckTypeModifiers(out bool modifierErrors) 795035"];
16157 [label="param MakeAndCheckTypeModifiers(this) 795036"];
16158 [label="modifierErrors = false; 795037"];
16159 [label="var result = DeclarationModifiers.Unset; 795038"];
16160 [label="declaration.Declarations 795039"];
16161 [label="get\n            {\n                return _declarations;\n            } 795040"];
16162 [label="return _declarations; 795041"];
16163 [label="var partCount = declaration.Declarations.Length; 795042"];
16164 [label="var missingPartial = false; 795043"];
16165 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 795044"];
16166 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 795045"];
16167 [label="declaration.Declarations 795046"];
16168 [label="var decl = declaration.Declarations[i]; 795047"];
16169 [label="decl.Modifiers 795048"];
16170 [label="get\n            {\n                return _modifiers;\n            } 795049"];
16171 [label="return _modifiers; 795050"];
16172 [label="var mods = decl.Modifiers; 795051"];
16173 [label="if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                } 795052"];
16174 [label="if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                } 795053"];
16175 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 795054"];
16176 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 795055"];
16177 [label="declaration.Declarations 795056"];
16178 [label="return _declarations; 795057"];
16179 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 795058"];
16180 [label="declaration.Declarations[i].NameLocation 795059"];
16181 [label="get\n            {\n                return _nameLocation;\n            } 795060"];
16182 [label="return _nameLocation; 795061"];
16183 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 795062"];
16184 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 795063"];
16185 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 795064"];
16186 [label="ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors) 795065"];
16187 [label="param CheckModifiers(DeclarationModifiers modifiers) 795066"];
16188 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 795067"];
16189 [label="param CheckModifiers(Location errorLocation) 795068"];
16190 [label="param CheckModifiers(DiagnosticBag diagnostics) 795069"];
16191 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 795070"];
16192 [label="param CheckModifiers(out bool modifierErrors) 795071"];
16193 [label="modifierErrors = false; 795072"];
16194 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 795073"];
16195 [label="DeclarationModifiers result = modifiers & allowedModifiers; 795074"];
16196 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 795075"];
16197 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 795076"];
16198 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 795077"];
16199 [label="return result; 795078"];
16200 [label="if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    } 795079"];
16201 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 795080"];
16202 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 795081"];
16203 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 795082"];
16204 [label="ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false) 795083"];
16205 [label="param CheckAccessibility(DeclarationModifiers modifiers) 795084"];
16206 [label="param CheckAccessibility(Symbol symbol) 795085"];
16207 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 795086"];
16208 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 795087"];
16209 [label="IsValidAccessibility(modifiers) 795088"];
16210 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 795089"];
16211 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 795090"];
16212 [label="return true; 795091"];
16213 [label="symbol.Kind 795092"];
16214 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 795093"];
16215 [label="return SymbolKind.NamedType; 795094"];
16216 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 795095"];
16217 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 795096"];
16218 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 795097"];
16219 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 795098"];
16220 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 795099"];
16221 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 795100"];
16222 [label="return null; 795101"];
16223 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 795102"];
16224 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 795103"];
16225 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 795104"];
16226 [label="if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                } 795105"];
16227 [label="result = mods; 795106"];
16228 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 795107"];
16229 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 795108"];
16230 [label="if (missingPartial)\n            {\n                if ((result & DeclarationModifiers.Partial) == 0)\n                {\n                    // duplicate definitions\n                    switch (this.ContainingSymbol.Kind)\n                    {\n                        case SymbolKind.Namespace:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, declaration.Declarations[i].NameLocation, this.Name, this.ContainingSymbol);\n                                modifierErrors = true;\n                            }\n                            break;\n\n                        case SymbolKind.NamedType:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                if (ContainingType!.Locations.Length == 1 || ContainingType.IsPartial())\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, declaration.Declarations[i].NameLocation, this.ContainingSymbol, this.Name);\n                                modifierErrors = true;\n                            }\n                            break;\n                    }\n                }\n                else\n                {\n                    for (var i = 0; i < partCount; i++)\n                    {\n                        var singleDeclaration = declaration.Declarations[i];\n                        var mods = singleDeclaration.Modifiers;\n                        if ((mods & DeclarationModifiers.Partial) == 0)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_MissingPartial, singleDeclaration.NameLocation, this.Name);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n            } 795109"];
16231 [label="this.Name 795110"];
16232 [label="get\n            {\n                return declaration.Name;\n            } 795111"];
16233 [label="declaration.Name 795112"];
16234 [label="get\n            {\n                return this.name;\n            } 795113"];
16235 [label="return this.name; 795114"];
16236 [label="return declaration.Name; 795115"];
16237 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 795116"];
16238 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 795117"];
16239 [label="SyntaxFacts.GetText(SyntaxKind.RecordKeyword) 795118"];
16240 [label="param GetText(SyntaxKind kind) 795119"];
16241 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 795120"];
16242 [label="return result; 795121"];
16243 [label="(type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 795122"];
16244 [label="s_hasInvalidTypeParameterFunc =\n            (type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 795123"];
16245 [label="this.CheckUnsafeModifier(mods, diagnostics); 795124"];
16246 [label="this.CheckUnsafeModifier(mods, diagnostics); 795125"];
16247 [label="this.CheckUnsafeModifier(mods, diagnostics); 795126"];
16248 [label="this.CheckUnsafeModifier(mods, diagnostics) 795127"];
16249 [label="param CheckUnsafeModifier(this Symbol symbol) 795128"];
16250 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 795129"];
16251 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 795130"];
16252 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 795131"];
16253 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 795132"];
16254 [label="symbol.Locations 795133"];
16255 [label="get\n            {\n                return declaration.NameLocations.Cast<SourceLocation, Location>();\n            } 795134"];
16256 [label="declaration.NameLocations 795135"];
16257 [label="get\n            {\n                if (Declarations.Length == 1)\n                {\n                    return ImmutableArray.Create(Declarations[0].NameLocation);\n                }\n                else\n                {\n                    var builder = ArrayBuilder<SourceLocation>.GetInstance();\n                    foreach (var decl in Declarations)\n                    {\n                        SourceLocation loc = decl.NameLocation;\n                        if (loc != null)\n                            builder.Add(loc);\n                    }\n                    return builder.ToImmutableAndFree();\n                }\n            } 795136"];
16258 [label="Declarations 795137"];
16259 [label="get\n            {\n                return _declarations;\n            } 795138"];
16260 [label="return _declarations; 795139"];
16261 [label="if (Declarations.Length == 1)\n                {\n                    return ImmutableArray.Create(Declarations[0].NameLocation);\n                }\n                else\n                {\n                    var builder = ArrayBuilder<SourceLocation>.GetInstance();\n                    foreach (var decl in Declarations)\n                    {\n                        SourceLocation loc = decl.NameLocation;\n                        if (loc != null)\n                            builder.Add(loc);\n                    }\n                    return builder.ToImmutableAndFree();\n                } 795140"];
16262 [label="if (Declarations.Length == 1)\n                {\n                    return ImmutableArray.Create(Declarations[0].NameLocation);\n                }\n                else\n                {\n                    var builder = ArrayBuilder<SourceLocation>.GetInstance();\n                    foreach (var decl in Declarations)\n                    {\n                        SourceLocation loc = decl.NameLocation;\n                        if (loc != null)\n                            builder.Add(loc);\n                    }\n                    return builder.ToImmutableAndFree();\n                } 795141"];
16263 [label="Declarations 795142"];
16264 [label="return ImmutableArray.Create(Declarations[0].NameLocation); 795143"];
16265 [label="return ImmutableArray.Create(Declarations[0].NameLocation); 795144"];
16266 [label="Declarations[0].NameLocation 795145"];
16267 [label="get\n            {\n                return _nameLocation;\n            } 795146"];
16268 [label="return _nameLocation; 795147"];
16269 [label="return declaration.NameLocations.Cast<SourceLocation, Location>(); 795148"];
16270 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 795149"];
16271 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 795150"];
16272 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 795151"];
16273 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 795152"];
16274 [label="param CheckUnsafeModifier(this Symbol symbol) 795153"];
16275 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 795154"];
16276 [label="param CheckUnsafeModifier(Location errorLocation) 795155"];
16277 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 795156"];
16278 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 795157"];
16279 [label="this.CheckUnsafeModifier(mods, diagnostics); 795158"];
16280 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 795159"];
16281 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 795160"];
16282 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 795161"];
16283 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 795162"];
16284 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 795163"];
16285 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 795164"];
16286 [label="switch (typeKind)\n            {\n                case TypeKind.Interface:\n                    mods |= DeclarationModifiers.Abstract;\n                    break;\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n                case TypeKind.Delegate:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n            } 795165"];
16287 [label="return mods; 795166"];
16288 [label="declaration.Declarations 795167"];
16289 [label="get\n            {\n                return _declarations;\n            } 795168"];
16290 [label="return _declarations; 795169"];
16291 [label="foreach (var singleDeclaration in declaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 795170"];
16292 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 795171"];
16293 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 795172"];
16294 [label="int access = (int)(modifiers & DeclarationModifiers.AccessibilityMask); 795173"];
16295 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 795174"];
16296 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 795175"];
16297 [label="_declModifiers 795176"];
16298 [label="var specialType = access == (int)DeclarationModifiers.Public\n                ? MakeSpecialType()\n                : SpecialType.None; 795177"];
16299 [label="access == (int)DeclarationModifiers.Public 795178"];
16300 [label="MakeSpecialType() 795179"];
16301 [label="param MakeSpecialType(this) 795180"];
16302 [label="ContainingSymbol 795181"];
16303 [label="get\n            {\n                return _containingSymbol;\n            } 795182"];
16304 [label="return _containingSymbol; 795183"];
16305 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 795184"];
16306 [label="ContainingSymbol.Kind 795185"];
16307 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 795186"];
16308 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 795187"];
16309 [label="ContainingSymbol 795188"];
16310 [label="get\n            {\n                return _containingSymbol;\n            } 795189"];
16311 [label="return _containingSymbol; 795190"];
16312 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 795191"];
16313 [label="ContainingSymbol.ContainingAssembly 795192"];
16314 [label="=> _module.ContainingAssembly 795193"];
16315 [label="_module.ContainingAssembly 795194"];
16316 [label="get\n            {\n                return _assemblySymbol;\n            } 795195"];
16317 [label="return _assemblySymbol; 795196"];
16318 [label="ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 795197"];
16319 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 795198"];
16320 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 795199"];
16321 [label="return SpecialType.None; 795200"];
16322 [label="0 795201"];
16323 [label="SpecialTypeOffset = 0 795202"];
16324 [label="6 795203"];
16325 [label="SpecialTypeSize = 6 795204"];
16326 [label="SpecialTypeOffset + SpecialTypeSize 795205"];
16327 [label="ManagedKindOffset = SpecialTypeOffset + SpecialTypeSize 795206"];
16328 [label="2 795207"];
16329 [label="ManagedKindSize = 2 795208"];
16330 [label="ManagedKindOffset + ManagedKindSize 795209"];
16331 [label="FieldDefinitionsNotedOffset = ManagedKindOffset + ManagedKindSize 795210"];
16332 [label="1 795211"];
16333 [label="FieldDefinitionsNotedSize = 1 795212"];
16334 [label="FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 795213"];
16335 [label="FlattenedMembersIsSortedOffset = FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 795214"];
16336 [label="1 795215"];
16337 [label="FlattenedMembersIsSortedSize = 1 795216"];
16338 [label="FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 795217"];
16339 [label="TypeKindOffset = FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 795218"];
16340 [label="4 795219"];
16341 [label="TypeKindSize = 4 795220"];
16342 [label="TypeKindOffset + TypeKindSize 795221"];
16343 [label="NullableContextOffset = TypeKindOffset + TypeKindSize 795222"];
16344 [label="3 795223"];
16345 [label="NullableContextSize = 3 795224"];
16346 [label="1 795225"];
16347 [label="1 << SpecialTypeSize 795226"];
16348 [label="1 795227"];
16349 [label="(1 << SpecialTypeSize) - 1 795228"];
16350 [label="SpecialTypeMask = (1 << SpecialTypeSize) - 1 795229"];
16351 [label="1 795230"];
16352 [label="1 << ManagedKindSize 795231"];
16353 [label="1 795232"];
16354 [label="(1 << ManagedKindSize) - 1 795233"];
16355 [label="ManagedKindMask = (1 << ManagedKindSize) - 1 795234"];
16356 [label="1 795235"];
16357 [label="1 << TypeKindSize 795236"];
16358 [label="1 795237"];
16359 [label="(1 << TypeKindSize) - 1 795238"];
16360 [label="TypeKindMask = (1 << TypeKindSize) - 1 795239"];
16361 [label="1 795240"];
16362 [label="1 << NullableContextSize 795241"];
16363 [label="1 795242"];
16364 [label="(1 << NullableContextSize) - 1 795243"];
16365 [label="NullableContextMask = (1 << NullableContextSize) - 1 795244"];
16366 [label="1 795245"];
16367 [label="1 << FieldDefinitionsNotedOffset 795246"];
16368 [label="FieldDefinitionsNotedBit = 1 << FieldDefinitionsNotedOffset 795247"];
16369 [label="1 795248"];
16370 [label="1 << FlattenedMembersIsSortedOffset 795249"];
16371 [label="FlattenedMembersIsSortedBit = 1 << FlattenedMembersIsSortedOffset 795250"];
16372 [label="Debug.Assert(EnumUtilities.ContainsAllValues<SpecialType>(SpecialTypeMask)); 795251"];
16373 [label="Debug.Assert(EnumUtilities.ContainsAllValues<NullableContextKind>(NullableContextMask)); 795252"];
16374 [label="_flags = new Flags(specialType, typeKind); 795253"];
16375 [label="_flags = new Flags(specialType, typeKind); 795254"];
16376 [label="_flags = new Flags(specialType, typeKind); 795255"];
16377 [label="new Flags(specialType, typeKind) 795256"];
16378 [label="param Flags(SpecialType specialType) 795257"];
16379 [label="param Flags(TypeKind typeKind) 795258"];
16380 [label="param Flags(this) 795259"];
16381 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 795260"];
16382 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 795261"];
16383 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 795262"];
16384 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 795263"];
16385 [label="_flags = specialTypeInt | typeKindInt; 795264"];
16386 [label="_flags 795265"];
16387 [label="_flags 795266"];
16388 [label="this.ContainingType 795267"];
16389 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 795268"];
16390 [label="return _containingSymbol as NamedTypeSymbol; 795269"];
16391 [label="var containingType = this.ContainingType; 795270"];
16392 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 795271"];
16393 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 795272"];
16394 [label="state.NotePartComplete(CompletionPart.TypeArguments); 795273"];
16395 [label="state.NotePartComplete(CompletionPart.TypeArguments) 795274"];
16396 [label="param NotePartComplete(CompletionPart part) 795275"];
16397 [label="param NotePartComplete(this) 795276"];
16398 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 795277"];
16399 [label="_lazyCustomAttributesBag 795278"];
16400 [label="_lazyDocComment 795279"];
16401 [label="_lazyExpandedDocComment 795280"];
16402 [label="_lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.Unknown 795281"];
16403 [label="_lazyDeclaredBases 795282"];
16404 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 795283"];
16405 [label="_lazyEnumValueField 795284"];
16406 [label="_lazyEnumUnderlyingType = ErrorTypeSymbol.UnknownResultType 795285"];
16407 [label="declaration.Kind 795286"];
16408 [label="get\n            {\n                return this.Declarations[0].Kind;\n            } 795287"];
16409 [label="return _declarations; 795288"];
16410 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    break;\n                default:\n                    Debug.Assert(false, 'bad declaration kind');\n                    break;\n            } 795289"];
16411 [label="containingSymbol.Kind 795290"];
16412 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 795291"];
16413 [label="if (containingSymbol.Kind == SymbolKind.NamedType)\n            {\n                // Nested types are never unified.\n                _lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.False;\n            } 795292"];
16414 [label="get\n            {\n                return declaration.Name;\n            } 795293"];
16415 [label="declaration.Name 795294"];
16416 [label="get\n            {\n                return this.name;\n            } 795295"];
16417 [label="return this.name; 795296"];
16418 [label="return declaration.Name; 795297"];
16419 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 795298"];
16420 [label="members 795299"];
16421 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 795300"];
16422 [label="return SymbolKind.NamedType; 795301"];
16423 [label="param CheckMembers(NamespaceSymbol @namespace) 795302"];
16424 [label="param CheckMembers(DiagnosticBag diagnostics) 795303"];
16425 [label="var memberOfArity = new Symbol[10]; 795304"];
16426 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 795305"];
16427 [label="@namespace.ContainingAssembly 795306"];
16428 [label="=> _module.ContainingAssembly 795307"];
16429 [label="_module.ContainingAssembly 795308"];
16430 [label="get\n            {\n                return _assemblySymbol;\n            } 795309"];
16431 [label="return _assemblySymbol; 795310"];
16432 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 795311"];
16433 [label="@namespace.ContainingAssembly.Modules 795312"];
16434 [label="get\n            {\n                return _modules;\n            } 795313"];
16435 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 795314"];
16436 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 795315"];
16437 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 795316"];
16438 [label="var nts = symbol as NamedTypeSymbol; 795317"];
16439 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 795318"];
16440 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 795319"];
16441 [label="((object)nts != null) 795320"];
16442 [label="nts.Arity 795321"];
16443 [label="get\n            {\n                return declaration.Arity;\n            } 795322"];
16444 [label="declaration.Arity 795323"];
16445 [label="get\n            {\n                return this.Declarations[0].Arity;\n            } 795324"];
16446 [label="this.Declarations 795325"];
16447 [label="get\n            {\n                return _declarations;\n            } 795326"];
16448 [label="return this.Declarations[0].Arity; 795327"];
16449 [label="return this.Declarations[0].Arity; 795328"];
16450 [label="this.Declarations[0].Arity 795329"];
16451 [label="get\n            {\n                return _arity;\n            } 795330"];
16452 [label="return _arity; 795331"];
16453 [label="return declaration.Arity; 795332"];
16454 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 795333"];
16455 [label="var other = memberOfArity[arity]; 795334"];
16456 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 795335"];
16457 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 795336"];
16458 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 795337"];
16459 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 795338"];
16460 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 795339"];
16461 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 795340"];
16462 [label="memberOfArity[arity] 795341"];
16463 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 795342"];
16464 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 795343"];
16465 [label="nts.DeclaredAccessibility 795344"];
16466 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 795345"];
16467 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 795346"];
16468 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 795347"];
16469 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 795348"];
16470 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 795349"];
16471 [label="return Accessibility.Public; 795350"];
16472 [label="Accessibility declaredAccessibility = nts.DeclaredAccessibility; 795351"];
16473 [label="if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        } 795352"];
16474 [label="this.Kind 795353"];
16475 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 795354"];
16476 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 795355"];
16477 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 795356"];
16478 [label="RegisterDeclaredCorTypes() 795357"];
16479 [label="param RegisterDeclaredCorTypes(this) 795358"];
16480 [label="ContainingAssembly 795359"];
16481 [label="=> _module.ContainingAssembly 795360"];
16482 [label="_module.ContainingAssembly 795361"];
16483 [label="get\n            {\n                return _assemblySymbol;\n            } 795362"];
16484 [label="return _assemblySymbol; 795363"];
16485 [label="AssemblySymbol containingAssembly = ContainingAssembly; 795364"];
16486 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 795365"];
16487 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 795366"];
16488 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 795367"];
16489 [label="RegisterDeclaredCorTypes(); 795368"];
16490 [label="DeclaringCompilation 795369"];
16491 [label="this.Kind 795370"];
16492 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 795371"];
16493 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 795372"];
16494 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 795373"];
16495 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 795374"];
16496 [label="DeclaringCompilation.SymbolDeclaredEvent(this) 795375"];
16497 [label="param SymbolDeclaredEvent(Symbol symbol) 795376"];
16498 [label="param SymbolDeclaredEvent(this) 795377"];
16499 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 795378"];
16500 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 795379"];
16501 [label="Debug.Assert(wasSetThisThread); 795380"];
16502 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 795381"];
16503 [label="GetTypesFromMemberMap(GetNameToMembersMap()) 795382"];
16504 [label="param GetTypesFromMemberMap(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> map) 795383"];
16505 [label="var dictionary = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(StringOrdinalComparer.Instance); 795384"];
16506 [label="foreach (var kvp in map)\n            {\n                ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value;\n\n                bool hasType = false;\n                bool hasNamespace = false;\n\n                foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                }\n\n                if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                }\n            } 795385"];
16507 [label="ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value; 795386"];
16508 [label="bool hasType = false; 795387"];
16509 [label="bool hasNamespace = false; 795388"];
16510 [label="foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                } 795389"];
16511 [label="symbol.Kind 795390"];
16512 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 795391"];
16513 [label="if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    } 795392"];
16514 [label="hasType = true; 795393"];
16515 [label="if (hasNamespace)\n                        {\n                            break;\n                        } 795394"];
16516 [label="if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                } 795395"];
16517 [label="if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    } 795396"];
16518 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 795397"];
16519 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 795398"];
16520 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 795399"];
16521 [label="return dictionary; 795400"];
16522 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 795401"];
16523 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 795402"];
16524 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 795403"];
16525 [label="return _nameToTypeMembersMap; 795404"];
16526 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 795405"];
16527 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 795406"];
16528 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 795407"];
16529 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 795408"];
16530 [label="this.GetNameToTypeMembersMap().TryGetValue(name, out members) 795409"];
16531 [label="var varX = classA.GetMembers('x').First() as FieldSymbol; 795410"];
16532 [label="classA.GetMembers('x') 795411"];
16533 [label="param GetMembers(string name) 795412"];
16534 [label="param GetMembers(this) 795413"];
16535 [label="ImmutableArray<Symbol> members; 795414"];
16536 [label="members 795415"];
16537 [label="GetMembersByName() 795416"];
16538 [label="param GetMembersByName(this) 795417"];
16539 [label="if (this.state.HasComplete(CompletionPart.Members))\n            {\n                return _lazyMembersDictionary!;\n            } 795418"];
16540 [label="this.state.HasComplete(CompletionPart.Members) 795419"];
16541 [label="param HasComplete(CompletionPart part) 795420"];
16542 [label="param HasComplete(this) 795421"];
16543 [label="return (_completeParts & (int)part) == (int)part; 795422"];
16544 [label="GetMembersByNameSlow() 795423"];
16545 [label="param GetMembersByNameSlow(this) 795424"];
16546 [label="if (_lazyMembersDictionary == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                var membersDictionary = MakeAllMembers(diagnostics);\n\n                if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                }\n\n                diagnostics.Free();\n            } 795425"];
16547 [label="if (_lazyMembersDictionary == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                var membersDictionary = MakeAllMembers(diagnostics);\n\n                if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                }\n\n                diagnostics.Free();\n            } 795426"];
16548 [label="var diagnostics = DiagnosticBag.GetInstance(); 795427"];
16549 [label="var membersDictionary = MakeAllMembers(diagnostics); 795428"];
16550 [label="MakeAllMembers(diagnostics) 795429"];
16551 [label="param MakeAllMembers(DiagnosticBag diagnostics) 795430"];
16552 [label="param MakeAllMembers(this) 795431"];
16553 [label="Dictionary<string, ImmutableArray<Symbol>> membersByName; 795432"];
16554 [label="GetMembersAndInitializers() 795433"];
16555 [label="param GetMembersAndInitializers(this) 795434"];
16556 [label="var membersAndInitializers = _lazyMembersAndInitializers; 795435"];
16557 [label="if (membersAndInitializers != null)\n            {\n                return membersAndInitializers;\n            } 795436"];
16558 [label="if (membersAndInitializers != null)\n            {\n                return membersAndInitializers;\n            } 795437"];
16559 [label="var diagnostics = DiagnosticBag.GetInstance(); 795438"];
16560 [label="membersAndInitializers = BuildMembersAndInitializers(diagnostics); 795439"];
16561 [label="BuildMembersAndInitializers(diagnostics) 795440"];
16562 [label="param BuildMembersAndInitializers(DiagnosticBag diagnostics) 795441"];
16563 [label="param BuildMembersAndInitializers(this) 795442"];
16564 [label="getDeclaredMembersAndInitializers() 795443"];
16565 [label="DeclaredMembersAndInitializers? getDeclaredMembersAndInitializers()\n            {\n                var declaredMembersAndInitializers = _lazyDeclaredMembersAndInitializers;\n                if (declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    return declaredMembersAndInitializers;\n                }\n\n                if (Volatile.Read(ref _lazyMembersAndInitializers) is not null)\n                {\n                    // We're previously computed declared members and already cleared them out\n                    // No need to compute them again\n                    return null;\n                }\n\n                var diagnostics = DiagnosticBag.GetInstance();\n                declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics);\n\n                var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel);\n                if (alreadyKnown != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    diagnostics.Free();\n                    return alreadyKnown;\n                }\n\n                AddDeclarationDiagnostics(diagnostics);\n                diagnostics.Free();\n\n                return declaredMembersAndInitializers!;\n            } 795444"];
16566 [label="var declaredMembersAndInitializers = _lazyDeclaredMembersAndInitializers; 795445"];
16567 [label="if (declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    return declaredMembersAndInitializers;\n                } 795446"];
16568 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) is not null)\n                {\n                    // We're previously computed declared members and already cleared them out\n                    // No need to compute them again\n                    return null;\n                } 795447"];
16569 [label="var diagnostics = DiagnosticBag.GetInstance(); 795448"];
16570 [label="declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics); 795449"];
16571 [label="buildDeclaredMembersAndInitializers(diagnostics) 795450"];
16572 [label="DeclaredMembersAndInitializers? buildDeclaredMembersAndInitializers(DiagnosticBag diagnostics)\n            {\n                var builder = new DeclaredMembersAndInitializersBuilder();\n                AddDeclaredNontypeMembers(builder, diagnostics);\n\n                switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                }\n\n                if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                }\n\n                return builder.ToReadOnlyAndFree();\n            } 795451"];
16573 [label="DeclaredMembersAndInitializers? buildDeclaredMembersAndInitializers(DiagnosticBag diagnostics)\n            {\n                var builder = new DeclaredMembersAndInitializersBuilder();\n                AddDeclaredNontypeMembers(builder, diagnostics);\n\n                switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                }\n\n                if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                }\n\n                return builder.ToReadOnlyAndFree();\n            } 795452"];
16574 [label="var builder = new DeclaredMembersAndInitializersBuilder(); 795453"];
16575 [label="new DeclaredMembersAndInitializersBuilder() 795454"];
16576 [label="param DeclaredMembersAndInitializersBuilder(this) 795455"];
16577 [label="ArrayBuilder<Symbol>.GetInstance() 795456"];
16578 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance() 795457"];
16579 [label="ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 795458"];
16580 [label="StaticInitializers = ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 795459"];
16581 [label="ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 795460"];
16582 [label="InstanceInitializers = ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 795461"];
16583 [label="HaveIndexers 795462"];
16584 [label="RecordDeclarationWithParameters 795463"];
16585 [label="RecordPrimaryConstructor 795464"];
16586 [label="1 795465"];
16587 [label="InstanceInitializersIndexForRecordDeclarationWithParameters = -1 795466"];
16588 [label="IsNullableEnabledForInstanceConstructorsAndFields 795467"];
16589 [label="IsNullableEnabledForStaticConstructorsAndFields 795468"];
16590 [label="AddDeclaredNontypeMembers(builder, diagnostics); 795469"];
16591 [label="AddDeclaredNontypeMembers(builder, diagnostics); 795470"];
16592 [label="AddDeclaredNontypeMembers(builder, diagnostics) 795471"];
16593 [label="param AddDeclaredNontypeMembers(DeclaredMembersAndInitializersBuilder builder) 795472"];
16594 [label="param AddDeclaredNontypeMembers(DiagnosticBag diagnostics) 795473"];
16595 [label="param AddDeclaredNontypeMembers(this) 795474"];
16596 [label="this.declaration.Declarations 795475"];
16597 [label="get\n            {\n                return _declarations;\n            } 795476"];
16598 [label="foreach (var decl in this.declaration.Declarations)\n            {\n                if (!decl.HasAnyNontypeMembers)\n                {\n                    continue;\n                }\n\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                var syntax = decl.SyntaxReference.GetSyntax();\n\n                switch (syntax.Kind())\n                {\n                    case SyntaxKind.EnumDeclaration:\n                        AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.DelegateDeclaration:\n                        SourceDelegateMethodSymbol.AddDelegateMembers(this, builder.NonTypeMembers, (DelegateDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.NamespaceDeclaration:\n                        // The members of a global anonymous type is in a syntax tree of a namespace declaration or a compilation unit.\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((NamespaceDeclarationSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.CompilationUnit:\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((CompilationUnitSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.StructDeclaration:\n                        var typeDecl = (TypeDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.RecordDeclaration:\n                        var recordDecl = (RecordDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder,\n                            instanceInitializers: noteRecordParameters(recordDecl, builder, diagnostics),\n                            recordDecl.Members,\n                            diagnostics);\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(syntax.Kind());\n                }\n            } 795477"];
16599 [label="decl.HasAnyNontypeMembers 795478"];
16600 [label="get\n            {\n                return (_flags & TypeDeclarationFlags.HasAnyNontypeMembers) != 0;\n            } 795479"];
16601 [label="return (_flags & TypeDeclarationFlags.HasAnyNontypeMembers) != 0; 795480"];
16602 [label="return (_flags & TypeDeclarationFlags.HasAnyNontypeMembers) != 0; 795481"];
16603 [label="if (!decl.HasAnyNontypeMembers)\n                {\n                    continue;\n                } 795482"];
16604 [label="if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                } 795483"];
16605 [label="decl.SyntaxReference 795484"];
16606 [label="get\n            {\n                return _syntaxReference;\n            } 795485"];
16607 [label="return _syntaxReference; 795486"];
16608 [label="var syntax = decl.SyntaxReference.GetSyntax(); 795487"];
16609 [label="var syntax = decl.SyntaxReference.GetSyntax(); 795488"];
16610 [label="decl.SyntaxReference.GetSyntax() 795489"];
16611 [label="param GetSyntax(CancellationToken cancellationToken) 795490"];
16612 [label="param GetSyntax(this) 795491"];
16613 [label="return _node; 795492"];
16614 [label="switch (syntax.Kind())\n                {\n                    case SyntaxKind.EnumDeclaration:\n                        AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.DelegateDeclaration:\n                        SourceDelegateMethodSymbol.AddDelegateMembers(this, builder.NonTypeMembers, (DelegateDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.NamespaceDeclaration:\n                        // The members of a global anonymous type is in a syntax tree of a namespace declaration or a compilation unit.\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((NamespaceDeclarationSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.CompilationUnit:\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((CompilationUnitSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.StructDeclaration:\n                        var typeDecl = (TypeDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.RecordDeclaration:\n                        var recordDecl = (RecordDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder,\n                            instanceInitializers: noteRecordParameters(recordDecl, builder, diagnostics),\n                            recordDecl.Members,\n                            diagnostics);\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(syntax.Kind());\n                } 795493"];
16615 [label="syntax.Kind() 795494"];
16616 [label="param Kind(this SyntaxNode node) 795495"];
16617 [label="var rawKind = node.RawKind; 795496"];
16618 [label="return IsCSharpKind(rawKind) ? (SyntaxKind)rawKind : SyntaxKind.None; 795497"];
16619 [label="IsCSharpKind(rawKind) 795498"];
16620 [label="param IsCSharpKind(int rawKind) 795499"];
16621 [label="const int FirstVisualBasicKind = (int)SyntaxKind.List + 1; 795500"];
16622 [label="const int FirstCSharpKind = (int)SyntaxKind.TildeToken; 795501"];
16623 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 795502"];
16624 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 795503"];
16625 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 795504"];
16626 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 795505"];
16627 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 795506"];
16628 [label="var typeDecl = (TypeDeclarationSyntax)syntax; 795507"];
16629 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 795508"];
16630 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 795509"];
16631 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 795510"];
16632 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 795511"];
16633 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics) 795512"];
16634 [label="param AddNonTypeMembers(DeclaredMembersAndInitializersBuilder builder) 795513"];
16635 [label="param AddNonTypeMembers(ArrayBuilder<FieldOrPropertyInitializer>? instanceInitializers) 795514"];
16636 [label="param AddNonTypeMembers(SyntaxList<MemberDeclarationSyntax> members) 795515"];
16637 [label="param AddNonTypeMembers(DiagnosticBag diagnostics) 795516"];
16638 [label="param AddNonTypeMembers(this) 795517"];
16639 [label="if (members.Count == 0)\n            {\n                AddInitializers(builder.InstanceInitializers, instanceInitializers);\n                return;\n            } 795518"];
16640 [label="if (members.Count == 0)\n            {\n                AddInitializers(builder.InstanceInitializers, instanceInitializers);\n                return;\n            } 795519"];
16641 [label="var firstMember = members[0]; 795520"];
16642 [label="var firstMember = members[0]; 795521"];
16643 [label="var bodyBinder = this.GetBinder(firstMember); 795522"];
16644 [label="this.GetBinder(firstMember) 795523"];
16645 [label="param GetBinder(CSharpSyntaxNode syntaxNode) 795524"];
16646 [label="param GetBinder(this) 795525"];
16647 [label="this.DeclaringCompilation 795526"];
16648 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 795527"];
16649 [label="this.Kind 795528"];
16650 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 795529"];
16651 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 795530"];
16652 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 795531"];
16653 [label="this.ContainingSymbol 795532"];
16654 [label="get\n            {\n                return _containingSymbol;\n            } 795533"];
16655 [label="return _containingSymbol; 795534"];
16656 [label="var container = this.ContainingSymbol; 795535"];
16657 [label="return (object)container != null ? container.ContainingModule : null; 795536"];
16658 [label="return (object)container != null ? container.ContainingModule : null; 795537"];
16659 [label="(object)container != null 795538"];
16660 [label="container.ContainingModule 795539"];
16661 [label="return this.DeclaringCompilation.GetBinder(syntaxNode); 795540"];
16662 [label="return this.DeclaringCompilation.GetBinder(syntaxNode); 795541"];
16663 [label="this.DeclaringCompilation.GetBinder(syntaxNode) 795542"];
16664 [label="param GetBinder(CSharpSyntaxNode syntax) 795543"];
16665 [label="param GetBinder(this) 795544"];
16666 [label="syntax.SyntaxTree 795545"];
16667 [label="get\n            {\n                var result = this._syntaxTree ?? ComputeSyntaxTree(this);\n                Debug.Assert(result != null);\n                return result;\n            } 795546"];
16668 [label="ArrayBuilder<CSharpSyntaxNode>? nodes = null; 795547"];
16669 [label="SyntaxTree? tree = null; 795548"];
16670 [label="tree = node._syntaxTree; 795549"];
16671 [label="if (tree != null)\n                {\n                    break;\n                } 795550"];
16672 [label="if (tree != null)\n                {\n                    break;\n                } 795551"];
16673 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 795552"];
16674 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 795553"];
16675 [label="Debug.Assert(result != null); 795554"];
16676 [label="Debug.Assert(result != null); 795555"];
16677 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 795556"];
16678 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 795557"];
16679 [label="GetBinderFactory(syntax.SyntaxTree) 795558"];
16680 [label="param GetBinderFactory(SyntaxTree syntaxTree) 795559"];
16681 [label="param GetBinderFactory(bool ignoreAccessibility = false) 795560"];
16682 [label="param GetBinderFactory(this) 795561"];
16683 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 795562"];
16684 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 795563"];
16685 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 795564"];
16686 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 795565"];
16687 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 795566"];
16688 [label="param GetBinderFactory(SyntaxTree syntaxTree) 795567"];
16689 [label="param GetBinderFactory(bool ignoreAccessibility) 795568"];
16690 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 795569"];
16691 [label="param GetBinderFactory(this) 795570"];
16692 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 795571"];
16693 [label="ignoreAccessibility 795572"];
16694 [label="_binderFactories 795573"];
16695 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 795574"];
16696 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 795575"];
16697 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 795576"];
16698 [label="GetSyntaxTreeOrdinal(syntaxTree) 795577"];
16699 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 795578"];
16700 [label="param GetSyntaxTreeOrdinal(this) 795579"];
16701 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 795580"];
16702 [label="this.ContainsSyntaxTree(tree) 795581"];
16703 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 795582"];
16704 [label="param ContainsSyntaxTree(this) 795583"];
16705 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 795584"];
16706 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 795585"];
16707 [label="_syntaxAndDeclarations.GetLazyState() 795586"];
16708 [label="param GetLazyState(this) 795587"];
16709 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 795588"];
16710 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 795589"];
16711 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 795590"];
16712 [label="_syntaxAndDeclarations.GetLazyState() 795591"];
16713 [label="param GetLazyState(this) 795592"];
16714 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 795593"];
16715 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 795594"];
16716 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 795595"];
16717 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 795596"];
16718 [label="this.SyntaxTrees 795597"];
16719 [label="param GetLazyState(this) 795598"];
16720 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 795599"];
16721 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 795600"];
16722 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 795601"];
16723 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 795602"];
16724 [label="BinderFactory? previousFactory; 795603"];
16725 [label="var previousWeakReference = binderFactories[treeNum]; 795604"];
16726 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 795605"];
16727 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 795606"];
16728 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 795607"];
16729 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 795608"];
16730 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 795609"];
16731 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 795610"];
16732 [label="param AddNewFactory(SyntaxTree syntaxTree) 795611"];
16733 [label="param AddNewFactory(bool ignoreAccessibility) 795612"];
16734 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 795613"];
16735 [label="param AddNewFactory(this) 795614"];
16736 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 795615"];
16737 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 795616"];
16738 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 795617"];
16739 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 795618"];
16740 [label="new BinderFactory(this, syntaxTree, ignoreAccessibility) 795619"];
16741 [label="param BinderFactory(CSharpCompilation compilation) 795620"];
16742 [label="param BinderFactory(SyntaxTree syntaxTree) 795621"];
16743 [label="param BinderFactory(bool ignoreAccessibility) 795622"];
16744 [label="param BinderFactory(this) 795623"];
16745 [label="_binderCache 795624"];
16746 [label="_compilation 795625"];
16747 [label="_syntaxTree 795626"];
16748 [label="_buckStopsHereBinder 795627"];
16749 [label="_ignoreAccessibility 795628"];
16750 [label="_binderFactoryVisitorPool 795629"];
16751 [label="_compilation 795630"];
16752 [label="_syntaxTree 795631"];
16753 [label="_ignoreAccessibility 795632"];
16754 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 795633"];
16755 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 795634"];
16756 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 795635"];
16757 [label="_binderFactoryVisitorPool 795636"];
16758 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 795637"];
16759 [label="_binderCache 795638"];
16760 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 795639"];
16761 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 795640"];
16762 [label="new BuckStopsHereBinder(compilation) 795641"];
16763 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 795642"];
16764 [label="param BuckStopsHereBinder(this) 795643"];
16765 [label="0 795644"];
16766 [label="ExternalScope = 0 795645"];
16767 [label="1 795646"];
16768 [label="TopLevelScope = 1 795647"];
16769 [label="2 795648"];
16770 [label="ValueKindInsignificantBits = 2 795649"];
16771 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 795650"];
16772 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 795651"];
16773 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 795652"];
16774 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 795653"];
16775 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 795654"];
16776 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 795655"];
16777 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 795656"];
16778 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 795657"];
16779 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 795658"];
16780 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 795659"];
16781 [label="10 795660"];
16782 [label="MaxParameterListsForErrorRecovery = 10 795661"];
16783 [label="'<>h__TransparentIdentifier' 795662"];
16784 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 795663"];
16785 [label="s => (MethodSymbol)s 795664"];
16786 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 795665"];
16787 [label="s => (PropertySymbol)s 795666"];
16788 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 795667"];
16789 [label="compilation 795668"];
16790 [label="param BuckStopsHereBinder(this) 795669"];
16791 [label="param Binder(CSharpCompilation compilation) 795670"];
16792 [label="param Binder(this) 795671"];
16793 [label="internal CSharpCompilation Compilation { get; } 795672"];
16794 [label="Flags 795673"];
16795 [label="protected internal Binder? Next { get; } 795674"];
16796 [label="_lazyConversions 795675"];
16797 [label="_lazyOverloadResolution 795676"];
16798 [label="RoslynDebug.Assert(compilation != null); 795677"];
16799 [label="RoslynDebug.Assert(compilation != null); 795678"];
16800 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 795679"];
16801 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 795680"];
16802 [label="compilation.Options 795681"];
16803 [label="get\n            {\n                return _options;\n            } 795682"];
16804 [label="return _options; 795683"];
16805 [label="this.Flags = compilation.Options.TopLevelBinderFlags; 795684"];
16806 [label="this.Flags 795685"];
16807 [label="this.Compilation 795686"];
16808 [label="_buckStopsHereBinder 795687"];
16809 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 795688"];
16810 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 795689"];
16811 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 795690"];
16812 [label="BinderFactory? previousFactory; 795691"];
16813 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 795692"];
16814 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 795693"];
16815 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 795694"];
16816 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 795695"];
16817 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 795696"];
16818 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 795697"];
16819 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 795698"];
16820 [label="return newFactory; 795699"];
16821 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 795700"];
16822 [label="GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax) 795701"];
16823 [label="param GetBinder(SyntaxNode node) 795702"];
16824 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 795703"];
16825 [label="param GetBinder(Symbol memberOpt = null) 795704"];
16826 [label="param GetBinder(this) 795705"];
16827 [label="int position = node.SpanStart; 795706"];
16828 [label="node.SpanStart 795707"];
16829 [label="param GetLeadingTriviaWidth(this) 795708"];
16830 [label="leading.FullWidth 795709"];
16831 [label="InScript 795710"];
16832 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 795711"];
16833 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 795712"];
16834 [label="_syntaxTree.Options 795713"];
16835 [label="get\n            {\n                return this.Options;\n            } 795714"];
16836 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 795715"];
16837 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 795716"];
16838 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 795717"];
16839 [label="node = node.Parent; 795718"];
16840 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 795719"];
16841 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 795720"];
16842 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 795721"];
16843 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 795722"];
16844 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 795723"];
16845 [label="param GetBinder(SyntaxNode node) 795724"];
16846 [label="param GetBinder(int position) 795725"];
16847 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 795726"];
16848 [label="param GetBinder(Symbol memberOpt = null) 795727"];
16849 [label="param GetBinder(this) 795728"];
16850 [label="Debug.Assert(node != null); 795729"];
16851 [label="Debug.Assert(node != null); 795730"];
16852 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 795731"];
16853 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 795732"];
16854 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 795733"];
16855 [label="param BinderFactoryVisitor(BinderFactory factory) 795734"];
16856 [label="param BinderFactoryVisitor(this) 795735"];
16857 [label="param BinderFactoryVisitor(this) 795736"];
16858 [label="param CSharpSyntaxVisitor(this) 795737"];
16859 [label="_position 795738"];
16860 [label="_memberDeclarationOpt 795739"];
16861 [label="_memberOpt 795740"];
16862 [label="_factory 795741"];
16863 [label="_factory 795742"];
16864 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 795743"];
16865 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 795744"];
16866 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 795745"];
16867 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 795746"];
16868 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 795747"];
16869 [label="param Initialize(int position) 795748"];
16870 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 795749"];
16871 [label="param Initialize(Symbol memberOpt) 795750"];
16872 [label="param Initialize(this) 795751"];
16873 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 795752"];
16874 [label="memberDeclarationOpt == null 795753"];
16875 [label="param ==(Symbol left) 795754"];
16876 [label="param ==(Symbol right) 795755"];
16877 [label="if (right is null)\n            {\n                return left is null;\n            } 795756"];
16878 [label="return left is null; 795757"];
16879 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 795758"];
16880 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 795759"];
16881 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 795760"];
16882 [label="_position 795761"];
16883 [label="_memberDeclarationOpt 795762"];
16884 [label="_memberOpt 795763"];
16885 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 795764"];
16886 [label="Binder result = visitor.Visit(node); 795765"];
16887 [label="visitor.Visit(node) 795766"];
16888 [label="param Visit(SyntaxNode node) 795767"];
16889 [label="param Visit(this) 795768"];
16890 [label="return VisitCore(node); 795769"];
16891 [label="VisitCore(node) 795770"];
16892 [label="param VisitCore(SyntaxNode node) 795771"];
16893 [label="param VisitCore(this) 795772"];
16894 [label="return ((CSharpSyntaxNode)node).Accept(this); 795773"];
16895 [label="return ((CSharpSyntaxNode)node).Accept(this); 795774"];
16896 [label="return ((CSharpSyntaxNode)node).Accept(this); 795775"];
16897 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 795776"];
16898 [label="param VisitClassDeclaration(this) 795777"];
16899 [label="return VisitTypeDeclarationCore(node); 795778"];
16900 [label="VisitTypeDeclarationCore(node) 795779"];
16901 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 795780"];
16902 [label="param VisitTypeDeclarationCore(this) 795781"];
16903 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 795782"];
16904 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 795783"];
16905 [label="LookupPosition.IsInTypeDeclaration(_position, parent) 795784"];
16906 [label="param IsInTypeDeclaration(int position) 795785"];
16907 [label="param IsInTypeDeclaration(BaseTypeDeclarationSyntax typeDecl) 795786"];
16908 [label="Debug.Assert(typeDecl != null); 795787"];
16909 [label="Debug.Assert(typeDecl != null); 795788"];
16910 [label="return IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken); 795789"];
16911 [label="return IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken); 795790"];
16912 [label="return IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken); 795791"];
16913 [label="typeDecl.CloseBraceToken 795792"];
16914 [label="=> true 795793"];
16915 [label="return IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken); 795794"];
16916 [label="return IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken); 795795"];
16917 [label="IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken) 795796"];
16918 [label="param IsBeforeToken(int position) 795797"];
16919 [label="param IsBeforeToken(CSharpSyntaxNode node) 795798"];
16920 [label="param IsBeforeToken(SyntaxToken firstExcluded) 795799"];
16921 [label="return IsBeforeToken(position, firstExcluded) && position >= node.SpanStart; 795800"];
16922 [label="return IsBeforeToken(position, firstExcluded) && position >= node.SpanStart; 795801"];
16923 [label="IsBeforeToken(position, firstExcluded) 795802"];
16924 [label="param IsBeforeToken(int position) 795803"];
16925 [label="param IsBeforeToken(SyntaxToken firstExcluded) 795804"];
16926 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795805"];
16927 [label="firstExcluded.Kind() 795806"];
16928 [label="param Kind(this SyntaxToken token) 795807"];
16929 [label="var rawKind = token.RawKind; 795808"];
16930 [label="return IsCSharpKind(rawKind) ? (SyntaxKind)rawKind : SyntaxKind.None; 795809"];
16931 [label="IsCSharpKind(rawKind) 795810"];
16932 [label="param IsCSharpKind(int rawKind) 795811"];
16933 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795812"];
16934 [label="firstExcluded.SpanStart 795813"];
16935 [label="param GetLeadingTriviaWidth(this) 795814"];
16936 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795815"];
16937 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795816"];
16938 [label="return IsBeforeToken(position, firstExcluded) && position >= node.SpanStart; 795817"];
16939 [label="node.SpanStart 795818"];
16940 [label="param GetLeadingTriviaWidth(this) 795819"];
16941 [label="return IsBeforeToken(position, firstExcluded) && position >= node.SpanStart; 795820"];
16942 [label="return IsBeforeToken(position, firstExcluded) && position >= node.SpanStart; 795821"];
16943 [label="NodeUsage extraInfo = NodeUsage.Normal; 795822"];
16944 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795823"];
16945 [label="parent.OpenBraceToken 795824"];
16946 [label="=> true 795825"];
16947 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795826"];
16948 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795827"];
16949 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795828"];
16950 [label="parent.CloseBraceToken 795829"];
16951 [label="=> true 795830"];
16952 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795831"];
16953 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795832"];
16954 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795833"];
16955 [label="parent.OpenBraceToken 795834"];
16956 [label="=> true 795835"];
16957 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795836"];
16958 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795837"];
16959 [label="parent.CloseBraceToken 795838"];
16960 [label="=> true 795839"];
16961 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795840"];
16962 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 795841"];
16963 [label="LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) 795842"];
16964 [label="param IsBetweenTokens(int position) 795843"];
16965 [label="param IsBetweenTokens(SyntaxToken firstIncluded) 795844"];
16966 [label="param IsBetweenTokens(SyntaxToken firstExcluded) 795845"];
16967 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795846"];
16968 [label="firstIncluded.SpanStart 795847"];
16969 [label="param GetLeadingTriviaWidth(this) 795848"];
16970 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795849"];
16971 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795850"];
16972 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795851"];
16973 [label="IsBeforeToken(position, firstExcluded) 795852"];
16974 [label="param IsBeforeToken(int position) 795853"];
16975 [label="param IsBeforeToken(SyntaxToken firstExcluded) 795854"];
16976 [label="firstExcluded.Kind() 795855"];
16977 [label="param Kind(this SyntaxToken token) 795856"];
16978 [label="var rawKind = token.RawKind; 795857"];
16979 [label="return IsCSharpKind(rawKind) ? (SyntaxKind)rawKind : SyntaxKind.None; 795858"];
16980 [label="IsCSharpKind(rawKind) 795859"];
16981 [label="param IsCSharpKind(int rawKind) 795860"];
16982 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795861"];
16983 [label="firstExcluded.SpanStart 795862"];
16984 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795863"];
16985 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795864"];
16986 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 795865"];
16987 [label="return VisitTypeDeclarationCore(parent, extraInfo); 795866"];
16988 [label="return VisitTypeDeclarationCore(parent, extraInfo); 795867"];
16989 [label="VisitTypeDeclarationCore(parent, extraInfo) 795868"];
16990 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 795869"];
16991 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 795870"];
16992 [label="param VisitTypeDeclarationCore(this) 795871"];
16993 [label="var key = CreateBinderCacheKey(parent, extraInfo); 795872"];
16994 [label="var key = CreateBinderCacheKey(parent, extraInfo); 795873"];
16995 [label="CreateBinderCacheKey(parent, extraInfo) 795874"];
16996 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 795875"];
16997 [label="param CreateBinderCacheKey(NodeUsage usage) 795876"];
16998 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 795877"];
16999 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 795878"];
17000 [label="return new BinderCacheKey(node, usage); 795879"];
17001 [label="return new BinderCacheKey(node, usage); 795880"];
17002 [label="return new BinderCacheKey(node, usage); 795881"];
17003 [label="new BinderCacheKey(node, usage) 795882"];
17004 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 795883"];
17005 [label="param BinderCacheKey(NodeUsage usage) 795884"];
17006 [label="param BinderCacheKey(this) 795885"];
17007 [label="this.syntaxNode 795886"];
17008 [label="this.usage 795887"];
17009 [label="var key = CreateBinderCacheKey(parent, extraInfo); 795888"];
17010 [label="Binder resultBinder; 795889"];
17011 [label="binderCache 795890"];
17012 [label="get\n                {\n                    return _factory._binderCache;\n                } 795891"];
17013 [label="return _factory._binderCache; 795892"];
17014 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 795893"];
17015 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 795894"];
17016 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 795895"];
17017 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 795896"];
17018 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 795897"];
17019 [label="param GetHashCode(this) 795898"];
17020 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 795899"];
17021 [label="parent.Parent 795900"];
17022 [label="resultBinder = VisitCore(parent.Parent); 795901"];
17023 [label="VisitCore(parent.Parent) 795902"];
17024 [label="param VisitCore(SyntaxNode node) 795903"];
17025 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 795904"];
17026 [label="param VisitNamespaceDeclaration(this) 795905"];
17027 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 795906"];
17028 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 795907"];
17029 [label="LookupPosition.IsInNamespaceDeclaration(_position, parent) 795908"];
17030 [label="param IsInNamespaceDeclaration(int position) 795909"];
17031 [label="param IsInNamespaceDeclaration(NamespaceDeclarationSyntax namespaceDecl) 795910"];
17032 [label="Debug.Assert(namespaceDecl != null); 795911"];
17033 [label="Debug.Assert(namespaceDecl != null); 795912"];
17034 [label="return IsBetweenTokens(position, namespaceDecl.NamespaceKeyword, namespaceDecl.CloseBraceToken); 795913"];
17035 [label="return IsBetweenTokens(position, namespaceDecl.NamespaceKeyword, namespaceDecl.CloseBraceToken); 795914"];
17036 [label="namespaceDecl.NamespaceKeyword 795915"];
17037 [label="get\n            {\n                return (InternalSyntax.NamespaceDeclarationSyntax)base.Green;\n            } 795916"];
17038 [label="=> true 795917"];
17039 [label="return IsBetweenTokens(position, namespaceDecl.NamespaceKeyword, namespaceDecl.CloseBraceToken); 795918"];
17040 [label="namespaceDecl.CloseBraceToken 795919"];
17041 [label="get\n            {\n                return (InternalSyntax.NamespaceDeclarationSyntax)base.Green;\n            } 795920"];
17042 [label="=> true 795921"];
17043 [label="return IsBetweenTokens(position, namespaceDecl.NamespaceKeyword, namespaceDecl.CloseBraceToken); 795922"];
17044 [label="IsBetweenTokens(position, namespaceDecl.NamespaceKeyword, namespaceDecl.CloseBraceToken) 795923"];
17045 [label="param IsBetweenTokens(int position) 795924"];
17046 [label="param IsBetweenTokens(SyntaxToken firstIncluded) 795925"];
17047 [label="param IsBetweenTokens(SyntaxToken firstExcluded) 795926"];
17048 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795927"];
17049 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795928"];
17050 [label="param GetLeadingTrivia(this) 795929"];
17051 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795930"];
17052 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 795931"];
17053 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 795932"];
17054 [label="parent.OpenBraceToken 795933"];
17055 [label="get\n            {\n                return (InternalSyntax.NamespaceDeclarationSyntax)base.Green;\n            } 795934"];
17056 [label="=> true 795935"];
17057 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 795936"];
17058 [label="parent.CloseBraceToken 795937"];
17059 [label="get\n            {\n                return (InternalSyntax.NamespaceDeclarationSyntax)base.Green;\n            } 795938"];
17060 [label="=> true 795939"];
17061 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 795940"];
17062 [label="LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) 795941"];
17063 [label="param IsBetweenTokens(int position) 795942"];
17064 [label="param IsBetweenTokens(SyntaxToken firstIncluded) 795943"];
17065 [label="param IsBetweenTokens(SyntaxToken firstExcluded) 795944"];
17066 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795945"];
17067 [label="return position >= firstIncluded.SpanStart && IsBeforeToken(position, firstExcluded); 795946"];
17068 [label="param GetLeadingTrivia(this) 795947"];
17069 [label="return firstExcluded.Kind() == SyntaxKind.None || position < firstExcluded.SpanStart; 795948"];
17070 [label="bool inUsing = IsInUsing(parent); 795949"];
17071 [label="IsInUsing(parent) 795950"];
17072 [label="param IsInUsing(CSharpSyntaxNode containingNode) 795951"];
17073 [label="param IsInUsing(this) 795952"];
17074 [label="TextSpan containingSpan = containingNode.Span; 795953"];
17075 [label="containingNode.Span 795954"];
17076 [label="param GetLeadingTriviaWidth(this) 795955"];
17077 [label="param GetTrailingTriviaWidth(this) 795956"];
17078 [label="param GetTrailingTrivia(this) 795957"];
17079 [label="TextSpan containingSpan = containingNode.Span; 795958"];
17080 [label="SyntaxToken token; 795959"];
17081 [label="token 795960"];
17082 [label="containingNode.Kind() 795961"];
17083 [label="param Kind(this) 795962"];
17084 [label="return (SyntaxKind)this.Green.RawKind; 795963"];
17085 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 795964"];
17086 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 795965"];
17087 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 795966"];
17088 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 795967"];
17089 [label="token = containingNode.FindToken(_position); 795968"];
17090 [label="token = containingNode.FindToken(_position); 795969"];
17091 [label="containingNode.FindToken(_position) 795970"];
17092 [label="param FindToken(int position) 795971"];
17093 [label="param FindToken(bool findInsideTrivia = false) 795972"];
17094 [label="param FindToken(this) 795973"];
17095 [label="return base.FindToken(position, findInsideTrivia); 795974"];
17096 [label="return base.FindToken(position, findInsideTrivia); 795975"];
17097 [label="return base.FindToken(position, findInsideTrivia); 795976"];
17098 [label="return base.FindToken(position, findInsideTrivia); 795977"];
17099 [label="return base.FindToken(position, findInsideTrivia); 795978"];
17100 [label="=> true 795979"];
17101 [label="var node = token.Parent; 795980"];
17102 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 795981"];
17103 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 795982"];
17104 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 795983"];
17105 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 795984"];
17106 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 795985"];
17107 [label="node.IsKind(SyntaxKind.UsingDirective) 795986"];
17108 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 795987"];
17109 [label="param IsKind(SyntaxKind kind) 795988"];
17110 [label="return node?.RawKind == (int)kind; 795989"];
17111 [label="node = node.Parent; 795990"];
17112 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 795991"];
17113 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 795992"];
17114 [label="node.IsKind(SyntaxKind.UsingDirective) 795993"];
17115 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 795994"];
17116 [label="param IsKind(SyntaxKind kind) 795995"];
17117 [label="return node?.RawKind == (int)kind; 795996"];
17118 [label="return false; 795997"];
17119 [label="bool inUsing = IsInUsing(parent); 795998"];
17120 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 795999"];
17121 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 796000"];
17122 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 796001"];
17123 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 796002"];
17124 [label="VisitNamespaceDeclaration(parent, _position, inBody, inUsing) 796003"];
17125 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 796004"];
17126 [label="param VisitNamespaceDeclaration(int position) 796005"];
17127 [label="param VisitNamespaceDeclaration(bool inBody) 796006"];
17128 [label="param VisitNamespaceDeclaration(bool inUsing) 796007"];
17129 [label="param VisitNamespaceDeclaration(this) 796008"];
17130 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 796009"];
17131 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 796010"];
17132 [label="inUsing 796011"];
17133 [label="inBody 796012"];
17134 [label="var extraInfo = inUsing ? NodeUsage.NamespaceUsings : (inBody ? NodeUsage.NamespaceBody : NodeUsage.Normal); 796013"];
17135 [label="var key = CreateBinderCacheKey(parent, extraInfo); 796014"];
17136 [label="var key = CreateBinderCacheKey(parent, extraInfo); 796015"];
17137 [label="CreateBinderCacheKey(parent, extraInfo) 796016"];
17138 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 796017"];
17139 [label="param CreateBinderCacheKey(NodeUsage usage) 796018"];
17140 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 796019"];
17141 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 796020"];
17142 [label="var key = CreateBinderCacheKey(parent, extraInfo); 796021"];
17143 [label="Binder result; 796022"];
17144 [label="binderCache 796023"];
17145 [label="get\n                {\n                    return _factory._binderCache;\n                } 796024"];
17146 [label="return _factory._binderCache; 796025"];
17147 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796026"];
17148 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796027"];
17149 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796028"];
17150 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796029"];
17151 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796030"];
17152 [label="Binder outer; 796031"];
17153 [label="parent.Parent 796032"];
17154 [label="var container = parent.Parent; 796033"];
17155 [label="InScript 796034"];
17156 [label="get\n                {\n                    return _factory.InScript;\n                } 796035"];
17157 [label="_factory.InScript 796036"];
17158 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 796037"];
17159 [label="return _factory.InScript; 796038"];
17160 [label="if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    } 796039"];
17161 [label="parent.Parent 796040"];
17162 [label="outer = _factory.GetBinder(parent.Parent, position); 796041"];
17163 [label="outer = _factory.GetBinder(parent.Parent, position); 796042"];
17164 [label="outer = _factory.GetBinder(parent.Parent, position); 796043"];
17165 [label="_factory.GetBinder(parent.Parent, position) 796044"];
17166 [label="param GetBinder(SyntaxNode node) 796045"];
17167 [label="param GetBinder(int position) 796046"];
17168 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 796047"];
17169 [label="param GetBinder(Symbol memberOpt = null) 796048"];
17170 [label="Debug.Assert(node != null); 796049"];
17171 [label="Debug.Assert(node != null); 796050"];
17172 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 796051"];
17173 [label="param CSharpSyntaxVisitor(this) 796052"];
17174 [label="_factory 796053"];
17175 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 796054"];
17176 [label="memberDeclarationOpt == null 796055"];
17177 [label="param ==(Symbol left) 796056"];
17178 [label="param ==(Symbol right) 796057"];
17179 [label="if (right is null)\n            {\n                return left is null;\n            } 796058"];
17180 [label="return left is null; 796059"];
17181 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 796060"];
17182 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 796061"];
17183 [label="return ((CSharpSyntaxNode)node).Accept(this); 796062"];
17184 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 796063"];
17185 [label="param VisitCompilationUnit(this) 796064"];
17186 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 796065"];
17187 [label="IsInUsing(parent) 796066"];
17188 [label="param IsInUsing(CSharpSyntaxNode containingNode) 796067"];
17189 [label="param IsInUsing(this) 796068"];
17190 [label="param GetTrailingTrivia(this) 796069"];
17191 [label="SyntaxToken token; 796070"];
17192 [label="token 796071"];
17193 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 796072"];
17194 [label="=> true 796073"];
17195 [label="var node = token.Parent; 796074"];
17196 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 796075"];
17197 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 796076"];
17198 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 796077"];
17199 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 796078"];
17200 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 796079"];
17201 [label="node.IsKind(SyntaxKind.UsingDirective) 796080"];
17202 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 796081"];
17203 [label="param IsKind(SyntaxKind kind) 796082"];
17204 [label="return node?.RawKind == (int)kind; 796083"];
17205 [label="node = node.Parent; 796084"];
17206 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 796085"];
17207 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 796086"];
17208 [label="node.IsKind(SyntaxKind.UsingDirective) 796087"];
17209 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 796088"];
17210 [label="param IsKind(SyntaxKind kind) 796089"];
17211 [label="return node?.RawKind == (int)kind; 796090"];
17212 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 796091"];
17213 [label="InScript 796092"];
17214 [label="get\n                {\n                    return _factory.InScript;\n                } 796093"];
17215 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 796094"];
17216 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 796095"];
17217 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 796096"];
17218 [label="param VisitCompilationUnit(bool inUsing) 796097"];
17219 [label="param VisitCompilationUnit(bool inScript) 796098"];
17220 [label="param VisitCompilationUnit(this) 796099"];
17221 [label="syntaxTree 796100"];
17222 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 796101"];
17223 [label="return _factory._syntaxTree; 796102"];
17224 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 796103"];
17225 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 796104"];
17226 [label="param GetRoot(CancellationToken cancellationToken) 796105"];
17227 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 796106"];
17228 [label="inUsing 796107"];
17229 [label="inScript 796108"];
17230 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 796109"];
17231 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 796110"];
17232 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 796111"];
17233 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 796112"];
17234 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 796113"];
17235 [label="param CreateBinderCacheKey(NodeUsage usage) 796114"];
17236 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 796115"];
17237 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 796116"];
17238 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 796117"];
17239 [label="Binder result; 796118"];
17240 [label="binderCache 796119"];
17241 [label="get\n                {\n                    return _factory._binderCache;\n                } 796120"];
17242 [label="return _factory._binderCache; 796121"];
17243 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796122"];
17244 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796123"];
17245 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796124"];
17246 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796125"];
17247 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 796126"];
17248 [label="this.buckStopsHereBinder 796127"];
17249 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 796128"];
17250 [label="return _factory._buckStopsHereBinder; 796129"];
17251 [label="result = this.buckStopsHereBinder; 796130"];
17252 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 796131"];
17253 [label="compilation 796132"];
17254 [label="get\n                {\n                    return _factory._compilation;\n                } 796133"];
17255 [label="return _factory._compilation; 796134"];
17256 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 796135"];
17257 [label="compilation.GlobalNamespace 796136"];
17258 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 796137"];
17259 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 796138"];
17260 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 796139"];
17261 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 796140"];
17262 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 796141"];
17263 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 796142"];
17264 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 796143"];
17265 [label="param InContainerBinder(Binder next) 796144"];
17266 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 796145"];
17267 [label="param InContainerBinder(bool inUsing) 796146"];
17268 [label="param InContainerBinder(this) 796147"];
17269 [label="next 796148"];
17270 [label="param InContainerBinder(this) 796149"];
17271 [label="param Binder(Binder next) 796150"];
17272 [label="param Binder(this) 796151"];
17273 [label="param Binder(Conversions? conversions = null) 796152"];
17274 [label="RoslynDebug.Assert(next != null); 796153"];
17275 [label="RoslynDebug.Assert(next != null); 796154"];
17276 [label="Next 796155"];
17277 [label="this.Flags 796156"];
17278 [label="this.Compilation 796157"];
17279 [label="_lazyConversions 796158"];
17280 [label="_container 796159"];
17281 [label="_computeImports 796160"];
17282 [label="_lazyImports 796161"];
17283 [label="_lazyImportChain 796162"];
17284 [label="_lazyQuickAttributeChecker 796163"];
17285 [label="Debug.Assert((object)container != null); 796164"];
17286 [label="Debug.Assert((object)container != null); 796165"];
17287 [label="Debug.Assert(declarationSyntax != null); 796166"];
17288 [label="Debug.Assert(declarationSyntax != null); 796167"];
17289 [label="_container 796168"];
17290 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 796169"];
17291 [label="_computeImports 796170"];
17292 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 796171"];
17293 [label="declarationSyntax.Kind() 796172"];
17294 [label="param Kind(this) 796173"];
17295 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 796174"];
17296 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 796175"];
17297 [label="_usingsSyntax 796176"];
17298 [label="compilation 796177"];
17299 [label="get\n                {\n                    return _factory._compilation;\n                } 796178"];
17300 [label="return _factory._compilation; 796179"];
17301 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 796180"];
17302 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 796181"];
17303 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 796182"];
17304 [label="SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) 796183"];
17305 [label="param GetSimpleProgramEntryPoint(CSharpCompilation compilation) 796184"];
17306 [label="param GetSimpleProgramEntryPoint(CompilationUnitSyntax compilationUnit) 796185"];
17307 [label="param GetSimpleProgramEntryPoint(bool fallbackToMainEntryPoint) 796186"];
17308 [label="var type = GetSimpleProgramNamedTypeSymbol(compilation); 796187"];
17309 [label="GetSimpleProgramNamedTypeSymbol(compilation) 796188"];
17310 [label="param GetSimpleProgramNamedTypeSymbol(CSharpCompilation compilation) 796189"];
17311 [label="compilation.SourceModule 796190"];
17312 [label="get\n            {\n                return Assembly.Modules[0];\n            } 796191"];
17313 [label="Assembly 796192"];
17314 [label="get\n            {\n                return SourceAssembly;\n            } 796193"];
17315 [label="GetBoundReferenceManager(); 796194"];
17316 [label="return Assembly.Modules[0]; 796195"];
17317 [label="Assembly.Modules 796196"];
17318 [label="get\n            {\n                return _modules;\n            } 796197"];
17319 [label="return Assembly.Modules[0]; 796198"];
17320 [label="return compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName).OfType<SimpleProgramNamedTypeSymbol>().SingleOrDefault(); 796199"];
17321 [label="compilation.SourceModule.GlobalNamespace 796200"];
17322 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 796201"];
17323 [label="return compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName).OfType<SimpleProgramNamedTypeSymbol>().SingleOrDefault(); 796202"];
17324 [label="compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName) 796203"];
17325 [label="param GetTypeMembers(string name) 796204"];
17326 [label="param GetTypeMembers(this) 796205"];
17327 [label="bool hasType = false; 796206"];
17328 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 796207"];
17329 [label="symbol.Kind 796208"];
17330 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 796209"];
17331 [label="Debug.Assert(symbol.Kind == SymbolKind.Namespace); 796210"];
17332 [label="hasNamespace = true; 796211"];
17333 [label="if (hasType)\n                        {\n                            break;\n                        } 796212"];
17334 [label="if (type is null)\n            {\n                return null;\n            } 796213"];
17335 [label="return null; 796214"];
17336 [label="binderCache 796215"];
17337 [label="return _factory._binderCache; 796216"];
17338 [label="binderCache.TryAdd(key, result); 796217"];
17339 [label="binderCache.TryAdd(key, result); 796218"];
17340 [label="binderCache.TryAdd(key, result); 796219"];
17341 [label="binderCache.TryAdd(key, result); 796220"];
17342 [label="binderCache.TryAdd(key, result); 796221"];
17343 [label="return result; 796222"];
17344 [label="return ((CSharpSyntaxNode)node).Accept(this); 796223"];
17345 [label="_binderFactoryVisitorPool.Free(visitor); 796224"];
17346 [label="_binderFactoryVisitorPool.Free(visitor); 796225"];
17347 [label="return result; 796226"];
17348 [label="if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    } 796227"];
17349 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 796228"];
17350 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 796229"];
17351 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 796230"];
17352 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 796231"];
17353 [label="MakeNamespaceBinder(parent, parent.Name, outer, inUsing) 796232"];
17354 [label="param MakeNamespaceBinder(CSharpSyntaxNode node) 796233"];
17355 [label="param MakeNamespaceBinder(NameSyntax name) 796234"];
17356 [label="param MakeNamespaceBinder(Binder outer) 796235"];
17357 [label="param MakeNamespaceBinder(bool inUsing) 796236"];
17358 [label="param MakeNamespaceBinder(this) 796237"];
17359 [label="QualifiedNameSyntax dotted; 796238"];
17360 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 796239"];
17361 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 796240"];
17362 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 796241"];
17363 [label="NamespaceOrTypeSymbol container; 796242"];
17364 [label="if (outer is InContainerBinder inContainerBinder)\n                {\n                    container = inContainerBinder.Container;\n                }\n                else\n                {\n                    Debug.Assert(outer is SimpleProgramUnitBinder);\n                    container = outer.Compilation.GlobalNamespace;\n                } 796243"];
17365 [label="inContainerBinder.Container 796244"];
17366 [label="get\n            {\n                return _container;\n            } 796245"];
17367 [label="return _container; 796246"];
17368 [label="container = inContainerBinder.Container; 796247"];
17369 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 796248"];
17370 [label="((NamespaceSymbol)container).GetNestedNamespace(name) 796249"];
17371 [label="param GetNestedNamespace(NameSyntax name) 796250"];
17372 [label="param GetNestedNamespace(this) 796251"];
17373 [label="name.Kind() 796252"];
17374 [label="param Kind(this) 796253"];
17375 [label="switch (name.Kind())\n            {\n                case SyntaxKind.GenericName: // DeclarationTreeBuilder.VisitNamespace uses the PlainName, even for generic names\n                case SyntaxKind.IdentifierName:\n                    return this.GetNestedNamespace(((SimpleNameSyntax)name).Identifier.ValueText);\n\n                case SyntaxKind.QualifiedName:\n                    var qn = (QualifiedNameSyntax)name;\n                    var leftNs = this.GetNestedNamespace(qn.Left);\n                    if ((object)leftNs != null)\n                    {\n                        return leftNs.GetNestedNamespace(qn.Right);\n                    }\n\n                    break;\n\n                case SyntaxKind.AliasQualifiedName:\n                    // This is an error scenario, but we should still handle it.\n                    // We recover in the same way as DeclarationTreeBuilder.VisitNamespaceDeclaration.\n                    return this.GetNestedNamespace(name.GetUnqualifiedName().Identifier.ValueText);\n            } 796254"];
17376 [label="return this.GetNestedNamespace(((SimpleNameSyntax)name).Identifier.ValueText); 796255"];
17377 [label="((SimpleNameSyntax)name).Identifier 796256"];
17378 [label="=> true 796257"];
17379 [label="return this.GetNestedNamespace(((SimpleNameSyntax)name).Identifier.ValueText); 796258"];
17380 [label="param GetValueText(this) 796259"];
17381 [label="param GetNestedNamespace(string name) 796260"];
17382 [label="param GetNestedNamespace(this) 796261"];
17383 [label="foreach (var sym in this.GetMembers(name))\n            {\n                if (sym.Kind == SymbolKind.Namespace)\n                {\n                    return (NamespaceSymbol)sym;\n                }\n            } 796262"];
17384 [label="this.GetMembers(name) 796263"];
17385 [label="param GetMembers(string name) 796264"];
17386 [label="param GetMembers(this) 796265"];
17387 [label="return _cachedLookup[name]; 796266"];
17388 [label="sym.Kind 796267"];
17389 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 796268"];
17390 [label="if (sym.Kind == SymbolKind.Namespace)\n                {\n                    return (NamespaceSymbol)sym;\n                } 796269"];
17391 [label="return (NamespaceSymbol)sym; 796270"];
17392 [label="return this.GetNestedNamespace(((SimpleNameSyntax)name).Identifier.ValueText); 796271"];
17393 [label="if ((object)ns == null) return outer; 796272"];
17394 [label="if ((object)ns == null) return outer; 796273"];
17395 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 796274"];
17396 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 796275"];
17397 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 796276"];
17398 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 796277"];
17399 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 796278"];
17400 [label="new InContainerBinder(ns, outer, node, inUsing: inUsing) 796279"];
17401 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 796280"];
17402 [label="param InContainerBinder(Binder next) 796281"];
17403 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 796282"];
17404 [label="param InContainerBinder(bool inUsing) 796283"];
17405 [label="param InContainerBinder(this) 796284"];
17406 [label="param InContainerBinder(this) 796285"];
17407 [label="param Binder(this) 796286"];
17408 [label="param Binder(Conversions? conversions = null) 796287"];
17409 [label="RoslynDebug.Assert(next != null); 796288"];
17410 [label="RoslynDebug.Assert(next != null); 796289"];
17411 [label="this.Flags 796290"];
17412 [label="this.Compilation 796291"];
17413 [label="_lazyConversions 796292"];
17414 [label="_container 796293"];
17415 [label="_computeImports 796294"];
17416 [label="_lazyImports 796295"];
17417 [label="_lazyImportChain 796296"];
17418 [label="_lazyQuickAttributeChecker 796297"];
17419 [label="Debug.Assert((object)container != null); 796298"];
17420 [label="Debug.Assert((object)container != null); 796299"];
17421 [label="Debug.Assert(declarationSyntax != null); 796300"];
17422 [label="Debug.Assert(declarationSyntax != null); 796301"];
17423 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 796302"];
17424 [label="_computeImports 796303"];
17425 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 796304"];
17426 [label="declarationSyntax.Kind() 796305"];
17427 [label="param Kind(this) 796306"];
17428 [label="return (SyntaxKind)this.Green.RawKind; 796307"];
17429 [label="declarationSyntax.Kind() 796308"];
17430 [label="if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 796309"];
17431 [label="var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax; 796310"];
17432 [label="_usingsSyntax 796311"];
17433 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 796312"];
17434 [label="binderCache 796313"];
17435 [label="return _factory._binderCache; 796314"];
17436 [label="binderCache.TryAdd(key, result); 796315"];
17437 [label="binderCache.TryAdd(key, result); 796316"];
17438 [label="binderCache.TryAdd(key, result); 796317"];
17439 [label="binderCache.TryAdd(key, result); 796318"];
17440 [label="binderCache.TryAdd(key, result); 796319"];
17441 [label="return result; 796320"];
17442 [label="return ((CSharpSyntaxNode)node).Accept(this); 796321"];
17443 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 796322"];
17444 [label="resultBinder.ContainingMemberOrLambda 796323"];
17445 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 796324"];
17446 [label="var merged = _container as MergedNamespaceSymbol; 796325"];
17447 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 796326"];
17448 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 796327"];
17449 [label="((object)merged != null) 796328"];
17450 [label="_container 796329"];
17451 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 796330"];
17452 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 796331"];
17453 [label="((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent) 796332"];
17454 [label="param GetSourceTypeMember(TypeDeclarationSyntax syntax) 796333"];
17455 [label="param GetSourceTypeMember(this) 796334"];
17456 [label="return GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax); 796335"];
17457 [label="syntax.Identifier 796336"];
17458 [label="=> true 796337"];
17459 [label="return GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax); 796338"];
17460 [label="return GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax); 796339"];
17461 [label="param GetValueText(this) 796340"];
17462 [label="get\n            {\n                return this.TypeParameterList == null ? 0 : this.TypeParameterList.Parameters.Count;\n            } 796341"];
17463 [label="syntax.Arity 796342"];
17464 [label="param Kind(this) 796343"];
17465 [label="return GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax); 796344"];
17466 [label="GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax) 796345"];
17467 [label="param GetSourceTypeMember(string name) 796346"];
17468 [label="param GetSourceTypeMember(int arity) 796347"];
17469 [label="param GetSourceTypeMember(SyntaxKind kind) 796348"];
17470 [label="param GetSourceTypeMember(CSharpSyntaxNode syntax) 796349"];
17471 [label="param GetSourceTypeMember(this) 796350"];
17472 [label="TypeKind typeKind = kind.ToDeclarationKind().ToTypeKind(); 796351"];
17473 [label="kind.ToDeclarationKind() 796352"];
17474 [label="param ToDeclarationKind(this SyntaxKind kind) 796353"];
17475 [label="switch (kind)\n            {\n                case SyntaxKind.ClassDeclaration: return DeclarationKind.Class;\n                case SyntaxKind.InterfaceDeclaration: return DeclarationKind.Interface;\n                case SyntaxKind.StructDeclaration: return DeclarationKind.Struct;\n                case SyntaxKind.NamespaceDeclaration: return DeclarationKind.Namespace;\n                case SyntaxKind.EnumDeclaration: return DeclarationKind.Enum;\n                case SyntaxKind.DelegateDeclaration: return DeclarationKind.Delegate;\n                case SyntaxKind.RecordDeclaration: return DeclarationKind.Record;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 796354"];
17476 [label="return DeclarationKind.Class; 796355"];
17477 [label="kind.ToDeclarationKind().ToTypeKind() 796356"];
17478 [label="param ToTypeKind(this DeclarationKind kind) 796357"];
17479 [label="foreach (var member in GetTypeMembers(name, arity))\n            {\n                var memberT = member as SourceNamedTypeSymbol;\n                if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                }\n            } 796358"];
17480 [label="foreach (var member in GetTypeMembers(name, arity))\n            {\n                var memberT = member as SourceNamedTypeSymbol;\n                if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                }\n            } 796359"];
17481 [label="GetTypeMembers(name, arity) 796360"];
17482 [label="param GetTypeMembers(string name) 796361"];
17483 [label="param GetTypeMembers(int arity) 796362"];
17484 [label="param GetTypeMembers(this) 796363"];
17485 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 796364"];
17486 [label="GetTypeMembers(name) 796365"];
17487 [label="param GetTypeMembers(string name) 796366"];
17488 [label="param GetTypeMembers(this) 796367"];
17489 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 796368"];
17490 [label="return _nameToTypeMembersMap; 796369"];
17491 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 796370"];
17492 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 796371"];
17493 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 796372"];
17494 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 796373"];
17495 [label="this.Declarations[0].Arity 796374"];
17496 [label="get\n            {\n                return _arity;\n            } 796375"];
17497 [label="return _arity; 796376"];
17498 [label="return declaration.Arity; 796377"];
17499 [label="var memberT = member as SourceNamedTypeSymbol; 796378"];
17500 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 796379"];
17501 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 796380"];
17502 [label="memberT.TypeKind 796381"];
17503 [label="get\n            {\n                return _flags.TypeKind;\n            } 796382"];
17504 [label="_flags.TypeKind 796383"];
17505 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 796384"];
17506 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 796385"];
17507 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 796386"];
17508 [label="return _flags.TypeKind; 796387"];
17509 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 796388"];
17510 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 796389"];
17511 [label="if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    } 796390"];
17512 [label="if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    } 796391"];
17513 [label="memberT.Locations 796392"];
17514 [label="foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        } 796393"];
17515 [label="syntax.SyntaxTree 796394"];
17516 [label="Debug.Assert(result != null); 796395"];
17517 [label="if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            } 796396"];
17518 [label="if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            } 796397"];
17519 [label="syntax.Span 796398"];
17520 [label="param GetLeadingTriviaWidth(this) 796399"];
17521 [label="param GetTrailingTriviaWidth(this) 796400"];
17522 [label="if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            } 796401"];
17523 [label="return memberT; 796402"];
17524 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 796403"];
17525 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 796404"];
17526 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 796405"];
17527 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 796406"];
17528 [label="new InContainerBinder(typeSymbol, resultBinder) 796407"];
17529 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 796408"];
17530 [label="param InContainerBinder(Binder next) 796409"];
17531 [label="param InContainerBinder(Imports imports = null) 796410"];
17532 [label="param InContainerBinder(this) 796411"];
17533 [label="next 796412"];
17534 [label="param InContainerBinder(this) 796413"];
17535 [label="param Binder(Binder next) 796414"];
17536 [label="param Binder(this) 796415"];
17537 [label="param Binder(Conversions? conversions = null) 796416"];
17538 [label="RoslynDebug.Assert(next != null); 796417"];
17539 [label="RoslynDebug.Assert(next != null); 796418"];
17540 [label="this.Flags 796419"];
17541 [label="this.Compilation 796420"];
17542 [label="_lazyConversions 796421"];
17543 [label="_container 796422"];
17544 [label="_computeImports 796423"];
17545 [label="_lazyImports 796424"];
17546 [label="_lazyImportChain 796425"];
17547 [label="_lazyQuickAttributeChecker 796426"];
17548 [label="Debug.Assert((object)container != null || imports != null); 796427"];
17549 [label="Debug.Assert((object)container != null || imports != null); 796428"];
17550 [label="_container 796429"];
17551 [label="null 796430"];
17552 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 796431"];
17553 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 796432"];
17554 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 796433"];
17555 [label="null 796434"];
17556 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 796435"];
17557 [label="param Imports(CSharpCompilation compilation) 796436"];
17558 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 796437"];
17559 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 796438"];
17560 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 796439"];
17561 [label="param Imports(DiagnosticBag diagnostics) 796440"];
17562 [label="param Imports(this) 796441"];
17563 [label="_compilation 796442"];
17564 [label="_diagnostics 796443"];
17565 [label="UsingAliases 796444"];
17566 [label="Debug.Assert(usingAliases != null); 796445"];
17567 [label="Debug.Assert(usingAliases != null); 796446"];
17568 [label="Debug.Assert(!usings.IsDefault); 796447"];
17569 [label="Debug.Assert(!externs.IsDefault); 796448"];
17570 [label="_compilation 796449"];
17571 [label="this.UsingAliases 796450"];
17572 [label="this.Usings 796451"];
17573 [label="_diagnostics 796452"];
17574 [label="this.ExternAliases 796453"];
17575 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 796454"];
17576 [label="_lazyImports = imports ?? Imports.Empty; 796455"];
17577 [label="_lazyImports = imports ?? Imports.Empty; 796456"];
17578 [label="_lazyImports 796457"];
17579 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 796458"];
17580 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 796459"];
17581 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 796460"];
17582 [label="parent.Modifiers 796461"];
17583 [label="=> true 796462"];
17584 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 796463"];
17585 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 796464"];
17586 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 796465"];
17587 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 796466"];
17588 [label="param WithUnsafeRegionIfNecessary(this) 796467"];
17589 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 796468"];
17590 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 796469"];
17591 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 796470"];
17592 [label="param Includes(this BinderFlags self) 796471"];
17593 [label="param Includes(BinderFlags other) 796472"];
17594 [label="return (self & other) == other; 796473"];
17595 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 796474"];
17596 [label="modifiers.Any(SyntaxKind.UnsafeKeyword) 796475"];
17597 [label="param Any(this SyntaxTokenList list) 796476"];
17598 [label="param Any(SyntaxKind kind) 796477"];
17599 [label="return list.IndexOf(kind) >= 0; 796478"];
17600 [label="return list.IndexOf(kind) >= 0; 796479"];
17601 [label="list.IndexOf(kind) 796480"];
17602 [label="param IndexOf(this SyntaxTokenList list) 796481"];
17603 [label="param IndexOf(SyntaxKind kind) 796482"];
17604 [label="return list.IndexOf((int)kind); 796483"];
17605 [label="return list.IndexOf((int)kind); 796484"];
17606 [label="return list.IndexOf((int)kind); 796485"];
17607 [label="=> true 796486"];
17608 [label="return list.IndexOf(kind) >= 0; 796487"];
17609 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 796488"];
17610 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 796489"];
17611 [label="binderCache 796490"];
17612 [label="return _factory._binderCache; 796491"];
17613 [label="binderCache.TryAdd(key, resultBinder); 796492"];
17614 [label="binderCache.TryAdd(key, resultBinder); 796493"];
17615 [label="binderCache.TryAdd(key, resultBinder); 796494"];
17616 [label="binderCache.TryAdd(key, resultBinder); 796495"];
17617 [label="binderCache.TryAdd(key, resultBinder); 796496"];
17618 [label="return resultBinder; 796497"];
17619 [label="return ((CSharpSyntaxNode)node).Accept(this); 796498"];
17620 [label="_binderFactoryVisitorPool.Free(visitor); 796499"];
17621 [label="ArrayBuilder<FieldOrPropertyInitializer>? staticInitializers = null; 796500"];
17622 [label="DeclaringCompilation 796501"];
17623 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 796502"];
17624 [label="this.Kind 796503"];
17625 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 796504"];
17626 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 796505"];
17627 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 796506"];
17628 [label="this.ContainingSymbol 796507"];
17629 [label="get\n            {\n                return _containingSymbol;\n            } 796508"];
17630 [label="return _containingSymbol; 796509"];
17631 [label="return (object)container != null ? container.ContainingModule : null; 796510"];
17632 [label="var compilation = DeclaringCompilation; 796511"];
17633 [label="foreach (var m in members)\n            {\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                bool reportMisplacedGlobalCode = !m.HasErrors;\n\n                switch (m.Kind())\n                {\n                    case SyntaxKind.FieldDeclaration:\n                        {\n                            var fieldSyntax = (FieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            bool modifierErrors;\n                            var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors);\n                            foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.MethodDeclaration:\n                        {\n                            var methodSyntax = (MethodDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(methodSyntax.Identifier));\n                            }\n\n                            var method = SourceOrdinaryMethodSymbol.CreateMethodSymbol(this, bodyBinder, methodSyntax, compilation.IsNullableAnalysisEnabledIn(methodSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.ConstructorDeclaration:\n                        {\n                            var constructorSyntax = (ConstructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            }\n\n                            bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax);\n                            var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics);\n                            builder.NonTypeMembers.Add(constructor);\n                            if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.DestructorDeclaration:\n                        {\n                            var destructorSyntax = (DestructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(destructorSyntax.Identifier));\n                            }\n\n                            // CONSIDER: if this doesn't (directly or indirectly) override object.Finalize, the\n                            // runtime won't consider it a finalizer and it will not be marked as a destructor\n                            // when it is loaded from metadata.  Perhaps we should just treat it as an Ordinary\n                            // method in such cases?\n                            var destructor = new SourceDestructorSymbol(this, destructorSyntax, compilation.IsNullableAnalysisEnabledIn(destructorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(destructor);\n                        }\n                        break;\n\n                    case SyntaxKind.PropertyDeclaration:\n                        {\n                            var propertySyntax = (PropertyDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(propertySyntax.Identifier));\n                            }\n\n                            var property = SourcePropertySymbol.Create(this, bodyBinder, propertySyntax, diagnostics);\n                            builder.NonTypeMembers.Add(property);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.SetMethod);\n                            FieldSymbol backingField = property.BackingField;\n\n                            // TODO: can we leave this out of the member list?\n                            // From the 10/12/11 design notes:\n                            //   In addition, we will change autoproperties to behavior in\n                            //   a similar manner and make the autoproperty fields private.\n                            if ((object)backingField != null)\n                            {\n                                builder.NonTypeMembers.Add(backingField);\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: backingField.IsStatic, compilation, propertySyntax);\n\n                                var initializer = propertySyntax.Initializer;\n                                if (initializer != null)\n                                {\n                                    if (IsScriptClass)\n                                    {\n                                        // also gather expression-declared variables from the initializer\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                                                      initializer,\n                                                                                      this,\n                                                                                      DeclarationModifiers.Private | (property.IsStatic ? DeclarationModifiers.Static : 0),\n                                                                                      backingField);\n                                    }\n\n                                    if (property.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, backingField, initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, backingField, initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventFieldDeclaration:\n                        {\n                            var eventFieldSyntax = (EventFieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(\n                                    ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventFieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            foreach (VariableDeclaratorSyntax declarator in eventFieldSyntax.Declaration.Variables)\n                            {\n                                SourceFieldLikeEventSymbol @event = new SourceFieldLikeEventSymbol(this, bodyBinder, eventFieldSyntax.Modifiers, declarator, diagnostics);\n                                builder.NonTypeMembers.Add(@event);\n\n                                FieldSymbol? associatedField = @event.AssociatedField;\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, declarator, this,\n                                                            DeclarationModifiers.Private | (@event.IsStatic ? DeclarationModifiers.Static : 0),\n                                                            associatedField);\n                                }\n\n                                if ((object?)associatedField != null)\n                                {\n                                    // NOTE: specifically don't add the associated field to the members list\n                                    // (regard it as an implementation detail).\n\n                                    builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: associatedField.IsStatic, compilation, declarator);\n\n                                    if (declarator.Initializer != null)\n                                    {\n                                        if (associatedField.IsStatic)\n                                        {\n                                            AddInitializer(ref staticInitializers, associatedField, declarator.Initializer);\n                                        }\n                                        else\n                                        {\n                                            AddInitializer(ref instanceInitializers, associatedField, declarator.Initializer);\n                                        }\n                                    }\n                                }\n\n                                Debug.Assert((object)@event.AddMethod != null);\n                                Debug.Assert((object)@event.RemoveMethod != null);\n\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventDeclaration:\n                        {\n                            var eventSyntax = (EventDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventSyntax.Identifier));\n                            }\n\n                            var @event = new SourceCustomEventSymbol(this, bodyBinder, eventSyntax, diagnostics);\n\n                            builder.NonTypeMembers.Add(@event);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n\n                            Debug.Assert(@event.AssociatedField is null);\n                        }\n                        break;\n\n                    case SyntaxKind.IndexerDeclaration:\n                        {\n                            var indexerSyntax = (IndexerDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(indexerSyntax.ThisKeyword));\n                            }\n\n                            var indexer = SourcePropertySymbol.Create(this, bodyBinder, indexerSyntax, diagnostics);\n                            builder.HaveIndexers = true;\n                            builder.NonTypeMembers.Add(indexer);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.SetMethod);\n                        }\n                        break;\n\n                    case SyntaxKind.ConversionOperatorDeclaration:\n                        {\n                            var conversionOperatorSyntax = (ConversionOperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(conversionOperatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedConversionSymbol.CreateUserDefinedConversionSymbol(\n                                this, conversionOperatorSyntax, compilation.IsNullableAnalysisEnabledIn(conversionOperatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.OperatorDeclaration:\n                        {\n                            var operatorSyntax = (OperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(operatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedOperatorSymbol.CreateUserDefinedOperatorSymbol(\n                                this, operatorSyntax, compilation.IsNullableAnalysisEnabledIn(operatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.GlobalStatement:\n                        {\n                            var globalStatement = ((GlobalStatementSyntax)m).Statement;\n\n                            if (IsScriptClass)\n                            {\n                                var innerStatement = globalStatement;\n\n                                // drill into any LabeledStatements\n                                while (innerStatement.Kind() == SyntaxKind.LabeledStatement)\n                                {\n                                    innerStatement = ((LabeledStatementSyntax)innerStatement).Statement;\n                                }\n\n                                switch (innerStatement.Kind())\n                                {\n                                    case SyntaxKind.LocalDeclarationStatement:\n                                        // We shouldn't reach this place, but field declarations preceded with a label end up here.\n                                        // This is tracked by https://github.com/dotnet/roslyn/issues/13712. Let's do our best for now.\n                                        var decl = (LocalDeclarationStatementSyntax)innerStatement;\n                                        foreach (var vdecl in decl.Declaration.Variables)\n                                        {\n                                            // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                            ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, vdecl, this, DeclarationModifiers.Private,\n                                                                                          containingFieldOpt: null);\n                                        }\n                                        break;\n\n                                    case SyntaxKind.ExpressionStatement:\n                                    case SyntaxKind.IfStatement:\n                                    case SyntaxKind.YieldReturnStatement:\n                                    case SyntaxKind.ReturnStatement:\n                                    case SyntaxKind.ThrowStatement:\n                                    case SyntaxKind.SwitchStatement:\n                                    case SyntaxKind.LockStatement:\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                  innerStatement,\n                                                  this,\n                                                  DeclarationModifiers.Private,\n                                                  containingFieldOpt: null);\n                                        break;\n\n                                    default:\n                                        // no other statement introduces variables into the enclosing scope\n                                        break;\n                                }\n\n                                AddInitializer(ref instanceInitializers, null, globalStatement);\n                            }\n                            else if (reportMisplacedGlobalCode && !SyntaxFacts.IsSimpleProgramTopLevelStatement((GlobalStatementSyntax)m))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_GlobalStatement, new SourceLocation(globalStatement));\n                            }\n                        }\n                        break;\n\n                    default:\n                        Debug.Assert(\n                            SyntaxFacts.IsTypeDeclaration(m.Kind()) ||\n                            m.Kind() == SyntaxKind.NamespaceDeclaration ||\n                            m.Kind() == SyntaxKind.IncompleteMember);\n                        break;\n                }\n            } 796512"];
17634 [label="foreach (var m in members)\n            {\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                bool reportMisplacedGlobalCode = !m.HasErrors;\n\n                switch (m.Kind())\n                {\n                    case SyntaxKind.FieldDeclaration:\n                        {\n                            var fieldSyntax = (FieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            bool modifierErrors;\n                            var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors);\n                            foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.MethodDeclaration:\n                        {\n                            var methodSyntax = (MethodDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(methodSyntax.Identifier));\n                            }\n\n                            var method = SourceOrdinaryMethodSymbol.CreateMethodSymbol(this, bodyBinder, methodSyntax, compilation.IsNullableAnalysisEnabledIn(methodSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.ConstructorDeclaration:\n                        {\n                            var constructorSyntax = (ConstructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            }\n\n                            bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax);\n                            var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics);\n                            builder.NonTypeMembers.Add(constructor);\n                            if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.DestructorDeclaration:\n                        {\n                            var destructorSyntax = (DestructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(destructorSyntax.Identifier));\n                            }\n\n                            // CONSIDER: if this doesn't (directly or indirectly) override object.Finalize, the\n                            // runtime won't consider it a finalizer and it will not be marked as a destructor\n                            // when it is loaded from metadata.  Perhaps we should just treat it as an Ordinary\n                            // method in such cases?\n                            var destructor = new SourceDestructorSymbol(this, destructorSyntax, compilation.IsNullableAnalysisEnabledIn(destructorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(destructor);\n                        }\n                        break;\n\n                    case SyntaxKind.PropertyDeclaration:\n                        {\n                            var propertySyntax = (PropertyDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(propertySyntax.Identifier));\n                            }\n\n                            var property = SourcePropertySymbol.Create(this, bodyBinder, propertySyntax, diagnostics);\n                            builder.NonTypeMembers.Add(property);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.SetMethod);\n                            FieldSymbol backingField = property.BackingField;\n\n                            // TODO: can we leave this out of the member list?\n                            // From the 10/12/11 design notes:\n                            //   In addition, we will change autoproperties to behavior in\n                            //   a similar manner and make the autoproperty fields private.\n                            if ((object)backingField != null)\n                            {\n                                builder.NonTypeMembers.Add(backingField);\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: backingField.IsStatic, compilation, propertySyntax);\n\n                                var initializer = propertySyntax.Initializer;\n                                if (initializer != null)\n                                {\n                                    if (IsScriptClass)\n                                    {\n                                        // also gather expression-declared variables from the initializer\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                                                      initializer,\n                                                                                      this,\n                                                                                      DeclarationModifiers.Private | (property.IsStatic ? DeclarationModifiers.Static : 0),\n                                                                                      backingField);\n                                    }\n\n                                    if (property.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, backingField, initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, backingField, initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventFieldDeclaration:\n                        {\n                            var eventFieldSyntax = (EventFieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(\n                                    ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventFieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            foreach (VariableDeclaratorSyntax declarator in eventFieldSyntax.Declaration.Variables)\n                            {\n                                SourceFieldLikeEventSymbol @event = new SourceFieldLikeEventSymbol(this, bodyBinder, eventFieldSyntax.Modifiers, declarator, diagnostics);\n                                builder.NonTypeMembers.Add(@event);\n\n                                FieldSymbol? associatedField = @event.AssociatedField;\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, declarator, this,\n                                                            DeclarationModifiers.Private | (@event.IsStatic ? DeclarationModifiers.Static : 0),\n                                                            associatedField);\n                                }\n\n                                if ((object?)associatedField != null)\n                                {\n                                    // NOTE: specifically don't add the associated field to the members list\n                                    // (regard it as an implementation detail).\n\n                                    builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: associatedField.IsStatic, compilation, declarator);\n\n                                    if (declarator.Initializer != null)\n                                    {\n                                        if (associatedField.IsStatic)\n                                        {\n                                            AddInitializer(ref staticInitializers, associatedField, declarator.Initializer);\n                                        }\n                                        else\n                                        {\n                                            AddInitializer(ref instanceInitializers, associatedField, declarator.Initializer);\n                                        }\n                                    }\n                                }\n\n                                Debug.Assert((object)@event.AddMethod != null);\n                                Debug.Assert((object)@event.RemoveMethod != null);\n\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventDeclaration:\n                        {\n                            var eventSyntax = (EventDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventSyntax.Identifier));\n                            }\n\n                            var @event = new SourceCustomEventSymbol(this, bodyBinder, eventSyntax, diagnostics);\n\n                            builder.NonTypeMembers.Add(@event);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n\n                            Debug.Assert(@event.AssociatedField is null);\n                        }\n                        break;\n\n                    case SyntaxKind.IndexerDeclaration:\n                        {\n                            var indexerSyntax = (IndexerDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(indexerSyntax.ThisKeyword));\n                            }\n\n                            var indexer = SourcePropertySymbol.Create(this, bodyBinder, indexerSyntax, diagnostics);\n                            builder.HaveIndexers = true;\n                            builder.NonTypeMembers.Add(indexer);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.SetMethod);\n                        }\n                        break;\n\n                    case SyntaxKind.ConversionOperatorDeclaration:\n                        {\n                            var conversionOperatorSyntax = (ConversionOperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(conversionOperatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedConversionSymbol.CreateUserDefinedConversionSymbol(\n                                this, conversionOperatorSyntax, compilation.IsNullableAnalysisEnabledIn(conversionOperatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.OperatorDeclaration:\n                        {\n                            var operatorSyntax = (OperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(operatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedOperatorSymbol.CreateUserDefinedOperatorSymbol(\n                                this, operatorSyntax, compilation.IsNullableAnalysisEnabledIn(operatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.GlobalStatement:\n                        {\n                            var globalStatement = ((GlobalStatementSyntax)m).Statement;\n\n                            if (IsScriptClass)\n                            {\n                                var innerStatement = globalStatement;\n\n                                // drill into any LabeledStatements\n                                while (innerStatement.Kind() == SyntaxKind.LabeledStatement)\n                                {\n                                    innerStatement = ((LabeledStatementSyntax)innerStatement).Statement;\n                                }\n\n                                switch (innerStatement.Kind())\n                                {\n                                    case SyntaxKind.LocalDeclarationStatement:\n                                        // We shouldn't reach this place, but field declarations preceded with a label end up here.\n                                        // This is tracked by https://github.com/dotnet/roslyn/issues/13712. Let's do our best for now.\n                                        var decl = (LocalDeclarationStatementSyntax)innerStatement;\n                                        foreach (var vdecl in decl.Declaration.Variables)\n                                        {\n                                            // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                            ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, vdecl, this, DeclarationModifiers.Private,\n                                                                                          containingFieldOpt: null);\n                                        }\n                                        break;\n\n                                    case SyntaxKind.ExpressionStatement:\n                                    case SyntaxKind.IfStatement:\n                                    case SyntaxKind.YieldReturnStatement:\n                                    case SyntaxKind.ReturnStatement:\n                                    case SyntaxKind.ThrowStatement:\n                                    case SyntaxKind.SwitchStatement:\n                                    case SyntaxKind.LockStatement:\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                  innerStatement,\n                                                  this,\n                                                  DeclarationModifiers.Private,\n                                                  containingFieldOpt: null);\n                                        break;\n\n                                    default:\n                                        // no other statement introduces variables into the enclosing scope\n                                        break;\n                                }\n\n                                AddInitializer(ref instanceInitializers, null, globalStatement);\n                            }\n                            else if (reportMisplacedGlobalCode && !SyntaxFacts.IsSimpleProgramTopLevelStatement((GlobalStatementSyntax)m))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_GlobalStatement, new SourceLocation(globalStatement));\n                            }\n                        }\n                        break;\n\n                    default:\n                        Debug.Assert(\n                            SyntaxFacts.IsTypeDeclaration(m.Kind()) ||\n                            m.Kind() == SyntaxKind.NamespaceDeclaration ||\n                            m.Kind() == SyntaxKind.IncompleteMember);\n                        break;\n                }\n            } 796513"];
17635 [label="if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                } 796514"];
17636 [label="bool reportMisplacedGlobalCode = !m.HasErrors; 796515"];
17637 [label="m.Kind() 796516"];
17638 [label="switch (m.Kind())\n                {\n                    case SyntaxKind.FieldDeclaration:\n                        {\n                            var fieldSyntax = (FieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            bool modifierErrors;\n                            var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors);\n                            foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.MethodDeclaration:\n                        {\n                            var methodSyntax = (MethodDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(methodSyntax.Identifier));\n                            }\n\n                            var method = SourceOrdinaryMethodSymbol.CreateMethodSymbol(this, bodyBinder, methodSyntax, compilation.IsNullableAnalysisEnabledIn(methodSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.ConstructorDeclaration:\n                        {\n                            var constructorSyntax = (ConstructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            }\n\n                            bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax);\n                            var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics);\n                            builder.NonTypeMembers.Add(constructor);\n                            if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.DestructorDeclaration:\n                        {\n                            var destructorSyntax = (DestructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(destructorSyntax.Identifier));\n                            }\n\n                            // CONSIDER: if this doesn't (directly or indirectly) override object.Finalize, the\n                            // runtime won't consider it a finalizer and it will not be marked as a destructor\n                            // when it is loaded from metadata.  Perhaps we should just treat it as an Ordinary\n                            // method in such cases?\n                            var destructor = new SourceDestructorSymbol(this, destructorSyntax, compilation.IsNullableAnalysisEnabledIn(destructorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(destructor);\n                        }\n                        break;\n\n                    case SyntaxKind.PropertyDeclaration:\n                        {\n                            var propertySyntax = (PropertyDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(propertySyntax.Identifier));\n                            }\n\n                            var property = SourcePropertySymbol.Create(this, bodyBinder, propertySyntax, diagnostics);\n                            builder.NonTypeMembers.Add(property);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.SetMethod);\n                            FieldSymbol backingField = property.BackingField;\n\n                            // TODO: can we leave this out of the member list?\n                            // From the 10/12/11 design notes:\n                            //   In addition, we will change autoproperties to behavior in\n                            //   a similar manner and make the autoproperty fields private.\n                            if ((object)backingField != null)\n                            {\n                                builder.NonTypeMembers.Add(backingField);\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: backingField.IsStatic, compilation, propertySyntax);\n\n                                var initializer = propertySyntax.Initializer;\n                                if (initializer != null)\n                                {\n                                    if (IsScriptClass)\n                                    {\n                                        // also gather expression-declared variables from the initializer\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                                                      initializer,\n                                                                                      this,\n                                                                                      DeclarationModifiers.Private | (property.IsStatic ? DeclarationModifiers.Static : 0),\n                                                                                      backingField);\n                                    }\n\n                                    if (property.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, backingField, initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, backingField, initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventFieldDeclaration:\n                        {\n                            var eventFieldSyntax = (EventFieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(\n                                    ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventFieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            foreach (VariableDeclaratorSyntax declarator in eventFieldSyntax.Declaration.Variables)\n                            {\n                                SourceFieldLikeEventSymbol @event = new SourceFieldLikeEventSymbol(this, bodyBinder, eventFieldSyntax.Modifiers, declarator, diagnostics);\n                                builder.NonTypeMembers.Add(@event);\n\n                                FieldSymbol? associatedField = @event.AssociatedField;\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, declarator, this,\n                                                            DeclarationModifiers.Private | (@event.IsStatic ? DeclarationModifiers.Static : 0),\n                                                            associatedField);\n                                }\n\n                                if ((object?)associatedField != null)\n                                {\n                                    // NOTE: specifically don't add the associated field to the members list\n                                    // (regard it as an implementation detail).\n\n                                    builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: associatedField.IsStatic, compilation, declarator);\n\n                                    if (declarator.Initializer != null)\n                                    {\n                                        if (associatedField.IsStatic)\n                                        {\n                                            AddInitializer(ref staticInitializers, associatedField, declarator.Initializer);\n                                        }\n                                        else\n                                        {\n                                            AddInitializer(ref instanceInitializers, associatedField, declarator.Initializer);\n                                        }\n                                    }\n                                }\n\n                                Debug.Assert((object)@event.AddMethod != null);\n                                Debug.Assert((object)@event.RemoveMethod != null);\n\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventDeclaration:\n                        {\n                            var eventSyntax = (EventDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventSyntax.Identifier));\n                            }\n\n                            var @event = new SourceCustomEventSymbol(this, bodyBinder, eventSyntax, diagnostics);\n\n                            builder.NonTypeMembers.Add(@event);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n\n                            Debug.Assert(@event.AssociatedField is null);\n                        }\n                        break;\n\n                    case SyntaxKind.IndexerDeclaration:\n                        {\n                            var indexerSyntax = (IndexerDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(indexerSyntax.ThisKeyword));\n                            }\n\n                            var indexer = SourcePropertySymbol.Create(this, bodyBinder, indexerSyntax, diagnostics);\n                            builder.HaveIndexers = true;\n                            builder.NonTypeMembers.Add(indexer);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.SetMethod);\n                        }\n                        break;\n\n                    case SyntaxKind.ConversionOperatorDeclaration:\n                        {\n                            var conversionOperatorSyntax = (ConversionOperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(conversionOperatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedConversionSymbol.CreateUserDefinedConversionSymbol(\n                                this, conversionOperatorSyntax, compilation.IsNullableAnalysisEnabledIn(conversionOperatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.OperatorDeclaration:\n                        {\n                            var operatorSyntax = (OperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(operatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedOperatorSymbol.CreateUserDefinedOperatorSymbol(\n                                this, operatorSyntax, compilation.IsNullableAnalysisEnabledIn(operatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.GlobalStatement:\n                        {\n                            var globalStatement = ((GlobalStatementSyntax)m).Statement;\n\n                            if (IsScriptClass)\n                            {\n                                var innerStatement = globalStatement;\n\n                                // drill into any LabeledStatements\n                                while (innerStatement.Kind() == SyntaxKind.LabeledStatement)\n                                {\n                                    innerStatement = ((LabeledStatementSyntax)innerStatement).Statement;\n                                }\n\n                                switch (innerStatement.Kind())\n                                {\n                                    case SyntaxKind.LocalDeclarationStatement:\n                                        // We shouldn't reach this place, but field declarations preceded with a label end up here.\n                                        // This is tracked by https://github.com/dotnet/roslyn/issues/13712. Let's do our best for now.\n                                        var decl = (LocalDeclarationStatementSyntax)innerStatement;\n                                        foreach (var vdecl in decl.Declaration.Variables)\n                                        {\n                                            // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                            ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, vdecl, this, DeclarationModifiers.Private,\n                                                                                          containingFieldOpt: null);\n                                        }\n                                        break;\n\n                                    case SyntaxKind.ExpressionStatement:\n                                    case SyntaxKind.IfStatement:\n                                    case SyntaxKind.YieldReturnStatement:\n                                    case SyntaxKind.ReturnStatement:\n                                    case SyntaxKind.ThrowStatement:\n                                    case SyntaxKind.SwitchStatement:\n                                    case SyntaxKind.LockStatement:\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                  innerStatement,\n                                                  this,\n                                                  DeclarationModifiers.Private,\n                                                  containingFieldOpt: null);\n                                        break;\n\n                                    default:\n                                        // no other statement introduces variables into the enclosing scope\n                                        break;\n                                }\n\n                                AddInitializer(ref instanceInitializers, null, globalStatement);\n                            }\n                            else if (reportMisplacedGlobalCode && !SyntaxFacts.IsSimpleProgramTopLevelStatement((GlobalStatementSyntax)m))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_GlobalStatement, new SourceLocation(globalStatement));\n                            }\n                        }\n                        break;\n\n                    default:\n                        Debug.Assert(\n                            SyntaxFacts.IsTypeDeclaration(m.Kind()) ||\n                            m.Kind() == SyntaxKind.NamespaceDeclaration ||\n                            m.Kind() == SyntaxKind.IncompleteMember);\n                        break;\n                } 796517"];
17639 [label="var fieldSyntax = (FieldDeclarationSyntax)m; 796518"];
17640 [label="IsImplicitClass 796519"];
17641 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.ImplicitClass;\n            } 796520"];
17642 [label="this.declaration.Declarations 796521"];
17643 [label="get\n            {\n                return _declarations;\n            } 796522"];
17644 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.ImplicitClass; 796523"];
17645 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.ImplicitClass; 796524"];
17646 [label="this.declaration.Declarations[0].Kind 796525"];
17647 [label="get\n            {\n                return _kind;\n            } 796526"];
17648 [label="if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            } 796527"];
17649 [label="bool modifierErrors; 796528"];
17650 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796529"];
17651 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796530"];
17652 [label="fieldSyntax.Declaration.Variables 796531"];
17653 [label="param CSharpSyntaxNode(GreenNode green) 796532"];
17654 [label="param CSharpSyntaxNode(SyntaxNode? parent) 796533"];
17655 [label="param CSharpSyntaxNode(int position) 796534"];
17656 [label="param CSharpSyntaxNode(this) 796535"];
17657 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796536"];
17658 [label="fieldSyntax.Declaration.Variables[0].Identifier 796537"];
17659 [label="=> true 796538"];
17660 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796539"];
17661 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796540"];
17662 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796541"];
17663 [label="var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors); 796542"];
17664 [label="SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors) 796543"];
17665 [label="param MakeModifiers(NamedTypeSymbol containingType) 796544"];
17666 [label="param MakeModifiers(SyntaxToken firstIdentifier) 796545"];
17667 [label="param MakeModifiers(SyntaxTokenList modifiers) 796546"];
17668 [label="param MakeModifiers(DiagnosticBag diagnostics) 796547"];
17669 [label="param MakeModifiers(out bool modifierErrors) 796548"];
17670 [label="containingType.IsInterface 796549"];
17671 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 796550"];
17672 [label="this.TypeKind 796551"];
17673 [label="get\n            {\n                return _flags.TypeKind;\n            } 796552"];
17674 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 796553"];
17675 [label="return this.TypeKind == TypeKind.Interface; 796554"];
17676 [label="DeclarationModifiers defaultAccess =\n                (containingType.IsInterface) ? DeclarationModifiers.Public : DeclarationModifiers.Private; 796555"];
17677 [label="(containingType.IsInterface) 796556"];
17678 [label="DeclarationModifiers allowedModifiers =\n                DeclarationModifiers.AccessibilityMask |\n                DeclarationModifiers.Const |\n                DeclarationModifiers.New |\n                DeclarationModifiers.ReadOnly |\n                DeclarationModifiers.Static |\n                DeclarationModifiers.Volatile |\n                DeclarationModifiers.Fixed |\n                DeclarationModifiers.Unsafe |\n                DeclarationModifiers.Abstract; 796557"];
17679 [label="var errorLocation = new SourceLocation(firstIdentifier); 796558"];
17680 [label="var errorLocation = new SourceLocation(firstIdentifier); 796559"];
17681 [label="ArrayBuilder<CSharpSyntaxNode>? nodes = null; 796560"];
17682 [label="SyntaxTree? tree = null; 796561"];
17683 [label="tree = node._syntaxTree; 796562"];
17684 [label="if (tree != null)\n                {\n                    break;\n                } 796563"];
17685 [label="if (tree != null)\n                {\n                    break;\n                } 796564"];
17686 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 796565"];
17687 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 796566"];
17688 [label="Debug.Assert(tree != null); 796567"];
17689 [label="Debug.Assert(tree != null); 796568"];
17690 [label="var existingTree = n._syntaxTree; 796569"];
17691 [label="if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    } 796570"];
17692 [label="if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    } 796571"];
17693 [label="Debug.Assert(result != null); 796572"];
17694 [label="Debug.Assert(result != null); 796573"];
17695 [label="param GetLeadingTrivia(this) 796574"];
17696 [label="DeclarationModifiers result = ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors); 796575"];
17697 [label="DeclarationModifiers result = ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors); 796576"];
17698 [label="DeclarationModifiers result = ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors); 796577"];
17699 [label="DeclarationModifiers result = ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors); 796578"];
17700 [label="DeclarationModifiers result = ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors); 796579"];
17701 [label="DeclarationModifiers result = ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors); 796580"];
17702 [label="ModifierUtils.MakeAndCheckNontypeMemberModifiers(\n                modifiers, defaultAccess, allowedModifiers, errorLocation, diagnostics, out modifierErrors) 796581"];
17703 [label="param MakeAndCheckNontypeMemberModifiers(SyntaxTokenList modifiers) 796582"];
17704 [label="param MakeAndCheckNontypeMemberModifiers(DeclarationModifiers defaultAccess) 796583"];
17705 [label="param MakeAndCheckNontypeMemberModifiers(DeclarationModifiers allowedModifiers) 796584"];
17706 [label="param MakeAndCheckNontypeMemberModifiers(Location errorLocation) 796585"];
17707 [label="param MakeAndCheckNontypeMemberModifiers(DiagnosticBag diagnostics) 796586"];
17708 [label="param MakeAndCheckNontypeMemberModifiers(out bool modifierErrors) 796587"];
17709 [label="var result = modifiers.ToDeclarationModifiers(diagnostics); 796588"];
17710 [label="var result = modifiers.ToDeclarationModifiers(diagnostics); 796589"];
17711 [label="modifiers.ToDeclarationModifiers(diagnostics) 796590"];
17712 [label="param ToDeclarationModifiers(this SyntaxTokenList modifiers) 796591"];
17713 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 796592"];
17714 [label="bool seenNoDuplicates = true; 796593"];
17715 [label="bool seenNoAccessibilityDuplicates = true; 796594"];
17716 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 796595"];
17717 [label="var result = modifiers.ToDeclarationModifiers(diagnostics); 796596"];
17718 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 796597"];
17719 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 796598"];
17720 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 796599"];
17721 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 796600"];
17722 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 796601"];
17723 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 796602"];
17724 [label="CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors) 796603"];
17725 [label="param CheckModifiers(DeclarationModifiers modifiers) 796604"];
17726 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 796605"];
17727 [label="param CheckModifiers(Location errorLocation) 796606"];
17728 [label="param CheckModifiers(DiagnosticBag diagnostics) 796607"];
17729 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 796608"];
17730 [label="param CheckModifiers(out bool modifierErrors) 796609"];
17731 [label="modifierErrors = false; 796610"];
17732 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 796611"];
17733 [label="DeclarationModifiers result = modifiers & allowedModifiers; 796612"];
17734 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 796613"];
17735 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 796614"];
17736 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 796615"];
17737 [label="return result; 796616"];
17738 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 796617"];
17739 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 796618"];
17740 [label="result |= defaultAccess; 796619"];
17741 [label="return result; 796620"];
17742 [label="if ((result & DeclarationModifiers.Abstract) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractField, errorLocation);\n                result &= ~DeclarationModifiers.Abstract;\n            } 796621"];
17743 [label="if ((result & DeclarationModifiers.Abstract) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractField, errorLocation);\n                result &= ~DeclarationModifiers.Abstract;\n            } 796622"];
17744 [label="if ((result & DeclarationModifiers.Fixed) != 0)\n            {\n                if ((result & DeclarationModifiers.Static) != 0)\n                {\n                    // The modifier 'static' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.StaticKeyword));\n                }\n\n                if ((result & DeclarationModifiers.ReadOnly) != 0)\n                {\n                    // The modifier 'readonly' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.ReadOnlyKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Const) != 0)\n                {\n                    // The modifier 'const' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.ConstKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Volatile) != 0)\n                {\n                    // The modifier 'volatile' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.VolatileKeyword));\n                }\n\n                result &= ~(DeclarationModifiers.Static | DeclarationModifiers.ReadOnly | DeclarationModifiers.Const | DeclarationModifiers.Volatile);\n                Debug.Assert((result & ~(DeclarationModifiers.AccessibilityMask | DeclarationModifiers.Fixed | DeclarationModifiers.Unsafe | DeclarationModifiers.New)) == 0);\n            } 796623"];
17745 [label="if ((result & DeclarationModifiers.Fixed) != 0)\n            {\n                if ((result & DeclarationModifiers.Static) != 0)\n                {\n                    // The modifier 'static' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.StaticKeyword));\n                }\n\n                if ((result & DeclarationModifiers.ReadOnly) != 0)\n                {\n                    // The modifier 'readonly' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.ReadOnlyKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Const) != 0)\n                {\n                    // The modifier 'const' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.ConstKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Volatile) != 0)\n                {\n                    // The modifier 'volatile' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.VolatileKeyword));\n                }\n\n                result &= ~(DeclarationModifiers.Static | DeclarationModifiers.ReadOnly | DeclarationModifiers.Const | DeclarationModifiers.Volatile);\n                Debug.Assert((result & ~(DeclarationModifiers.AccessibilityMask | DeclarationModifiers.Fixed | DeclarationModifiers.Unsafe | DeclarationModifiers.New)) == 0);\n            } 796624"];
17746 [label="if ((result & DeclarationModifiers.Const) != 0)\n            {\n                if ((result & DeclarationModifiers.Static) != 0)\n                {\n                    // The constant '{0}' cannot be marked static\n                    diagnostics.Add(ErrorCode.ERR_StaticConstant, errorLocation, firstIdentifier.ValueText);\n                }\n\n                if ((result & DeclarationModifiers.ReadOnly) != 0)\n                {\n                    // The modifier 'readonly' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.ReadOnlyKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Volatile) != 0)\n                {\n                    // The modifier 'volatile' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.VolatileKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Unsafe) != 0)\n                {\n                    // The modifier 'unsafe' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.UnsafeKeyword));\n                }\n\n                result |= DeclarationModifiers.Static; // 'constants are considered static members'\n            }\n            else\n            {\n                // NOTE: always cascading on a const, so suppress.\n                // NOTE: we're being a bit sneaky here - we're using the containingType rather than this symbol\n                // to determine whether or not unsafe is allowed.  Since this symbol and the containing type are\n                // in the same compilation, it won't make a difference.  We do, however, have to pass the error\n                // location explicitly.\n                containingType.CheckUnsafeModifier(result, errorLocation, diagnostics);\n            } 796625"];
17747 [label="if ((result & DeclarationModifiers.Const) != 0)\n            {\n                if ((result & DeclarationModifiers.Static) != 0)\n                {\n                    // The constant '{0}' cannot be marked static\n                    diagnostics.Add(ErrorCode.ERR_StaticConstant, errorLocation, firstIdentifier.ValueText);\n                }\n\n                if ((result & DeclarationModifiers.ReadOnly) != 0)\n                {\n                    // The modifier 'readonly' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.ReadOnlyKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Volatile) != 0)\n                {\n                    // The modifier 'volatile' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.VolatileKeyword));\n                }\n\n                if ((result & DeclarationModifiers.Unsafe) != 0)\n                {\n                    // The modifier 'unsafe' is not valid for this item\n                    diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, SyntaxFacts.GetText(SyntaxKind.UnsafeKeyword));\n                }\n\n                result |= DeclarationModifiers.Static; // 'constants are considered static members'\n            }\n            else\n            {\n                // NOTE: always cascading on a const, so suppress.\n                // NOTE: we're being a bit sneaky here - we're using the containingType rather than this symbol\n                // to determine whether or not unsafe is allowed.  Since this symbol and the containing type are\n                // in the same compilation, it won't make a difference.  We do, however, have to pass the error\n                // location explicitly.\n                containingType.CheckUnsafeModifier(result, errorLocation, diagnostics);\n            } 796626"];
17748 [label="containingType.CheckUnsafeModifier(result, errorLocation, diagnostics); 796627"];
17749 [label="containingType.CheckUnsafeModifier(result, errorLocation, diagnostics); 796628"];
17750 [label="containingType.CheckUnsafeModifier(result, errorLocation, diagnostics); 796629"];
17751 [label="containingType.CheckUnsafeModifier(result, errorLocation, diagnostics); 796630"];
17752 [label="containingType.CheckUnsafeModifier(result, errorLocation, diagnostics) 796631"];
17753 [label="param CheckUnsafeModifier(this Symbol symbol) 796632"];
17754 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 796633"];
17755 [label="param CheckUnsafeModifier(Location errorLocation) 796634"];
17756 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 796635"];
17757 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 796636"];
17758 [label="containingType.CheckUnsafeModifier(result, errorLocation, diagnostics); 796637"];
17759 [label="return result; 796638"];
17760 [label="foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            } 796639"];
17761 [label="var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics); 796640"];
17762 [label="var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics); 796641"];
17763 [label="(modifiers & DeclarationModifiers.Fixed) == 0 796642"];
17764 [label="var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics); 796643"];
17765 [label="var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics); 796644"];
17766 [label="new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics) 796645"];
17767 [label="param SourceMemberFieldSymbolFromDeclarator(SourceMemberContainerTypeSymbol containingType) 796646"];
17768 [label="param SourceMemberFieldSymbolFromDeclarator(VariableDeclaratorSyntax declarator) 796647"];
17769 [label="param SourceMemberFieldSymbolFromDeclarator(DeclarationModifiers modifiers) 796648"];
17770 [label="param SourceMemberFieldSymbolFromDeclarator(bool modifierErrors) 796649"];
17771 [label="param SourceMemberFieldSymbolFromDeclarator(DiagnosticBag diagnostics) 796650"];
17772 [label="param SourceMemberFieldSymbolFromDeclarator(this) 796651"];
17773 [label="containingType 796652"];
17774 [label="modifiers 796653"];
17775 [label="declarator.Identifier 796654"];
17776 [label="declarator.Identifier 796655"];
17777 [label="=> true 796656"];
17778 [label="param GetReference(this) 796657"];
17779 [label="this.SyntaxTree 796658"];
17780 [label="get\n            {\n                var result = this._syntaxTree ?? ComputeSyntaxTree(this);\n                Debug.Assert(result != null);\n                return result;\n            } 796659"];
17781 [label="Debug.Assert(result != null); 796660"];
17782 [label="Debug.Assert(result != null); 796661"];
17783 [label="return this.SyntaxTree.GetReference(this); 796662"];
17784 [label="return this.SyntaxTree.GetReference(this); 796663"];
17785 [label="this.SyntaxTree.GetReference(this) 796664"];
17786 [label="param GetReference(SyntaxNode node) 796665"];
17787 [label="param GetReference(this) 796666"];
17788 [label="return this.SyntaxTree.GetReference(this); 796667"];
17789 [label="declarator.Identifier.ValueText 796668"];
17790 [label="declarator.GetReference() 796669"];
17791 [label="declarator.Identifier 796670"];
17792 [label="declarator.Identifier 796671"];
17793 [label="=> true 796672"];
17794 [label="Debug.Assert(result != null); 796673"];
17795 [label="Debug.Assert(result != null); 796674"];
17796 [label="param GetLeadingTrivia(this) 796675"];
17797 [label="param GetLocation(TextSpan span) 796676"];
17798 [label="param GetLocation(this) 796677"];
17799 [label="return new SourceLocation(this, span); 796678"];
17800 [label="return new SourceLocation(this, span); 796679"];
17801 [label="return new SourceLocation(this, span); 796680"];
17802 [label="param SourceMemberFieldSymbol(SourceMemberContainerTypeSymbol containingType) 796681"];
17803 [label="param SourceMemberFieldSymbol(DeclarationModifiers modifiers) 796682"];
17804 [label="param SourceMemberFieldSymbol(string name) 796683"];
17805 [label="param SourceMemberFieldSymbol(SyntaxReference syntax) 796684"];
17806 [label="param SourceMemberFieldSymbol(Location location) 796685"];
17807 [label="param SourceMemberFieldSymbol(this) 796686"];
17808 [label="containingType 796687"];
17809 [label="name 796688"];
17810 [label="syntax 796689"];
17811 [label="location 796690"];
17812 [label="param SourceMemberFieldSymbol(this) 796691"];
17813 [label="param SourceFieldSymbolWithSyntaxReference(SourceMemberContainerTypeSymbol containingType) 796692"];
17814 [label="param SourceFieldSymbolWithSyntaxReference(string name) 796693"];
17815 [label="param SourceFieldSymbolWithSyntaxReference(SyntaxReference syntax) 796694"];
17816 [label="param SourceFieldSymbolWithSyntaxReference(Location location) 796695"];
17817 [label="param SourceFieldSymbolWithSyntaxReference(this) 796696"];
17818 [label="containingType 796697"];
17819 [label="param SourceFieldSymbolWithSyntaxReference(this) 796698"];
17820 [label="param SourceFieldSymbol(SourceMemberContainerTypeSymbol containingType) 796699"];
17821 [label="param SourceFieldSymbol(this) 796700"];
17822 [label="param SourceFieldSymbol(this) 796701"];
17823 [label="param FieldSymbolWithAttributesAndModifiers(this) 796702"];
17824 [label="param FieldSymbolWithAttributesAndModifiers(this) 796703"];
17825 [label="param FieldSymbol(this) 796704"];
17826 [label="param FieldSymbol(this) 796705"];
17827 [label="_lazyAdapter 796706"];
17828 [label="_lazyCustomAttributesBag 796707"];
17829 [label="containingType 796708"];
17830 [label="Debug.Assert((object)containingType != null); 796709"];
17831 [label="Debug.Assert((object)containingType != null); 796710"];
17832 [label="this.containingType 796711"];
17833 [label="_name 796712"];
17834 [label="_location 796713"];
17835 [label="_syntaxReference 796714"];
17836 [label="_lazyDocComment 796715"];
17837 [label="_lazyExpandedDocComment 796716"];
17838 [label="_lazyConstantEarlyDecodingValue = Microsoft.CodeAnalysis.ConstantValue.Unset 796717"];
17839 [label="_lazyConstantValue = Microsoft.CodeAnalysis.ConstantValue.Unset 796718"];
17840 [label="Debug.Assert(name != null); 796719"];
17841 [label="Debug.Assert(name != null); 796720"];
17842 [label="Debug.Assert(syntax != null); 796721"];
17843 [label="Debug.Assert(syntax != null); 796722"];
17844 [label="Debug.Assert(location != null); 796723"];
17845 [label="Debug.Assert(location != null); 796724"];
17846 [label="_name 796725"];
17847 [label="_syntaxReference 796726"];
17848 [label="_location 796727"];
17849 [label="_modifiers 796728"];
17850 [label="_modifiers 796729"];
17851 [label="declarator.Identifier 796730"];
17852 [label="declarator.Identifier.GetLocation() 796731"];
17853 [label="param SourceMemberFieldSymbolFromDeclarator(this) 796732"];
17854 [label="param SourceMemberFieldSymbolFromDeclarator(this) 796733"];
17855 [label="_hasInitializer 796734"];
17856 [label="_lazyType 796735"];
17857 [label="_lazyFieldTypeInferred 796736"];
17858 [label="_hasInitializer = declarator.Initializer != null; 796737"];
17859 [label="_hasInitializer = declarator.Initializer != null; 796738"];
17860 [label="declarator.Initializer 796739"];
17861 [label="param CSharpSyntaxNode(GreenNode green) 796740"];
17862 [label="param CSharpSyntaxNode(SyntaxNode? parent) 796741"];
17863 [label="param CSharpSyntaxNode(int position) 796742"];
17864 [label="param CSharpSyntaxNode(this) 796743"];
17865 [label="_hasInitializer = declarator.Initializer != null; 796744"];
17866 [label="_hasInitializer 796745"];
17867 [label="this.CheckAccessibility(diagnostics); 796746"];
17868 [label="this.CheckAccessibility(diagnostics) 796747"];
17869 [label="param CheckAccessibility(DiagnosticBag diagnostics) 796748"];
17870 [label="param CheckAccessibility(this) 796749"];
17871 [label="Modifiers 796750"];
17872 [label="get\n            {\n                return _modifiers;\n            } 796751"];
17873 [label="return _modifiers; 796752"];
17874 [label="var info = ModifierUtils.CheckAccessibility(Modifiers, this, isExplicitInterfaceImplementation: false); 796753"];
17875 [label="var info = ModifierUtils.CheckAccessibility(Modifiers, this, isExplicitInterfaceImplementation: false); 796754"];
17876 [label="var info = ModifierUtils.CheckAccessibility(Modifiers, this, isExplicitInterfaceImplementation: false); 796755"];
17877 [label="ModifierUtils.CheckAccessibility(Modifiers, this, isExplicitInterfaceImplementation: false) 796756"];
17878 [label="param CheckAccessibility(DeclarationModifiers modifiers) 796757"];
17879 [label="param CheckAccessibility(Symbol symbol) 796758"];
17880 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 796759"];
17881 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 796760"];
17882 [label="IsValidAccessibility(modifiers) 796761"];
17883 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 796762"];
17884 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 796763"];
17885 [label="return true; 796764"];
17886 [label="symbol.Kind 796765"];
17887 [label="get\n            {\n                return SymbolKind.Field;\n            } 796766"];
17888 [label="return SymbolKind.Field; 796767"];
17889 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 796768"];
17890 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 796769"];
17891 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 796770"];
17892 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 796771"];
17893 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 796772"];
17894 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 796773"];
17895 [label="return null; 796774"];
17896 [label="var info = ModifierUtils.CheckAccessibility(Modifiers, this, isExplicitInterfaceImplementation: false); 796775"];
17897 [label="if (info != null)\n            {\n                diagnostics.Add(new CSDiagnostic(info, this.ErrorLocation));\n            } 796776"];
17898 [label="if (info != null)\n            {\n                diagnostics.Add(new CSDiagnostic(info, this.ErrorLocation));\n            } 796777"];
17899 [label="this.CheckAccessibility(diagnostics); 796778"];
17900 [label="if (!modifierErrors)\n            {\n                this.ReportModifiersDiagnostics(diagnostics);\n            } 796779"];
17901 [label="this.ReportModifiersDiagnostics(diagnostics); 796780"];
17902 [label="this.ReportModifiersDiagnostics(diagnostics) 796781"];
17903 [label="param ReportModifiersDiagnostics(DiagnosticBag diagnostics) 796782"];
17904 [label="param ReportModifiersDiagnostics(this) 796783"];
17905 [label="ContainingType 796784"];
17906 [label="get\n            {\n                return this.containingType;\n            } 796785"];
17907 [label="return this.containingType; 796786"];
17908 [label="if (ContainingType.IsSealed && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(containingType), ErrorLocation, this);\n            }\n            else if (IsVolatile && IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_VolatileAndReadonly, ErrorLocation, this);\n            }\n            else if (containingType.IsStatic && !IsStatic)\n            {\n                diagnostics.Add(ErrorCode.ERR_InstanceMemberInStaticClass, ErrorLocation, this);\n            }\n            else if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796787"];
17909 [label="ContainingType.IsSealed 796788"];
17910 [label="=> HasFlag(DeclarationModifiers.Sealed) 796789"];
17911 [label="DeclarationModifiers.Sealed 796790"];
17912 [label="HasFlag(DeclarationModifiers.Sealed) 796791"];
17913 [label="param HasFlag(DeclarationModifiers flag) 796792"];
17914 [label="=> (_declModifiers & flag) != 0 796793"];
17915 [label="_declModifiers & flag 796794"];
17916 [label="0 796795"];
17917 [label="(_declModifiers & flag) != 0 796796"];
17918 [label="IsVolatile 796797"];
17919 [label="=> (Modifiers & DeclarationModifiers.Volatile) != 0 796798"];
17920 [label="Modifiers 796799"];
17921 [label="get\n            {\n                return _modifiers;\n            } 796800"];
17922 [label="return _modifiers; 796801"];
17923 [label="Modifiers & DeclarationModifiers.Volatile 796802"];
17924 [label="0 796803"];
17925 [label="(Modifiers & DeclarationModifiers.Volatile) != 0 796804"];
17926 [label="if (IsVolatile && IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_VolatileAndReadonly, ErrorLocation, this);\n            }\n            else if (containingType.IsStatic && !IsStatic)\n            {\n                diagnostics.Add(ErrorCode.ERR_InstanceMemberInStaticClass, ErrorLocation, this);\n            }\n            else if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796805"];
17927 [label="containingType.IsStatic 796806"];
17928 [label="=> HasFlag(DeclarationModifiers.Static) 796807"];
17929 [label="DeclarationModifiers.Static 796808"];
17930 [label="HasFlag(DeclarationModifiers.Static) 796809"];
17931 [label="param HasFlag(DeclarationModifiers flag) 796810"];
17932 [label="=> (_declModifiers & flag) != 0 796811"];
17933 [label="_declModifiers & flag 796812"];
17934 [label="if (containingType.IsStatic && !IsStatic)\n            {\n                diagnostics.Add(ErrorCode.ERR_InstanceMemberInStaticClass, ErrorLocation, this);\n            }\n            else if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796813"];
17935 [label="IsStatic 796814"];
17936 [label="=> (Modifiers & DeclarationModifiers.Static) != 0 796815"];
17937 [label="Modifiers 796816"];
17938 [label="get\n            {\n                return _modifiers;\n            } 796817"];
17939 [label="Modifiers & DeclarationModifiers.Static 796818"];
17940 [label="0 796819"];
17941 [label="(Modifiers & DeclarationModifiers.Static) != 0 796820"];
17942 [label="if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796821"];
17943 [label="IsReadOnly 796822"];
17944 [label="=> (Modifiers & DeclarationModifiers.ReadOnly) != 0 796823"];
17945 [label="Modifiers 796824"];
17946 [label="get\n            {\n                return _modifiers;\n            } 796825"];
17947 [label="Modifiers & DeclarationModifiers.ReadOnly 796826"];
17948 [label="0 796827"];
17949 [label="(Modifiers & DeclarationModifiers.ReadOnly) != 0 796828"];
17950 [label="if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796829"];
17951 [label="if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796830"];
17952 [label="containingType.IsReadOnly 796831"];
17953 [label="=> HasFlag(DeclarationModifiers.ReadOnly) 796832"];
17954 [label="DeclarationModifiers.ReadOnly 796833"];
17955 [label="HasFlag(DeclarationModifiers.ReadOnly) 796834"];
17956 [label="param HasFlag(DeclarationModifiers flag) 796835"];
17957 [label="=> (_declModifiers & flag) != 0 796836"];
17958 [label="_declModifiers & flag 796837"];
17959 [label="if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796838"];
17960 [label="if (!IsStatic && !IsReadOnly && containingType.IsReadOnly)\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldsInRoStruct, ErrorLocation);\n            } 796839"];
17961 [label="this.ReportModifiersDiagnostics(diagnostics); 796840"];
17962 [label="containingType.IsInterface 796841"];
17963 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 796842"];
17964 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 796843"];
17965 [label="if (containingType.IsInterface)\n            {\n                if (this.IsStatic)\n                {\n                    Binder.CheckFeatureAvailability(declarator, MessageID.IDS_DefaultInterfaceImplementation, diagnostics, ErrorLocation);\n\n                    if (!ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, ErrorLocation);\n                    }\n                }\n                else\n                {\n                    diagnostics.Add(ErrorCode.ERR_InterfacesCantContainFields, ErrorLocation);\n                }\n            } 796844"];
17966 [label="builder.NonTypeMembers.Add(fieldSymbol); 796845"];
17967 [label="builder.NonTypeMembers.Add(fieldSymbol); 796846"];
17968 [label="fieldSymbol.IsStatic 796847"];
17969 [label="=> (Modifiers & DeclarationModifiers.Static) != 0 796848"];
17970 [label="Modifiers 796849"];
17971 [label="get\n            {\n                return _modifiers;\n            } 796850"];
17972 [label="return _modifiers; 796851"];
17973 [label="Modifiers & DeclarationModifiers.Static 796852"];
17974 [label="0 796853"];
17975 [label="(Modifiers & DeclarationModifiers.Static) != 0 796854"];
17976 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable); 796855"];
17977 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable); 796856"];
17978 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable); 796857"];
17979 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable) 796858"];
17980 [label="param UpdateIsNullableEnabledForConstructorsAndFields(bool useStatic) 796859"];
17981 [label="param UpdateIsNullableEnabledForConstructorsAndFields(CSharpCompilation compilation) 796860"];
17982 [label="param UpdateIsNullableEnabledForConstructorsAndFields(CSharpSyntaxNode syntax) 796861"];
17983 [label="param UpdateIsNullableEnabledForConstructorsAndFields(this) 796862"];
17984 [label="ref bool isNullableEnabled = ref GetIsNullableEnabledForConstructorsAndFields(useStatic); 796863"];
17985 [label="GetIsNullableEnabledForConstructorsAndFields(useStatic) 796864"];
17986 [label="param GetIsNullableEnabledForConstructorsAndFields(bool useStatic) 796865"];
17987 [label="param GetIsNullableEnabledForConstructorsAndFields(this) 796866"];
17988 [label="useStatic 796867"];
17989 [label="IsNullableEnabledForInstanceConstructorsAndFields 796868"];
17990 [label="return ref useStatic ? ref IsNullableEnabledForStaticConstructorsAndFields : ref IsNullableEnabledForInstanceConstructorsAndFields; 796869"];
17991 [label="isNullableEnabled = isNullableEnabled || compilation.IsNullableAnalysisEnabledIn(syntax); 796870"];
17992 [label="compilation.IsNullableAnalysisEnabledIn(syntax) 796871"];
17993 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 796872"];
17994 [label="param IsNullableAnalysisEnabledIn(this) 796873"];
17995 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 796874"];
17996 [label="syntax.SyntaxTree 796875"];
17997 [label="get\n            {\n                return this.SyntaxTree;\n            } 796876"];
17998 [label="Debug.Assert(result != null); 796877"];
17999 [label="Debug.Assert(result != null); 796878"];
18000 [label="syntax.Span 796879"];
18001 [label="param GetLeadingTriviaWidth(this) 796880"];
18002 [label="param GetLeadingTrivia(this) 796881"];
18003 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 796882"];
18004 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 796883"];
18005 [label="param GetTrailingTriviaWidth(this) 796884"];
18006 [label="param GetTrailingTrivia(this) 796885"];
18007 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 796886"];
18008 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 796887"];
18009 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 796888"];
18010 [label="param IsNullableAnalysisEnabledIn(this) 796889"];
18011 [label="GetNullableAnalysisValue() 796890"];
18012 [label="param GetNullableAnalysisValue(this) 796891"];
18013 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 796892"];
18014 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 796893"];
18015 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 796894"];
18016 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796895"];
18017 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796896"];
18018 [label="tree.IsNullableAnalysisEnabled(span) 796897"];
18019 [label="param IsNullableAnalysisEnabled(TextSpan span) 796898"];
18020 [label="=> GetNullableContextStateMap().IsNullableAnalysisEnabled(span) 796899"];
18021 [label="GetNullableContextStateMap() 796900"];
18022 [label="param GetNullableContextStateMap(this) 796901"];
18023 [label="if (_lazyNullableContextStateMap == null)\n            {\n                // Create the #nullable directive map on demand.\n                Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null);\n            } 796902"];
18024 [label="if (_lazyNullableContextStateMap == null)\n            {\n                // Create the #nullable directive map on demand.\n                Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null);\n            } 796903"];
18025 [label="Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null); 796904"];
18026 [label="Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null); 796905"];
18027 [label="NullableContextStateMap.Create(this) 796906"];
18028 [label="param Create(SyntaxTree tree) 796907"];
18029 [label="var contexts = GetContexts(tree); 796908"];
18030 [label="GetContexts(tree) 796909"];
18031 [label="param GetContexts(SyntaxTree tree) 796910"];
18032 [label="GetContextForFileStart() 796911"];
18033 [label="0 796912"];
18034 [label="position: 0 796913"];
18035 [label="warningsState: NullableContextState.State.Unknown 796914"];
18036 [label="annotationsState: NullableContextState.State.Unknown 796915"];
18037 [label="new NullableContextState(\n                position: 0,\n                warningsState: NullableContextState.State.Unknown,\n                annotationsState: NullableContextState.State.Unknown) 796916"];
18038 [label="param NullableContextState(int position) 796917"];
18039 [label="param NullableContextState(State warningsState) 796918"];
18040 [label="param NullableContextState(State annotationsState) 796919"];
18041 [label="param NullableContextState(this) 796920"];
18042 [label="Position 796921"];
18043 [label="WarningsState 796922"];
18044 [label="AnnotationsState 796923"];
18045 [label="var previousContext = GetContextForFileStart(); 796924"];
18046 [label="var builder = ArrayBuilder<NullableContextState>.GetInstance(); 796925"];
18047 [label="foreach (var d in tree.GetRoot().GetDirectives())\n            {\n                if (d.Kind() != SyntaxKind.NullableDirectiveTrivia)\n                {\n                    continue;\n                }\n                var nn = (NullableDirectiveTriviaSyntax)d;\n                if (nn.SettingToken.IsMissing || !nn.IsActive)\n                {\n                    continue;\n                }\n\n                var position = nn.EndPosition;\n                var setting = (nn.SettingToken.Kind()) switch\n                {\n                    SyntaxKind.EnableKeyword => NullableContextState.State.Enabled,\n                    SyntaxKind.DisableKeyword => NullableContextState.State.Disabled,\n                    SyntaxKind.RestoreKeyword => NullableContextState.State.ExplicitlyRestored,\n                    var kind => throw ExceptionUtilities.UnexpectedValue(kind),\n                };\n\n                var context = nn.TargetToken.Kind() switch\n                {\n                    SyntaxKind.None => new NullableContextState(position, setting, setting),\n                    SyntaxKind.WarningsKeyword => new NullableContextState(position, warningsState: setting, annotationsState: previousContext.AnnotationsState),\n                    SyntaxKind.AnnotationsKeyword => new NullableContextState(position, warningsState: previousContext.WarningsState, annotationsState: setting),\n                    var kind => throw ExceptionUtilities.UnexpectedValue(kind)\n                };\n\n                builder.Add(context);\n                previousContext = context;\n            } 796926"];
18048 [label="foreach (var d in tree.GetRoot().GetDirectives())\n            {\n                if (d.Kind() != SyntaxKind.NullableDirectiveTrivia)\n                {\n                    continue;\n                }\n                var nn = (NullableDirectiveTriviaSyntax)d;\n                if (nn.SettingToken.IsMissing || !nn.IsActive)\n                {\n                    continue;\n                }\n\n                var position = nn.EndPosition;\n                var setting = (nn.SettingToken.Kind()) switch\n                {\n                    SyntaxKind.EnableKeyword => NullableContextState.State.Enabled,\n                    SyntaxKind.DisableKeyword => NullableContextState.State.Disabled,\n                    SyntaxKind.RestoreKeyword => NullableContextState.State.ExplicitlyRestored,\n                    var kind => throw ExceptionUtilities.UnexpectedValue(kind),\n                };\n\n                var context = nn.TargetToken.Kind() switch\n                {\n                    SyntaxKind.None => new NullableContextState(position, setting, setting),\n                    SyntaxKind.WarningsKeyword => new NullableContextState(position, warningsState: setting, annotationsState: previousContext.AnnotationsState),\n                    SyntaxKind.AnnotationsKeyword => new NullableContextState(position, warningsState: previousContext.WarningsState, annotationsState: setting),\n                    var kind => throw ExceptionUtilities.UnexpectedValue(kind)\n                };\n\n                builder.Add(context);\n                previousContext = context;\n            } 796927"];
18049 [label="param GetRoot(CancellationToken cancellationToken) 796928"];
18050 [label="tree.GetRoot().GetDirectives() 796929"];
18051 [label="param GetDirectives(this SyntaxNode node) 796930"];
18052 [label="param GetDirectives(Func<DirectiveTriviaSyntax, bool>? filter = null) 796931"];
18053 [label="return ((CSharpSyntaxNode)node).GetDirectives(filter); 796932"];
18054 [label="((CSharpSyntaxNode)node).GetDirectives(filter) 796933"];
18055 [label="param GetDirectives(Func<DirectiveTriviaSyntax, bool>? filter = null) 796934"];
18056 [label="param GetDirectives(this) 796935"];
18057 [label="return ((SyntaxNodeOrToken)this).GetDirectives<DirectiveTriviaSyntax>(filter); 796936"];
18058 [label="return ((SyntaxNodeOrToken)this).GetDirectives<DirectiveTriviaSyntax>(filter); 796937"];
18059 [label="return builder.ToImmutableAndFree(); 796938"];
18060 [label="var contexts = GetContexts(tree); 796939"];
18061 [label="return new NullableContextStateMap(contexts); 796940"];
18062 [label="return new NullableContextStateMap(contexts); 796941"];
18063 [label="new NullableContextStateMap(contexts) 796942"];
18064 [label="param NullableContextStateMap(ImmutableArray<NullableContextState> contexts) 796943"];
18065 [label="param NullableContextStateMap(this) 796944"];
18066 [label="for (int i = 1; i < contexts.Length; i++)\n            {\n                Debug.Assert(contexts[i - 1].Position < contexts[i].Position);\n            } 796945"];
18067 [label="for (int i = 1; i < contexts.Length; i++)\n            {\n                Debug.Assert(contexts[i - 1].Position < contexts[i].Position);\n            } 796946"];
18068 [label="_contexts 796947"];
18069 [label="Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null); 796948"];
18070 [label="Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null); 796949"];
18071 [label="Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null); 796950"];
18072 [label="Interlocked.CompareExchange(\n                    ref _lazyNullableContextStateMap,\n                    new StrongBox<NullableContextStateMap>(NullableContextStateMap.Create(this)),\n                    null); 796951"];
18073 [label="return _lazyNullableContextStateMap.Value; 796952"];
18074 [label="span 796953"];
18075 [label="GetNullableContextStateMap().IsNullableAnalysisEnabled(span) 796954"];
18076 [label="param IsNullableAnalysisEnabled(TextSpan span) 796955"];
18077 [label="param IsNullableAnalysisEnabled(this) 796956"];
18078 [label="bool hasUnknownOrExplicitlyRestored = false; 796957"];
18079 [label="int index = GetContextStateIndex(span.Start); 796958"];
18080 [label="GetContextStateIndex(span.Start) 796959"];
18081 [label="param GetContextStateIndex(int position) 796960"];
18082 [label="param GetContextStateIndex(this) 796961"];
18083 [label="var searchContext = new NullableContextState(position, warningsState: NullableContextState.State.Unknown, annotationsState: NullableContextState.State.Unknown); 796962"];
18084 [label="var searchContext = new NullableContextState(position, warningsState: NullableContextState.State.Unknown, annotationsState: NullableContextState.State.Unknown); 796963"];
18085 [label="var searchContext = new NullableContextState(position, warningsState: NullableContextState.State.Unknown, annotationsState: NullableContextState.State.Unknown); 796964"];
18086 [label="new NullableContextState(position, warningsState: NullableContextState.State.Unknown, annotationsState: NullableContextState.State.Unknown) 796965"];
18087 [label="param NullableContextState(int position) 796966"];
18088 [label="param NullableContextState(State warningsState) 796967"];
18089 [label="param NullableContextState(State annotationsState) 796968"];
18090 [label="param NullableContextState(this) 796969"];
18091 [label="Position 796970"];
18092 [label="WarningsState 796971"];
18093 [label="AnnotationsState 796972"];
18094 [label="new PositionComparer() 796973"];
18095 [label="param PositionComparer(this) 796974"];
18096 [label="Instance = new PositionComparer() 796975"];
18097 [label="int index = _contexts.BinarySearch(searchContext, PositionComparer.Instance); 796976"];
18098 [label="int index = _contexts.BinarySearch(searchContext, PositionComparer.Instance); 796977"];
18099 [label="int index = _contexts.BinarySearch(searchContext, PositionComparer.Instance); 796978"];
18100 [label="int index = _contexts.BinarySearch(searchContext, PositionComparer.Instance); 796979"];
18101 [label="if (index < 0)\n            {\n                // If no exact match, BinarySearch returns the complement\n                // of the index of the next higher value.\n                index = ~index - 1;\n            } 796980"];
18102 [label="if (index < 0)\n            {\n                // If no exact match, BinarySearch returns the complement\n                // of the index of the next higher value.\n                index = ~index - 1;\n            } 796981"];
18103 [label="index = ~index - 1; 796982"];
18104 [label="Debug.Assert(index >= -1); 796983"];
18105 [label="Debug.Assert(index >= -1); 796984"];
18106 [label="Debug.Assert(index < _contexts.Length); 796985"];
18107 [label="if (index >= 0)\n            {\n                Debug.Assert(_contexts[index].Position <= position);\n                Debug.Assert(index == _contexts.Length - 1 || position < _contexts[index + 1].Position);\n            } 796986"];
18108 [label="if (index >= 0)\n            {\n                Debug.Assert(_contexts[index].Position <= position);\n                Debug.Assert(index == _contexts.Length - 1 || position < _contexts[index + 1].Position);\n            } 796987"];
18109 [label="return index; 796988"];
18110 [label="var context = index < 0 ? GetContextForFileStart() : _contexts[index]; 796989"];
18111 [label="var context = index < 0 ? GetContextForFileStart() : _contexts[index]; 796990"];
18112 [label="index < 0 796991"];
18113 [label="GetContextForFileStart() 796992"];
18114 [label="0 796993"];
18115 [label="position: 0 796994"];
18116 [label="warningsState: NullableContextState.State.Unknown 796995"];
18117 [label="annotationsState: NullableContextState.State.Unknown 796996"];
18118 [label="new NullableContextState(\n                position: 0,\n                warningsState: NullableContextState.State.Unknown,\n                annotationsState: NullableContextState.State.Unknown) 796997"];
18119 [label="param NullableContextState(int position) 796998"];
18120 [label="param NullableContextState(State warningsState) 796999"];
18121 [label="param NullableContextState(State annotationsState) 797000"];
18122 [label="Debug.Assert(context.Position <= span.Start); 797001"];
18123 [label="while (true)\n            {\n                switch (context.WarningsState)\n                {\n                    case NullableContextState.State.Enabled:\n                        return true;\n                    case NullableContextState.State.Unknown:\n                    case NullableContextState.State.ExplicitlyRestored:\n                        hasUnknownOrExplicitlyRestored = true;\n                        break;\n                }\n                index++;\n                if (index >= _contexts.Length)\n                {\n                    break;\n                }\n                context = _contexts[index];\n                if (context.Position >= span.End)\n                {\n                    break;\n                }\n            } 797002"];
18124 [label="switch (context.WarningsState)\n                {\n                    case NullableContextState.State.Enabled:\n                        return true;\n                    case NullableContextState.State.Unknown:\n                    case NullableContextState.State.ExplicitlyRestored:\n                        hasUnknownOrExplicitlyRestored = true;\n                        break;\n                } 797003"];
18125 [label="hasUnknownOrExplicitlyRestored = true; 797004"];
18126 [label="index++; 797005"];
18127 [label="if (index >= _contexts.Length)\n                {\n                    break;\n                } 797006"];
18128 [label="hasUnknownOrExplicitlyRestored 797007"];
18129 [label="return hasUnknownOrExplicitlyRestored ? null : false; 797008"];
18130 [label="Options 797009"];
18131 [label="get\n            {\n                return _options;\n            } 797010"];
18132 [label="return _options; 797011"];
18133 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 797012"];
18134 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 797013"];
18135 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 797014"];
18136 [label="isNullableEnabled = isNullableEnabled || compilation.IsNullableAnalysisEnabledIn(syntax); 797015"];
18137 [label="IsScriptClass 797016"];
18138 [label="get\n            {\n                var kind = this.declaration.Declarations[0].Kind;\n                return kind == DeclarationKind.Script || kind == DeclarationKind.Submission;\n            } 797017"];
18139 [label="this.declaration.Declarations 797018"];
18140 [label="get\n            {\n                return _declarations;\n            } 797019"];
18141 [label="var kind = this.declaration.Declarations[0].Kind; 797020"];
18142 [label="var kind = this.declaration.Declarations[0].Kind; 797021"];
18143 [label="this.declaration.Declarations[0].Kind 797022"];
18144 [label="get\n            {\n                return _kind;\n            } 797023"];
18145 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 797024"];
18146 [label="if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                } 797025"];
18147 [label="if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                } 797026"];
18148 [label="if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                } 797027"];
18149 [label="fieldSymbol.IsStatic 797028"];
18150 [label="=> (Modifiers & DeclarationModifiers.Static) != 0 797029"];
18151 [label="Modifiers 797030"];
18152 [label="get\n            {\n                return _modifiers;\n            } 797031"];
18153 [label="return _modifiers; 797032"];
18154 [label="Modifiers & DeclarationModifiers.Static 797033"];
18155 [label="0 797034"];
18156 [label="(Modifiers & DeclarationModifiers.Static) != 0 797035"];
18157 [label="if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    } 797036"];
18158 [label="AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer); 797037"];
18159 [label="AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer); 797038"];
18160 [label="AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer); 797039"];
18161 [label="AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer) 797040"];
18162 [label="param AddInitializer(ref ArrayBuilder<FieldOrPropertyInitializer>? initializers) 797041"];
18163 [label="param AddInitializer(FieldSymbol? fieldOpt) 797042"];
18164 [label="param AddInitializer(CSharpSyntaxNode node) 797043"];
18165 [label="if (initializers == null)\n            {\n                initializers = ArrayBuilder<FieldOrPropertyInitializer>.GetInstance();\n            }\n            else if (initializers.Count != 0)\n            {\n                // initializers should be added in syntax order:\n                Debug.Assert(node.SyntaxTree == initializers.Last().Syntax.SyntaxTree);\n                Debug.Assert(node.SpanStart > initializers.Last().Syntax.Span.Start);\n            } 797044"];
18166 [label="if (initializers == null)\n            {\n                initializers = ArrayBuilder<FieldOrPropertyInitializer>.GetInstance();\n            }\n            else if (initializers.Count != 0)\n            {\n                // initializers should be added in syntax order:\n                Debug.Assert(node.SyntaxTree == initializers.Last().Syntax.SyntaxTree);\n                Debug.Assert(node.SpanStart > initializers.Last().Syntax.Span.Start);\n            } 797045"];
18167 [label="initializers = ArrayBuilder<FieldOrPropertyInitializer>.GetInstance(); 797046"];
18168 [label="initializers.Add(new FieldOrPropertyInitializer(fieldOpt, node)); 797047"];
18169 [label="initializers.Add(new FieldOrPropertyInitializer(fieldOpt, node)); 797048"];
18170 [label="initializers.Add(new FieldOrPropertyInitializer(fieldOpt, node)); 797049"];
18171 [label="new FieldOrPropertyInitializer(fieldOpt, node) 797050"];
18172 [label="param FieldOrPropertyInitializer(FieldSymbol fieldOpt) 797051"];
18173 [label="param FieldOrPropertyInitializer(SyntaxNode syntax) 797052"];
18174 [label="param FieldOrPropertyInitializer(this) 797053"];
18175 [label="var a1 = syntax.IsKind(SyntaxKind.EqualsValueClause); 797054"];
18176 [label="var a1 = syntax.IsKind(SyntaxKind.EqualsValueClause); 797055"];
18177 [label="syntax.IsKind(SyntaxKind.EqualsValueClause) 797056"];
18178 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 797057"];
18179 [label="param IsKind(SyntaxKind kind) 797058"];
18180 [label="return node?.RawKind == (int)kind; 797059"];
18181 [label="var a2 = syntax.IsKind(SyntaxKind.Parameter); 797060"];
18182 [label="var a2 = syntax.IsKind(SyntaxKind.Parameter); 797061"];
18183 [label="syntax.IsKind(SyntaxKind.Parameter) 797062"];
18184 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 797063"];
18185 [label="param IsKind(SyntaxKind kind) 797064"];
18186 [label="return node?.RawKind == (int)kind; 797065"];
18187 [label="var a3 = fieldOpt != null; 797066"];
18188 [label="fieldOpt != null 797067"];
18189 [label="param !=(Symbol left) 797068"];
18190 [label="param !=(Symbol right) 797069"];
18191 [label="if (right is null)\n            {\n                return left is object;\n            } 797070"];
18192 [label="return left is object; 797071"];
18193 [label="var a3 = fieldOpt != null; 797072"];
18194 [label="var a4 = syntax is StatementSyntax; 797073"];
18195 [label="Debug.Assert(((a1 || a2) && a3) || a4); 797074"];
18196 [label="Debug.Assert(((a1 || a2) && a3) || a4); 797075"];
18197 [label="FieldOpt 797076"];
18198 [label="Syntax = syntax.GetReference(); 797077"];
18199 [label="Syntax = syntax.GetReference(); 797078"];
18200 [label="ArrayBuilder<CSharpSyntaxNode>? nodes = null; 797079"];
18201 [label="SyntaxTree? tree = null; 797080"];
18202 [label="tree = node._syntaxTree; 797081"];
18203 [label="if (tree != null)\n                {\n                    break;\n                } 797082"];
18204 [label="if (tree != null)\n                {\n                    break;\n                } 797083"];
18205 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 797084"];
18206 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 797085"];
18207 [label="Debug.Assert(result != null); 797086"];
18208 [label="Debug.Assert(result != null); 797087"];
18209 [label="param GetReference(this) 797088"];
18210 [label="Syntax 797089"];
18211 [label="initializers.Add(new FieldOrPropertyInitializer(fieldOpt, node)); 797090"];
18212 [label="AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer); 797091"];
18213 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers); 797092"];
18214 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers); 797093"];
18215 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers) 797094"];
18216 [label="param AddInitializers(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> allInitializers) 797095"];
18217 [label="param AddInitializers(ArrayBuilder<FieldOrPropertyInitializer>? siblingsOpt) 797096"];
18218 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 797097"];
18219 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 797098"];
18220 [label="allInitializers.Add(siblingsOpt); 797099"];
18221 [label="allInitializers.Add(siblingsOpt); 797100"];
18222 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers); 797101"];
18223 [label="AddInitializers(builder.StaticInitializers, staticInitializers); 797102"];
18224 [label="AddInitializers(builder.StaticInitializers, staticInitializers); 797103"];
18225 [label="AddInitializers(builder.StaticInitializers, staticInitializers) 797104"];
18226 [label="param AddInitializers(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> allInitializers) 797105"];
18227 [label="param AddInitializers(ArrayBuilder<FieldOrPropertyInitializer>? siblingsOpt) 797106"];
18228 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 797107"];
18229 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 797108"];
18230 [label="AddInitializers(builder.StaticInitializers, staticInitializers); 797109"];
18231 [label="AddDeclaredNontypeMembers(builder, diagnostics); 797110"];
18232 [label="TypeKind 797111"];
18233 [label="get\n            {\n                return _flags.TypeKind;\n            } 797112"];
18234 [label="_flags.TypeKind 797113"];
18235 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 797114"];
18236 [label="switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                } 797115"];
18237 [label="IsTupleType 797116"];
18238 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 797117"];
18239 [label="_ 797118"];
18240 [label="tupleCardinality: out _ 797119"];
18241 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 797120"];
18242 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 797121"];
18243 [label="param IsTupleTypeOfCardinality(this) 797122"];
18244 [label="IsUnboundGenericType 797123"];
18245 [label="get\n            {\n                return false;\n            } 797124"];
18246 [label="return false; 797125"];
18247 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797126"];
18248 [label="ContainingSymbol 797127"];
18249 [label="get\n            {\n                return _containingSymbol;\n            } 797128"];
18250 [label="return _containingSymbol; 797129"];
18251 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797130"];
18252 [label=".Kind 797131"];
18253 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 797132"];
18254 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797133"];
18255 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797134"];
18256 [label="ContainingNamespace 797135"];
18257 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797136"];
18258 [label="this.ContainingSymbol 797137"];
18259 [label="get\n            {\n                return _containingSymbol;\n            } 797138"];
18260 [label="return _containingSymbol; 797139"];
18261 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797140"];
18262 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797141"];
18263 [label="var ns = container as NamespaceSymbol; 797142"];
18264 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 797143"];
18265 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 797144"];
18266 [label="return ns; 797145"];
18267 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797146"];
18268 [label="ContainingNamespace.ContainingNamespace 797147"];
18269 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797148"];
18270 [label="this.ContainingSymbol 797149"];
18271 [label="=> _container 797150"];
18272 [label="_container 797151"];
18273 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797152"];
18274 [label=".IsGlobalNamespace 797153"];
18275 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 797154"];
18276 [label="ContainingNamespace 797155"];
18277 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797156"];
18278 [label="this.ContainingSymbol 797157"];
18279 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797158"];
18280 [label="container.ContainingSymbol 797159"];
18281 [label="get\n            {\n                return _assemblySymbol;\n            } 797160"];
18282 [label="return _assemblySymbol; 797161"];
18283 [label="get\n            {\n                return null;\n            } 797162"];
18284 [label="return null; 797163"];
18285 [label="return null; 797164"];
18286 [label="return (object)ContainingNamespace == null; 797165"];
18287 [label="return (object)ContainingNamespace == null; 797166"];
18288 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797167"];
18289 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797168"];
18290 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797169"];
18291 [label="Name 797170"];
18292 [label="get\n            {\n                return declaration.Name;\n            } 797171"];
18293 [label="get\n            {\n                return this.name;\n            } 797172"];
18294 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797173"];
18295 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797174"];
18296 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797175"];
18297 [label="tupleCardinality = 0; 797176"];
18298 [label="return false; 797177"];
18299 [label="if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                } 797178"];
18300 [label="if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                } 797179"];
18301 [label="if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                } 797180"];
18302 [label="builder.ToReadOnlyAndFree() 797181"];
18303 [label="param ToReadOnlyAndFree(this) 797182"];
18304 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797183"];
18305 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797184"];
18306 [label="MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers) 797185"];
18307 [label="param ToReadOnlyAndFree(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> initializers) 797186"];
18308 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 797187"];
18309 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 797188"];
18310 [label="initializers.Free(); 797189"];
18311 [label="return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty; 797190"];
18312 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797191"];
18313 [label="MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers) 797192"];
18314 [label="param ToReadOnlyAndFree(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> initializers) 797193"];
18315 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 797194"];
18316 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 797195"];
18317 [label="var builder = ArrayBuilder<ImmutableArray<FieldOrPropertyInitializer>>.GetInstance(initializers.Count); 797196"];
18318 [label="foreach (ArrayBuilder<FieldOrPropertyInitializer> group in initializers)\n                {\n                    builder.Add(group.ToImmutableAndFree());\n                } 797197"];
18319 [label="foreach (ArrayBuilder<FieldOrPropertyInitializer> group in initializers)\n                {\n                    builder.Add(group.ToImmutableAndFree());\n                } 797198"];
18320 [label="builder.Add(group.ToImmutableAndFree()); 797199"];
18321 [label="builder.Add(group.ToImmutableAndFree()); 797200"];
18322 [label="initializers.Free(); 797201"];
18323 [label="return builder.ToImmutableAndFree(); 797202"];
18324 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797203"];
18325 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797204"];
18326 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797205"];
18327 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797206"];
18328 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797207"];
18329 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797208"];
18330 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797209"];
18331 [label="new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields) 797210"];
18332 [label="param DeclaredMembersAndInitializers(ImmutableArray<Symbol> nonTypeMembers) 797211"];
18333 [label="param DeclaredMembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> staticInitializers) 797212"];
18334 [label="param DeclaredMembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> instanceInitializers) 797213"];
18335 [label="param DeclaredMembersAndInitializers(bool haveIndexers) 797214"];
18336 [label="param DeclaredMembersAndInitializers(RecordDeclarationSyntax? recordDeclarationWithParameters) 797215"];
18337 [label="param DeclaredMembersAndInitializers(SynthesizedRecordConstructor? recordPrimaryConstructor) 797216"];
18338 [label="param DeclaredMembersAndInitializers(int instanceInitializersIndexForRecordDeclarationWithParameters) 797217"];
18339 [label="param DeclaredMembersAndInitializers(bool isNullableEnabledForInstanceConstructorsAndFields) 797218"];
18340 [label="param DeclaredMembersAndInitializers(bool isNullableEnabledForStaticConstructorsAndFields) 797219"];
18341 [label="param DeclaredMembersAndInitializers(this) 797220"];
18342 [label="HaveIndexers 797221"];
18343 [label="RecordDeclarationWithParameters 797222"];
18344 [label="RecordPrimaryConstructor 797223"];
18345 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 797224"];
18346 [label="IsNullableEnabledForInstanceConstructorsAndFields 797225"];
18347 [label="IsNullableEnabledForStaticConstructorsAndFields 797226"];
18348 [label="Debug.Assert(!nonTypeMembers.IsDefault); 797227"];
18349 [label="Debug.Assert(!staticInitializers.IsDefault); 797228"];
18350 [label="Debug.Assert(!instanceInitializers.IsDefault); 797229"];
18351 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 797230"];
18352 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 797231"];
18353 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 797232"];
18354 [label="Debug.Assert(recordDeclarationWithParameters is object == recordPrimaryConstructor is object); 797233"];
18355 [label="this.NonTypeMembers 797234"];
18356 [label="this.StaticInitializers 797235"];
18357 [label="this.InstanceInitializers 797236"];
18358 [label="this.HaveIndexers 797237"];
18359 [label="this.RecordDeclarationWithParameters 797238"];
18360 [label="this.RecordPrimaryConstructor 797239"];
18361 [label="this.InstanceInitializersIndexForRecordDeclarationWithParameters 797240"];
18362 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 797241"];
18363 [label="this.IsNullableEnabledForStaticConstructorsAndFields 797242"];
18364 [label="return builder.ToReadOnlyAndFree(); 797243"];
18365 [label="declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics); 797244"];
18366 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 797245"];
18367 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 797246"];
18368 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 797247"];
18369 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 797248"];
18370 [label="if (alreadyKnown != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    diagnostics.Free();\n                    return alreadyKnown;\n                } 797249"];
18371 [label="AddDeclarationDiagnostics(diagnostics); 797250"];
18372 [label="AddDeclarationDiagnostics(diagnostics) 797251"];
18373 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 797252"];
18374 [label="param AddDeclarationDiagnostics(this) 797253"];
18375 [label="ContainingSymbol 797254"];
18376 [label="get\n            {\n                return _containingSymbol;\n            } 797255"];
18377 [label="return _containingSymbol; 797256"];
18378 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 797257"];
18379 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 797258"];
18380 [label="AddDeclarationDiagnostics(diagnostics); 797259"];
18381 [label="diagnostics.Free(); 797260"];
18382 [label="return declaredMembersAndInitializers!; 797261"];
18383 [label="var declaredMembersAndInitializers = getDeclaredMembersAndInitializers(); 797262"];
18384 [label="if (declaredMembersAndInitializers is null)\n            {\n                // Another thread completed the work before this one\n                return null;\n            } 797263"];
18385 [label="var membersAndInitializersBuilder = new MembersAndInitializersBuilder(declaredMembersAndInitializers); 797264"];
18386 [label="var membersAndInitializersBuilder = new MembersAndInitializersBuilder(declaredMembersAndInitializers); 797265"];
18387 [label="new MembersAndInitializersBuilder(declaredMembersAndInitializers) 797266"];
18388 [label="param MembersAndInitializersBuilder(DeclaredMembersAndInitializers declaredMembersAndInitializers) 797267"];
18389 [label="param MembersAndInitializersBuilder(this) 797268"];
18390 [label="NonTypeMembers 797269"];
18391 [label="InstanceInitializersForPositionalMembers 797270"];
18392 [label="IsNullableEnabledForInstanceConstructorsAndFields 797271"];
18393 [label="IsNullableEnabledForStaticConstructorsAndFields 797272"];
18394 [label="Debug.Assert(declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel); 797273"];
18395 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 797274"];
18396 [label="this.IsNullableEnabledForStaticConstructorsAndFields 797275"];
18397 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 797276"];
18398 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 797277"];
18399 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 797278"];
18400 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics) 797279"];
18401 [label="param AddSynthesizedMembers(MembersAndInitializersBuilder builder) 797280"];
18402 [label="param AddSynthesizedMembers(DeclaredMembersAndInitializers declaredMembersAndInitializers) 797281"];
18403 [label="param AddSynthesizedMembers(DiagnosticBag diagnostics) 797282"];
18404 [label="param AddSynthesizedMembers(this) 797283"];
18405 [label="TypeKind 797284"];
18406 [label="get\n            {\n                return _flags.TypeKind;\n            } 797285"];
18407 [label="_flags.TypeKind 797286"];
18408 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 797287"];
18409 [label="switch (TypeKind)\n            {\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Class:\n                case TypeKind.Interface:\n                case TypeKind.Submission:\n                    AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics);\n                    AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics);\n                    break;\n\n                default:\n                    break;\n            } 797288"];
18410 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797289"];
18411 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797290"];
18412 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797291"];
18413 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics) 797292"];
18414 [label="param AddSynthesizedRecordMembersIfNecessary(MembersAndInitializersBuilder builder) 797293"];
18415 [label="param AddSynthesizedRecordMembersIfNecessary(DeclaredMembersAndInitializers declaredMembersAndInitializers) 797294"];
18416 [label="param AddSynthesizedRecordMembersIfNecessary(DiagnosticBag diagnostics) 797295"];
18417 [label="param AddSynthesizedRecordMembersIfNecessary(this) 797296"];
18418 [label="declaration.Kind 797297"];
18419 [label="get\n            {\n                return this.Declarations[0].Kind;\n            } 797298"];
18420 [label="if (declaration.Kind != DeclarationKind.Record)\n            {\n                return;\n            } 797299"];
18421 [label="return; 797300"];
18422 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797301"];
18423 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797302"];
18424 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797303"];
18425 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797304"];
18426 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics) 797305"];
18427 [label="param AddSynthesizedConstructorsIfNecessary(MembersAndInitializersBuilder builder) 797306"];
18428 [label="param AddSynthesizedConstructorsIfNecessary(DeclaredMembersAndInitializers declaredMembersAndInitializers) 797307"];
18429 [label="param AddSynthesizedConstructorsIfNecessary(DiagnosticBag diagnostics) 797308"];
18430 [label="param AddSynthesizedConstructorsIfNecessary(this) 797309"];
18431 [label="var hasInstanceConstructor = false; 797310"];
18432 [label="var hasParameterlessInstanceConstructor = false; 797311"];
18433 [label="var hasStaticConstructor = false; 797312"];
18434 [label="var membersSoFar = builder.GetNonTypeMembers(declaredMembersAndInitializers); 797313"];
18435 [label="builder.GetNonTypeMembers(declaredMembersAndInitializers) 797314"];
18436 [label="param GetNonTypeMembers(DeclaredMembersAndInitializers declaredMembers) 797315"];
18437 [label="param GetNonTypeMembers(this) 797316"];
18438 [label="return NonTypeMembers ?? (IReadOnlyCollection<Symbol>)declaredMembers.NonTypeMembers; 797317"];
18439 [label="return NonTypeMembers ?? (IReadOnlyCollection<Symbol>)declaredMembers.NonTypeMembers; 797318"];
18440 [label="foreach (var member in membersSoFar)\n            {\n                if (member.Kind == SymbolKind.Method)\n                {\n                    var method = (MethodSymbol)member;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    }\n                }\n\n                //kick out early if we've seen everything we're looking for\n                if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                }\n            } 797319"];
18441 [label="member.Kind 797320"];
18442 [label="get\n            {\n                return SymbolKind.Field;\n            } 797321"];
18443 [label="return SymbolKind.Field; 797322"];
18444 [label="if (member.Kind == SymbolKind.Method)\n                {\n                    var method = (MethodSymbol)member;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    }\n                } 797323"];
18445 [label="if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                } 797324"];
18446 [label="'Expressions' 797325"];
18447 [label="'Linq' 797326"];
18448 [label="'' 797327"];
18449 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 797328"];
18450 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 797329"];
18451 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 797330"];
18452 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 797331"];
18453 [label="s_expressionsNamespaceName = { 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 797332"];
18454 [label="(type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 797333"];
18455 [label="s_containsTypeParameterPredicate =\n            (type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 797334"];
18456 [label="(type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 797335"];
18457 [label="s_isTypeParameterWithSpecificContainerPredicate =\n             (type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 797336"];
18458 [label="(type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 797337"];
18459 [label="s_containsTypeParametersPredicate =\n            (type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 797338"];
18460 [label="(type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 797339"];
18461 [label="s_containsDynamicPredicate = (type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 797340"];
18462 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797341"];
18463 [label="this.IsStructType() 797342"];
18464 [label="param IsStructType(this TypeSymbol type) 797343"];
18465 [label="RoslynDebug.Assert((object)type != null); 797344"];
18466 [label="RoslynDebug.Assert((object)type != null); 797345"];
18467 [label="type.TypeKind 797346"];
18468 [label="get\n            {\n                return _flags.TypeKind;\n            } 797347"];
18469 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 797348"];
18470 [label="return type.TypeKind == TypeKind.Struct; 797349"];
18471 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797350"];
18472 [label="this.IsStatic 797351"];
18473 [label="=> HasFlag(DeclarationModifiers.Static) 797352"];
18474 [label="DeclarationModifiers.Static 797353"];
18475 [label="HasFlag(DeclarationModifiers.Static) 797354"];
18476 [label="param HasFlag(DeclarationModifiers flag) 797355"];
18477 [label="=> (_declModifiers & flag) != 0 797356"];
18478 [label="_declModifiers & flag 797357"];
18479 [label="0 797358"];
18480 [label="(_declModifiers & flag) != 0 797359"];
18481 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797360"];
18482 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797361"];
18483 [label="this.IsInterface 797362"];
18484 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 797363"];
18485 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 797364"];
18486 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797365"];
18487 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797366"];
18488 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 797367"];
18489 [label="this.TypeKind 797368"];
18490 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers); 797369"];
18491 [label="(this.TypeKind == TypeKind.Submission) 797370"];
18492 [label="new SynthesizedInstanceConstructor(this) 797371"];
18493 [label="param SynthesizedInstanceConstructor(NamedTypeSymbol containingType) 797372"];
18494 [label="param SynthesizedInstanceConstructor(this) 797373"];
18495 [label="param SynthesizedInstanceConstructor(this) 797374"];
18496 [label="param SynthesizedInstanceMethodSymbol(this) 797375"];
18497 [label="null 797376"];
18498 [label="None = null 797377"];
18499 [label="param SynthesizedInstanceMethodSymbol(this) 797378"];
18500 [label="param MethodSymbol(this) 797379"];
18501 [label="param MethodSymbol(this) 797380"];
18502 [label="_lazyAdapter 797381"];
18503 [label="_lazyParameterSignature 797382"];
18504 [label="_lazyThisParameter 797383"];
18505 [label="_containingType 797384"];
18506 [label="Debug.Assert((object)containingType != null); 797385"];
18507 [label="Debug.Assert((object)containingType != null); 797386"];
18508 [label="_containingType 797387"];
18509 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers); 797388"];
18510 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers) 797389"];
18511 [label="param AddNonTypeMember(Symbol member) 797390"];
18512 [label="param AddNonTypeMember(DeclaredMembersAndInitializers declaredMembers) 797391"];
18513 [label="param AddNonTypeMember(this) 797392"];
18514 [label="if (NonTypeMembers is null)\n                {\n                    NonTypeMembers = ArrayBuilder<Symbol>.GetInstance(declaredMembers.NonTypeMembers.Length + 1);\n                    NonTypeMembers.AddRange(declaredMembers.NonTypeMembers);\n                } 797393"];
18515 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance(declaredMembers.NonTypeMembers.Length + 1); 797394"];
18516 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance(declaredMembers.NonTypeMembers.Length + 1); 797395"];
18517 [label="NonTypeMembers 797396"];
18518 [label="NonTypeMembers.AddRange(declaredMembers.NonTypeMembers); 797397"];
18519 [label="NonTypeMembers.AddRange(declaredMembers.NonTypeMembers); 797398"];
18520 [label="NonTypeMembers.Add(member); 797399"];
18521 [label="NonTypeMembers.Add(member); 797400"];
18522 [label="builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers); 797401"];
18523 [label="if (!hasStaticConstructor && hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers))\n            {\n                // Note: we don't have to put anything in the method - the binder will\n                // do that when processing field initializers.\n                builder.AddNonTypeMember(new SynthesizedStaticConstructor(this), declaredMembersAndInitializers);\n            } 797402"];
18524 [label="hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers) 797403"];
18525 [label="static bool hasNonConstantInitializer(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> initializers)\n            {\n                return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst));\n            } 797404"];
18526 [label="return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst)); 797405"];
18527 [label="return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst)); 797406"];
18528 [label="if (!hasStaticConstructor && hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers))\n            {\n                // Note: we don't have to put anything in the method - the binder will\n                // do that when processing field initializers.\n                builder.AddNonTypeMember(new SynthesizedStaticConstructor(this), declaredMembersAndInitializers);\n            } 797407"];
18529 [label="this.IsScriptClass 797408"];
18530 [label="get\n            {\n                var kind = this.declaration.Declarations[0].Kind;\n                return kind == DeclarationKind.Script || kind == DeclarationKind.Submission;\n            } 797409"];
18531 [label="get\n            {\n                return _declarations;\n            } 797410"];
18532 [label="this.declaration.Declarations[0].Kind 797411"];
18533 [label="get\n            {\n                return _kind;\n            } 797412"];
18534 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 797413"];
18535 [label="if (this.IsScriptClass)\n            {\n                var scriptInitializer = new SynthesizedInteractiveInitializerMethod(this, diagnostics);\n                builder.AddNonTypeMember(scriptInitializer, declaredMembersAndInitializers);\n                var scriptEntryPoint = SynthesizedEntryPointSymbol.Create(scriptInitializer, diagnostics);\n                builder.AddNonTypeMember(scriptEntryPoint, declaredMembersAndInitializers);\n            } 797414"];
18536 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 797415"];
18537 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 797416"];
18538 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) != null)\n            {\n                // Another thread completed the work before this one\n                membersAndInitializersBuilder.Free();\n                return null;\n            } 797417"];
18539 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) != null)\n            {\n                // Another thread completed the work before this one\n                membersAndInitializersBuilder.Free();\n                return null;\n            } 797418"];
18540 [label="return membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers); 797419"];
18541 [label="membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers) 797420"];
18542 [label="param ToReadOnlyAndFree(DeclaredMembersAndInitializers declaredMembers) 797421"];
18543 [label="param ToReadOnlyAndFree(this) 797422"];
18544 [label="var nonTypeMembers = NonTypeMembers?.ToImmutableAndFree() ?? declaredMembers.NonTypeMembers; 797423"];
18545 [label="var instanceInitializers = InstanceInitializersForPositionalMembers is null\n                    ? declaredMembers.InstanceInitializers\n                    : mergeInitializers(); 797424"];
18546 [label="InstanceInitializersForPositionalMembers is null 797425"];
18547 [label="declaredMembers.InstanceInitializers 797426"];
18548 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797427"];
18549 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797428"];
18550 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797429"];
18551 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797430"];
18552 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797431"];
18553 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 797432"];
18554 [label="new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields) 797433"];
18555 [label="param MembersAndInitializers(ImmutableArray<Symbol> nonTypeMembers) 797434"];
18556 [label="param MembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> staticInitializers) 797435"];
18557 [label="param MembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> instanceInitializers) 797436"];
18558 [label="param MembersAndInitializers(bool haveIndexers) 797437"];
18559 [label="param MembersAndInitializers(bool isNullableEnabledForInstanceConstructorsAndFields) 797438"];
18560 [label="param MembersAndInitializers(bool isNullableEnabledForStaticConstructorsAndFields) 797439"];
18561 [label="param MembersAndInitializers(this) 797440"];
18562 [label="HaveIndexers 797441"];
18563 [label="IsNullableEnabledForInstanceConstructorsAndFields 797442"];
18564 [label="IsNullableEnabledForStaticConstructorsAndFields 797443"];
18565 [label="Debug.Assert(!nonTypeMembers.IsDefault); 797444"];
18566 [label="Debug.Assert(!staticInitializers.IsDefault); 797445"];
18567 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 797446"];
18568 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 797447"];
18569 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 797448"];
18570 [label="Debug.Assert(!instanceInitializers.IsDefault); 797449"];
18571 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 797450"];
18572 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 797451"];
18573 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 797452"];
18574 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 797453"];
18575 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 797454"];
18576 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 797455"];
18577 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797456"];
18578 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797457"];
18579 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797458"];
18580 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797459"];
18581 [label="param IsIndexer(this Symbol symbol) 797460"];
18582 [label="symbol.Kind 797461"];
18583 [label="get\n            {\n                return SymbolKind.Field;\n            } 797462"];
18584 [label="return SymbolKind.Field; 797463"];
18585 [label="return symbol.Kind == SymbolKind.Property && ((PropertySymbol)symbol).IsIndexer; 797464"];
18586 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797465"];
18587 [label="get\n            {\n                return SymbolKind.Method;\n            } 797466"];
18588 [label="return SymbolKind.Method; 797467"];
18589 [label="return symbol.Kind == SymbolKind.Property && ((PropertySymbol)symbol).IsIndexer; 797468"];
18590 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797469"];
18591 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 797470"];
18592 [label="this.NonTypeMembers 797471"];
18593 [label="this.StaticInitializers 797472"];
18594 [label="this.InstanceInitializers 797473"];
18595 [label="this.HaveIndexers 797474"];
18596 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 797475"];
18597 [label="this.IsNullableEnabledForStaticConstructorsAndFields 797476"];
18598 [label="return membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers); 797477"];
18599 [label="membersAndInitializers = BuildMembersAndInitializers(diagnostics); 797478"];
18600 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 797479"];
18601 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 797480"];
18602 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 797481"];
18603 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 797482"];
18604 [label="if (alreadyKnown != null)\n            {\n                diagnostics.Free();\n                return alreadyKnown;\n            } 797483"];
18605 [label="if (alreadyKnown != null)\n            {\n                diagnostics.Free();\n                return alreadyKnown;\n            } 797484"];
18606 [label="AddDeclarationDiagnostics(diagnostics); 797485"];
18607 [label="AddDeclarationDiagnostics(diagnostics) 797486"];
18608 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 797487"];
18609 [label="param AddDeclarationDiagnostics(this) 797488"];
18610 [label="ContainingSymbol 797489"];
18611 [label="get\n            {\n                return _containingSymbol;\n            } 797490"];
18612 [label="return _containingSymbol; 797491"];
18613 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 797492"];
18614 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 797493"];
18615 [label="AddDeclarationDiagnostics(diagnostics); 797494"];
18616 [label="diagnostics.Free(); 797495"];
18617 [label="_lazyDeclaredMembersAndInitializers = null; 797496"];
18618 [label="_lazyDeclaredMembersAndInitializers 797497"];
18619 [label="return membersAndInitializers!; 797498"];
18620 [label="var membersAndInitializers = GetMembersAndInitializers(); 797499"];
18621 [label="this.IsTupleType 797500"];
18622 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 797501"];
18623 [label="_ 797502"];
18624 [label="tupleCardinality: out _ 797503"];
18625 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 797504"];
18626 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 797505"];
18627 [label="param IsTupleTypeOfCardinality(this) 797506"];
18628 [label="IsUnboundGenericType 797507"];
18629 [label="get\n            {\n                return false;\n            } 797508"];
18630 [label="return false; 797509"];
18631 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797510"];
18632 [label="ContainingSymbol 797511"];
18633 [label="get\n            {\n                return _containingSymbol;\n            } 797512"];
18634 [label="return _containingSymbol; 797513"];
18635 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797514"];
18636 [label=".Kind 797515"];
18637 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 797516"];
18638 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797517"];
18639 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797518"];
18640 [label="ContainingNamespace 797519"];
18641 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797520"];
18642 [label="this.ContainingSymbol 797521"];
18643 [label="get\n            {\n                return _containingSymbol;\n            } 797522"];
18644 [label="return _containingSymbol; 797523"];
18645 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797524"];
18646 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797525"];
18647 [label="var ns = container as NamespaceSymbol; 797526"];
18648 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 797527"];
18649 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 797528"];
18650 [label="return ns; 797529"];
18651 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797530"];
18652 [label="ContainingNamespace.ContainingNamespace 797531"];
18653 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797532"];
18654 [label="this.ContainingSymbol 797533"];
18655 [label="=> _container 797534"];
18656 [label="_container 797535"];
18657 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797536"];
18658 [label=".IsGlobalNamespace 797537"];
18659 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 797538"];
18660 [label="ContainingNamespace 797539"];
18661 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797540"];
18662 [label="this.ContainingSymbol 797541"];
18663 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797542"];
18664 [label="container.ContainingSymbol 797543"];
18665 [label="get\n            {\n                return _assemblySymbol;\n            } 797544"];
18666 [label="return _assemblySymbol; 797545"];
18667 [label="get\n            {\n                return null;\n            } 797546"];
18668 [label="return null; 797547"];
18669 [label="return null; 797548"];
18670 [label="return (object)ContainingNamespace == null; 797549"];
18671 [label="return (object)ContainingNamespace == null; 797550"];
18672 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797551"];
18673 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797552"];
18674 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797553"];
18675 [label="Name 797554"];
18676 [label="get\n            {\n                return declaration.Name;\n            } 797555"];
18677 [label="get\n            {\n                return this.name;\n            } 797556"];
18678 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797557"];
18679 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797558"];
18680 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 797559"];
18681 [label="tupleCardinality = 0; 797560"];
18682 [label="return false; 797561"];
18683 [label="if (!membersAndInitializers.HaveIndexers && !this.IsTupleType && _lazyEarlyAttributeDecodingMembersDictionary is object)\n            {\n                membersByName = _lazyEarlyAttributeDecodingMembersDictionary;\n            }\n            else\n            {\n                membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance);\n\n                // Merge types into the member dictionary\n                AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary());\n            } 797562"];
18684 [label="if (!membersAndInitializers.HaveIndexers && !this.IsTupleType && _lazyEarlyAttributeDecodingMembersDictionary is object)\n            {\n                membersByName = _lazyEarlyAttributeDecodingMembersDictionary;\n            }\n            else\n            {\n                membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance);\n\n                // Merge types into the member dictionary\n                AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary());\n            } 797563"];
18685 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 797564"];
18686 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 797565"];
18687 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 797566"];
18688 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 797567"];
18689 [label="get\n            {\n                return _name;\n            } 797568"];
18690 [label="return _name; 797569"];
18691 [label="get { return WellKnownMemberNames.InstanceConstructorName; } 797570"];
18692 [label="return WellKnownMemberNames.InstanceConstructorName; 797571"];
18693 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 797572"];
18694 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 797573"];
18695 [label="GetTypeMembersDictionary() 797574"];
18696 [label="param GetTypeMembersDictionary(this) 797575"];
18697 [label="if (_lazyTypeMembers == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                }\n\n                diagnostics.Free();\n            } 797576"];
18698 [label="if (_lazyTypeMembers == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                }\n\n                diagnostics.Free();\n            } 797577"];
18699 [label="var diagnostics = DiagnosticBag.GetInstance(); 797578"];
18700 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 797579"];
18701 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 797580"];
18702 [label="MakeTypeMembers(diagnostics) 797581"];
18703 [label="param MakeTypeMembers(DiagnosticBag diagnostics) 797582"];
18704 [label="param MakeTypeMembers(this) 797583"];
18705 [label="var symbols = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 797584"];
18706 [label="var conflictDict = new Dictionary<(string, int), SourceNamedTypeSymbol>(); 797585"];
18707 [label="declaration.Children 797586"];
18708 [label="get\n            {\n                if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                }\n\n                return _lazyChildren;\n            } 797587"];
18709 [label="if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                } 797588"];
18710 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren()); 797589"];
18711 [label="MakeChildren() 797590"];
18712 [label="param MakeChildren(this) 797591"];
18713 [label="ArrayBuilder<SingleTypeDeclaration> nestedTypes = null; 797592"];
18714 [label="this.Declarations 797593"];
18715 [label="get\n            {\n                return _declarations;\n            } 797594"];
18716 [label="foreach (var decl in this.Declarations)\n            {\n                foreach (var child in decl.Children)\n                {\n                    var asType = child as SingleTypeDeclaration;\n                    if (asType != null)\n                    {\n                        if (nestedTypes == null)\n                        {\n                            nestedTypes = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        nestedTypes.Add(asType);\n                    }\n                }\n            } 797595"];
18717 [label="decl.Children 797596"];
18718 [label="get\n            {\n                return _children;\n            } 797597"];
18719 [label="return _children; 797598"];
18720 [label="foreach (var child in decl.Children)\n                {\n                    var asType = child as SingleTypeDeclaration;\n                    if (asType != null)\n                    {\n                        if (nestedTypes == null)\n                        {\n                            nestedTypes = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        nestedTypes.Add(asType);\n                    }\n                } 797599"];
18721 [label="var children = ArrayBuilder<MergedTypeDeclaration>.GetInstance(); 797600"];
18722 [label="if (nestedTypes != null)\n            {\n                var typesGrouped = nestedTypes.ToDictionary(t => t.Identity);\n                nestedTypes.Free();\n\n                foreach (var typeGroup in typesGrouped.Values)\n                {\n                    children.Add(new MergedTypeDeclaration(typeGroup));\n                }\n            } 797601"];
18723 [label="if (nestedTypes != null)\n            {\n                var typesGrouped = nestedTypes.ToDictionary(t => t.Identity);\n                nestedTypes.Free();\n\n                foreach (var typeGroup in typesGrouped.Values)\n                {\n                    children.Add(new MergedTypeDeclaration(typeGroup));\n                }\n            } 797602"];
18724 [label="return children.ToImmutableAndFree(); 797603"];
18725 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren()); 797604"];
18726 [label="return _lazyChildren; 797605"];
18727 [label="foreach (var childDeclaration in declaration.Children)\n                {\n                    var t = new SourceNamedTypeSymbol(this, childDeclaration, diagnostics);\n                    this.CheckMemberNameDistinctFromType(t, diagnostics);\n\n                    var key = (t.Name, t.Arity);\n                    SourceNamedTypeSymbol? other;\n                    if (conflictDict.TryGetValue(key, out other))\n                    {\n                        if (Locations.Length == 1 || IsPartial)\n                        {\n                            if (t.IsPartial && other.IsPartial)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, t.Locations[0], t);\n                            }\n                            else\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, t.Locations[0], this, t.Name);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        conflictDict.Add(key, t);\n                    }\n\n                    symbols.Add(t);\n                } 797606"];
18728 [label="IsInterface 797607"];
18729 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 797608"];
18730 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 797609"];
18731 [label="if (IsInterface)\n                {\n                    foreach (var t in symbols)\n                    {\n                        Binder.CheckFeatureAvailability(t.DeclaringSyntaxReferences[0].GetSyntax(), MessageID.IDS_DefaultInterfaceImplementation, diagnostics, t.Locations[0]);\n                    }\n                } 797610"];
18732 [label="Debug.Assert(s_emptyTypeMembers.Count == 0); 797611"];
18733 [label="Debug.Assert(s_emptyTypeMembers.Count == 0); 797612"];
18734 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 797613"];
18735 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 797614"];
18736 [label="symbols.Count > 0 797615"];
18737 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 797616"];
18738 [label="symbols.Free(); 797617"];
18739 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 797618"];
18740 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 797619"];
18741 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 797620"];
18742 [label="AddDeclarationDiagnostics(diagnostics); 797621"];
18743 [label="AddDeclarationDiagnostics(diagnostics) 797622"];
18744 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 797623"];
18745 [label="param AddDeclarationDiagnostics(this) 797624"];
18746 [label="ContainingSymbol 797625"];
18747 [label="get\n            {\n                return _containingSymbol;\n            } 797626"];
18748 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 797627"];
18749 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 797628"];
18750 [label="AddDeclarationDiagnostics(diagnostics); 797629"];
18751 [label="state.NotePartComplete(CompletionPart.TypeMembers); 797630"];
18752 [label="state.NotePartComplete(CompletionPart.TypeMembers) 797631"];
18753 [label="param NotePartComplete(CompletionPart part) 797632"];
18754 [label="diagnostics.Free(); 797633"];
18755 [label="return _lazyTypeMembers; 797634"];
18756 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 797635"];
18757 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()) 797636"];
18758 [label="param AddNestedTypesToDictionary(Dictionary<string, ImmutableArray<Symbol>> membersByName) 797637"];
18759 [label="param AddNestedTypesToDictionary(Dictionary<string, ImmutableArray<NamedTypeSymbol>> typesByName) 797638"];
18760 [label="foreach (var pair in typesByName)\n            {\n                string name = pair.Key;\n                ImmutableArray<NamedTypeSymbol> types = pair.Value;\n                ImmutableArray<Symbol> typesAsSymbols = StaticCast<Symbol>.From(types);\n\n                ImmutableArray<Symbol> membersForName;\n                if (membersByName.TryGetValue(name, out membersForName))\n                {\n                    membersByName[name] = membersForName.Concat(typesAsSymbols);\n                }\n                else\n                {\n                    membersByName.Add(name, typesAsSymbols);\n                }\n            } 797639"];
18761 [label="foreach (var pair in typesByName)\n            {\n                string name = pair.Key;\n                ImmutableArray<NamedTypeSymbol> types = pair.Value;\n                ImmutableArray<Symbol> typesAsSymbols = StaticCast<Symbol>.From(types);\n\n                ImmutableArray<Symbol> membersForName;\n                if (membersByName.TryGetValue(name, out membersForName))\n                {\n                    membersByName[name] = membersForName.Concat(typesAsSymbols);\n                }\n                else\n                {\n                    membersByName.Add(name, typesAsSymbols);\n                }\n            } 797640"];
18762 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 797641"];
18763 [label="MergePartialMembers(ref membersByName, diagnostics); 797642"];
18764 [label="MergePartialMembers(ref membersByName, diagnostics); 797643"];
18765 [label="MergePartialMembers(ref membersByName, diagnostics) 797644"];
18766 [label="param MergePartialMembers(ref Dictionary<string, ImmutableArray<Symbol>> membersByName) 797645"];
18767 [label="param MergePartialMembers(DiagnosticBag diagnostics) 797646"];
18768 [label="param MergePartialMembers(this) 797647"];
18769 [label="var memberNames = ArrayBuilder<string>.GetInstance(membersByName.Count); 797648"];
18770 [label="memberNames.AddRange(membersByName.Keys); 797649"];
18771 [label="memberNames.AddRange(membersByName.Keys); 797650"];
18772 [label="var methodsBySignature = new Dictionary<MethodSymbol, SourceMemberMethodSymbol>(MemberSignatureComparer.PartialMethodsComparer); 797651"];
18773 [label="foreach (var name in memberNames)\n            {\n                methodsBySignature.Clear();\n                foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                }\n\n                foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                }\n            } 797652"];
18774 [label="foreach (var name in memberNames)\n            {\n                methodsBySignature.Clear();\n                foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                }\n\n                foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                }\n            } 797653"];
18775 [label="methodsBySignature.Clear(); 797654"];
18776 [label="foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                } 797655"];
18777 [label="var method = symbol as SourceMemberMethodSymbol; 797656"];
18778 [label="if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    } 797657"];
18779 [label="foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                } 797658"];
18780 [label="methodsBySignature.Clear(); 797659"];
18781 [label="foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                } 797660"];
18782 [label="memberNames.Free(); 797661"];
18783 [label="MergePartialMembers(ref membersByName, diagnostics); 797662"];
18784 [label="return membersByName; 797663"];
18785 [label="var membersDictionary = MakeAllMembers(diagnostics); 797664"];
18786 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 797665"];
18787 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 797666"];
18788 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 797667"];
18789 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 797668"];
18790 [label="AddDeclarationDiagnostics(diagnostics); 797669"];
18791 [label="AddDeclarationDiagnostics(diagnostics) 797670"];
18792 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 797671"];
18793 [label="param AddDeclarationDiagnostics(this) 797672"];
18794 [label="ContainingSymbol 797673"];
18795 [label="get\n            {\n                return _containingSymbol;\n            } 797674"];
18796 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 797675"];
18797 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 797676"];
18798 [label="AddDeclarationDiagnostics(diagnostics); 797677"];
18799 [label="state.NotePartComplete(CompletionPart.Members); 797678"];
18800 [label="state.NotePartComplete(CompletionPart.Members) 797679"];
18801 [label="param NotePartComplete(CompletionPart part) 797680"];
18802 [label="diagnostics.Free(); 797681"];
18803 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)); 797682"];
18804 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)); 797683"];
18805 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)) 797684"];
18806 [label="param SpinWaitComplete(CompletionPart part) 797685"];
18807 [label="param SpinWaitComplete(CancellationToken cancellationToken) 797686"];
18808 [label="param SpinWaitComplete(this) 797687"];
18809 [label="if (HasComplete(part))\n            {\n                return;\n            } 797688"];
18810 [label="HasComplete(part) 797689"];
18811 [label="param HasComplete(CompletionPart part) 797690"];
18812 [label="param HasComplete(this) 797691"];
18813 [label="return (_completeParts & (int)part) == (int)part; 797692"];
18814 [label="return; 797693"];
18815 [label="return _lazyMembersDictionary; 797694"];
18816 [label="return GetMembersByNameSlow(); 797695"];
18817 [label="if (GetMembersByName().TryGetValue(name, out members))\n            {\n                return members;\n            } 797696"];
18818 [label="if (GetMembersByName().TryGetValue(name, out members))\n            {\n                return members;\n            } 797697"];
18819 [label="if (GetMembersByName().TryGetValue(name, out members))\n            {\n                return members;\n            } 797698"];
18820 [label="if (GetMembersByName().TryGetValue(name, out members))\n            {\n                return members;\n            } 797699"];
18821 [label="return members; 797700"];
18822 [label="CustomAssert.Equal(SymbolKind.Field, varX.Kind); 797701"];
18823 [label="varX.Kind 797702"];
18824 [label="get\n            {\n                return SymbolKind.Field;\n            } 797703"];
18825 [label="return SymbolKind.Field; 797704"];
18826 [label="CustomAssert.Equal(SymbolKind.Field, varX.Kind); 797705"];
18827 [label="CustomAssert.Same(comp.GetSpecialType(SpecialType.System_Nullable_T), varX.Type.OriginalDefinition); 797706"];
18828 [label="comp.GetSpecialType(SpecialType.System_Nullable_T) 797707"];
18829 [label="param GetSpecialType(SpecialType specialType) 797708"];
18830 [label="param GetSpecialType(this) 797709"];
18831 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 797710"];
18832 [label="NamedTypeSymbol result; 797711"];
18833 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 797712"];
18834 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 797713"];
18835 [label="Assembly 797714"];
18836 [label="GetBoundReferenceManager(); 797715"];
18837 [label="result = Assembly.GetSpecialType(specialType); 797716"];
18838 [label="result = Assembly.GetSpecialType(specialType); 797717"];
18839 [label="Assembly.GetSpecialType(specialType) 797718"];
18840 [label="param GetSpecialType(SpecialType type) 797719"];
18841 [label="param GetSpecialType(this) 797720"];
18842 [label="CorLibrary 797721"];
18843 [label="get\n            {\n                return _corLibrary;\n            } 797722"];
18844 [label="return CorLibrary.GetDeclaredSpecialType(type); 797723"];
18845 [label="return CorLibrary.GetDeclaredSpecialType(type); 797724"];
18846 [label="CorLibrary.GetDeclaredSpecialType(type) 797725"];
18847 [label="param GetDeclaredSpecialType(SpecialType type) 797726"];
18848 [label="param GetDeclaredSpecialType(this) 797727"];
18849 [label="this.Modules 797728"];
18850 [label="get\n            {\n                return _modules;\n            } 797729"];
18851 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 797730"];
18852 [label="module.GetReferencedAssemblies() 797731"];
18853 [label="param GetReferencedAssemblies(this) 797732"];
18854 [label="AssertReferencesInitialized() 797733"];
18855 [label="param AssertReferencesInitialized(this) 797734"];
18856 [label="Debug.Assert(_moduleReferences != null); 797735"];
18857 [label="Debug.Assert(_moduleReferences != null); 797736"];
18858 [label="AssertReferencesInitialized(); 797737"];
18859 [label="return _moduleReferences.Identities; 797738"];
18860 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 797739"];
18861 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 797740"];
18862 [label="if (_lazySpecialTypes == null || (object)_lazySpecialTypes[(int)type] == null)\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                ModuleSymbol module = this.Modules[0];\n                NamedTypeSymbol result = module.LookupTopLevelMetadataType(ref emittedName);\n                if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                }\n                RegisterDeclaredSpecialType(result);\n            } 797741"];
18863 [label="if (_lazySpecialTypes == null || (object)_lazySpecialTypes[(int)type] == null)\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                ModuleSymbol module = this.Modules[0];\n                NamedTypeSymbol result = module.LookupTopLevelMetadataType(ref emittedName);\n                if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                }\n                RegisterDeclaredSpecialType(result);\n            } 797742"];
18864 [label="MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true); 797743"];
18865 [label="MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true); 797744"];
18866 [label="this.Modules 797745"];
18867 [label="ModuleSymbol module = this.Modules[0]; 797746"];
18868 [label="ModuleSymbol module = this.Modules[0]; 797747"];
18869 [label="NamedTypeSymbol result = module.LookupTopLevelMetadataType(ref emittedName); 797748"];
18870 [label="module.LookupTopLevelMetadataType(ref emittedName) 797749"];
18871 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 797750"];
18872 [label="param LookupTopLevelMetadataType(this) 797751"];
18873 [label="NamedTypeSymbol result; 797752"];
18874 [label="this.GlobalNamespace 797753"];
18875 [label="get { return _globalNamespace; } 797754"];
18876 [label="NamespaceSymbol scope = this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments); 797755"];
18877 [label="NamespaceSymbol scope = this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments); 797756"];
18878 [label="this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments) 797757"];
18879 [label="param LookupNestedNamespace(ImmutableArray<string> names) 797758"];
18880 [label="param LookupNestedNamespace(this) 797759"];
18881 [label="NamespaceSymbol scope = this; 797760"];
18882 [label="foreach (string name in names)\n            {\n                NamespaceSymbol nextScope = null;\n\n                foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                }\n\n                scope = nextScope;\n\n                if ((object)scope == null)\n                {\n                    break;\n                }\n            } 797761"];
18883 [label="NamespaceSymbol nextScope = null; 797762"];
18884 [label="foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                } 797763"];
18885 [label="scope.GetMembers(name) 797764"];
18886 [label="param GetMembers(string name) 797765"];
18887 [label="param GetMembers(this) 797766"];
18888 [label="EnsureAllMembersLoaded(); 797767"];
18889 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 797768"];
18890 [label="if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                } 797769"];
18891 [label="if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                } 797770"];
18892 [label="return ImmutableArray.Create<Symbol>(ns); 797771"];
18893 [label="var ns = symbol as NamespaceSymbol; 797772"];
18894 [label="if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    } 797773"];
18895 [label="if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    } 797774"];
18896 [label="if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        } 797775"];
18897 [label="if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        } 797776"];
18898 [label="nextScope = ns; 797777"];
18899 [label="scope = nextScope; 797778"];
18900 [label="if ((object)scope == null)\n                {\n                    break;\n                } 797779"];
18901 [label="if ((object)scope == null)\n                {\n                    break;\n                } 797780"];
18902 [label="return scope; 797781"];
18903 [label="if ((object)scope == null)\n            {\n                // We failed to locate the namespace\n                result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName);\n            }\n            else\n            {\n                result = scope.LookupMetadataType(ref emittedName);\n            } 797782"];
18904 [label="if ((object)scope == null)\n            {\n                // We failed to locate the namespace\n                result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName);\n            }\n            else\n            {\n                result = scope.LookupMetadataType(ref emittedName);\n            } 797783"];
18905 [label="result = scope.LookupMetadataType(ref emittedName); 797784"];
18906 [label="scope.LookupMetadataType(ref emittedName) 797785"];
18907 [label="param LookupMetadataType(ref MetadataTypeName emittedTypeName) 797786"];
18908 [label="param LookupMetadataType(this) 797787"];
18909 [label="Debug.Assert(!emittedTypeName.IsNull); 797788"];
18910 [label="NamespaceOrTypeSymbol scope = this; 797789"];
18911 [label="scope.Kind 797790"];
18912 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 797791"];
18913 [label="if (scope.Kind == SymbolKind.ErrorType)\n            {\n                return new MissingMetadataTypeSymbol.Nested((NamedTypeSymbol)scope, ref emittedTypeName);\n            } 797792"];
18914 [label="NamedTypeSymbol? namedType = null; 797793"];
18915 [label="ImmutableArray<NamedTypeSymbol> namespaceOrTypeMembers; 797794"];
18916 [label="namespaceOrTypeMembers 797795"];
18917 [label="scope.IsNamespace 797796"];
18918 [label="get\n            {\n                return Kind == SymbolKind.Namespace;\n            } 797797"];
18919 [label="Kind 797798"];
18920 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 797799"];
18921 [label="return Kind == SymbolKind.Namespace; 797800"];
18922 [label="bool isTopLevel = scope.IsNamespace; 797801"];
18923 [label="Debug.Assert(!isTopLevel || scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) == emittedTypeName.NamespaceName); 797802"];
18924 [label="scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) 797803"];
18925 [label="param ToDisplayString(SymbolDisplayFormat format = null) 797804"];
18926 [label="param ToDisplayString(this) 797805"];
18927 [label="ISymbol 797806"];
18928 [label="get\n            {\n                if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                }\n\n                return _lazyISymbol;\n            } 797807"];
18929 [label="if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                } 797808"];
18930 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 797809"];
18931 [label="CreateISymbol() 797810"];
18932 [label="param CreateISymbol(this) 797811"];
18933 [label="return new PublicModel.NamespaceSymbol(this); 797812"];
18934 [label="return new PublicModel.NamespaceSymbol(this); 797813"];
18935 [label="new PublicModel.NamespaceSymbol(this) 797814"];
18936 [label="param NamespaceSymbol(Symbols.NamespaceSymbol underlying) 797815"];
18937 [label="param NamespaceSymbol(this) 797816"];
18938 [label="param NamespaceSymbol(this) 797817"];
18939 [label="param NamespaceOrTypeSymbol(this) 797818"];
18940 [label="param NamespaceOrTypeSymbol(this) 797819"];
18941 [label="param Symbol(this) 797820"];
18942 [label="_underlying 797821"];
18943 [label="Debug.Assert(underlying is object); 797822"];
18944 [label="_underlying 797823"];
18945 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 797824"];
18946 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 797825"];
18947 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 797826"];
18948 [label="return _lazyISymbol; 797827"];
18949 [label="return SymbolDisplay.ToDisplayString(ISymbol, format); 797828"];
18950 [label="return SymbolDisplay.ToDisplayString(ISymbol, format); 797829"];
18951 [label="SymbolDisplay.ToDisplayString(ISymbol, format) 797830"];
18952 [label="param ToDisplayString(ISymbol symbol) 797831"];
18953 [label="param ToDisplayString(SymbolDisplayFormat? format = null) 797832"];
18954 [label="return ToDisplayParts(symbol, format).ToDisplayString(); 797833"];
18955 [label="return ToDisplayParts(symbol, format).ToDisplayString(); 797834"];
18956 [label="ToDisplayParts(symbol, format) 797835"];
18957 [label="param ToDisplayParts(ISymbol symbol) 797836"];
18958 [label="param ToDisplayParts(SymbolDisplayFormat? format = null) 797837"];
18959 [label="format = format ?? SymbolDisplayFormat.CSharpErrorMessageFormat; 797838"];
18960 [label="return ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false); 797839"];
18961 [label="return ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false); 797840"];
18962 [label="return ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false); 797841"];
18963 [label="ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false) 797842"];
18964 [label="param ToDisplayParts(ISymbol symbol) 797843"];
18965 [label="param ToDisplayParts(SemanticModel? semanticModelOpt) 797844"];
18966 [label="param ToDisplayParts(int positionOpt) 797845"];
18967 [label="param ToDisplayParts(SymbolDisplayFormat format) 797846"];
18968 [label="param ToDisplayParts(bool minimal) 797847"];
18969 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 797848"];
18970 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 797849"];
18971 [label="if (minimal)\n            {\n                if (semanticModelOpt == null)\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeSemanticModelMust);\n                }\n                else if (positionOpt < 0 || positionOpt > semanticModelOpt.SyntaxTree.Length) // Note: not >= since EOF is allowed.\n                {\n                    throw new ArgumentOutOfRangeException(CSharpResources.PositionNotWithinTree);\n                }\n            }\n            else\n            {\n                Debug.Assert(semanticModelOpt == null);\n                Debug.Assert(positionOpt < 0);\n            } 797850"];
18972 [label="Debug.Assert(semanticModelOpt == null); 797851"];
18973 [label="Debug.Assert(semanticModelOpt == null); 797852"];
18974 [label="Debug.Assert(positionOpt < 0); 797853"];
18975 [label="Debug.Assert(positionOpt < 0); 797854"];
18976 [label="if (symbol is Symbols.PublicModel.MethodSymbol && \n                ((Symbols.PublicModel.MethodSymbol)symbol).UnderlyingMethodSymbol is SynthesizedSimpleProgramEntryPointSymbol)\n            {\n                return ImmutableArray.Create<SymbolDisplayPart>(new SymbolDisplayPart(SymbolDisplayPartKind.MethodName, symbol, '<top-level-statements-entry-point>'));\n            } 797855"];
18977 [label="var builder = ArrayBuilder<SymbolDisplayPart>.GetInstance(); 797856"];
18978 [label="'modopt' 797857"];
18979 [label="IL_KEYWORD_MODOPT = 'modopt' 797858"];
18980 [label="'modreq' 797859"];
18981 [label="IL_KEYWORD_MODREQ = 'modreq' 797860"];
18982 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 797861"];
18983 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 797862"];
18984 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 797863"];
18985 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 797864"];
18986 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 797865"];
18987 [label="new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt) 797866"];
18988 [label="param SymbolDisplayVisitor(ArrayBuilder<SymbolDisplayPart> builder) 797867"];
18989 [label="param SymbolDisplayVisitor(SymbolDisplayFormat format) 797868"];
18990 [label="param SymbolDisplayVisitor(SemanticModel semanticModelOpt) 797869"];
18991 [label="param SymbolDisplayVisitor(int positionOpt) 797870"];
18992 [label="param SymbolDisplayVisitor(this) 797871"];
18993 [label="builder 797872"];
18994 [label="format 797873"];
18995 [label="true 797874"];
18996 [label="semanticModelOpt 797875"];
18997 [label="positionOpt 797876"];
18998 [label="param SymbolDisplayVisitor(this) 797877"];
18999 [label="param SymbolDisplayVisitor(this) 797878"];
19000 [label="_escapeKeywordIdentifiers 797879"];
19001 [label="_lazyAliasMap 797880"];
19002 [label="_escapeKeywordIdentifiers = format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers); 797881"];
19003 [label="_escapeKeywordIdentifiers = format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers); 797882"];
19004 [label="_escapeKeywordIdentifiers 797883"];
19005 [label="symbol.Accept(visitor); 797884"];
19006 [label="symbol.Accept(visitor) 797885"];
19007 [label="param Accept(SymbolVisitor visitor) 797886"];
19008 [label="param Accept(this) 797887"];
19009 [label="Accept(visitor); 797888"];
19010 [label="Accept(visitor) 797889"];
19011 [label="param Accept(SymbolVisitor visitor) 797890"];
19012 [label="param Accept(this) 797891"];
19013 [label="visitor.VisitNamespace(this); 797892"];
19014 [label="visitor.VisitNamespace(this) 797893"];
19015 [label="param VisitNamespace(INamespaceSymbol symbol) 797894"];
19016 [label="param VisitNamespace(this) 797895"];
19017 [label="if (this.IsMinimizing)\n            {\n                if (TryAddAlias(symbol, builder))\n                {\n                    return;\n                }\n\n                MinimallyQualify(symbol);\n                return;\n            } 797896"];
19018 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeNamespaceKeyword))\n            {\n                AddKeyword(SyntaxKind.NamespaceKeyword);\n                AddSpace();\n            } 797897"];
19019 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeNamespaceKeyword))\n            {\n                AddKeyword(SyntaxKind.NamespaceKeyword);\n                AddSpace();\n            } 797898"];
19020 [label="if (format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                var containingNamespace = symbol.ContainingNamespace;\n                if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 797899"];
19021 [label="symbol.ContainingNamespace 797900"];
19022 [label="=> UnderlyingSymbol.ContainingNamespace.GetPublicSymbol() 797901"];
19023 [label="UnderlyingSymbol 797902"];
19024 [label="=> _underlying 797903"];
19025 [label="_underlying 797904"];
19026 [label="UnderlyingSymbol.ContainingNamespace 797905"];
19027 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 797906"];
19028 [label="this.ContainingSymbol 797907"];
19029 [label="get { return _containingNamespaceSymbol; } 797908"];
19030 [label="return _containingNamespaceSymbol; 797909"];
19031 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797910"];
19032 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 797911"];
19033 [label="var ns = container as NamespaceSymbol; 797912"];
19034 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 797913"];
19035 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 797914"];
19036 [label="return ns; 797915"];
19037 [label="UnderlyingSymbol.ContainingNamespace.GetPublicSymbol() 797916"];
19038 [label="param GetPublicSymbol(this NamespaceSymbol? symbol) 797917"];
19039 [label="return symbol.GetPublicSymbol<INamespaceSymbol>(); 797918"];
19040 [label="symbol.GetPublicSymbol<INamespaceSymbol>() 797919"];
19041 [label="param GetPublicSymbol(this Symbol? symbol) 797920"];
19042 [label=".ISymbol 797921"];
19043 [label="get\n            {\n                if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                }\n\n                return _lazyISymbol;\n            } 797922"];
19044 [label="param NamespaceOrTypeSymbol(this) 797923"];
19045 [label="param Symbol(this) 797924"];
19046 [label="_underlying 797925"];
19047 [label="Debug.Assert(underlying is object); 797926"];
19048 [label="return (TISymbol?)symbol?.ISymbol; 797927"];
19049 [label="var containingNamespace = symbol.ContainingNamespace; 797928"];
19050 [label="if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 797929"];
19051 [label="ShouldVisitNamespace(containingNamespace) 797930"];
19052 [label="param ShouldVisitNamespace(ISymbol containingSymbol) 797931"];
19053 [label="param ShouldVisitNamespace(this) 797932"];
19054 [label="var namespaceSymbol = containingSymbol as INamespaceSymbol; 797933"];
19055 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 797934"];
19056 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 797935"];
19057 [label="if (format.TypeQualificationStyle != SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                return false;\n            } 797936"];
19058 [label="namespaceSymbol.IsGlobalNamespace 797937"];
19059 [label="=> _underlying.IsGlobalNamespace 797938"];
19060 [label="_underlying.IsGlobalNamespace 797939"];
19061 [label="get\n            {\n                return true;\n            } 797940"];
19062 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 797941"];
19063 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 797942"];
19064 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 797943"];
19065 [label="if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 797944"];
19066 [label="symbol.IsGlobalNamespace 797945"];
19067 [label="=> _underlying.IsGlobalNamespace 797946"];
19068 [label="_underlying.IsGlobalNamespace 797947"];
19069 [label="get\n            {\n                return false;\n            } 797948"];
19070 [label="return false; 797949"];
19071 [label="if (symbol.IsGlobalNamespace)\n            {\n                AddGlobalNamespace(symbol);\n            }\n            else\n            {\n                builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name));\n            } 797950"];
19072 [label="builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name)); 797951"];
19073 [label="builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name)); 797952"];
19074 [label="symbol.Name 797953"];
19075 [label="=> UnderlyingSymbol.Name 797954"];
19076 [label="UnderlyingSymbol 797955"];
19077 [label="=> _underlying 797956"];
19078 [label="_underlying 797957"];
19079 [label="UnderlyingSymbol.Name 797958"];
19080 [label="get\n            {\n                return _name;\n            } 797959"];
19081 [label="builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name)); 797960"];
19082 [label="CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name) 797961"];
19083 [label="param CreatePart(SymbolDisplayPartKind kind) 797962"];
19084 [label="param CreatePart(ISymbol symbol) 797963"];
19085 [label="param CreatePart(string text) 797964"];
19086 [label="param CreatePart(this) 797965"];
19087 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 797966"];
19088 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 797967"];
19089 [label="(text == null) 797968"];
19090 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 797969"];
19091 [label="(_escapeKeywordIdentifiers && IsEscapable(kind)) 797970"];
19092 [label="return new SymbolDisplayPart(kind, symbol, text); 797971"];
19093 [label="return new SymbolDisplayPart(kind, symbol, text); 797972"];
19094 [label="return new SymbolDisplayPart(kind, symbol, text); 797973"];
19095 [label="return new SymbolDisplayPart(kind, symbol, text); 797974"];
19096 [label="visitor.VisitNamespace(this); 797975"];
19097 [label="Accept(visitor); 797976"];
19098 [label="symbol.Accept(visitor); 797977"];
19099 [label="return builder.ToImmutableAndFree(); 797978"];
19100 [label="Debug.Assert(!isTopLevel || scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) == emittedTypeName.NamespaceName); 797979"];
19101 [label="Debug.Assert(!isTopLevel || scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) == emittedTypeName.NamespaceName); 797980"];
19102 [label="if (emittedTypeName.IsMangled)\n            {\n                Debug.Assert(!emittedTypeName.UnmangledTypeName.Equals(emittedTypeName.TypeName) && emittedTypeName.InferredArity > 0);\n\n                if (emittedTypeName.ForcedArity == -1 || emittedTypeName.ForcedArity == emittedTypeName.InferredArity)\n                {\n                    // Let's handle mangling case first.\n                    namespaceOrTypeMembers = scope.GetTypeMembers(emittedTypeName.UnmangledTypeName);\n\n                    foreach (var named in namespaceOrTypeMembers)\n                    {\n                        if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                Debug.Assert(ReferenceEquals(emittedTypeName.UnmangledTypeName, emittedTypeName.TypeName) && emittedTypeName.InferredArity == 0);\n            } 797981"];
19103 [label="Debug.Assert(!emittedTypeName.UnmangledTypeName.Equals(emittedTypeName.TypeName) && emittedTypeName.InferredArity > 0); 797982"];
19104 [label="Debug.Assert(!emittedTypeName.UnmangledTypeName.Equals(emittedTypeName.TypeName) && emittedTypeName.InferredArity > 0); 797983"];
19105 [label="if (emittedTypeName.ForcedArity == -1 || emittedTypeName.ForcedArity == emittedTypeName.InferredArity)\n                {\n                    // Let's handle mangling case first.\n                    namespaceOrTypeMembers = scope.GetTypeMembers(emittedTypeName.UnmangledTypeName);\n\n                    foreach (var named in namespaceOrTypeMembers)\n                    {\n                        if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        }\n                    }\n                } 797984"];
19106 [label="namespaceOrTypeMembers = scope.GetTypeMembers(emittedTypeName.UnmangledTypeName); 797985"];
19107 [label="scope.GetTypeMembers(emittedTypeName.UnmangledTypeName) 797986"];
19108 [label="param GetTypeMembers(string name) 797987"];
19109 [label="param GetTypeMembers(this) 797988"];
19110 [label="EnsureAllMembersLoaded() 797989"];
19111 [label="param EnsureAllMembersLoaded(this) 797990"];
19112 [label="var typesByNS = _typesByNS; 797991"];
19113 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 797992"];
19114 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 797993"];
19115 [label="System.Diagnostics.Debug.Assert(typesByNS != null); 797994"];
19116 [label="System.Diagnostics.Debug.Assert(typesByNS != null); 797995"];
19117 [label="LoadAllMembers(typesByNS); 797996"];
19118 [label="LoadAllMembers(typesByNS) 797997"];
19119 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 797998"];
19120 [label="Debug.Assert(typesByNS != null); 797999"];
19121 [label="Debug.Assert(typesByNS != null); 798000"];
19122 [label="get\n            {\n                return false;\n            } 798001"];
19123 [label="GetQualifiedNameLength() 798002"];
19124 [label="param GetQualifiedNameLength(this) 798003"];
19125 [label="this.Name 798004"];
19126 [label="get\n            {\n                return _name;\n            } 798005"];
19127 [label="int length = this.Name.Length; 798006"];
19128 [label="ContainingNamespace 798007"];
19129 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 798008"];
19130 [label="var parent = ContainingNamespace; 798009"];
19131 [label=".IsGlobalNamespace 798010"];
19132 [label="get\n            {\n                return true;\n            } 798011"];
19133 [label="while (parent?.IsGlobalNamespace == false)\n            {\n                // add name of the parent + '.'\n                length += parent.Name.Length + 1;\n                parent = parent.ContainingNamespace;\n            } 798012"];
19134 [label="while (parent?.IsGlobalNamespace == false)\n            {\n                // add name of the parent + '.'\n                length += parent.Name.Length + 1;\n                parent = parent.ContainingNamespace;\n            } 798013"];
19135 [label="return length; 798014"];
19136 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 798015"];
19137 [label="_containingNamespaceSymbol 798016"];
19138 [label="_name 798017"];
19139 [label="_typesByNS 798018"];
19140 [label="Debug.Assert(name != null); 798019"];
19141 [label="Debug.Assert((object)containingNamespace != null); 798020"];
19142 [label="Debug.Assert(typesByNS != null); 798021"];
19143 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798022"];
19144 [label="_containingNamespaceSymbol.ContainingPEModule 798023"];
19145 [label="get\n            {\n                return _moduleSymbol;\n            } 798024"];
19146 [label="return _containingNamespaceSymbol.ContainingPEModule; 798025"];
19147 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 798026"];
19148 [label="genericParameterHandles 798027"];
19149 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 798028"];
19150 [label="param GetGenericInfo(out ushort arity) 798029"];
19151 [label="param GetGenericInfo(out BadImageFormatException mrEx) 798030"];
19152 [label="mrEx = null; 798031"];
19153 [label="PENamedTypeSymbol result; 798032"];
19154 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 798033"];
19155 [label="mangleName 798034"];
19156 [label="param PENamedTypeSymbol(out bool mangleName) 798035"];
19157 [label="_lazyTupleData 798036"];
19158 [label="_container 798037"];
19159 [label="_name 798038"];
19160 [label="_flags 798039"];
19161 [label="_corTypeId 798040"];
19162 [label="Debug.Assert(!handle.IsNil); 798041"];
19163 [label="Debug.Assert((object)container != null); 798042"];
19164 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 798043"];
19165 [label="string metadataName; 798044"];
19166 [label="bool makeBad = false; 798045"];
19167 [label="mangleName = false; 798046"];
19168 [label="Accessibility access = Accessibility.Private; 798047"];
19169 [label="access = Accessibility.Public; 798048"];
19170 [label="_corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName)); 798049"];
19171 [label="_corTypeId 798050"];
19172 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 798051"];
19173 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 798052"];
19174 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 798053"];
19175 [label="genericParameterHandles 798054"];
19176 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 798055"];
19177 [label="param GetGenericInfo(out ushort arity) 798056"];
19178 [label="param GetGenericInfo(out BadImageFormatException mrEx) 798057"];
19179 [label="mrEx = null; 798058"];
19180 [label="PENamedTypeSymbol result; 798059"];
19181 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 798060"];
19182 [label="mangleName 798061"];
19183 [label="param PENamedTypeSymbol(out bool mangleName) 798062"];
19184 [label="_lazyTupleData 798063"];
19185 [label="_container 798064"];
19186 [label="_name 798065"];
19187 [label="_flags 798066"];
19188 [label="_corTypeId 798067"];
19189 [label="Debug.Assert(!handle.IsNil); 798068"];
19190 [label="Debug.Assert((object)container != null); 798069"];
19191 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 798070"];
19192 [label="string metadataName; 798071"];
19193 [label="bool makeBad = false; 798072"];
19194 [label="mangleName = false; 798073"];
19195 [label="Accessibility access = Accessibility.Private; 798074"];
19196 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 798075"];
19197 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 798076"];
19198 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 798077"];
19199 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 798078"];
19200 [label="mangleName 798079"];
19201 [label="param PENamedTypeSymbol(out bool mangleName) 798080"];
19202 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 798081"];
19203 [label="_arity 798082"];
19204 [label="_mangleName 798083"];
19205 [label="Debug.Assert(genericParameterHandles.Count > 0); 798084"];
19206 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 798085"];
19207 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 798086"];
19208 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 798087"];
19209 [label="bool added; 798088"];
19210 [label="Debug.Assert(added); 798089"];
19211 [label="type.SpecialType 798090"];
19212 [label="get\n            {\n                return _corTypeId;\n            } 798091"];
19213 [label="return _corTypeId; 798092"];
19214 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 798093"];
19215 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 798094"];
19216 [label="_assemblySymbol.RegisterDeclaredSpecialType(type); 798095"];
19217 [label="_assemblySymbol.RegisterDeclaredSpecialType(type) 798096"];
19218 [label="param RegisterDeclaredSpecialType(NamedTypeSymbol corType) 798097"];
19219 [label="param RegisterDeclaredSpecialType(this) 798098"];
19220 [label="corType.SpecialType 798099"];
19221 [label="get\n            {\n                return _corTypeId;\n            } 798100"];
19222 [label="SpecialType typeId = corType.SpecialType; 798101"];
19223 [label="Debug.Assert(typeId != SpecialType.None); 798102"];
19224 [label="corType.ContainingAssembly 798103"];
19225 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 798104"];
19226 [label="this.ContainingSymbol 798105"];
19227 [label="get\n            {\n                return _container;\n            } 798106"];
19228 [label="return _container; 798107"];
19229 [label="var container = this.ContainingSymbol; 798108"];
19230 [label="return (object)container != null ? container.ContainingAssembly : null; 798109"];
19231 [label="return (object)container != null ? container.ContainingAssembly : null; 798110"];
19232 [label="(object)container != null 798111"];
19233 [label="container.ContainingAssembly 798112"];
19234 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 798113"];
19235 [label="ContainingPEModule 798114"];
19236 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798115"];
19237 [label="return ContainingPEModule.ContainingAssembly; 798116"];
19238 [label="ContainingPEModule.ContainingAssembly 798117"];
19239 [label="get\n            {\n                return _assemblySymbol;\n            } 798118"];
19240 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798119"];
19241 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798120"];
19242 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798121"];
19243 [label="corType.ContainingModule 798122"];
19244 [label="get\n            {\n                return ContainingPEModule;\n            } 798123"];
19245 [label="ContainingPEModule 798124"];
19246 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 798125"];
19247 [label="Symbol s = _container; 798126"];
19248 [label="s.Kind 798127"];
19249 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798128"];
19250 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 798129"];
19251 [label="((PENamespaceSymbol)s).ContainingPEModule 798130"];
19252 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798131"];
19253 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 798132"];
19254 [label="return ContainingPEModule; 798133"];
19255 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798134"];
19256 [label="corType.ContainingModule.Ordinal 798135"];
19257 [label="get\n            {\n                return _ordinal;\n            } 798136"];
19258 [label="return _ordinal; 798137"];
19259 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798138"];
19260 [label="this.CorLibrary 798139"];
19261 [label="get\n            {\n                return _corLibrary;\n            } 798140"];
19262 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798141"];
19263 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798142"];
19264 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 798143"];
19265 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 798144"];
19266 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 798145"];
19267 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 798146"];
19268 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 798147"];
19269 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 798148"];
19270 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 798149"];
19271 [label="Interlocked.Increment(ref _cachedSpecialTypes); 798150"];
19272 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798151"];
19273 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798152"];
19274 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798153"];
19275 [label="_assemblySymbol.RegisterDeclaredSpecialType(type); 798154"];
19276 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 798155"];
19277 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 798156"];
19278 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 798157"];
19279 [label="keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes; 798158"];
19280 [label="bool added; 798159"];
19281 [label="Debug.Assert(added); 798160"];
19282 [label="Debug.Assert(typeId != SpecialType.None); 798161"];
19283 [label="corType.ContainingAssembly 798162"];
19284 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 798163"];
19285 [label="this.ContainingSymbol 798164"];
19286 [label="get\n            {\n                return _container;\n            } 798165"];
19287 [label="return _container; 798166"];
19288 [label="var container = this.ContainingSymbol; 798167"];
19289 [label="return (object)container != null ? container.ContainingAssembly : null; 798168"];
19290 [label="return (object)container != null ? container.ContainingAssembly : null; 798169"];
19291 [label="(object)container != null 798170"];
19292 [label="container.ContainingAssembly 798171"];
19293 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 798172"];
19294 [label="ContainingPEModule 798173"];
19295 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798174"];
19296 [label="return ContainingPEModule.ContainingAssembly; 798175"];
19297 [label="ContainingPEModule.ContainingAssembly 798176"];
19298 [label="get\n            {\n                return _assemblySymbol;\n            } 798177"];
19299 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798178"];
19300 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798179"];
19301 [label="corType.ContainingModule 798180"];
19302 [label="get\n            {\n                return ContainingPEModule;\n            } 798181"];
19303 [label="ContainingPEModule 798182"];
19304 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 798183"];
19305 [label="Symbol s = _container; 798184"];
19306 [label="s.Kind 798185"];
19307 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798186"];
19308 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 798187"];
19309 [label="((PENamespaceSymbol)s).ContainingPEModule 798188"];
19310 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798189"];
19311 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 798190"];
19312 [label="return ContainingPEModule; 798191"];
19313 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798192"];
19314 [label="corType.ContainingModule.Ordinal 798193"];
19315 [label="get\n            {\n                return _ordinal;\n            } 798194"];
19316 [label="return _ordinal; 798195"];
19317 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798196"];
19318 [label="this.CorLibrary 798197"];
19319 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798198"];
19320 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798199"];
19321 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798200"];
19322 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798201"];
19323 [label="bool added; 798202"];
19324 [label="Debug.Assert(added); 798203"];
19325 [label="Debug.Assert(typeId != SpecialType.None); 798204"];
19326 [label="corType.ContainingAssembly 798205"];
19327 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 798206"];
19328 [label="this.ContainingSymbol 798207"];
19329 [label="get\n            {\n                return _container;\n            } 798208"];
19330 [label="return _container; 798209"];
19331 [label="var container = this.ContainingSymbol; 798210"];
19332 [label="return (object)container != null ? container.ContainingAssembly : null; 798211"];
19333 [label="return (object)container != null ? container.ContainingAssembly : null; 798212"];
19334 [label="(object)container != null 798213"];
19335 [label="container.ContainingAssembly 798214"];
19336 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 798215"];
19337 [label="ContainingPEModule 798216"];
19338 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798217"];
19339 [label="return ContainingPEModule.ContainingAssembly; 798218"];
19340 [label="ContainingPEModule.ContainingAssembly 798219"];
19341 [label="get\n            {\n                return _assemblySymbol;\n            } 798220"];
19342 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798221"];
19343 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798222"];
19344 [label="corType.ContainingModule 798223"];
19345 [label="get\n            {\n                return ContainingPEModule;\n            } 798224"];
19346 [label="ContainingPEModule 798225"];
19347 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 798226"];
19348 [label="Symbol s = _container; 798227"];
19349 [label="s.Kind 798228"];
19350 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798229"];
19351 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 798230"];
19352 [label="((PENamespaceSymbol)s).ContainingPEModule 798231"];
19353 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798232"];
19354 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 798233"];
19355 [label="return ContainingPEModule; 798234"];
19356 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798235"];
19357 [label="corType.ContainingModule.Ordinal 798236"];
19358 [label="get\n            {\n                return _ordinal;\n            } 798237"];
19359 [label="return _ordinal; 798238"];
19360 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798239"];
19361 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798240"];
19362 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798241"];
19363 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 798242"];
19364 [label="bool added; 798243"];
19365 [label="Debug.Assert(added); 798244"];
19366 [label="return _container; 798245"];
19367 [label="var container = this.ContainingSymbol; 798246"];
19368 [label="return (object)container != null ? container.ContainingAssembly : null; 798247"];
19369 [label="(object)container != null 798248"];
19370 [label="container.ContainingAssembly 798249"];
19371 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 798250"];
19372 [label="ContainingPEModule 798251"];
19373 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798252"];
19374 [label="return ContainingPEModule.ContainingAssembly; 798253"];
19375 [label="ContainingPEModule.ContainingAssembly 798254"];
19376 [label="get\n            {\n                return _assemblySymbol;\n            } 798255"];
19377 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798256"];
19378 [label="Symbol s = _container; 798257"];
19379 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798258"];
19380 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798259"];
19381 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 798260"];
19382 [label="return ContainingPEModule; 798261"];
19383 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798262"];
19384 [label="get\n            {\n                return _ordinal;\n            } 798263"];
19385 [label="return _ordinal; 798264"];
19386 [label="LoadAllMembers(typesByNS); 798265"];
19387 [label="Interlocked.Exchange(ref _typesByNS, null); 798266"];
19388 [label="Interlocked.Exchange(ref _typesByNS, null); 798267"];
19389 [label="EnsureAllMembersLoaded(); 798268"];
19390 [label="ImmutableArray<PENamedTypeSymbol> t; 798269"];
19391 [label="t 798270"];
19392 [label="return lazyTypes.TryGetValue(name, out t)\n                ? StaticCast<NamedTypeSymbol>.From(t)\n                : ImmutableArray<NamedTypeSymbol>.Empty; 798271"];
19393 [label="return lazyTypes.TryGetValue(name, out t)\n                ? StaticCast<NamedTypeSymbol>.From(t)\n                : ImmutableArray<NamedTypeSymbol>.Empty; 798272"];
19394 [label="return lazyTypes.TryGetValue(name, out t)\n                ? StaticCast<NamedTypeSymbol>.From(t)\n                : ImmutableArray<NamedTypeSymbol>.Empty; 798273"];
19395 [label="lazyTypes.TryGetValue(name, out t) 798274"];
19396 [label="foreach (var named in namespaceOrTypeMembers)\n                    {\n                        if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        }\n                    } 798275"];
19397 [label="named.Arity 798276"];
19398 [label="get\n                {\n                    return _arity;\n                } 798277"];
19399 [label="return _arity; 798278"];
19400 [label="if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        } 798279"];
19401 [label="named.MangleName 798280"];
19402 [label="get\n                {\n                    return _mangleName;\n                } 798281"];
19403 [label="return _mangleName; 798282"];
19404 [label="if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        } 798283"];
19405 [label="if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        } 798284"];
19406 [label="if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            } 798285"];
19407 [label="if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            } 798286"];
19408 [label="namedType = named; 798287"];
19409 [label="get\n                {\n                    return 0;\n                } 798288"];
19410 [label="return 0; 798289"];
19411 [label="if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        } 798290"];
19412 [label="int forcedArity = emittedTypeName.ForcedArity; 798291"];
19413 [label="if (emittedTypeName.UseCLSCompliantNameArityEncoding)\n            {\n                // Only types with arity 0 are acceptable, we already examined types with mangled names.\n                if (emittedTypeName.InferredArity > 0)\n                {\n                    goto Done;\n                }\n                else if (forcedArity == -1)\n                {\n                    forcedArity = 0;\n                }\n                else if (forcedArity != 0)\n                {\n                    goto Done;\n                }\n                else\n                {\n                    Debug.Assert(forcedArity == emittedTypeName.InferredArity);\n                }\n            } 798292"];
19414 [label="if (emittedTypeName.InferredArity > 0)\n                {\n                    goto Done;\n                }\n                else if (forcedArity == -1)\n                {\n                    forcedArity = 0;\n                }\n                else if (forcedArity != 0)\n                {\n                    goto Done;\n                }\n                else\n                {\n                    Debug.Assert(forcedArity == emittedTypeName.InferredArity);\n                } 798293"];
19415 [label="if ((object?)namedType == null)\n            {\n                if (isTopLevel)\n                {\n                    return new MissingMetadataTypeSymbol.TopLevel(scope.ContainingModule, ref emittedTypeName);\n                }\n                else\n                {\n                    return new MissingMetadataTypeSymbol.Nested((NamedTypeSymbol)scope, ref emittedTypeName);\n                }\n            } 798294"];
19416 [label="if ((object?)namedType == null)\n            {\n                if (isTopLevel)\n                {\n                    return new MissingMetadataTypeSymbol.TopLevel(scope.ContainingModule, ref emittedTypeName);\n                }\n                else\n                {\n                    return new MissingMetadataTypeSymbol.Nested((NamedTypeSymbol)scope, ref emittedTypeName);\n                }\n            } 798295"];
19417 [label="return namedType; 798296"];
19418 [label="Debug.Assert((object)result != null); 798297"];
19419 [label="Debug.Assert((object)result != null); 798298"];
19420 [label="return result; 798299"];
19421 [label="result.Kind 798300"];
19422 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 798301"];
19423 [label="if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                } 798302"];
19424 [label="result.DeclaredAccessibility 798303"];
19425 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 798304"];
19426 [label="Accessibility access = Accessibility.Private; 798305"];
19427 [label="if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                } 798306"];
19428 [label="if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                } 798307"];
19429 [label="RegisterDeclaredSpecialType(result); 798308"];
19430 [label="RegisterDeclaredSpecialType(result) 798309"];
19431 [label="param RegisterDeclaredSpecialType(NamedTypeSymbol corType) 798310"];
19432 [label="param RegisterDeclaredSpecialType(this) 798311"];
19433 [label="corType.SpecialType 798312"];
19434 [label="Debug.Assert(typeId != SpecialType.None); 798313"];
19435 [label="corType.ContainingAssembly 798314"];
19436 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 798315"];
19437 [label="this.ContainingSymbol 798316"];
19438 [label="get\n            {\n                return _container;\n            } 798317"];
19439 [label="return _container; 798318"];
19440 [label="var container = this.ContainingSymbol; 798319"];
19441 [label="return (object)container != null ? container.ContainingAssembly : null; 798320"];
19442 [label="return (object)container != null ? container.ContainingAssembly : null; 798321"];
19443 [label="(object)container != null 798322"];
19444 [label="container.ContainingAssembly 798323"];
19445 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 798324"];
19446 [label="ContainingPEModule 798325"];
19447 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798326"];
19448 [label="return ContainingPEModule.ContainingAssembly; 798327"];
19449 [label="ContainingPEModule.ContainingAssembly 798328"];
19450 [label="get\n            {\n                return _assemblySymbol;\n            } 798329"];
19451 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798330"];
19452 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 798331"];
19453 [label="corType.ContainingModule 798332"];
19454 [label="get\n            {\n                return ContainingPEModule;\n            } 798333"];
19455 [label="ContainingPEModule 798334"];
19456 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 798335"];
19457 [label="Symbol s = _container; 798336"];
19458 [label="s.Kind 798337"];
19459 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798338"];
19460 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 798339"];
19461 [label="((PENamespaceSymbol)s).ContainingPEModule 798340"];
19462 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798341"];
19463 [label="_containingNamespaceSymbol.ContainingPEModule 798342"];
19464 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 798343"];
19465 [label="return ContainingPEModule; 798344"];
19466 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798345"];
19467 [label="corType.ContainingModule.Ordinal 798346"];
19468 [label="get\n            {\n                return _ordinal;\n            } 798347"];
19469 [label="return _ordinal; 798348"];
19470 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 798349"];
19471 [label="this.CorLibrary 798350"];
19472 [label="get\n            {\n                return _corLibrary;\n            } 798351"];
19473 [label="return _corLibrary; 798352"];
19474 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798353"];
19475 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 798354"];
19476 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 798355"];
19477 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 798356"];
19478 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 798357"];
19479 [label="Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType)); 798358"];
19480 [label="Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType)); 798359"];
19481 [label="RegisterDeclaredSpecialType(result); 798360"];
19482 [label="return _lazySpecialTypes[(int)type]; 798361"];
19483 [label="result.SpecialType 798362"];
19484 [label="get\n            {\n                return _corTypeId;\n            } 798363"];
19485 [label="Debug.Assert(result.SpecialType == specialType); 798364"];
19486 [label="return result; 798365"];
19487 [label="varX.Type 798366"];
19488 [label="=> TypeWithAnnotations.Type 798367"];
19489 [label="TypeWithAnnotations 798368"];
19490 [label="get\n            {\n                return GetFieldType(ConsList<FieldSymbol>.Empty);\n            } 798369"];
19491 [label="return GetFieldType(ConsList<FieldSymbol>.Empty); 798370"];
19492 [label="GetFieldType(ConsList<FieldSymbol>.Empty) 798371"];
19493 [label="param GetFieldType(ConsList<FieldSymbol> fieldsBeingBound) 798372"];
19494 [label="param GetFieldType(this) 798373"];
19495 [label="Debug.Assert(fieldsBeingBound != null); 798374"];
19496 [label="Debug.Assert(fieldsBeingBound != null); 798375"];
19497 [label="if (_lazyType != null)\n            {\n                return _lazyType.Value;\n            } 798376"];
19498 [label="if (_lazyType != null)\n            {\n                return _lazyType.Value;\n            } 798377"];
19499 [label="VariableDeclaratorNode 798378"];
19500 [label="get\n            {\n                return (VariableDeclaratorSyntax)this.SyntaxNode;\n            } 798379"];
19501 [label="this.SyntaxNode 798380"];
19502 [label="get\n            {\n                return (CSharpSyntaxNode)_syntaxReference.GetSyntax();\n            } 798381"];
19503 [label="return (CSharpSyntaxNode)_syntaxReference.GetSyntax(); 798382"];
19504 [label="_syntaxReference.GetSyntax() 798383"];
19505 [label="param GetSyntax(CancellationToken cancellationToken) 798384"];
19506 [label="param GetSyntax(this) 798385"];
19507 [label="return (CSharpSyntaxNode)_syntaxReference.GetSyntax(); 798386"];
19508 [label="return (VariableDeclaratorSyntax)this.SyntaxNode; 798387"];
19509 [label="var declarator = VariableDeclaratorNode; 798388"];
19510 [label="var fieldSyntax = GetFieldDeclaration(declarator); 798389"];
19511 [label="GetFieldDeclaration(declarator) 798390"];
19512 [label="param GetFieldDeclaration(CSharpSyntaxNode declarator) 798391"];
19513 [label="declarator.Parent 798392"];
19514 [label="get\n            {\n                return (CSharpSyntaxNode?)base.Parent;\n            } 798393"];
19515 [label="return (BaseFieldDeclarationSyntax)declarator.Parent.Parent; 798394"];
19516 [label="declarator.Parent.Parent 798395"];
19517 [label="get\n            {\n                return (CSharpSyntaxNode?)base.Parent;\n            } 798396"];
19518 [label="var typeSyntax = fieldSyntax.Declaration.Type; 798397"];
19519 [label="this.DeclaringCompilation 798398"];
19520 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 798399"];
19521 [label="this.Kind 798400"];
19522 [label="get\n            {\n                return SymbolKind.Field;\n            } 798401"];
19523 [label="return SymbolKind.Field; 798402"];
19524 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 798403"];
19525 [label="this.ContainingModule 798404"];
19526 [label="this.ContainingSymbol 798405"];
19527 [label="get\n            {\n                return containingType;\n            } 798406"];
19528 [label="return containingType; 798407"];
19529 [label="return (object)container != null ? container.ContainingModule : null; 798408"];
19530 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 798409"];
19531 [label="var compilation = this.DeclaringCompilation; 798410"];
19532 [label="var diagnostics = DiagnosticBag.GetInstance(); 798411"];
19533 [label="TypeWithAnnotations type; 798412"];
19534 [label="type 798413"];
19535 [label="DiagnosticBag diagnosticsForFirstDeclarator = DiagnosticBag.GetInstance(); 798414"];
19536 [label="this.AssociatedSymbol 798415"];
19537 [label="get\n            {\n                return null;\n            } 798416"];
19538 [label="return null; 798417"];
19539 [label="Symbol associatedPropertyOrEvent = this.AssociatedSymbol; 798418"];
19540 [label="if ((object)associatedPropertyOrEvent != null && associatedPropertyOrEvent.Kind == SymbolKind.Event)\n            {\n                EventSymbol @event = (EventSymbol)associatedPropertyOrEvent;\n                if (@event.IsWindowsRuntimeEvent)\n                {\n                    NamedTypeSymbol tokenTableType = this.DeclaringCompilation.GetWellKnownType(WellKnownType.System_Runtime_InteropServices_WindowsRuntime_EventRegistrationTokenTable_T);\n                    Binder.ReportUseSiteDiagnostics(tokenTableType, diagnosticsForFirstDeclarator, this.ErrorLocation);\n\n                    // CONSIDER: Do we want to guard against the possibility that someone has created their own EventRegistrationTokenTable<T>\n                    // type that has additional generic constraints?\n                    type = TypeWithAnnotations.Create(tokenTableType.Construct(ImmutableArray.Create(@event.TypeWithAnnotations)));\n                }\n                else\n                {\n                    type = @event.TypeWithAnnotations;\n                }\n            }\n            else\n            {\n                var binderFactory = compilation.GetBinderFactory(SyntaxTree);\n                var binder = binderFactory.GetBinder(typeSyntax);\n\n                binder = binder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this);\n                if (!ContainingType.IsScriptClass)\n                {\n                    type = binder.BindType(typeSyntax, diagnosticsForFirstDeclarator);\n                }\n                else\n                {\n                    bool isVar;\n                    type = binder.BindTypeOrVarKeyword(typeSyntax, diagnostics, out isVar);\n\n                    Debug.Assert(type.HasType || isVar);\n\n                    if (isVar)\n                    {\n                        if (this.IsConst)\n                        {\n                            diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_ImplicitlyTypedVariableCannotBeConst, typeSyntax.Location);\n                        }\n\n                        if (fieldsBeingBound.ContainsReference(this))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_RecursivelyTypedVariable, this.ErrorLocation, this);\n                            type = default;\n                        }\n                        else if (fieldSyntax.Declaration.Variables.Count > 1)\n                        {\n                            diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_ImplicitlyTypedVariableMultipleDeclarator, typeSyntax.Location);\n                        }\n                        else if (this.IsConst && this.ContainingType.IsScriptClass)\n                        {\n                            // For const var in script, we won't try to bind the initializer (case below), as it can lead to an unbound recursion\n                            type = default;\n                        }\n                        else\n                        {\n                            fieldsBeingBound = new ConsList<FieldSymbol>(this, fieldsBeingBound);\n\n                            var initializerBinder = new ImplicitlyTypedFieldBinder(binder, fieldsBeingBound);\n                            var initializerOpt = initializerBinder.BindInferredVariableInitializer(diagnostics, RefKind.None, (EqualsValueClauseSyntax)declarator.Initializer, declarator);\n\n                            if (initializerOpt != null)\n                            {\n                                if ((object)initializerOpt.Type != null && !initializerOpt.Type.IsErrorType())\n                                {\n                                    type = TypeWithAnnotations.Create(initializerOpt.Type);\n                                }\n\n                                _lazyFieldTypeInferred = 1;\n                            }\n                        }\n\n                        if (!type.HasType)\n                        {\n                            type = TypeWithAnnotations.Create(binder.CreateErrorType('var'));\n                        }\n                    }\n                }\n\n                if (IsFixedSizeBuffer)\n                {\n                    type = TypeWithAnnotations.Create(new PointerTypeSymbol(type));\n\n                    if (ContainingType.TypeKind != TypeKind.Struct)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_FixedNotInStruct, ErrorLocation);\n                    }\n\n                    var elementType = ((PointerTypeSymbol)type.Type).PointedAtType;\n                    int elementSize = elementType.FixedBufferElementSizeInBytes();\n                    if (elementSize == 0)\n                    {\n                        var loc = typeSyntax.Location;\n                        diagnostics.Add(ErrorCode.ERR_IllegalFixedType, loc);\n                    }\n\n                    if (!binder.InUnsafeRegion)\n                    {\n                        diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_UnsafeNeeded, declarator.Location);\n                    }\n                }\n            } 798419"];
19541 [label="if ((object)associatedPropertyOrEvent != null && associatedPropertyOrEvent.Kind == SymbolKind.Event)\n            {\n                EventSymbol @event = (EventSymbol)associatedPropertyOrEvent;\n                if (@event.IsWindowsRuntimeEvent)\n                {\n                    NamedTypeSymbol tokenTableType = this.DeclaringCompilation.GetWellKnownType(WellKnownType.System_Runtime_InteropServices_WindowsRuntime_EventRegistrationTokenTable_T);\n                    Binder.ReportUseSiteDiagnostics(tokenTableType, diagnosticsForFirstDeclarator, this.ErrorLocation);\n\n                    // CONSIDER: Do we want to guard against the possibility that someone has created their own EventRegistrationTokenTable<T>\n                    // type that has additional generic constraints?\n                    type = TypeWithAnnotations.Create(tokenTableType.Construct(ImmutableArray.Create(@event.TypeWithAnnotations)));\n                }\n                else\n                {\n                    type = @event.TypeWithAnnotations;\n                }\n            }\n            else\n            {\n                var binderFactory = compilation.GetBinderFactory(SyntaxTree);\n                var binder = binderFactory.GetBinder(typeSyntax);\n\n                binder = binder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this);\n                if (!ContainingType.IsScriptClass)\n                {\n                    type = binder.BindType(typeSyntax, diagnosticsForFirstDeclarator);\n                }\n                else\n                {\n                    bool isVar;\n                    type = binder.BindTypeOrVarKeyword(typeSyntax, diagnostics, out isVar);\n\n                    Debug.Assert(type.HasType || isVar);\n\n                    if (isVar)\n                    {\n                        if (this.IsConst)\n                        {\n                            diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_ImplicitlyTypedVariableCannotBeConst, typeSyntax.Location);\n                        }\n\n                        if (fieldsBeingBound.ContainsReference(this))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_RecursivelyTypedVariable, this.ErrorLocation, this);\n                            type = default;\n                        }\n                        else if (fieldSyntax.Declaration.Variables.Count > 1)\n                        {\n                            diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_ImplicitlyTypedVariableMultipleDeclarator, typeSyntax.Location);\n                        }\n                        else if (this.IsConst && this.ContainingType.IsScriptClass)\n                        {\n                            // For const var in script, we won't try to bind the initializer (case below), as it can lead to an unbound recursion\n                            type = default;\n                        }\n                        else\n                        {\n                            fieldsBeingBound = new ConsList<FieldSymbol>(this, fieldsBeingBound);\n\n                            var initializerBinder = new ImplicitlyTypedFieldBinder(binder, fieldsBeingBound);\n                            var initializerOpt = initializerBinder.BindInferredVariableInitializer(diagnostics, RefKind.None, (EqualsValueClauseSyntax)declarator.Initializer, declarator);\n\n                            if (initializerOpt != null)\n                            {\n                                if ((object)initializerOpt.Type != null && !initializerOpt.Type.IsErrorType())\n                                {\n                                    type = TypeWithAnnotations.Create(initializerOpt.Type);\n                                }\n\n                                _lazyFieldTypeInferred = 1;\n                            }\n                        }\n\n                        if (!type.HasType)\n                        {\n                            type = TypeWithAnnotations.Create(binder.CreateErrorType('var'));\n                        }\n                    }\n                }\n\n                if (IsFixedSizeBuffer)\n                {\n                    type = TypeWithAnnotations.Create(new PointerTypeSymbol(type));\n\n                    if (ContainingType.TypeKind != TypeKind.Struct)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_FixedNotInStruct, ErrorLocation);\n                    }\n\n                    var elementType = ((PointerTypeSymbol)type.Type).PointedAtType;\n                    int elementSize = elementType.FixedBufferElementSizeInBytes();\n                    if (elementSize == 0)\n                    {\n                        var loc = typeSyntax.Location;\n                        diagnostics.Add(ErrorCode.ERR_IllegalFixedType, loc);\n                    }\n\n                    if (!binder.InUnsafeRegion)\n                    {\n                        diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_UnsafeNeeded, declarator.Location);\n                    }\n                }\n            } 798420"];
19542 [label="SyntaxTree 798421"];
19543 [label="get\n            {\n                return _syntaxReference.SyntaxTree;\n            } 798422"];
19544 [label="_syntaxReference.SyntaxTree 798423"];
19545 [label="get\n            {\n                return _node.SyntaxTree;\n            } 798424"];
19546 [label="_node.SyntaxTree 798425"];
19547 [label="this.SyntaxTree 798426"];
19548 [label="Debug.Assert(result != null); 798427"];
19549 [label="Debug.Assert(result != null); 798428"];
19550 [label="return _syntaxReference.SyntaxTree; 798429"];
19551 [label="var binderFactory = compilation.GetBinderFactory(SyntaxTree); 798430"];
19552 [label="var binderFactory = compilation.GetBinderFactory(SyntaxTree); 798431"];
19553 [label="compilation.GetBinderFactory(SyntaxTree) 798432"];
19554 [label="param GetBinderFactory(SyntaxTree syntaxTree) 798433"];
19555 [label="param GetBinderFactory(bool ignoreAccessibility = false) 798434"];
19556 [label="param GetBinderFactory(this) 798435"];
19557 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 798436"];
19558 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 798437"];
19559 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 798438"];
19560 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 798439"];
19561 [label="param GetBinderFactory(bool ignoreAccessibility) 798440"];
19562 [label="ignoreAccessibility 798441"];
19563 [label="_binderFactories 798442"];
19564 [label="GetSyntaxTreeOrdinal(syntaxTree) 798443"];
19565 [label="this.ContainsSyntaxTree(tree) 798444"];
19566 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 798445"];
19567 [label="_syntaxAndDeclarations.GetLazyState() 798446"];
19568 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 798447"];
19569 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 798448"];
19570 [label="_syntaxAndDeclarations.GetLazyState() 798449"];
19571 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 798450"];
19572 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 798451"];
19573 [label="BinderFactory? previousFactory; 798452"];
19574 [label="var previousWeakReference = binderFactories[treeNum]; 798453"];
19575 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 798454"];
19576 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 798455"];
19577 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 798456"];
19578 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 798457"];
19579 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 798458"];
19580 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 798459"];
19581 [label="param AddNewFactory(bool ignoreAccessibility) 798460"];
19582 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 798461"];
19583 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 798462"];
19584 [label="new BinderFactory(this, syntaxTree, ignoreAccessibility) 798463"];
19585 [label="param BinderFactory(bool ignoreAccessibility) 798464"];
19586 [label="param BinderFactory(this) 798465"];
19587 [label="_binderCache 798466"];
19588 [label="_compilation 798467"];
19589 [label="_syntaxTree 798468"];
19590 [label="_buckStopsHereBinder 798469"];
19591 [label="_ignoreAccessibility 798470"];
19592 [label="_binderFactoryVisitorPool 798471"];
19593 [label="_ignoreAccessibility 798472"];
19594 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 798473"];
19595 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 798474"];
19596 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 798475"];
19597 [label="_binderCache 798476"];
19598 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 798477"];
19599 [label="new BuckStopsHereBinder(compilation) 798478"];
19600 [label="param BuckStopsHereBinder(this) 798479"];
19601 [label="param BuckStopsHereBinder(this) 798480"];
19602 [label="param Binder(this) 798481"];
19603 [label="internal CSharpCompilation Compilation { get; } 798482"];
19604 [label="Flags 798483"];
19605 [label="protected internal Binder? Next { get; } 798484"];
19606 [label="_lazyConversions 798485"];
19607 [label="_lazyOverloadResolution 798486"];
19608 [label="RoslynDebug.Assert(compilation != null); 798487"];
19609 [label="RoslynDebug.Assert(compilation != null); 798488"];
19610 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 798489"];
19611 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 798490"];
19612 [label="compilation.Options 798491"];
19613 [label="_buckStopsHereBinder 798492"];
19614 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 798493"];
19615 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 798494"];
19616 [label="BinderFactory? previousFactory; 798495"];
19617 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 798496"];
19618 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 798497"];
19619 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 798498"];
19620 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 798499"];
19621 [label="var binder = binderFactory.GetBinder(typeSyntax); 798500"];
19622 [label="var binder = binderFactory.GetBinder(typeSyntax); 798501"];
19623 [label="binderFactory.GetBinder(typeSyntax) 798502"];
19624 [label="param GetBinder(SyntaxNode node) 798503"];
19625 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 798504"];
19626 [label="param GetBinder(Symbol memberOpt = null) 798505"];
19627 [label="param GetBinder(this) 798506"];
19628 [label="int position = node.SpanStart; 798507"];
19629 [label="node.SpanStart 798508"];
19630 [label="this.GetLeadingTrivia() 798509"];
19631 [label="return leading != null ? leading.FullWidth : 0; 798510"];
19632 [label="InScript 798511"];
19633 [label="_syntaxTree.Options 798512"];
19634 [label="this.Options 798513"];
19635 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 798514"];
19636 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 798515"];
19637 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 798516"];
19638 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 798517"];
19639 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 798518"];
19640 [label="param GetBinder(Symbol memberOpt = null) 798519"];
19641 [label="Debug.Assert(node != null); 798520"];
19642 [label="Debug.Assert(node != null); 798521"];
19643 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 798522"];
19644 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 798523"];
19645 [label="param BinderFactoryVisitor(this) 798524"];
19646 [label="param CSharpSyntaxVisitor(this) 798525"];
19647 [label="_factory 798526"];
19648 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 798527"];
19649 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 798528"];
19650 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 798529"];
19651 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 798530"];
19652 [label="param Initialize(Symbol memberOpt) 798531"];
19653 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 798532"];
19654 [label="memberDeclarationOpt == null 798533"];
19655 [label="param ==(Symbol left) 798534"];
19656 [label="param ==(Symbol right) 798535"];
19657 [label="if (right is null)\n            {\n                return left is null;\n            } 798536"];
19658 [label="return left is null; 798537"];
19659 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 798538"];
19660 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 798539"];
19661 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 798540"];
19662 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 798541"];
19663 [label="visitor.Visit(node) 798542"];
19664 [label="VisitCore(node) 798543"];
19665 [label="return ((CSharpSyntaxNode)node).Accept(this); 798544"];
19666 [label="param DefaultVisit(SyntaxNode parent) 798545"];
19667 [label="param DefaultVisit(this) 798546"];
19668 [label="return VisitCore(parent.Parent); 798547"];
19669 [label="VisitCore(parent.Parent) 798548"];
19670 [label="param VisitCore(SyntaxNode node) 798549"];
19671 [label="param VisitCore(this) 798550"];
19672 [label="return ((CSharpSyntaxNode)node).Accept(this); 798551"];
19673 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 798552"];
19674 [label="param VisitFieldDeclaration(this) 798553"];
19675 [label="parent.Parent 798554"];
19676 [label="get\n            {\n                return (CSharpSyntaxNode?)base.Parent;\n            } 798555"];
19677 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 798556"];
19678 [label="VisitCore(parent.Parent) 798557"];
19679 [label="param VisitCore(SyntaxNode node) 798558"];
19680 [label="param VisitCore(this) 798559"];
19681 [label="return ((CSharpSyntaxNode)node).Accept(this); 798560"];
19682 [label="VisitTypeDeclarationCore(node) 798561"];
19683 [label="LookupPosition.IsInTypeDeclaration(_position, parent) 798562"];
19684 [label="param IsInTypeDeclaration(int position) 798563"];
19685 [label="Debug.Assert(typeDecl != null); 798564"];
19686 [label="Debug.Assert(typeDecl != null); 798565"];
19687 [label="typeDecl.CloseBraceToken 798566"];
19688 [label="=> true 798567"];
19689 [label="true 798568"];
19690 [label="return IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken); 798569"];
19691 [label="IsBeforeToken(position, typeDecl, typeDecl.CloseBraceToken) 798570"];
19692 [label="param IsBeforeToken(int position) 798571"];
19693 [label="IsBeforeToken(position, firstExcluded) 798572"];
19694 [label="firstExcluded.Kind() 798573"];
19695 [label="IsCSharpKind(rawKind) 798574"];
19696 [label="const int FirstVisualBasicKind = (int)SyntaxKind.List + 1; 798575"];
19697 [label="const int FirstCSharpKind = (int)SyntaxKind.TildeToken; 798576"];
19698 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 798577"];
19699 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 798578"];
19700 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 798579"];
19701 [label="firstExcluded.SpanStart 798580"];
19702 [label="this.GetLeadingTrivia() 798581"];
19703 [label="return leading != null ? leading.FullWidth : 0; 798582"];
19704 [label="node.SpanStart 798583"];
19705 [label="this.GetLeadingTrivia() 798584"];
19706 [label="return leading != null ? leading.FullWidth : 0; 798585"];
19707 [label="NodeUsage extraInfo = NodeUsage.Normal; 798586"];
19708 [label="parent.OpenBraceToken 798587"];
19709 [label="=> true 798588"];
19710 [label="true 798589"];
19711 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 798590"];
19712 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 798591"];
19713 [label="parent.CloseBraceToken 798592"];
19714 [label="=> true 798593"];
19715 [label="true 798594"];
19716 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 798595"];
19717 [label="parent.OpenBraceToken 798596"];
19718 [label="=> true 798597"];
19719 [label="true 798598"];
19720 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 798599"];
19721 [label="parent.CloseBraceToken 798600"];
19722 [label="=> true 798601"];
19723 [label="true 798602"];
19724 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 798603"];
19725 [label="LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) 798604"];
19726 [label="firstIncluded.SpanStart 798605"];
19727 [label="this.GetLeadingTrivia() 798606"];
19728 [label="return leading != null ? leading.FullWidth : 0; 798607"];
19729 [label="IsBeforeToken(position, firstExcluded) 798608"];
19730 [label="firstExcluded.Kind() 798609"];
19731 [label="IsCSharpKind(rawKind) 798610"];
19732 [label="const int FirstVisualBasicKind = (int)SyntaxKind.List + 1; 798611"];
19733 [label="const int FirstCSharpKind = (int)SyntaxKind.TildeToken; 798612"];
19734 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 798613"];
19735 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 798614"];
19736 [label="return unchecked((uint)(rawKind - FirstVisualBasicKind)) > (FirstCSharpKind - 1 - FirstVisualBasicKind); 798615"];
19737 [label="firstExcluded.SpanStart 798616"];
19738 [label="this.GetLeadingTrivia() 798617"];
19739 [label="return leading != null ? leading.FullWidth : 0; 798618"];
19740 [label="VisitTypeDeclarationCore(parent, extraInfo) 798619"];
19741 [label="CreateBinderCacheKey(parent, extraInfo) 798620"];
19742 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 798621"];
19743 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 798622"];
19744 [label="return new BinderCacheKey(node, usage); 798623"];
19745 [label="new BinderCacheKey(node, usage) 798624"];
19746 [label="param BinderCacheKey(this) 798625"];
19747 [label="var key = CreateBinderCacheKey(parent, extraInfo); 798626"];
19748 [label="Binder resultBinder; 798627"];
19749 [label="binderCache 798628"];
19750 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 798629"];
19751 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 798630"];
19752 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 798631"];
19753 [label="param IsInNamespaceDeclaration(int position) 798632"];
19754 [label="Debug.Assert(namespaceDecl != null); 798633"];
19755 [label="=> true 798634"];
19756 [label="param GetLeadingTrivia(this) 798635"];
19757 [label="param GetLeadingTrivia(this) 798636"];
19758 [label="param GetTrailingTrivia(this) 798637"];
19759 [label="SyntaxToken token; 798638"];
19760 [label="token 798639"];
19761 [label="=> true 798640"];
19762 [label="var node = token.Parent; 798641"];
19763 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 798642"];
19764 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 798643"];
19765 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 798644"];
19766 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798645"];
19767 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798646"];
19768 [label="node.IsKind(SyntaxKind.UsingDirective) 798647"];
19769 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 798648"];
19770 [label="param IsKind(SyntaxKind kind) 798649"];
19771 [label="return node?.RawKind == (int)kind; 798650"];
19772 [label="node = node.Parent; 798651"];
19773 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798652"];
19774 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798653"];
19775 [label="node.IsKind(SyntaxKind.UsingDirective) 798654"];
19776 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 798655"];
19777 [label="param IsKind(SyntaxKind kind) 798656"];
19778 [label="return node?.RawKind == (int)kind; 798657"];
19779 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 798658"];
19780 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 798659"];
19781 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 798660"];
19782 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 798661"];
19783 [label="Binder outer; 798662"];
19784 [label="parent.Parent 798663"];
19785 [label="var container = parent.Parent; 798664"];
19786 [label="Debug.Assert(node != null); 798665"];
19787 [label="Debug.Assert(node != null); 798666"];
19788 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 798667"];
19789 [label="param CSharpSyntaxVisitor(this) 798668"];
19790 [label="_factory 798669"];
19791 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 798670"];
19792 [label="memberDeclarationOpt == null 798671"];
19793 [label="param ==(Symbol left) 798672"];
19794 [label="param ==(Symbol right) 798673"];
19795 [label="if (right is null)\n            {\n                return left is null;\n            } 798674"];
19796 [label="return left is null; 798675"];
19797 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 798676"];
19798 [label="param GetTrailingTrivia(this) 798677"];
19799 [label="SyntaxToken token; 798678"];
19800 [label="token 798679"];
19801 [label="=> true 798680"];
19802 [label="var node = token.Parent; 798681"];
19803 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 798682"];
19804 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 798683"];
19805 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 798684"];
19806 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798685"];
19807 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798686"];
19808 [label="node.IsKind(SyntaxKind.UsingDirective) 798687"];
19809 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 798688"];
19810 [label="param IsKind(SyntaxKind kind) 798689"];
19811 [label="return node?.RawKind == (int)kind; 798690"];
19812 [label="node = node.Parent; 798691"];
19813 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798692"];
19814 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 798693"];
19815 [label="node.IsKind(SyntaxKind.UsingDirective) 798694"];
19816 [label="param IsKind([NotNullWhen(true)] this SyntaxNode? node) 798695"];
19817 [label="param IsKind(SyntaxKind kind) 798696"];
19818 [label="return node?.RawKind == (int)kind; 798697"];
19819 [label="param GetRoot(CancellationToken cancellationToken) 798698"];
19820 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 798699"];
19821 [label="RoslynDebug.Assert(next != null); 798700"];
19822 [label="_container 798701"];
19823 [label="Debug.Assert((object)container != null); 798702"];
19824 [label="Debug.Assert(declarationSyntax != null); 798703"];
19825 [label="param GetSimpleProgramEntryPoint(CompilationUnitSyntax compilationUnit) 798704"];
19826 [label="param GetSimpleProgramEntryPoint(bool fallbackToMainEntryPoint) 798705"];
19827 [label="GetBoundReferenceManager(); 798706"];
19828 [label="if (type is null)\n            {\n                return null;\n            } 798707"];
19829 [label="return null; 798708"];
19830 [label="param MakeNamespaceBinder(this) 798709"];
19831 [label="QualifiedNameSyntax dotted; 798710"];
19832 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 798711"];
19833 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 798712"];
19834 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 798713"];
19835 [label="NamespaceOrTypeSymbol container; 798714"];
19836 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798715"];
19837 [label="if ((object)ns == null) return outer; 798716"];
19838 [label="if ((object)ns == null) return outer; 798717"];
19839 [label="_container 798718"];
19840 [label="Debug.Assert((object)container != null); 798719"];
19841 [label="Debug.Assert((object)container != null); 798720"];
19842 [label="Debug.Assert(declarationSyntax != null); 798721"];
19843 [label="Debug.Assert(declarationSyntax != null); 798722"];
19844 [label="Debug.Assert(result != null); 798723"];
19845 [label="Debug.Assert((object)container != null || imports != null); 798724"];
19846 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 798725"];
19847 [label="=> true 798726"];
19848 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 798727"];
19849 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 798728"];
19850 [label="param WithUnsafeRegionIfNecessary(this) 798729"];
19851 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 798730"];
19852 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 798731"];
19853 [label="param Includes(BinderFlags other) 798732"];
19854 [label="modifiers.Any(SyntaxKind.UnsafeKeyword) 798733"];
19855 [label="param Any(SyntaxKind kind) 798734"];
19856 [label="return list.IndexOf(kind) >= 0; 798735"];
19857 [label="list.IndexOf(kind) 798736"];
19858 [label="param IndexOf(SyntaxKind kind) 798737"];
19859 [label="return list.IndexOf((int)kind); 798738"];
19860 [label="return list.IndexOf(kind) >= 0; 798739"];
19861 [label="binder = binder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this); 798740"];
19862 [label="binder = binder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this); 798741"];
19863 [label="binder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this) 798742"];
19864 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 798743"];
19865 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 798744"];
19866 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 798745"];
19867 [label="Debug.Assert((object)containing != null); 798746"];
19868 [label="Debug.Assert((object)containing != null); 798747"];
19869 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 798748"];
19870 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 798749"];
19871 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 798750"];
19872 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 798751"];
19873 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 798752"];
19874 [label="param BinderWithContainingMemberOrLambda(Binder next) 798753"];
19875 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 798754"];
19876 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 798755"];
19877 [label="param BinderWithContainingMemberOrLambda(this) 798756"];
19878 [label="next 798757"];
19879 [label="flags 798758"];
19880 [label="param BinderWithContainingMemberOrLambda(this) 798759"];
19881 [label="param Binder(Binder next) 798760"];
19882 [label="param Binder(BinderFlags flags) 798761"];
19883 [label="param Binder(this) 798762"];
19884 [label="internal CSharpCompilation Compilation { get; } 798763"];
19885 [label="Flags 798764"];
19886 [label="protected internal Binder? Next { get; } 798765"];
19887 [label="_lazyConversions 798766"];
19888 [label="_lazyOverloadResolution 798767"];
19889 [label="RoslynDebug.Assert(next != null); 798768"];
19890 [label="RoslynDebug.Assert(next != null); 798769"];
19891 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 798770"];
19892 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 798771"];
19893 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 798772"];
19894 [label="param Includes(this BinderFlags self) 798773"];
19895 [label="param Includes(BinderFlags other) 798774"];
19896 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 798775"];
19897 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 798776"];
19898 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 798777"];
19899 [label="param Includes(this BinderFlags self) 798778"];
19900 [label="param Includes(BinderFlags other) 798779"];
19901 [label="Next 798780"];
19902 [label="this.Flags 798781"];
19903 [label="this.Compilation 798782"];
19904 [label="_containingMemberOrLambda 798783"];
19905 [label="Debug.Assert(containingMemberOrLambda != null); 798784"];
19906 [label="containingMemberOrLambda != null 798785"];
19907 [label="param !=(Symbol left) 798786"];
19908 [label="param !=(Symbol right) 798787"];
19909 [label="if (right is null)\n            {\n                return left is object;\n            } 798788"];
19910 [label="return left is object; 798789"];
19911 [label="Debug.Assert(containingMemberOrLambda != null); 798790"];
19912 [label="_containingMemberOrLambda 798791"];
19913 [label="binder = binder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this); 798792"];
19914 [label="ContainingType 798793"];
19915 [label="get\n            {\n                return this.containingType;\n            } 798794"];
19916 [label="return this.containingType; 798795"];
19917 [label="if (!ContainingType.IsScriptClass)\n                {\n                    type = binder.BindType(typeSyntax, diagnosticsForFirstDeclarator);\n                }\n                else\n                {\n                    bool isVar;\n                    type = binder.BindTypeOrVarKeyword(typeSyntax, diagnostics, out isVar);\n\n                    Debug.Assert(type.HasType || isVar);\n\n                    if (isVar)\n                    {\n                        if (this.IsConst)\n                        {\n                            diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_ImplicitlyTypedVariableCannotBeConst, typeSyntax.Location);\n                        }\n\n                        if (fieldsBeingBound.ContainsReference(this))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_RecursivelyTypedVariable, this.ErrorLocation, this);\n                            type = default;\n                        }\n                        else if (fieldSyntax.Declaration.Variables.Count > 1)\n                        {\n                            diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_ImplicitlyTypedVariableMultipleDeclarator, typeSyntax.Location);\n                        }\n                        else if (this.IsConst && this.ContainingType.IsScriptClass)\n                        {\n                            // For const var in script, we won't try to bind the initializer (case below), as it can lead to an unbound recursion\n                            type = default;\n                        }\n                        else\n                        {\n                            fieldsBeingBound = new ConsList<FieldSymbol>(this, fieldsBeingBound);\n\n                            var initializerBinder = new ImplicitlyTypedFieldBinder(binder, fieldsBeingBound);\n                            var initializerOpt = initializerBinder.BindInferredVariableInitializer(diagnostics, RefKind.None, (EqualsValueClauseSyntax)declarator.Initializer, declarator);\n\n                            if (initializerOpt != null)\n                            {\n                                if ((object)initializerOpt.Type != null && !initializerOpt.Type.IsErrorType())\n                                {\n                                    type = TypeWithAnnotations.Create(initializerOpt.Type);\n                                }\n\n                                _lazyFieldTypeInferred = 1;\n                            }\n                        }\n\n                        if (!type.HasType)\n                        {\n                            type = TypeWithAnnotations.Create(binder.CreateErrorType('var'));\n                        }\n                    }\n                } 798796"];
19918 [label="ContainingType.IsScriptClass 798797"];
19919 [label="get\n            {\n                var kind = this.declaration.Declarations[0].Kind;\n                return kind == DeclarationKind.Script || kind == DeclarationKind.Submission;\n            } 798798"];
19920 [label="this.declaration.Declarations 798799"];
19921 [label="var kind = this.declaration.Declarations[0].Kind; 798800"];
19922 [label="this.declaration.Declarations[0].Kind 798801"];
19923 [label="get\n            {\n                return _kind;\n            } 798802"];
19924 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 798803"];
19925 [label="type = binder.BindType(typeSyntax, diagnosticsForFirstDeclarator); 798804"];
19926 [label="type = binder.BindType(typeSyntax, diagnosticsForFirstDeclarator); 798805"];
19927 [label="type = binder.BindType(typeSyntax, diagnosticsForFirstDeclarator); 798806"];
19928 [label="binder.BindType(typeSyntax, diagnosticsForFirstDeclarator) 798807"];
19929 [label="param BindType(ExpressionSyntax syntax) 798808"];
19930 [label="param BindType(DiagnosticBag diagnostics) 798809"];
19931 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 798810"];
19932 [label="param BindType(bool suppressUseSiteDiagnostics = false) 798811"];
19933 [label="param BindType(this) 798812"];
19934 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 798813"];
19935 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 798814"];
19936 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 798815"];
19937 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 798816"];
19938 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 798817"];
19939 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 798818"];
19940 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 798819"];
19941 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 798820"];
19942 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 798821"];
19943 [label="param BindTypeOrAlias(this) 798822"];
19944 [label="Debug.Assert(diagnostics != null); 798823"];
19945 [label="Debug.Assert(diagnostics != null); 798824"];
19946 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798825"];
19947 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798826"];
19948 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798827"];
19949 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798828"];
19950 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798829"];
19951 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798830"];
19952 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 798831"];
19953 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 798832"];
19954 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 798833"];
19955 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 798834"];
19956 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 798835"];
19957 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 798836"];
19958 [label="syntax.Kind() 798837"];
19959 [label="param Kind(this) 798838"];
19960 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 798839"];
19961 [label="return bindNullable(syntax, diagnostics, basesBeingResolved); 798840"];
19962 [label="return bindNullable(syntax, diagnostics, basesBeingResolved); 798841"];
19963 [label="return bindNullable(syntax, diagnostics, basesBeingResolved); 798842"];
19964 [label="bindNullable(syntax, diagnostics, basesBeingResolved) 798843"];
19965 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindNullable(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList<TypeSymbol> basesBeingResolved)\n            {\n                var nullableSyntax = (NullableTypeSyntax)syntax;\n                TypeSyntax typeArgumentSyntax = nullableSyntax.ElementType;\n                TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved);\n                TypeWithAnnotations constructedType = typeArgument.SetIsAnnotated(Compilation);\n\n                reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument);\n\n                if (!ShouldCheckConstraints)\n                {\n                    diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation());\n                }\n                else if (constructedType.IsNullableType())\n                {\n                    ReportUseSiteDiagnostics(constructedType.Type.OriginalDefinition, diagnostics, syntax);\n                    var type = (NamedTypeSymbol)constructedType.Type;\n                    var location = syntax.Location;\n                    type.CheckConstraints(new ConstraintsHelper.CheckConstraintsArgs(this.Compilation, this.Conversions, includeNullability: true, location, diagnostics));\n                }\n                else if (GetNullableUnconstrainedTypeParameterDiagnosticIfNecessary(Compilation.LanguageVersion, constructedType) is { } diagnosticInfo)\n                {\n                    diagnostics.Add(diagnosticInfo, syntax.Location);\n                }\n\n                return constructedType;\n            } 798844"];
19966 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindNullable(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList<TypeSymbol> basesBeingResolved)\n            {\n                var nullableSyntax = (NullableTypeSyntax)syntax;\n                TypeSyntax typeArgumentSyntax = nullableSyntax.ElementType;\n                TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved);\n                TypeWithAnnotations constructedType = typeArgument.SetIsAnnotated(Compilation);\n\n                reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument);\n\n                if (!ShouldCheckConstraints)\n                {\n                    diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation());\n                }\n                else if (constructedType.IsNullableType())\n                {\n                    ReportUseSiteDiagnostics(constructedType.Type.OriginalDefinition, diagnostics, syntax);\n                    var type = (NamedTypeSymbol)constructedType.Type;\n                    var location = syntax.Location;\n                    type.CheckConstraints(new ConstraintsHelper.CheckConstraintsArgs(this.Compilation, this.Conversions, includeNullability: true, location, diagnostics));\n                }\n                else if (GetNullableUnconstrainedTypeParameterDiagnosticIfNecessary(Compilation.LanguageVersion, constructedType) is { } diagnosticInfo)\n                {\n                    diagnostics.Add(diagnosticInfo, syntax.Location);\n                }\n\n                return constructedType;\n            } 798845"];
19967 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindNullable(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList<TypeSymbol> basesBeingResolved)\n            {\n                var nullableSyntax = (NullableTypeSyntax)syntax;\n                TypeSyntax typeArgumentSyntax = nullableSyntax.ElementType;\n                TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved);\n                TypeWithAnnotations constructedType = typeArgument.SetIsAnnotated(Compilation);\n\n                reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument);\n\n                if (!ShouldCheckConstraints)\n                {\n                    diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation());\n                }\n                else if (constructedType.IsNullableType())\n                {\n                    ReportUseSiteDiagnostics(constructedType.Type.OriginalDefinition, diagnostics, syntax);\n                    var type = (NamedTypeSymbol)constructedType.Type;\n                    var location = syntax.Location;\n                    type.CheckConstraints(new ConstraintsHelper.CheckConstraintsArgs(this.Compilation, this.Conversions, includeNullability: true, location, diagnostics));\n                }\n                else if (GetNullableUnconstrainedTypeParameterDiagnosticIfNecessary(Compilation.LanguageVersion, constructedType) is { } diagnosticInfo)\n                {\n                    diagnostics.Add(diagnosticInfo, syntax.Location);\n                }\n\n                return constructedType;\n            } 798846"];
19968 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindNullable(ExpressionSyntax syntax, DiagnosticBag diagnostics, ConsList<TypeSymbol> basesBeingResolved)\n            {\n                var nullableSyntax = (NullableTypeSyntax)syntax;\n                TypeSyntax typeArgumentSyntax = nullableSyntax.ElementType;\n                TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved);\n                TypeWithAnnotations constructedType = typeArgument.SetIsAnnotated(Compilation);\n\n                reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument);\n\n                if (!ShouldCheckConstraints)\n                {\n                    diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation());\n                }\n                else if (constructedType.IsNullableType())\n                {\n                    ReportUseSiteDiagnostics(constructedType.Type.OriginalDefinition, diagnostics, syntax);\n                    var type = (NamedTypeSymbol)constructedType.Type;\n                    var location = syntax.Location;\n                    type.CheckConstraints(new ConstraintsHelper.CheckConstraintsArgs(this.Compilation, this.Conversions, includeNullability: true, location, diagnostics));\n                }\n                else if (GetNullableUnconstrainedTypeParameterDiagnosticIfNecessary(Compilation.LanguageVersion, constructedType) is { } diagnosticInfo)\n                {\n                    diagnostics.Add(diagnosticInfo, syntax.Location);\n                }\n\n                return constructedType;\n            } 798847"];
19969 [label="var nullableSyntax = (NullableTypeSyntax)syntax; 798848"];
19970 [label="TypeSyntax typeArgumentSyntax = nullableSyntax.ElementType; 798849"];
19971 [label="TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved); 798850"];
19972 [label="TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved); 798851"];
19973 [label="TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved); 798852"];
19974 [label="TypeWithAnnotations typeArgument = BindType(typeArgumentSyntax, diagnostics, basesBeingResolved); 798853"];
19975 [label="BindType(typeArgumentSyntax, diagnostics, basesBeingResolved) 798854"];
19976 [label="param BindType(ExpressionSyntax syntax) 798855"];
19977 [label="param BindType(DiagnosticBag diagnostics) 798856"];
19978 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 798857"];
19979 [label="param BindType(bool suppressUseSiteDiagnostics = false) 798858"];
19980 [label="param BindType(this) 798859"];
19981 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 798860"];
19982 [label="Debug.Assert(diagnostics != null); 798861"];
19983 [label="Debug.Assert(diagnostics != null); 798862"];
19984 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 798863"];
19985 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 798864"];
19986 [label="return bindPredefined(syntax, diagnostics); 798865"];
19987 [label="return bindPredefined(syntax, diagnostics); 798866"];
19988 [label="bindPredefined(syntax, diagnostics) 798867"];
19989 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 798868"];
19990 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 798869"];
19991 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 798870"];
19992 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 798871"];
19993 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 798872"];
19994 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 798873"];
19995 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 798874"];
19996 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 798875"];
19997 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 798876"];
19998 [label="param BindPredefinedTypeSymbol(this) 798877"];
19999 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 798878"];
20000 [label="node.Keyword 798879"];
20001 [label="=> true 798880"];
20002 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 798881"];
20003 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 798882"];
20004 [label="param Kind(this SyntaxToken token) 798883"];
20005 [label="param GetSpecialType(this SyntaxKind kind) 798884"];
20006 [label="switch (kind)\n            {\n                case SyntaxKind.VoidKeyword:\n                    return SpecialType.System_Void;\n                case SyntaxKind.BoolKeyword:\n                    return SpecialType.System_Boolean;\n                case SyntaxKind.ByteKeyword:\n                    return SpecialType.System_Byte;\n                case SyntaxKind.SByteKeyword:\n                    return SpecialType.System_SByte;\n                case SyntaxKind.ShortKeyword:\n                    return SpecialType.System_Int16;\n                case SyntaxKind.UShortKeyword:\n                    return SpecialType.System_UInt16;\n                case SyntaxKind.IntKeyword:\n                    return SpecialType.System_Int32;\n                case SyntaxKind.UIntKeyword:\n                    return SpecialType.System_UInt32;\n                case SyntaxKind.LongKeyword:\n                    return SpecialType.System_Int64;\n                case SyntaxKind.ULongKeyword:\n                    return SpecialType.System_UInt64;\n                case SyntaxKind.DoubleKeyword:\n                    return SpecialType.System_Double;\n                case SyntaxKind.FloatKeyword:\n                    return SpecialType.System_Single;\n                case SyntaxKind.DecimalKeyword:\n                    return SpecialType.System_Decimal;\n                case SyntaxKind.StringKeyword:\n                    return SpecialType.System_String;\n                case SyntaxKind.CharKeyword:\n                    return SpecialType.System_Char;\n                case SyntaxKind.ObjectKeyword:\n                    return SpecialType.System_Object;\n                default:\n                    // Note that 'dynamic' is a contextual keyword, so it should never show up here.\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 798885"];
20007 [label="return SpecialType.System_Int32; 798886"];
20008 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 798887"];
20009 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 798888"];
20010 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 798889"];
20011 [label="param GetSpecialType(SpecialType typeId) 798890"];
20012 [label="param GetSpecialType(DiagnosticBag diagnostics) 798891"];
20013 [label="param GetSpecialType(SyntaxNode node) 798892"];
20014 [label="param GetSpecialType(this) 798893"];
20015 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 798894"];
20016 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 798895"];
20017 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 798896"];
20018 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 798897"];
20019 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 798898"];
20020 [label="param GetSpecialType(CSharpCompilation compilation) 798899"];
20021 [label="param GetSpecialType(SpecialType typeId) 798900"];
20022 [label="param GetSpecialType(SyntaxNode node) 798901"];
20023 [label="param GetSpecialType(DiagnosticBag diagnostics) 798902"];
20024 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 798903"];
20025 [label="compilation.GetSpecialType(typeId) 798904"];
20026 [label="param GetSpecialType(SpecialType specialType) 798905"];
20027 [label="param GetSpecialType(this) 798906"];
20028 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 798907"];
20029 [label="NamedTypeSymbol result; 798908"];
20030 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 798909"];
20031 [label="GetBoundReferenceManager(); 798910"];
20032 [label="this.Modules 798911"];
20033 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 798912"];
20034 [label="module.GetReferencedAssemblies() 798913"];
20035 [label="param GetReferencedAssemblies(this) 798914"];
20036 [label="AssertReferencesInitialized() 798915"];
20037 [label="param AssertReferencesInitialized(this) 798916"];
20038 [label="Debug.Assert(_moduleReferences != null); 798917"];
20039 [label="Debug.Assert(_moduleReferences != null); 798918"];
20040 [label="AssertReferencesInitialized(); 798919"];
20041 [label="return _moduleReferences.Identities; 798920"];
20042 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 798921"];
20043 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 798922"];
20044 [label="return _lazySpecialTypes[(int)type]; 798923"];
20045 [label="result.SpecialType 798924"];
20046 [label="get\n            {\n                return _corTypeId;\n            } 798925"];
20047 [label="Debug.Assert(result.SpecialType == specialType); 798926"];
20048 [label="return result; 798927"];
20049 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 798928"];
20050 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 798929"];
20051 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 798930"];
20052 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 798931"];
20053 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 798932"];
20054 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 798933"];
20055 [label="param ReportUseSiteDiagnostics(Symbol symbol) 798934"];
20056 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 798935"];
20057 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 798936"];
20058 [label="symbol.GetUseSiteDiagnostic() 798937"];
20059 [label="param GetUseSiteDiagnostic(this) 798938"];
20060 [label="if (ReferenceEquals(_lazyUseSiteDiagnostic, CSDiagnosticInfo.EmptyErrorInfo))\n            {\n                _lazyUseSiteDiagnostic = GetUseSiteDiagnosticImpl();\n            } 798939"];
20061 [label="if (ReferenceEquals(_lazyUseSiteDiagnostic, CSDiagnosticInfo.EmptyErrorInfo))\n            {\n                _lazyUseSiteDiagnostic = GetUseSiteDiagnosticImpl();\n            } 798940"];
20062 [label="GetUseSiteDiagnosticImpl() 798941"];
20063 [label="param GetUseSiteDiagnosticImpl(this) 798942"];
20064 [label="DiagnosticInfo diagnostic = null; 798943"];
20065 [label="if (!MergeUseSiteDiagnostics(ref diagnostic, CalculateUseSiteDiagnostic()))\n            {\n                // Check if this type is marked by RequiredAttribute attribute.\n                // If so mark the type as bad, because it relies upon semantics that are not understood by the C# compiler.\n                if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                }\n            } 798944"];
20066 [label="CalculateUseSiteDiagnostic() 798945"];
20067 [label="param CalculateUseSiteDiagnostic(this) 798946"];
20068 [label="DiagnosticInfo result = null; 798947"];
20069 [label="if (MergeUseSiteDiagnostics(ref result, DeriveUseSiteDiagnosticFromBase()))\n            {\n                return result;\n            } 798948"];
20070 [label="DeriveUseSiteDiagnosticFromBase() 798949"];
20071 [label="param DeriveUseSiteDiagnosticFromBase(this) 798950"];
20072 [label="this.BaseTypeNoUseSiteDiagnostics 798951"];
20073 [label="get\n            {\n                if (ReferenceEquals(_lazyBaseType, ErrorTypeSymbol.UnknownResultType))\n                {\n                    Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType);\n                }\n\n                return _lazyBaseType;\n            } 798952"];
20074 [label="if (ReferenceEquals(_lazyBaseType, ErrorTypeSymbol.UnknownResultType))\n                {\n                    Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType);\n                } 798953"];
20075 [label="if (ReferenceEquals(_lazyBaseType, ErrorTypeSymbol.UnknownResultType))\n                {\n                    Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType);\n                } 798954"];
20076 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 798955"];
20077 [label="MakeAcyclicBaseType() 798956"];
20078 [label="param MakeAcyclicBaseType(this) 798957"];
20079 [label="NamedTypeSymbol declaredBase = GetDeclaredBaseType(null); 798958"];
20080 [label="GetDeclaredBaseType(null) 798959"];
20081 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 798960"];
20082 [label="param GetDeclaredBaseType(this) 798961"];
20083 [label="return GetDeclaredBaseType(skipTransformsIfNecessary: false); 798962"];
20084 [label="GetDeclaredBaseType(skipTransformsIfNecessary: false) 798963"];
20085 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 798964"];
20086 [label="param GetDeclaredBaseType(this) 798965"];
20087 [label="if (ReferenceEquals(_lazyDeclaredBaseType, ErrorTypeSymbol.UnknownResultType))\n            {\n                var baseType = MakeDeclaredBaseType();\n                if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                }\n\n                Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType);\n            } 798966"];
20088 [label="if (ReferenceEquals(_lazyDeclaredBaseType, ErrorTypeSymbol.UnknownResultType))\n            {\n                var baseType = MakeDeclaredBaseType();\n                if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                }\n\n                Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType);\n            } 798967"];
20089 [label="MakeDeclaredBaseType() 798968"];
20090 [label="param MakeDeclaredBaseType(this) 798969"];
20091 [label="if (!_flags.IsInterface())\n            {\n                try\n                {\n                    var moduleSymbol = ContainingPEModule;\n                    EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle);\n                    if (!token.IsNil)\n                    {\n                        return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token);\n                    }\n                }\n                catch (BadImageFormatException mrEx)\n                {\n                    return new UnsupportedMetadataTypeSymbol(mrEx);\n                }\n            } 798970"];
20092 [label="ContainingPEModule 798971"];
20093 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 798972"];
20094 [label="Symbol s = _container; 798973"];
20095 [label="s.Kind 798974"];
20096 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 798975"];
20097 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 798976"];
20098 [label="((PENamespaceSymbol)s).ContainingPEModule 798977"];
20099 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 798978"];
20100 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 798979"];
20101 [label="var moduleSymbol = ContainingPEModule; 798980"];
20102 [label="moduleSymbol.Module 798981"];
20103 [label="get\n            {\n                return _module;\n            } 798982"];
20104 [label="EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle); 798983"];
20105 [label="EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle); 798984"];
20106 [label="if (!token.IsNil)\n                    {\n                        return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token);\n                    } 798985"];
20107 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 798986"];
20108 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 798987"];
20109 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 798988"];
20110 [label="new MetadataDecoder(moduleSymbol, this) 798989"];
20111 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 798990"];
20112 [label="param MetadataDecoder(PENamedTypeSymbol context) 798991"];
20113 [label="param MetadataDecoder(this) 798992"];
20114 [label="moduleSymbol 798993"];
20115 [label="context 798994"];
20116 [label="null 798995"];
20117 [label="param MetadataDecoder(this) 798996"];
20118 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 798997"];
20119 [label="param MetadataDecoder(PENamedTypeSymbol typeContextOpt) 798998"];
20120 [label="param MetadataDecoder(PEMethodSymbol methodContextOpt) 798999"];
20121 [label="param MetadataDecoder(this) 799000"];
20122 [label="moduleSymbol.Module 799001"];
20123 [label="get\n            {\n                return _module;\n            } 799002"];
20124 [label="moduleSymbol.ContainingAssembly 799003"];
20125 [label="get\n            {\n                return _assemblySymbol;\n            } 799004"];
20126 [label="(moduleSymbol.ContainingAssembly is PEAssemblySymbol) 799005"];
20127 [label="moduleSymbol.ContainingAssembly 799006"];
20128 [label="moduleSymbol.ContainingAssembly.Identity 799007"];
20129 [label="get\n            {\n                return _assembly.Identity;\n            } 799008"];
20130 [label="return _assembly.Identity; 799009"];
20131 [label="new SymbolFactory() 799010"];
20132 [label="param SymbolFactory(this) 799011"];
20133 [label="Instance = new SymbolFactory() 799012"];
20134 [label="SymbolFactory.Instance 799013"];
20135 [label="moduleSymbol 799014"];
20136 [label="param MetadataDecoder(this) 799015"];
20137 [label="param MetadataDecoder(this) 799016"];
20138 [label="_typeContextOpt 799017"];
20139 [label="_methodContextOpt 799018"];
20140 [label="Debug.Assert((object)moduleSymbol != null); 799019"];
20141 [label="Debug.Assert((object)moduleSymbol != null); 799020"];
20142 [label="_typeContextOpt 799021"];
20143 [label="_methodContextOpt 799022"];
20144 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 799023"];
20145 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 799024"];
20146 [label="param GetTypeHandleToTypeMap(this) 799025"];
20147 [label="return moduleSymbol.TypeHandleToTypeMap; 799026"];
20148 [label="var baseType = MakeDeclaredBaseType(); 799027"];
20149 [label="if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                } 799028"];
20150 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 799029"];
20151 [label="ContainingPEModule 799030"];
20152 [label="s.Kind 799031"];
20153 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799032"];
20154 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799033"];
20155 [label="var moduleSymbol = ContainingPEModule; 799034"];
20156 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 799035"];
20157 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 799036"];
20158 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 799037"];
20159 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 799038"];
20160 [label="DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol) 799039"];
20161 [label="param TransformType(TypeSymbol metadataType) 799040"];
20162 [label="param TransformType(int targetSymbolCustomModifierCount) 799041"];
20163 [label="param TransformType(EntityHandle targetSymbolToken) 799042"];
20164 [label="param TransformType(PEModuleSymbol containingModule) 799043"];
20165 [label="param TransformType(RefKind targetSymbolRefKind = RefKind.None) 799044"];
20166 [label="Debug.Assert((object)metadataType != null); 799045"];
20167 [label="Debug.Assert((object)metadataType != null); 799046"];
20168 [label="ImmutableArray<bool> dynamicTransformFlags; 799047"];
20169 [label="dynamicTransformFlags 799048"];
20170 [label="containingModule.Module 799049"];
20171 [label="get\n            {\n                return _module;\n            } 799050"];
20172 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 799051"];
20173 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 799052"];
20174 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 799053"];
20175 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 799054"];
20176 [label="return metadataType; 799055"];
20177 [label="decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol); 799056"];
20178 [label="decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol); 799057"];
20179 [label="decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol); 799058"];
20180 [label="NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol) 799059"];
20181 [label="param TransformType(TypeSymbol type) 799060"];
20182 [label="param TransformType(EntityHandle handle) 799061"];
20183 [label="param TransformType(PEModuleSymbol containingModule) 799062"];
20184 [label="containingModule.Module 799063"];
20185 [label="get\n            {\n                return _module;\n            } 799064"];
20186 [label="return _module; 799065"];
20187 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 799066"];
20188 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 799067"];
20189 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 799068"];
20190 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 799069"];
20191 [label="containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) 799070"];
20192 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 799071"];
20193 [label="decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol); 799072"];
20194 [label="decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol); 799073"];
20195 [label="decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol); 799074"];
20196 [label="TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol) 799075"];
20197 [label="param DecodeTupleTypesIfApplicable(TypeSymbol metadataType) 799076"];
20198 [label="param DecodeTupleTypesIfApplicable(EntityHandle targetHandle) 799077"];
20199 [label="param DecodeTupleTypesIfApplicable(PEModuleSymbol containingModule) 799078"];
20200 [label="ImmutableArray<string?> elementNames; 799079"];
20201 [label="elementNames 799080"];
20202 [label="containingModule\n                .Module 799081"];
20203 [label="get\n            {\n                return _module;\n            } 799082"];
20204 [label="return _module; 799083"];
20205 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 799084"];
20206 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 799085"];
20207 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 799086"];
20208 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 799087"];
20209 [label="if (hasTupleElementNamesAttribute && elementNames.IsDefaultOrEmpty)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 799088"];
20210 [label="return DecodeTupleTypesInternal(metadataType, elementNames, hasTupleElementNamesAttribute); 799089"];
20211 [label="return DecodeTupleTypesInternal(metadataType, elementNames, hasTupleElementNamesAttribute); 799090"];
20212 [label="DecodeTupleTypesInternal(metadataType, elementNames, hasTupleElementNamesAttribute) 799091"];
20213 [label="param DecodeTupleTypesInternal(TypeSymbol metadataType) 799092"];
20214 [label="param DecodeTupleTypesInternal(ImmutableArray<string?> elementNames) 799093"];
20215 [label="param DecodeTupleTypesInternal(bool hasTupleElementNamesAttribute) 799094"];
20216 [label="RoslynDebug.AssertNotNull(metadataType); 799095"];
20217 [label="RoslynDebug.AssertNotNull(metadataType); 799096"];
20218 [label="var decoder = new TupleTypeDecoder(elementNames); 799097"];
20219 [label="var decoder = new TupleTypeDecoder(elementNames); 799098"];
20220 [label="new TupleTypeDecoder(elementNames) 799099"];
20221 [label="param TupleTypeDecoder(ImmutableArray<string?> elementNames) 799100"];
20222 [label="param TupleTypeDecoder(this) 799101"];
20223 [label="_elementNames 799102"];
20224 [label="elementNames.IsDefault 799103"];
20225 [label="_namesIndex = elementNames.IsDefault ? 0 : elementNames.Length; 799104"];
20226 [label="_namesIndex 799105"];
20227 [label="_decodingFailed = false; 799106"];
20228 [label="_decodingFailed 799107"];
20229 [label="_foundUsableErrorType = false; 799108"];
20230 [label="_foundUsableErrorType 799109"];
20231 [label="var decoded = decoder.DecodeType(metadataType); 799110"];
20232 [label="decoder.DecodeType(metadataType) 799111"];
20233 [label="param DecodeType(TypeSymbol type) 799112"];
20234 [label="param DecodeType(this) 799113"];
20235 [label="type.Kind 799114"];
20236 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 799115"];
20237 [label="switch (type.Kind)\n            {\n                case SymbolKind.ErrorType:\n                    _foundUsableErrorType = true;\n                    return type;\n\n                case SymbolKind.DynamicType:\n                case SymbolKind.TypeParameter:\n                    return type;\n\n                case SymbolKind.FunctionPointerType:\n                    return DecodeFunctionPointerType((FunctionPointerTypeSymbol)type);\n\n                case SymbolKind.PointerType:\n                    return DecodePointerType((PointerTypeSymbol)type);\n\n                case SymbolKind.NamedType:\n                    // We may have a tuple type from a substituted type symbol,\n                    // but it will be missing names from metadata, so we'll\n                    // need to re-create the type.\n                    //\n                    // Consider the declaration\n                    //\n                    //      class C : BaseType<(int x, int y)>\n                    //\n                    // The process for decoding tuples in C looks at the BaseType, calls\n                    // DecodeOrThrow, then passes the decoded type to the TupleTypeDecoder.\n                    // However, DecodeOrThrow uses the AbstractTypeMap to construct a\n                    // SubstitutedTypeSymbol, which eagerly converts tuple-compatible\n                    // types to TupleTypeSymbols. Thus, by the time we get to the Decoder\n                    // all metadata instances of System.ValueTuple will have been\n                    //  replaced with TupleTypeSymbols without names.\n                    // \n                    // Rather than fixing up after-the-fact it's possible that we could\n                    // flow up a SubstituteWith/Without tuple unification to the top level\n                    // of the type map and change DecodeOrThrow to call into the substitution\n                    // without unification instead.\n                    return DecodeNamedType((NamedTypeSymbol)type);\n\n                case SymbolKind.ArrayType:\n                    return DecodeArrayType((ArrayTypeSymbol)type);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 799116"];
20238 [label="return DecodeNamedType((NamedTypeSymbol)type); 799117"];
20239 [label="DecodeNamedType((NamedTypeSymbol)type) 799118"];
20240 [label="param DecodeNamedType(NamedTypeSymbol type) 799119"];
20241 [label="param DecodeNamedType(this) 799120"];
20242 [label="type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 799121"];
20243 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 799122"];
20244 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 799123"];
20245 [label="var typeArgs = type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 799124"];
20246 [label="var decodedArgs = DecodeTypeArguments(typeArgs); 799125"];
20247 [label="DecodeTypeArguments(typeArgs) 799126"];
20248 [label="param DecodeTypeArguments(ImmutableArray<TypeWithAnnotations> typeArgs) 799127"];
20249 [label="param DecodeTypeArguments(this) 799128"];
20250 [label="if (typeArgs.IsEmpty)\n            {\n                return typeArgs;\n            } 799129"];
20251 [label="return typeArgs; 799130"];
20252 [label="NamedTypeSymbol decodedType = type; 799131"];
20253 [label="type.ContainingType 799132"];
20254 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 799133"];
20255 [label="return _container as NamedTypeSymbol; 799134"];
20256 [label="NamedTypeSymbol containingType = type.ContainingType; 799135"];
20257 [label="NamedTypeSymbol? decodedContainingType; 799136"];
20258 [label="if (containingType is object && containingType.IsGenericType)\n            {\n                decodedContainingType = DecodeNamedType(containingType);\n                Debug.Assert(decodedContainingType.IsGenericType);\n            }\n            else\n            {\n                decodedContainingType = containingType;\n            } 799137"];
20259 [label="decodedContainingType = containingType; 799138"];
20260 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 799139"];
20261 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 799140"];
20262 [label="var typeArgsChanged = typeArgs != decodedArgs; 799141"];
20263 [label="if (typeArgsChanged || containerChanged)\n            {\n                if (containerChanged)\n                {\n                    decodedType = decodedType.OriginalDefinition.AsMember(decodedContainingType);\n                    // If the type is nested, e.g. Outer<T>.Inner<V>, then Inner is definitely\n                    // not a tuple, since we know all tuple-compatible types (System.ValueTuple)\n                    // are not nested types. Thus, it is safe to return without checking if\n                    // Inner is a tuple.\n                    return decodedType.ConstructIfGeneric(decodedArgs);\n                }\n\n                decodedType = type.ConstructedFrom.Construct(decodedArgs, unbound: false);\n            } 799142"];
20264 [label="decodedType.IsTupleType 799143"];
20265 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 799144"];
20266 [label="_ 799145"];
20267 [label="tupleCardinality: out _ 799146"];
20268 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 799147"];
20269 [label="param IsTupleTypeOfCardinality(this) 799148"];
20270 [label="IsUnboundGenericType 799149"];
20271 [label="get\n            {\n                return false;\n            } 799150"];
20272 [label="return false; 799151"];
20273 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799152"];
20274 [label="ContainingSymbol 799153"];
20275 [label="get\n            {\n                return _container;\n            } 799154"];
20276 [label="return _container; 799155"];
20277 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799156"];
20278 [label=".Kind 799157"];
20279 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799158"];
20280 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799159"];
20281 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799160"];
20282 [label="ContainingNamespace 799161"];
20283 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 799162"];
20284 [label="get\n            {\n                return _container;\n            } 799163"];
20285 [label="return _container; 799164"];
20286 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799165"];
20287 [label="ContainingNamespace.ContainingNamespace 799166"];
20288 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 799167"];
20289 [label=".IsGlobalNamespace 799168"];
20290 [label="get\n            {\n                return true;\n            } 799169"];
20291 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799170"];
20292 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799171"];
20293 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799172"];
20294 [label="Name 799173"];
20295 [label="get\n            {\n                return _name;\n            } 799174"];
20296 [label="return _name; 799175"];
20297 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799176"];
20298 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799177"];
20299 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799178"];
20300 [label="tupleCardinality = 0; 799179"];
20301 [label="if (decodedType.IsTupleType)\n            {\n                int tupleCardinality = decodedType.TupleElementTypesWithAnnotations.Length;\n                if (tupleCardinality > 0)\n                {\n                    var elementNames = EatElementNamesIfAvailable(tupleCardinality);\n\n                    Debug.Assert(elementNames.IsDefault || elementNames.Length == tupleCardinality);\n\n                    decodedType = NamedTypeSymbol.CreateTuple(decodedType, elementNames);\n                }\n            } 799180"];
20302 [label="return decodedType; 799181"];
20303 [label="if (!decoder._decodingFailed)\n            {\n                if (!hasTupleElementNamesAttribute || decoder._namesIndex == 0)\n                {\n                    return decoded;\n                }\n            } 799182"];
20304 [label="if (!hasTupleElementNamesAttribute || decoder._namesIndex == 0)\n                {\n                    return decoded;\n                } 799183"];
20305 [label="return decoded; 799184"];
20306 [label="typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces 799185"];
20307 [label="genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters 799186"];
20308 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 799187"];
20309 [label="miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 799188"];
20310 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 799189"];
20311 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 799190"];
20312 [label="DebuggerDisplayFormat = new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 799191"];
20313 [label="typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces 799192"];
20314 [label="genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters 799193"];
20315 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 799194"];
20316 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 799195"];
20317 [label="miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 799196"];
20318 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 799197"];
20319 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 799198"];
20320 [label="TestDisplayFormat = new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 799199"];
20321 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 799200"];
20322 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 799201"];
20323 [label="TypeWithAnnotations.Create(decodedType) 799202"];
20324 [label="param Create(TypeSymbol typeSymbol) 799203"];
20325 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 799204"];
20326 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 799205"];
20327 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 799206"];
20328 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 799207"];
20329 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 799208"];
20330 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 799209"];
20331 [label="typeSymbol.IsNullableType() 799210"];
20332 [label="param IsNullableType(this TypeSymbol type) 799211"];
20333 [label="type.OriginalDefinition 799212"];
20334 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 799213"];
20335 [label="OriginalTypeSymbolDefinition 799214"];
20336 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799215"];
20337 [label="this.OriginalDefinition 799216"];
20338 [label="get\n            {\n                return this;\n            } 799217"];
20339 [label="return this; 799218"];
20340 [label="return this.OriginalDefinition; 799219"];
20341 [label="return OriginalTypeSymbolDefinition; 799220"];
20342 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 799221"];
20343 [label="type.OriginalDefinition.SpecialType 799222"];
20344 [label="get\n            {\n                return _corTypeId;\n            } 799223"];
20345 [label="return _corTypeId; 799224"];
20346 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 799225"];
20347 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 799226"];
20348 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 799227"];
20349 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 799228"];
20350 [label="param CreateNonLazyType(TypeSymbol typeSymbol) 799229"];
20351 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 799230"];
20352 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 799231"];
20353 [label="customModifiers: ImmutableArray<CustomModifier>.Empty 799232"];
20354 [label="new NonLazyType(customModifiers: ImmutableArray<CustomModifier>.Empty) 799233"];
20355 [label="param NonLazyType(ImmutableArray<CustomModifier> customModifiers) 799234"];
20356 [label="param NonLazyType(this) 799235"];
20357 [label="param Extensions(this) 799236"];
20358 [label="Debug.Assert(!customModifiers.IsDefault); 799237"];
20359 [label="_customModifiers 799238"];
20360 [label="Default = new NonLazyType(customModifiers: ImmutableArray<CustomModifier>.Empty) 799239"];
20361 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 799240"];
20362 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 799241"];
20363 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 799242"];
20364 [label="Extensions.Create(customModifiers) 799243"];
20365 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 799244"];
20366 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 799245"];
20367 [label="return Default; 799246"];
20368 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 799247"];
20369 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 799248"];
20370 [label="param TypeWithAnnotations(TypeSymbol defaultType) 799249"];
20371 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 799250"];
20372 [label="param TypeWithAnnotations(Extensions extensions) 799251"];
20373 [label="param TypeWithAnnotations(this) 799252"];
20374 [label="var a1 = defaultType is null; 799253"];
20375 [label="!a1 799254"];
20376 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 799255"];
20377 [label="defaultType.IsNullableType() 799256"];
20378 [label="param IsNullableType(this TypeSymbol type) 799257"];
20379 [label="type.OriginalDefinition 799258"];
20380 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 799259"];
20381 [label="OriginalTypeSymbolDefinition 799260"];
20382 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799261"];
20383 [label="this.OriginalDefinition 799262"];
20384 [label="get\n            {\n                return this;\n            } 799263"];
20385 [label="return this; 799264"];
20386 [label="return this.OriginalDefinition; 799265"];
20387 [label="return OriginalTypeSymbolDefinition; 799266"];
20388 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 799267"];
20389 [label="type.OriginalDefinition.SpecialType 799268"];
20390 [label="get\n            {\n                return _corTypeId;\n            } 799269"];
20391 [label="return _corTypeId; 799270"];
20392 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 799271"];
20393 [label="Debug.Assert(a1 || a2 != true || a3); 799272"];
20394 [label="Debug.Assert(a1 || a2 != true || a3); 799273"];
20395 [label="Debug.Assert(extensions != null); 799274"];
20396 [label="Debug.Assert(extensions != null); 799275"];
20397 [label="DefaultType 799276"];
20398 [label="NullableAnnotation 799277"];
20399 [label="_extensions 799278"];
20400 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 799279"];
20401 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 799280"];
20402 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 799281"];
20403 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 799282"];
20404 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 799283"];
20405 [label="NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this) 799284"];
20406 [label="param TransformType(TypeWithAnnotations metadataType) 799285"];
20407 [label="param TransformType(EntityHandle targetSymbolToken) 799286"];
20408 [label="param TransformType(PEModuleSymbol containingModule) 799287"];
20409 [label="param TransformType(Symbol accessSymbol) 799288"];
20410 [label="param TransformType(Symbol nullableContext) 799289"];
20411 [label="metadataType.HasType 799290"];
20412 [label="=> !(DefaultType is null) 799291"];
20413 [label="DefaultType is null 799292"];
20414 [label="!(DefaultType is null) 799293"];
20415 [label="Debug.Assert(metadataType.HasType); 799294"];
20416 [label="accessSymbol.IsDefinition 799295"];
20417 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 799296"];
20418 [label="OriginalDefinition 799297"];
20419 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 799298"];
20420 [label="OriginalSymbolDefinition 799299"];
20421 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 799300"];
20422 [label="this.OriginalTypeSymbolDefinition 799301"];
20423 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799302"];
20424 [label="this.OriginalDefinition 799303"];
20425 [label="get\n            {\n                return this;\n            } 799304"];
20426 [label="return this; 799305"];
20427 [label="return this.OriginalDefinition; 799306"];
20428 [label="return this.OriginalTypeSymbolDefinition; 799307"];
20429 [label="return OriginalSymbolDefinition; 799308"];
20430 [label="return (object)this == (object)OriginalDefinition; 799309"];
20431 [label="Debug.Assert(accessSymbol.IsDefinition); 799310"];
20432 [label="accessSymbol.ContainingModule 799311"];
20433 [label="get\n            {\n                return ContainingPEModule;\n            } 799312"];
20434 [label="ContainingPEModule 799313"];
20435 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 799314"];
20436 [label="Symbol s = _container; 799315"];
20437 [label="s.Kind 799316"];
20438 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799317"];
20439 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799318"];
20440 [label="return ContainingPEModule; 799319"];
20441 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 799320"];
20442 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 799321"];
20443 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 799322"];
20444 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 799323"];
20445 [label="AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _) 799324"];
20446 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 799325"];
20447 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 799326"];
20448 [label="Debug.Assert(symbol is object); 799327"];
20449 [label="symbol.Kind 799328"];
20450 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 799329"];
20451 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 799330"];
20452 [label="isInternal = false; 799331"];
20453 [label="symbol.DeclaredAccessibility 799332"];
20454 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 799333"];
20455 [label="Accessibility access = Accessibility.Private; 799334"];
20456 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 799335"];
20457 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 799336"];
20458 [label="symbol.ContainingType 799337"];
20459 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 799338"];
20460 [label="return _container as NamedTypeSymbol; 799339"];
20461 [label="symbol = symbol.ContainingType; 799340"];
20462 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 799341"];
20463 [label="return true; 799342"];
20464 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 799343"];
20465 [label="byte defaultTransformFlag; 799344"];
20466 [label="ImmutableArray<byte> nullableTransformFlags; 799345"];
20467 [label="nullableTransformFlags 799346"];
20468 [label="containingModule.Module 799347"];
20469 [label="get\n            {\n                return _module;\n            } 799348"];
20470 [label="return _module; 799349"];
20471 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 799350"];
20472 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 799351"];
20473 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 799352"];
20474 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 799353"];
20475 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 799354"];
20476 [label="nullableContext.GetNullableContextValue() 799355"];
20477 [label="param GetNullableContextValue(this) 799356"];
20478 [label="byte? value; 799357"];
20479 [label="if (!_lazyNullableContextValue.TryGetByte(out value))\n            {\n                value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue();\n                _lazyNullableContextValue = value.ToNullableContextFlags();\n            } 799358"];
20480 [label="if (!_lazyNullableContextValue.TryGetByte(out value))\n            {\n                value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue();\n                _lazyNullableContextValue = value.ToNullableContextFlags();\n            } 799359"];
20481 [label="_lazyNullableContextValue.TryGetByte(out value) 799360"];
20482 [label="param TryGetByte(this NullableContextKind kind) 799361"];
20483 [label="param TryGetByte(out byte? value) 799362"];
20484 [label="switch (kind)\n            {\n                case NullableContextKind.Unknown:\n                    value = null;\n                    return false;\n                case NullableContextKind.None:\n                    value = null;\n                    return true;\n                case NullableContextKind.Oblivious:\n                    value = NullableAnnotationExtensions.ObliviousAttributeValue;\n                    return true;\n                case NullableContextKind.NotAnnotated:\n                    value = NullableAnnotationExtensions.NotAnnotatedAttributeValue;\n                    return true;\n                case NullableContextKind.Annotated:\n                    value = NullableAnnotationExtensions.AnnotatedAttributeValue;\n                    return true;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 799363"];
20485 [label="value = null; 799364"];
20486 [label="return false; 799365"];
20487 [label="ContainingPEModule 799366"];
20488 [label="s.Kind 799367"];
20489 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799368"];
20490 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799369"];
20491 [label="value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue(); 799370"];
20492 [label="ContainingPEModule.Module 799371"];
20493 [label="get\n            {\n                return _module;\n            } 799372"];
20494 [label="value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue(); 799373"];
20495 [label="value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue(); 799374"];
20496 [label="ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) 799375"];
20497 [label="_container.GetNullableContextValue() 799376"];
20498 [label="param GetNullableContextValue(this) 799377"];
20499 [label="GetLocalNullableContextValue() 799378"];
20500 [label="param GetLocalNullableContextValue(this) 799379"];
20501 [label="return null; 799380"];
20502 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 799381"];
20503 [label="ContainingSymbol 799382"];
20504 [label="get { return _containingNamespaceSymbol; } 799383"];
20505 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 799384"];
20506 [label=".GetNullableContextValue() 799385"];
20507 [label="param GetNullableContextValue(this) 799386"];
20508 [label="GetLocalNullableContextValue() 799387"];
20509 [label="param GetLocalNullableContextValue(this) 799388"];
20510 [label="return null; 799389"];
20511 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 799390"];
20512 [label="ContainingSymbol 799391"];
20513 [label="get\n            {\n                return _moduleSymbol;\n            } 799392"];
20514 [label="return _moduleSymbol; 799393"];
20515 [label="param GetLocalNullableContextValue(this) 799394"];
20516 [label="get\n            {\n                return _assemblySymbol;\n            } 799395"];
20517 [label="return _assemblySymbol; 799396"];
20518 [label="param GetLocalNullableContextValue(this) 799397"];
20519 [label="get\n            {\n                return null;\n            } 799398"];
20520 [label="return null; 799399"];
20521 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 799400"];
20522 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 799401"];
20523 [label="_lazyNullableContextValue = value.ToNullableContextFlags(); 799402"];
20524 [label="value.ToNullableContextFlags() 799403"];
20525 [label="param ToNullableContextFlags(this byte? value) 799404"];
20526 [label="switch (value)\n            {\n                case null:\n                    return NullableContextKind.None;\n                case NullableAnnotationExtensions.ObliviousAttributeValue:\n                    return NullableContextKind.Oblivious;\n                case NullableAnnotationExtensions.NotAnnotatedAttributeValue:\n                    return NullableContextKind.NotAnnotated;\n                case NullableAnnotationExtensions.AnnotatedAttributeValue:\n                    return NullableContextKind.Annotated;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(value);\n            } 799405"];
20527 [label="return NullableContextKind.None; 799406"];
20528 [label="_lazyNullableContextValue 799407"];
20529 [label="return value; 799408"];
20530 [label="byte? value = nullableContext.GetNullableContextValue(); 799409"];
20531 [label="if (value == null)\n                {\n                    return metadataType;\n                } 799410"];
20532 [label="if (value == null)\n                {\n                    return metadataType;\n                } 799411"];
20533 [label="return metadataType; 799412"];
20534 [label="NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type 799413"];
20535 [label="=> _extensions?.GetResolvedType(DefaultType) 799414"];
20536 [label="DefaultType 799415"];
20537 [label=".GetResolvedType(DefaultType) 799416"];
20538 [label="param GetResolvedType(TypeSymbol defaultType) 799417"];
20539 [label="=> defaultType 799418"];
20540 [label="defaultType 799419"];
20541 [label="_extensions?.GetResolvedType(DefaultType) 799420"];
20542 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 799421"];
20543 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 799422"];
20544 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 799423"];
20545 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 799424"];
20546 [label="return _lazyDeclaredBaseType; 799425"];
20547 [label="return GetDeclaredBaseType(skipTransformsIfNecessary: false); 799426"];
20548 [label="NamedTypeSymbol declaredBase = GetDeclaredBaseType(null); 799427"];
20549 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 799428"];
20550 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 799429"];
20551 [label="if (BaseTypeAnalysis.TypeDependsOn(declaredBase, this))\n            {\n                return CyclicInheritanceError(this, declaredBase);\n            } 799430"];
20552 [label="if (BaseTypeAnalysis.TypeDependsOn(declaredBase, this))\n            {\n                return CyclicInheritanceError(this, declaredBase);\n            } 799431"];
20553 [label="BaseTypeAnalysis.TypeDependsOn(declaredBase, this) 799432"];
20554 [label="param TypeDependsOn(NamedTypeSymbol depends) 799433"];
20555 [label="param TypeDependsOn(NamedTypeSymbol on) 799434"];
20556 [label="Debug.Assert((object)depends != null); 799435"];
20557 [label="Debug.Assert((object)depends != null); 799436"];
20558 [label="Debug.Assert((object)on != null); 799437"];
20559 [label="Debug.Assert((object)on != null); 799438"];
20560 [label="on.IsDefinition 799439"];
20561 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 799440"];
20562 [label="OriginalDefinition 799441"];
20563 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 799442"];
20564 [label="OriginalSymbolDefinition 799443"];
20565 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 799444"];
20566 [label="this.OriginalTypeSymbolDefinition 799445"];
20567 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799446"];
20568 [label="this.OriginalDefinition 799447"];
20569 [label="get\n            {\n                return this;\n            } 799448"];
20570 [label="return this; 799449"];
20571 [label="return this.OriginalDefinition; 799450"];
20572 [label="return this.OriginalTypeSymbolDefinition; 799451"];
20573 [label="return OriginalSymbolDefinition; 799452"];
20574 [label="return (object)this == (object)OriginalDefinition; 799453"];
20575 [label="Debug.Assert(on.IsDefinition); 799454"];
20576 [label="var hs = PooledHashSet<Symbol>.GetInstance(); 799455"];
20577 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 799456"];
20578 [label="depends.DeclaringCompilation 799457"];
20579 [label="get { return null; } 799458"];
20580 [label="return null; 799459"];
20581 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 799460"];
20582 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 799461"];
20583 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs) 799462"];
20584 [label="param TypeDependsClosure(NamedTypeSymbol type) 799463"];
20585 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 799464"];
20586 [label="param TypeDependsClosure(HashSet<Symbol> partialClosure) 799465"];
20587 [label="if ((object)type == null)\n            {\n                return;\n            } 799466"];
20588 [label="if ((object)type == null)\n            {\n                return;\n            } 799467"];
20589 [label="type.OriginalDefinition 799468"];
20590 [label="get\n            {\n                return this;\n            } 799469"];
20591 [label="return this; 799470"];
20592 [label="type = type.OriginalDefinition; 799471"];
20593 [label="if (partialClosure.Add(type))\n            {\n                if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                }\n\n                // containment is interesting only for the current compilation\n                if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                }\n            } 799472"];
20594 [label="if (partialClosure.Add(type))\n            {\n                if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                }\n\n                // containment is interesting only for the current compilation\n                if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                }\n            } 799473"];
20595 [label="if (partialClosure.Add(type))\n            {\n                if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                }\n\n                // containment is interesting only for the current compilation\n                if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                }\n            } 799474"];
20596 [label="param GetHashCode(this) 799475"];
20597 [label="this.SpecialType 799476"];
20598 [label="get\n            {\n                return _corTypeId;\n            } 799477"];
20599 [label="if (this.SpecialType == SpecialType.System_Object)\n            {\n                return (int)SpecialType.System_Object;\n            } 799478"];
20600 [label="OriginalDefinition 799479"];
20601 [label="get\n            {\n                return this;\n            } 799480"];
20602 [label="return RuntimeHelpers.GetHashCode(OriginalDefinition); 799481"];
20603 [label="type.IsInterface 799482"];
20604 [label="get\n            {\n                return _flags.IsInterface();\n            } 799483"];
20605 [label="return _flags.IsInterface(); 799484"];
20606 [label="if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                } 799485"];
20607 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 799486"];
20608 [label="type.GetDeclaredBaseType(null) 799487"];
20609 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 799488"];
20610 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 799489"];
20611 [label="s.Kind 799490"];
20612 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799491"];
20613 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799492"];
20614 [label="Debug.Assert((object)moduleSymbol != null); 799493"];
20615 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 799494"];
20616 [label="param TransformType(int targetSymbolCustomModifierCount) 799495"];
20617 [label="param TransformType(RefKind targetSymbolRefKind = RefKind.None) 799496"];
20618 [label="Debug.Assert((object)metadataType != null); 799497"];
20619 [label="if (hasTupleElementNamesAttribute && elementNames.IsDefaultOrEmpty)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 799498"];
20620 [label="param DecodeTupleTypesInternal(ImmutableArray<string?> elementNames) 799499"];
20621 [label="param TupleTypeDecoder(ImmutableArray<string?> elementNames) 799500"];
20622 [label="_elementNames 799501"];
20623 [label="elementNames.IsDefault 799502"];
20624 [label="_namesIndex = elementNames.IsDefault ? 0 : elementNames.Length; 799503"];
20625 [label="_namesIndex 799504"];
20626 [label="_foundUsableErrorType = false; 799505"];
20627 [label="_foundUsableErrorType 799506"];
20628 [label="param DecodeType(this) 799507"];
20629 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 799508"];
20630 [label="param DecodeNamedType(this) 799509"];
20631 [label="type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 799510"];
20632 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 799511"];
20633 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 799512"];
20634 [label="var typeArgs = type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 799513"];
20635 [label="var decodedArgs = DecodeTypeArguments(typeArgs); 799514"];
20636 [label="DecodeTypeArguments(typeArgs) 799515"];
20637 [label="param DecodeTypeArguments(ImmutableArray<TypeWithAnnotations> typeArgs) 799516"];
20638 [label="param DecodeTypeArguments(this) 799517"];
20639 [label="if (typeArgs.IsEmpty)\n            {\n                return typeArgs;\n            } 799518"];
20640 [label="return typeArgs; 799519"];
20641 [label="type.ContainingType 799520"];
20642 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 799521"];
20643 [label="return _container as NamedTypeSymbol; 799522"];
20644 [label="NamedTypeSymbol containingType = type.ContainingType; 799523"];
20645 [label="NamedTypeSymbol? decodedContainingType; 799524"];
20646 [label="if (containingType is object && containingType.IsGenericType)\n            {\n                decodedContainingType = DecodeNamedType(containingType);\n                Debug.Assert(decodedContainingType.IsGenericType);\n            }\n            else\n            {\n                decodedContainingType = containingType;\n            } 799525"];
20647 [label="decodedContainingType = containingType; 799526"];
20648 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 799527"];
20649 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 799528"];
20650 [label="var typeArgsChanged = typeArgs != decodedArgs; 799529"];
20651 [label="if (typeArgsChanged || containerChanged)\n            {\n                if (containerChanged)\n                {\n                    decodedType = decodedType.OriginalDefinition.AsMember(decodedContainingType);\n                    // If the type is nested, e.g. Outer<T>.Inner<V>, then Inner is definitely\n                    // not a tuple, since we know all tuple-compatible types (System.ValueTuple)\n                    // are not nested types. Thus, it is safe to return without checking if\n                    // Inner is a tuple.\n                    return decodedType.ConstructIfGeneric(decodedArgs);\n                }\n\n                decodedType = type.ConstructedFrom.Construct(decodedArgs, unbound: false);\n            } 799530"];
20652 [label="decodedType.IsTupleType 799531"];
20653 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 799532"];
20654 [label="_ 799533"];
20655 [label="tupleCardinality: out _ 799534"];
20656 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 799535"];
20657 [label="param IsTupleTypeOfCardinality(this) 799536"];
20658 [label="IsUnboundGenericType 799537"];
20659 [label="get\n            {\n                return false;\n            } 799538"];
20660 [label="return false; 799539"];
20661 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799540"];
20662 [label="ContainingSymbol 799541"];
20663 [label="get\n            {\n                return _container;\n            } 799542"];
20664 [label="return _container; 799543"];
20665 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799544"];
20666 [label=".Kind 799545"];
20667 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799546"];
20668 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799547"];
20669 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799548"];
20670 [label="ContainingNamespace 799549"];
20671 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 799550"];
20672 [label="get\n            {\n                return _container;\n            } 799551"];
20673 [label="return _container; 799552"];
20674 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799553"];
20675 [label="ContainingNamespace.ContainingNamespace 799554"];
20676 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 799555"];
20677 [label=".IsGlobalNamespace 799556"];
20678 [label="get\n            {\n                return true;\n            } 799557"];
20679 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799558"];
20680 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799559"];
20681 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799560"];
20682 [label="Name 799561"];
20683 [label="get\n            {\n                return _name;\n            } 799562"];
20684 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799563"];
20685 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799564"];
20686 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 799565"];
20687 [label="tupleCardinality = 0; 799566"];
20688 [label="if (decodedType.IsTupleType)\n            {\n                int tupleCardinality = decodedType.TupleElementTypesWithAnnotations.Length;\n                if (tupleCardinality > 0)\n                {\n                    var elementNames = EatElementNamesIfAvailable(tupleCardinality);\n\n                    Debug.Assert(elementNames.IsDefault || elementNames.Length == tupleCardinality);\n\n                    decodedType = NamedTypeSymbol.CreateTuple(decodedType, elementNames);\n                }\n            } 799567"];
20689 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 799568"];
20690 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 799569"];
20691 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 799570"];
20692 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 799571"];
20693 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 799572"];
20694 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 799573"];
20695 [label="typeSymbol.IsNullableType() 799574"];
20696 [label="param IsNullableType(this TypeSymbol type) 799575"];
20697 [label="type.OriginalDefinition 799576"];
20698 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 799577"];
20699 [label="OriginalTypeSymbolDefinition 799578"];
20700 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799579"];
20701 [label="this.OriginalDefinition 799580"];
20702 [label="get\n            {\n                return this;\n            } 799581"];
20703 [label="return this.OriginalDefinition; 799582"];
20704 [label="return OriginalTypeSymbolDefinition; 799583"];
20705 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 799584"];
20706 [label="type.OriginalDefinition.SpecialType 799585"];
20707 [label="get\n            {\n                return _corTypeId;\n            } 799586"];
20708 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 799587"];
20709 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 799588"];
20710 [label="Extensions.Create(customModifiers) 799589"];
20711 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 799590"];
20712 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 799591"];
20713 [label="return Default; 799592"];
20714 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 799593"];
20715 [label="param TypeWithAnnotations(Extensions extensions) 799594"];
20716 [label="var a1 = defaultType is null; 799595"];
20717 [label="!a1 799596"];
20718 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 799597"];
20719 [label="defaultType.IsNullableType() 799598"];
20720 [label="param IsNullableType(this TypeSymbol type) 799599"];
20721 [label="type.OriginalDefinition 799600"];
20722 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 799601"];
20723 [label="OriginalTypeSymbolDefinition 799602"];
20724 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799603"];
20725 [label="this.OriginalDefinition 799604"];
20726 [label="get\n            {\n                return this;\n            } 799605"];
20727 [label="return this.OriginalDefinition; 799606"];
20728 [label="return OriginalTypeSymbolDefinition; 799607"];
20729 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 799608"];
20730 [label="type.OriginalDefinition.SpecialType 799609"];
20731 [label="get\n            {\n                return _corTypeId;\n            } 799610"];
20732 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 799611"];
20733 [label="Debug.Assert(a1 || a2 != true || a3); 799612"];
20734 [label="Debug.Assert(a1 || a2 != true || a3); 799613"];
20735 [label="Debug.Assert(extensions != null); 799614"];
20736 [label="Debug.Assert(extensions != null); 799615"];
20737 [label="NullableAnnotation 799616"];
20738 [label="_extensions 799617"];
20739 [label="param TransformType(Symbol accessSymbol) 799618"];
20740 [label="metadataType.HasType 799619"];
20741 [label="=> !(DefaultType is null) 799620"];
20742 [label="DefaultType is null 799621"];
20743 [label="!(DefaultType is null) 799622"];
20744 [label="Debug.Assert(metadataType.HasType); 799623"];
20745 [label="accessSymbol.IsDefinition 799624"];
20746 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 799625"];
20747 [label="OriginalDefinition 799626"];
20748 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 799627"];
20749 [label="OriginalSymbolDefinition 799628"];
20750 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 799629"];
20751 [label="this.OriginalTypeSymbolDefinition 799630"];
20752 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799631"];
20753 [label="this.OriginalDefinition 799632"];
20754 [label="get\n            {\n                return this;\n            } 799633"];
20755 [label="return this.OriginalDefinition; 799634"];
20756 [label="return this.OriginalTypeSymbolDefinition; 799635"];
20757 [label="return OriginalSymbolDefinition; 799636"];
20758 [label="return (object)this == (object)OriginalDefinition; 799637"];
20759 [label="Debug.Assert(accessSymbol.IsDefinition); 799638"];
20760 [label="accessSymbol.ContainingModule 799639"];
20761 [label="get\n            {\n                return ContainingPEModule;\n            } 799640"];
20762 [label="ContainingPEModule 799641"];
20763 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 799642"];
20764 [label="s.Kind 799643"];
20765 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799644"];
20766 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799645"];
20767 [label="return ContainingPEModule; 799646"];
20768 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 799647"];
20769 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 799648"];
20770 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 799649"];
20771 [label="AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _) 799650"];
20772 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 799651"];
20773 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 799652"];
20774 [label="Debug.Assert(symbol is object); 799653"];
20775 [label="symbol.Kind 799654"];
20776 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 799655"];
20777 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 799656"];
20778 [label="isInternal = false; 799657"];
20779 [label="symbol.DeclaredAccessibility 799658"];
20780 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 799659"];
20781 [label="Accessibility access = Accessibility.Private; 799660"];
20782 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 799661"];
20783 [label="symbol.ContainingType 799662"];
20784 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 799663"];
20785 [label="return _container as NamedTypeSymbol; 799664"];
20786 [label="symbol = symbol.ContainingType; 799665"];
20787 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 799666"];
20788 [label="return true; 799667"];
20789 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 799668"];
20790 [label="byte? value; 799669"];
20791 [label="param TryGetByte(out byte? value) 799670"];
20792 [label="value = null; 799671"];
20793 [label="s.Kind 799672"];
20794 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799673"];
20795 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799674"];
20796 [label="param GetNullableContextValue(this) 799675"];
20797 [label="param GetLocalNullableContextValue(this) 799676"];
20798 [label="get\n            {\n                return _moduleSymbol;\n            } 799677"];
20799 [label="return _moduleSymbol; 799678"];
20800 [label="param GetLocalNullableContextValue(this) 799679"];
20801 [label="get\n            {\n                return _assemblySymbol;\n            } 799680"];
20802 [label="return _assemblySymbol; 799681"];
20803 [label="param GetLocalNullableContextValue(this) 799682"];
20804 [label="get\n            {\n                return null;\n            } 799683"];
20805 [label="=> defaultType 799684"];
20806 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 799685"];
20807 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 799686"];
20808 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 799687"];
20809 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure) 799688"];
20810 [label="param TypeDependsClosure(NamedTypeSymbol type) 799689"];
20811 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 799690"];
20812 [label="param TypeDependsClosure(HashSet<Symbol> partialClosure) 799691"];
20813 [label="if ((object)type == null)\n            {\n                return;\n            } 799692"];
20814 [label="if ((object)type == null)\n            {\n                return;\n            } 799693"];
20815 [label="this.SpecialType 799694"];
20816 [label="get\n            {\n                return _corTypeId;\n            } 799695"];
20817 [label="if (this.SpecialType == SpecialType.System_Object)\n            {\n                return (int)SpecialType.System_Object;\n            } 799696"];
20818 [label="return (int)SpecialType.System_Object; 799697"];
20819 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 799698"];
20820 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 799699"];
20821 [label="s.Kind 799700"];
20822 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799701"];
20823 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799702"];
20824 [label="return null; 799703"];
20825 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 799704"];
20826 [label="if ((object)type == null)\n            {\n                return;\n            } 799705"];
20827 [label="if ((object)type == null)\n            {\n                return;\n            } 799706"];
20828 [label="return; 799707"];
20829 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 799708"];
20830 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 799709"];
20831 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 799710"];
20832 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 799711"];
20833 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 799712"];
20834 [label="var result = hs.Contains(on); 799713"];
20835 [label="var result = hs.Contains(on); 799714"];
20836 [label="var result = hs.Contains(on); 799715"];
20837 [label="this.SpecialType 799716"];
20838 [label="OriginalDefinition 799717"];
20839 [label="hs.Free(); 799718"];
20840 [label="return result; 799719"];
20841 [label="this.SetKnownToHaveNoDeclaredBaseCycles() 799720"];
20842 [label="param SetKnownToHaveNoDeclaredBaseCycles(this) 799721"];
20843 [label="_hasNoBaseCycles = true; 799722"];
20844 [label="_hasNoBaseCycles 799723"];
20845 [label="this.SetKnownToHaveNoDeclaredBaseCycles(); 799724"];
20846 [label="return declaredBase; 799725"];
20847 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 799726"];
20848 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 799727"];
20849 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 799728"];
20850 [label="return _lazyBaseType; 799729"];
20851 [label="NamedTypeSymbol @base = this.BaseTypeNoUseSiteDiagnostics; 799730"];
20852 [label="while ((object)@base != null)\n            {\n                if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                }\n\n                @base = @base.BaseTypeNoUseSiteDiagnostics;\n            } 799731"];
20853 [label="while ((object)@base != null)\n            {\n                if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                }\n\n                @base = @base.BaseTypeNoUseSiteDiagnostics;\n            } 799732"];
20854 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 799733"];
20855 [label="@base.IsErrorType() 799734"];
20856 [label="param IsErrorType(this TypeSymbol type) 799735"];
20857 [label="RoslynDebug.Assert((object)type != null); 799736"];
20858 [label="RoslynDebug.Assert((object)type != null); 799737"];
20859 [label="type.Kind 799738"];
20860 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 799739"];
20861 [label="return type.Kind == SymbolKind.ErrorType; 799740"];
20862 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 799741"];
20863 [label="@base.BaseTypeNoUseSiteDiagnostics 799742"];
20864 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 799743"];
20865 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 799744"];
20866 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 799745"];
20867 [label="Debug.Assert((object)depends != null); 799746"];
20868 [label="Debug.Assert((object)on != null); 799747"];
20869 [label="on.IsDefinition 799748"];
20870 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 799749"];
20871 [label="OriginalDefinition 799750"];
20872 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 799751"];
20873 [label="OriginalSymbolDefinition 799752"];
20874 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 799753"];
20875 [label="this.OriginalTypeSymbolDefinition 799754"];
20876 [label="get\n            {\n                return this.OriginalDefinition;\n            } 799755"];
20877 [label="this.OriginalDefinition 799756"];
20878 [label="get\n            {\n                return this;\n            } 799757"];
20879 [label="return this.OriginalDefinition; 799758"];
20880 [label="return this.OriginalTypeSymbolDefinition; 799759"];
20881 [label="return OriginalSymbolDefinition; 799760"];
20882 [label="return (object)this == (object)OriginalDefinition; 799761"];
20883 [label="Debug.Assert(on.IsDefinition); 799762"];
20884 [label="depends.DeclaringCompilation 799763"];
20885 [label="get { return null; } 799764"];
20886 [label="return null; 799765"];
20887 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 799766"];
20888 [label="if ((object)type == null)\n            {\n                return;\n            } 799767"];
20889 [label="return; 799768"];
20890 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 799769"];
20891 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 799770"];
20892 [label="return result; 799771"];
20893 [label="this.SetKnownToHaveNoDeclaredBaseCycles(); 799772"];
20894 [label="@base = @base.BaseTypeNoUseSiteDiagnostics; 799773"];
20895 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 799774"];
20896 [label="@base.IsErrorType() 799775"];
20897 [label="param IsErrorType(this TypeSymbol type) 799776"];
20898 [label="RoslynDebug.Assert((object)type != null); 799777"];
20899 [label="RoslynDebug.Assert((object)type != null); 799778"];
20900 [label="type.Kind 799779"];
20901 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 799780"];
20902 [label="return type.Kind == SymbolKind.ErrorType; 799781"];
20903 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 799782"];
20904 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 799783"];
20905 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 799784"];
20906 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 799785"];
20907 [label="return null; 799786"];
20908 [label="return null; 799787"];
20909 [label="if (MergeUseSiteDiagnostics(ref result, DeriveUseSiteDiagnosticFromBase()))\n            {\n                return result;\n            } 799788"];
20910 [label="MergeUseSiteDiagnostics(ref result, DeriveUseSiteDiagnosticFromBase()) 799789"];
20911 [label="param MergeUseSiteDiagnostics(ref DiagnosticInfo result) 799790"];
20912 [label="param MergeUseSiteDiagnostics(DiagnosticInfo info) 799791"];
20913 [label="param MergeUseSiteDiagnostics(this) 799792"];
20914 [label="if (info == null)\n            {\n                return false;\n            } 799793"];
20915 [label="if (info == null)\n            {\n                return false;\n            } 799794"];
20916 [label="return false; 799795"];
20917 [label="this.ContainingModule 799796"];
20918 [label="get\n            {\n                return ContainingPEModule;\n            } 799797"];
20919 [label="ContainingPEModule 799798"];
20920 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 799799"];
20921 [label="Symbol s = _container; 799800"];
20922 [label="s.Kind 799801"];
20923 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799802"];
20924 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799803"];
20925 [label="((PENamespaceSymbol)s).ContainingPEModule 799804"];
20926 [label="return ContainingPEModule; 799805"];
20927 [label="if (this.ContainingModule.HasUnifiedReferences)\n            {\n                HashSet<TypeSymbol> unificationCheckedTypes = null;\n                if (GetUnificationUseSiteDiagnosticRecursive(ref result, this, ref unificationCheckedTypes))\n                {\n                    return result;\n                }\n            } 799806"];
20928 [label="this.ContainingModule.HasUnifiedReferences 799807"];
20929 [label="get { return GetUnifiedAssemblies().Length > 0; } 799808"];
20930 [label="GetUnifiedAssemblies() 799809"];
20931 [label="param GetUnifiedAssemblies(this) 799810"];
20932 [label="AssertReferencesInitialized() 799811"];
20933 [label="param AssertReferencesInitialized(this) 799812"];
20934 [label="Debug.Assert(_moduleReferences != null); 799813"];
20935 [label="Debug.Assert(_moduleReferences != null); 799814"];
20936 [label="AssertReferencesInitialized(); 799815"];
20937 [label="return GetUnifiedAssemblies().Length > 0; 799816"];
20938 [label="return GetUnifiedAssemblies().Length > 0; 799817"];
20939 [label="return result; 799818"];
20940 [label="if (!MergeUseSiteDiagnostics(ref diagnostic, CalculateUseSiteDiagnostic()))\n            {\n                // Check if this type is marked by RequiredAttribute attribute.\n                // If so mark the type as bad, because it relies upon semantics that are not understood by the C# compiler.\n                if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                }\n            } 799819"];
20941 [label="MergeUseSiteDiagnostics(ref diagnostic, CalculateUseSiteDiagnostic()) 799820"];
20942 [label="param MergeUseSiteDiagnostics(ref DiagnosticInfo result) 799821"];
20943 [label="param MergeUseSiteDiagnostics(DiagnosticInfo info) 799822"];
20944 [label="param MergeUseSiteDiagnostics(this) 799823"];
20945 [label="if (info == null)\n            {\n                return false;\n            } 799824"];
20946 [label="if (info == null)\n            {\n                return false;\n            } 799825"];
20947 [label="return false; 799826"];
20948 [label="this.ContainingPEModule 799827"];
20949 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 799828"];
20950 [label="Symbol s = _container; 799829"];
20951 [label="s.Kind 799830"];
20952 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 799831"];
20953 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 799832"];
20954 [label="((PENamespaceSymbol)s).ContainingPEModule 799833"];
20955 [label="if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 799834"];
20956 [label="this.ContainingPEModule.Module 799835"];
20957 [label="get\n            {\n                return _module;\n            } 799836"];
20958 [label="if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 799837"];
20959 [label="TypeKind 799838"];
20960 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 799839"];
20961 [label="TypeKind result = _lazyKind; 799840"];
20962 [label="if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                } 799841"];
20963 [label="if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    } 799842"];
20964 [label="TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true); 799843"];
20965 [label="GetDeclaredBaseType(skipTransformsIfNecessary: true) 799844"];
20966 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 799845"];
20967 [label="TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true); 799846"];
20968 [label="result = TypeKind.Class; 799847"];
20969 [label="if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        } 799848"];
20970 [label="if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        } 799849"];
20971 [label="@base.SpecialType 799850"];
20972 [label="SpecialType baseCorTypeId = @base.SpecialType; 799851"];
20973 [label="switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            } 799852"];
20974 [label="this.SpecialType 799853"];
20975 [label="if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    } 799854"];
20976 [label="result = TypeKind.Struct; 799855"];
20977 [label="_lazyKind 799856"];
20978 [label="return result; 799857"];
20979 [label="if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 799858"];
20980 [label="return diagnostic; 799859"];
20981 [label="_lazyUseSiteDiagnostic = GetUseSiteDiagnosticImpl(); 799860"];
20982 [label="_lazyUseSiteDiagnostic 799861"];
20983 [label="return _lazyUseSiteDiagnostic; 799862"];
20984 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 799863"];
20985 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 799864"];
20986 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 799865"];
20987 [label="return typeSymbol; 799866"];
20988 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 799867"];
20989 [label="predefinedType.Keyword 799868"];
20990 [label="=> true 799869"];
20991 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 799870"];
20992 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 799871"];
20993 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 799872"];
20994 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 799873"];
20995 [label="param AreNullableAnnotationsEnabled(this) 799874"];
20996 [label="RoslynDebug.Assert(token.SyntaxTree is object); 799875"];
20997 [label="RoslynDebug.Assert(token.SyntaxTree is object); 799876"];
20998 [label="ArrayBuilder<CSharpSyntaxNode>? nodes = null; 799877"];
20999 [label="SyntaxTree? tree = null; 799878"];
21000 [label="tree = node._syntaxTree; 799879"];
21001 [label="if (tree != null)\n                {\n                    break;\n                } 799880"];
21002 [label="if (tree != null)\n                {\n                    break;\n                } 799881"];
21003 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 799882"];
21004 [label="if (parent == null)\n                {\n                    // set the tree on the root node atomically\n                    Interlocked.CompareExchange(ref node._syntaxTree, CSharpSyntaxTree.CreateWithoutClone(node), null);\n                    tree = node._syntaxTree;\n                    break;\n                } 799883"];
21005 [label="Debug.Assert(tree != null); 799884"];
21006 [label="Debug.Assert(tree != null); 799885"];
21007 [label="var existingTree = n._syntaxTree; 799886"];
21008 [label="if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    } 799887"];
21009 [label="if (existingTree != null)\n                    {\n                        Debug.Assert(existingTree == tree, 'how could this node belong to a different tree?');\n\n                        // yield the race\n                        break;\n                    } 799888"];
21010 [label="Debug.Assert(result != null); 799889"];
21011 [label="Debug.Assert(result != null); 799890"];
21012 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 799891"];
21013 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 799892"];
21014 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 799893"];
21015 [label="Debug.Assert(result != null); 799894"];
21016 [label="Debug.Assert(result != null); 799895"];
21017 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 799896"];
21018 [label="param AreNullableAnnotationsEnabled(int position) 799897"];
21019 [label="param AreNullableAnnotationsEnabled(this) 799898"];
21020 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 799899"];
21021 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 799900"];
21022 [label="csTree.GetNullableContextState(position) 799901"];
21023 [label="param GetNullableContextState(int position) 799902"];
21024 [label="=> GetNullableContextStateMap().GetContextState(position) 799903"];
21025 [label="GetNullableContextStateMap() 799904"];
21026 [label="param GetNullableContextStateMap(this) 799905"];
21027 [label="position 799906"];
21028 [label="GetNullableContextStateMap().GetContextState(position) 799907"];
21029 [label="param GetContextState(int position) 799908"];
21030 [label="param GetContextState(this) 799909"];
21031 [label="var index = GetContextStateIndex(position); 799910"];
21032 [label="GetContextStateIndex(position) 799911"];
21033 [label="param GetContextStateIndex(int position) 799912"];
21034 [label="param GetContextStateIndex(this) 799913"];
21035 [label="int index = _contexts.BinarySearch(searchContext, PositionComparer.Instance); 799914"];
21036 [label="if (index < 0)\n            {\n                // If no exact match, BinarySearch returns the complement\n                // of the index of the next higher value.\n                index = ~index - 1;\n            } 799915"];
21037 [label="if (index < 0)\n            {\n                // If no exact match, BinarySearch returns the complement\n                // of the index of the next higher value.\n                index = ~index - 1;\n            } 799916"];
21038 [label="index = ~index - 1; 799917"];
21039 [label="Debug.Assert(index >= -1); 799918"];
21040 [label="Debug.Assert(index >= -1); 799919"];
21041 [label="Debug.Assert(index < _contexts.Length); 799920"];
21042 [label="if (index >= 0)\n            {\n                Debug.Assert(_contexts[index].Position <= position);\n                Debug.Assert(index == _contexts.Length - 1 || position < _contexts[index + 1].Position);\n            } 799921"];
21043 [label="if (index >= 0)\n            {\n                Debug.Assert(_contexts[index].Position <= position);\n                Debug.Assert(index == _contexts.Length - 1 || position < _contexts[index + 1].Position);\n            } 799922"];
21044 [label="return index; 799923"];
21045 [label="return index < 0 ? GetContextForFileStart() : _contexts[index]; 799924"];
21046 [label="return index < 0 ? GetContextForFileStart() : _contexts[index]; 799925"];
21047 [label="index < 0 799926"];
21048 [label="GetContextForFileStart() 799927"];
21049 [label="0 799928"];
21050 [label="position: 0 799929"];
21051 [label="warningsState: NullableContextState.State.Unknown 799930"];
21052 [label="annotationsState: NullableContextState.State.Unknown 799931"];
21053 [label="new NullableContextState(\n                position: 0,\n                warningsState: NullableContextState.State.Unknown,\n                annotationsState: NullableContextState.State.Unknown) 799932"];
21054 [label="param NullableContextState(int position) 799933"];
21055 [label="param NullableContextState(State warningsState) 799934"];
21056 [label="param NullableContextState(State annotationsState) 799935"];
21057 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 799936"];
21058 [label="this.Compilation.Options 799937"];
21059 [label="get\n            {\n                return _options;\n            } 799938"];
21060 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 799939"];
21061 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 799940"];
21062 [label="csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None) 799941"];
21063 [label="param IsGeneratedCode(SyntaxTreeOptionsProvider? provider) 799942"];
21064 [label="param IsGeneratedCode(CancellationToken cancellationToken) 799943"];
21065 [label="param IsGeneratedCode(this) 799944"];
21066 [label="return provider?.IsGenerated(this, cancellationToken) switch\n            {\n                null or GeneratedKind.Unknown => isGeneratedHeuristic(),\n                GeneratedKind kind => kind != GeneratedKind.NotGenerated\n            }; 799945"];
21067 [label="provider?.IsGenerated(this, cancellationToken) switch\n            {\n                null or GeneratedKind.Unknown => isGeneratedHeuristic(),\n                GeneratedKind kind => kind != GeneratedKind.NotGenerated\n            } 799946"];
21068 [label="isGeneratedHeuristic() 799947"];
21069 [label="bool isGeneratedHeuristic()\n            {\n                if (_lazyIsGeneratedCode == GeneratedKind.Unknown)\n                {\n                    // Create the generated code status on demand\n                    bool isGenerated = GeneratedCodeUtilities.IsGeneratedCode(\n                            this,\n                            isComment: trivia => trivia.Kind() == SyntaxKind.SingleLineCommentTrivia || trivia.Kind() == SyntaxKind.MultiLineCommentTrivia,\n                            cancellationToken: default);\n                    _lazyIsGeneratedCode = isGenerated ? GeneratedKind.MarkedGenerated : GeneratedKind.NotGenerated;\n                }\n\n                return _lazyIsGeneratedCode == GeneratedKind.MarkedGenerated;\n            } 799948"];
21070 [label="if (_lazyIsGeneratedCode == GeneratedKind.Unknown)\n                {\n                    // Create the generated code status on demand\n                    bool isGenerated = GeneratedCodeUtilities.IsGeneratedCode(\n                            this,\n                            isComment: trivia => trivia.Kind() == SyntaxKind.SingleLineCommentTrivia || trivia.Kind() == SyntaxKind.MultiLineCommentTrivia,\n                            cancellationToken: default);\n                    _lazyIsGeneratedCode = isGenerated ? GeneratedKind.MarkedGenerated : GeneratedKind.NotGenerated;\n                } 799949"];
21071 [label="bool isGenerated = GeneratedCodeUtilities.IsGeneratedCode(\n                            this,\n                            isComment: trivia => trivia.Kind() == SyntaxKind.SingleLineCommentTrivia || trivia.Kind() == SyntaxKind.MultiLineCommentTrivia,\n                            cancellationToken: default); 799950"];
21072 [label="bool isGenerated = GeneratedCodeUtilities.IsGeneratedCode(\n                            this,\n                            isComment: trivia => trivia.Kind() == SyntaxKind.SingleLineCommentTrivia || trivia.Kind() == SyntaxKind.MultiLineCommentTrivia,\n                            cancellationToken: default); 799951"];
21073 [label="bool isGenerated = GeneratedCodeUtilities.IsGeneratedCode(\n                            this,\n                            isComment: trivia => trivia.Kind() == SyntaxKind.SingleLineCommentTrivia || trivia.Kind() == SyntaxKind.MultiLineCommentTrivia,\n                            cancellationToken: default); 799952"];
21074 [label="get { return _path; } 799953"];
21075 [label="return _path; 799954"];
21076 [label="param GetRoot(CancellationToken cancellationToken) 799955"];
21077 [label="=> true 799956"];
21078 [label="param GetLeadingTriviaCore(this) 799957"];
21079 [label="this.GetLeadingTrivia() 799958"];
21080 [label="param GetLeadingTrivia(this) 799959"];
21081 [label="return this.LeadingField; 799960"];
21082 [label="return this.GetLeadingTrivia(); 799961"];
21083 [label="isGenerated 799962"];
21084 [label="_lazyIsGeneratedCode = isGenerated ? GeneratedKind.MarkedGenerated : GeneratedKind.NotGenerated; 799963"];
21085 [label="_lazyIsGeneratedCode 799964"];
21086 [label="return _lazyIsGeneratedCode == GeneratedKind.MarkedGenerated; 799965"];
21087 [label="AreNullableAnnotationsGloballyEnabled() 799966"];
21088 [label="param AreNullableAnnotationsGloballyEnabled(this) 799967"];
21089 [label="RoslynDebug.Assert(Next is object); 799968"];
21090 [label="RoslynDebug.Assert(Next is object); 799969"];
21091 [label="Next.AreNullableAnnotationsGloballyEnabled() 799970"];
21092 [label="param AreNullableAnnotationsGloballyEnabled(this) 799971"];
21093 [label="param AreNullableAnnotationsGloballyEnabled(this) 799972"];
21094 [label="GetGlobalAnnotationState() 799973"];
21095 [label="param GetGlobalAnnotationState(this) 799974"];
21096 [label="Compilation.Options 799975"];
21097 [label="get\n            {\n                return _options;\n            } 799976"];
21098 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 799977"];
21099 [label="return false; 799978"];
21100 [label="return GetGlobalAnnotationState(); 799979"];
21101 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 799980"];
21102 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 799981"];
21103 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 799982"];
21104 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 799983"];
21105 [label="TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type) 799984"];
21106 [label="param Create(bool isNullableEnabled) 799985"];
21107 [label="param Create(TypeSymbol typeSymbol) 799986"];
21108 [label="param Create(bool isAnnotated = false) 799987"];
21109 [label="if (typeSymbol is null)\n            {\n                return default;\n            } 799988"];
21110 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 799989"];
21111 [label="isAnnotated 799990"];
21112 [label="isNullableEnabled 799991"];
21113 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 799992"];
21114 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 799993"];
21115 [label="Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious) 799994"];
21116 [label="param Create(TypeSymbol typeSymbol) 799995"];
21117 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 799996"];
21118 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 799997"];
21119 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 799998"];
21120 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 799999"];
21121 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 800000"];
21122 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 800001"];
21123 [label="typeSymbol.IsNullableType() 800002"];
21124 [label="param IsNullableType(this TypeSymbol type) 800003"];
21125 [label="type.OriginalDefinition 800004"];
21126 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 800005"];
21127 [label="OriginalTypeSymbolDefinition 800006"];
21128 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800007"];
21129 [label="this.OriginalDefinition 800008"];
21130 [label="get\n            {\n                return this;\n            } 800009"];
21131 [label="return this.OriginalDefinition; 800010"];
21132 [label="return OriginalTypeSymbolDefinition; 800011"];
21133 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 800012"];
21134 [label="type.OriginalDefinition.SpecialType 800013"];
21135 [label="get\n            {\n                return _corTypeId;\n            } 800014"];
21136 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 800015"];
21137 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 800016"];
21138 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 800017"];
21139 [label="param CreateNonLazyType(TypeSymbol typeSymbol) 800018"];
21140 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 800019"];
21141 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 800020"];
21142 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 800021"];
21143 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 800022"];
21144 [label="Extensions.Create(customModifiers) 800023"];
21145 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 800024"];
21146 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 800025"];
21147 [label="return Default; 800026"];
21148 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 800027"];
21149 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 800028"];
21150 [label="param TypeWithAnnotations(TypeSymbol defaultType) 800029"];
21151 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 800030"];
21152 [label="param TypeWithAnnotations(Extensions extensions) 800031"];
21153 [label="param TypeWithAnnotations(this) 800032"];
21154 [label="var a1 = defaultType is null; 800033"];
21155 [label="!a1 800034"];
21156 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 800035"];
21157 [label="defaultType.IsNullableType() 800036"];
21158 [label="param IsNullableType(this TypeSymbol type) 800037"];
21159 [label="type.OriginalDefinition 800038"];
21160 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 800039"];
21161 [label="OriginalTypeSymbolDefinition 800040"];
21162 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800041"];
21163 [label="this.OriginalDefinition 800042"];
21164 [label="get\n            {\n                return this;\n            } 800043"];
21165 [label="return this; 800044"];
21166 [label="return this.OriginalDefinition; 800045"];
21167 [label="return OriginalTypeSymbolDefinition; 800046"];
21168 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 800047"];
21169 [label="type.OriginalDefinition.SpecialType 800048"];
21170 [label="get\n            {\n                return _corTypeId;\n            } 800049"];
21171 [label="return _corTypeId; 800050"];
21172 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 800051"];
21173 [label="Debug.Assert(a1 || a2 != true || a3); 800052"];
21174 [label="Debug.Assert(a1 || a2 != true || a3); 800053"];
21175 [label="Debug.Assert(extensions != null); 800054"];
21176 [label="Debug.Assert(extensions != null); 800055"];
21177 [label="DefaultType 800056"];
21178 [label="NullableAnnotation 800057"];
21179 [label="_extensions 800058"];
21180 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 800059"];
21181 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 800060"];
21182 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 800061"];
21183 [label="param operator(TypeWithAnnotations typeWithAnnotations) 800062"];
21184 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 800063"];
21185 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 800064"];
21186 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 800065"];
21187 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 800066"];
21188 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 800067"];
21189 [label="typeWithAnnotations.HasType 800068"];
21190 [label="=> !(DefaultType is null) 800069"];
21191 [label="DefaultType is null 800070"];
21192 [label="!(DefaultType is null) 800071"];
21193 [label="Debug.Assert(typeWithAnnotations.HasType); 800072"];
21194 [label="_typeWithAnnotations 800073"];
21195 [label="_symbol = null; 800074"];
21196 [label="_symbol 800075"];
21197 [label="_isNullableEnabled = false; 800076"];
21198 [label="_isNullableEnabled 800077"];
21199 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 800078"];
21200 [label="return bindPredefined(syntax, diagnostics); 800079"];
21201 [label="symbol.IsType 800080"];
21202 [label="=> !_typeWithAnnotations.IsDefault 800081"];
21203 [label="_typeWithAnnotations.IsDefault 800082"];
21204 [label="=> DefaultType is null && this.NullableAnnotation == 0 && (_extensions == null || _extensions == Extensions.Default) 800083"];
21205 [label="DefaultType is null 800084"];
21206 [label="DefaultType is null && this.NullableAnnotation == 0 800085"];
21207 [label="DefaultType is null && this.NullableAnnotation == 0 && (_extensions == null || _extensions == Extensions.Default) 800086"];
21208 [label="!_typeWithAnnotations.IsDefault 800087"];
21209 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 800088"];
21210 [label="symbol.IsType 800089"];
21211 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 800090"];
21212 [label="symbol.TypeWithAnnotations 800091"];
21213 [label="=> _typeWithAnnotations 800092"];
21214 [label="_typeWithAnnotations 800093"];
21215 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 800094"];
21216 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 800095"];
21217 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 800096"];
21218 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 800097"];
21219 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics) 800098"];
21220 [label="param ReportDiagnosticsIfObsolete(Binder binder) 800099"];
21221 [label="param ReportDiagnosticsIfObsolete(SyntaxNode syntax) 800100"];
21222 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 800101"];
21223 [label="=>\n            _extensions.ReportDiagnosticsIfObsolete(this, binder, syntax, diagnostics) 800102"];
21224 [label="this 800103"];
21225 [label="binder 800104"];
21226 [label="syntax 800105"];
21227 [label="diagnostics 800106"];
21228 [label="_extensions.ReportDiagnosticsIfObsolete(this, binder, syntax, diagnostics) 800107"];
21229 [label="param ReportDiagnosticsIfObsolete(TypeWithAnnotations type) 800108"];
21230 [label="param ReportDiagnosticsIfObsolete(Binder binder) 800109"];
21231 [label="param ReportDiagnosticsIfObsolete(SyntaxNode syntax) 800110"];
21232 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 800111"];
21233 [label="param ReportDiagnosticsIfObsolete(this) 800112"];
21234 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 800113"];
21235 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 800114"];
21236 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 800115"];
21237 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics) 800116"];
21238 [label="param ReportDiagnosticsIfObsoleteCore(Binder binder) 800117"];
21239 [label="param ReportDiagnosticsIfObsoleteCore(SyntaxNode syntax) 800118"];
21240 [label="param ReportDiagnosticsIfObsoleteCore(DiagnosticBag diagnostics) 800119"];
21241 [label="param ReportDiagnosticsIfObsoleteCore(this) 800120"];
21242 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 800121"];
21243 [label="Type 800122"];
21244 [label="=> _extensions?.GetResolvedType(DefaultType) 800123"];
21245 [label="DefaultType 800124"];
21246 [label=".GetResolvedType(DefaultType) 800125"];
21247 [label="param GetResolvedType(TypeSymbol defaultType) 800126"];
21248 [label="=> defaultType 800127"];
21249 [label="defaultType 800128"];
21250 [label="_extensions?.GetResolvedType(DefaultType) 800129"];
21251 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 800130"];
21252 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 800131"];
21253 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 800132"];
21254 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false) 800133"];
21255 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 800134"];
21256 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 800135"];
21257 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 800136"];
21258 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 800137"];
21259 [label="param ReportDiagnosticsIfObsolete(this) 800138"];
21260 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 800139"];
21261 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 800140"];
21262 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 800141"];
21263 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 800142"];
21264 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 800143"];
21265 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 800144"];
21266 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 800145"];
21267 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 800146"];
21268 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 800147"];
21269 [label="param ReportDiagnosticsIfObsolete(this) 800148"];
21270 [label="symbol.Kind 800149"];
21271 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 800150"];
21272 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 800151"];
21273 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800152"];
21274 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800153"];
21275 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800154"];
21276 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800155"];
21277 [label="this.ContainingMemberOrLambda 800156"];
21278 [label="get { return _containingMemberOrLambda; } 800157"];
21279 [label="return _containingMemberOrLambda; 800158"];
21280 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800159"];
21281 [label="this.ContainingType 800160"];
21282 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 800161"];
21283 [label="this.ContainingMemberOrLambda 800162"];
21284 [label="get { return _containingMemberOrLambda; } 800163"];
21285 [label="return _containingMemberOrLambda; 800164"];
21286 [label="var member = this.ContainingMemberOrLambda; 800165"];
21287 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 800166"];
21288 [label="member.Kind 800167"];
21289 [label="get\n            {\n                return SymbolKind.Field;\n            } 800168"];
21290 [label="return SymbolKind.Field; 800169"];
21291 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 800170"];
21292 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 800171"];
21293 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 800172"];
21294 [label="member.ContainingType 800173"];
21295 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 800174"];
21296 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800175"];
21297 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800176"];
21298 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 800177"];
21299 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 800178"];
21300 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 800179"];
21301 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 800180"];
21302 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 800181"];
21303 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 800182"];
21304 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 800183"];
21305 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 800184"];
21306 [label="RoslynDebug.Assert(symbol is object); 800185"];
21307 [label="RoslynDebug.Assert(symbol is object); 800186"];
21308 [label="symbol.Kind 800187"];
21309 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 800188"];
21310 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 800189"];
21311 [label="symbol.Kind 800190"];
21312 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 800191"];
21313 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 800192"];
21314 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 800193"];
21315 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 800194"];
21316 [label="symbol.GetLeastOverriddenMember(containingType) 800195"];
21317 [label="param GetLeastOverriddenMember(this Symbol member) 800196"];
21318 [label="param GetLeastOverriddenMember(NamedTypeSymbol accessingTypeOpt) 800197"];
21319 [label="member.Kind 800198"];
21320 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 800199"];
21321 [label="switch (member.Kind)\n            {\n                case SymbolKind.Method:\n                    var method = (MethodSymbol)member;\n                    return method.GetConstructedLeastOverriddenMethod(accessingTypeOpt, requireSameReturnType: false);\n\n                case SymbolKind.Property:\n                    var property = (PropertySymbol)member;\n                    return property.GetLeastOverriddenProperty(accessingTypeOpt);\n\n                case SymbolKind.Event:\n                    var evnt = (EventSymbol)member;\n                    return evnt.GetLeastOverriddenEvent(accessingTypeOpt);\n\n                default:\n                    return member;\n            } 800200"];
21322 [label="return member; 800201"];
21323 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 800202"];
21324 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 800203"];
21325 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 800204"];
21326 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 800205"];
21327 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 800206"];
21328 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 800207"];
21329 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 800208"];
21330 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 800209"];
21331 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 800210"];
21332 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 800211"];
21333 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 800212"];
21334 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 800213"];
21335 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 800214"];
21336 [label="RoslynDebug.Assert(diagnostics != null); 800215"];
21337 [label="RoslynDebug.Assert(diagnostics != null); 800216"];
21338 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 800217"];
21339 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 800218"];
21340 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 800219"];
21341 [label="ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember) 800220"];
21342 [label="param GetObsoleteDiagnosticKind(Symbol symbol) 800221"];
21343 [label="param GetObsoleteDiagnosticKind(Symbol containingMember) 800222"];
21344 [label="param GetObsoleteDiagnosticKind(bool forceComplete = false) 800223"];
21345 [label="symbol.ObsoleteKind 800224"];
21346 [label="get\n            {\n                var data = this.ObsoleteAttributeData;\n                return (data == null) ? ObsoleteAttributeKind.None : data.Kind;\n            } 800225"];
21347 [label="this.ObsoleteAttributeData 800226"];
21348 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return null;\n                }\n\n                bool ignoreByRefLikeMarker = this.IsRefLikeType;\n                ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker);\n                return uncommon.lazyObsoleteAttributeData;\n            } 800227"];
21349 [label="GetUncommonProperties() 800228"];
21350 [label="param GetUncommonProperties(this) 800229"];
21351 [label="var result = _lazyUncommonProperties; 800230"];
21352 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 800231"];
21353 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 800232"];
21354 [label="this.IsUncommon() 800233"];
21355 [label="param IsUncommon(this) 800234"];
21356 [label="this.ContainingPEModule 800235"];
21357 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 800236"];
21358 [label="Symbol s = _container; 800237"];
21359 [label="s.Kind 800238"];
21360 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 800239"];
21361 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 800240"];
21362 [label="((PENamespaceSymbol)s).ContainingPEModule 800241"];
21363 [label="if (this.ContainingPEModule.HasAnyCustomAttributes(_handle))\n            {\n                return true;\n            } 800242"];
21364 [label="if (this.ContainingPEModule.HasAnyCustomAttributes(_handle))\n            {\n                return true;\n            } 800243"];
21365 [label="this.ContainingPEModule.HasAnyCustomAttributes(_handle) 800244"];
21366 [label="param HasAnyCustomAttributes(EntityHandle token) 800245"];
21367 [label="param HasAnyCustomAttributes(this) 800246"];
21368 [label="foreach (var attr in _module.GetCustomAttributesOrThrow(token))\n                {\n                    return true;\n                } 800247"];
21369 [label="foreach (var attr in _module.GetCustomAttributesOrThrow(token))\n                {\n                    return true;\n                } 800248"];
21370 [label="return true; 800249"];
21371 [label="return true; 800250"];
21372 [label="if (this.IsUncommon())\n            {\n                result = new UncommonProperties();\n                return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result;\n            } 800251"];
21373 [label="result = new UncommonProperties(); 800252"];
21374 [label="new UncommonProperties() 800253"];
21375 [label="param UncommonProperties(this) 800254"];
21376 [label="lazyEnumUnderlyingType 800255"];
21377 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 800256"];
21378 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 800257"];
21379 [label="lazyContainsExtensionMethods 800258"];
21380 [label="lazyIsByRefLike 800259"];
21381 [label="lazyIsReadOnly 800260"];
21382 [label="lazyDefaultMemberName 800261"];
21383 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 800262"];
21384 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 800263"];
21385 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 800264"];
21386 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 800265"];
21387 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 800266"];
21388 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 800267"];
21389 [label="var uncommon = GetUncommonProperties(); 800268"];
21390 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return null;\n                } 800269"];
21391 [label="this.IsRefLikeType 800270"];
21392 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                }\n\n                if (!uncommon.lazyIsByRefLike.HasValue())\n                {\n                    var isByRefLike = ThreeState.False;\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    }\n\n                    uncommon.lazyIsByRefLike = isByRefLike;\n                }\n\n                return uncommon.lazyIsByRefLike.Value();\n            } 800271"];
21393 [label="GetUncommonProperties() 800272"];
21394 [label="param GetUncommonProperties(this) 800273"];
21395 [label="var result = _lazyUncommonProperties; 800274"];
21396 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 800275"];
21397 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 800276"];
21398 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 800277"];
21399 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 800278"];
21400 [label="return result; 800279"];
21401 [label="var uncommon = GetUncommonProperties(); 800280"];
21402 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                } 800281"];
21403 [label="if (!uncommon.lazyIsByRefLike.HasValue())\n                {\n                    var isByRefLike = ThreeState.False;\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    }\n\n                    uncommon.lazyIsByRefLike = isByRefLike;\n                } 800282"];
21404 [label="var isByRefLike = ThreeState.False; 800283"];
21405 [label="this.TypeKind 800284"];
21406 [label="return result; 800285"];
21407 [label="if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    } 800286"];
21408 [label="this.ContainingPEModule 800287"];
21409 [label="s.Kind 800288"];
21410 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 800289"];
21411 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 800290"];
21412 [label="var moduleSymbol = this.ContainingPEModule; 800291"];
21413 [label="moduleSymbol.Module 800292"];
21414 [label="get\n            {\n                return _module;\n            } 800293"];
21415 [label="var module = moduleSymbol.Module; 800294"];
21416 [label="isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState(); 800295"];
21417 [label="isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState(); 800296"];
21418 [label="uncommon.lazyIsByRefLike 800297"];
21419 [label="return uncommon.lazyIsByRefLike.Value(); 800298"];
21420 [label="bool ignoreByRefLikeMarker = this.IsRefLikeType; 800299"];
21421 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 800300"];
21422 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 800301"];
21423 [label="ContainingPEModule 800302"];
21424 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 800303"];
21425 [label="Symbol s = _container; 800304"];
21426 [label="s.Kind 800305"];
21427 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 800306"];
21428 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 800307"];
21429 [label="((PENamespaceSymbol)s).ContainingPEModule 800308"];
21430 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 800309"];
21431 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 800310"];
21432 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker) 800311"];
21433 [label="param InitializeObsoleteDataFromMetadata(ref ObsoleteAttributeData data) 800312"];
21434 [label="param InitializeObsoleteDataFromMetadata(EntityHandle token) 800313"];
21435 [label="param InitializeObsoleteDataFromMetadata(PEModuleSymbol containingModule) 800314"];
21436 [label="param InitializeObsoleteDataFromMetadata(bool ignoreByRefLikeMarker) 800315"];
21437 [label="if (ReferenceEquals(data, ObsoleteAttributeData.Uninitialized))\n            {\n                ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker);\n                Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized);\n            } 800316"];
21438 [label="if (ReferenceEquals(data, ObsoleteAttributeData.Uninitialized))\n            {\n                ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker);\n                Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized);\n            } 800317"];
21439 [label="ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker); 800318"];
21440 [label="ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker); 800319"];
21441 [label="ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker); 800320"];
21442 [label="GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker) 800321"];
21443 [label="param GetObsoleteDataFromMetadata(EntityHandle token) 800322"];
21444 [label="param GetObsoleteDataFromMetadata(PEModuleSymbol containingModule) 800323"];
21445 [label="param GetObsoleteDataFromMetadata(bool ignoreByRefLikeMarker) 800324"];
21446 [label="containingModule.Module 800325"];
21447 [label="get\n            {\n                return _module;\n            } 800326"];
21448 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 800327"];
21449 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 800328"];
21450 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 800329"];
21451 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 800330"];
21452 [label="new MetadataDecoder(containingModule) 800331"];
21453 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 800332"];
21454 [label="param MetadataDecoder(this) 800333"];
21455 [label="moduleSymbol 800334"];
21456 [label="null 800335"];
21457 [label="null 800336"];
21458 [label="param MetadataDecoder(this) 800337"];
21459 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 800338"];
21460 [label="param MetadataDecoder(PENamedTypeSymbol typeContextOpt) 800339"];
21461 [label="param MetadataDecoder(PEMethodSymbol methodContextOpt) 800340"];
21462 [label="return _assembly.Identity; 800341"];
21463 [label="Debug.Assert((object)moduleSymbol != null); 800342"];
21464 [label="Debug.Assert((object)moduleSymbol != null); 800343"];
21465 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 800344"];
21466 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 800345"];
21467 [label="Debug.Assert(obsoleteAttributeData == null || !obsoleteAttributeData.IsUninitialized); 800346"];
21468 [label="Debug.Assert(obsoleteAttributeData == null || !obsoleteAttributeData.IsUninitialized); 800347"];
21469 [label="return obsoleteAttributeData; 800348"];
21470 [label="Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized); 800349"];
21471 [label="Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized); 800350"];
21472 [label="Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized); 800351"];
21473 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 800352"];
21474 [label="return uncommon.lazyObsoleteAttributeData; 800353"];
21475 [label="var data = this.ObsoleteAttributeData; 800354"];
21476 [label="return (data == null) ? ObsoleteAttributeKind.None : data.Kind; 800355"];
21477 [label="return (data == null) ? ObsoleteAttributeKind.None : data.Kind; 800356"];
21478 [label="(data == null) 800357"];
21479 [label="switch (symbol.ObsoleteKind)\n            {\n                case ObsoleteAttributeKind.None:\n                    return ObsoleteDiagnosticKind.NotObsolete;\n                case ObsoleteAttributeKind.Experimental:\n                    return ObsoleteDiagnosticKind.Diagnostic;\n                case ObsoleteAttributeKind.Uninitialized:\n                    // If we haven't cracked attributes on the symbol at all or we haven't\n                    // cracked attribute arguments enough to be able to report diagnostics for\n                    // ObsoleteAttribute, store the symbol so that we can report diagnostics at a \n                    // later stage.\n                    return ObsoleteDiagnosticKind.Lazy;\n            } 800358"];
21480 [label="return ObsoleteDiagnosticKind.NotObsolete; 800359"];
21481 [label="DiagnosticInfo? info = null; 800360"];
21482 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 800361"];
21483 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 800362"];
21484 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 800363"];
21485 [label="return kind; 800364"];
21486 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 800365"];
21487 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 800366"];
21488 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 800367"];
21489 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 800368"];
21490 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 800369"];
21491 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 800370"];
21492 [label="return symbol; 800371"];
21493 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 800372"];
21494 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 800373"];
21495 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 800374"];
21496 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 800375"];
21497 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 800376"];
21498 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 800377"];
21499 [label="param UnwrapAlias(DiagnosticBag diagnostics) 800378"];
21500 [label="param UnwrapAlias(SyntaxNode syntax) 800379"];
21501 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 800380"];
21502 [label="param UnwrapAlias(this) 800381"];
21503 [label="symbol.IsAlias 800382"];
21504 [label="=> _symbol?.Kind == SymbolKind.Alias 800383"];
21505 [label="_symbol 800384"];
21506 [label="_symbol?.Kind == SymbolKind.Alias 800385"];
21507 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 800386"];
21508 [label="return symbol; 800387"];
21509 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 800388"];
21510 [label="=> _typeWithAnnotations 800389"];
21511 [label="_typeWithAnnotations 800390"];
21512 [label="TypeWithAnnotations constructedType = typeArgument.SetIsAnnotated(Compilation); 800391"];
21513 [label="typeArgument.SetIsAnnotated(Compilation) 800392"];
21514 [label="param SetIsAnnotated(CSharpCompilation compilation) 800393"];
21515 [label="param SetIsAnnotated(this) 800394"];
21516 [label="CustomModifiers 800395"];
21517 [label="=> _extensions.CustomModifiers 800396"];
21518 [label="_extensions.CustomModifiers 800397"];
21519 [label="=> _customModifiers 800398"];
21520 [label="_customModifiers 800399"];
21521 [label="Debug.Assert(CustomModifiers.IsEmpty); 800400"];
21522 [label="this.Type 800401"];
21523 [label="=> _extensions?.GetResolvedType(DefaultType) 800402"];
21524 [label="DefaultType 800403"];
21525 [label=".GetResolvedType(DefaultType) 800404"];
21526 [label="param GetResolvedType(TypeSymbol defaultType) 800405"];
21527 [label="=> defaultType 800406"];
21528 [label="defaultType 800407"];
21529 [label="_extensions?.GetResolvedType(DefaultType) 800408"];
21530 [label="var typeSymbol = this.Type; 800409"];
21531 [label="typeSymbol.TypeKind 800410"];
21532 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 800411"];
21533 [label="TypeKind result = _lazyKind; 800412"];
21534 [label="if (typeSymbol.TypeKind != TypeKind.TypeParameter)\n            {\n                if (!typeSymbol.IsValueType && !typeSymbol.IsErrorType())\n                {\n                    return CreateNonLazyType(typeSymbol, NullableAnnotation.Annotated, this.CustomModifiers);\n                }\n                else\n                {\n                    return makeNullableT(compilation, typeSymbol);\n                }\n            } 800413"];
21535 [label="typeSymbol.IsValueType 800414"];
21536 [label="get\n            {\n                var kind = TypeKind;\n                return kind == TypeKind.Struct || kind == TypeKind.Enum;\n            } 800415"];
21537 [label="TypeKind 800416"];
21538 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 800417"];
21539 [label="var kind = TypeKind; 800418"];
21540 [label="return kind == TypeKind.Struct || kind == TypeKind.Enum; 800419"];
21541 [label="if (!typeSymbol.IsValueType && !typeSymbol.IsErrorType())\n                {\n                    return CreateNonLazyType(typeSymbol, NullableAnnotation.Annotated, this.CustomModifiers);\n                }\n                else\n                {\n                    return makeNullableT(compilation, typeSymbol);\n                } 800420"];
21542 [label="return makeNullableT(compilation, typeSymbol); 800421"];
21543 [label="return makeNullableT(compilation, typeSymbol); 800422"];
21544 [label="makeNullableT(compilation, typeSymbol) 800423"];
21545 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800424"];
21546 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800425"];
21547 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800426"];
21548 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800427"];
21549 [label="comp.GetSpecialType(SpecialType.System_Nullable_T) 800428"];
21550 [label="param GetSpecialType(SpecialType specialType) 800429"];
21551 [label="param GetSpecialType(this) 800430"];
21552 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 800431"];
21553 [label="NamedTypeSymbol result; 800432"];
21554 [label="GetBoundReferenceManager(); 800433"];
21555 [label="this.Modules 800434"];
21556 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 800435"];
21557 [label="module.GetReferencedAssemblies() 800436"];
21558 [label="param GetReferencedAssemblies(this) 800437"];
21559 [label="AssertReferencesInitialized() 800438"];
21560 [label="param AssertReferencesInitialized(this) 800439"];
21561 [label="Debug.Assert(_moduleReferences != null); 800440"];
21562 [label="Debug.Assert(_moduleReferences != null); 800441"];
21563 [label="AssertReferencesInitialized(); 800442"];
21564 [label="return _moduleReferences.Identities; 800443"];
21565 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 800444"];
21566 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 800445"];
21567 [label="result.SpecialType 800446"];
21568 [label="get\n            {\n                return _corTypeId;\n            } 800447"];
21569 [label="Debug.Assert(result.SpecialType == specialType); 800448"];
21570 [label="comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym)) 800449"];
21571 [label="param Construct(ImmutableArray<TypeSymbol> typeArguments) 800450"];
21572 [label="param Construct(this) 800451"];
21573 [label="return ConstructWithoutModifiers(typeArguments, false); 800452"];
21574 [label="return ConstructWithoutModifiers(typeArguments, false); 800453"];
21575 [label="ConstructWithoutModifiers(typeArguments, false) 800454"];
21576 [label="param ConstructWithoutModifiers(ImmutableArray<TypeSymbol> typeArguments) 800455"];
21577 [label="param ConstructWithoutModifiers(bool unbound) 800456"];
21578 [label="param ConstructWithoutModifiers(this) 800457"];
21579 [label="ImmutableArray<TypeWithAnnotations> modifiedArguments; 800458"];
21580 [label="modifiedArguments 800459"];
21581 [label="if (typeArguments.IsDefault)\n            {\n                modifiedArguments = default(ImmutableArray<TypeWithAnnotations>);\n            }\n            else\n            {\n                modifiedArguments = typeArguments.SelectAsArray(t => TypeWithAnnotations.Create(t));\n            } 800460"];
21582 [label="modifiedArguments = typeArguments.SelectAsArray(t => TypeWithAnnotations.Create(t)); 800461"];
21583 [label="modifiedArguments = typeArguments.SelectAsArray(t => TypeWithAnnotations.Create(t)); 800462"];
21584 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 800463"];
21585 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 800464"];
21586 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 800465"];
21587 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 800466"];
21588 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 800467"];
21589 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 800468"];
21590 [label="typeSymbol.IsNullableType() 800469"];
21591 [label="param IsNullableType(this TypeSymbol type) 800470"];
21592 [label="type.OriginalDefinition 800471"];
21593 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 800472"];
21594 [label="OriginalTypeSymbolDefinition 800473"];
21595 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800474"];
21596 [label="this.OriginalDefinition 800475"];
21597 [label="get\n            {\n                return this;\n            } 800476"];
21598 [label="return this.OriginalDefinition; 800477"];
21599 [label="return OriginalTypeSymbolDefinition; 800478"];
21600 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 800479"];
21601 [label="type.OriginalDefinition.SpecialType 800480"];
21602 [label="get\n            {\n                return _corTypeId;\n            } 800481"];
21603 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 800482"];
21604 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 800483"];
21605 [label="Extensions.Create(customModifiers) 800484"];
21606 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 800485"];
21607 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 800486"];
21608 [label="return Default; 800487"];
21609 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 800488"];
21610 [label="param TypeWithAnnotations(Extensions extensions) 800489"];
21611 [label="var a1 = defaultType is null; 800490"];
21612 [label="!a1 800491"];
21613 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 800492"];
21614 [label="defaultType.IsNullableType() 800493"];
21615 [label="param IsNullableType(this TypeSymbol type) 800494"];
21616 [label="type.OriginalDefinition 800495"];
21617 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 800496"];
21618 [label="OriginalTypeSymbolDefinition 800497"];
21619 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800498"];
21620 [label="this.OriginalDefinition 800499"];
21621 [label="get\n            {\n                return this;\n            } 800500"];
21622 [label="return this.OriginalDefinition; 800501"];
21623 [label="return OriginalTypeSymbolDefinition; 800502"];
21624 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 800503"];
21625 [label="type.OriginalDefinition.SpecialType 800504"];
21626 [label="get\n            {\n                return _corTypeId;\n            } 800505"];
21627 [label="return _corTypeId; 800506"];
21628 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 800507"];
21629 [label="Debug.Assert(a1 || a2 != true || a3); 800508"];
21630 [label="Debug.Assert(a1 || a2 != true || a3); 800509"];
21631 [label="Debug.Assert(extensions != null); 800510"];
21632 [label="Debug.Assert(extensions != null); 800511"];
21633 [label="NullableAnnotation 800512"];
21634 [label="_extensions 800513"];
21635 [label="modifiedArguments = typeArguments.SelectAsArray(t => TypeWithAnnotations.Create(t)); 800514"];
21636 [label="return Construct(modifiedArguments, unbound); 800515"];
21637 [label="return Construct(modifiedArguments, unbound); 800516"];
21638 [label="Construct(modifiedArguments, unbound) 800517"];
21639 [label="param Construct(ImmutableArray<TypeWithAnnotations> typeArguments) 800518"];
21640 [label="param Construct(bool unbound) 800519"];
21641 [label="param Construct(this) 800520"];
21642 [label="if (!ReferenceEquals(this, ConstructedFrom))\n            {\n                throw new InvalidOperationException(CSharpResources.CannotCreateConstructedFromConstructed);\n            } 800521"];
21643 [label="ConstructedFrom 800522"];
21644 [label="get\n            {\n                return this;\n            } 800523"];
21645 [label="return this; 800524"];
21646 [label="if (!ReferenceEquals(this, ConstructedFrom))\n            {\n                throw new InvalidOperationException(CSharpResources.CannotCreateConstructedFromConstructed);\n            } 800525"];
21647 [label="this.Arity 800526"];
21648 [label="get\n                {\n                    return _arity;\n                } 800527"];
21649 [label="return _arity; 800528"];
21650 [label="if (this.Arity == 0)\n            {\n                throw new InvalidOperationException(CSharpResources.CannotCreateConstructedFromNongeneric);\n            } 800529"];
21651 [label="if (this.Arity == 0)\n            {\n                throw new InvalidOperationException(CSharpResources.CannotCreateConstructedFromNongeneric);\n            } 800530"];
21652 [label="if (typeArguments.IsDefault)\n            {\n                throw new ArgumentNullException(nameof(typeArguments));\n            } 800531"];
21653 [label="if (typeArguments.Any(TypeWithAnnotationsIsNullFunction))\n            {\n                throw new ArgumentException(CSharpResources.TypeArgumentCannotBeNull, nameof(typeArguments));\n            } 800532"];
21654 [label="if (typeArguments.Any(TypeWithAnnotationsIsNullFunction))\n            {\n                throw new ArgumentException(CSharpResources.TypeArgumentCannotBeNull, nameof(typeArguments));\n            } 800533"];
21655 [label="if (typeArguments.Any(TypeWithAnnotationsIsNullFunction))\n            {\n                throw new ArgumentException(CSharpResources.TypeArgumentCannotBeNull, nameof(typeArguments));\n            } 800534"];
21656 [label="if (typeArguments.Any(TypeWithAnnotationsIsNullFunction))\n            {\n                throw new ArgumentException(CSharpResources.TypeArgumentCannotBeNull, nameof(typeArguments));\n            } 800535"];
21657 [label="=> !(DefaultType is null) 800536"];
21658 [label="DefaultType is null 800537"];
21659 [label="!(DefaultType is null) 800538"];
21660 [label="this.Arity 800539"];
21661 [label="get\n                {\n                    return _arity;\n                } 800540"];
21662 [label="return _arity; 800541"];
21663 [label="if (typeArguments.Length != this.Arity)\n            {\n                throw new ArgumentException(CSharpResources.WrongNumberOfTypeArguments, nameof(typeArguments));\n            } 800542"];
21664 [label="Debug.Assert(!unbound || typeArguments.All(TypeWithAnnotationsIsErrorType)); 800543"];
21665 [label="this.TypeParameters 800544"];
21666 [label="get\n                {\n                    EnsureTypeParametersAreLoaded();\n                    return _lazyTypeParameters;\n                } 800545"];
21667 [label="EnsureTypeParametersAreLoaded() 800546"];
21668 [label="param EnsureTypeParametersAreLoaded(this) 800547"];
21669 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var moduleSymbol = ContainingPEModule;\n\n                    // If this is a nested type generic parameters in metadata include generic parameters of the outer types.\n                    int firstIndex = _genericParameterHandles.Count - _arity;\n\n                    TypeParameterSymbol[] ownedParams = new TypeParameterSymbol[_arity];\n                    for (int i = 0; i < ownedParams.Length; i++)\n                    {\n                        ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]);\n                    }\n\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters,\n                        ImmutableArray.Create<TypeParameterSymbol>(ownedParams));\n                } 800548"];
21670 [label="ContainingPEModule 800549"];
21671 [label="s.Kind 800550"];
21672 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 800551"];
21673 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 800552"];
21674 [label="var moduleSymbol = ContainingPEModule; 800553"];
21675 [label="int firstIndex = _genericParameterHandles.Count - _arity; 800554"];
21676 [label="TypeParameterSymbol[] ownedParams = new TypeParameterSymbol[_arity]; 800555"];
21677 [label="for (int i = 0; i < ownedParams.Length; i++)\n                    {\n                        ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]);\n                    } 800556"];
21678 [label="for (int i = 0; i < ownedParams.Length; i++)\n                    {\n                        ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]);\n                    } 800557"];
21679 [label="ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]); 800558"];
21680 [label="ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]); 800559"];
21681 [label="ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]); 800560"];
21682 [label="ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]); 800561"];
21683 [label="ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]); 800562"];
21684 [label="new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]) 800563"];
21685 [label="param PETypeParameterSymbol(PEModuleSymbol moduleSymbol) 800564"];
21686 [label="param PETypeParameterSymbol(PENamedTypeSymbol definingNamedType) 800565"];
21687 [label="param PETypeParameterSymbol(ushort ordinal) 800566"];
21688 [label="param PETypeParameterSymbol(GenericParameterHandle handle) 800567"];
21689 [label="param PETypeParameterSymbol(this) 800568"];
21690 [label="moduleSymbol 800569"];
21691 [label="definingNamedType 800570"];
21692 [label="ordinal 800571"];
21693 [label="handle 800572"];
21694 [label="param PETypeParameterSymbol(this) 800573"];
21695 [label="param PETypeParameterSymbol(PEModuleSymbol moduleSymbol) 800574"];
21696 [label="param PETypeParameterSymbol(Symbol definingSymbol) 800575"];
21697 [label="param PETypeParameterSymbol(ushort ordinal) 800576"];
21698 [label="param PETypeParameterSymbol(GenericParameterHandle handle) 800577"];
21699 [label="param PETypeParameterSymbol(this) 800578"];
21700 [label="param PETypeParameterSymbol(this) 800579"];
21701 [label="param TypeParameterSymbol(this) 800580"];
21702 [label="param TypeParameterSymbol(this) 800581"];
21703 [label="_lazyAdapter 800582"];
21704 [label="_containingSymbol 800583"];
21705 [label="_name 800584"];
21706 [label="_ordinal 800585"];
21707 [label="_lazyConstraintsUseSiteErrorInfo = CSDiagnosticInfo.EmptyErrorInfo 800586"];
21708 [label="_flags 800587"];
21709 [label="_lazyHasIsUnmanagedConstraint 800588"];
21710 [label="new TypeParameterBounds() 800589"];
21711 [label="param TypeParameterBounds(this) 800590"];
21712 [label="EffectiveBaseClass 800591"];
21713 [label="DeducedBaseType 800592"];
21714 [label="EffectiveBaseClass = null!; 800593"];
21715 [label="EffectiveBaseClass 800594"];
21716 [label="DeducedBaseType = null!; 800595"];
21717 [label="DeducedBaseType 800596"];
21718 [label="Unset = new TypeParameterBounds() 800597"];
21719 [label="_lazyBounds = TypeParameterBounds.Unset 800598"];
21720 [label="Debug.Assert((object)moduleSymbol != null); 800599"];
21721 [label="Debug.Assert((object)moduleSymbol != null); 800600"];
21722 [label="Debug.Assert((object)definingSymbol != null); 800601"];
21723 [label="Debug.Assert((object)definingSymbol != null); 800602"];
21724 [label="Debug.Assert(ordinal >= 0); 800603"];
21725 [label="Debug.Assert(ordinal >= 0); 800604"];
21726 [label="Debug.Assert(!handle.IsNil); 800605"];
21727 [label="_containingSymbol 800606"];
21728 [label="GenericParameterAttributes flags = 0; 800607"];
21729 [label="moduleSymbol.Module 800608"];
21730 [label="get\n            {\n                return _module;\n            } 800609"];
21731 [label="return _module; 800610"];
21732 [label="moduleSymbol.Module.GetGenericParamPropsOrThrow(handle, out _name, out flags); 800611"];
21733 [label="moduleSymbol.Module.GetGenericParamPropsOrThrow(handle, out _name, out flags); 800612"];
21734 [label="moduleSymbol.Module.GetGenericParamPropsOrThrow(handle, out _name, out flags); 800613"];
21735 [label="moduleSymbol.Module.GetGenericParamPropsOrThrow(handle, out _name, out flags); 800614"];
21736 [label="moduleSymbol.Module.GetGenericParamPropsOrThrow(handle, out _name, out flags); 800615"];
21737 [label="_flags = ((flags & GenericParameterAttributes.NotNullableValueTypeConstraint) == 0) ? flags : (flags & ~GenericParameterAttributes.DefaultConstructorConstraint); 800616"];
21738 [label="_flags = ((flags & GenericParameterAttributes.NotNullableValueTypeConstraint) == 0) ? flags : (flags & ~GenericParameterAttributes.DefaultConstructorConstraint); 800617"];
21739 [label="((flags & GenericParameterAttributes.NotNullableValueTypeConstraint) == 0) 800618"];
21740 [label="_flags 800619"];
21741 [label="_ordinal 800620"];
21742 [label="_handle 800621"];
21743 [label="ownedParams[i] 800622"];
21744 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters,\n                        ImmutableArray.Create<TypeParameterSymbol>(ownedParams)); 800623"];
21745 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters,\n                        ImmutableArray.Create<TypeParameterSymbol>(ownedParams)); 800624"];
21746 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters,\n                        ImmutableArray.Create<TypeParameterSymbol>(ownedParams)); 800625"];
21747 [label="EnsureTypeParametersAreLoaded(); 800626"];
21748 [label="return _lazyTypeParameters; 800627"];
21749 [label="if (ConstructedNamedTypeSymbol.TypeParametersMatchTypeArguments(this.TypeParameters, typeArguments))\n            {\n                return this;\n            } 800628"];
21750 [label="if (ConstructedNamedTypeSymbol.TypeParametersMatchTypeArguments(this.TypeParameters, typeArguments))\n            {\n                return this;\n            } 800629"];
21751 [label="ConstructedNamedTypeSymbol.TypeParametersMatchTypeArguments(this.TypeParameters, typeArguments) 800630"];
21752 [label="param TypeParametersMatchTypeArguments(ImmutableArray<TypeParameterSymbol> typeParameters) 800631"];
21753 [label="param TypeParametersMatchTypeArguments(ImmutableArray<TypeWithAnnotations> typeArguments) 800632"];
21754 [label="int n = typeParameters.Length; 800633"];
21755 [label="Debug.Assert(typeArguments.Length == n); 800634"];
21756 [label="Debug.Assert(typeArguments.Length > 0); 800635"];
21757 [label="Debug.Assert(typeArguments.Length > 0); 800636"];
21758 [label="for (int i = 0; i < n; i++)\n            {\n                if (!typeArguments[i].Is(typeParameters[i]))\n                {\n                    return false;\n                }\n            } 800637"];
21759 [label="for (int i = 0; i < n; i++)\n            {\n                if (!typeArguments[i].Is(typeParameters[i]))\n                {\n                    return false;\n                }\n            } 800638"];
21760 [label="if (!typeArguments[i].Is(typeParameters[i]))\n                {\n                    return false;\n                } 800639"];
21761 [label="typeArguments[i].Is(typeParameters[i]) 800640"];
21762 [label="param Is(TypeParameterSymbol other) 800641"];
21763 [label="param Is(this) 800642"];
21764 [label="1 800643"];
21765 [label="NotAnnotatedAttributeValue = 1 800644"];
21766 [label="2 800645"];
21767 [label="AnnotatedAttributeValue = 2 800646"];
21768 [label="0 800647"];
21769 [label="ObliviousAttributeValue = 0 800648"];
21770 [label="return NullableAnnotation.IsOblivious() && ((object)DefaultType == other) &&\n                   CustomModifiers.IsEmpty; 800649"];
21771 [label="NullableAnnotation.IsOblivious() 800650"];
21772 [label="param IsOblivious(this NullableAnnotation annotation) 800651"];
21773 [label="annotation == NullableAnnotation.Oblivious 800652"];
21774 [label="return NullableAnnotation.IsOblivious() && ((object)DefaultType == other) &&\n                   CustomModifiers.IsEmpty; 800653"];
21775 [label="return NullableAnnotation.IsOblivious() && ((object)DefaultType == other) &&\n                   CustomModifiers.IsEmpty; 800654"];
21776 [label="return false; 800655"];
21777 [label="return this.ConstructCore(typeArguments, unbound); 800656"];
21778 [label="return this.ConstructCore(typeArguments, unbound); 800657"];
21779 [label="this.ConstructCore(typeArguments, unbound) 800658"];
21780 [label="param ConstructCore(ImmutableArray<TypeWithAnnotations> typeArguments) 800659"];
21781 [label="param ConstructCore(bool unbound) 800660"];
21782 [label="param ConstructCore(this) 800661"];
21783 [label="return new ConstructedNamedTypeSymbol(this, typeArguments, unbound); 800662"];
21784 [label="return new ConstructedNamedTypeSymbol(this, typeArguments, unbound); 800663"];
21785 [label="return new ConstructedNamedTypeSymbol(this, typeArguments, unbound); 800664"];
21786 [label="return new ConstructedNamedTypeSymbol(this, typeArguments, unbound); 800665"];
21787 [label="new ConstructedNamedTypeSymbol(this, typeArguments, unbound) 800666"];
21788 [label="param ConstructedNamedTypeSymbol(NamedTypeSymbol constructedFrom) 800667"];
21789 [label="param ConstructedNamedTypeSymbol(ImmutableArray<TypeWithAnnotations> typeArgumentsWithAnnotations) 800668"];
21790 [label="param ConstructedNamedTypeSymbol(bool unbound = false) 800669"];
21791 [label="param ConstructedNamedTypeSymbol(TupleExtraData tupleData = null) 800670"];
21792 [label="param ConstructedNamedTypeSymbol(this) 800671"];
21793 [label="constructedFrom.ContainingSymbol 800672"];
21794 [label="get\n            {\n                return _container;\n            } 800673"];
21795 [label="return _container; 800674"];
21796 [label="constructedFrom.ContainingType 800675"];
21797 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 800676"];
21798 [label="return _container as NamedTypeSymbol; 800677"];
21799 [label="constructedFrom.OriginalDefinition 800678"];
21800 [label="get\n            {\n                return this;\n            } 800679"];
21801 [label="constructedFrom.OriginalDefinition.TypeParameters 800680"];
21802 [label="get\n                {\n                    EnsureTypeParametersAreLoaded();\n                    return _lazyTypeParameters;\n                } 800681"];
21803 [label="EnsureTypeParametersAreLoaded() 800682"];
21804 [label="param EnsureTypeParametersAreLoaded(this) 800683"];
21805 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var moduleSymbol = ContainingPEModule;\n\n                    // If this is a nested type generic parameters in metadata include generic parameters of the outer types.\n                    int firstIndex = _genericParameterHandles.Count - _arity;\n\n                    TypeParameterSymbol[] ownedParams = new TypeParameterSymbol[_arity];\n                    for (int i = 0; i < ownedParams.Length; i++)\n                    {\n                        ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]);\n                    }\n\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters,\n                        ImmutableArray.Create<TypeParameterSymbol>(ownedParams));\n                } 800684"];
21806 [label="EnsureTypeParametersAreLoaded(); 800685"];
21807 [label="return _lazyTypeParameters; 800686"];
21808 [label="t => t.Type 800687"];
21809 [label="AsTypeSymbol = t => t.Type 800688"];
21810 [label="ReferenceEqualityComparer.Instance 800689"];
21811 [label="new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance) 800690"];
21812 [label="s_emptyDictionary =\n            new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance) 800691"];
21813 [label="new TypeMap() 800692"];
21814 [label="param TypeMap(this) 800693"];
21815 [label="s_emptyDictionary 800694"];
21816 [label="param AbstractTypeParameterMap(SmallDictionary<TypeParameterSymbol, TypeWithAnnotations> mapping) 800695"];
21817 [label="param AbstractTypeParameterMap(this) 800696"];
21818 [label="param AbstractTypeMap(this) 800697"];
21819 [label="Mapping 800698"];
21820 [label="this.Mapping 800699"];
21821 [label="Debug.Assert(s_emptyDictionary.IsEmpty()); 800700"];
21822 [label="s_emptyTypeMap = new TypeMap() 800701"];
21823 [label="typeArgumentsWithAnnotations 800702"];
21824 [label="new TypeMap(constructedFrom.ContainingType, constructedFrom.OriginalDefinition.TypeParameters, typeArgumentsWithAnnotations) 800703"];
21825 [label="param TypeMap(NamedTypeSymbol containingType) 800704"];
21826 [label="param TypeMap(ImmutableArray<TypeParameterSymbol> typeParameters) 800705"];
21827 [label="param TypeMap(ImmutableArray<TypeWithAnnotations> typeArguments) 800706"];
21828 [label="param TypeMap(this) 800707"];
21829 [label="containingType 800708"];
21830 [label="ForType(containingType) 800709"];
21831 [label="param ForType(NamedTypeSymbol containingType) 800710"];
21832 [label="var substituted = containingType as SubstitutedNamedTypeSymbol; 800711"];
21833 [label="return (object)substituted != null ?\n                new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(substituted.TypeSubstitution.Mapping, ReferenceEqualityComparer.Instance) :\n                new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance); 800712"];
21834 [label="return (object)substituted != null ?\n                new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(substituted.TypeSubstitution.Mapping, ReferenceEqualityComparer.Instance) :\n                new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance); 800713"];
21835 [label="(object)substituted != null 800714"];
21836 [label="return (object)substituted != null ?\n                new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(substituted.TypeSubstitution.Mapping, ReferenceEqualityComparer.Instance) :\n                new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance); 800715"];
21837 [label="param AbstractTypeParameterMap(SmallDictionary<TypeParameterSymbol, TypeWithAnnotations> mapping) 800716"];
21838 [label="param AbstractTypeParameterMap(this) 800717"];
21839 [label="param AbstractTypeMap(this) 800718"];
21840 [label="Mapping 800719"];
21841 [label="this.Mapping 800720"];
21842 [label="for (int i = 0; i < typeParameters.Length; i++)\n            {\n                TypeParameterSymbol tp = typeParameters[i];\n                TypeWithAnnotations ta = typeArguments[i];\n                if (!ta.Is(tp))\n                {\n                    Mapping.Add(tp, ta);\n                }\n            } 800721"];
21843 [label="for (int i = 0; i < typeParameters.Length; i++)\n            {\n                TypeParameterSymbol tp = typeParameters[i];\n                TypeWithAnnotations ta = typeArguments[i];\n                if (!ta.Is(tp))\n                {\n                    Mapping.Add(tp, ta);\n                }\n            } 800722"];
21844 [label="TypeParameterSymbol tp = typeParameters[i]; 800723"];
21845 [label="TypeWithAnnotations ta = typeArguments[i]; 800724"];
21846 [label="if (!ta.Is(tp))\n                {\n                    Mapping.Add(tp, ta);\n                } 800725"];
21847 [label="ta.Is(tp) 800726"];
21848 [label="param Is(TypeParameterSymbol other) 800727"];
21849 [label="param Is(this) 800728"];
21850 [label="return NullableAnnotation.IsOblivious() && ((object)DefaultType == other) &&\n                   CustomModifiers.IsEmpty; 800729"];
21851 [label="NullableAnnotation.IsOblivious() 800730"];
21852 [label="param IsOblivious(this NullableAnnotation annotation) 800731"];
21853 [label="annotation == NullableAnnotation.Oblivious 800732"];
21854 [label="return NullableAnnotation.IsOblivious() && ((object)DefaultType == other) &&\n                   CustomModifiers.IsEmpty; 800733"];
21855 [label="return NullableAnnotation.IsOblivious() && ((object)DefaultType == other) &&\n                   CustomModifiers.IsEmpty; 800734"];
21856 [label="Mapping.Add(tp, ta); 800735"];
21857 [label="Mapping.Add(tp, ta); 800736"];
21858 [label="Mapping.Add(tp, ta); 800737"];
21859 [label="constructedFrom.OriginalDefinition 800738"];
21860 [label="get\n            {\n                return this;\n            } 800739"];
21861 [label="s_symbolAsMemberFunc = SymbolExtensions.SymbolAsMember 800740"];
21862 [label="constructedFrom 800741"];
21863 [label="unbound 800742"];
21864 [label="tupleData 800743"];
21865 [label="param ConstructedNamedTypeSymbol(this) 800744"];
21866 [label="param SubstitutedNamedTypeSymbol(Symbol newContainer) 800745"];
21867 [label="param SubstitutedNamedTypeSymbol(TypeMap map) 800746"];
21868 [label="param SubstitutedNamedTypeSymbol(NamedTypeSymbol originalDefinition) 800747"];
21869 [label="param SubstitutedNamedTypeSymbol(NamedTypeSymbol constructedFrom = null) 800748"];
21870 [label="param SubstitutedNamedTypeSymbol(bool unbound = false) 800749"];
21871 [label="param SubstitutedNamedTypeSymbol(TupleExtraData tupleData = null) 800750"];
21872 [label="param SubstitutedNamedTypeSymbol(this) 800751"];
21873 [label="originalDefinition 800752"];
21874 [label="tupleData 800753"];
21875 [label="param SubstitutedNamedTypeSymbol(this) 800754"];
21876 [label="param WrappedNamedTypeSymbol(NamedTypeSymbol underlyingType) 800755"];
21877 [label="param WrappedNamedTypeSymbol(TupleExtraData tupleData) 800756"];
21878 [label="param WrappedNamedTypeSymbol(this) 800757"];
21879 [label="tupleData 800758"];
21880 [label="param WrappedNamedTypeSymbol(this) 800759"];
21881 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 800760"];
21882 [label="_lazyTupleData 800761"];
21883 [label="_underlyingType 800762"];
21884 [label="Debug.Assert((object)underlyingType != null); 800763"];
21885 [label="Debug.Assert((object)underlyingType != null); 800764"];
21886 [label="_underlyingType 800765"];
21887 [label="_unbound 800766"];
21888 [label="_inputMap 800767"];
21889 [label="_newContainer 800768"];
21890 [label="_lazyMap 800769"];
21891 [label="_hashCode 800770"];
21892 [label="_lazyMembersByNameCache 800771"];
21893 [label="originalDefinition.IsDefinition 800772"];
21894 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 800773"];
21895 [label="OriginalDefinition 800774"];
21896 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 800775"];
21897 [label="OriginalSymbolDefinition 800776"];
21898 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 800777"];
21899 [label="this.OriginalTypeSymbolDefinition 800778"];
21900 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800779"];
21901 [label="this.OriginalDefinition 800780"];
21902 [label="get\n            {\n                return this;\n            } 800781"];
21903 [label="return this.OriginalDefinition; 800782"];
21904 [label="return this.OriginalTypeSymbolDefinition; 800783"];
21905 [label="return OriginalSymbolDefinition; 800784"];
21906 [label="return (object)this == (object)OriginalDefinition; 800785"];
21907 [label="Debug.Assert(originalDefinition.IsDefinition); 800786"];
21908 [label="Debug.Assert(!originalDefinition.IsErrorType()); 800787"];
21909 [label="originalDefinition.IsErrorType() 800788"];
21910 [label="param IsErrorType(this TypeSymbol type) 800789"];
21911 [label="RoslynDebug.Assert((object)type != null); 800790"];
21912 [label="RoslynDebug.Assert((object)type != null); 800791"];
21913 [label="type.Kind 800792"];
21914 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 800793"];
21915 [label="return type.Kind == SymbolKind.ErrorType; 800794"];
21916 [label="Debug.Assert(!originalDefinition.IsErrorType()); 800795"];
21917 [label="_newContainer 800796"];
21918 [label="_inputMap 800797"];
21919 [label="_unbound 800798"];
21920 [label="if ((object)constructedFrom != null)\n            {\n                Debug.Assert(ReferenceEquals(constructedFrom.ConstructedFrom, constructedFrom));\n                _lazyTypeParameters = constructedFrom.TypeParameters;\n                _lazyMap = map;\n            } 800799"];
21921 [label="if ((object)constructedFrom != null)\n            {\n                Debug.Assert(ReferenceEquals(constructedFrom.ConstructedFrom, constructedFrom));\n                _lazyTypeParameters = constructedFrom.TypeParameters;\n                _lazyMap = map;\n            } 800800"];
21922 [label="constructedFrom.ConstructedFrom 800801"];
21923 [label="get\n            {\n                return this;\n            } 800802"];
21924 [label="return this; 800803"];
21925 [label="Debug.Assert(ReferenceEquals(constructedFrom.ConstructedFrom, constructedFrom)); 800804"];
21926 [label="Debug.Assert(ReferenceEquals(constructedFrom.ConstructedFrom, constructedFrom)); 800805"];
21927 [label="constructedFrom.TypeParameters 800806"];
21928 [label="get\n                {\n                    EnsureTypeParametersAreLoaded();\n                    return _lazyTypeParameters;\n                } 800807"];
21929 [label="EnsureTypeParametersAreLoaded() 800808"];
21930 [label="param EnsureTypeParametersAreLoaded(this) 800809"];
21931 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var moduleSymbol = ContainingPEModule;\n\n                    // If this is a nested type generic parameters in metadata include generic parameters of the outer types.\n                    int firstIndex = _genericParameterHandles.Count - _arity;\n\n                    TypeParameterSymbol[] ownedParams = new TypeParameterSymbol[_arity];\n                    for (int i = 0; i < ownedParams.Length; i++)\n                    {\n                        ownedParams[i] = new PETypeParameterSymbol(moduleSymbol, this, (ushort)i, _genericParameterHandles[firstIndex + i]);\n                    }\n\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters,\n                        ImmutableArray.Create<TypeParameterSymbol>(ownedParams));\n                } 800810"];
21932 [label="EnsureTypeParametersAreLoaded(); 800811"];
21933 [label="return _lazyTypeParameters; 800812"];
21934 [label="_lazyTypeParameters = constructedFrom.TypeParameters; 800813"];
21935 [label="_lazyTypeParameters 800814"];
21936 [label="_lazyMap 800815"];
21937 [label="_constructedFrom 800816"];
21938 [label="_typeArgumentsWithAnnotations 800817"];
21939 [label="_constructedFrom 800818"];
21940 [label="constructedFrom.Arity 800819"];
21941 [label="get\n                {\n                    return _arity;\n                } 800820"];
21942 [label="return _arity; 800821"];
21943 [label="Debug.Assert(constructedFrom.Arity == typeArgumentsWithAnnotations.Length); 800822"];
21944 [label="constructedFrom.Arity 800823"];
21945 [label="get\n                {\n                    return _arity;\n                } 800824"];
21946 [label="return _arity; 800825"];
21947 [label="Debug.Assert(constructedFrom.Arity != 0); 800826"];
21948 [label="Debug.Assert(constructedFrom.Arity != 0); 800827"];
21949 [label="return this.ConstructCore(typeArguments, unbound); 800828"];
21950 [label="return Construct(modifiedArguments, unbound); 800829"];
21951 [label="return ConstructWithoutModifiers(typeArguments, false); 800830"];
21952 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800831"];
21953 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800832"];
21954 [label="Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))) 800833"];
21955 [label="param Create(TypeSymbol typeSymbol) 800834"];
21956 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 800835"];
21957 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 800836"];
21958 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 800837"];
21959 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 800838"];
21960 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 800839"];
21961 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 800840"];
21962 [label="typeSymbol.IsNullableType() 800841"];
21963 [label="param IsNullableType(this TypeSymbol type) 800842"];
21964 [label="type.OriginalDefinition 800843"];
21965 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 800844"];
21966 [label="OriginalTypeSymbolDefinition 800845"];
21967 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800846"];
21968 [label="this.OriginalDefinition 800847"];
21969 [label="get { return _underlyingType; } 800848"];
21970 [label="return _underlyingType; 800849"];
21971 [label="return this.OriginalDefinition; 800850"];
21972 [label="return OriginalTypeSymbolDefinition; 800851"];
21973 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 800852"];
21974 [label="type.OriginalDefinition.SpecialType 800853"];
21975 [label="get\n            {\n                return _corTypeId;\n            } 800854"];
21976 [label="return _corTypeId; 800855"];
21977 [label="nullableAnnotation = NullableAnnotation.Annotated; 800856"];
21978 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 800857"];
21979 [label="Extensions.Create(customModifiers) 800858"];
21980 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 800859"];
21981 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 800860"];
21982 [label="return Default; 800861"];
21983 [label="param TypeWithAnnotations(Extensions extensions) 800862"];
21984 [label="var a1 = defaultType is null; 800863"];
21985 [label="!a1 800864"];
21986 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 800865"];
21987 [label="defaultType.IsNullableType() 800866"];
21988 [label="param IsNullableType(this TypeSymbol type) 800867"];
21989 [label="type.OriginalDefinition 800868"];
21990 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 800869"];
21991 [label="OriginalTypeSymbolDefinition 800870"];
21992 [label="get\n            {\n                return this.OriginalDefinition;\n            } 800871"];
21993 [label="this.OriginalDefinition 800872"];
21994 [label="get { return _underlyingType; } 800873"];
21995 [label="return _underlyingType; 800874"];
21996 [label="return this.OriginalDefinition; 800875"];
21997 [label="return OriginalTypeSymbolDefinition; 800876"];
21998 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 800877"];
21999 [label="type.OriginalDefinition.SpecialType 800878"];
22000 [label="get\n            {\n                return _corTypeId;\n            } 800879"];
22001 [label="return _corTypeId; 800880"];
22002 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 800881"];
22003 [label="Debug.Assert(a1 || a2 != true || a3); 800882"];
22004 [label="Debug.Assert(a1 || a2 != true || a3); 800883"];
22005 [label="Debug.Assert(a1 || a2 != true || a3); 800884"];
22006 [label="Debug.Assert(extensions != null); 800885"];
22007 [label="Debug.Assert(extensions != null); 800886"];
22008 [label="_extensions 800887"];
22009 [label="TypeWithAnnotations makeNullableT(CSharpCompilation comp, TypeSymbol typeSym)\n                => Create(comp.GetSpecialType(SpecialType.System_Nullable_T).Construct(ImmutableArray.Create(typeSym))); 800888"];
22010 [label="return makeNullableT(compilation, typeSymbol); 800889"];
22011 [label="TypeWithAnnotations constructedType = typeArgument.SetIsAnnotated(Compilation); 800890"];
22012 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument); 800891"];
22013 [label="nullableSyntax.QuestionToken 800892"];
22014 [label="=> true 800893"];
22015 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument); 800894"];
22016 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument); 800895"];
22017 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument); 800896"];
22018 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument); 800897"];
22019 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument) 800898"];
22020 [label="void reportNullableReferenceTypesIfNeeded(SyntaxToken questionToken, DiagnosticBag diagnostics, TypeWithAnnotations typeArgument = default)\n            {\n                bool isNullableEnabled = AreNullableAnnotationsEnabled(questionToken);\n                bool isGeneratedCode = IsGeneratedCode(questionToken);\n                var location = questionToken.GetLocation();\n\n                // Inside a method body or other executable code, we can question IsValueType without causing cycles.\n                if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n            } 800899"];
22021 [label="void reportNullableReferenceTypesIfNeeded(SyntaxToken questionToken, DiagnosticBag diagnostics, TypeWithAnnotations typeArgument = default)\n            {\n                bool isNullableEnabled = AreNullableAnnotationsEnabled(questionToken);\n                bool isGeneratedCode = IsGeneratedCode(questionToken);\n                var location = questionToken.GetLocation();\n\n                // Inside a method body or other executable code, we can question IsValueType without causing cycles.\n                if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n            } 800900"];
22022 [label="void reportNullableReferenceTypesIfNeeded(SyntaxToken questionToken, DiagnosticBag diagnostics, TypeWithAnnotations typeArgument = default)\n            {\n                bool isNullableEnabled = AreNullableAnnotationsEnabled(questionToken);\n                bool isGeneratedCode = IsGeneratedCode(questionToken);\n                var location = questionToken.GetLocation();\n\n                // Inside a method body or other executable code, we can question IsValueType without causing cycles.\n                if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n            } 800901"];
22023 [label="void reportNullableReferenceTypesIfNeeded(SyntaxToken questionToken, DiagnosticBag diagnostics, TypeWithAnnotations typeArgument = default)\n            {\n                bool isNullableEnabled = AreNullableAnnotationsEnabled(questionToken);\n                bool isGeneratedCode = IsGeneratedCode(questionToken);\n                var location = questionToken.GetLocation();\n\n                // Inside a method body or other executable code, we can question IsValueType without causing cycles.\n                if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n            } 800902"];
22024 [label="bool isNullableEnabled = AreNullableAnnotationsEnabled(questionToken); 800903"];
22025 [label="AreNullableAnnotationsEnabled(questionToken) 800904"];
22026 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 800905"];
22027 [label="param AreNullableAnnotationsEnabled(this) 800906"];
22028 [label="RoslynDebug.Assert(token.SyntaxTree is object); 800907"];
22029 [label="Debug.Assert(result != null); 800908"];
22030 [label="Debug.Assert(result != null); 800909"];
22031 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 800910"];
22032 [label="Debug.Assert(result != null); 800911"];
22033 [label="Debug.Assert(result != null); 800912"];
22034 [label="csTree.GetNullableContextState(position) 800913"];
22035 [label="GetNullableContextStateMap() 800914"];
22036 [label="GetNullableContextStateMap().GetContextState(position) 800915"];
22037 [label="GetContextStateIndex(position) 800916"];
22038 [label="if (index < 0)\n            {\n                // If no exact match, BinarySearch returns the complement\n                // of the index of the next higher value.\n                index = ~index - 1;\n            } 800917"];
22039 [label="Debug.Assert(index >= -1); 800918"];
22040 [label="Debug.Assert(index >= -1); 800919"];
22041 [label="Debug.Assert(index < _contexts.Length); 800920"];
22042 [label="if (index >= 0)\n            {\n                Debug.Assert(_contexts[index].Position <= position);\n                Debug.Assert(index == _contexts.Length - 1 || position < _contexts[index + 1].Position);\n            } 800921"];
22043 [label="if (index >= 0)\n            {\n                Debug.Assert(_contexts[index].Position <= position);\n                Debug.Assert(index == _contexts.Length - 1 || position < _contexts[index + 1].Position);\n            } 800922"];
22044 [label="return index < 0 ? GetContextForFileStart() : _contexts[index]; 800923"];
22045 [label="0 800924"];
22046 [label="position: 0 800925"];
22047 [label="warningsState: NullableContextState.State.Unknown 800926"];
22048 [label="param IsGeneratedCode(CancellationToken cancellationToken) 800927"];
22049 [label="bool isGeneratedCode = IsGeneratedCode(questionToken); 800928"];
22050 [label="IsGeneratedCode(questionToken) 800929"];
22051 [label="param IsGeneratedCode(SyntaxToken token) 800930"];
22052 [label="param IsGeneratedCode(this) 800931"];
22053 [label="var tree = (CSharpSyntaxTree)token.SyntaxTree!; 800932"];
22054 [label="token.SyntaxTree 800933"];
22055 [label="get\n            {\n                return this.SyntaxTree;\n            } 800934"];
22056 [label="Debug.Assert(result != null); 800935"];
22057 [label="Debug.Assert(result != null); 800936"];
22058 [label="Compilation.Options 800937"];
22059 [label="get\n            {\n                return _options;\n            } 800938"];
22060 [label="return tree.IsGeneratedCode(Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None); 800939"];
22061 [label="return tree.IsGeneratedCode(Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None); 800940"];
22062 [label="tree.IsGeneratedCode(Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None) 800941"];
22063 [label="param IsGeneratedCode(SyntaxTreeOptionsProvider? provider) 800942"];
22064 [label="param IsGeneratedCode(CancellationToken cancellationToken) 800943"];
22065 [label="param IsGeneratedCode(this) 800944"];
22066 [label="var location = questionToken.GetLocation(); 800945"];
22067 [label="var location = questionToken.GetLocation(); 800946"];
22068 [label="Debug.Assert(result != null); 800947"];
22069 [label="Debug.Assert(result != null); 800948"];
22070 [label="typeArgument.HasType 800949"];
22071 [label="=> !(DefaultType is null) 800950"];
22072 [label="DefaultType is null 800951"];
22073 [label="!(DefaultType is null) 800952"];
22074 [label="if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                } 800953"];
22075 [label="ShouldCheckConstraints 800954"];
22076 [label="get\n            {\n                return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks);\n            } 800955"];
22077 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 800956"];
22078 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 800957"];
22079 [label="this.Flags.Includes(BinderFlags.SuppressConstraintChecks) 800958"];
22080 [label="param Includes(this BinderFlags self) 800959"];
22081 [label="param Includes(BinderFlags other) 800960"];
22082 [label="if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                } 800961"];
22083 [label="if (typeArgument.HasType && !ShouldCheckConstraints)\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                }\n                else\n                {\n                    LazyMissingNonNullTypesContextDiagnosticInfo.ReportNullableReferenceTypesIfNeeded(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics);\n                } 800962"];
22084 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics); 800963"];
22085 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics); 800964"];
22086 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics); 800965"];
22087 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics); 800966"];
22088 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics); 800967"];
22089 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics) 800968"];
22090 [label="param AddAll(bool isNullableEnabled) 800969"];
22091 [label="param AddAll(bool isGeneratedCode) 800970"];
22092 [label="param AddAll(TypeWithAnnotations type) 800971"];
22093 [label="param AddAll(Location location) 800972"];
22094 [label="param AddAll(DiagnosticBag diagnostics) 800973"];
22095 [label="var rawInfos = ArrayBuilder<DiagnosticInfo>.GetInstance(); 800974"];
22096 [label="GetRawDiagnosticInfos(isNullableEnabled, isGeneratedCode, (CSharpSyntaxTree)location.SourceTree, rawInfos); 800975"];
22097 [label="GetRawDiagnosticInfos(isNullableEnabled, isGeneratedCode, (CSharpSyntaxTree)location.SourceTree, rawInfos); 800976"];
22098 [label="GetRawDiagnosticInfos(isNullableEnabled, isGeneratedCode, (CSharpSyntaxTree)location.SourceTree, rawInfos); 800977"];
22099 [label="GetRawDiagnosticInfos(isNullableEnabled, isGeneratedCode, (CSharpSyntaxTree)location.SourceTree, rawInfos); 800978"];
22100 [label="GetRawDiagnosticInfos(isNullableEnabled, isGeneratedCode, (CSharpSyntaxTree)location.SourceTree, rawInfos) 800979"];
22101 [label="param GetRawDiagnosticInfos(bool isNullableEnabled) 800980"];
22102 [label="param GetRawDiagnosticInfos(bool isGeneratedCode) 800981"];
22103 [label="param GetRawDiagnosticInfos(CSharpSyntaxTree tree) 800982"];
22104 [label="param GetRawDiagnosticInfos(ArrayBuilder<DiagnosticInfo> infos) 800983"];
22105 [label="const MessageID featureId = MessageID.IDS_FeatureNullableReferenceTypes; 800984"];
22106 [label="var info = featureId.GetFeatureAvailabilityDiagnosticInfo(tree.Options); 800985"];
22107 [label="tree.Options 800986"];
22108 [label="get\n                {\n                    return _options;\n                } 800987"];
22109 [label="var info = featureId.GetFeatureAvailabilityDiagnosticInfo(tree.Options); 800988"];
22110 [label="featureId.GetFeatureAvailabilityDiagnosticInfo(tree.Options) 800989"];
22111 [label="param GetFeatureAvailabilityDiagnosticInfo(this MessageID feature) 800990"];
22112 [label="param GetFeatureAvailabilityDiagnosticInfo(CSharpParseOptions options) 800991"];
22113 [label="feature 800992"];
22114 [label="options.IsFeatureEnabled(feature) 800993"];
22115 [label="param IsFeatureEnabled(MessageID feature) 800994"];
22116 [label="param IsFeatureEnabled(this) 800995"];
22117 [label="string? featureFlag = feature.RequiredFeature(); 800996"];
22118 [label="feature.RequiredFeature() 800997"];
22119 [label="param RequiredFeature(this MessageID feature) 800998"];
22120 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 800999"];
22121 [label="return null; 801000"];
22122 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 801001"];
22123 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 801002"];
22124 [label="LanguageVersion availableVersion = LanguageVersion; 801003"];
22125 [label="LanguageVersion requiredVersion = feature.RequiredVersion(); 801004"];
22126 [label="feature.RequiredVersion() 801005"];
22127 [label="param RequiredVersion(this MessageID feature) 801006"];
22128 [label="Debug.Assert(RequiredFeature(feature) == null); 801007"];
22129 [label="RequiredFeature(feature) 801008"];
22130 [label="param RequiredFeature(this MessageID feature) 801009"];
22131 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 801010"];
22132 [label="return null; 801011"];
22133 [label="Debug.Assert(RequiredFeature(feature) == null); 801012"];
22134 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 801013"];
22135 [label="return LanguageVersion.CSharp8; 801014"];
22136 [label="return availableVersion >= requiredVersion; 801015"];
22137 [label="null 801016"];
22138 [label="options.IsFeatureEnabled(feature) ? null : GetDisabledFeatureDiagnosticInfo(feature, options.LanguageVersion) 801017"];
22139 [label="if (info is object)\n            {\n                infos.Add(info);\n            } 801018"];
22140 [label="if (!isNullableEnabled && info?.Severity != DiagnosticSeverity.Error)\n            {\n                var code = isGeneratedCode\n                    ? ErrorCode.WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode\n                    : ErrorCode.WRN_MissingNonNullTypesContextForAnnotation;\n                infos.Add(new CSDiagnosticInfo(code));\n            } 801019"];
22141 [label="if (!isNullableEnabled && info?.Severity != DiagnosticSeverity.Error)\n            {\n                var code = isGeneratedCode\n                    ? ErrorCode.WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode\n                    : ErrorCode.WRN_MissingNonNullTypesContextForAnnotation;\n                infos.Add(new CSDiagnosticInfo(code));\n            } 801020"];
22142 [label="isGeneratedCode 801021"];
22143 [label="var code = isGeneratedCode\n                    ? ErrorCode.WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode\n                    : ErrorCode.WRN_MissingNonNullTypesContextForAnnotation; 801022"];
22144 [label="infos.Add(new CSDiagnosticInfo(code)); 801023"];
22145 [label="infos.Add(new CSDiagnosticInfo(code)); 801024"];
22146 [label="new CSDiagnosticInfo(code) 801025"];
22147 [label="param CSDiagnosticInfo(ErrorCode code) 801026"];
22148 [label="param CSDiagnosticInfo(this) 801027"];
22149 [label="param GetSeverity(this) 801028"];
22150 [label="return true; 801029"];
22151 [label="return DiagnosticSeverity.Warning; 801030"];
22152 [label="Debug.Assert(code != ErrorCode.ERR_InternalError); 801031"];
22153 [label="infos.Add(new CSDiagnosticInfo(code)); 801032"];
22154 [label="GetRawDiagnosticInfos(isNullableEnabled, isGeneratedCode, (CSharpSyntaxTree)location.SourceTree, rawInfos); 801033"];
22155 [label="foreach (var rawInfo in rawInfos)\n            {\n                diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location);\n            } 801034"];
22156 [label="foreach (var rawInfo in rawInfos)\n            {\n                diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location);\n            } 801035"];
22157 [label="diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location); 801036"];
22158 [label="diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location); 801037"];
22159 [label="diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location); 801038"];
22160 [label="new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo) 801039"];
22161 [label="param LazyMissingNonNullTypesContextDiagnosticInfo(TypeWithAnnotations type) 801040"];
22162 [label="param LazyMissingNonNullTypesContextDiagnosticInfo(DiagnosticInfo info) 801041"];
22163 [label="param LazyMissingNonNullTypesContextDiagnosticInfo(this) 801042"];
22164 [label="param LazyMissingNonNullTypesContextDiagnosticInfo(this) 801043"];
22165 [label="param LazyDiagnosticInfo(this) 801044"];
22166 [label="CSharp.MessageProvider.Instance 801045"];
22167 [label="ErrorCode.Unknown 801046"];
22168 [label="param LazyDiagnosticInfo(this) 801047"];
22169 [label="param LazyDiagnosticInfo(this) 801048"];
22170 [label="param GetSeverity(this) 801049"];
22171 [label="return InternalDiagnosticSeverity.Unknown; 801050"];
22172 [label="_lazyInfo 801051"];
22173 [label="_info 801052"];
22174 [label="type.HasType 801053"];
22175 [label="=> !(DefaultType is null) 801054"];
22176 [label="Debug.Assert(type.HasType); 801055"];
22177 [label="_type 801056"];
22178 [label="_info 801057"];
22179 [label="diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location); 801058"];
22180 [label="diagnostics.Add(new LazyMissingNonNullTypesContextDiagnosticInfo(type, rawInfo), location) 801059"];
22181 [label="param Add(this DiagnosticBag diagnostics) 801060"];
22182 [label="param Add(DiagnosticInfo info) 801061"];
22183 [label="param Add(Location location) 801062"];
22184 [label="var diag = new CSDiagnostic(info, location); 801063"];
22185 [label="var diag = new CSDiagnostic(info, location); 801064"];
22186 [label="var diag = new CSDiagnostic(info, location); 801065"];
22187 [label="new CSDiagnostic(info, location) 801066"];
22188 [label="param CSDiagnostic(DiagnosticInfo info) 801067"];
22189 [label="param CSDiagnostic(Location location) 801068"];
22190 [label="param CSDiagnostic(bool isSuppressed = false) 801069"];
22191 [label="param CSDiagnostic(this) 801070"];
22192 [label="info 801071"];
22193 [label="location 801072"];
22194 [label="isSuppressed 801073"];
22195 [label="param CSDiagnostic(this) 801074"];
22196 [label="param CSDiagnostic(this) 801075"];
22197 [label="diagnostics.Add(diag); 801076"];
22198 [label="diagnostics.Add(diag); 801077"];
22199 [label="rawInfos.Free(); 801078"];
22200 [label="LazyMissingNonNullTypesContextDiagnosticInfo.AddAll(\n                        isNullableEnabled,\n                        isGeneratedCode,\n                        typeArgument,\n                        location,\n                        diagnostics); 801079"];
22201 [label="reportNullableReferenceTypesIfNeeded(nullableSyntax.QuestionToken, diagnostics, typeArgument); 801080"];
22202 [label="ShouldCheckConstraints 801081"];
22203 [label="get\n            {\n                return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks);\n            } 801082"];
22204 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 801083"];
22205 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 801084"];
22206 [label="this.Flags.Includes(BinderFlags.SuppressConstraintChecks) 801085"];
22207 [label="param Includes(BinderFlags other) 801086"];
22208 [label="if (!ShouldCheckConstraints)\n                {\n                    diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation());\n                }\n                else if (constructedType.IsNullableType())\n                {\n                    ReportUseSiteDiagnostics(constructedType.Type.OriginalDefinition, diagnostics, syntax);\n                    var type = (NamedTypeSymbol)constructedType.Type;\n                    var location = syntax.Location;\n                    type.CheckConstraints(new ConstraintsHelper.CheckConstraintsArgs(this.Compilation, this.Conversions, includeNullability: true, location, diagnostics));\n                }\n                else if (GetNullableUnconstrainedTypeParameterDiagnosticIfNecessary(Compilation.LanguageVersion, constructedType) is { } diagnosticInfo)\n                {\n                    diagnostics.Add(diagnosticInfo, syntax.Location);\n                } 801087"];
22209 [label="diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation()); 801088"];
22210 [label="diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation()); 801089"];
22211 [label="diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation()); 801090"];
22212 [label="diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation()); 801091"];
22213 [label="new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType) 801092"];
22214 [label="param LazyUseSiteDiagnosticsInfoForNullableType(LanguageVersion languageVersion) 801093"];
22215 [label="param LazyUseSiteDiagnosticsInfoForNullableType(TypeWithAnnotations possiblyNullableTypeSymbol) 801094"];
22216 [label="param LazyUseSiteDiagnosticsInfoForNullableType(this) 801095"];
22217 [label="param LazyUseSiteDiagnosticsInfoForNullableType(this) 801096"];
22218 [label="param GetSeverity(this) 801097"];
22219 [label="_languageVersion 801098"];
22220 [label="_languageVersion 801099"];
22221 [label="_possiblyNullableTypeSymbol 801100"];
22222 [label="syntax.GetLocation() 801101"];
22223 [label="param GetLocation(this) 801102"];
22224 [label="return new SourceLocation(this); 801103"];
22225 [label="return new SourceLocation(this); 801104"];
22226 [label="return new SourceLocation(this); 801105"];
22227 [label="Debug.Assert(result != null); 801106"];
22228 [label="Debug.Assert(result != null); 801107"];
22229 [label="diagnostics.Add(new LazyUseSiteDiagnosticsInfoForNullableType(Compilation.LanguageVersion, constructedType), syntax.GetLocation()) 801108"];
22230 [label="param Add(this DiagnosticBag diagnostics) 801109"];
22231 [label="param Add(DiagnosticInfo info) 801110"];
22232 [label="param Add(Location location) 801111"];
22233 [label="return constructedType; 801112"];
22234 [label="constructedType 801113"];
22235 [label="param operator(TypeWithAnnotations typeWithAnnotations) 801114"];
22236 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 801115"];
22237 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 801116"];
22238 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 801117"];
22239 [label="typeWithAnnotations.HasType 801118"];
22240 [label="=> !(DefaultType is null) 801119"];
22241 [label="DefaultType is null 801120"];
22242 [label="!(DefaultType is null) 801121"];
22243 [label="Debug.Assert(typeWithAnnotations.HasType); 801122"];
22244 [label="_symbol = null; 801123"];
22245 [label="_symbol 801124"];
22246 [label="_isNullableEnabled = false; 801125"];
22247 [label="_isNullableEnabled 801126"];
22248 [label="return constructedType; 801127"];
22249 [label="return bindNullable(syntax, diagnostics, basesBeingResolved); 801128"];
22250 [label="symbol.IsType 801129"];
22251 [label="=> !_typeWithAnnotations.IsDefault 801130"];
22252 [label="_typeWithAnnotations.IsDefault 801131"];
22253 [label="DefaultType is null 801132"];
22254 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 801133"];
22255 [label="param ReportDiagnosticsIfObsolete(Binder binder) 801134"];
22256 [label="param ReportDiagnosticsIfObsolete(SyntaxNode syntax) 801135"];
22257 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 801136"];
22258 [label="binder 801137"];
22259 [label="syntax 801138"];
22260 [label="diagnostics 801139"];
22261 [label="param ReportDiagnosticsIfObsolete(Binder binder) 801140"];
22262 [label="param ReportDiagnosticsIfObsolete(SyntaxNode syntax) 801141"];
22263 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 801142"];
22264 [label="param ReportDiagnosticsIfObsolete(this) 801143"];
22265 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 801144"];
22266 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 801145"];
22267 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 801146"];
22268 [label="param ReportDiagnosticsIfObsoleteCore(Binder binder) 801147"];
22269 [label="param ReportDiagnosticsIfObsoleteCore(SyntaxNode syntax) 801148"];
22270 [label="param ReportDiagnosticsIfObsoleteCore(DiagnosticBag diagnostics) 801149"];
22271 [label="=> defaultType 801150"];
22272 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 801151"];
22273 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 801152"];
22274 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 801153"];
22275 [label="param ReportDiagnosticsIfObsolete(this) 801154"];
22276 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 801155"];
22277 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 801156"];
22278 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 801157"];
22279 [label="param ReportDiagnosticsIfObsolete(this) 801158"];
22280 [label="get { return OriginalDefinition.Kind; } 801159"];
22281 [label="OriginalDefinition 801160"];
22282 [label="get { return _underlyingType; } 801161"];
22283 [label="return _underlyingType; 801162"];
22284 [label="return OriginalDefinition.Kind; 801163"];
22285 [label="OriginalDefinition.Kind 801164"];
22286 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 801165"];
22287 [label="return OriginalDefinition.Kind; 801166"];
22288 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 801167"];
22289 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 801168"];
22290 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 801169"];
22291 [label="this.ContainingMemberOrLambda 801170"];
22292 [label="get { return _containingMemberOrLambda; } 801171"];
22293 [label="return _containingMemberOrLambda; 801172"];
22294 [label="this.ContainingType 801173"];
22295 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 801174"];
22296 [label="this.ContainingMemberOrLambda 801175"];
22297 [label="get { return _containingMemberOrLambda; } 801176"];
22298 [label="return _containingMemberOrLambda; 801177"];
22299 [label="var member = this.ContainingMemberOrLambda; 801178"];
22300 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 801179"];
22301 [label="member.Kind 801180"];
22302 [label="get\n            {\n                return SymbolKind.Field;\n            } 801181"];
22303 [label="return SymbolKind.Field; 801182"];
22304 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 801183"];
22305 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 801184"];
22306 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 801185"];
22307 [label="member.ContainingType 801186"];
22308 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 801187"];
22309 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 801188"];
22310 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 801189"];
22311 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 801190"];
22312 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 801191"];
22313 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 801192"];
22314 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 801193"];
22315 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 801194"];
22316 [label="RoslynDebug.Assert(symbol is object); 801195"];
22317 [label="symbol.Kind 801196"];
22318 [label="get { return OriginalDefinition.Kind; } 801197"];
22319 [label="OriginalDefinition 801198"];
22320 [label="get { return _underlyingType; } 801199"];
22321 [label="return _underlyingType; 801200"];
22322 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 801201"];
22323 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 801202"];
22324 [label="symbol.Kind 801203"];
22325 [label="get { return OriginalDefinition.Kind; } 801204"];
22326 [label="OriginalDefinition 801205"];
22327 [label="get { return _underlyingType; } 801206"];
22328 [label="return _underlyingType; 801207"];
22329 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 801208"];
22330 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 801209"];
22331 [label="param GetLeastOverriddenMember(NamedTypeSymbol accessingTypeOpt) 801210"];
22332 [label="get { return OriginalDefinition.Kind; } 801211"];
22333 [label="OriginalDefinition 801212"];
22334 [label="get { return _underlyingType; } 801213"];
22335 [label="return _underlyingType; 801214"];
22336 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 801215"];
22337 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 801216"];
22338 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 801217"];
22339 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 801218"];
22340 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 801219"];
22341 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 801220"];
22342 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 801221"];
22343 [label="RoslynDebug.Assert(diagnostics != null); 801222"];
22344 [label="RoslynDebug.Assert(diagnostics != null); 801223"];
22345 [label="param GetObsoleteDiagnosticKind(Symbol containingMember) 801224"];
22346 [label="param GetObsoleteDiagnosticKind(bool forceComplete = false) 801225"];
22347 [label="get { return _underlyingType.ObsoleteAttributeData; } 801226"];
22348 [label="_underlyingType.ObsoleteAttributeData 801227"];
22349 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return null;\n                }\n\n                bool ignoreByRefLikeMarker = this.IsRefLikeType;\n                ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker);\n                return uncommon.lazyObsoleteAttributeData;\n            } 801228"];
22350 [label="s.Kind 801229"];
22351 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 801230"];
22352 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 801231"];
22353 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return null;\n                } 801232"];
22354 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 801233"];
22355 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 801234"];
22356 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                } 801235"];
22357 [label="var isByRefLike = ThreeState.False; 801236"];
22358 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 801237"];
22359 [label="s.Kind 801238"];
22360 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 801239"];
22361 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 801240"];
22362 [label="Debug.Assert((object)moduleSymbol != null); 801241"];
22363 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 801242"];
22364 [label="return baseType; 801243"];
22365 [label="result = TypeKind.Class; 801244"];
22366 [label="s.Kind 801245"];
22367 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 801246"];
22368 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 801247"];
22369 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 801248"];
22370 [label="Debug.Assert((object)moduleSymbol != null); 801249"];
22371 [label="Debug.Assert(obsoleteAttributeData == null || !obsoleteAttributeData.IsUninitialized); 801250"];
22372 [label="return uncommon.lazyObsoleteAttributeData; 801251"];
22373 [label="return _underlyingType.ObsoleteAttributeData; 801252"];
22374 [label="var data = this.ObsoleteAttributeData; 801253"];
22375 [label="return (data == null) ? ObsoleteAttributeKind.None : data.Kind; 801254"];
22376 [label="return (data == null) ? ObsoleteAttributeKind.None : data.Kind; 801255"];
22377 [label="(data == null) 801256"];
22378 [label="switch (symbol.ObsoleteKind)\n            {\n                case ObsoleteAttributeKind.None:\n                    return ObsoleteDiagnosticKind.NotObsolete;\n                case ObsoleteAttributeKind.Experimental:\n                    return ObsoleteDiagnosticKind.Diagnostic;\n                case ObsoleteAttributeKind.Uninitialized:\n                    // If we haven't cracked attributes on the symbol at all or we haven't\n                    // cracked attribute arguments enough to be able to report diagnostics for\n                    // ObsoleteAttribute, store the symbol so that we can report diagnostics at a \n                    // later stage.\n                    return ObsoleteDiagnosticKind.Lazy;\n            } 801257"];
22379 [label="return ObsoleteDiagnosticKind.NotObsolete; 801258"];
22380 [label="DiagnosticInfo? info = null; 801259"];
22381 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 801260"];
22382 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 801261"];
22383 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 801262"];
22384 [label="return kind; 801263"];
22385 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 801264"];
22386 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 801265"];
22387 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 801266"];
22388 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 801267"];
22389 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 801268"];
22390 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 801269"];
22391 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 801270"];
22392 [label="param UnwrapAlias(DiagnosticBag diagnostics) 801271"];
22393 [label="param UnwrapAlias(SyntaxNode syntax) 801272"];
22394 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 801273"];
22395 [label="param UnwrapAlias(this) 801274"];
22396 [label="symbol.IsAlias 801275"];
22397 [label="=> _symbol?.Kind == SymbolKind.Alias 801276"];
22398 [label="_symbol 801277"];
22399 [label="_symbol?.Kind == SymbolKind.Alias 801278"];
22400 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 801279"];
22401 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 801280"];
22402 [label="IsFixedSizeBuffer 801281"];
22403 [label="=> (Modifiers & DeclarationModifiers.Fixed) != 0 801282"];
22404 [label="Modifiers 801283"];
22405 [label="get\n            {\n                return _modifiers;\n            } 801284"];
22406 [label="return _modifiers; 801285"];
22407 [label="Modifiers & DeclarationModifiers.Fixed 801286"];
22408 [label="0 801287"];
22409 [label="(Modifiers & DeclarationModifiers.Fixed) != 0 801288"];
22410 [label="if (IsFixedSizeBuffer)\n                {\n                    type = TypeWithAnnotations.Create(new PointerTypeSymbol(type));\n\n                    if (ContainingType.TypeKind != TypeKind.Struct)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_FixedNotInStruct, ErrorLocation);\n                    }\n\n                    var elementType = ((PointerTypeSymbol)type.Type).PointedAtType;\n                    int elementSize = elementType.FixedBufferElementSizeInBytes();\n                    if (elementSize == 0)\n                    {\n                        var loc = typeSyntax.Location;\n                        diagnostics.Add(ErrorCode.ERR_IllegalFixedType, loc);\n                    }\n\n                    if (!binder.InUnsafeRegion)\n                    {\n                        diagnosticsForFirstDeclarator.Add(ErrorCode.ERR_UnsafeNeeded, declarator.Location);\n                    }\n                } 801289"];
22411 [label="if (Interlocked.CompareExchange(ref _lazyType, new TypeWithAnnotations.Boxed(type.WithModifiers(this.RequiredCustomModifiers)), null) == null)\n            {\n                TypeChecks(type.Type, diagnostics);\n\n                // CONSIDER: SourceEventFieldSymbol would like to suppress these diagnostics.\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n\n                bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator;\n                if (isFirstDeclarator)\n                {\n                    compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator);\n                }\n\n                state.NotePartComplete(CompletionPart.Type);\n            } 801290"];
22412 [label="this.RequiredCustomModifiers 801291"];
22413 [label="get\n            {\n                if (!IsVolatile)\n                {\n                    return ImmutableArray<CustomModifier>.Empty;\n                }\n                else\n                {\n                    return ImmutableArray.Create<CustomModifier>(\n                            CSharpCustomModifier.CreateRequired(this.ContainingAssembly.GetSpecialType(SpecialType.System_Runtime_CompilerServices_IsVolatile)));\n                }\n            } 801292"];
22414 [label="IsVolatile 801293"];
22415 [label="=> (Modifiers & DeclarationModifiers.Volatile) != 0 801294"];
22416 [label="Modifiers 801295"];
22417 [label="get\n            {\n                return _modifiers;\n            } 801296"];
22418 [label="return _modifiers; 801297"];
22419 [label="Modifiers & DeclarationModifiers.Volatile 801298"];
22420 [label="0 801299"];
22421 [label="(Modifiers & DeclarationModifiers.Volatile) != 0 801300"];
22422 [label="if (!IsVolatile)\n                {\n                    return ImmutableArray<CustomModifier>.Empty;\n                }\n                else\n                {\n                    return ImmutableArray.Create<CustomModifier>(\n                            CSharpCustomModifier.CreateRequired(this.ContainingAssembly.GetSpecialType(SpecialType.System_Runtime_CompilerServices_IsVolatile)));\n                } 801301"];
22423 [label="return ImmutableArray<CustomModifier>.Empty; 801302"];
22424 [label="if (Interlocked.CompareExchange(ref _lazyType, new TypeWithAnnotations.Boxed(type.WithModifiers(this.RequiredCustomModifiers)), null) == null)\n            {\n                TypeChecks(type.Type, diagnostics);\n\n                // CONSIDER: SourceEventFieldSymbol would like to suppress these diagnostics.\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n\n                bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator;\n                if (isFirstDeclarator)\n                {\n                    compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator);\n                }\n\n                state.NotePartComplete(CompletionPart.Type);\n            } 801303"];
22425 [label="type.WithModifiers(this.RequiredCustomModifiers) 801304"];
22426 [label="param WithModifiers(ImmutableArray<CustomModifier> customModifiers) 801305"];
22427 [label="=>\n            _extensions.WithModifiers(this, customModifiers) 801306"];
22428 [label="this 801307"];
22429 [label="customModifiers 801308"];
22430 [label="_extensions.WithModifiers(this, customModifiers) 801309"];
22431 [label="param WithModifiers(TypeWithAnnotations type) 801310"];
22432 [label="param WithModifiers(ImmutableArray<CustomModifier> customModifiers) 801311"];
22433 [label="param WithModifiers(this) 801312"];
22434 [label="return CreateNonLazyType(type.DefaultType, type.NullableAnnotation, customModifiers); 801313"];
22435 [label="return CreateNonLazyType(type.DefaultType, type.NullableAnnotation, customModifiers); 801314"];
22436 [label="return CreateNonLazyType(type.DefaultType, type.NullableAnnotation, customModifiers); 801315"];
22437 [label="CreateNonLazyType(type.DefaultType, type.NullableAnnotation, customModifiers) 801316"];
22438 [label="param CreateNonLazyType(TypeSymbol typeSymbol) 801317"];
22439 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 801318"];
22440 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 801319"];
22441 [label="Extensions.Create(customModifiers) 801320"];
22442 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 801321"];
22443 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 801322"];
22444 [label="param TypeWithAnnotations(this) 801323"];
22445 [label="var a1 = defaultType is null; 801324"];
22446 [label="!a1 801325"];
22447 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 801326"];
22448 [label="defaultType.IsNullableType() 801327"];
22449 [label="param IsNullableType(this TypeSymbol type) 801328"];
22450 [label="type.OriginalDefinition 801329"];
22451 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 801330"];
22452 [label="OriginalTypeSymbolDefinition 801331"];
22453 [label="get\n            {\n                return this.OriginalDefinition;\n            } 801332"];
22454 [label="this.OriginalDefinition 801333"];
22455 [label="get { return _underlyingType; } 801334"];
22456 [label="return _underlyingType; 801335"];
22457 [label="type.OriginalDefinition.SpecialType 801336"];
22458 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 801337"];
22459 [label="Debug.Assert(a1 || a2 != true || a3); 801338"];
22460 [label="Debug.Assert(a1 || a2 != true || a3); 801339"];
22461 [label="Debug.Assert(a1 || a2 != true || a3); 801340"];
22462 [label="Debug.Assert(extensions != null); 801341"];
22463 [label="Debug.Assert(extensions != null); 801342"];
22464 [label="return CreateNonLazyType(type.DefaultType, type.NullableAnnotation, customModifiers); 801343"];
22465 [label="if (Interlocked.CompareExchange(ref _lazyType, new TypeWithAnnotations.Boxed(type.WithModifiers(this.RequiredCustomModifiers)), null) == null)\n            {\n                TypeChecks(type.Type, diagnostics);\n\n                // CONSIDER: SourceEventFieldSymbol would like to suppress these diagnostics.\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n\n                bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator;\n                if (isFirstDeclarator)\n                {\n                    compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator);\n                }\n\n                state.NotePartComplete(CompletionPart.Type);\n            } 801344"];
22466 [label="default 801345"];
22467 [label="new Boxed(default) 801346"];
22468 [label="param Boxed(TypeWithAnnotations value) 801347"];
22469 [label="param Boxed(this) 801348"];
22470 [label="Value 801349"];
22471 [label="Sentinel = new Boxed(default) 801350"];
22472 [label="if (Interlocked.CompareExchange(ref _lazyType, new TypeWithAnnotations.Boxed(type.WithModifiers(this.RequiredCustomModifiers)), null) == null)\n            {\n                TypeChecks(type.Type, diagnostics);\n\n                // CONSIDER: SourceEventFieldSymbol would like to suppress these diagnostics.\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n\n                bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator;\n                if (isFirstDeclarator)\n                {\n                    compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator);\n                }\n\n                state.NotePartComplete(CompletionPart.Type);\n            } 801351"];
22473 [label="new TypeWithAnnotations.Boxed(type.WithModifiers(this.RequiredCustomModifiers)) 801352"];
22474 [label="param Boxed(TypeWithAnnotations value) 801353"];
22475 [label="param Boxed(this) 801354"];
22476 [label="Value 801355"];
22477 [label="if (Interlocked.CompareExchange(ref _lazyType, new TypeWithAnnotations.Boxed(type.WithModifiers(this.RequiredCustomModifiers)), null) == null)\n            {\n                TypeChecks(type.Type, diagnostics);\n\n                // CONSIDER: SourceEventFieldSymbol would like to suppress these diagnostics.\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n\n                bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator;\n                if (isFirstDeclarator)\n                {\n                    compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator);\n                }\n\n                state.NotePartComplete(CompletionPart.Type);\n            } 801356"];
22478 [label="type.Type 801357"];
22479 [label="=> defaultType 801358"];
22480 [label="TypeChecks(type.Type, diagnostics); 801359"];
22481 [label="TypeChecks(type.Type, diagnostics); 801360"];
22482 [label="TypeChecks(type.Type, diagnostics) 801361"];
22483 [label="param TypeChecks(TypeSymbol type) 801362"];
22484 [label="param TypeChecks(DiagnosticBag diagnostics) 801363"];
22485 [label="param TypeChecks(this) 801364"];
22486 [label="type.IsStatic 801365"];
22487 [label="get\n            {\n                return _underlyingType.IsStatic;\n            } 801366"];
22488 [label="_underlyingType.IsStatic 801367"];
22489 [label="get\n            {\n                return\n                    (_flags & TypeAttributes.Sealed) != 0 &&\n                    (_flags & TypeAttributes.Abstract) != 0;\n            } 801368"];
22490 [label="return\n                    (_flags & TypeAttributes.Sealed) != 0 &&\n                    (_flags & TypeAttributes.Abstract) != 0; 801369"];
22491 [label="return\n                    (_flags & TypeAttributes.Sealed) != 0 &&\n                    (_flags & TypeAttributes.Abstract) != 0; 801370"];
22492 [label="return _underlyingType.IsStatic; 801371"];
22493 [label="if (type.IsStatic)\n            {\n                // Cannot declare a variable of static type '{0}'\n                diagnostics.Add(ErrorCode.ERR_VarDeclIsStaticClass, this.ErrorLocation, type);\n            }\n            else if (type.IsVoidType())\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantHaveVoidType, TypeSyntax?.Location ?? this.Locations[0]);\n            }\n            else if (type.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantBeRefAny, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (type.IsRefLikeType && (this.IsStatic || !containingType.IsRefLikeType))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldAutoPropCantBeByRefLike, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801372"];
22494 [label="if (type.IsVoidType())\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantHaveVoidType, TypeSyntax?.Location ?? this.Locations[0]);\n            }\n            else if (type.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantBeRefAny, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (type.IsRefLikeType && (this.IsStatic || !containingType.IsRefLikeType))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldAutoPropCantBeByRefLike, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801373"];
22495 [label="type.IsVoidType() 801374"];
22496 [label="param IsVoidType(this TypeSymbol type) 801375"];
22497 [label="type.SpecialType 801376"];
22498 [label="get\n            {\n                return SpecialType.None;\n            } 801377"];
22499 [label="return SpecialType.None; 801378"];
22500 [label="return type.SpecialType == SpecialType.System_Void; 801379"];
22501 [label="if (type.IsVoidType())\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantHaveVoidType, TypeSyntax?.Location ?? this.Locations[0]);\n            }\n            else if (type.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantBeRefAny, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (type.IsRefLikeType && (this.IsStatic || !containingType.IsRefLikeType))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldAutoPropCantBeByRefLike, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801380"];
22502 [label="if (type.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantBeRefAny, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (type.IsRefLikeType && (this.IsStatic || !containingType.IsRefLikeType))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldAutoPropCantBeByRefLike, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801381"];
22503 [label="if (type.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldCantBeRefAny, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (type.IsRefLikeType && (this.IsStatic || !containingType.IsRefLikeType))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldAutoPropCantBeByRefLike, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801382"];
22504 [label="type.IsRestrictedType(ignoreSpanLikeTypes: true) 801383"];
22505 [label="param IsRestrictedType(this TypeSymbol type) 801384"];
22506 [label="param IsRestrictedType(bool ignoreSpanLikeTypes = false) 801385"];
22507 [label="RoslynDebug.Assert((object)type != null); 801386"];
22508 [label="RoslynDebug.Assert((object)type != null); 801387"];
22509 [label="type.SpecialType 801388"];
22510 [label="get\n            {\n                return SpecialType.None;\n            } 801389"];
22511 [label="switch (type.SpecialType)\n            {\n                case SpecialType.System_TypedReference:\n                case SpecialType.System_ArgIterator:\n                case SpecialType.System_RuntimeArgumentHandle:\n                    return true;\n            } 801390"];
22512 [label="ignoreSpanLikeTypes 801391"];
22513 [label="return ignoreSpanLikeTypes ?\n                        false :\n                        type.IsRefLikeType; 801392"];
22514 [label="type.IsRefLikeType 801393"];
22515 [label="get { return _underlyingType.IsRefLikeType; } 801394"];
22516 [label="_underlyingType.IsRefLikeType 801395"];
22517 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                }\n\n                if (!uncommon.lazyIsByRefLike.HasValue())\n                {\n                    var isByRefLike = ThreeState.False;\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    }\n\n                    uncommon.lazyIsByRefLike = isByRefLike;\n                }\n\n                return uncommon.lazyIsByRefLike.Value();\n            } 801396"];
22518 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 801397"];
22519 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 801398"];
22520 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                } 801399"];
22521 [label="return _underlyingType.IsRefLikeType; 801400"];
22522 [label="if (type.IsRefLikeType && (this.IsStatic || !containingType.IsRefLikeType))\n            {\n                diagnostics.Add(ErrorCode.ERR_FieldAutoPropCantBeByRefLike, TypeSyntax?.Location ?? this.Locations[0], type);\n            }\n            else if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801401"];
22523 [label="IsConst 801402"];
22524 [label="=> (Modifiers & DeclarationModifiers.Const) != 0 801403"];
22525 [label="Modifiers 801404"];
22526 [label="get\n            {\n                return _modifiers;\n            } 801405"];
22527 [label="Modifiers & DeclarationModifiers.Const 801406"];
22528 [label="0 801407"];
22529 [label="(Modifiers & DeclarationModifiers.Const) != 0 801408"];
22530 [label="if (IsConst && !type.CanBeConst())\n            {\n                SyntaxToken constToken = default(SyntaxToken);\n                foreach (var modifier in ModifiersTokenList)\n                {\n                    if (modifier.Kind() == SyntaxKind.ConstKeyword)\n                    {\n                        constToken = modifier;\n                        break;\n                    }\n                }\n                Debug.Assert(constToken.Kind() == SyntaxKind.ConstKeyword);\n\n                diagnostics.Add(ErrorCode.ERR_BadConstType, constToken.GetLocation(), type);\n            }\n            else if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801409"];
22531 [label="IsVolatile 801410"];
22532 [label="if (IsVolatile && !type.IsValidVolatileFieldType())\n            {\n                // '{0}': a volatile field cannot be of the type '{1}'\n                diagnostics.Add(ErrorCode.ERR_VolatileStruct, this.ErrorLocation, this, type);\n            } 801411"];
22533 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 801412"];
22534 [label="if (!this.IsNoMoreVisibleThan(type, ref useSiteDiagnostics))\n            {\n                // Inconsistent accessibility: field type '{1}' is less accessible than field '{0}'\n                diagnostics.Add(ErrorCode.ERR_BadVisFieldType, this.ErrorLocation, this, type);\n            } 801413"];
22535 [label="if (!this.IsNoMoreVisibleThan(type, ref useSiteDiagnostics))\n            {\n                // Inconsistent accessibility: field type '{1}' is less accessible than field '{0}'\n                diagnostics.Add(ErrorCode.ERR_BadVisFieldType, this.ErrorLocation, this, type);\n            } 801414"];
22536 [label="if (!this.IsNoMoreVisibleThan(type, ref useSiteDiagnostics))\n            {\n                // Inconsistent accessibility: field type '{1}' is less accessible than field '{0}'\n                diagnostics.Add(ErrorCode.ERR_BadVisFieldType, this.ErrorLocation, this, type);\n            } 801415"];
22537 [label="this.IsNoMoreVisibleThan(type, ref useSiteDiagnostics) 801416"];
22538 [label="param IsNoMoreVisibleThan(this Symbol symbol) 801417"];
22539 [label="param IsNoMoreVisibleThan(TypeSymbol type) 801418"];
22540 [label="param IsNoMoreVisibleThan(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 801419"];
22541 [label="return type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics); 801420"];
22542 [label="return type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics); 801421"];
22543 [label="return type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics); 801422"];
22544 [label="type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics) 801423"];
22545 [label="param IsAtLeastAsVisibleAs(this TypeSymbol type) 801424"];
22546 [label="param IsAtLeastAsVisibleAs(Symbol sym) 801425"];
22547 [label="param IsAtLeastAsVisibleAs(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 801426"];
22548 [label="HashSet<DiagnosticInfo>? localUseSiteDiagnostics = useSiteDiagnostics; 801427"];
22549 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 801428"];
22550 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 801429"];
22551 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 801430"];
22552 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 801431"];
22553 [label="type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true) 801432"];
22554 [label="param VisitType(this TypeSymbol type) 801433"];
22555 [label="param VisitType(Func<TypeSymbol, T, bool, bool> predicate) 801434"];
22556 [label="param VisitType(T arg) 801435"];
22557 [label="param VisitType(bool canDigThroughNullable = false) 801436"];
22558 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 801437"];
22559 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 801438"];
22560 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 801439"];
22561 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 801440"];
22562 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 801441"];
22563 [label="VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable) 801442"];
22564 [label="param VisitType(this TypeWithAnnotations typeWithAnnotationsOpt) 801443"];
22565 [label="param VisitType(TypeSymbol? type) 801444"];
22566 [label="param VisitType(Func<TypeWithAnnotations, T, bool, bool>? typeWithAnnotationsPredicate) 801445"];
22567 [label="param VisitType(Func<TypeSymbol, T, bool, bool>? typePredicate) 801446"];
22568 [label="param VisitType(T arg) 801447"];
22569 [label="param VisitType(bool canDigThroughNullable = false) 801448"];
22570 [label="param VisitType(bool useDefaultType = false) 801449"];
22571 [label="typeWithAnnotationsOpt.HasType 801450"];
22572 [label="=> !(DefaultType is null) 801451"];
22573 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 801452"];
22574 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 801453"];
22575 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 801454"];
22576 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 801455"];
22577 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 801456"];
22578 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 801457"];
22579 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 801458"];
22580 [label="while (true)\n            {\n                TypeSymbol current = type ?? (useDefaultType ? typeWithAnnotationsOpt.DefaultType : typeWithAnnotationsOpt.Type);\n                bool isNestedNamedType = false;\n\n                // Visit containing types from outer-most to inner-most.\n                switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                }\n\n                if (typeWithAnnotationsOpt.HasType && typeWithAnnotationsPredicate != null)\n                {\n                    if (typeWithAnnotationsPredicate(typeWithAnnotationsOpt, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n                else if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n\n                TypeWithAnnotations next;\n\n                switch (current.TypeKind)\n                {\n                    case TypeKind.Dynamic:\n                    case TypeKind.TypeParameter:\n                    case TypeKind.Submission:\n                    case TypeKind.Enum:\n                        return null;\n\n                    case TypeKind.Error:\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Delegate:\n                        var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;\n                        if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        }\n\n                        int i;\n                        for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        }\n\n                        next = typeArguments[i];\n                        break;\n\n                    case TypeKind.Array:\n                        next = ((ArrayTypeSymbol)current).ElementTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.Pointer:\n                        next = ((PointerTypeSymbol)current).PointedAtTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.FunctionPointer:\n                        {\n                            var result = visitFunctionPointerType((FunctionPointerTypeSymbol)current, typeWithAnnotationsPredicate, typePredicate, arg, useDefaultType, canDigThroughNullable, out next);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n\n                            break;\n                        }\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(current.TypeKind);\n                }\n\n                // Let's try to avoid early resolution of nullable types\n                typeWithAnnotationsOpt = canDigThroughNullable ? default : next;\n                type = canDigThroughNullable ? next.NullableUnderlyingTypeOrSelf : null;\n            } 801459"];
22581 [label="TypeSymbol current = type ?? (useDefaultType ? typeWithAnnotationsOpt.DefaultType : typeWithAnnotationsOpt.Type); 801460"];
22582 [label="bool isNestedNamedType = false; 801461"];
22583 [label="current.TypeKind 801462"];
22584 [label="get\n            {\n                return _underlyingType.TypeKind;\n            } 801463"];
22585 [label="_underlyingType.TypeKind 801464"];
22586 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 801465"];
22587 [label="return _underlyingType.TypeKind; 801466"];
22588 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                } 801467"];
22589 [label="current.ContainingType 801468"];
22590 [label="get\n            {\n                return _newContainer as NamedTypeSymbol;\n            } 801469"];
22591 [label="return _newContainer as NamedTypeSymbol; 801470"];
22592 [label="var containingType = current.ContainingType; 801471"];
22593 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 801472"];
22594 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 801473"];
22595 [label="typeWithAnnotationsOpt.HasType 801474"];
22596 [label="=> !(DefaultType is null) 801475"];
22597 [label="if (typeWithAnnotationsOpt.HasType && typeWithAnnotationsPredicate != null)\n                {\n                    if (typeWithAnnotationsPredicate(typeWithAnnotationsOpt, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n                else if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 801476"];
22598 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 801477"];
22599 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 801478"];
22600 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801479"];
22601 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801480"];
22602 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801481"];
22603 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801482"];
22604 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801483"];
22605 [label="param IsTypeLessVisibleThan(TypeSymbol type) 801484"];
22606 [label="param IsTypeLessVisibleThan(Symbol sym) 801485"];
22607 [label="param IsTypeLessVisibleThan(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 801486"];
22608 [label="type.TypeKind 801487"];
22609 [label="get\n            {\n                return _underlyingType.TypeKind;\n            } 801488"];
22610 [label="_underlyingType.TypeKind 801489"];
22611 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 801490"];
22612 [label="return _underlyingType.TypeKind; 801491"];
22613 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Interface:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Submission:\n                    return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics);\n\n                default:\n                    return false;\n            } 801492"];
22614 [label="return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics); 801493"];
22615 [label="return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics); 801494"];
22616 [label="return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics); 801495"];
22617 [label="IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics) 801496"];
22618 [label="param IsAsRestrictive(NamedTypeSymbol s1) 801497"];
22619 [label="param IsAsRestrictive(Symbol sym2) 801498"];
22620 [label="param IsAsRestrictive(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 801499"];
22621 [label="s1.DeclaredAccessibility 801500"];
22622 [label="get\n            {\n                return _underlyingType.DeclaredAccessibility;\n            } 801501"];
22623 [label="_underlyingType.DeclaredAccessibility 801502"];
22624 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 801503"];
22625 [label="Accessibility access = Accessibility.Private; 801504"];
22626 [label="return _underlyingType.DeclaredAccessibility; 801505"];
22627 [label="Accessibility acc1 = s1.DeclaredAccessibility; 801506"];
22628 [label="if (acc1 == Accessibility.Public)\n            {\n                return true;\n            } 801507"];
22629 [label="return true; 801508"];
22630 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801509"];
22631 [label="TypeWithAnnotations next; 801510"];
22632 [label="next 801511"];
22633 [label="current.TypeKind 801512"];
22634 [label="get\n            {\n                return _underlyingType.TypeKind;\n            } 801513"];
22635 [label="_underlyingType.TypeKind 801514"];
22636 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 801515"];
22637 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Dynamic:\n                    case TypeKind.TypeParameter:\n                    case TypeKind.Submission:\n                    case TypeKind.Enum:\n                        return null;\n\n                    case TypeKind.Error:\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Delegate:\n                        var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;\n                        if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        }\n\n                        int i;\n                        for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        }\n\n                        next = typeArguments[i];\n                        break;\n\n                    case TypeKind.Array:\n                        next = ((ArrayTypeSymbol)current).ElementTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.Pointer:\n                        next = ((PointerTypeSymbol)current).PointedAtTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.FunctionPointer:\n                        {\n                            var result = visitFunctionPointerType((FunctionPointerTypeSymbol)current, typeWithAnnotationsPredicate, typePredicate, arg, useDefaultType, canDigThroughNullable, out next);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n\n                            break;\n                        }\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(current.TypeKind);\n                } 801516"];
22638 [label="((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 801517"];
22639 [label="get\n            {\n                return _typeArgumentsWithAnnotations;\n            } 801518"];
22640 [label="return _typeArgumentsWithAnnotations; 801519"];
22641 [label="var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 801520"];
22642 [label="if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        } 801521"];
22643 [label="int i; 801522"];
22644 [label="for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        } 801523"];
22645 [label="for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        } 801524"];
22646 [label="next = typeArguments[i]; 801525"];
22647 [label="canDigThroughNullable 801526"];
22648 [label="typeWithAnnotationsOpt = canDigThroughNullable ? default : next; 801527"];
22649 [label="canDigThroughNullable 801528"];
22650 [label="next.NullableUnderlyingTypeOrSelf 801529"];
22651 [label="=> _extensions.GetNullableUnderlyingTypeOrSelf(DefaultType) 801530"];
22652 [label="DefaultType 801531"];
22653 [label="_extensions.GetNullableUnderlyingTypeOrSelf(DefaultType) 801532"];
22654 [label="param GetNullableUnderlyingTypeOrSelf(TypeSymbol typeSymbol) 801533"];
22655 [label="=> typeSymbol.StrippedType() 801534"];
22656 [label="typeSymbol 801535"];
22657 [label="typeSymbol.StrippedType() 801536"];
22658 [label="param StrippedType(this TypeSymbol type) 801537"];
22659 [label="return type.IsNullableType() ? type.GetNullableUnderlyingType() : type; 801538"];
22660 [label="type.IsNullableType() 801539"];
22661 [label="param IsNullableType(this TypeSymbol type) 801540"];
22662 [label="type = canDigThroughNullable ? next.NullableUnderlyingTypeOrSelf : null; 801541"];
22663 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 801542"];
22664 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                } 801543"];
22665 [label="current.ContainingType 801544"];
22666 [label="var containingType = current.ContainingType; 801545"];
22667 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 801546"];
22668 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 801547"];
22669 [label="=> !(DefaultType is null) 801548"];
22670 [label="if (typeWithAnnotationsOpt.HasType && typeWithAnnotationsPredicate != null)\n                {\n                    if (typeWithAnnotationsPredicate(typeWithAnnotationsOpt, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n                else if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 801549"];
22671 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 801550"];
22672 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 801551"];
22673 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801552"];
22674 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801553"];
22675 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801554"];
22676 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 801555"];
22677 [label="param IsTypeLessVisibleThan(Symbol sym) 801556"];
22678 [label="type.TypeKind 801557"];
22679 [label="param IsAsRestrictive(Symbol sym2) 801558"];
22680 [label="Accessibility access = Accessibility.Private; 801559"];
22681 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 801560"];
22682 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 801561"];
22683 [label="if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        } 801562"];
22684 [label="return null; 801563"];
22685 [label="useSiteDiagnostics = localUseSiteDiagnostics; 801564"];
22686 [label="return result is null; 801565"];
22687 [label="diagnostics.Add(this.ErrorLocation, useSiteDiagnostics); 801566"];
22688 [label="this.ErrorLocation 801567"];
22689 [label="get\n            {\n                return _location;\n            } 801568"];
22690 [label="return _location; 801569"];
22691 [label="diagnostics.Add(this.ErrorLocation, useSiteDiagnostics); 801570"];
22692 [label="diagnostics.Add(this.ErrorLocation, useSiteDiagnostics); 801571"];
22693 [label="diagnostics.Add(this.ErrorLocation, useSiteDiagnostics) 801572"];
22694 [label="param Add(this DiagnosticBag diagnostics) 801573"];
22695 [label="param Add(Location location) 801574"];
22696 [label="param Add(HashSet<DiagnosticInfo> useSiteDiagnostics) 801575"];
22697 [label="if (useSiteDiagnostics.IsNullOrEmpty())\n            {\n                return false;\n            } 801576"];
22698 [label="return false; 801577"];
22699 [label="TypeChecks(type.Type, diagnostics); 801578"];
22700 [label="compilation.DeclarationDiagnostics 801579"];
22701 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 801580"];
22702 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 801581"];
22703 [label="return _lazyDeclarationDiagnostics; 801582"];
22704 [label="compilation.DeclarationDiagnostics.AddRange(diagnostics); 801583"];
22705 [label="compilation.DeclarationDiagnostics.AddRange(diagnostics); 801584"];
22706 [label="compilation.DeclarationDiagnostics.AddRange(diagnostics); 801585"];
22707 [label="bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator; 801586"];
22708 [label="bool isFirstDeclarator = fieldSyntax.Declaration.Variables[0] == declarator; 801587"];
22709 [label="if (isFirstDeclarator)\n                {\n                    compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator);\n                } 801588"];
22710 [label="compilation.DeclarationDiagnostics 801589"];
22711 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 801590"];
22712 [label="compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator); 801591"];
22713 [label="compilation.DeclarationDiagnostics.AddRange(diagnosticsForFirstDeclarator); 801592"];
22714 [label="state.NotePartComplete(CompletionPart.Type); 801593"];
22715 [label="state.NotePartComplete(CompletionPart.Type) 801594"];
22716 [label="param NotePartComplete(CompletionPart part) 801595"];
22717 [label="param NotePartComplete(this) 801596"];
22718 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 801597"];
22719 [label="diagnostics.Free(); 801598"];
22720 [label="diagnosticsForFirstDeclarator.Free(); 801599"];
22721 [label="return _lazyType.Value; 801600"];
22722 [label="return GetFieldType(ConsList<FieldSymbol>.Empty); 801601"];
22723 [label="TypeWithAnnotations.Type 801602"];
22724 [label="=> _extensions?.GetResolvedType(DefaultType) 801603"];
22725 [label=".GetResolvedType(DefaultType) 801604"];
22726 [label="=> defaultType 801605"];
22727 [label="varX.Type.OriginalDefinition 801606"];
22728 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 801607"];
22729 [label="OriginalTypeSymbolDefinition 801608"];
22730 [label="this.OriginalDefinition 801609"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
42 -> 0;
43 -> 0;
44 -> 42;
44 -> 43;
44 -> 0;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 44;
49 -> 48;
50 -> 0;
51 -> 50;
52 -> 51;
52 -> 50;
53 -> 52;
55 -> 0;
56 -> 54;
56 -> 55;
57 -> 56;
58 -> 0;
59 -> 0;
60 -> 58;
60 -> 59;
60 -> 0;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 48;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 64;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 0;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 72;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 0;
93 -> 92;
95 -> 0;
96 -> 94;
96 -> 95;
97 -> 96;
98 -> 0;
99 -> 0;
100 -> 98;
100 -> 99;
100 -> 88;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 0;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 100;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 124;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 0;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 136;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 0;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 148;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 0;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
180 -> 0;
180 -> 179;
181 -> 180;
181 -> 0;
182 -> 181;
184 -> 183;
186 -> 185;
188 -> 187;
190 -> 189;
191 -> 3;
192 -> 191;
193 -> 192;
194 -> 193;
194 -> 192;
195 -> 1;
195 -> 2;
195 -> 194;
196 -> 1;
197 -> 1;
198 -> 197;
198 -> 1;
199 -> 1;
200 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 199;
203 -> 201;
203 -> 202;
204 -> 202;
205 -> 203;
205 -> 204;
205 -> 202;
206 -> 202;
206 -> 1;
207 -> 1;
208 -> 1;
209 -> 206;
209 -> 208;
210 -> 207;
210 -> 208;
211 -> 207;
211 -> 208;
212 -> 207;
212 -> 208;
213 -> 207;
213 -> 208;
214 -> 207;
214 -> 208;
215 -> 207;
215 -> 208;
216 -> 207;
216 -> 208;
217 -> 209;
217 -> 208;
218 -> 213;
218 -> 208;
219 -> 210;
219 -> 208;
220 -> 208;
221 -> 218;
221 -> 220;
222 -> 219;
222 -> 220;
223 -> 221;
223 -> 220;
224 -> 220;
225 -> 223;
225 -> 224;
226 -> 225;
226 -> 224;
227 -> 226;
228 -> 0;
228 -> 227;
229 -> 228;
230 -> 229;
231 -> 229;
232 -> 0;
232 -> 231;
233 -> 232;
233 -> 230;
233 -> 229;
234 -> 233;
234 -> 227;
235 -> 220;
236 -> 222;
236 -> 235;
236 -> 220;
237 -> 234;
237 -> 236;
238 -> 211;
238 -> 208;
239 -> 212;
239 -> 208;
240 -> 214;
240 -> 208;
241 -> 215;
241 -> 208;
242 -> 216;
242 -> 208;
243 -> 208;
244 -> 217;
244 -> 243;
245 -> 237;
245 -> 243;
246 -> 238;
246 -> 243;
247 -> 239;
247 -> 243;
248 -> 240;
248 -> 243;
249 -> 241;
249 -> 243;
250 -> 242;
250 -> 243;
251 -> 244;
251 -> 243;
252 -> 245;
252 -> 243;
253 -> 246;
253 -> 243;
254 -> 247;
254 -> 243;
255 -> 248;
255 -> 243;
256 -> 249;
256 -> 243;
257 -> 250;
257 -> 243;
258 -> 243;
259 -> 258;
259 -> 243;
260 -> 243;
261 -> 251;
261 -> 260;
262 -> 252;
262 -> 260;
263 -> 253;
263 -> 260;
264 -> 254;
264 -> 260;
265 -> 255;
265 -> 260;
266 -> 256;
266 -> 260;
267 -> 257;
267 -> 260;
268 -> 259;
268 -> 260;
269 -> 264;
269 -> 260;
270 -> 266;
270 -> 260;
271 -> 260;
272 -> 269;
272 -> 271;
273 -> 270;
273 -> 271;
274 -> 261;
274 -> 271;
275 -> 274;
275 -> 205;
275 -> 271;
276 -> 275;
277 -> 273;
277 -> 275;
278 -> 272;
278 -> 275;
279 -> 275;
280 -> 276;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 278;
282 -> 279;
283 -> 276;
283 -> 279;
284 -> 279;
285 -> 282;
285 -> 284;
285 -> 279;
287 -> 286;
288 -> 286;
289 -> 286;
290 -> 286;
291 -> 286;
292 -> 287;
292 -> 286;
293 -> 288;
293 -> 286;
294 -> 289;
294 -> 286;
295 -> 290;
295 -> 286;
296 -> 295;
296 -> 286;
297 -> 0;
297 -> 286;
298 -> 292;
298 -> 291;
299 -> 293;
299 -> 291;
300 -> 294;
300 -> 291;
301 -> 296;
301 -> 291;
302 -> 297;
302 -> 291;
303 -> 291;
304 -> 300;
304 -> 291;
305 -> 299;
305 -> 291;
306 -> 303;
306 -> 304;
306 -> 305;
306 -> 291;
307 -> 303;
307 -> 291;
308 -> 303;
308 -> 291;
309 -> 303;
309 -> 291;
310 -> 298;
310 -> 303;
310 -> 291;
311 -> 298;
311 -> 291;
312 -> 291;
313 -> 311;
313 -> 312;
314 -> 313;
314 -> 312;
315 -> 0;
315 -> 314;
316 -> 315;
316 -> 303;
316 -> 291;
317 -> 301;
317 -> 291;
318 -> 317;
318 -> 303;
318 -> 291;
319 -> 302;
319 -> 291;
320 -> 0;
320 -> 291;
321 -> 319;
321 -> 303;
321 -> 291;
322 -> 286;
323 -> 0;
324 -> 0;
326 -> 323;
326 -> 325;
327 -> 324;
327 -> 325;
328 -> 325;
329 -> 325;
330 -> 325;
331 -> 326;
331 -> 325;
332 -> 327;
332 -> 325;
333 -> 328;
333 -> 325;
334 -> 329;
334 -> 325;
335 -> 334;
335 -> 325;
336 -> 0;
336 -> 325;
337 -> 331;
337 -> 330;
338 -> 332;
338 -> 330;
339 -> 333;
339 -> 330;
340 -> 335;
340 -> 330;
341 -> 336;
341 -> 330;
342 -> 330;
343 -> 339;
343 -> 330;
344 -> 338;
344 -> 330;
345 -> 342;
345 -> 343;
345 -> 344;
345 -> 330;
346 -> 342;
346 -> 330;
347 -> 342;
347 -> 330;
348 -> 342;
348 -> 330;
349 -> 337;
349 -> 342;
349 -> 330;
350 -> 337;
350 -> 330;
351 -> 330;
352 -> 350;
352 -> 351;
353 -> 352;
353 -> 351;
354 -> 0;
354 -> 353;
355 -> 354;
355 -> 342;
355 -> 330;
356 -> 340;
356 -> 330;
357 -> 356;
357 -> 342;
357 -> 330;
358 -> 341;
358 -> 330;
359 -> 358;
359 -> 319;
359 -> 330;
360 -> 0;
360 -> 330;
361 -> 359;
361 -> 342;
361 -> 330;
362 -> 325;
363 -> 0;
365 -> 363;
365 -> 364;
366 -> 362;
366 -> 364;
367 -> 365;
367 -> 366;
367 -> 345;
367 -> 364;
368 -> 365;
368 -> 364;
369 -> 366;
369 -> 364;
370 -> 364;
371 -> 364;
372 -> 369;
372 -> 371;
373 -> 370;
373 -> 371;
374 -> 372;
374 -> 345;
374 -> 348;
374 -> 349;
374 -> 371;
375 -> 372;
375 -> 345;
375 -> 371;
376 -> 372;
376 -> 345;
376 -> 371;
377 -> 372;
377 -> 345;
377 -> 357;
377 -> 371;
378 -> 371;
379 -> 372;
379 -> 378;
380 -> 379;
380 -> 345;
380 -> 346;
380 -> 361;
380 -> 378;
381 -> 371;
382 -> 374;
382 -> 381;
383 -> 375;
383 -> 381;
384 -> 376;
384 -> 381;
385 -> 377;
385 -> 381;
386 -> 380;
386 -> 381;
387 -> 373;
387 -> 381;
388 -> 381;
389 -> 388;
389 -> 384;
389 -> 383;
389 -> 381;
390 -> 388;
390 -> 381;
391 -> 388;
391 -> 381;
392 -> 388;
392 -> 381;
393 -> 382;
393 -> 381;
394 -> 381;
395 -> 393;
395 -> 394;
396 -> 395;
396 -> 394;
397 -> 0;
397 -> 396;
398 -> 397;
398 -> 388;
398 -> 381;
399 -> 385;
399 -> 345;
399 -> 346;
399 -> 361;
399 -> 347;
399 -> 355;
399 -> 348;
399 -> 349;
399 -> 357;
399 -> 356;
399 -> 359;
399 -> 381;
400 -> 386;
400 -> 399;
400 -> 381;
401 -> 0;
401 -> 381;
402 -> 365;
402 -> 370;
402 -> 364;
403 -> 368;
403 -> 370;
403 -> 364;
404 -> 370;
405 -> 0;
407 -> 405;
407 -> 406;
408 -> 362;
408 -> 406;
409 -> 407;
409 -> 408;
409 -> 400;
409 -> 406;
410 -> 407;
410 -> 406;
411 -> 406;
412 -> 410;
412 -> 411;
413 -> 412;
413 -> 411;
414 -> 412;
414 -> 413;
415 -> 408;
415 -> 406;
416 -> 406;
417 -> 406;
418 -> 415;
418 -> 417;
419 -> 416;
419 -> 417;
420 -> 418;
420 -> 400;
420 -> 417;
421 -> 418;
421 -> 400;
421 -> 417;
422 -> 418;
422 -> 400;
422 -> 417;
423 -> 418;
423 -> 400;
423 -> 417;
424 -> 417;
425 -> 418;
425 -> 424;
426 -> 425;
426 -> 400;
426 -> 424;
427 -> 417;
428 -> 419;
428 -> 427;
429 -> 427;
430 -> 429;
430 -> 422;
430 -> 421;
430 -> 427;
431 -> 429;
431 -> 427;
432 -> 429;
432 -> 427;
433 -> 429;
433 -> 427;
434 -> 427;
435 -> 0;
435 -> 427;
436 -> 407;
436 -> 416;
436 -> 406;
437 -> 414;
437 -> 416;
437 -> 406;
438 -> 416;
439 -> 0;
441 -> 439;
441 -> 440;
442 -> 362;
442 -> 440;
443 -> 441;
443 -> 442;
443 -> 426;
443 -> 440;
444 -> 441;
444 -> 440;
445 -> 440;
446 -> 444;
446 -> 445;
447 -> 446;
447 -> 445;
448 -> 446;
448 -> 447;
449 -> 442;
449 -> 440;
450 -> 440;
451 -> 440;
452 -> 449;
452 -> 451;
453 -> 450;
453 -> 451;
454 -> 452;
454 -> 426;
454 -> 451;
455 -> 452;
455 -> 426;
455 -> 451;
456 -> 452;
456 -> 426;
456 -> 451;
457 -> 452;
457 -> 426;
457 -> 451;
458 -> 451;
459 -> 452;
459 -> 458;
460 -> 459;
460 -> 426;
460 -> 458;
461 -> 451;
462 -> 453;
462 -> 461;
463 -> 461;
464 -> 463;
464 -> 456;
464 -> 455;
464 -> 461;
465 -> 463;
465 -> 461;
466 -> 463;
466 -> 461;
467 -> 463;
467 -> 461;
468 -> 461;
469 -> 0;
469 -> 461;
470 -> 441;
470 -> 450;
470 -> 440;
471 -> 448;
471 -> 450;
471 -> 440;
472 -> 450;
473 -> 0;
475 -> 473;
475 -> 474;
476 -> 362;
476 -> 474;
477 -> 475;
477 -> 476;
477 -> 460;
477 -> 474;
478 -> 475;
478 -> 474;
479 -> 474;
480 -> 478;
480 -> 479;
481 -> 480;
481 -> 479;
482 -> 480;
482 -> 481;
483 -> 476;
483 -> 474;
484 -> 474;
485 -> 474;
486 -> 483;
486 -> 485;
487 -> 484;
487 -> 485;
488 -> 486;
488 -> 460;
488 -> 485;
489 -> 486;
489 -> 460;
489 -> 485;
490 -> 486;
490 -> 460;
490 -> 485;
491 -> 486;
491 -> 460;
491 -> 485;
492 -> 485;
493 -> 486;
493 -> 492;
494 -> 493;
494 -> 460;
494 -> 492;
495 -> 485;
496 -> 487;
496 -> 495;
497 -> 495;
498 -> 497;
498 -> 490;
498 -> 489;
498 -> 495;
499 -> 497;
499 -> 495;
500 -> 497;
500 -> 495;
501 -> 497;
501 -> 495;
502 -> 495;
503 -> 0;
503 -> 495;
504 -> 475;
504 -> 484;
504 -> 474;
505 -> 482;
505 -> 484;
505 -> 474;
506 -> 484;
507 -> 0;
509 -> 507;
509 -> 508;
510 -> 362;
510 -> 508;
511 -> 509;
511 -> 510;
511 -> 494;
511 -> 508;
512 -> 509;
512 -> 508;
513 -> 508;
514 -> 512;
514 -> 513;
515 -> 514;
515 -> 513;
516 -> 514;
516 -> 515;
517 -> 510;
517 -> 508;
518 -> 508;
519 -> 508;
520 -> 517;
520 -> 519;
521 -> 518;
521 -> 519;
522 -> 520;
522 -> 494;
522 -> 519;
523 -> 520;
523 -> 494;
523 -> 519;
524 -> 520;
524 -> 494;
524 -> 519;
525 -> 520;
525 -> 494;
525 -> 519;
526 -> 519;
527 -> 520;
527 -> 526;
528 -> 527;
528 -> 494;
528 -> 526;
529 -> 519;
530 -> 521;
530 -> 529;
531 -> 529;
532 -> 531;
532 -> 524;
532 -> 523;
532 -> 529;
533 -> 531;
533 -> 529;
534 -> 531;
534 -> 529;
535 -> 531;
535 -> 529;
536 -> 529;
537 -> 0;
537 -> 529;
538 -> 509;
538 -> 518;
538 -> 508;
539 -> 516;
539 -> 518;
539 -> 508;
540 -> 518;
541 -> 0;
543 -> 541;
543 -> 542;
544 -> 362;
544 -> 542;
545 -> 543;
545 -> 544;
545 -> 528;
545 -> 542;
546 -> 543;
546 -> 542;
547 -> 542;
548 -> 546;
548 -> 547;
549 -> 548;
549 -> 547;
550 -> 548;
550 -> 549;
551 -> 544;
551 -> 542;
552 -> 542;
553 -> 542;
554 -> 551;
554 -> 553;
555 -> 552;
555 -> 553;
556 -> 554;
556 -> 528;
556 -> 553;
557 -> 554;
557 -> 528;
557 -> 553;
558 -> 554;
558 -> 528;
558 -> 553;
559 -> 554;
559 -> 528;
559 -> 553;
560 -> 553;
561 -> 554;
561 -> 560;
562 -> 561;
562 -> 528;
562 -> 560;
563 -> 553;
564 -> 555;
564 -> 563;
565 -> 563;
566 -> 565;
566 -> 558;
566 -> 557;
566 -> 563;
567 -> 565;
567 -> 563;
568 -> 565;
568 -> 563;
569 -> 565;
569 -> 563;
570 -> 563;
571 -> 0;
571 -> 563;
572 -> 543;
572 -> 552;
572 -> 542;
573 -> 550;
573 -> 552;
573 -> 542;
574 -> 552;
575 -> 0;
577 -> 575;
577 -> 576;
578 -> 362;
578 -> 576;
579 -> 577;
579 -> 578;
579 -> 562;
579 -> 576;
580 -> 578;
580 -> 579;
581 -> 580;
582 -> 0;
584 -> 582;
584 -> 583;
585 -> 362;
585 -> 583;
586 -> 584;
586 -> 585;
586 -> 562;
586 -> 583;
587 -> 584;
587 -> 583;
588 -> 583;
589 -> 587;
589 -> 588;
590 -> 589;
590 -> 588;
591 -> 589;
591 -> 590;
592 -> 585;
592 -> 583;
593 -> 583;
594 -> 583;
595 -> 592;
595 -> 594;
596 -> 593;
596 -> 594;
597 -> 595;
597 -> 562;
597 -> 594;
598 -> 595;
598 -> 562;
598 -> 594;
599 -> 595;
599 -> 562;
599 -> 594;
600 -> 595;
600 -> 562;
600 -> 594;
601 -> 594;
602 -> 595;
602 -> 601;
603 -> 602;
603 -> 562;
603 -> 601;
604 -> 594;
605 -> 596;
605 -> 604;
606 -> 604;
607 -> 606;
607 -> 599;
607 -> 598;
607 -> 604;
608 -> 606;
608 -> 604;
609 -> 606;
609 -> 604;
610 -> 606;
610 -> 604;
611 -> 604;
612 -> 0;
612 -> 604;
613 -> 584;
613 -> 593;
613 -> 583;
614 -> 591;
614 -> 593;
614 -> 583;
615 -> 593;
616 -> 0;
618 -> 616;
618 -> 617;
619 -> 362;
619 -> 617;
620 -> 618;
620 -> 619;
620 -> 603;
620 -> 617;
621 -> 618;
621 -> 617;
622 -> 617;
623 -> 621;
623 -> 622;
624 -> 623;
624 -> 622;
625 -> 623;
625 -> 624;
626 -> 619;
626 -> 617;
627 -> 617;
628 -> 617;
629 -> 626;
629 -> 628;
630 -> 627;
630 -> 628;
631 -> 629;
631 -> 603;
631 -> 628;
632 -> 629;
632 -> 603;
632 -> 628;
633 -> 629;
633 -> 603;
633 -> 628;
634 -> 629;
634 -> 603;
634 -> 628;
635 -> 628;
636 -> 629;
636 -> 635;
637 -> 636;
637 -> 603;
637 -> 635;
638 -> 628;
639 -> 630;
639 -> 638;
640 -> 638;
641 -> 640;
641 -> 633;
641 -> 632;
641 -> 638;
642 -> 640;
642 -> 638;
643 -> 640;
643 -> 638;
644 -> 640;
644 -> 638;
645 -> 638;
646 -> 0;
646 -> 638;
647 -> 618;
647 -> 627;
647 -> 617;
648 -> 625;
648 -> 627;
648 -> 617;
649 -> 627;
650 -> 0;
652 -> 650;
652 -> 651;
653 -> 362;
653 -> 651;
654 -> 652;
654 -> 653;
654 -> 637;
654 -> 651;
655 -> 652;
655 -> 651;
656 -> 651;
657 -> 655;
657 -> 656;
658 -> 657;
658 -> 656;
659 -> 657;
659 -> 658;
660 -> 653;
660 -> 651;
661 -> 651;
662 -> 651;
663 -> 660;
663 -> 662;
664 -> 661;
664 -> 662;
665 -> 663;
665 -> 637;
665 -> 662;
666 -> 663;
666 -> 637;
666 -> 662;
667 -> 663;
667 -> 637;
667 -> 662;
668 -> 663;
668 -> 637;
668 -> 662;
669 -> 662;
670 -> 663;
670 -> 669;
671 -> 670;
671 -> 637;
671 -> 669;
672 -> 662;
673 -> 664;
673 -> 672;
674 -> 672;
675 -> 674;
675 -> 667;
675 -> 666;
675 -> 672;
676 -> 674;
676 -> 672;
677 -> 674;
677 -> 672;
678 -> 674;
678 -> 672;
679 -> 672;
680 -> 0;
680 -> 672;
681 -> 652;
681 -> 661;
681 -> 651;
682 -> 659;
682 -> 661;
682 -> 651;
683 -> 661;
684 -> 0;
686 -> 684;
686 -> 685;
687 -> 362;
687 -> 685;
688 -> 686;
688 -> 687;
688 -> 671;
688 -> 685;
689 -> 687;
689 -> 685;
690 -> 685;
691 -> 685;
692 -> 689;
692 -> 691;
693 -> 690;
693 -> 691;
694 -> 692;
694 -> 671;
694 -> 691;
695 -> 692;
695 -> 671;
695 -> 691;
696 -> 692;
696 -> 671;
696 -> 691;
697 -> 692;
697 -> 671;
697 -> 691;
698 -> 691;
699 -> 692;
699 -> 698;
700 -> 699;
700 -> 671;
700 -> 698;
701 -> 691;
702 -> 693;
702 -> 701;
703 -> 701;
704 -> 703;
704 -> 696;
704 -> 695;
704 -> 701;
705 -> 703;
705 -> 701;
706 -> 703;
706 -> 701;
707 -> 703;
707 -> 701;
708 -> 701;
709 -> 0;
709 -> 701;
710 -> 686;
710 -> 690;
710 -> 685;
711 -> 690;
712 -> 362;
715 -> 712;
715 -> 714;
716 -> 713;
716 -> 714;
717 -> 714;
718 -> 714;
719 -> 715;
719 -> 718;
720 -> 719;
720 -> 700;
720 -> 718;
721 -> 720;
721 -> 714;
722 -> 714;
723 -> 716;
723 -> 714;
724 -> 717;
724 -> 714;
725 -> 723;
725 -> 724;
725 -> 714;
726 -> 725;
726 -> 722;
726 -> 714;
727 -> 721;
727 -> 722;
727 -> 700;
727 -> 726;
727 -> 725;
727 -> 714;
728 -> 714;
729 -> 727;
729 -> 728;
730 -> 715;
730 -> 728;
731 -> 729;
731 -> 728;
732 -> 0;
732 -> 728;
733 -> 730;
733 -> 728;
734 -> 728;
735 -> 728;
736 -> 733;
736 -> 735;
737 -> 734;
737 -> 735;
738 -> 736;
738 -> 731;
738 -> 735;
739 -> 736;
739 -> 731;
739 -> 735;
740 -> 736;
740 -> 731;
740 -> 735;
741 -> 736;
741 -> 731;
741 -> 735;
742 -> 735;
743 -> 736;
743 -> 742;
744 -> 743;
744 -> 731;
744 -> 742;
745 -> 735;
746 -> 737;
746 -> 745;
747 -> 745;
748 -> 747;
748 -> 740;
748 -> 739;
748 -> 745;
749 -> 747;
749 -> 745;
750 -> 747;
750 -> 745;
751 -> 747;
751 -> 745;
752 -> 745;
753 -> 0;
753 -> 745;
754 -> 731;
754 -> 734;
754 -> 728;
755 -> 734;
755 -> 714;
756 -> 755;
757 -> 0;
759 -> 757;
759 -> 758;
760 -> 759;
760 -> 758;
761 -> 758;
762 -> 760;
762 -> 761;
763 -> 762;
763 -> 761;
764 -> 763;
765 -> 758;
766 -> 759;
766 -> 758;
767 -> 0;
767 -> 766;
769 -> 767;
769 -> 768;
771 -> 769;
771 -> 770;
772 -> 362;
772 -> 770;
773 -> 771;
773 -> 772;
773 -> 744;
773 -> 770;
774 -> 771;
774 -> 770;
775 -> 770;
776 -> 774;
776 -> 775;
777 -> 776;
777 -> 775;
778 -> 776;
778 -> 777;
779 -> 772;
779 -> 770;
780 -> 770;
781 -> 770;
782 -> 779;
782 -> 781;
783 -> 780;
783 -> 781;
784 -> 782;
784 -> 744;
784 -> 781;
785 -> 782;
785 -> 744;
785 -> 781;
786 -> 782;
786 -> 744;
786 -> 781;
787 -> 782;
787 -> 744;
787 -> 781;
788 -> 781;
789 -> 782;
789 -> 788;
790 -> 789;
790 -> 744;
790 -> 788;
791 -> 781;
792 -> 783;
792 -> 791;
793 -> 791;
794 -> 793;
794 -> 786;
794 -> 785;
794 -> 791;
795 -> 793;
795 -> 791;
796 -> 793;
796 -> 791;
797 -> 793;
797 -> 791;
798 -> 791;
799 -> 0;
799 -> 791;
800 -> 771;
800 -> 780;
800 -> 770;
801 -> 778;
801 -> 780;
801 -> 770;
802 -> 780;
803 -> 0;
805 -> 803;
805 -> 804;
806 -> 805;
806 -> 804;
807 -> 804;
808 -> 806;
808 -> 807;
809 -> 808;
809 -> 807;
810 -> 809;
811 -> 804;
812 -> 805;
812 -> 804;
813 -> 0;
813 -> 812;
815 -> 813;
815 -> 814;
816 -> 362;
816 -> 814;
817 -> 815;
817 -> 816;
817 -> 790;
817 -> 814;
818 -> 815;
818 -> 814;
819 -> 814;
820 -> 818;
820 -> 819;
821 -> 820;
821 -> 819;
822 -> 820;
822 -> 821;
823 -> 816;
823 -> 814;
824 -> 814;
825 -> 814;
826 -> 823;
826 -> 825;
827 -> 824;
827 -> 825;
828 -> 826;
828 -> 790;
828 -> 825;
829 -> 826;
829 -> 790;
829 -> 825;
830 -> 826;
830 -> 790;
830 -> 825;
831 -> 826;
831 -> 790;
831 -> 825;
832 -> 825;
833 -> 826;
833 -> 832;
834 -> 833;
834 -> 790;
834 -> 832;
835 -> 825;
836 -> 827;
836 -> 835;
837 -> 835;
838 -> 837;
838 -> 830;
838 -> 829;
838 -> 835;
839 -> 837;
839 -> 835;
840 -> 837;
840 -> 835;
841 -> 837;
841 -> 835;
842 -> 835;
843 -> 0;
843 -> 835;
844 -> 815;
844 -> 824;
844 -> 814;
845 -> 822;
845 -> 824;
845 -> 814;
846 -> 824;
847 -> 0;
849 -> 847;
849 -> 848;
850 -> 362;
850 -> 848;
851 -> 849;
851 -> 850;
851 -> 834;
851 -> 848;
852 -> 849;
852 -> 848;
853 -> 848;
854 -> 852;
854 -> 853;
855 -> 854;
855 -> 853;
856 -> 854;
856 -> 855;
857 -> 850;
857 -> 848;
858 -> 848;
859 -> 848;
860 -> 857;
860 -> 859;
861 -> 858;
861 -> 859;
862 -> 860;
862 -> 834;
862 -> 859;
863 -> 860;
863 -> 834;
863 -> 859;
864 -> 860;
864 -> 834;
864 -> 859;
865 -> 860;
865 -> 834;
865 -> 859;
866 -> 859;
867 -> 860;
867 -> 866;
868 -> 867;
868 -> 834;
868 -> 866;
869 -> 859;
870 -> 861;
870 -> 869;
871 -> 869;
872 -> 871;
872 -> 864;
872 -> 863;
872 -> 869;
873 -> 871;
873 -> 869;
874 -> 871;
874 -> 869;
875 -> 871;
875 -> 869;
876 -> 869;
877 -> 0;
877 -> 869;
878 -> 849;
878 -> 858;
878 -> 848;
879 -> 856;
879 -> 858;
879 -> 848;
880 -> 858;
881 -> 615;
883 -> 882;
884 -> 0;
885 -> 0;
886 -> 0;
888 -> 884;
888 -> 887;
889 -> 885;
889 -> 887;
890 -> 886;
890 -> 887;
891 -> 887;
892 -> 887;
893 -> 888;
893 -> 887;
894 -> 889;
894 -> 887;
895 -> 890;
895 -> 887;
896 -> 891;
896 -> 887;
897 -> 896;
897 -> 887;
898 -> 0;
898 -> 887;
899 -> 893;
899 -> 892;
900 -> 894;
900 -> 892;
901 -> 895;
901 -> 892;
902 -> 897;
902 -> 892;
903 -> 898;
903 -> 892;
904 -> 892;
905 -> 901;
905 -> 892;
906 -> 900;
906 -> 892;
907 -> 904;
907 -> 905;
907 -> 906;
907 -> 892;
908 -> 904;
908 -> 892;
909 -> 904;
909 -> 892;
910 -> 904;
910 -> 892;
911 -> 899;
911 -> 904;
911 -> 892;
912 -> 899;
912 -> 892;
913 -> 892;
914 -> 912;
914 -> 913;
915 -> 914;
915 -> 913;
916 -> 914;
916 -> 915;
917 -> 916;
917 -> 904;
917 -> 892;
918 -> 902;
918 -> 892;
919 -> 918;
919 -> 904;
919 -> 892;
920 -> 903;
920 -> 892;
921 -> 920;
921 -> 868;
921 -> 892;
922 -> 0;
922 -> 892;
923 -> 883;
925 -> 923;
925 -> 924;
926 -> 887;
926 -> 924;
927 -> 925;
927 -> 924;
928 -> 0;
928 -> 924;
929 -> 927;
929 -> 928;
929 -> 882;
929 -> 921;
929 -> 924;
930 -> 926;
930 -> 924;
931 -> 924;
932 -> 924;
933 -> 930;
933 -> 932;
934 -> 931;
934 -> 932;
935 -> 933;
935 -> 907;
935 -> 910;
935 -> 911;
935 -> 932;
936 -> 933;
936 -> 907;
936 -> 932;
937 -> 933;
937 -> 907;
937 -> 932;
938 -> 933;
938 -> 907;
938 -> 919;
938 -> 932;
939 -> 932;
940 -> 933;
940 -> 939;
941 -> 940;
941 -> 907;
941 -> 908;
941 -> 921;
941 -> 939;
942 -> 932;
943 -> 935;
943 -> 942;
944 -> 936;
944 -> 942;
945 -> 937;
945 -> 942;
946 -> 938;
946 -> 942;
947 -> 934;
947 -> 942;
948 -> 942;
949 -> 948;
949 -> 945;
949 -> 944;
949 -> 942;
950 -> 948;
950 -> 942;
951 -> 948;
951 -> 942;
952 -> 948;
952 -> 942;
953 -> 943;
953 -> 942;
954 -> 942;
955 -> 953;
955 -> 954;
956 -> 955;
956 -> 954;
957 -> 955;
957 -> 956;
958 -> 957;
958 -> 948;
958 -> 942;
959 -> 946;
959 -> 907;
959 -> 908;
959 -> 921;
959 -> 909;
959 -> 917;
959 -> 910;
959 -> 911;
959 -> 919;
959 -> 918;
959 -> 929;
959 -> 942;
960 -> 0;
960 -> 942;
961 -> 929;
961 -> 931;
961 -> 924;
962 -> 931;
966 -> 964;
966 -> 965;
966 -> 963;
967 -> 966;
967 -> 963;
968 -> 966;
968 -> 963;
969 -> 967;
969 -> 963;
970 -> 0;
970 -> 963;
971 -> 969;
971 -> 970;
971 -> 966;
971 -> 959;
971 -> 963;
972 -> 968;
972 -> 963;
973 -> 963;
974 -> 963;
975 -> 972;
975 -> 974;
976 -> 973;
976 -> 974;
977 -> 975;
977 -> 971;
977 -> 974;
978 -> 975;
978 -> 971;
978 -> 974;
979 -> 975;
979 -> 971;
979 -> 974;
980 -> 974;
981 -> 975;
981 -> 980;
982 -> 974;
983 -> 976;
983 -> 982;
984 -> 982;
985 -> 984;
985 -> 979;
985 -> 978;
985 -> 982;
986 -> 984;
986 -> 982;
987 -> 984;
987 -> 982;
988 -> 984;
988 -> 982;
989 -> 982;
990 -> 0;
990 -> 982;
991 -> 971;
991 -> 973;
991 -> 963;
992 -> 966;
992 -> 973;
992 -> 971;
992 -> 985;
992 -> 986;
992 -> 991;
992 -> 987;
992 -> 977;
992 -> 988;
993 -> 438;
993 -> 430;
993 -> 431;
993 -> 426;
993 -> 432;
993 -> 420;
993 -> 437;
993 -> 433;
993 -> 436;
993 -> 423;
993 -> 992;
993 -> 963;
994 -> 993;
995 -> 574;
996 -> 649;
997 -> 649;
998 -> 615;
999 -> 0;
1000 -> 0;
1002 -> 999;
1002 -> 1001;
1003 -> 1000;
1003 -> 1001;
1004 -> 1001;
1005 -> 1002;
1005 -> 1001;
1006 -> 1003;
1006 -> 1001;
1007 -> 0;
1007 -> 1001;
1008 -> 1004;
1008 -> 1001;
1009 -> 1001;
1010 -> 1005;
1010 -> 1009;
1011 -> 1006;
1011 -> 1009;
1012 -> 1007;
1012 -> 1009;
1013 -> 1008;
1013 -> 1009;
1014 -> 1009;
1015 -> 1009;
1016 -> 1009;
1017 -> 1009;
1018 -> 1009;
1019 -> 1009;
1020 -> 1009;
1021 -> 1009;
1022 -> 1009;
1023 -> 1009;
1024 -> 1009;
1025 -> 1009;
1026 -> 1009;
1027 -> 1009;
1028 -> 1009;
1029 -> 1009;
1030 -> 1009;
1031 -> 1009;
1032 -> 1009;
1033 -> 1009;
1034 -> 1009;
1035 -> 1009;
1036 -> 1009;
1037 -> 1009;
1038 -> 1010;
1038 -> 1009;
1039 -> 1011;
1039 -> 1009;
1040 -> 1012;
1040 -> 1009;
1041 -> 1013;
1041 -> 1009;
1042 -> 1014;
1042 -> 1009;
1043 -> 1015;
1043 -> 1009;
1044 -> 1016;
1044 -> 1009;
1045 -> 1017;
1045 -> 1009;
1046 -> 1018;
1046 -> 1009;
1047 -> 1019;
1047 -> 1009;
1048 -> 1020;
1048 -> 1009;
1049 -> 1021;
1049 -> 1009;
1050 -> 1022;
1050 -> 1009;
1051 -> 1023;
1051 -> 1009;
1052 -> 1024;
1052 -> 1009;
1053 -> 1025;
1053 -> 1009;
1054 -> 1026;
1054 -> 1009;
1055 -> 1027;
1055 -> 1009;
1056 -> 1028;
1056 -> 1009;
1057 -> 1009;
1058 -> 1009;
1059 -> 1029;
1059 -> 1009;
1060 -> 1030;
1060 -> 1009;
1061 -> 1009;
1062 -> 1031;
1062 -> 1009;
1063 -> 1032;
1063 -> 1009;
1064 -> 1033;
1064 -> 1009;
1065 -> 1035;
1065 -> 1009;
1066 -> 1009;
1067 -> 1034;
1067 -> 1009;
1068 -> 0;
1068 -> 1009;
1069 -> 1036;
1069 -> 1009;
1070 -> 1038;
1070 -> 1037;
1071 -> 1039;
1071 -> 1037;
1072 -> 1040;
1072 -> 1037;
1073 -> 1041;
1073 -> 1037;
1074 -> 1042;
1074 -> 1037;
1075 -> 1043;
1075 -> 1037;
1076 -> 1044;
1076 -> 1037;
1077 -> 1045;
1077 -> 1037;
1078 -> 1046;
1078 -> 1037;
1079 -> 1047;
1079 -> 1037;
1080 -> 1048;
1080 -> 1037;
1081 -> 1049;
1081 -> 1037;
1082 -> 1050;
1082 -> 1037;
1083 -> 1051;
1083 -> 1037;
1084 -> 1052;
1084 -> 1037;
1085 -> 1053;
1085 -> 1037;
1086 -> 1054;
1086 -> 1037;
1087 -> 1055;
1087 -> 1037;
1088 -> 1056;
1088 -> 1037;
1089 -> 1057;
1089 -> 1037;
1090 -> 1058;
1090 -> 1037;
1091 -> 1059;
1091 -> 1037;
1092 -> 1060;
1092 -> 1037;
1093 -> 1061;
1093 -> 1037;
1094 -> 1062;
1094 -> 1037;
1095 -> 1063;
1095 -> 1037;
1096 -> 1064;
1096 -> 1037;
1097 -> 1065;
1097 -> 1037;
1098 -> 1066;
1098 -> 1037;
1099 -> 1067;
1099 -> 1037;
1100 -> 1068;
1100 -> 1037;
1101 -> 1069;
1101 -> 1037;
1102 -> 1037;
1103 -> 1070;
1103 -> 1037;
1104 -> 1071;
1104 -> 1037;
1105 -> 1072;
1105 -> 1037;
1106 -> 1073;
1106 -> 1037;
1107 -> 1074;
1107 -> 1037;
1108 -> 1079;
1108 -> 1037;
1109 -> 1080;
1109 -> 1037;
1110 -> 1081;
1110 -> 1037;
1111 -> 1082;
1111 -> 1037;
1112 -> 1099;
1112 -> 1037;
1113 -> 1076;
1113 -> 1037;
1114 -> 1077;
1114 -> 1037;
1115 -> 1083;
1115 -> 1037;
1116 -> 1084;
1116 -> 1037;
1117 -> 1085;
1117 -> 1037;
1118 -> 1086;
1118 -> 1037;
1119 -> 1118;
1119 -> 1037;
1120 -> 1087;
1120 -> 1037;
1121 -> 1088;
1121 -> 1037;
1122 -> 1089;
1122 -> 1037;
1123 -> 1090;
1123 -> 1037;
1124 -> 1091;
1124 -> 1037;
1125 -> 1092;
1125 -> 1037;
1126 -> 1093;
1126 -> 1037;
1127 -> 1094;
1127 -> 1037;
1128 -> 1095;
1128 -> 1037;
1129 -> 1096;
1129 -> 1037;
1130 -> 1097;
1130 -> 1037;
1131 -> 1098;
1131 -> 1037;
1132 -> 1102;
1132 -> 1103;
1132 -> 1104;
1132 -> 1105;
1132 -> 1106;
1132 -> 1107;
1132 -> 1108;
1132 -> 1109;
1132 -> 1110;
1132 -> 1111;
1132 -> 1112;
1132 -> 1113;
1132 -> 1114;
1132 -> 1115;
1132 -> 1116;
1132 -> 1117;
1132 -> 1119;
1132 -> 1120;
1132 -> 1121;
1132 -> 1122;
1132 -> 1123;
1132 -> 1124;
1132 -> 1125;
1132 -> 1126;
1132 -> 1127;
1132 -> 1128;
1132 -> 1129;
1132 -> 1130;
1132 -> 1131;
1132 -> 1057;
1132 -> 1037;
1133 -> 1102;
1133 -> 1037;
1134 -> 1102;
1134 -> 1037;
1135 -> 1102;
1135 -> 1037;
1136 -> 1075;
1136 -> 1037;
1137 -> 1136;
1137 -> 1102;
1137 -> 1037;
1138 -> 1078;
1138 -> 1102;
1138 -> 1037;
1139 -> 1100;
1139 -> 1102;
1139 -> 1037;
1140 -> 1101;
1140 -> 1102;
1140 -> 1037;
1141 -> 1009;
1142 -> 0;
1143 -> 0;
1145 -> 1142;
1145 -> 1144;
1146 -> 1143;
1146 -> 1144;
1147 -> 1144;
1148 -> 1145;
1148 -> 1144;
1149 -> 1146;
1149 -> 1144;
1150 -> 0;
1150 -> 1144;
1151 -> 1147;
1151 -> 1144;
1152 -> 1144;
1153 -> 1148;
1153 -> 1152;
1154 -> 1149;
1154 -> 1152;
1155 -> 1150;
1155 -> 1152;
1156 -> 1151;
1156 -> 1152;
1157 -> 1152;
1158 -> 1152;
1159 -> 1152;
1160 -> 1152;
1161 -> 1152;
1162 -> 1152;
1163 -> 1152;
1164 -> 1152;
1165 -> 1152;
1166 -> 1152;
1167 -> 1152;
1168 -> 1152;
1169 -> 1152;
1170 -> 1152;
1171 -> 1152;
1172 -> 1152;
1173 -> 1152;
1174 -> 1152;
1175 -> 1152;
1176 -> 1152;
1177 -> 1152;
1178 -> 1152;
1179 -> 1152;
1180 -> 1152;
1181 -> 1153;
1181 -> 1152;
1182 -> 1154;
1182 -> 1152;
1183 -> 1155;
1183 -> 1152;
1184 -> 1156;
1184 -> 1152;
1185 -> 1157;
1185 -> 1152;
1186 -> 1158;
1186 -> 1152;
1187 -> 1159;
1187 -> 1152;
1188 -> 1160;
1188 -> 1152;
1189 -> 1161;
1189 -> 1152;
1190 -> 1162;
1190 -> 1152;
1191 -> 1163;
1191 -> 1152;
1192 -> 1164;
1192 -> 1152;
1193 -> 1165;
1193 -> 1152;
1194 -> 1166;
1194 -> 1152;
1195 -> 1167;
1195 -> 1152;
1196 -> 1168;
1196 -> 1152;
1197 -> 1169;
1197 -> 1152;
1198 -> 1170;
1198 -> 1152;
1199 -> 1171;
1199 -> 1152;
1200 -> 1152;
1201 -> 1152;
1202 -> 1172;
1202 -> 1152;
1203 -> 1173;
1203 -> 1152;
1204 -> 1152;
1205 -> 1174;
1205 -> 1152;
1206 -> 1175;
1206 -> 1152;
1207 -> 1176;
1207 -> 1152;
1208 -> 1178;
1208 -> 1152;
1209 -> 1152;
1210 -> 1177;
1210 -> 1152;
1211 -> 0;
1211 -> 1152;
1212 -> 1179;
1212 -> 1152;
1213 -> 1181;
1213 -> 1180;
1214 -> 1182;
1214 -> 1180;
1215 -> 1183;
1215 -> 1180;
1216 -> 1184;
1216 -> 1180;
1217 -> 1185;
1217 -> 1180;
1218 -> 1186;
1218 -> 1180;
1219 -> 1187;
1219 -> 1180;
1220 -> 1188;
1220 -> 1180;
1221 -> 1189;
1221 -> 1180;
1222 -> 1190;
1222 -> 1180;
1223 -> 1191;
1223 -> 1180;
1224 -> 1192;
1224 -> 1180;
1225 -> 1193;
1225 -> 1180;
1226 -> 1194;
1226 -> 1180;
1227 -> 1195;
1227 -> 1180;
1228 -> 1196;
1228 -> 1180;
1229 -> 1197;
1229 -> 1180;
1230 -> 1198;
1230 -> 1180;
1231 -> 1199;
1231 -> 1180;
1232 -> 1200;
1232 -> 1180;
1233 -> 1201;
1233 -> 1180;
1234 -> 1202;
1234 -> 1180;
1235 -> 1203;
1235 -> 1180;
1236 -> 1204;
1236 -> 1180;
1237 -> 1205;
1237 -> 1180;
1238 -> 1206;
1238 -> 1180;
1239 -> 1207;
1239 -> 1180;
1240 -> 1208;
1240 -> 1180;
1241 -> 1209;
1241 -> 1180;
1242 -> 1210;
1242 -> 1180;
1243 -> 1211;
1243 -> 1180;
1244 -> 1212;
1244 -> 1180;
1245 -> 1180;
1246 -> 1213;
1246 -> 1180;
1247 -> 1214;
1247 -> 1180;
1248 -> 1215;
1248 -> 1180;
1249 -> 1216;
1249 -> 1180;
1250 -> 1217;
1250 -> 1180;
1251 -> 1222;
1251 -> 1180;
1252 -> 1223;
1252 -> 1180;
1253 -> 1224;
1253 -> 1180;
1254 -> 1225;
1254 -> 1180;
1255 -> 1242;
1255 -> 1180;
1256 -> 1219;
1256 -> 1180;
1257 -> 1220;
1257 -> 1180;
1258 -> 1226;
1258 -> 1180;
1259 -> 1227;
1259 -> 1180;
1260 -> 1228;
1260 -> 1180;
1261 -> 1229;
1261 -> 1180;
1262 -> 1261;
1262 -> 1180;
1263 -> 1230;
1263 -> 1180;
1264 -> 1231;
1264 -> 1180;
1265 -> 1232;
1265 -> 1180;
1266 -> 1233;
1266 -> 1180;
1267 -> 1234;
1267 -> 1180;
1268 -> 1235;
1268 -> 1180;
1269 -> 1236;
1269 -> 1180;
1270 -> 1237;
1270 -> 1180;
1271 -> 1238;
1271 -> 1180;
1272 -> 1239;
1272 -> 1180;
1273 -> 1240;
1273 -> 1180;
1274 -> 1241;
1274 -> 1180;
1275 -> 1245;
1275 -> 1246;
1275 -> 1247;
1275 -> 1248;
1275 -> 1249;
1275 -> 1250;
1275 -> 1251;
1275 -> 1252;
1275 -> 1253;
1275 -> 1254;
1275 -> 1255;
1275 -> 1256;
1275 -> 1257;
1275 -> 1258;
1275 -> 1259;
1275 -> 1260;
1275 -> 1262;
1275 -> 1263;
1275 -> 1264;
1275 -> 1265;
1275 -> 1266;
1275 -> 1267;
1275 -> 1268;
1275 -> 1269;
1275 -> 1270;
1275 -> 1271;
1275 -> 1272;
1275 -> 1273;
1275 -> 1274;
1275 -> 1200;
1275 -> 1180;
1276 -> 1245;
1276 -> 1180;
1277 -> 1245;
1277 -> 1180;
1278 -> 1245;
1278 -> 1180;
1279 -> 1218;
1279 -> 1180;
1280 -> 1279;
1280 -> 1245;
1280 -> 1180;
1281 -> 1221;
1281 -> 1245;
1281 -> 1180;
1282 -> 1243;
1282 -> 1245;
1282 -> 1180;
1283 -> 1244;
1283 -> 1245;
1283 -> 1180;
1284 -> 1152;
1287 -> 1285;
1287 -> 1286;
1288 -> 1141;
1288 -> 1286;
1289 -> 1287;
1289 -> 1288;
1289 -> 1132;
1289 -> 1286;
1290 -> 1288;
1290 -> 1286;
1291 -> 1286;
1292 -> 1286;
1293 -> 1290;
1293 -> 1292;
1294 -> 1291;
1294 -> 1292;
1295 -> 1293;
1295 -> 1132;
1295 -> 1292;
1296 -> 1293;
1296 -> 1132;
1296 -> 1292;
1297 -> 1293;
1297 -> 1132;
1297 -> 1292;
1298 -> 1293;
1298 -> 1132;
1298 -> 1292;
1299 -> 1293;
1299 -> 1132;
1299 -> 1137;
1299 -> 1292;
1300 -> 1293;
1300 -> 1132;
1300 -> 1292;
1301 -> 1293;
1301 -> 1132;
1301 -> 1292;
1302 -> 1293;
1302 -> 1132;
1302 -> 1133;
1302 -> 1138;
1302 -> 1292;
1303 -> 1293;
1303 -> 1132;
1303 -> 1292;
1304 -> 1293;
1304 -> 1132;
1304 -> 1292;
1305 -> 1293;
1305 -> 1132;
1305 -> 1292;
1306 -> 1293;
1306 -> 1132;
1306 -> 1292;
1307 -> 1293;
1307 -> 1132;
1307 -> 1292;
1308 -> 1293;
1308 -> 1132;
1308 -> 1292;
1309 -> 1293;
1309 -> 1132;
1309 -> 1292;
1310 -> 1293;
1310 -> 1132;
1310 -> 1292;
1311 -> 1293;
1311 -> 1132;
1311 -> 1292;
1312 -> 1293;
1312 -> 1132;
1312 -> 1292;
1313 -> 1293;
1313 -> 1132;
1313 -> 1292;
1314 -> 1293;
1314 -> 1132;
1314 -> 1292;
1315 -> 1293;
1315 -> 1132;
1315 -> 1292;
1316 -> 1293;
1316 -> 1132;
1316 -> 1292;
1317 -> 1293;
1317 -> 1132;
1317 -> 1292;
1318 -> 1293;
1318 -> 1132;
1318 -> 1292;
1319 -> 1293;
1319 -> 1132;
1319 -> 1292;
1320 -> 1293;
1320 -> 1132;
1320 -> 1292;
1321 -> 1293;
1321 -> 1132;
1321 -> 1292;
1322 -> 1293;
1322 -> 1132;
1322 -> 1292;
1323 -> 1293;
1323 -> 1132;
1323 -> 1292;
1324 -> 1293;
1324 -> 1132;
1324 -> 1292;
1325 -> 1293;
1325 -> 1132;
1325 -> 1134;
1325 -> 1139;
1325 -> 1292;
1326 -> 1293;
1326 -> 1132;
1326 -> 1135;
1326 -> 1140;
1326 -> 1292;
1327 -> 1292;
1328 -> 1295;
1328 -> 1327;
1329 -> 1296;
1329 -> 1327;
1330 -> 1297;
1330 -> 1327;
1331 -> 1298;
1331 -> 1327;
1332 -> 1299;
1332 -> 1327;
1333 -> 1300;
1333 -> 1327;
1334 -> 1301;
1334 -> 1327;
1335 -> 1302;
1335 -> 1327;
1336 -> 1303;
1336 -> 1327;
1337 -> 1304;
1337 -> 1327;
1338 -> 1305;
1338 -> 1327;
1339 -> 1306;
1339 -> 1327;
1340 -> 1307;
1340 -> 1327;
1341 -> 1308;
1341 -> 1327;
1342 -> 1309;
1342 -> 1327;
1343 -> 1310;
1343 -> 1327;
1344 -> 1311;
1344 -> 1327;
1345 -> 1312;
1345 -> 1327;
1346 -> 1313;
1346 -> 1327;
1347 -> 1314;
1347 -> 1327;
1348 -> 1315;
1348 -> 1327;
1349 -> 1316;
1349 -> 1327;
1350 -> 1317;
1350 -> 1327;
1351 -> 1318;
1351 -> 1327;
1352 -> 1319;
1352 -> 1327;
1353 -> 1320;
1353 -> 1327;
1354 -> 1321;
1354 -> 1327;
1355 -> 1322;
1355 -> 1327;
1356 -> 1323;
1356 -> 1327;
1357 -> 1324;
1357 -> 1327;
1358 -> 1325;
1358 -> 1327;
1359 -> 1326;
1359 -> 1327;
1360 -> 1294;
1360 -> 1327;
1361 -> 1327;
1362 -> 1361;
1362 -> 1328;
1362 -> 1329;
1362 -> 1330;
1362 -> 1331;
1362 -> 1332;
1362 -> 1337;
1362 -> 1338;
1362 -> 1339;
1362 -> 1340;
1362 -> 1357;
1362 -> 1334;
1362 -> 1335;
1362 -> 1341;
1362 -> 1342;
1362 -> 1343;
1362 -> 1344;
1362 -> 1345;
1362 -> 1346;
1362 -> 1347;
1362 -> 1348;
1362 -> 1349;
1362 -> 1350;
1362 -> 1351;
1362 -> 1352;
1362 -> 1353;
1362 -> 1354;
1362 -> 1355;
1362 -> 1356;
1362 -> 1132;
1362 -> 1133;
1362 -> 1138;
1362 -> 1134;
1362 -> 1139;
1362 -> 1135;
1362 -> 1140;
1362 -> 1137;
1362 -> 1136;
1362 -> 1327;
1363 -> 1361;
1363 -> 1327;
1364 -> 1361;
1364 -> 1327;
1365 -> 1361;
1365 -> 1327;
1366 -> 1333;
1366 -> 1327;
1367 -> 1366;
1367 -> 1361;
1367 -> 1327;
1368 -> 1336;
1368 -> 1361;
1368 -> 1327;
1369 -> 1287;
1369 -> 1291;
1369 -> 1286;
1370 -> 1291;
1373 -> 1371;
1373 -> 1372;
1374 -> 1284;
1374 -> 1372;
1375 -> 1373;
1375 -> 1374;
1375 -> 1275;
1375 -> 1372;
1376 -> 1374;
1376 -> 1372;
1377 -> 1372;
1378 -> 1372;
1379 -> 1376;
1379 -> 1378;
1380 -> 1377;
1380 -> 1378;
1381 -> 1379;
1381 -> 1275;
1381 -> 1378;
1382 -> 1379;
1382 -> 1275;
1382 -> 1378;
1383 -> 1379;
1383 -> 1275;
1383 -> 1378;
1384 -> 1379;
1384 -> 1275;
1384 -> 1378;
1385 -> 1379;
1385 -> 1275;
1385 -> 1280;
1385 -> 1378;
1386 -> 1379;
1386 -> 1275;
1386 -> 1378;
1387 -> 1379;
1387 -> 1275;
1387 -> 1378;
1388 -> 1379;
1388 -> 1275;
1388 -> 1276;
1388 -> 1281;
1388 -> 1378;
1389 -> 1379;
1389 -> 1275;
1389 -> 1378;
1390 -> 1379;
1390 -> 1275;
1390 -> 1378;
1391 -> 1379;
1391 -> 1275;
1391 -> 1378;
1392 -> 1379;
1392 -> 1275;
1392 -> 1378;
1393 -> 1379;
1393 -> 1275;
1393 -> 1378;
1394 -> 1379;
1394 -> 1275;
1394 -> 1378;
1395 -> 1379;
1395 -> 1275;
1395 -> 1378;
1396 -> 1379;
1396 -> 1275;
1396 -> 1378;
1397 -> 1379;
1397 -> 1275;
1397 -> 1378;
1398 -> 1379;
1398 -> 1275;
1398 -> 1378;
1399 -> 1379;
1399 -> 1275;
1399 -> 1378;
1400 -> 1379;
1400 -> 1275;
1400 -> 1378;
1401 -> 1379;
1401 -> 1275;
1401 -> 1378;
1402 -> 1379;
1402 -> 1275;
1402 -> 1378;
1403 -> 1379;
1403 -> 1275;
1403 -> 1378;
1404 -> 1379;
1404 -> 1275;
1404 -> 1378;
1405 -> 1379;
1405 -> 1275;
1405 -> 1378;
1406 -> 1379;
1406 -> 1275;
1406 -> 1378;
1407 -> 1379;
1407 -> 1275;
1407 -> 1378;
1408 -> 1379;
1408 -> 1275;
1408 -> 1378;
1409 -> 1379;
1409 -> 1275;
1409 -> 1378;
1410 -> 1379;
1410 -> 1275;
1410 -> 1378;
1411 -> 1379;
1411 -> 1275;
1411 -> 1277;
1411 -> 1282;
1411 -> 1378;
1412 -> 1379;
1412 -> 1275;
1412 -> 1278;
1412 -> 1283;
1412 -> 1378;
1413 -> 1378;
1414 -> 1381;
1414 -> 1413;
1415 -> 1382;
1415 -> 1413;
1416 -> 1383;
1416 -> 1413;
1417 -> 1384;
1417 -> 1413;
1418 -> 1385;
1418 -> 1413;
1419 -> 1386;
1419 -> 1413;
1420 -> 1387;
1420 -> 1413;
1421 -> 1388;
1421 -> 1413;
1422 -> 1389;
1422 -> 1413;
1423 -> 1390;
1423 -> 1413;
1424 -> 1391;
1424 -> 1413;
1425 -> 1392;
1425 -> 1413;
1426 -> 1393;
1426 -> 1413;
1427 -> 1394;
1427 -> 1413;
1428 -> 1395;
1428 -> 1413;
1429 -> 1396;
1429 -> 1413;
1430 -> 1397;
1430 -> 1413;
1431 -> 1398;
1431 -> 1413;
1432 -> 1399;
1432 -> 1413;
1433 -> 1400;
1433 -> 1413;
1434 -> 1401;
1434 -> 1413;
1435 -> 1402;
1435 -> 1413;
1436 -> 1403;
1436 -> 1413;
1437 -> 1404;
1437 -> 1413;
1438 -> 1405;
1438 -> 1413;
1439 -> 1406;
1439 -> 1413;
1440 -> 1407;
1440 -> 1413;
1441 -> 1408;
1441 -> 1413;
1442 -> 1409;
1442 -> 1413;
1443 -> 1410;
1443 -> 1413;
1444 -> 1411;
1444 -> 1413;
1445 -> 1412;
1445 -> 1413;
1446 -> 1380;
1446 -> 1413;
1447 -> 1413;
1448 -> 1447;
1448 -> 1414;
1448 -> 1415;
1448 -> 1416;
1448 -> 1417;
1448 -> 1418;
1448 -> 1423;
1448 -> 1424;
1448 -> 1425;
1448 -> 1426;
1448 -> 1443;
1448 -> 1420;
1448 -> 1421;
1448 -> 1427;
1448 -> 1428;
1448 -> 1429;
1448 -> 1430;
1448 -> 1431;
1448 -> 1432;
1448 -> 1433;
1448 -> 1434;
1448 -> 1435;
1448 -> 1436;
1448 -> 1437;
1448 -> 1438;
1448 -> 1439;
1448 -> 1440;
1448 -> 1441;
1448 -> 1442;
1448 -> 1275;
1448 -> 1276;
1448 -> 1281;
1448 -> 1277;
1448 -> 1282;
1448 -> 1278;
1448 -> 1283;
1448 -> 1280;
1448 -> 1279;
1448 -> 1413;
1449 -> 1447;
1449 -> 1413;
1450 -> 1447;
1450 -> 1413;
1451 -> 1447;
1451 -> 1413;
1452 -> 1419;
1452 -> 1413;
1453 -> 1452;
1453 -> 1447;
1453 -> 1413;
1454 -> 1422;
1454 -> 1447;
1454 -> 1413;
1455 -> 1373;
1455 -> 1377;
1455 -> 1372;
1456 -> 1377;
1457 -> 0;
1458 -> 0;
1460 -> 1457;
1460 -> 1459;
1461 -> 1458;
1461 -> 1459;
1462 -> 1459;
1463 -> 1460;
1463 -> 1459;
1464 -> 1461;
1464 -> 1459;
1465 -> 0;
1465 -> 1459;
1466 -> 1462;
1466 -> 1459;
1467 -> 1459;
1468 -> 1463;
1468 -> 1467;
1469 -> 1464;
1469 -> 1467;
1470 -> 1465;
1470 -> 1467;
1471 -> 1466;
1471 -> 1467;
1472 -> 1467;
1473 -> 1467;
1474 -> 1467;
1475 -> 1467;
1476 -> 1467;
1477 -> 1467;
1478 -> 1467;
1479 -> 1467;
1480 -> 1467;
1481 -> 1467;
1482 -> 1467;
1483 -> 1467;
1484 -> 1467;
1485 -> 1467;
1486 -> 1467;
1487 -> 1467;
1488 -> 1467;
1489 -> 1467;
1490 -> 1467;
1491 -> 1467;
1492 -> 1467;
1493 -> 1467;
1494 -> 1467;
1495 -> 1467;
1496 -> 1468;
1496 -> 1467;
1497 -> 1469;
1497 -> 1467;
1498 -> 1470;
1498 -> 1467;
1499 -> 1471;
1499 -> 1467;
1500 -> 1472;
1500 -> 1467;
1501 -> 1473;
1501 -> 1467;
1502 -> 1474;
1502 -> 1467;
1503 -> 1475;
1503 -> 1467;
1504 -> 1476;
1504 -> 1467;
1505 -> 1477;
1505 -> 1467;
1506 -> 1478;
1506 -> 1467;
1507 -> 1479;
1507 -> 1467;
1508 -> 1480;
1508 -> 1467;
1509 -> 1481;
1509 -> 1467;
1510 -> 1482;
1510 -> 1467;
1511 -> 1483;
1511 -> 1467;
1512 -> 1484;
1512 -> 1467;
1513 -> 1485;
1513 -> 1467;
1514 -> 1486;
1514 -> 1467;
1515 -> 1467;
1516 -> 1467;
1517 -> 1487;
1517 -> 1467;
1518 -> 1488;
1518 -> 1467;
1519 -> 1467;
1520 -> 1489;
1520 -> 1467;
1521 -> 1490;
1521 -> 1467;
1522 -> 1491;
1522 -> 1467;
1523 -> 1493;
1523 -> 1467;
1524 -> 1467;
1525 -> 1492;
1525 -> 1467;
1526 -> 0;
1526 -> 1467;
1527 -> 1494;
1527 -> 1467;
1528 -> 1496;
1528 -> 1495;
1529 -> 1497;
1529 -> 1495;
1530 -> 1498;
1530 -> 1495;
1531 -> 1499;
1531 -> 1495;
1532 -> 1500;
1532 -> 1495;
1533 -> 1501;
1533 -> 1495;
1534 -> 1502;
1534 -> 1495;
1535 -> 1503;
1535 -> 1495;
1536 -> 1504;
1536 -> 1495;
1537 -> 1505;
1537 -> 1495;
1538 -> 1506;
1538 -> 1495;
1539 -> 1507;
1539 -> 1495;
1540 -> 1508;
1540 -> 1495;
1541 -> 1509;
1541 -> 1495;
1542 -> 1510;
1542 -> 1495;
1543 -> 1511;
1543 -> 1495;
1544 -> 1512;
1544 -> 1495;
1545 -> 1513;
1545 -> 1495;
1546 -> 1514;
1546 -> 1495;
1547 -> 1515;
1547 -> 1495;
1548 -> 1516;
1548 -> 1495;
1549 -> 1517;
1549 -> 1495;
1550 -> 1518;
1550 -> 1495;
1551 -> 1519;
1551 -> 1495;
1552 -> 1520;
1552 -> 1495;
1553 -> 1521;
1553 -> 1495;
1554 -> 1522;
1554 -> 1495;
1555 -> 1523;
1555 -> 1495;
1556 -> 1524;
1556 -> 1495;
1557 -> 1525;
1557 -> 1495;
1558 -> 1526;
1558 -> 1495;
1559 -> 1527;
1559 -> 1495;
1560 -> 1495;
1561 -> 1528;
1561 -> 1495;
1562 -> 1529;
1562 -> 1495;
1563 -> 1530;
1563 -> 1495;
1564 -> 1531;
1564 -> 1495;
1565 -> 1532;
1565 -> 1495;
1566 -> 1537;
1566 -> 1495;
1567 -> 1538;
1567 -> 1495;
1568 -> 1539;
1568 -> 1495;
1569 -> 1540;
1569 -> 1495;
1570 -> 1557;
1570 -> 1495;
1571 -> 1534;
1571 -> 1495;
1572 -> 1535;
1572 -> 1495;
1573 -> 1541;
1573 -> 1495;
1574 -> 1542;
1574 -> 1495;
1575 -> 1543;
1575 -> 1495;
1576 -> 1544;
1576 -> 1495;
1577 -> 1576;
1577 -> 1495;
1578 -> 1545;
1578 -> 1495;
1579 -> 1546;
1579 -> 1495;
1580 -> 1547;
1580 -> 1495;
1581 -> 1548;
1581 -> 1495;
1582 -> 1549;
1582 -> 1495;
1583 -> 1550;
1583 -> 1495;
1584 -> 1551;
1584 -> 1495;
1585 -> 1552;
1585 -> 1495;
1586 -> 1553;
1586 -> 1495;
1587 -> 1554;
1587 -> 1495;
1588 -> 1555;
1588 -> 1495;
1589 -> 1556;
1589 -> 1495;
1590 -> 1560;
1590 -> 1561;
1590 -> 1562;
1590 -> 1563;
1590 -> 1564;
1590 -> 1565;
1590 -> 1566;
1590 -> 1567;
1590 -> 1568;
1590 -> 1569;
1590 -> 1570;
1590 -> 1571;
1590 -> 1572;
1590 -> 1573;
1590 -> 1574;
1590 -> 1575;
1590 -> 1577;
1590 -> 1578;
1590 -> 1579;
1590 -> 1580;
1590 -> 1581;
1590 -> 1582;
1590 -> 1583;
1590 -> 1584;
1590 -> 1585;
1590 -> 1586;
1590 -> 1587;
1590 -> 1588;
1590 -> 1589;
1590 -> 1515;
1590 -> 1495;
1591 -> 1560;
1591 -> 1495;
1592 -> 1560;
1592 -> 1495;
1593 -> 1560;
1593 -> 1495;
1594 -> 1533;
1594 -> 1495;
1595 -> 1594;
1595 -> 1560;
1595 -> 1495;
1596 -> 1536;
1596 -> 1560;
1596 -> 1495;
1597 -> 1558;
1597 -> 1560;
1597 -> 1495;
1598 -> 1559;
1598 -> 1560;
1598 -> 1495;
1599 -> 1467;
1600 -> 0;
1601 -> 0;
1603 -> 1600;
1603 -> 1602;
1604 -> 1601;
1604 -> 1602;
1605 -> 1602;
1606 -> 1603;
1606 -> 1602;
1607 -> 1604;
1607 -> 1602;
1608 -> 0;
1608 -> 1602;
1609 -> 1605;
1609 -> 1602;
1610 -> 1602;
1611 -> 1606;
1611 -> 1610;
1612 -> 1607;
1612 -> 1610;
1613 -> 1608;
1613 -> 1610;
1614 -> 1609;
1614 -> 1610;
1615 -> 1610;
1616 -> 1610;
1617 -> 1610;
1618 -> 1610;
1619 -> 1610;
1620 -> 1610;
1621 -> 1610;
1622 -> 1610;
1623 -> 1610;
1624 -> 1610;
1625 -> 1610;
1626 -> 1610;
1627 -> 1610;
1628 -> 1610;
1629 -> 1610;
1630 -> 1610;
1631 -> 1610;
1632 -> 1610;
1633 -> 1610;
1634 -> 1610;
1635 -> 1610;
1636 -> 1610;
1637 -> 1610;
1638 -> 1610;
1639 -> 1611;
1639 -> 1610;
1640 -> 1612;
1640 -> 1610;
1641 -> 1613;
1641 -> 1610;
1642 -> 1614;
1642 -> 1610;
1643 -> 1615;
1643 -> 1610;
1644 -> 1616;
1644 -> 1610;
1645 -> 1617;
1645 -> 1610;
1646 -> 1618;
1646 -> 1610;
1647 -> 1619;
1647 -> 1610;
1648 -> 1620;
1648 -> 1610;
1649 -> 1621;
1649 -> 1610;
1650 -> 1622;
1650 -> 1610;
1651 -> 1623;
1651 -> 1610;
1652 -> 1624;
1652 -> 1610;
1653 -> 1625;
1653 -> 1610;
1654 -> 1626;
1654 -> 1610;
1655 -> 1627;
1655 -> 1610;
1656 -> 1628;
1656 -> 1610;
1657 -> 1629;
1657 -> 1610;
1658 -> 1610;
1659 -> 1610;
1660 -> 1630;
1660 -> 1610;
1661 -> 1631;
1661 -> 1610;
1662 -> 1610;
1663 -> 1632;
1663 -> 1610;
1664 -> 1633;
1664 -> 1610;
1665 -> 1634;
1665 -> 1610;
1666 -> 1636;
1666 -> 1610;
1667 -> 1610;
1668 -> 1635;
1668 -> 1610;
1669 -> 0;
1669 -> 1610;
1670 -> 1637;
1670 -> 1610;
1671 -> 1639;
1671 -> 1638;
1672 -> 1640;
1672 -> 1638;
1673 -> 1641;
1673 -> 1638;
1674 -> 1642;
1674 -> 1638;
1675 -> 1643;
1675 -> 1638;
1676 -> 1644;
1676 -> 1638;
1677 -> 1645;
1677 -> 1638;
1678 -> 1646;
1678 -> 1638;
1679 -> 1647;
1679 -> 1638;
1680 -> 1648;
1680 -> 1638;
1681 -> 1649;
1681 -> 1638;
1682 -> 1650;
1682 -> 1638;
1683 -> 1651;
1683 -> 1638;
1684 -> 1652;
1684 -> 1638;
1685 -> 1653;
1685 -> 1638;
1686 -> 1654;
1686 -> 1638;
1687 -> 1655;
1687 -> 1638;
1688 -> 1656;
1688 -> 1638;
1689 -> 1657;
1689 -> 1638;
1690 -> 1658;
1690 -> 1638;
1691 -> 1659;
1691 -> 1638;
1692 -> 1660;
1692 -> 1638;
1693 -> 1661;
1693 -> 1638;
1694 -> 1662;
1694 -> 1638;
1695 -> 1663;
1695 -> 1638;
1696 -> 1664;
1696 -> 1638;
1697 -> 1665;
1697 -> 1638;
1698 -> 1666;
1698 -> 1638;
1699 -> 1667;
1699 -> 1638;
1700 -> 1668;
1700 -> 1638;
1701 -> 1669;
1701 -> 1638;
1702 -> 1670;
1702 -> 1638;
1703 -> 1638;
1704 -> 1671;
1704 -> 1638;
1705 -> 1672;
1705 -> 1638;
1706 -> 1673;
1706 -> 1638;
1707 -> 1674;
1707 -> 1638;
1708 -> 1675;
1708 -> 1638;
1709 -> 1680;
1709 -> 1638;
1710 -> 1681;
1710 -> 1638;
1711 -> 1682;
1711 -> 1638;
1712 -> 1683;
1712 -> 1638;
1713 -> 1700;
1713 -> 1638;
1714 -> 1677;
1714 -> 1638;
1715 -> 1678;
1715 -> 1638;
1716 -> 1684;
1716 -> 1638;
1717 -> 1685;
1717 -> 1638;
1718 -> 1686;
1718 -> 1638;
1719 -> 1687;
1719 -> 1638;
1720 -> 1719;
1720 -> 1638;
1721 -> 1688;
1721 -> 1638;
1722 -> 1689;
1722 -> 1638;
1723 -> 1690;
1723 -> 1638;
1724 -> 1691;
1724 -> 1638;
1725 -> 1692;
1725 -> 1638;
1726 -> 1693;
1726 -> 1638;
1727 -> 1694;
1727 -> 1638;
1728 -> 1695;
1728 -> 1638;
1729 -> 1696;
1729 -> 1638;
1730 -> 1697;
1730 -> 1638;
1731 -> 1698;
1731 -> 1638;
1732 -> 1699;
1732 -> 1638;
1733 -> 1703;
1733 -> 1704;
1733 -> 1705;
1733 -> 1706;
1733 -> 1707;
1733 -> 1708;
1733 -> 1709;
1733 -> 1710;
1733 -> 1711;
1733 -> 1712;
1733 -> 1713;
1733 -> 1714;
1733 -> 1715;
1733 -> 1716;
1733 -> 1717;
1733 -> 1718;
1733 -> 1720;
1733 -> 1721;
1733 -> 1722;
1733 -> 1723;
1733 -> 1724;
1733 -> 1725;
1733 -> 1726;
1733 -> 1727;
1733 -> 1728;
1733 -> 1729;
1733 -> 1730;
1733 -> 1731;
1733 -> 1732;
1733 -> 1658;
1733 -> 1638;
1734 -> 1703;
1734 -> 1638;
1735 -> 1703;
1735 -> 1638;
1736 -> 1703;
1736 -> 1638;
1737 -> 1676;
1737 -> 1638;
1738 -> 1737;
1738 -> 1703;
1738 -> 1638;
1739 -> 1679;
1739 -> 1703;
1739 -> 1638;
1740 -> 1701;
1740 -> 1703;
1740 -> 1638;
1741 -> 1702;
1741 -> 1703;
1741 -> 1638;
1742 -> 1610;
1743 -> 0;
1744 -> 0;
1746 -> 1743;
1746 -> 1745;
1747 -> 1744;
1747 -> 1745;
1748 -> 1745;
1749 -> 1746;
1749 -> 1745;
1750 -> 1747;
1750 -> 1745;
1751 -> 0;
1751 -> 1745;
1752 -> 1748;
1752 -> 1745;
1753 -> 1745;
1754 -> 1749;
1754 -> 1753;
1755 -> 1750;
1755 -> 1753;
1756 -> 1751;
1756 -> 1753;
1757 -> 1752;
1757 -> 1753;
1758 -> 1753;
1759 -> 1753;
1760 -> 1753;
1761 -> 1753;
1762 -> 1753;
1763 -> 1753;
1764 -> 1753;
1765 -> 1753;
1766 -> 1753;
1767 -> 1753;
1768 -> 1753;
1769 -> 1753;
1770 -> 1753;
1771 -> 1753;
1772 -> 1753;
1773 -> 1753;
1774 -> 1753;
1775 -> 1753;
1776 -> 1753;
1777 -> 1753;
1778 -> 1753;
1779 -> 1753;
1780 -> 1753;
1781 -> 1753;
1782 -> 1754;
1782 -> 1753;
1783 -> 1755;
1783 -> 1753;
1784 -> 1756;
1784 -> 1753;
1785 -> 1757;
1785 -> 1753;
1786 -> 1758;
1786 -> 1753;
1787 -> 1759;
1787 -> 1753;
1788 -> 1760;
1788 -> 1753;
1789 -> 1761;
1789 -> 1753;
1790 -> 1762;
1790 -> 1753;
1791 -> 1763;
1791 -> 1753;
1792 -> 1764;
1792 -> 1753;
1793 -> 1765;
1793 -> 1753;
1794 -> 1766;
1794 -> 1753;
1795 -> 1767;
1795 -> 1753;
1796 -> 1768;
1796 -> 1753;
1797 -> 1769;
1797 -> 1753;
1798 -> 1770;
1798 -> 1753;
1799 -> 1771;
1799 -> 1753;
1800 -> 1772;
1800 -> 1753;
1801 -> 1753;
1802 -> 1753;
1803 -> 1773;
1803 -> 1753;
1804 -> 1774;
1804 -> 1753;
1805 -> 1753;
1806 -> 1775;
1806 -> 1753;
1807 -> 1776;
1807 -> 1753;
1808 -> 1777;
1808 -> 1753;
1809 -> 1779;
1809 -> 1753;
1810 -> 1753;
1811 -> 1778;
1811 -> 1753;
1812 -> 0;
1812 -> 1753;
1813 -> 1780;
1813 -> 1753;
1814 -> 1782;
1814 -> 1781;
1815 -> 1783;
1815 -> 1781;
1816 -> 1784;
1816 -> 1781;
1817 -> 1785;
1817 -> 1781;
1818 -> 1786;
1818 -> 1781;
1819 -> 1787;
1819 -> 1781;
1820 -> 1788;
1820 -> 1781;
1821 -> 1789;
1821 -> 1781;
1822 -> 1790;
1822 -> 1781;
1823 -> 1791;
1823 -> 1781;
1824 -> 1792;
1824 -> 1781;
1825 -> 1793;
1825 -> 1781;
1826 -> 1794;
1826 -> 1781;
1827 -> 1795;
1827 -> 1781;
1828 -> 1796;
1828 -> 1781;
1829 -> 1797;
1829 -> 1781;
1830 -> 1798;
1830 -> 1781;
1831 -> 1799;
1831 -> 1781;
1832 -> 1800;
1832 -> 1781;
1833 -> 1801;
1833 -> 1781;
1834 -> 1802;
1834 -> 1781;
1835 -> 1803;
1835 -> 1781;
1836 -> 1804;
1836 -> 1781;
1837 -> 1805;
1837 -> 1781;
1838 -> 1806;
1838 -> 1781;
1839 -> 1807;
1839 -> 1781;
1840 -> 1808;
1840 -> 1781;
1841 -> 1809;
1841 -> 1781;
1842 -> 1810;
1842 -> 1781;
1843 -> 1811;
1843 -> 1781;
1844 -> 1812;
1844 -> 1781;
1845 -> 1813;
1845 -> 1781;
1846 -> 1781;
1847 -> 1814;
1847 -> 1781;
1848 -> 1815;
1848 -> 1781;
1849 -> 1816;
1849 -> 1781;
1850 -> 1817;
1850 -> 1781;
1851 -> 1818;
1851 -> 1781;
1852 -> 1823;
1852 -> 1781;
1853 -> 1824;
1853 -> 1781;
1854 -> 1825;
1854 -> 1781;
1855 -> 1826;
1855 -> 1781;
1856 -> 1843;
1856 -> 1781;
1857 -> 1820;
1857 -> 1781;
1858 -> 1821;
1858 -> 1781;
1859 -> 1827;
1859 -> 1781;
1860 -> 1828;
1860 -> 1781;
1861 -> 1829;
1861 -> 1781;
1862 -> 1830;
1862 -> 1781;
1863 -> 1862;
1863 -> 1781;
1864 -> 1831;
1864 -> 1781;
1865 -> 1832;
1865 -> 1781;
1866 -> 1833;
1866 -> 1781;
1867 -> 1834;
1867 -> 1781;
1868 -> 1835;
1868 -> 1781;
1869 -> 1836;
1869 -> 1781;
1870 -> 1837;
1870 -> 1781;
1871 -> 1838;
1871 -> 1781;
1872 -> 1839;
1872 -> 1781;
1873 -> 1840;
1873 -> 1781;
1874 -> 1841;
1874 -> 1781;
1875 -> 1842;
1875 -> 1781;
1876 -> 1846;
1876 -> 1847;
1876 -> 1848;
1876 -> 1849;
1876 -> 1850;
1876 -> 1851;
1876 -> 1852;
1876 -> 1853;
1876 -> 1854;
1876 -> 1855;
1876 -> 1856;
1876 -> 1857;
1876 -> 1858;
1876 -> 1859;
1876 -> 1860;
1876 -> 1861;
1876 -> 1863;
1876 -> 1864;
1876 -> 1865;
1876 -> 1866;
1876 -> 1867;
1876 -> 1868;
1876 -> 1869;
1876 -> 1870;
1876 -> 1871;
1876 -> 1872;
1876 -> 1873;
1876 -> 1874;
1876 -> 1875;
1876 -> 1801;
1876 -> 1781;
1877 -> 1846;
1877 -> 1781;
1878 -> 1846;
1878 -> 1781;
1879 -> 1846;
1879 -> 1781;
1880 -> 1819;
1880 -> 1781;
1881 -> 1880;
1881 -> 1846;
1881 -> 1781;
1882 -> 1822;
1882 -> 1846;
1882 -> 1781;
1883 -> 1844;
1883 -> 1846;
1883 -> 1781;
1884 -> 1845;
1884 -> 1846;
1884 -> 1781;
1885 -> 1753;
1886 -> 0;
1887 -> 0;
1889 -> 1886;
1889 -> 1888;
1890 -> 1887;
1890 -> 1888;
1891 -> 1888;
1892 -> 1889;
1892 -> 1888;
1893 -> 1890;
1893 -> 1888;
1894 -> 0;
1894 -> 1888;
1895 -> 1891;
1895 -> 1888;
1896 -> 1888;
1897 -> 1892;
1897 -> 1896;
1898 -> 1893;
1898 -> 1896;
1899 -> 1894;
1899 -> 1896;
1900 -> 1895;
1900 -> 1896;
1901 -> 1896;
1902 -> 1896;
1903 -> 1896;
1904 -> 1896;
1905 -> 1896;
1906 -> 1896;
1907 -> 1896;
1908 -> 1896;
1909 -> 1896;
1910 -> 1896;
1911 -> 1896;
1912 -> 1896;
1913 -> 1896;
1914 -> 1896;
1915 -> 1896;
1916 -> 1896;
1917 -> 1896;
1918 -> 1896;
1919 -> 1896;
1920 -> 1896;
1921 -> 1896;
1922 -> 1896;
1923 -> 1896;
1924 -> 1896;
1925 -> 1897;
1925 -> 1896;
1926 -> 1898;
1926 -> 1896;
1927 -> 1899;
1927 -> 1896;
1928 -> 1900;
1928 -> 1896;
1929 -> 1901;
1929 -> 1896;
1930 -> 1902;
1930 -> 1896;
1931 -> 1903;
1931 -> 1896;
1932 -> 1904;
1932 -> 1896;
1933 -> 1905;
1933 -> 1896;
1934 -> 1906;
1934 -> 1896;
1935 -> 1907;
1935 -> 1896;
1936 -> 1908;
1936 -> 1896;
1937 -> 1909;
1937 -> 1896;
1938 -> 1910;
1938 -> 1896;
1939 -> 1911;
1939 -> 1896;
1940 -> 1912;
1940 -> 1896;
1941 -> 1913;
1941 -> 1896;
1942 -> 1914;
1942 -> 1896;
1943 -> 1915;
1943 -> 1896;
1944 -> 1896;
1945 -> 1896;
1946 -> 1916;
1946 -> 1896;
1947 -> 1917;
1947 -> 1896;
1948 -> 1896;
1949 -> 1918;
1949 -> 1896;
1950 -> 1919;
1950 -> 1896;
1951 -> 1920;
1951 -> 1896;
1952 -> 1922;
1952 -> 1896;
1953 -> 1896;
1954 -> 1921;
1954 -> 1896;
1955 -> 0;
1955 -> 1896;
1956 -> 1923;
1956 -> 1896;
1957 -> 1925;
1957 -> 1924;
1958 -> 1926;
1958 -> 1924;
1959 -> 1927;
1959 -> 1924;
1960 -> 1928;
1960 -> 1924;
1961 -> 1929;
1961 -> 1924;
1962 -> 1930;
1962 -> 1924;
1963 -> 1931;
1963 -> 1924;
1964 -> 1932;
1964 -> 1924;
1965 -> 1933;
1965 -> 1924;
1966 -> 1934;
1966 -> 1924;
1967 -> 1935;
1967 -> 1924;
1968 -> 1936;
1968 -> 1924;
1969 -> 1937;
1969 -> 1924;
1970 -> 1938;
1970 -> 1924;
1971 -> 1939;
1971 -> 1924;
1972 -> 1940;
1972 -> 1924;
1973 -> 1941;
1973 -> 1924;
1974 -> 1942;
1974 -> 1924;
1975 -> 1943;
1975 -> 1924;
1976 -> 1944;
1976 -> 1924;
1977 -> 1945;
1977 -> 1924;
1978 -> 1946;
1978 -> 1924;
1979 -> 1947;
1979 -> 1924;
1980 -> 1948;
1980 -> 1924;
1981 -> 1949;
1981 -> 1924;
1982 -> 1950;
1982 -> 1924;
1983 -> 1951;
1983 -> 1924;
1984 -> 1952;
1984 -> 1924;
1985 -> 1953;
1985 -> 1924;
1986 -> 1954;
1986 -> 1924;
1987 -> 1955;
1987 -> 1924;
1988 -> 1956;
1988 -> 1924;
1989 -> 1924;
1990 -> 1957;
1990 -> 1924;
1991 -> 1958;
1991 -> 1924;
1992 -> 1959;
1992 -> 1924;
1993 -> 1960;
1993 -> 1924;
1994 -> 1961;
1994 -> 1924;
1995 -> 1966;
1995 -> 1924;
1996 -> 1967;
1996 -> 1924;
1997 -> 1968;
1997 -> 1924;
1998 -> 1969;
1998 -> 1924;
1999 -> 1986;
1999 -> 1924;
2000 -> 1963;
2000 -> 1924;
2001 -> 1964;
2001 -> 1924;
2002 -> 1970;
2002 -> 1924;
2003 -> 1971;
2003 -> 1924;
2004 -> 1972;
2004 -> 1924;
2005 -> 1973;
2005 -> 1924;
2006 -> 2005;
2006 -> 1924;
2007 -> 1974;
2007 -> 1924;
2008 -> 1975;
2008 -> 1924;
2009 -> 1976;
2009 -> 1924;
2010 -> 1977;
2010 -> 1924;
2011 -> 1978;
2011 -> 1924;
2012 -> 1979;
2012 -> 1924;
2013 -> 1980;
2013 -> 1924;
2014 -> 1981;
2014 -> 1924;
2015 -> 1982;
2015 -> 1924;
2016 -> 1983;
2016 -> 1924;
2017 -> 1984;
2017 -> 1924;
2018 -> 1985;
2018 -> 1924;
2019 -> 1989;
2019 -> 1990;
2019 -> 1991;
2019 -> 1992;
2019 -> 1993;
2019 -> 1994;
2019 -> 1995;
2019 -> 1996;
2019 -> 1997;
2019 -> 1998;
2019 -> 1999;
2019 -> 2000;
2019 -> 2001;
2019 -> 2002;
2019 -> 2003;
2019 -> 2004;
2019 -> 2006;
2019 -> 2007;
2019 -> 2008;
2019 -> 2009;
2019 -> 2010;
2019 -> 2011;
2019 -> 2012;
2019 -> 2013;
2019 -> 2014;
2019 -> 2015;
2019 -> 2016;
2019 -> 2017;
2019 -> 2018;
2019 -> 1944;
2019 -> 1924;
2020 -> 1989;
2020 -> 1924;
2021 -> 1989;
2021 -> 1924;
2022 -> 1989;
2022 -> 1924;
2023 -> 1962;
2023 -> 1924;
2024 -> 2023;
2024 -> 1989;
2024 -> 1924;
2025 -> 1965;
2025 -> 1989;
2025 -> 1924;
2026 -> 1987;
2026 -> 1989;
2026 -> 1924;
2027 -> 1988;
2027 -> 1989;
2027 -> 1924;
2028 -> 1896;
2029 -> 0;
2030 -> 0;
2032 -> 2029;
2032 -> 2031;
2033 -> 2030;
2033 -> 2031;
2034 -> 2031;
2035 -> 2032;
2035 -> 2031;
2036 -> 2033;
2036 -> 2031;
2037 -> 0;
2037 -> 2031;
2038 -> 2034;
2038 -> 2031;
2039 -> 2031;
2040 -> 2035;
2040 -> 2039;
2041 -> 2036;
2041 -> 2039;
2042 -> 2037;
2042 -> 2039;
2043 -> 2038;
2043 -> 2039;
2044 -> 2039;
2045 -> 2039;
2046 -> 2039;
2047 -> 2039;
2048 -> 2039;
2049 -> 2039;
2050 -> 2039;
2051 -> 2039;
2052 -> 2039;
2053 -> 2039;
2054 -> 2039;
2055 -> 2039;
2056 -> 2039;
2057 -> 2039;
2058 -> 2039;
2059 -> 2039;
2060 -> 2039;
2061 -> 2039;
2062 -> 2039;
2063 -> 2039;
2064 -> 2039;
2065 -> 2039;
2066 -> 2039;
2067 -> 2039;
2068 -> 2040;
2068 -> 2039;
2069 -> 2041;
2069 -> 2039;
2070 -> 2042;
2070 -> 2039;
2071 -> 2043;
2071 -> 2039;
2072 -> 2044;
2072 -> 2039;
2073 -> 2045;
2073 -> 2039;
2074 -> 2046;
2074 -> 2039;
2075 -> 2047;
2075 -> 2039;
2076 -> 2048;
2076 -> 2039;
2077 -> 2049;
2077 -> 2039;
2078 -> 2050;
2078 -> 2039;
2079 -> 2051;
2079 -> 2039;
2080 -> 2052;
2080 -> 2039;
2081 -> 2053;
2081 -> 2039;
2082 -> 2054;
2082 -> 2039;
2083 -> 2055;
2083 -> 2039;
2084 -> 2056;
2084 -> 2039;
2085 -> 2057;
2085 -> 2039;
2086 -> 2058;
2086 -> 2039;
2087 -> 2039;
2088 -> 2039;
2089 -> 2059;
2089 -> 2039;
2090 -> 2060;
2090 -> 2039;
2091 -> 2039;
2092 -> 2061;
2092 -> 2039;
2093 -> 2062;
2093 -> 2039;
2094 -> 2063;
2094 -> 2039;
2095 -> 2065;
2095 -> 2039;
2096 -> 2039;
2097 -> 2064;
2097 -> 2039;
2098 -> 0;
2098 -> 2039;
2099 -> 2066;
2099 -> 2039;
2100 -> 2068;
2100 -> 2067;
2101 -> 2069;
2101 -> 2067;
2102 -> 2070;
2102 -> 2067;
2103 -> 2071;
2103 -> 2067;
2104 -> 2072;
2104 -> 2067;
2105 -> 2073;
2105 -> 2067;
2106 -> 2074;
2106 -> 2067;
2107 -> 2075;
2107 -> 2067;
2108 -> 2076;
2108 -> 2067;
2109 -> 2077;
2109 -> 2067;
2110 -> 2078;
2110 -> 2067;
2111 -> 2079;
2111 -> 2067;
2112 -> 2080;
2112 -> 2067;
2113 -> 2081;
2113 -> 2067;
2114 -> 2082;
2114 -> 2067;
2115 -> 2083;
2115 -> 2067;
2116 -> 2084;
2116 -> 2067;
2117 -> 2085;
2117 -> 2067;
2118 -> 2086;
2118 -> 2067;
2119 -> 2087;
2119 -> 2067;
2120 -> 2088;
2120 -> 2067;
2121 -> 2089;
2121 -> 2067;
2122 -> 2090;
2122 -> 2067;
2123 -> 2091;
2123 -> 2067;
2124 -> 2092;
2124 -> 2067;
2125 -> 2093;
2125 -> 2067;
2126 -> 2094;
2126 -> 2067;
2127 -> 2095;
2127 -> 2067;
2128 -> 2096;
2128 -> 2067;
2129 -> 2097;
2129 -> 2067;
2130 -> 2098;
2130 -> 2067;
2131 -> 2099;
2131 -> 2067;
2132 -> 2067;
2133 -> 2100;
2133 -> 2067;
2134 -> 2101;
2134 -> 2067;
2135 -> 2102;
2135 -> 2067;
2136 -> 2103;
2136 -> 2067;
2137 -> 2104;
2137 -> 2067;
2138 -> 2109;
2138 -> 2067;
2139 -> 2110;
2139 -> 2067;
2140 -> 2111;
2140 -> 2067;
2141 -> 2112;
2141 -> 2067;
2142 -> 2129;
2142 -> 2067;
2143 -> 2106;
2143 -> 2067;
2144 -> 2107;
2144 -> 2067;
2145 -> 2113;
2145 -> 2067;
2146 -> 2114;
2146 -> 2067;
2147 -> 2115;
2147 -> 2067;
2148 -> 2116;
2148 -> 2067;
2149 -> 2148;
2149 -> 2067;
2150 -> 2117;
2150 -> 2067;
2151 -> 2118;
2151 -> 2067;
2152 -> 2119;
2152 -> 2067;
2153 -> 2120;
2153 -> 2067;
2154 -> 2121;
2154 -> 2067;
2155 -> 2122;
2155 -> 2067;
2156 -> 2123;
2156 -> 2067;
2157 -> 2124;
2157 -> 2067;
2158 -> 2125;
2158 -> 2067;
2159 -> 2126;
2159 -> 2067;
2160 -> 2127;
2160 -> 2067;
2161 -> 2128;
2161 -> 2067;
2162 -> 2132;
2162 -> 2133;
2162 -> 2134;
2162 -> 2135;
2162 -> 2136;
2162 -> 2137;
2162 -> 2138;
2162 -> 2139;
2162 -> 2140;
2162 -> 2141;
2162 -> 2142;
2162 -> 2143;
2162 -> 2144;
2162 -> 2145;
2162 -> 2146;
2162 -> 2147;
2162 -> 2149;
2162 -> 2150;
2162 -> 2151;
2162 -> 2152;
2162 -> 2153;
2162 -> 2154;
2162 -> 2155;
2162 -> 2156;
2162 -> 2157;
2162 -> 2158;
2162 -> 2159;
2162 -> 2160;
2162 -> 2161;
2162 -> 2087;
2162 -> 2067;
2163 -> 2132;
2163 -> 2067;
2164 -> 2132;
2164 -> 2067;
2165 -> 2132;
2165 -> 2067;
2166 -> 2105;
2166 -> 2067;
2167 -> 2166;
2167 -> 2132;
2167 -> 2067;
2168 -> 2108;
2168 -> 2132;
2168 -> 2067;
2169 -> 2130;
2169 -> 2132;
2169 -> 2067;
2170 -> 2131;
2170 -> 2132;
2170 -> 2067;
2171 -> 2039;
2172 -> 0;
2173 -> 0;
2175 -> 2172;
2175 -> 2174;
2176 -> 2173;
2176 -> 2174;
2177 -> 2174;
2178 -> 2175;
2178 -> 2174;
2179 -> 2176;
2179 -> 2174;
2180 -> 0;
2180 -> 2174;
2181 -> 2177;
2181 -> 2174;
2182 -> 2174;
2183 -> 2178;
2183 -> 2182;
2184 -> 2179;
2184 -> 2182;
2185 -> 2180;
2185 -> 2182;
2186 -> 2181;
2186 -> 2182;
2187 -> 2182;
2188 -> 2182;
2189 -> 2182;
2190 -> 2182;
2191 -> 2182;
2192 -> 2182;
2193 -> 2182;
2194 -> 2182;
2195 -> 2182;
2196 -> 2182;
2197 -> 2182;
2198 -> 2182;
2199 -> 2182;
2200 -> 2182;
2201 -> 2182;
2202 -> 2182;
2203 -> 2182;
2204 -> 2182;
2205 -> 2182;
2206 -> 2182;
2207 -> 2182;
2208 -> 2182;
2209 -> 2182;
2210 -> 2182;
2211 -> 2183;
2211 -> 2182;
2212 -> 2184;
2212 -> 2182;
2213 -> 2185;
2213 -> 2182;
2214 -> 2186;
2214 -> 2182;
2215 -> 2187;
2215 -> 2182;
2216 -> 2188;
2216 -> 2182;
2217 -> 2189;
2217 -> 2182;
2218 -> 2190;
2218 -> 2182;
2219 -> 2191;
2219 -> 2182;
2220 -> 2192;
2220 -> 2182;
2221 -> 2193;
2221 -> 2182;
2222 -> 2194;
2222 -> 2182;
2223 -> 2195;
2223 -> 2182;
2224 -> 2196;
2224 -> 2182;
2225 -> 2197;
2225 -> 2182;
2226 -> 2198;
2226 -> 2182;
2227 -> 2199;
2227 -> 2182;
2228 -> 2200;
2228 -> 2182;
2229 -> 2201;
2229 -> 2182;
2230 -> 2182;
2231 -> 2182;
2232 -> 2202;
2232 -> 2182;
2233 -> 2203;
2233 -> 2182;
2234 -> 2182;
2235 -> 2204;
2235 -> 2182;
2236 -> 2205;
2236 -> 2182;
2237 -> 2206;
2237 -> 2182;
2238 -> 2208;
2238 -> 2182;
2239 -> 2182;
2240 -> 2207;
2240 -> 2182;
2241 -> 0;
2241 -> 2182;
2242 -> 2209;
2242 -> 2182;
2243 -> 2211;
2243 -> 2210;
2244 -> 2212;
2244 -> 2210;
2245 -> 2213;
2245 -> 2210;
2246 -> 2214;
2246 -> 2210;
2247 -> 2215;
2247 -> 2210;
2248 -> 2216;
2248 -> 2210;
2249 -> 2217;
2249 -> 2210;
2250 -> 2218;
2250 -> 2210;
2251 -> 2219;
2251 -> 2210;
2252 -> 2220;
2252 -> 2210;
2253 -> 2221;
2253 -> 2210;
2254 -> 2222;
2254 -> 2210;
2255 -> 2223;
2255 -> 2210;
2256 -> 2224;
2256 -> 2210;
2257 -> 2225;
2257 -> 2210;
2258 -> 2226;
2258 -> 2210;
2259 -> 2227;
2259 -> 2210;
2260 -> 2228;
2260 -> 2210;
2261 -> 2229;
2261 -> 2210;
2262 -> 2230;
2262 -> 2210;
2263 -> 2231;
2263 -> 2210;
2264 -> 2232;
2264 -> 2210;
2265 -> 2233;
2265 -> 2210;
2266 -> 2234;
2266 -> 2210;
2267 -> 2235;
2267 -> 2210;
2268 -> 2236;
2268 -> 2210;
2269 -> 2237;
2269 -> 2210;
2270 -> 2238;
2270 -> 2210;
2271 -> 2239;
2271 -> 2210;
2272 -> 2240;
2272 -> 2210;
2273 -> 2241;
2273 -> 2210;
2274 -> 2242;
2274 -> 2210;
2275 -> 2210;
2276 -> 2243;
2276 -> 2210;
2277 -> 2244;
2277 -> 2210;
2278 -> 2245;
2278 -> 2210;
2279 -> 2246;
2279 -> 2210;
2280 -> 2247;
2280 -> 2210;
2281 -> 2252;
2281 -> 2210;
2282 -> 2253;
2282 -> 2210;
2283 -> 2254;
2283 -> 2210;
2284 -> 2255;
2284 -> 2210;
2285 -> 2272;
2285 -> 2210;
2286 -> 2249;
2286 -> 2210;
2287 -> 2250;
2287 -> 2210;
2288 -> 2256;
2288 -> 2210;
2289 -> 2257;
2289 -> 2210;
2290 -> 2258;
2290 -> 2210;
2291 -> 2259;
2291 -> 2210;
2292 -> 2291;
2292 -> 2210;
2293 -> 2260;
2293 -> 2210;
2294 -> 2261;
2294 -> 2210;
2295 -> 2262;
2295 -> 2210;
2296 -> 2263;
2296 -> 2210;
2297 -> 2264;
2297 -> 2210;
2298 -> 2265;
2298 -> 2210;
2299 -> 2266;
2299 -> 2210;
2300 -> 2267;
2300 -> 2210;
2301 -> 2268;
2301 -> 2210;
2302 -> 2269;
2302 -> 2210;
2303 -> 2270;
2303 -> 2210;
2304 -> 2271;
2304 -> 2210;
2305 -> 2275;
2305 -> 2276;
2305 -> 2277;
2305 -> 2278;
2305 -> 2279;
2305 -> 2280;
2305 -> 2281;
2305 -> 2282;
2305 -> 2283;
2305 -> 2284;
2305 -> 2285;
2305 -> 2286;
2305 -> 2287;
2305 -> 2288;
2305 -> 2289;
2305 -> 2290;
2305 -> 2292;
2305 -> 2293;
2305 -> 2294;
2305 -> 2295;
2305 -> 2296;
2305 -> 2297;
2305 -> 2298;
2305 -> 2299;
2305 -> 2300;
2305 -> 2301;
2305 -> 2302;
2305 -> 2303;
2305 -> 2304;
2305 -> 2230;
2305 -> 2210;
2306 -> 2275;
2306 -> 2210;
2307 -> 2275;
2307 -> 2210;
2308 -> 2275;
2308 -> 2210;
2309 -> 2248;
2309 -> 2210;
2310 -> 2309;
2310 -> 2275;
2310 -> 2210;
2311 -> 2251;
2311 -> 2275;
2311 -> 2210;
2312 -> 2273;
2312 -> 2275;
2312 -> 2210;
2313 -> 2274;
2313 -> 2275;
2313 -> 2210;
2314 -> 2182;
2317 -> 2315;
2317 -> 2316;
2318 -> 1141;
2318 -> 2316;
2319 -> 2317;
2319 -> 2318;
2319 -> 1362;
2319 -> 1363;
2319 -> 1368;
2319 -> 2316;
2320 -> 2318;
2320 -> 2316;
2321 -> 2316;
2322 -> 2316;
2323 -> 2320;
2323 -> 2322;
2324 -> 2321;
2324 -> 2322;
2325 -> 2323;
2325 -> 1362;
2325 -> 2322;
2326 -> 2323;
2326 -> 1362;
2326 -> 2322;
2327 -> 2323;
2327 -> 1362;
2327 -> 2322;
2328 -> 2323;
2328 -> 1362;
2328 -> 2322;
2329 -> 2323;
2329 -> 1362;
2329 -> 1367;
2329 -> 2322;
2330 -> 2323;
2330 -> 1362;
2330 -> 2322;
2331 -> 2323;
2331 -> 1362;
2331 -> 2322;
2332 -> 2323;
2332 -> 1362;
2332 -> 1363;
2332 -> 1368;
2332 -> 2322;
2333 -> 2323;
2333 -> 1362;
2333 -> 2322;
2334 -> 2323;
2334 -> 1362;
2334 -> 2322;
2335 -> 2323;
2335 -> 1362;
2335 -> 2322;
2336 -> 2323;
2336 -> 1362;
2336 -> 2322;
2337 -> 2323;
2337 -> 1362;
2337 -> 2322;
2338 -> 2323;
2338 -> 1362;
2338 -> 2322;
2339 -> 2323;
2339 -> 1362;
2339 -> 2322;
2340 -> 2323;
2340 -> 1362;
2340 -> 2322;
2341 -> 2323;
2341 -> 1362;
2341 -> 2322;
2342 -> 2323;
2342 -> 1362;
2342 -> 2322;
2343 -> 2323;
2343 -> 1362;
2343 -> 2322;
2344 -> 2323;
2344 -> 1362;
2344 -> 1369;
2344 -> 2322;
2345 -> 2323;
2345 -> 1362;
2345 -> 2322;
2346 -> 2323;
2346 -> 1362;
2346 -> 2322;
2347 -> 2323;
2347 -> 1362;
2347 -> 2322;
2348 -> 2323;
2348 -> 1362;
2348 -> 2322;
2349 -> 2323;
2349 -> 1362;
2349 -> 2322;
2350 -> 2323;
2350 -> 1362;
2350 -> 2322;
2351 -> 2323;
2351 -> 1362;
2351 -> 2322;
2352 -> 2323;
2352 -> 1362;
2352 -> 2322;
2353 -> 2323;
2353 -> 1362;
2353 -> 2322;
2354 -> 2323;
2354 -> 1362;
2354 -> 2322;
2355 -> 2323;
2355 -> 1362;
2355 -> 1364;
2355 -> 1358;
2355 -> 2322;
2356 -> 2323;
2356 -> 1362;
2356 -> 1365;
2356 -> 1359;
2356 -> 2322;
2357 -> 2322;
2358 -> 2324;
2358 -> 2357;
2359 -> 2357;
2360 -> 2359;
2360 -> 2325;
2360 -> 2326;
2360 -> 2327;
2360 -> 2328;
2360 -> 2329;
2360 -> 2334;
2360 -> 2335;
2360 -> 2336;
2360 -> 2337;
2360 -> 2354;
2360 -> 2331;
2360 -> 2332;
2360 -> 2338;
2360 -> 2339;
2360 -> 2340;
2360 -> 2341;
2360 -> 2342;
2360 -> 2343;
2360 -> 2344;
2360 -> 2345;
2360 -> 2346;
2360 -> 2347;
2360 -> 2348;
2360 -> 2349;
2360 -> 2350;
2360 -> 2351;
2360 -> 2352;
2360 -> 2353;
2360 -> 1362;
2360 -> 1363;
2360 -> 1368;
2360 -> 1364;
2360 -> 1358;
2360 -> 1365;
2360 -> 1359;
2360 -> 1367;
2360 -> 1369;
2360 -> 1366;
2360 -> 2357;
2361 -> 2359;
2361 -> 2357;
2362 -> 2359;
2362 -> 2357;
2363 -> 2359;
2363 -> 2357;
2364 -> 2317;
2364 -> 2321;
2364 -> 2316;
2365 -> 2321;
2368 -> 2366;
2368 -> 2367;
2369 -> 1284;
2369 -> 2367;
2370 -> 2368;
2370 -> 2369;
2370 -> 1448;
2370 -> 1449;
2370 -> 1454;
2370 -> 2367;
2371 -> 2369;
2371 -> 2367;
2372 -> 2367;
2373 -> 2367;
2374 -> 2371;
2374 -> 2373;
2375 -> 2372;
2375 -> 2373;
2376 -> 2374;
2376 -> 1448;
2376 -> 2373;
2377 -> 2374;
2377 -> 1448;
2377 -> 2373;
2378 -> 2374;
2378 -> 1448;
2378 -> 2373;
2379 -> 2374;
2379 -> 1448;
2379 -> 2373;
2380 -> 2374;
2380 -> 1448;
2380 -> 1453;
2380 -> 2373;
2381 -> 2374;
2381 -> 1448;
2381 -> 2373;
2382 -> 2374;
2382 -> 1448;
2382 -> 2373;
2383 -> 2374;
2383 -> 1448;
2383 -> 1449;
2383 -> 1454;
2383 -> 2373;
2384 -> 2374;
2384 -> 1448;
2384 -> 2373;
2385 -> 2374;
2385 -> 1448;
2385 -> 2373;
2386 -> 2374;
2386 -> 1448;
2386 -> 2373;
2387 -> 2374;
2387 -> 1448;
2387 -> 2373;
2388 -> 2374;
2388 -> 1448;
2388 -> 2373;
2389 -> 2374;
2389 -> 1448;
2389 -> 2373;
2390 -> 2374;
2390 -> 1448;
2390 -> 2373;
2391 -> 2374;
2391 -> 1448;
2391 -> 2373;
2392 -> 2374;
2392 -> 1448;
2392 -> 2373;
2393 -> 2374;
2393 -> 1448;
2393 -> 2373;
2394 -> 2374;
2394 -> 1448;
2394 -> 2373;
2395 -> 2374;
2395 -> 1448;
2395 -> 1455;
2395 -> 2373;
2396 -> 2374;
2396 -> 1448;
2396 -> 2373;
2397 -> 2374;
2397 -> 1448;
2397 -> 2373;
2398 -> 2374;
2398 -> 1448;
2398 -> 2373;
2399 -> 2374;
2399 -> 1448;
2399 -> 2373;
2400 -> 2374;
2400 -> 1448;
2400 -> 2373;
2401 -> 2374;
2401 -> 1448;
2401 -> 2373;
2402 -> 2374;
2402 -> 1448;
2402 -> 2373;
2403 -> 2374;
2403 -> 1448;
2403 -> 2373;
2404 -> 2374;
2404 -> 1448;
2404 -> 2373;
2405 -> 2374;
2405 -> 1448;
2405 -> 2373;
2406 -> 2374;
2406 -> 1448;
2406 -> 1450;
2406 -> 1444;
2406 -> 2373;
2407 -> 2374;
2407 -> 1448;
2407 -> 1451;
2407 -> 1445;
2407 -> 2373;
2408 -> 2373;
2409 -> 2375;
2409 -> 2408;
2410 -> 2408;
2411 -> 2410;
2411 -> 2376;
2411 -> 2377;
2411 -> 2378;
2411 -> 2379;
2411 -> 2380;
2411 -> 2385;
2411 -> 2386;
2411 -> 2387;
2411 -> 2388;
2411 -> 2405;
2411 -> 2382;
2411 -> 2383;
2411 -> 2389;
2411 -> 2390;
2411 -> 2391;
2411 -> 2392;
2411 -> 2393;
2411 -> 2394;
2411 -> 2395;
2411 -> 2396;
2411 -> 2397;
2411 -> 2398;
2411 -> 2399;
2411 -> 2400;
2411 -> 2401;
2411 -> 2402;
2411 -> 2403;
2411 -> 2404;
2411 -> 1448;
2411 -> 1449;
2411 -> 1454;
2411 -> 1450;
2411 -> 1444;
2411 -> 1451;
2411 -> 1445;
2411 -> 1453;
2411 -> 1455;
2411 -> 1452;
2411 -> 2408;
2412 -> 2410;
2412 -> 2408;
2413 -> 2410;
2413 -> 2408;
2414 -> 2410;
2414 -> 2408;
2415 -> 2368;
2415 -> 2372;
2415 -> 2367;
2416 -> 2372;
2419 -> 2417;
2419 -> 2418;
2420 -> 1599;
2420 -> 2418;
2421 -> 2419;
2421 -> 2420;
2421 -> 1590;
2421 -> 1591;
2421 -> 1596;
2421 -> 2418;
2422 -> 2420;
2422 -> 2418;
2423 -> 2418;
2424 -> 2418;
2425 -> 2422;
2425 -> 2424;
2426 -> 2423;
2426 -> 2424;
2427 -> 2425;
2427 -> 1590;
2427 -> 2424;
2428 -> 2425;
2428 -> 1590;
2428 -> 2424;
2429 -> 2425;
2429 -> 1590;
2429 -> 2424;
2430 -> 2425;
2430 -> 1590;
2430 -> 2424;
2431 -> 2425;
2431 -> 1590;
2431 -> 1595;
2431 -> 2424;
2432 -> 2425;
2432 -> 1590;
2432 -> 2424;
2433 -> 2425;
2433 -> 1590;
2433 -> 2424;
2434 -> 2425;
2434 -> 1590;
2434 -> 1591;
2434 -> 1596;
2434 -> 2424;
2435 -> 2425;
2435 -> 1590;
2435 -> 2424;
2436 -> 2425;
2436 -> 1590;
2436 -> 2424;
2437 -> 2425;
2437 -> 1590;
2437 -> 2424;
2438 -> 2425;
2438 -> 1590;
2438 -> 2424;
2439 -> 2425;
2439 -> 1590;
2439 -> 2424;
2440 -> 2425;
2440 -> 1590;
2440 -> 2424;
2441 -> 2425;
2441 -> 1590;
2441 -> 2424;
2442 -> 2425;
2442 -> 1590;
2442 -> 2424;
2443 -> 2425;
2443 -> 1590;
2443 -> 2424;
2444 -> 2425;
2444 -> 1590;
2444 -> 2424;
2445 -> 2425;
2445 -> 1590;
2445 -> 2424;
2446 -> 2425;
2446 -> 1590;
2446 -> 2424;
2447 -> 2425;
2447 -> 1590;
2447 -> 2424;
2448 -> 2425;
2448 -> 1590;
2448 -> 2424;
2449 -> 2425;
2449 -> 1590;
2449 -> 2424;
2450 -> 2425;
2450 -> 1590;
2450 -> 2424;
2451 -> 2425;
2451 -> 1590;
2451 -> 2424;
2452 -> 2425;
2452 -> 1590;
2452 -> 2424;
2453 -> 2425;
2453 -> 1590;
2453 -> 2424;
2454 -> 2425;
2454 -> 1590;
2454 -> 2424;
2455 -> 2425;
2455 -> 1590;
2455 -> 2424;
2456 -> 2425;
2456 -> 1590;
2456 -> 2424;
2457 -> 2425;
2457 -> 1590;
2457 -> 1592;
2457 -> 1597;
2457 -> 2424;
2458 -> 2425;
2458 -> 1590;
2458 -> 1593;
2458 -> 1598;
2458 -> 2424;
2459 -> 2424;
2460 -> 2427;
2460 -> 2459;
2461 -> 2428;
2461 -> 2459;
2462 -> 2429;
2462 -> 2459;
2463 -> 2430;
2463 -> 2459;
2464 -> 2431;
2464 -> 2459;
2465 -> 2432;
2465 -> 2459;
2466 -> 2433;
2466 -> 2459;
2467 -> 2434;
2467 -> 2459;
2468 -> 2435;
2468 -> 2459;
2469 -> 2436;
2469 -> 2459;
2470 -> 2437;
2470 -> 2459;
2471 -> 2438;
2471 -> 2459;
2472 -> 2439;
2472 -> 2459;
2473 -> 2440;
2473 -> 2459;
2474 -> 2441;
2474 -> 2459;
2475 -> 2442;
2475 -> 2459;
2476 -> 2443;
2476 -> 2459;
2477 -> 2444;
2477 -> 2459;
2478 -> 2445;
2478 -> 2459;
2479 -> 2446;
2479 -> 2459;
2480 -> 2447;
2480 -> 2459;
2481 -> 2448;
2481 -> 2459;
2482 -> 2449;
2482 -> 2459;
2483 -> 2450;
2483 -> 2459;
2484 -> 2451;
2484 -> 2459;
2485 -> 2452;
2485 -> 2459;
2486 -> 2453;
2486 -> 2459;
2487 -> 2454;
2487 -> 2459;
2488 -> 2455;
2488 -> 2459;
2489 -> 2456;
2489 -> 2459;
2490 -> 2457;
2490 -> 2459;
2491 -> 2458;
2491 -> 2459;
2492 -> 2426;
2492 -> 2459;
2493 -> 2459;
2494 -> 2493;
2494 -> 2460;
2494 -> 2461;
2494 -> 2462;
2494 -> 2463;
2494 -> 2464;
2494 -> 2469;
2494 -> 2470;
2494 -> 2471;
2494 -> 2472;
2494 -> 2489;
2494 -> 2466;
2494 -> 2467;
2494 -> 2473;
2494 -> 2474;
2494 -> 2475;
2494 -> 2476;
2494 -> 2477;
2494 -> 2478;
2494 -> 2479;
2494 -> 2480;
2494 -> 2481;
2494 -> 2482;
2494 -> 2483;
2494 -> 2484;
2494 -> 2485;
2494 -> 2486;
2494 -> 2487;
2494 -> 2488;
2494 -> 1590;
2494 -> 1591;
2494 -> 1596;
2494 -> 1592;
2494 -> 1597;
2494 -> 1593;
2494 -> 1598;
2494 -> 1595;
2494 -> 1594;
2494 -> 2459;
2495 -> 2493;
2495 -> 2459;
2496 -> 2493;
2496 -> 2459;
2497 -> 2493;
2497 -> 2459;
2498 -> 2465;
2498 -> 2459;
2499 -> 2498;
2499 -> 2493;
2499 -> 2459;
2500 -> 2468;
2500 -> 2493;
2500 -> 2459;
2501 -> 2419;
2501 -> 2423;
2501 -> 2418;
2502 -> 2423;
2505 -> 2503;
2505 -> 2504;
2506 -> 1742;
2506 -> 2504;
2507 -> 2505;
2507 -> 2506;
2507 -> 1733;
2507 -> 1734;
2507 -> 1739;
2507 -> 2504;
2508 -> 2506;
2508 -> 2504;
2509 -> 2504;
2510 -> 2504;
2511 -> 2508;
2511 -> 2510;
2512 -> 2509;
2512 -> 2510;
2513 -> 2511;
2513 -> 1733;
2513 -> 2510;
2514 -> 2511;
2514 -> 1733;
2514 -> 2510;
2515 -> 2511;
2515 -> 1733;
2515 -> 2510;
2516 -> 2511;
2516 -> 1733;
2516 -> 2510;
2517 -> 2511;
2517 -> 1733;
2517 -> 1738;
2517 -> 2510;
2518 -> 2511;
2518 -> 1733;
2518 -> 2510;
2519 -> 2511;
2519 -> 1733;
2519 -> 2510;
2520 -> 2511;
2520 -> 1733;
2520 -> 1734;
2520 -> 1739;
2520 -> 2510;
2521 -> 2511;
2521 -> 1733;
2521 -> 2510;
2522 -> 2511;
2522 -> 1733;
2522 -> 2510;
2523 -> 2511;
2523 -> 1733;
2523 -> 2510;
2524 -> 2511;
2524 -> 1733;
2524 -> 2510;
2525 -> 2511;
2525 -> 1733;
2525 -> 2510;
2526 -> 2511;
2526 -> 1733;
2526 -> 2510;
2527 -> 2511;
2527 -> 1733;
2527 -> 2510;
2528 -> 2511;
2528 -> 1733;
2528 -> 2510;
2529 -> 2511;
2529 -> 1733;
2529 -> 2510;
2530 -> 2511;
2530 -> 1733;
2530 -> 2510;
2531 -> 2511;
2531 -> 1733;
2531 -> 2510;
2532 -> 2511;
2532 -> 1733;
2532 -> 2510;
2533 -> 2511;
2533 -> 1733;
2533 -> 2510;
2534 -> 2511;
2534 -> 1733;
2534 -> 2510;
2535 -> 2511;
2535 -> 1733;
2535 -> 2510;
2536 -> 2511;
2536 -> 1733;
2536 -> 2510;
2537 -> 2511;
2537 -> 1733;
2537 -> 2510;
2538 -> 2511;
2538 -> 1733;
2538 -> 2510;
2539 -> 2511;
2539 -> 1733;
2539 -> 2510;
2540 -> 2511;
2540 -> 1733;
2540 -> 2510;
2541 -> 2511;
2541 -> 1733;
2541 -> 2510;
2542 -> 2511;
2542 -> 1733;
2542 -> 2510;
2543 -> 2511;
2543 -> 1733;
2543 -> 1735;
2543 -> 1740;
2543 -> 2510;
2544 -> 2511;
2544 -> 1733;
2544 -> 1736;
2544 -> 1741;
2544 -> 2510;
2545 -> 2510;
2546 -> 2513;
2546 -> 2545;
2547 -> 2514;
2547 -> 2545;
2548 -> 2515;
2548 -> 2545;
2549 -> 2516;
2549 -> 2545;
2550 -> 2517;
2550 -> 2545;
2551 -> 2518;
2551 -> 2545;
2552 -> 2519;
2552 -> 2545;
2553 -> 2520;
2553 -> 2545;
2554 -> 2521;
2554 -> 2545;
2555 -> 2522;
2555 -> 2545;
2556 -> 2523;
2556 -> 2545;
2557 -> 2524;
2557 -> 2545;
2558 -> 2525;
2558 -> 2545;
2559 -> 2526;
2559 -> 2545;
2560 -> 2527;
2560 -> 2545;
2561 -> 2528;
2561 -> 2545;
2562 -> 2529;
2562 -> 2545;
2563 -> 2530;
2563 -> 2545;
2564 -> 2531;
2564 -> 2545;
2565 -> 2532;
2565 -> 2545;
2566 -> 2533;
2566 -> 2545;
2567 -> 2534;
2567 -> 2545;
2568 -> 2535;
2568 -> 2545;
2569 -> 2536;
2569 -> 2545;
2570 -> 2537;
2570 -> 2545;
2571 -> 2538;
2571 -> 2545;
2572 -> 2539;
2572 -> 2545;
2573 -> 2540;
2573 -> 2545;
2574 -> 2541;
2574 -> 2545;
2575 -> 2542;
2575 -> 2545;
2576 -> 2543;
2576 -> 2545;
2577 -> 2544;
2577 -> 2545;
2578 -> 2512;
2578 -> 2545;
2579 -> 2545;
2580 -> 2579;
2580 -> 2546;
2580 -> 2547;
2580 -> 2548;
2580 -> 2549;
2580 -> 2550;
2580 -> 2555;
2580 -> 2556;
2580 -> 2557;
2580 -> 2558;
2580 -> 2575;
2580 -> 2552;
2580 -> 2553;
2580 -> 2559;
2580 -> 2560;
2580 -> 2561;
2580 -> 2562;
2580 -> 2563;
2580 -> 2564;
2580 -> 2565;
2580 -> 2566;
2580 -> 2567;
2580 -> 2568;
2580 -> 2569;
2580 -> 2570;
2580 -> 2571;
2580 -> 2572;
2580 -> 2573;
2580 -> 2574;
2580 -> 1733;
2580 -> 1734;
2580 -> 1739;
2580 -> 1735;
2580 -> 1740;
2580 -> 1736;
2580 -> 1741;
2580 -> 1738;
2580 -> 1737;
2580 -> 2545;
2581 -> 2579;
2581 -> 2545;
2582 -> 2579;
2582 -> 2545;
2583 -> 2579;
2583 -> 2545;
2584 -> 2551;
2584 -> 2545;
2585 -> 2584;
2585 -> 2579;
2585 -> 2545;
2586 -> 2554;
2586 -> 2579;
2586 -> 2545;
2587 -> 2505;
2587 -> 2509;
2587 -> 2504;
2588 -> 2509;
2589 -> 0;
2591 -> 2589;
2591 -> 2590;
2592 -> 1141;
2592 -> 2590;
2593 -> 2591;
2593 -> 2590;
2594 -> 2592;
2594 -> 2360;
2594 -> 2590;
2595 -> 2593;
2595 -> 2594;
2595 -> 2590;
2596 -> 2592;
2596 -> 2590;
2597 -> 2590;
2598 -> 2590;
2599 -> 2596;
2599 -> 2598;
2600 -> 2597;
2600 -> 2598;
2601 -> 2599;
2601 -> 2360;
2601 -> 2598;
2602 -> 2599;
2602 -> 2360;
2602 -> 2598;
2603 -> 2599;
2603 -> 2360;
2603 -> 2598;
2604 -> 2599;
2604 -> 2360;
2604 -> 2598;
2605 -> 2599;
2605 -> 2360;
2605 -> 2330;
2605 -> 2598;
2606 -> 2599;
2606 -> 2360;
2606 -> 2598;
2607 -> 2599;
2607 -> 2360;
2607 -> 2598;
2608 -> 2599;
2608 -> 2360;
2608 -> 2361;
2608 -> 2333;
2608 -> 2364;
2608 -> 2598;
2609 -> 2599;
2609 -> 2360;
2609 -> 2598;
2610 -> 2599;
2610 -> 2360;
2610 -> 2598;
2611 -> 2599;
2611 -> 2360;
2611 -> 2598;
2612 -> 2599;
2612 -> 2360;
2612 -> 2598;
2613 -> 2599;
2613 -> 2360;
2613 -> 2598;
2614 -> 2599;
2614 -> 2360;
2614 -> 2598;
2615 -> 2599;
2615 -> 2360;
2615 -> 2598;
2616 -> 2599;
2616 -> 2360;
2616 -> 2598;
2617 -> 2599;
2617 -> 2360;
2617 -> 2598;
2618 -> 2599;
2618 -> 2360;
2618 -> 2598;
2619 -> 2599;
2619 -> 2360;
2619 -> 2598;
2620 -> 2599;
2620 -> 2360;
2620 -> 2598;
2621 -> 2599;
2621 -> 2360;
2621 -> 2598;
2622 -> 2599;
2622 -> 2360;
2622 -> 2598;
2623 -> 2599;
2623 -> 2360;
2623 -> 2598;
2624 -> 2599;
2624 -> 2360;
2624 -> 2598;
2625 -> 2599;
2625 -> 2360;
2625 -> 2598;
2626 -> 2599;
2626 -> 2360;
2626 -> 2598;
2627 -> 2599;
2627 -> 2360;
2627 -> 2598;
2628 -> 2599;
2628 -> 2360;
2628 -> 2598;
2629 -> 2599;
2629 -> 2360;
2629 -> 2598;
2630 -> 2599;
2630 -> 2360;
2630 -> 2598;
2631 -> 2599;
2631 -> 2360;
2631 -> 2362;
2631 -> 2355;
2631 -> 2598;
2632 -> 2599;
2632 -> 2360;
2632 -> 2363;
2632 -> 2356;
2632 -> 2598;
2633 -> 2598;
2634 -> 2600;
2634 -> 2633;
2635 -> 2633;
2636 -> 2635;
2636 -> 2633;
2637 -> 2635;
2637 -> 2633;
2638 -> 2635;
2638 -> 2633;
2639 -> 2591;
2639 -> 2597;
2639 -> 2590;
2640 -> 2597;
2641 -> 0;
2643 -> 2641;
2643 -> 2642;
2644 -> 1284;
2644 -> 2642;
2645 -> 2643;
2645 -> 2642;
2646 -> 2644;
2646 -> 2411;
2646 -> 2642;
2647 -> 2645;
2647 -> 2646;
2647 -> 2642;
2648 -> 2644;
2648 -> 2642;
2649 -> 2642;
2650 -> 2642;
2651 -> 2648;
2651 -> 2650;
2652 -> 2649;
2652 -> 2650;
2653 -> 2651;
2653 -> 2411;
2653 -> 2650;
2654 -> 2651;
2654 -> 2411;
2654 -> 2650;
2655 -> 2651;
2655 -> 2411;
2655 -> 2650;
2656 -> 2651;
2656 -> 2411;
2656 -> 2650;
2657 -> 2651;
2657 -> 2411;
2657 -> 2381;
2657 -> 2650;
2658 -> 2651;
2658 -> 2411;
2658 -> 2650;
2659 -> 2651;
2659 -> 2411;
2659 -> 2650;
2660 -> 2651;
2660 -> 2411;
2660 -> 2412;
2660 -> 2384;
2660 -> 2415;
2660 -> 2650;
2661 -> 2651;
2661 -> 2411;
2661 -> 2650;
2662 -> 2651;
2662 -> 2411;
2662 -> 2650;
2663 -> 2651;
2663 -> 2411;
2663 -> 2650;
2664 -> 2651;
2664 -> 2411;
2664 -> 2650;
2665 -> 2651;
2665 -> 2411;
2665 -> 2650;
2666 -> 2651;
2666 -> 2411;
2666 -> 2650;
2667 -> 2651;
2667 -> 2411;
2667 -> 2650;
2668 -> 2651;
2668 -> 2411;
2668 -> 2650;
2669 -> 2651;
2669 -> 2411;
2669 -> 2650;
2670 -> 2651;
2670 -> 2411;
2670 -> 2650;
2671 -> 2651;
2671 -> 2411;
2671 -> 2650;
2672 -> 2651;
2672 -> 2411;
2672 -> 2650;
2673 -> 2651;
2673 -> 2411;
2673 -> 2650;
2674 -> 2651;
2674 -> 2411;
2674 -> 2650;
2675 -> 2651;
2675 -> 2411;
2675 -> 2650;
2676 -> 2651;
2676 -> 2411;
2676 -> 2650;
2677 -> 2651;
2677 -> 2411;
2677 -> 2650;
2678 -> 2651;
2678 -> 2411;
2678 -> 2650;
2679 -> 2651;
2679 -> 2411;
2679 -> 2650;
2680 -> 2651;
2680 -> 2411;
2680 -> 2650;
2681 -> 2651;
2681 -> 2411;
2681 -> 2650;
2682 -> 2651;
2682 -> 2411;
2682 -> 2650;
2683 -> 2651;
2683 -> 2411;
2683 -> 2413;
2683 -> 2406;
2683 -> 2650;
2684 -> 2651;
2684 -> 2411;
2684 -> 2414;
2684 -> 2407;
2684 -> 2650;
2685 -> 2650;
2686 -> 2652;
2686 -> 2685;
2687 -> 2685;
2688 -> 2687;
2688 -> 2685;
2689 -> 2687;
2689 -> 2685;
2690 -> 2687;
2690 -> 2685;
2691 -> 2643;
2691 -> 2649;
2691 -> 2642;
2692 -> 2649;
2693 -> 0;
2695 -> 2693;
2695 -> 2694;
2696 -> 2171;
2696 -> 2694;
2697 -> 2695;
2697 -> 2694;
2698 -> 2696;
2698 -> 2162;
2698 -> 2694;
2699 -> 2697;
2699 -> 2698;
2699 -> 2694;
2700 -> 2696;
2700 -> 2694;
2701 -> 2694;
2702 -> 2694;
2703 -> 2700;
2703 -> 2702;
2704 -> 2701;
2704 -> 2702;
2705 -> 2703;
2705 -> 2162;
2705 -> 2702;
2706 -> 2703;
2706 -> 2162;
2706 -> 2702;
2707 -> 2703;
2707 -> 2162;
2707 -> 2702;
2708 -> 2703;
2708 -> 2162;
2708 -> 2702;
2709 -> 2703;
2709 -> 2162;
2709 -> 2167;
2709 -> 2702;
2710 -> 2703;
2710 -> 2162;
2710 -> 2702;
2711 -> 2703;
2711 -> 2162;
2711 -> 2702;
2712 -> 2703;
2712 -> 2162;
2712 -> 2163;
2712 -> 2168;
2712 -> 2702;
2713 -> 2703;
2713 -> 2162;
2713 -> 2702;
2714 -> 2703;
2714 -> 2162;
2714 -> 2702;
2715 -> 2703;
2715 -> 2162;
2715 -> 2702;
2716 -> 2703;
2716 -> 2162;
2716 -> 2702;
2717 -> 2703;
2717 -> 2162;
2717 -> 2702;
2718 -> 2703;
2718 -> 2162;
2718 -> 2702;
2719 -> 2703;
2719 -> 2162;
2719 -> 2702;
2720 -> 2703;
2720 -> 2162;
2720 -> 2702;
2721 -> 2703;
2721 -> 2162;
2721 -> 2702;
2722 -> 2703;
2722 -> 2162;
2722 -> 2702;
2723 -> 2703;
2723 -> 2162;
2723 -> 2702;
2724 -> 2703;
2724 -> 2162;
2724 -> 2702;
2725 -> 2703;
2725 -> 2162;
2725 -> 2702;
2726 -> 2703;
2726 -> 2162;
2726 -> 2702;
2727 -> 2703;
2727 -> 2162;
2727 -> 2702;
2728 -> 2703;
2728 -> 2162;
2728 -> 2702;
2729 -> 2703;
2729 -> 2162;
2729 -> 2702;
2730 -> 2703;
2730 -> 2162;
2730 -> 2702;
2731 -> 2703;
2731 -> 2162;
2731 -> 2702;
2732 -> 2703;
2732 -> 2162;
2732 -> 2702;
2733 -> 2703;
2733 -> 2162;
2733 -> 2702;
2734 -> 2703;
2734 -> 2162;
2734 -> 2702;
2735 -> 2703;
2735 -> 2162;
2735 -> 2164;
2735 -> 2169;
2735 -> 2702;
2736 -> 2703;
2736 -> 2162;
2736 -> 2165;
2736 -> 2170;
2736 -> 2702;
2737 -> 2702;
2738 -> 2705;
2738 -> 2737;
2739 -> 2706;
2739 -> 2737;
2740 -> 2707;
2740 -> 2737;
2741 -> 2708;
2741 -> 2737;
2742 -> 2709;
2742 -> 2737;
2743 -> 2710;
2743 -> 2737;
2744 -> 2711;
2744 -> 2737;
2745 -> 2712;
2745 -> 2737;
2746 -> 2713;
2746 -> 2737;
2747 -> 2714;
2747 -> 2737;
2748 -> 2715;
2748 -> 2737;
2749 -> 2716;
2749 -> 2737;
2750 -> 2717;
2750 -> 2737;
2751 -> 2718;
2751 -> 2737;
2752 -> 2719;
2752 -> 2737;
2753 -> 2720;
2753 -> 2737;
2754 -> 2721;
2754 -> 2737;
2755 -> 2722;
2755 -> 2737;
2756 -> 2723;
2756 -> 2737;
2757 -> 2724;
2757 -> 2737;
2758 -> 2725;
2758 -> 2737;
2759 -> 2726;
2759 -> 2737;
2760 -> 2727;
2760 -> 2737;
2761 -> 2728;
2761 -> 2737;
2762 -> 2729;
2762 -> 2737;
2763 -> 2730;
2763 -> 2737;
2764 -> 2731;
2764 -> 2737;
2765 -> 2732;
2765 -> 2737;
2766 -> 2733;
2766 -> 2737;
2767 -> 2734;
2767 -> 2737;
2768 -> 2735;
2768 -> 2737;
2769 -> 2736;
2769 -> 2737;
2770 -> 2704;
2770 -> 2737;
2771 -> 2737;
2772 -> 2771;
2772 -> 2738;
2772 -> 2739;
2772 -> 2740;
2772 -> 2741;
2772 -> 2742;
2772 -> 2747;
2772 -> 2748;
2772 -> 2749;
2772 -> 2750;
2772 -> 2767;
2772 -> 2744;
2772 -> 2745;
2772 -> 2751;
2772 -> 2752;
2772 -> 2753;
2772 -> 2754;
2772 -> 2755;
2772 -> 2756;
2772 -> 2757;
2772 -> 2758;
2772 -> 2759;
2772 -> 2760;
2772 -> 2761;
2772 -> 2762;
2772 -> 2763;
2772 -> 2764;
2772 -> 2765;
2772 -> 2766;
2772 -> 2162;
2772 -> 2163;
2772 -> 2168;
2772 -> 2164;
2772 -> 2169;
2772 -> 2165;
2772 -> 2170;
2772 -> 2167;
2772 -> 2166;
2772 -> 2737;
2773 -> 2771;
2773 -> 2737;
2774 -> 2771;
2774 -> 2737;
2775 -> 2771;
2775 -> 2737;
2776 -> 2743;
2776 -> 2737;
2777 -> 2776;
2777 -> 2771;
2777 -> 2737;
2778 -> 2746;
2778 -> 2771;
2778 -> 2737;
2779 -> 2695;
2779 -> 2701;
2779 -> 2694;
2780 -> 2701;
2781 -> 0;
2783 -> 2781;
2783 -> 2782;
2784 -> 1599;
2784 -> 2782;
2785 -> 2783;
2785 -> 2782;
2786 -> 2784;
2786 -> 2494;
2786 -> 2782;
2787 -> 2785;
2787 -> 2786;
2787 -> 2782;
2788 -> 2784;
2788 -> 2782;
2789 -> 2782;
2790 -> 2782;
2791 -> 2788;
2791 -> 2790;
2792 -> 2789;
2792 -> 2790;
2793 -> 2791;
2793 -> 2494;
2793 -> 2790;
2794 -> 2791;
2794 -> 2494;
2794 -> 2790;
2795 -> 2791;
2795 -> 2494;
2795 -> 2790;
2796 -> 2791;
2796 -> 2494;
2796 -> 2790;
2797 -> 2791;
2797 -> 2494;
2797 -> 2499;
2797 -> 2790;
2798 -> 2791;
2798 -> 2494;
2798 -> 2790;
2799 -> 2791;
2799 -> 2494;
2799 -> 2790;
2800 -> 2791;
2800 -> 2494;
2800 -> 2495;
2800 -> 2500;
2800 -> 2501;
2800 -> 2790;
2801 -> 2791;
2801 -> 2494;
2801 -> 2790;
2802 -> 2791;
2802 -> 2494;
2802 -> 2790;
2803 -> 2791;
2803 -> 2494;
2803 -> 2790;
2804 -> 2791;
2804 -> 2494;
2804 -> 2790;
2805 -> 2791;
2805 -> 2494;
2805 -> 2790;
2806 -> 2791;
2806 -> 2494;
2806 -> 2790;
2807 -> 2791;
2807 -> 2494;
2807 -> 2790;
2808 -> 2791;
2808 -> 2494;
2808 -> 2790;
2809 -> 2791;
2809 -> 2494;
2809 -> 2790;
2810 -> 2791;
2810 -> 2494;
2810 -> 2790;
2811 -> 2791;
2811 -> 2494;
2811 -> 2790;
2812 -> 2791;
2812 -> 2494;
2812 -> 2790;
2813 -> 2791;
2813 -> 2494;
2813 -> 2790;
2814 -> 2791;
2814 -> 2494;
2814 -> 2790;
2815 -> 2791;
2815 -> 2494;
2815 -> 2790;
2816 -> 2791;
2816 -> 2494;
2816 -> 2790;
2817 -> 2791;
2817 -> 2494;
2817 -> 2790;
2818 -> 2791;
2818 -> 2494;
2818 -> 2790;
2819 -> 2791;
2819 -> 2494;
2819 -> 2790;
2820 -> 2791;
2820 -> 2494;
2820 -> 2790;
2821 -> 2791;
2821 -> 2494;
2821 -> 2790;
2822 -> 2791;
2822 -> 2494;
2822 -> 2790;
2823 -> 2791;
2823 -> 2494;
2823 -> 2496;
2823 -> 2490;
2823 -> 2790;
2824 -> 2791;
2824 -> 2494;
2824 -> 2497;
2824 -> 2491;
2824 -> 2790;
2825 -> 2790;
2826 -> 2792;
2826 -> 2825;
2827 -> 2825;
2828 -> 2827;
2828 -> 2793;
2828 -> 2794;
2828 -> 2795;
2828 -> 2796;
2828 -> 2797;
2828 -> 2802;
2828 -> 2803;
2828 -> 2804;
2828 -> 2805;
2828 -> 2822;
2828 -> 2799;
2828 -> 2800;
2828 -> 2806;
2828 -> 2807;
2828 -> 2808;
2828 -> 2809;
2828 -> 2810;
2828 -> 2811;
2828 -> 2812;
2828 -> 2813;
2828 -> 2814;
2828 -> 2815;
2828 -> 2816;
2828 -> 2817;
2828 -> 2818;
2828 -> 2819;
2828 -> 2820;
2828 -> 2821;
2828 -> 2494;
2828 -> 2495;
2828 -> 2500;
2828 -> 2501;
2828 -> 2496;
2828 -> 2490;
2828 -> 2497;
2828 -> 2491;
2828 -> 2499;
2828 -> 2498;
2828 -> 2825;
2829 -> 2827;
2829 -> 2825;
2830 -> 2827;
2830 -> 2825;
2831 -> 2827;
2831 -> 2825;
2832 -> 2783;
2832 -> 2789;
2832 -> 2782;
2833 -> 2789;
2834 -> 0;
2835 -> 0;
2835 -> 2834;
2836 -> 2835;
2837 -> 362;
2837 -> 285;
2838 -> 280;
2838 -> 279;
2839 -> 0;
2839 -> 279;
2840 -> 2839;
2840 -> 283;
2840 -> 279;
2841 -> 279;
2842 -> 2838;
2842 -> 2840;
2842 -> 2841;
2842 -> 0;
2842 -> 279;
2844 -> 2843;
2845 -> 2844;
2847 -> 2845;
2847 -> 2846;
2848 -> 2846;
2849 -> 2846;
2850 -> 2847;
2850 -> 2846;
2851 -> 2848;
2851 -> 2850;
2852 -> 0;
2852 -> 2851;
2853 -> 2846;
2854 -> 2852;
2854 -> 2853;
2854 -> 2846;
2856 -> 0;
2856 -> 2846;
2857 -> 2847;
2857 -> 2846;
2858 -> 2846;
2859 -> 2856;
2859 -> 2858;
2860 -> 2857;
2860 -> 2858;
2861 -> 2859;
2861 -> 2858;
2862 -> 2860;
2862 -> 2858;
2863 -> 2858;
2864 -> 2858;
2865 -> 2861;
2865 -> 2864;
2866 -> 2862;
2866 -> 2864;
2867 -> 2863;
2867 -> 2864;
2868 -> 2863;
2868 -> 2864;
2869 -> 2863;
2869 -> 2864;
2870 -> 2865;
2870 -> 2864;
2871 -> 2867;
2871 -> 2864;
2872 -> 2868;
2872 -> 2864;
2874 -> 2873;
2875 -> 2866;
2875 -> 2864;
2876 -> 2864;
2877 -> 2870;
2877 -> 2876;
2878 -> 2871;
2878 -> 2876;
2879 -> 2872;
2879 -> 2876;
2880 -> 2875;
2880 -> 2876;
2881 -> 2869;
2881 -> 2876;
2882 -> 2877;
2882 -> 2876;
2883 -> 2878;
2883 -> 2876;
2884 -> 2879;
2884 -> 2876;
2885 -> 2880;
2885 -> 2876;
2886 -> 2876;
2887 -> 2886;
2887 -> 2882;
2887 -> 2883;
2887 -> 2884;
2887 -> 2885;
2887 -> 2876;
2888 -> 2886;
2888 -> 2876;
2889 -> 2888;
2889 -> 2887;
2889 -> 2876;
2890 -> 2869;
2890 -> 2864;
2891 -> 2866;
2891 -> 2869;
2891 -> 2864;
2892 -> 2865;
2892 -> 0;
2892 -> 2864;
2893 -> 2863;
2893 -> 2846;
2894 -> 2848;
2894 -> 2846;
2895 -> 2893;
2895 -> 2894;
2896 -> 2895;
2899 -> 2897;
2899 -> 2898;
2900 -> 2898;
2901 -> 2898;
2902 -> 2899;
2902 -> 2898;
2903 -> 2900;
2903 -> 2902;
2904 -> 0;
2904 -> 2903;
2905 -> 2898;
2906 -> 2904;
2906 -> 2905;
2906 -> 2898;
2907 -> 0;
2907 -> 2898;
2908 -> 2899;
2908 -> 2898;
2909 -> 2898;
2910 -> 2907;
2910 -> 2909;
2911 -> 2908;
2911 -> 2909;
2912 -> 2910;
2912 -> 2909;
2913 -> 2911;
2913 -> 2909;
2914 -> 2909;
2915 -> 2909;
2916 -> 2912;
2916 -> 2915;
2917 -> 2913;
2917 -> 2915;
2918 -> 2914;
2918 -> 2915;
2919 -> 2914;
2919 -> 2915;
2920 -> 2914;
2920 -> 2915;
2921 -> 2916;
2921 -> 2915;
2922 -> 2918;
2922 -> 2915;
2923 -> 2919;
2923 -> 2915;
2924 -> 2917;
2924 -> 2915;
2925 -> 2915;
2926 -> 2921;
2926 -> 2925;
2927 -> 2922;
2927 -> 2925;
2928 -> 2923;
2928 -> 2925;
2929 -> 2924;
2929 -> 2925;
2930 -> 2920;
2930 -> 2925;
2931 -> 2926;
2931 -> 2925;
2932 -> 2927;
2932 -> 2925;
2933 -> 2928;
2933 -> 2925;
2934 -> 2929;
2934 -> 2925;
2935 -> 2925;
2936 -> 2935;
2936 -> 2931;
2936 -> 2932;
2936 -> 2933;
2936 -> 2934;
2936 -> 2925;
2937 -> 2935;
2937 -> 2925;
2938 -> 2937;
2938 -> 2936;
2938 -> 2925;
2939 -> 2920;
2939 -> 2915;
2940 -> 2917;
2940 -> 2920;
2940 -> 2915;
2941 -> 2916;
2941 -> 0;
2941 -> 2915;
2942 -> 2914;
2942 -> 2898;
2943 -> 2900;
2943 -> 2898;
2944 -> 2942;
2944 -> 2943;
2945 -> 2944;
2948 -> 2946;
2948 -> 2947;
2949 -> 2947;
2950 -> 2947;
2951 -> 2948;
2951 -> 2947;
2952 -> 2949;
2952 -> 2951;
2953 -> 0;
2953 -> 2952;
2954 -> 2947;
2955 -> 2953;
2955 -> 2954;
2955 -> 2947;
2956 -> 0;
2956 -> 2947;
2957 -> 2948;
2957 -> 2947;
2958 -> 2947;
2959 -> 2956;
2959 -> 2958;
2960 -> 2957;
2960 -> 2958;
2961 -> 2959;
2961 -> 2958;
2962 -> 2960;
2962 -> 2958;
2963 -> 2958;
2964 -> 2958;
2965 -> 2961;
2965 -> 2964;
2966 -> 2962;
2966 -> 2964;
2967 -> 2963;
2967 -> 2964;
2968 -> 2963;
2968 -> 2964;
2969 -> 2963;
2969 -> 2964;
2970 -> 2965;
2970 -> 2964;
2971 -> 2967;
2971 -> 2964;
2972 -> 2968;
2972 -> 2964;
2973 -> 2966;
2973 -> 2964;
2974 -> 2964;
2975 -> 2970;
2975 -> 2974;
2976 -> 2971;
2976 -> 2974;
2977 -> 2972;
2977 -> 2974;
2978 -> 2973;
2978 -> 2974;
2979 -> 2969;
2979 -> 2974;
2980 -> 2975;
2980 -> 2974;
2981 -> 2976;
2981 -> 2974;
2982 -> 2977;
2982 -> 2974;
2983 -> 2978;
2983 -> 2974;
2984 -> 2974;
2985 -> 2984;
2985 -> 2980;
2985 -> 2981;
2985 -> 2982;
2985 -> 2983;
2985 -> 2974;
2986 -> 2984;
2986 -> 2974;
2987 -> 2986;
2987 -> 2985;
2987 -> 2974;
2988 -> 2969;
2988 -> 2964;
2989 -> 2966;
2989 -> 2969;
2989 -> 2964;
2990 -> 2965;
2990 -> 0;
2990 -> 2964;
2991 -> 2963;
2991 -> 2947;
2992 -> 2949;
2992 -> 2947;
2993 -> 2991;
2993 -> 2992;
2994 -> 2993;
2997 -> 2995;
2997 -> 2996;
2998 -> 2996;
2999 -> 0;
2999 -> 2996;
3000 -> 2997;
3000 -> 2996;
3001 -> 2996;
3002 -> 2999;
3002 -> 3001;
3003 -> 3000;
3003 -> 3001;
3004 -> 3002;
3004 -> 3001;
3005 -> 3003;
3005 -> 3001;
3006 -> 3001;
3007 -> 3001;
3008 -> 3004;
3008 -> 3007;
3009 -> 3005;
3009 -> 3007;
3010 -> 3006;
3010 -> 3007;
3011 -> 3006;
3011 -> 3007;
3012 -> 3006;
3012 -> 3007;
3013 -> 3008;
3013 -> 3007;
3014 -> 3010;
3014 -> 3007;
3015 -> 3011;
3015 -> 3007;
3016 -> 3009;
3016 -> 3007;
3017 -> 3007;
3018 -> 3013;
3018 -> 3017;
3019 -> 3014;
3019 -> 3017;
3020 -> 3015;
3020 -> 3017;
3021 -> 3016;
3021 -> 3017;
3022 -> 3012;
3022 -> 3017;
3023 -> 3018;
3023 -> 3017;
3024 -> 3019;
3024 -> 3017;
3025 -> 3020;
3025 -> 3017;
3026 -> 3021;
3026 -> 3017;
3027 -> 3017;
3028 -> 3027;
3028 -> 3023;
3028 -> 3024;
3028 -> 3025;
3028 -> 3026;
3028 -> 3017;
3029 -> 3027;
3029 -> 3017;
3030 -> 3029;
3030 -> 3028;
3030 -> 3017;
3031 -> 3012;
3031 -> 3007;
3032 -> 3009;
3032 -> 3012;
3032 -> 3007;
3033 -> 3008;
3033 -> 0;
3033 -> 3007;
3034 -> 3006;
3034 -> 2996;
3035 -> 2998;
3035 -> 2996;
3036 -> 3034;
3036 -> 3035;
3037 -> 3036;
3040 -> 3038;
3040 -> 3039;
3041 -> 3039;
3042 -> 0;
3042 -> 3039;
3043 -> 3040;
3043 -> 3039;
3044 -> 3039;
3045 -> 3042;
3045 -> 3044;
3046 -> 3043;
3046 -> 3044;
3047 -> 3045;
3047 -> 3044;
3048 -> 3046;
3048 -> 3044;
3049 -> 3044;
3050 -> 3044;
3051 -> 3047;
3051 -> 3050;
3052 -> 3048;
3052 -> 3050;
3053 -> 3049;
3053 -> 3050;
3054 -> 3049;
3054 -> 3050;
3055 -> 3049;
3055 -> 3050;
3056 -> 3051;
3056 -> 3050;
3057 -> 3053;
3057 -> 3050;
3058 -> 3054;
3058 -> 3050;
3059 -> 3052;
3059 -> 3050;
3060 -> 3050;
3061 -> 3056;
3061 -> 3060;
3062 -> 3057;
3062 -> 3060;
3063 -> 3058;
3063 -> 3060;
3064 -> 3059;
3064 -> 3060;
3065 -> 3055;
3065 -> 3060;
3066 -> 3061;
3066 -> 3060;
3067 -> 3062;
3067 -> 3060;
3068 -> 3063;
3068 -> 3060;
3069 -> 3064;
3069 -> 3060;
3070 -> 3060;
3071 -> 3070;
3071 -> 3066;
3071 -> 3067;
3071 -> 3068;
3071 -> 3069;
3071 -> 3060;
3072 -> 3070;
3072 -> 3060;
3073 -> 3072;
3073 -> 3071;
3073 -> 3060;
3074 -> 3055;
3074 -> 3050;
3075 -> 3052;
3075 -> 3055;
3075 -> 3050;
3076 -> 3051;
3076 -> 0;
3076 -> 3050;
3077 -> 3049;
3077 -> 3039;
3078 -> 3041;
3078 -> 3039;
3079 -> 3077;
3079 -> 3078;
3080 -> 3079;
3081 -> 2844;
3083 -> 3082;
3085 -> 3081;
3085 -> 3084;
3086 -> 3083;
3086 -> 3084;
3087 -> 3084;
3088 -> 3085;
3088 -> 3084;
3089 -> 3086;
3089 -> 3088;
3090 -> 0;
3090 -> 3089;
3091 -> 3084;
3092 -> 3090;
3092 -> 3091;
3092 -> 3084;
3093 -> 0;
3093 -> 3084;
3094 -> 3085;
3094 -> 3084;
3095 -> 3084;
3096 -> 3093;
3096 -> 3095;
3097 -> 3094;
3097 -> 3095;
3098 -> 3096;
3098 -> 3095;
3099 -> 3097;
3099 -> 3095;
3100 -> 3095;
3101 -> 3095;
3102 -> 3098;
3102 -> 3101;
3103 -> 3099;
3103 -> 3101;
3104 -> 3100;
3104 -> 3101;
3105 -> 3100;
3105 -> 3101;
3106 -> 3100;
3106 -> 3101;
3107 -> 3102;
3107 -> 3101;
3108 -> 3104;
3108 -> 3101;
3109 -> 3105;
3109 -> 3101;
3110 -> 3103;
3110 -> 3101;
3111 -> 3101;
3112 -> 3107;
3112 -> 3111;
3113 -> 3108;
3113 -> 3111;
3114 -> 3109;
3114 -> 3111;
3115 -> 3110;
3115 -> 3111;
3116 -> 3106;
3116 -> 3111;
3117 -> 3112;
3117 -> 3111;
3118 -> 3113;
3118 -> 3111;
3119 -> 3114;
3119 -> 3111;
3120 -> 3115;
3120 -> 3111;
3121 -> 3111;
3122 -> 3121;
3122 -> 3117;
3122 -> 3118;
3122 -> 3119;
3122 -> 3120;
3122 -> 3111;
3123 -> 3121;
3123 -> 3111;
3124 -> 3123;
3124 -> 3122;
3124 -> 3111;
3125 -> 3106;
3125 -> 3101;
3126 -> 3103;
3126 -> 3106;
3126 -> 3101;
3127 -> 3102;
3127 -> 0;
3127 -> 3101;
3128 -> 3100;
3128 -> 3084;
3129 -> 3086;
3129 -> 3084;
3130 -> 3128;
3130 -> 3084;
3131 -> 3084;
3132 -> 0;
3132 -> 3131;
3132 -> 3084;
3133 -> 3130;
3133 -> 3131;
3133 -> 3124;
3133 -> 3125;
3133 -> 3126;
3133 -> 3132;
3133 -> 0;
3133 -> 3084;
3134 -> 3133;
3134 -> 3131;
3135 -> 3133;
3135 -> 3131;
3136 -> 3131;
3137 -> 3135;
3137 -> 3136;
3138 -> 3137;
3138 -> 3133;
3138 -> 3136;
3139 -> 3138;
3139 -> 3131;
3140 -> 3135;
3140 -> 3133;
3140 -> 3131;
3141 -> 3134;
3141 -> 3131;
3142 -> 3131;
3143 -> 3131;
3144 -> 3139;
3144 -> 3143;
3145 -> 3140;
3145 -> 3143;
3146 -> 3140;
3146 -> 3143;
3147 -> 3141;
3147 -> 3143;
3148 -> 3142;
3148 -> 3143;
3149 -> 3143;
3150 -> 3148;
3150 -> 3149;
3151 -> 3149;
3152 -> 3151;
3152 -> 3144;
3152 -> 3146;
3152 -> 3147;
3152 -> 3145;
3152 -> 3140;
3152 -> 3149;
3153 -> 3151;
3153 -> 3149;
3154 -> 3148;
3154 -> 3143;
3155 -> 3144;
3155 -> 0;
3155 -> 3143;
3156 -> 3152;
3159 -> 3158;
3161 -> 3157;
3161 -> 3160;
3162 -> 3159;
3162 -> 3160;
3163 -> 3160;
3164 -> 3161;
3164 -> 3160;
3165 -> 3162;
3165 -> 3164;
3166 -> 0;
3166 -> 3165;
3167 -> 3160;
3168 -> 3166;
3168 -> 3167;
3168 -> 3160;
3169 -> 0;
3169 -> 3160;
3170 -> 3161;
3170 -> 3160;
3171 -> 3160;
3172 -> 3169;
3172 -> 3171;
3173 -> 3170;
3173 -> 3171;
3174 -> 3172;
3174 -> 3171;
3175 -> 3173;
3175 -> 3171;
3176 -> 3171;
3177 -> 3171;
3178 -> 3174;
3178 -> 3177;
3179 -> 3175;
3179 -> 3177;
3180 -> 3176;
3180 -> 3177;
3181 -> 3176;
3181 -> 3177;
3182 -> 3176;
3182 -> 3177;
3183 -> 3178;
3183 -> 3177;
3184 -> 3180;
3184 -> 3177;
3185 -> 3181;
3185 -> 3177;
3186 -> 3179;
3186 -> 3177;
3187 -> 3177;
3188 -> 3183;
3188 -> 3187;
3189 -> 3184;
3189 -> 3187;
3190 -> 3185;
3190 -> 3187;
3191 -> 3186;
3191 -> 3187;
3192 -> 3182;
3192 -> 3187;
3193 -> 3188;
3193 -> 3187;
3194 -> 3189;
3194 -> 3187;
3195 -> 3190;
3195 -> 3187;
3196 -> 3191;
3196 -> 3187;
3197 -> 3187;
3198 -> 3197;
3198 -> 3193;
3198 -> 3194;
3198 -> 3195;
3198 -> 3196;
3198 -> 3187;
3199 -> 3197;
3199 -> 3187;
3200 -> 3199;
3200 -> 3198;
3200 -> 3187;
3201 -> 3182;
3201 -> 3177;
3202 -> 3179;
3202 -> 3182;
3202 -> 3177;
3203 -> 3178;
3203 -> 0;
3203 -> 3177;
3204 -> 3176;
3204 -> 3160;
3205 -> 3162;
3205 -> 3160;
3206 -> 3204;
3206 -> 3160;
3207 -> 3160;
3208 -> 0;
3208 -> 3207;
3208 -> 3160;
3209 -> 3206;
3209 -> 3207;
3209 -> 3200;
3209 -> 3201;
3209 -> 3202;
3209 -> 3208;
3209 -> 3152;
3209 -> 3160;
3210 -> 3207;
3211 -> 3207;
3212 -> 3207;
3213 -> 3211;
3213 -> 3212;
3214 -> 3212;
3215 -> 3213;
3215 -> 3214;
3216 -> 3214;
3217 -> 3216;
3217 -> 3214;
3218 -> 3213;
3218 -> 3212;
3219 -> 3209;
3219 -> 0;
3219 -> 3212;
3220 -> 3209;
3223 -> 3222;
3225 -> 3221;
3225 -> 3224;
3226 -> 3223;
3226 -> 3224;
3227 -> 3224;
3228 -> 3225;
3228 -> 3224;
3229 -> 3226;
3229 -> 3228;
3230 -> 0;
3230 -> 3229;
3231 -> 3224;
3232 -> 3230;
3232 -> 3231;
3232 -> 3224;
3233 -> 0;
3233 -> 3224;
3234 -> 3225;
3234 -> 3224;
3235 -> 3224;
3236 -> 3233;
3236 -> 3235;
3237 -> 3234;
3237 -> 3235;
3238 -> 3236;
3238 -> 3235;
3239 -> 3237;
3239 -> 3235;
3240 -> 3235;
3241 -> 3235;
3242 -> 3238;
3242 -> 3241;
3243 -> 3239;
3243 -> 3241;
3244 -> 3240;
3244 -> 3241;
3245 -> 3240;
3245 -> 3241;
3246 -> 3240;
3246 -> 3241;
3247 -> 3242;
3247 -> 3241;
3248 -> 3244;
3248 -> 3241;
3249 -> 3245;
3249 -> 3241;
3250 -> 3243;
3250 -> 3241;
3251 -> 3241;
3252 -> 3247;
3252 -> 3251;
3253 -> 3248;
3253 -> 3251;
3254 -> 3249;
3254 -> 3251;
3255 -> 3250;
3255 -> 3251;
3256 -> 3246;
3256 -> 3251;
3257 -> 3252;
3257 -> 3251;
3258 -> 3253;
3258 -> 3251;
3259 -> 3254;
3259 -> 3251;
3260 -> 3255;
3260 -> 3251;
3261 -> 3251;
3262 -> 3261;
3262 -> 3257;
3262 -> 3258;
3262 -> 3259;
3262 -> 3260;
3262 -> 3251;
3263 -> 3261;
3263 -> 3251;
3264 -> 3263;
3264 -> 3262;
3264 -> 3251;
3265 -> 3246;
3265 -> 3241;
3266 -> 3243;
3266 -> 3246;
3266 -> 3241;
3267 -> 3242;
3267 -> 0;
3267 -> 3241;
3268 -> 3240;
3268 -> 3224;
3269 -> 3226;
3269 -> 3224;
3270 -> 3268;
3270 -> 3224;
3271 -> 3224;
3272 -> 0;
3272 -> 3271;
3272 -> 3224;
3273 -> 3270;
3273 -> 3271;
3273 -> 3264;
3273 -> 3265;
3273 -> 3266;
3273 -> 3272;
3273 -> 3209;
3273 -> 3224;
3274 -> 3271;
3275 -> 3271;
3276 -> 3271;
3277 -> 3275;
3277 -> 3276;
3278 -> 3276;
3279 -> 3277;
3279 -> 3278;
3280 -> 3278;
3281 -> 3280;
3281 -> 3278;
3282 -> 3277;
3282 -> 3276;
3283 -> 3273;
3283 -> 0;
3283 -> 3276;
3284 -> 3273;
3287 -> 3286;
3289 -> 3285;
3289 -> 3288;
3290 -> 3287;
3290 -> 3288;
3291 -> 0;
3291 -> 3288;
3292 -> 3289;
3292 -> 3288;
3293 -> 3288;
3294 -> 3291;
3294 -> 3293;
3295 -> 3292;
3295 -> 3293;
3296 -> 3294;
3296 -> 3293;
3297 -> 3295;
3297 -> 3293;
3298 -> 3293;
3299 -> 3293;
3300 -> 3296;
3300 -> 3299;
3301 -> 3297;
3301 -> 3299;
3302 -> 3298;
3302 -> 3299;
3303 -> 3298;
3303 -> 3299;
3304 -> 3298;
3304 -> 3299;
3305 -> 3300;
3305 -> 3299;
3306 -> 3302;
3306 -> 3299;
3307 -> 3303;
3307 -> 3299;
3308 -> 3301;
3308 -> 3299;
3309 -> 3299;
3310 -> 3305;
3310 -> 3309;
3311 -> 3306;
3311 -> 3309;
3312 -> 3307;
3312 -> 3309;
3313 -> 3308;
3313 -> 3309;
3314 -> 3304;
3314 -> 3309;
3315 -> 3310;
3315 -> 3309;
3316 -> 3311;
3316 -> 3309;
3317 -> 3312;
3317 -> 3309;
3318 -> 3313;
3318 -> 3309;
3319 -> 3309;
3320 -> 3319;
3320 -> 3315;
3320 -> 3316;
3320 -> 3317;
3320 -> 3318;
3320 -> 3309;
3321 -> 3319;
3321 -> 3309;
3322 -> 3321;
3322 -> 3320;
3322 -> 3309;
3323 -> 3304;
3323 -> 3299;
3324 -> 3301;
3324 -> 3304;
3324 -> 3299;
3325 -> 3300;
3325 -> 0;
3325 -> 3299;
3326 -> 3298;
3326 -> 3288;
3327 -> 3290;
3327 -> 3288;
3328 -> 3326;
3328 -> 3288;
3329 -> 3288;
3330 -> 0;
3330 -> 3329;
3330 -> 3288;
3331 -> 3328;
3331 -> 3329;
3331 -> 3322;
3331 -> 3323;
3331 -> 3324;
3331 -> 3330;
3331 -> 3273;
3331 -> 3288;
3332 -> 3329;
3333 -> 3329;
3334 -> 3329;
3335 -> 3333;
3335 -> 3334;
3336 -> 3334;
3337 -> 3335;
3337 -> 3336;
3338 -> 3336;
3339 -> 3338;
3339 -> 3336;
3340 -> 3335;
3340 -> 3334;
3341 -> 3331;
3341 -> 0;
3341 -> 3334;
3342 -> 3331;
3345 -> 3344;
3347 -> 3343;
3347 -> 3346;
3348 -> 3345;
3348 -> 3346;
3349 -> 0;
3349 -> 3346;
3350 -> 3347;
3350 -> 3346;
3351 -> 3346;
3352 -> 3349;
3352 -> 3351;
3353 -> 3350;
3353 -> 3351;
3354 -> 3352;
3354 -> 3351;
3355 -> 3353;
3355 -> 3351;
3356 -> 3351;
3357 -> 3351;
3358 -> 3354;
3358 -> 3357;
3359 -> 3355;
3359 -> 3357;
3360 -> 3356;
3360 -> 3357;
3361 -> 3356;
3361 -> 3357;
3362 -> 3356;
3362 -> 3357;
3363 -> 3358;
3363 -> 3357;
3364 -> 3360;
3364 -> 3357;
3365 -> 3361;
3365 -> 3357;
3366 -> 3359;
3366 -> 3357;
3367 -> 3357;
3368 -> 3363;
3368 -> 3367;
3369 -> 3364;
3369 -> 3367;
3370 -> 3365;
3370 -> 3367;
3371 -> 3366;
3371 -> 3367;
3372 -> 3362;
3372 -> 3367;
3373 -> 3368;
3373 -> 3367;
3374 -> 3369;
3374 -> 3367;
3375 -> 3370;
3375 -> 3367;
3376 -> 3371;
3376 -> 3367;
3377 -> 3367;
3378 -> 3377;
3378 -> 3373;
3378 -> 3374;
3378 -> 3375;
3378 -> 3376;
3378 -> 3367;
3379 -> 3377;
3379 -> 3367;
3380 -> 3379;
3380 -> 3378;
3380 -> 3367;
3381 -> 3362;
3381 -> 3357;
3382 -> 3359;
3382 -> 3362;
3382 -> 3357;
3383 -> 3358;
3383 -> 0;
3383 -> 3357;
3384 -> 3356;
3384 -> 3346;
3385 -> 3348;
3385 -> 3346;
3386 -> 3384;
3386 -> 3346;
3387 -> 3346;
3388 -> 0;
3388 -> 3387;
3388 -> 3346;
3389 -> 3386;
3389 -> 3387;
3389 -> 3380;
3389 -> 3381;
3389 -> 3382;
3389 -> 3388;
3389 -> 3331;
3389 -> 3346;
3390 -> 3387;
3391 -> 3387;
3392 -> 3387;
3393 -> 3391;
3393 -> 3392;
3394 -> 3392;
3395 -> 3393;
3395 -> 3394;
3396 -> 3394;
3397 -> 3396;
3397 -> 3394;
3398 -> 3393;
3398 -> 3392;
3399 -> 3389;
3399 -> 0;
3399 -> 3392;
3400 -> 3389;
3401 -> 0;
3403 -> 3402;
3405 -> 3401;
3405 -> 3404;
3406 -> 3403;
3406 -> 3404;
3407 -> 0;
3407 -> 3404;
3408 -> 3405;
3408 -> 3404;
3409 -> 3404;
3410 -> 3407;
3410 -> 3409;
3411 -> 3408;
3411 -> 3409;
3412 -> 3410;
3412 -> 3409;
3413 -> 3411;
3413 -> 3409;
3414 -> 3409;
3415 -> 3409;
3416 -> 3412;
3416 -> 3415;
3417 -> 3413;
3417 -> 3415;
3418 -> 3414;
3418 -> 3415;
3419 -> 3414;
3419 -> 3415;
3420 -> 3414;
3420 -> 3415;
3421 -> 3416;
3421 -> 3415;
3422 -> 3418;
3422 -> 3415;
3423 -> 3419;
3423 -> 3415;
3424 -> 3417;
3424 -> 3415;
3425 -> 3415;
3426 -> 3421;
3426 -> 3425;
3427 -> 3422;
3427 -> 3425;
3428 -> 3423;
3428 -> 3425;
3429 -> 3424;
3429 -> 3425;
3430 -> 3420;
3430 -> 3425;
3431 -> 3426;
3431 -> 3425;
3432 -> 3427;
3432 -> 3425;
3433 -> 3428;
3433 -> 3425;
3434 -> 3429;
3434 -> 3425;
3435 -> 3425;
3436 -> 3435;
3436 -> 3431;
3436 -> 3432;
3436 -> 3433;
3436 -> 3434;
3436 -> 3425;
3437 -> 3435;
3437 -> 3425;
3438 -> 3437;
3438 -> 3436;
3438 -> 3425;
3439 -> 3420;
3439 -> 3415;
3440 -> 3417;
3440 -> 3420;
3440 -> 3415;
3441 -> 3416;
3441 -> 0;
3441 -> 3415;
3442 -> 3414;
3442 -> 3404;
3443 -> 3406;
3443 -> 3404;
3444 -> 3442;
3444 -> 3404;
3445 -> 3404;
3446 -> 0;
3446 -> 3445;
3446 -> 3404;
3447 -> 3444;
3447 -> 3445;
3447 -> 3438;
3447 -> 3439;
3447 -> 3440;
3447 -> 3446;
3447 -> 3389;
3447 -> 3404;
3448 -> 3445;
3449 -> 3445;
3450 -> 3445;
3451 -> 3449;
3451 -> 3450;
3452 -> 3450;
3453 -> 3451;
3453 -> 3452;
3454 -> 3452;
3455 -> 3454;
3455 -> 3452;
3456 -> 3451;
3456 -> 3450;
3457 -> 3447;
3457 -> 0;
3457 -> 3450;
3458 -> 3447;
3461 -> 2896;
3461 -> 3460;
3462 -> 3460;
3463 -> 3461;
3463 -> 3460;
3464 -> 3462;
3464 -> 3463;
3464 -> 2889;
3464 -> 2890;
3464 -> 2891;
3464 -> 3460;
3466 -> 2945;
3466 -> 3465;
3467 -> 3465;
3468 -> 3466;
3468 -> 3465;
3469 -> 3467;
3469 -> 3468;
3469 -> 2938;
3469 -> 2939;
3469 -> 2940;
3469 -> 3465;
3471 -> 2994;
3471 -> 3470;
3472 -> 3470;
3473 -> 3471;
3473 -> 3470;
3474 -> 3472;
3474 -> 3473;
3474 -> 2987;
3474 -> 2988;
3474 -> 2989;
3474 -> 3470;
3476 -> 3037;
3476 -> 3475;
3477 -> 3475;
3478 -> 3476;
3478 -> 3475;
3479 -> 3477;
3479 -> 3478;
3479 -> 3030;
3479 -> 3031;
3479 -> 3032;
3479 -> 3475;
3481 -> 3080;
3481 -> 3480;
3482 -> 3480;
3483 -> 3481;
3483 -> 3480;
3484 -> 3482;
3484 -> 3483;
3484 -> 3073;
3484 -> 3074;
3484 -> 3075;
3484 -> 3480;
3486 -> 3156;
3486 -> 3485;
3487 -> 3485;
3488 -> 3486;
3488 -> 3485;
3489 -> 3487;
3489 -> 3488;
3489 -> 3447;
3489 -> 3485;
3491 -> 3220;
3491 -> 3490;
3492 -> 3490;
3493 -> 3491;
3493 -> 3490;
3494 -> 3492;
3494 -> 3493;
3494 -> 3489;
3494 -> 3490;
3496 -> 3284;
3496 -> 3495;
3497 -> 3495;
3498 -> 3496;
3498 -> 3495;
3499 -> 3497;
3499 -> 3498;
3499 -> 3494;
3499 -> 3495;
3501 -> 3342;
3501 -> 3500;
3502 -> 3500;
3503 -> 3501;
3503 -> 3500;
3504 -> 3502;
3504 -> 3503;
3504 -> 3499;
3504 -> 3500;
3506 -> 3400;
3506 -> 3505;
3507 -> 3505;
3508 -> 3506;
3508 -> 3505;
3509 -> 3507;
3509 -> 3508;
3509 -> 3504;
3509 -> 3505;
3511 -> 3458;
3511 -> 3510;
3512 -> 3510;
3513 -> 3511;
3513 -> 3510;
3514 -> 3512;
3514 -> 3513;
3514 -> 3509;
3514 -> 3510;
3515 -> 2842;
3515 -> 279;
3516 -> 2837;
3516 -> 279;
3517 -> 281;
3517 -> 279;
3518 -> 279;
3519 -> 279;
3520 -> 3515;
3520 -> 3519;
3521 -> 3516;
3521 -> 3519;
3522 -> 3517;
3522 -> 3519;
3523 -> 3518;
3523 -> 3519;
3525 -> 3524;
3526 -> 3525;
3527 -> 3526;
3527 -> 3525;
3528 -> 3526;
3528 -> 3525;
3529 -> 3526;
3529 -> 3525;
3530 -> 3526;
3530 -> 3525;
3531 -> 0;
3531 -> 3526;
3531 -> 3525;
3532 -> 3525;
3532 -> 3524;
3533 -> 0;
3533 -> 3524;
3534 -> 3524;
3535 -> 3524;
3536 -> 3533;
3536 -> 3535;
3537 -> 3534;
3537 -> 3535;
3538 -> 3534;
3538 -> 3535;
3539 -> 3536;
3539 -> 3535;
3540 -> 3537;
3540 -> 3535;
3541 -> 3538;
3541 -> 3535;
3542 -> 3535;
3543 -> 3539;
3543 -> 3542;
3544 -> 3540;
3544 -> 3542;
3545 -> 3541;
3545 -> 3542;
3546 -> 3543;
3546 -> 3542;
3547 -> 3544;
3547 -> 3542;
3548 -> 3542;
3549 -> 3546;
3549 -> 3548;
3550 -> 3547;
3550 -> 3548;
3551 -> 3549;
3551 -> 3548;
3552 -> 0;
3552 -> 3548;
3553 -> 3548;
3554 -> 3551;
3554 -> 3552;
3554 -> 3553;
3554 -> 2842;
3554 -> 3548;
3555 -> 3550;
3555 -> 3548;
3556 -> 3554;
3556 -> 3555;
3556 -> 3548;
3558 -> 3557;
3561 -> 3560;
3563 -> 3562;
3574 -> 3565;
3574 -> 3564;
3575 -> 3566;
3575 -> 3564;
3576 -> 3567;
3576 -> 3564;
3577 -> 3568;
3577 -> 3564;
3578 -> 3569;
3578 -> 3564;
3579 -> 3570;
3579 -> 3564;
3580 -> 3571;
3580 -> 3564;
3581 -> 3572;
3581 -> 3564;
3582 -> 3573;
3582 -> 3564;
3583 -> 3564;
3585 -> 3584;
3586 -> 322;
3586 -> 3542;
3587 -> 3586;
3587 -> 3545;
3587 -> 3542;
3588 -> 3542;
3589 -> 3542;
3590 -> 3556;
3590 -> 3589;
3591 -> 3587;
3591 -> 3589;
3592 -> 3588;
3592 -> 3589;
3593 -> 3588;
3593 -> 3589;
3594 -> 3588;
3594 -> 3589;
3595 -> 3590;
3595 -> 3589;
3596 -> 3589;
3597 -> 3595;
3597 -> 3596;
3598 -> 3594;
3598 -> 3596;
3599 -> 3598;
3599 -> 3596;
3600 -> 3598;
3600 -> 3596;
3601 -> 0;
3603 -> 3602;
3605 -> 3604;
3606 -> 3605;
3607 -> 3597;
3607 -> 3596;
3608 -> 3596;
3609 -> 3596;
3610 -> 3607;
3610 -> 3609;
3611 -> 3608;
3611 -> 3609;
3612 -> 3611;
3612 -> 3609;
3613 -> 3611;
3613 -> 3609;
3614 -> 3611;
3614 -> 3609;
3615 -> 3611;
3615 -> 3609;
3616 -> 3611;
3616 -> 3609;
3617 -> 3611;
3617 -> 3609;
3618 -> 3611;
3618 -> 3609;
3619 -> 3611;
3619 -> 3609;
3620 -> 3610;
3620 -> 3611;
3620 -> 3609;
3621 -> 3609;
3622 -> 3621;
3622 -> 3611;
3622 -> 3609;
3623 -> 3609;
3624 -> 3623;
3624 -> 3611;
3624 -> 3609;
3625 -> 3610;
3625 -> 3556;
3625 -> 3611;
3625 -> 3609;
3626 -> 3609;
3627 -> 3626;
3627 -> 3611;
3627 -> 3609;
3628 -> 3606;
3628 -> 3605;
3628 -> 3609;
3629 -> 3628;
3629 -> 3611;
3629 -> 3609;
3630 -> 3609;
3631 -> 3630;
3631 -> 3611;
3631 -> 3609;
3632 -> 3608;
3632 -> 3598;
3632 -> 3596;
3633 -> 3594;
3633 -> 3589;
3634 -> 3594;
3634 -> 3589;
3635 -> 3594;
3635 -> 3589;
3636 -> 3594;
3636 -> 3589;
3637 -> 3594;
3637 -> 3589;
3638 -> 3594;
3638 -> 3589;
3639 -> 3594;
3639 -> 3589;
3640 -> 3594;
3640 -> 3589;
3641 -> 3594;
3641 -> 3589;
3642 -> 3594;
3642 -> 3589;
3643 -> 3589;
3644 -> 3643;
3644 -> 3589;
3645 -> 3644;
3645 -> 3594;
3645 -> 3589;
3646 -> 3589;
3647 -> 3646;
3647 -> 3589;
3648 -> 3647;
3648 -> 3594;
3648 -> 3589;
3649 -> 3594;
3649 -> 3589;
3650 -> 3594;
3650 -> 3589;
3651 -> 3589;
3652 -> 3591;
3652 -> 3651;
3652 -> 3589;
3653 -> 3591;
3653 -> 3594;
3653 -> 3589;
3654 -> 3589;
3655 -> 3654;
3655 -> 3594;
3655 -> 3589;
3656 -> 3589;
3657 -> 3656;
3657 -> 3594;
3657 -> 3589;
3660 -> 3658;
3660 -> 3659;
3661 -> 3660;
3663 -> 3662;
3664 -> 3589;
3665 -> 3589;
3666 -> 3664;
3666 -> 3665;
3667 -> 3666;
3667 -> 3665;
3668 -> 3666;
3668 -> 3665;
3669 -> 3666;
3669 -> 3665;
3670 -> 3665;
3671 -> 3670;
3671 -> 3666;
3671 -> 3665;
3672 -> 3665;
3673 -> 3672;
3673 -> 3666;
3673 -> 3665;
3674 -> 3661;
3674 -> 3660;
3674 -> 3665;
3675 -> 3674;
3675 -> 3666;
3675 -> 3665;
3676 -> 3664;
3676 -> 3594;
3676 -> 3589;
3677 -> 3594;
3677 -> 3589;
3678 -> 3592;
3678 -> 3594;
3678 -> 3589;
3679 -> 3593;
3679 -> 3594;
3679 -> 3589;
3680 -> 3588;
3680 -> 3535;
3681 -> 3680;
3681 -> 3535;
3682 -> 3535;
3683 -> 3681;
3683 -> 3682;
3684 -> 0;
3685 -> 3683;
3685 -> 3682;
3686 -> 3682;
3687 -> 3682;
3688 -> 3685;
3688 -> 3687;
3689 -> 3686;
3689 -> 3687;
3690 -> 3686;
3690 -> 3687;
3691 -> 3686;
3691 -> 3687;
3692 -> 3686;
3692 -> 3687;
3693 -> 3686;
3693 -> 3687;
3696 -> 3694;
3696 -> 3695;
3697 -> 3696;
3698 -> 3688;
3698 -> 3687;
3699 -> 3691;
3699 -> 3687;
3700 -> 3689;
3700 -> 3687;
3701 -> 3690;
3701 -> 3687;
3702 -> 3687;
3703 -> 3687;
3704 -> 3692;
3704 -> 3687;
3705 -> 3687;
3706 -> 3698;
3706 -> 3705;
3707 -> 3699;
3707 -> 3705;
3708 -> 3700;
3708 -> 3705;
3709 -> 3701;
3709 -> 3705;
3710 -> 3702;
3710 -> 3705;
3711 -> 3703;
3711 -> 3705;
3712 -> 3704;
3712 -> 3705;
3713 -> 3693;
3713 -> 3705;
3714 -> 3713;
3714 -> 3705;
3715 -> 3713;
3715 -> 3705;
3716 -> 3713;
3716 -> 3705;
3717 -> 3713;
3717 -> 3705;
3718 -> 3713;
3718 -> 3705;
3719 -> 3713;
3719 -> 3705;
3720 -> 3713;
3720 -> 3705;
3721 -> 3713;
3721 -> 3705;
3722 -> 3713;
3722 -> 3705;
3723 -> 3713;
3723 -> 3705;
3724 -> 3713;
3724 -> 3705;
3725 -> 3713;
3725 -> 3705;
3726 -> 3713;
3726 -> 3705;
3727 -> 3706;
3727 -> 3713;
3727 -> 3705;
3728 -> 3707;
3728 -> 3713;
3728 -> 3705;
3729 -> 3710;
3729 -> 3713;
3729 -> 3705;
3730 -> 3712;
3730 -> 3713;
3730 -> 3705;
3731 -> 3705;
3732 -> 3731;
3732 -> 3713;
3732 -> 3705;
3733 -> 3705;
3734 -> 3708;
3734 -> 3733;
3734 -> 3705;
3735 -> 3734;
3735 -> 3713;
3735 -> 3705;
3736 -> 3705;
3737 -> 3713;
3737 -> 3736;
3738 -> 3737;
3738 -> 3735;
3738 -> 3736;
3739 -> 3738;
3739 -> 3705;
3740 -> 3739;
3740 -> 3710;
3740 -> 3705;
3741 -> 3740;
3742 -> 3741;
3742 -> 3713;
3742 -> 3740;
3743 -> 3740;
3744 -> 3743;
3744 -> 3713;
3744 -> 3740;
3745 -> 3705;
3746 -> 3713;
3746 -> 3745;
3747 -> 3746;
3747 -> 3735;
3747 -> 3745;
3748 -> 3747;
3748 -> 3705;
3749 -> 3711;
3749 -> 3748;
3749 -> 3705;
3750 -> 3749;
3750 -> 3712;
3750 -> 3686;
3750 -> 3705;
3751 -> 3750;
3752 -> 3713;
3752 -> 3751;
3753 -> 3751;
3754 -> 3751;
3755 -> 3752;
3755 -> 3727;
3755 -> 3632;
3755 -> 3754;
3756 -> 3755;
3756 -> 3620;
3756 -> 3754;
3757 -> 3756;
3757 -> 3751;
3758 -> 3757;
3758 -> 3751;
3759 -> 3758;
3759 -> 3752;
3759 -> 3751;
3760 -> 3752;
3760 -> 3727;
3760 -> 3751;
3761 -> 3752;
3761 -> 3728;
3761 -> 3751;
3762 -> 3751;
3763 -> 3762;
3763 -> 3757;
3763 -> 3751;
3764 -> 3761;
3764 -> 3763;
3765 -> 3763;
3766 -> 3764;
3766 -> 3765;
3767 -> 3760;
3767 -> 3765;
3768 -> 3559;
3768 -> 3765;
3769 -> 3766;
3769 -> 3767;
3769 -> 3765;
3770 -> 3767;
3770 -> 3769;
3770 -> 3765;
3771 -> 3767;
3771 -> 3632;
3771 -> 3600;
3771 -> 3653;
3771 -> 3769;
3771 -> 3655;
3771 -> 3657;
3771 -> 3637;
3771 -> 3676;
3771 -> 3678;
3771 -> 3679;
3771 -> 3641;
3771 -> 3642;
3771 -> 3645;
3771 -> 3648;
3771 -> 3649;
3771 -> 3677;
3771 -> 3620;
3771 -> 3622;
3771 -> 3624;
3771 -> 3625;
3771 -> 3629;
3771 -> 3617;
3771 -> 3631;
3771 -> 3627;
3771 -> 3556;
3771 -> 3644;
3771 -> 3647;
3771 -> 306;
3771 -> 307;
3771 -> 321;
3771 -> 308;
3771 -> 316;
3771 -> 309;
3771 -> 310;
3771 -> 318;
3771 -> 992;
3771 -> 317;
3771 -> 3654;
3771 -> 3656;
3771 -> 3671;
3771 -> 3673;
3771 -> 3675;
3771 -> 3674;
3771 -> 3672;
3771 -> 3670;
3771 -> 3626;
3771 -> 3628;
3771 -> 3770;
3772 -> 3770;
3773 -> 3771;
3773 -> 3772;
3774 -> 3772;
3775 -> 3773;
3775 -> 3771;
3775 -> 3774;
3776 -> 3775;
3776 -> 3771;
3776 -> 3774;
3777 -> 3772;
3778 -> 3772;
3779 -> 3778;
3779 -> 3773;
3779 -> 3772;
3780 -> 3771;
3780 -> 3772;
3781 -> 3780;
3781 -> 3771;
3781 -> 3772;
3782 -> 3771;
3782 -> 3781;
3782 -> 3776;
3782 -> 3779;
3782 -> 3770;
3783 -> 3771;
3783 -> 3772;
3784 -> 3783;
3784 -> 3782;
3784 -> 3772;
3785 -> 3771;
3785 -> 3772;
3786 -> 3785;
3786 -> 3784;
3786 -> 3772;
3787 -> 3771;
3787 -> 3772;
3788 -> 3771;
3788 -> 3772;
3789 -> 3788;
3789 -> 3786;
3789 -> 3787;
3789 -> 3772;
3790 -> 3789;
3790 -> 3788;
3790 -> 3772;
3791 -> 3771;
3791 -> 3772;
3792 -> 3791;
3792 -> 3786;
3792 -> 3772;
3793 -> 3771;
3793 -> 3792;
3793 -> 3786;
3793 -> 3790;
3793 -> 3770;
3794 -> 3771;
3794 -> 3772;
3795 -> 3771;
3795 -> 3772;
3796 -> 3794;
3796 -> 3795;
3796 -> 3793;
3796 -> 3772;
3797 -> 3772;
3798 -> 3796;
3798 -> 3797;
3798 -> 3772;
3799 -> 3796;
3799 -> 3795;
3799 -> 3793;
3799 -> 3772;
3800 -> 3796;
3800 -> 3795;
3800 -> 3798;
3801 -> 3770;
3802 -> 3767;
3802 -> 3801;
3803 -> 3802;
3803 -> 3800;
3803 -> 3801;
3804 -> 3801;
3805 -> 3802;
3805 -> 3803;
3805 -> 3804;
3806 -> 3805;
3806 -> 3803;
3806 -> 3804;
3807 -> 3806;
3807 -> 3801;
3808 -> 3801;
3809 -> 3802;
3809 -> 3803;
3809 -> 3801;
3810 -> 3801;
3811 -> 3807;
3811 -> 3810;
3812 -> 3808;
3812 -> 3810;
3813 -> 3809;
3813 -> 3810;
3814 -> 3802;
3814 -> 3810;
3815 -> 3812;
3815 -> 3810;
3816 -> 3810;
3817 -> 3816;
3818 -> 3814;
3818 -> 3817;
3819 -> 3817;
3820 -> 3818;
3820 -> 3803;
3820 -> 3819;
3821 -> 3817;
3822 -> 3817;
3823 -> 3822;
3823 -> 3818;
3823 -> 3817;
3824 -> 3816;
3825 -> 3816;
3826 -> 3814;
3826 -> 3803;
3826 -> 3825;
3827 -> 3826;
3827 -> 3803;
3827 -> 3825;
3828 -> 3825;
3829 -> 3826;
3829 -> 3828;
3830 -> 3829;
3830 -> 3803;
3830 -> 3828;
3831 -> 3830;
3832 -> 3829;
3832 -> 3831;
3833 -> 3832;
3833 -> 3803;
3833 -> 3831;
3834 -> 3833;
3834 -> 3830;
3835 -> 3834;
3836 -> 3835;
3836 -> 3825;
3837 -> 3601;
3837 -> 3836;
3838 -> 3837;
3838 -> 3816;
3839 -> 3816;
3840 -> 3838;
3840 -> 3839;
3840 -> 3816;
3841 -> 3840;
3843 -> 3842;
3844 -> 3842;
3845 -> 3838;
3845 -> 3841;
3846 -> 3841;
3847 -> 3845;
3847 -> 3846;
3848 -> 3846;
3849 -> 3847;
3849 -> 3848;
3849 -> 3846;
3850 -> 3847;
3850 -> 3846;
3851 -> 3838;
3851 -> 3849;
3852 -> 3849;
3853 -> 3851;
3853 -> 3852;
3854 -> 3852;
3855 -> 3853;
3855 -> 3854;
3855 -> 3852;
3856 -> 3838;
3856 -> 3816;
3857 -> 3856;
3858 -> 3802;
3858 -> 3803;
3858 -> 3813;
3858 -> 3801;
3859 -> 3801;
3860 -> 3801;
3861 -> 3802;
3861 -> 3860;
3862 -> 3860;
3863 -> 3861;
3863 -> 3803;
3863 -> 3862;
3864 -> 3860;
3865 -> 3860;
3866 -> 3865;
3866 -> 3861;
3866 -> 3860;
3867 -> 3801;
3868 -> 3859;
3868 -> 3801;
3869 -> 3868;
3869 -> 3802;
3869 -> 3803;
3869 -> 3820;
3869 -> 3863;
3869 -> 3823;
3869 -> 3866;
3869 -> 3813;
3869 -> 3859;
3869 -> 3801;
3870 -> 3801;
3871 -> 3869;
3871 -> 3870;
3872 -> 3871;
3872 -> 3869;
3872 -> 3870;
3873 -> 3869;
3873 -> 3870;
3874 -> 3873;
3874 -> 3872;
3874 -> 3870;
3875 -> 3870;
3876 -> 3873;
3876 -> 3875;
3877 -> 3876;
3877 -> 3872;
3877 -> 3875;
3878 -> 3877;
3879 -> 3878;
3879 -> 3877;
3880 -> 3879;
3881 -> 3880;
3881 -> 3870;
3882 -> 3601;
3882 -> 3881;
3883 -> 3869;
3883 -> 3870;
3884 -> 3883;
3884 -> 3882;
3884 -> 3870;
3885 -> 3870;
3886 -> 3883;
3886 -> 3885;
3887 -> 3886;
3887 -> 3882;
3887 -> 3885;
3888 -> 3887;
3888 -> 3870;
3889 -> 0;
3891 -> 3889;
3891 -> 3890;
3892 -> 3890;
3893 -> 3891;
3893 -> 3892;
3893 -> 3890;
3894 -> 3890;
3897 -> 3895;
3897 -> 3896;
3898 -> 3896;
3899 -> 3897;
3899 -> 3898;
3899 -> 3896;
3900 -> 3896;
3901 -> 3869;
3901 -> 3870;
3902 -> 3901;
3902 -> 3888;
3902 -> 3870;
3903 -> 3870;
3904 -> 3902;
3904 -> 3903;
3905 -> 3904;
3905 -> 3903;
3906 -> 3903;
3907 -> 3905;
3907 -> 3906;
3907 -> 3903;
3908 -> 3905;
3908 -> 3903;
3909 -> 3870;
3910 -> 3908;
3910 -> 3909;
3910 -> 3870;
3911 -> 3869;
3911 -> 3870;
3912 -> 3911;
3912 -> 3910;
3912 -> 3870;
3913 -> 3870;
3914 -> 3912;
3914 -> 3913;
3915 -> 3913;
3916 -> 3914;
3916 -> 3915;
3916 -> 3913;
3917 -> 3870;
3918 -> 3914;
3918 -> 3917;
3918 -> 3870;
3919 -> 3858;
3919 -> 3801;
3920 -> 3801;
3921 -> 3919;
3921 -> 3920;
3922 -> 3920;
3923 -> 3920;
3924 -> 3921;
3924 -> 3923;
3924 -> 3920;
3925 -> 3924;
3926 -> 3925;
3926 -> 3921;
3926 -> 3918;
3926 -> 3924;
3927 -> 3922;
3927 -> 3920;
3928 -> 3927;
3928 -> 3801;
3929 -> 3801;
3930 -> 3928;
3930 -> 3929;
3931 -> 3802;
3931 -> 3929;
3932 -> 3929;
3933 -> 3931;
3933 -> 3918;
3933 -> 3932;
3933 -> 3929;
3934 -> 3933;
3935 -> 3934;
3935 -> 3801;
3936 -> 3802;
3936 -> 3918;
3936 -> 3801;
3937 -> 3801;
3938 -> 3802;
3938 -> 3936;
3938 -> 3801;
3939 -> 3801;
3940 -> 3937;
3940 -> 3939;
3941 -> 3937;
3941 -> 3939;
3942 -> 3938;
3942 -> 3939;
3943 -> 3802;
3943 -> 3939;
3944 -> 3941;
3944 -> 3939;
3945 -> 3939;
3946 -> 3945;
3947 -> 3943;
3947 -> 3946;
3948 -> 3946;
3949 -> 3947;
3949 -> 3936;
3949 -> 3948;
3950 -> 3946;
3951 -> 3946;
3952 -> 3951;
3952 -> 3947;
3952 -> 3946;
3953 -> 3945;
3954 -> 3945;
3955 -> 3943;
3955 -> 3936;
3955 -> 3954;
3956 -> 3954;
3957 -> 3955;
3957 -> 3945;
3958 -> 3945;
3959 -> 3957;
3959 -> 3958;
3959 -> 3945;
3960 -> 3959;
3961 -> 3957;
3961 -> 3960;
3962 -> 3960;
3963 -> 3961;
3963 -> 3962;
3964 -> 3962;
3965 -> 3963;
3965 -> 3964;
3965 -> 3962;
3966 -> 3963;
3966 -> 3962;
3967 -> 3957;
3967 -> 3965;
3968 -> 3965;
3969 -> 3967;
3969 -> 3968;
3970 -> 3968;
3971 -> 3969;
3971 -> 3970;
3971 -> 3968;
3972 -> 3957;
3972 -> 3945;
3973 -> 3972;
3974 -> 3802;
3974 -> 3936;
3974 -> 3942;
3974 -> 3801;
3975 -> 3918;
3975 -> 3801;
3976 -> 3858;
3976 -> 3801;
3977 -> 3974;
3977 -> 3801;
3978 -> 3935;
3978 -> 3801;
3979 -> 3801;
3980 -> 3975;
3980 -> 3979;
3981 -> 3976;
3981 -> 3979;
3982 -> 3977;
3982 -> 3979;
3983 -> 3978;
3983 -> 3979;
3984 -> 3802;
3984 -> 3979;
3985 -> 3980;
3985 -> 3918;
3985 -> 0;
3985 -> 3979;
3986 -> 3981;
3986 -> 3936;
3986 -> 3949;
3986 -> 3952;
3986 -> 3942;
3986 -> 3979;
3987 -> 3982;
3987 -> 3986;
3987 -> 3979;
3988 -> 3979;
3989 -> 3980;
3989 -> 3918;
3989 -> 3979;
3990 -> 3980;
3990 -> 3918;
3990 -> 3989;
3991 -> 3986;
3991 -> 3990;
3992 -> 3980;
3992 -> 3918;
3992 -> 3990;
3993 -> 3987;
3993 -> 3990;
3994 -> 3990;
3995 -> 3991;
3995 -> 3994;
3996 -> 3992;
3996 -> 3994;
3997 -> 3993;
3997 -> 3994;
3998 -> 0;
3999 -> 0;
4001 -> 3999;
4001 -> 4000;
4002 -> 4001;
4003 -> 4002;
4005 -> 3999;
4005 -> 4004;
4006 -> 4005;
4007 -> 4006;
4009 -> 3999;
4009 -> 4008;
4010 -> 4009;
4011 -> 4010;
4013 -> 3999;
4013 -> 4012;
4014 -> 4013;
4015 -> 4014;
4017 -> 3998;
4018 -> 4017;
4018 -> 3999;
4019 -> 4003;
4019 -> 4002;
4019 -> 4017;
4019 -> 4018;
4020 -> 4017;
4020 -> 4018;
4021 -> 4018;
4022 -> 4018;
4023 -> 4020;
4023 -> 4022;
4024 -> 4021;
4024 -> 4022;
4025 -> 4023;
4025 -> 4022;
4026 -> 4022;
4027 -> 4025;
4027 -> 4026;
4028 -> 4024;
4028 -> 4026;
4029 -> 4027;
4029 -> 4026;
4030 -> 4026;
4031 -> 4030;
4031 -> 4029;
4031 -> 4026;
4032 -> 4030;
4032 -> 4026;
4033 -> 4032;
4033 -> 4031;
4033 -> 4026;
4034 -> 4022;
4035 -> 4024;
4035 -> 4034;
4036 -> 4034;
4037 -> 4035;
4037 -> 4036;
4038 -> 4037;
4038 -> 4033;
4038 -> 4036;
4039 -> 4038;
4039 -> 4034;
4040 -> 4034;
4041 -> 4039;
4041 -> 4040;
4042 -> 4041;
4042 -> 4040;
4043 -> 4042;
4044 -> 4043;
4044 -> 4022;
4045 -> 4044;
4045 -> 4024;
4045 -> 4022;
4046 -> 4024;
4046 -> 4033;
4046 -> 0;
4046 -> 4022;
4047 -> 4046;
4047 -> 4024;
4047 -> 4022;
4048 -> 4021;
4048 -> 4019;
4048 -> 4018;
4050 -> 4007;
4050 -> 4006;
4050 -> 4017;
4050 -> 4018;
4051 -> 4017;
4051 -> 4018;
4052 -> 3458;
4052 -> 4018;
4053 -> 4018;
4054 -> 4018;
4055 -> 4051;
4055 -> 4054;
4056 -> 4052;
4056 -> 4054;
4057 -> 4052;
4057 -> 4054;
4058 -> 4053;
4058 -> 4054;
4059 -> 4055;
4059 -> 4054;
4060 -> 4054;
4061 -> 4059;
4061 -> 4060;
4062 -> 4058;
4062 -> 4060;
4063 -> 4061;
4063 -> 4060;
4064 -> 4060;
4065 -> 4063;
4065 -> 4064;
4066 -> 4062;
4066 -> 4064;
4067 -> 4065;
4067 -> 4064;
4068 -> 4064;
4069 -> 4068;
4069 -> 4067;
4069 -> 4064;
4070 -> 4068;
4070 -> 4064;
4071 -> 4070;
4071 -> 4069;
4071 -> 4064;
4072 -> 4060;
4073 -> 4062;
4073 -> 4072;
4074 -> 4072;
4075 -> 4073;
4075 -> 4074;
4076 -> 4075;
4076 -> 4071;
4076 -> 4074;
4077 -> 4076;
4077 -> 4072;
4078 -> 4072;
4079 -> 4077;
4079 -> 4078;
4080 -> 4079;
4080 -> 4078;
4081 -> 4080;
4082 -> 4081;
4082 -> 4060;
4083 -> 4082;
4083 -> 4062;
4083 -> 4060;
4084 -> 4062;
4084 -> 4071;
4084 -> 0;
4084 -> 4060;
4085 -> 4084;
4085 -> 4062;
4085 -> 4060;
4086 -> 4058;
4086 -> 4054;
4087 -> 4058;
4087 -> 4054;
4088 -> 4054;
4089 -> 4056;
4089 -> 4088;
4089 -> 4054;
4090 -> 4056;
4090 -> 4089;
4091 -> 4058;
4091 -> 4090;
4091 -> 4071;
4091 -> 4083;
4091 -> 4085;
4091 -> 4086;
4091 -> 4087;
4091 -> 3514;
4091 -> 4089;
4092 -> 4056;
4092 -> 4058;
4092 -> 4089;
4093 -> 4054;
4094 -> 4057;
4094 -> 4093;
4094 -> 4054;
4095 -> 4057;
4095 -> 4094;
4096 -> 4058;
4096 -> 4095;
4096 -> 4091;
4096 -> 4092;
4096 -> 4094;
4097 -> 4057;
4097 -> 4058;
4097 -> 4094;
4098 -> 4053;
4098 -> 4050;
4098 -> 4018;
4099 -> 4011;
4099 -> 4010;
4099 -> 4017;
4099 -> 4018;
4100 -> 4017;
4100 -> 4018;
4101 -> 4018;
4102 -> 3037;
4102 -> 4018;
4103 -> 4018;
4104 -> 4100;
4104 -> 4103;
4105 -> 4101;
4105 -> 4103;
4106 -> 4102;
4106 -> 4103;
4107 -> 4101;
4107 -> 4103;
4108 -> 4104;
4108 -> 4103;
4109 -> 4103;
4110 -> 4108;
4110 -> 4109;
4111 -> 4107;
4111 -> 4109;
4112 -> 4110;
4112 -> 4109;
4113 -> 4109;
4114 -> 4112;
4114 -> 4113;
4115 -> 4111;
4115 -> 4113;
4116 -> 4114;
4116 -> 4113;
4117 -> 4113;
4118 -> 4117;
4118 -> 4116;
4118 -> 4113;
4119 -> 4117;
4119 -> 4113;
4120 -> 4119;
4120 -> 4118;
4120 -> 4113;
4121 -> 4109;
4122 -> 4111;
4122 -> 4121;
4123 -> 4121;
4124 -> 4122;
4124 -> 4123;
4125 -> 4124;
4125 -> 4120;
4125 -> 4123;
4126 -> 4125;
4126 -> 4121;
4127 -> 4121;
4128 -> 4126;
4128 -> 4127;
4129 -> 4128;
4129 -> 4127;
4130 -> 4129;
4131 -> 4130;
4131 -> 4109;
4132 -> 4131;
4132 -> 4111;
4132 -> 4109;
4133 -> 4111;
4133 -> 4120;
4133 -> 0;
4133 -> 4109;
4134 -> 4133;
4134 -> 4111;
4134 -> 4109;
4135 -> 4107;
4135 -> 4103;
4136 -> 4107;
4136 -> 4103;
4137 -> 4103;
4138 -> 4105;
4138 -> 4137;
4138 -> 4103;
4139 -> 4103;
4140 -> 4106;
4140 -> 4139;
4140 -> 4103;
4141 -> 4106;
4141 -> 4140;
4142 -> 4107;
4142 -> 4141;
4142 -> 4120;
4142 -> 4132;
4142 -> 4134;
4142 -> 4135;
4142 -> 4136;
4142 -> 3479;
4142 -> 4140;
4143 -> 4106;
4143 -> 4107;
4143 -> 4140;
4144 -> 4101;
4144 -> 4099;
4144 -> 4018;
4145 -> 4015;
4145 -> 4014;
4145 -> 4017;
4145 -> 4018;
4146 -> 4017;
4146 -> 4018;
4147 -> 4018;
4148 -> 2896;
4148 -> 4018;
4149 -> 4018;
4150 -> 4146;
4150 -> 4149;
4151 -> 4147;
4151 -> 4149;
4152 -> 4148;
4152 -> 4149;
4153 -> 4147;
4153 -> 4149;
4154 -> 4150;
4154 -> 4149;
4155 -> 4149;
4156 -> 4154;
4156 -> 4155;
4157 -> 4153;
4157 -> 4155;
4158 -> 4156;
4158 -> 4155;
4159 -> 4155;
4160 -> 4158;
4160 -> 4159;
4161 -> 4157;
4161 -> 4159;
4162 -> 4160;
4162 -> 4159;
4163 -> 4159;
4164 -> 4163;
4164 -> 4162;
4164 -> 4159;
4165 -> 4163;
4165 -> 4159;
4166 -> 4165;
4166 -> 4164;
4166 -> 4159;
4167 -> 4155;
4168 -> 4157;
4168 -> 4167;
4169 -> 4167;
4170 -> 4168;
4170 -> 4169;
4171 -> 4170;
4171 -> 4166;
4171 -> 4169;
4172 -> 4171;
4172 -> 4167;
4173 -> 4167;
4174 -> 4172;
4174 -> 4173;
4175 -> 4174;
4175 -> 4173;
4176 -> 4175;
4177 -> 4176;
4177 -> 4155;
4178 -> 4177;
4178 -> 4157;
4178 -> 4155;
4179 -> 4157;
4179 -> 4166;
4179 -> 0;
4179 -> 4155;
4180 -> 4179;
4180 -> 4157;
4180 -> 4155;
4181 -> 4153;
4181 -> 4149;
4182 -> 4153;
4182 -> 4149;
4183 -> 4149;
4184 -> 4151;
4184 -> 4183;
4184 -> 4149;
4185 -> 4149;
4186 -> 4152;
4186 -> 4185;
4186 -> 4149;
4187 -> 4152;
4187 -> 4186;
4188 -> 4153;
4188 -> 4187;
4188 -> 4166;
4188 -> 4178;
4188 -> 4180;
4188 -> 4181;
4188 -> 4182;
4188 -> 3464;
4188 -> 4186;
4189 -> 4152;
4189 -> 4153;
4189 -> 4186;
4190 -> 4147;
4190 -> 4145;
4190 -> 4018;
4191 -> 4003;
4191 -> 4002;
4191 -> 4018;
4192 -> 4021;
4192 -> 4022;
4193 -> 4192;
4193 -> 4022;
4194 -> 4193;
4194 -> 4026;
4195 -> 4194;
4195 -> 4026;
4196 -> 4030;
4196 -> 4195;
4196 -> 4026;
4197 -> 4032;
4197 -> 4196;
4197 -> 4026;
4198 -> 4037;
4198 -> 4197;
4198 -> 4036;
4199 -> 4198;
4199 -> 4034;
4200 -> 4199;
4200 -> 4040;
4201 -> 4200;
4201 -> 4040;
4202 -> 4201;
4203 -> 4202;
4203 -> 4022;
4204 -> 4203;
4204 -> 4024;
4204 -> 4022;
4205 -> 4024;
4205 -> 4197;
4205 -> 0;
4205 -> 4022;
4206 -> 4205;
4206 -> 4024;
4206 -> 4022;
4207 -> 4021;
4207 -> 4191;
4207 -> 4018;
4208 -> 4007;
4208 -> 4006;
4208 -> 4018;
4209 -> 4053;
4209 -> 4054;
4210 -> 4209;
4210 -> 4054;
4211 -> 4210;
4211 -> 4060;
4212 -> 4211;
4212 -> 4060;
4213 -> 4212;
4213 -> 4064;
4214 -> 4213;
4214 -> 4064;
4215 -> 4068;
4215 -> 4214;
4215 -> 4064;
4216 -> 4070;
4216 -> 4215;
4216 -> 4064;
4217 -> 4075;
4217 -> 4216;
4217 -> 4074;
4218 -> 4217;
4218 -> 4072;
4219 -> 4218;
4219 -> 4078;
4220 -> 4219;
4220 -> 4078;
4221 -> 4220;
4222 -> 4221;
4222 -> 4060;
4223 -> 4222;
4223 -> 4062;
4223 -> 4060;
4224 -> 4062;
4224 -> 4216;
4224 -> 0;
4224 -> 4060;
4225 -> 4224;
4225 -> 4062;
4225 -> 4060;
4226 -> 4058;
4226 -> 4090;
4226 -> 4216;
4226 -> 4223;
4226 -> 4225;
4226 -> 4086;
4226 -> 4087;
4226 -> 4096;
4226 -> 4097;
4226 -> 4089;
4227 -> 4053;
4227 -> 4208;
4227 -> 4018;
4228 -> 4011;
4228 -> 4010;
4228 -> 4018;
4229 -> 4101;
4229 -> 4103;
4230 -> 4229;
4230 -> 4103;
4231 -> 4230;
4231 -> 4109;
4232 -> 4231;
4232 -> 4109;
4233 -> 4232;
4233 -> 4113;
4234 -> 4233;
4234 -> 4113;
4235 -> 4117;
4235 -> 4234;
4235 -> 4113;
4236 -> 4119;
4236 -> 4235;
4236 -> 4113;
4237 -> 4124;
4237 -> 4236;
4237 -> 4123;
4238 -> 4237;
4238 -> 4121;
4239 -> 4238;
4239 -> 4127;
4240 -> 4239;
4240 -> 4127;
4241 -> 4240;
4242 -> 4241;
4242 -> 4109;
4243 -> 4242;
4243 -> 4111;
4243 -> 4109;
4244 -> 4111;
4244 -> 4236;
4244 -> 0;
4244 -> 4109;
4245 -> 4244;
4245 -> 4111;
4245 -> 4109;
4246 -> 4107;
4246 -> 4141;
4246 -> 4236;
4246 -> 4243;
4246 -> 4245;
4246 -> 4135;
4246 -> 4136;
4246 -> 4142;
4246 -> 4143;
4246 -> 4140;
4247 -> 4101;
4247 -> 4228;
4247 -> 4018;
4248 -> 4015;
4248 -> 4014;
4248 -> 4018;
4249 -> 4147;
4249 -> 4149;
4250 -> 4249;
4250 -> 4149;
4251 -> 4250;
4251 -> 4155;
4252 -> 4251;
4252 -> 4155;
4253 -> 4252;
4253 -> 4159;
4254 -> 4253;
4254 -> 4159;
4255 -> 4163;
4255 -> 4254;
4255 -> 4159;
4256 -> 4165;
4256 -> 4255;
4256 -> 4159;
4257 -> 4170;
4257 -> 4256;
4257 -> 4169;
4258 -> 4257;
4258 -> 4167;
4259 -> 4258;
4259 -> 4173;
4260 -> 4259;
4260 -> 4173;
4261 -> 4260;
4262 -> 4261;
4262 -> 4155;
4263 -> 4262;
4263 -> 4157;
4263 -> 4155;
4264 -> 4157;
4264 -> 4256;
4264 -> 0;
4264 -> 4155;
4265 -> 4264;
4265 -> 4157;
4265 -> 4155;
4266 -> 4153;
4266 -> 4187;
4266 -> 4256;
4266 -> 4263;
4266 -> 4265;
4266 -> 4181;
4266 -> 4182;
4266 -> 4188;
4266 -> 4189;
4266 -> 4186;
4267 -> 4147;
4267 -> 4248;
4267 -> 4018;
4268 -> 4201;
4269 -> 4268;
4269 -> 4022;
4270 -> 4269;
4270 -> 4024;
4270 -> 4022;
4271 -> 4220;
4272 -> 4271;
4272 -> 4060;
4273 -> 4272;
4273 -> 4062;
4273 -> 4060;
4274 -> 4058;
4274 -> 4090;
4274 -> 4216;
4274 -> 4273;
4274 -> 4225;
4274 -> 4086;
4274 -> 4087;
4274 -> 4226;
4274 -> 4097;
4274 -> 4089;
4275 -> 4240;
4276 -> 4275;
4276 -> 4109;
4277 -> 4276;
4277 -> 4111;
4277 -> 4109;
4278 -> 4107;
4278 -> 4141;
4278 -> 4236;
4278 -> 4277;
4278 -> 4245;
4278 -> 4135;
4278 -> 4136;
4278 -> 4246;
4278 -> 4143;
4278 -> 4140;
4279 -> 4260;
4280 -> 4279;
4280 -> 4155;
4281 -> 4280;
4281 -> 4157;
4281 -> 4155;
4282 -> 4153;
4282 -> 4187;
4282 -> 4256;
4282 -> 4281;
4282 -> 4265;
4282 -> 4181;
4282 -> 4182;
4282 -> 4266;
4282 -> 4189;
4282 -> 4186;
4283 -> 4201;
4284 -> 4283;
4284 -> 4022;
4285 -> 4284;
4285 -> 4024;
4285 -> 4022;
4286 -> 4220;
4287 -> 4286;
4287 -> 4060;
4288 -> 4287;
4288 -> 4062;
4288 -> 4060;
4289 -> 4058;
4289 -> 4090;
4289 -> 4216;
4289 -> 4288;
4289 -> 4225;
4289 -> 4086;
4289 -> 4087;
4289 -> 4274;
4289 -> 4097;
4289 -> 4089;
4290 -> 4240;
4291 -> 4290;
4291 -> 4109;
4292 -> 4291;
4292 -> 4111;
4292 -> 4109;
4293 -> 4107;
4293 -> 4141;
4293 -> 4236;
4293 -> 4292;
4293 -> 4245;
4293 -> 4135;
4293 -> 4136;
4293 -> 4278;
4293 -> 4143;
4293 -> 4140;
4294 -> 4260;
4295 -> 4294;
4295 -> 4155;
4296 -> 4295;
4296 -> 4157;
4296 -> 4155;
4297 -> 4153;
4297 -> 4187;
4297 -> 4256;
4297 -> 4296;
4297 -> 4265;
4297 -> 4181;
4297 -> 4182;
4297 -> 4282;
4297 -> 4189;
4297 -> 4186;
4298 -> 4201;
4299 -> 4298;
4299 -> 4022;
4300 -> 4299;
4300 -> 4024;
4300 -> 4022;
4301 -> 4220;
4302 -> 4301;
4302 -> 4060;
4303 -> 4302;
4303 -> 4062;
4303 -> 4060;
4304 -> 4058;
4304 -> 4090;
4304 -> 4216;
4304 -> 4303;
4304 -> 4225;
4304 -> 4086;
4304 -> 4087;
4304 -> 4289;
4304 -> 4097;
4304 -> 4089;
4305 -> 4240;
4306 -> 4305;
4306 -> 4109;
4307 -> 4306;
4307 -> 4111;
4307 -> 4109;
4308 -> 4107;
4308 -> 4141;
4308 -> 4236;
4308 -> 4307;
4308 -> 4245;
4308 -> 4135;
4308 -> 4136;
4308 -> 4293;
4308 -> 4143;
4308 -> 4140;
4309 -> 4260;
4310 -> 4309;
4310 -> 4155;
4311 -> 4310;
4311 -> 4157;
4311 -> 4155;
4312 -> 4153;
4312 -> 4187;
4312 -> 4256;
4312 -> 4311;
4312 -> 4265;
4312 -> 4181;
4312 -> 4182;
4312 -> 4297;
4312 -> 4189;
4312 -> 4186;
4313 -> 4201;
4314 -> 4313;
4314 -> 4022;
4315 -> 4314;
4315 -> 4024;
4315 -> 4022;
4316 -> 4220;
4317 -> 4316;
4317 -> 4060;
4318 -> 4317;
4318 -> 4062;
4318 -> 4060;
4319 -> 4058;
4319 -> 4090;
4319 -> 4216;
4319 -> 4318;
4319 -> 4225;
4319 -> 4086;
4319 -> 4087;
4319 -> 4304;
4319 -> 4097;
4319 -> 4089;
4320 -> 4240;
4321 -> 4320;
4321 -> 4109;
4322 -> 4321;
4322 -> 4111;
4322 -> 4109;
4323 -> 4107;
4323 -> 4141;
4323 -> 4236;
4323 -> 4322;
4323 -> 4245;
4323 -> 4135;
4323 -> 4136;
4323 -> 4308;
4323 -> 4143;
4323 -> 4140;
4324 -> 4260;
4325 -> 4324;
4325 -> 4155;
4326 -> 4325;
4326 -> 4157;
4326 -> 4155;
4327 -> 4153;
4327 -> 4187;
4327 -> 4256;
4327 -> 4326;
4327 -> 4265;
4327 -> 4181;
4327 -> 4182;
4327 -> 4312;
4327 -> 4189;
4327 -> 4186;
4328 -> 4201;
4329 -> 4328;
4329 -> 4022;
4330 -> 4329;
4330 -> 4024;
4330 -> 4022;
4331 -> 4220;
4332 -> 4331;
4332 -> 4060;
4333 -> 4332;
4333 -> 4062;
4333 -> 4060;
4334 -> 4058;
4334 -> 4090;
4334 -> 4216;
4334 -> 4333;
4334 -> 4225;
4334 -> 4086;
4334 -> 4087;
4334 -> 4319;
4334 -> 4097;
4334 -> 4089;
4335 -> 4240;
4336 -> 4335;
4336 -> 4109;
4337 -> 4336;
4337 -> 4111;
4337 -> 4109;
4338 -> 4107;
4338 -> 4141;
4338 -> 4236;
4338 -> 4337;
4338 -> 4245;
4338 -> 4135;
4338 -> 4136;
4338 -> 4323;
4338 -> 4143;
4338 -> 4140;
4339 -> 4260;
4340 -> 4339;
4340 -> 4155;
4341 -> 4340;
4341 -> 4157;
4341 -> 4155;
4342 -> 4153;
4342 -> 4187;
4342 -> 4256;
4342 -> 4341;
4342 -> 4265;
4342 -> 4181;
4342 -> 4182;
4342 -> 4327;
4342 -> 4189;
4342 -> 4186;
4343 -> 4201;
4344 -> 4343;
4344 -> 4022;
4345 -> 4344;
4345 -> 4024;
4345 -> 4022;
4346 -> 4220;
4347 -> 4346;
4347 -> 4060;
4348 -> 4347;
4348 -> 4062;
4348 -> 4060;
4349 -> 4058;
4349 -> 4090;
4349 -> 4216;
4349 -> 4348;
4349 -> 4225;
4349 -> 4086;
4349 -> 4087;
4349 -> 4334;
4349 -> 4097;
4349 -> 4089;
4350 -> 4240;
4351 -> 4350;
4351 -> 4109;
4352 -> 4351;
4352 -> 4111;
4352 -> 4109;
4353 -> 4107;
4353 -> 4141;
4353 -> 4236;
4353 -> 4352;
4353 -> 4245;
4353 -> 4135;
4353 -> 4136;
4353 -> 4338;
4353 -> 4143;
4353 -> 4140;
4354 -> 4260;
4355 -> 4354;
4355 -> 4155;
4356 -> 4355;
4356 -> 4157;
4356 -> 4155;
4357 -> 4153;
4357 -> 4187;
4357 -> 4256;
4357 -> 4356;
4357 -> 4265;
4357 -> 4181;
4357 -> 4182;
4357 -> 4342;
4357 -> 4189;
4357 -> 4186;
4358 -> 4201;
4359 -> 4358;
4359 -> 4022;
4360 -> 4359;
4360 -> 4024;
4360 -> 4022;
4361 -> 4220;
4362 -> 4361;
4362 -> 4060;
4363 -> 4362;
4363 -> 4062;
4363 -> 4060;
4364 -> 4058;
4364 -> 4090;
4364 -> 4216;
4364 -> 4363;
4364 -> 4225;
4364 -> 4086;
4364 -> 4087;
4364 -> 4349;
4364 -> 4097;
4364 -> 4089;
4365 -> 4240;
4366 -> 4365;
4366 -> 4109;
4367 -> 4366;
4367 -> 4111;
4367 -> 4109;
4368 -> 4107;
4368 -> 4141;
4368 -> 4236;
4368 -> 4367;
4368 -> 4245;
4368 -> 4135;
4368 -> 4136;
4368 -> 4353;
4368 -> 4143;
4368 -> 4140;
4369 -> 4260;
4370 -> 4369;
4370 -> 4155;
4371 -> 4370;
4371 -> 4157;
4371 -> 4155;
4372 -> 4153;
4372 -> 4187;
4372 -> 4256;
4372 -> 4371;
4372 -> 4265;
4372 -> 4181;
4372 -> 4182;
4372 -> 4357;
4372 -> 4189;
4372 -> 4186;
4373 -> 4201;
4374 -> 4373;
4374 -> 4022;
4375 -> 4374;
4375 -> 4024;
4375 -> 4022;
4376 -> 4220;
4377 -> 4376;
4377 -> 4060;
4378 -> 4377;
4378 -> 4062;
4378 -> 4060;
4379 -> 4058;
4379 -> 4090;
4379 -> 4216;
4379 -> 4378;
4379 -> 4225;
4379 -> 4086;
4379 -> 4087;
4379 -> 4364;
4379 -> 4097;
4379 -> 4089;
4380 -> 4240;
4381 -> 4380;
4381 -> 4109;
4382 -> 4381;
4382 -> 4111;
4382 -> 4109;
4383 -> 4107;
4383 -> 4141;
4383 -> 4236;
4383 -> 4382;
4383 -> 4245;
4383 -> 4135;
4383 -> 4136;
4383 -> 4368;
4383 -> 4143;
4383 -> 4140;
4384 -> 4260;
4385 -> 4384;
4385 -> 4155;
4386 -> 4385;
4386 -> 4157;
4386 -> 4155;
4387 -> 4153;
4387 -> 4187;
4387 -> 4256;
4387 -> 4386;
4387 -> 4265;
4387 -> 4181;
4387 -> 4182;
4387 -> 4372;
4387 -> 4189;
4387 -> 4186;
4388 -> 4201;
4389 -> 4388;
4389 -> 4022;
4390 -> 4389;
4390 -> 4024;
4390 -> 4022;
4391 -> 4220;
4392 -> 4391;
4392 -> 4060;
4393 -> 4392;
4393 -> 4062;
4393 -> 4060;
4394 -> 4058;
4394 -> 4090;
4394 -> 4216;
4394 -> 4393;
4394 -> 4225;
4394 -> 4086;
4394 -> 4087;
4394 -> 4379;
4394 -> 4097;
4394 -> 4089;
4395 -> 4240;
4396 -> 4395;
4396 -> 4109;
4397 -> 4396;
4397 -> 4111;
4397 -> 4109;
4398 -> 4107;
4398 -> 4141;
4398 -> 4236;
4398 -> 4397;
4398 -> 4245;
4398 -> 4135;
4398 -> 4136;
4398 -> 4383;
4398 -> 4143;
4398 -> 4140;
4399 -> 4260;
4400 -> 4399;
4400 -> 4155;
4401 -> 4400;
4401 -> 4157;
4401 -> 4155;
4402 -> 4153;
4402 -> 4187;
4402 -> 4256;
4402 -> 4401;
4402 -> 4265;
4402 -> 4181;
4402 -> 4182;
4402 -> 4387;
4402 -> 4189;
4402 -> 4186;
4403 -> 4201;
4404 -> 4403;
4404 -> 4022;
4405 -> 4404;
4405 -> 4024;
4405 -> 4022;
4406 -> 4220;
4407 -> 4406;
4407 -> 4060;
4408 -> 4407;
4408 -> 4062;
4408 -> 4060;
4409 -> 4058;
4409 -> 4090;
4409 -> 4216;
4409 -> 4408;
4409 -> 4225;
4409 -> 4086;
4409 -> 4087;
4409 -> 4394;
4409 -> 4097;
4409 -> 4089;
4410 -> 4240;
4411 -> 4410;
4411 -> 4109;
4412 -> 4411;
4412 -> 4111;
4412 -> 4109;
4413 -> 4107;
4413 -> 4141;
4413 -> 4236;
4413 -> 4412;
4413 -> 4245;
4413 -> 4135;
4413 -> 4136;
4413 -> 4398;
4413 -> 4143;
4413 -> 4140;
4414 -> 4260;
4415 -> 4414;
4415 -> 4155;
4416 -> 4415;
4416 -> 4157;
4416 -> 4155;
4417 -> 4153;
4417 -> 4187;
4417 -> 4256;
4417 -> 4416;
4417 -> 4265;
4417 -> 4181;
4417 -> 4182;
4417 -> 4402;
4417 -> 4189;
4417 -> 4186;
4418 -> 4201;
4419 -> 4418;
4419 -> 4022;
4420 -> 4419;
4420 -> 4024;
4420 -> 4022;
4421 -> 4220;
4422 -> 4421;
4422 -> 4060;
4423 -> 4422;
4423 -> 4062;
4423 -> 4060;
4424 -> 4058;
4424 -> 4090;
4424 -> 4216;
4424 -> 4423;
4424 -> 4225;
4424 -> 4086;
4424 -> 4087;
4424 -> 4409;
4424 -> 4097;
4424 -> 4089;
4425 -> 4240;
4426 -> 4425;
4426 -> 4109;
4427 -> 4426;
4427 -> 4111;
4427 -> 4109;
4428 -> 4107;
4428 -> 4141;
4428 -> 4236;
4428 -> 4427;
4428 -> 4245;
4428 -> 4135;
4428 -> 4136;
4428 -> 4413;
4428 -> 4143;
4428 -> 4140;
4429 -> 4260;
4430 -> 4429;
4430 -> 4155;
4431 -> 4430;
4431 -> 4157;
4431 -> 4155;
4432 -> 4153;
4432 -> 4187;
4432 -> 4256;
4432 -> 4431;
4432 -> 4265;
4432 -> 4181;
4432 -> 4182;
4432 -> 4417;
4432 -> 4189;
4432 -> 4186;
4433 -> 4201;
4434 -> 4433;
4434 -> 4022;
4435 -> 4434;
4435 -> 4024;
4435 -> 4022;
4436 -> 4220;
4437 -> 4436;
4437 -> 4060;
4438 -> 4437;
4438 -> 4062;
4438 -> 4060;
4439 -> 4058;
4439 -> 4090;
4439 -> 4216;
4439 -> 4438;
4439 -> 4225;
4439 -> 4086;
4439 -> 4087;
4439 -> 4424;
4439 -> 4097;
4439 -> 4089;
4440 -> 4240;
4441 -> 4440;
4441 -> 4109;
4442 -> 4441;
4442 -> 4111;
4442 -> 4109;
4443 -> 4107;
4443 -> 4141;
4443 -> 4236;
4443 -> 4442;
4443 -> 4245;
4443 -> 4135;
4443 -> 4136;
4443 -> 4428;
4443 -> 4143;
4443 -> 4140;
4444 -> 4260;
4445 -> 4444;
4445 -> 4155;
4446 -> 4445;
4446 -> 4157;
4446 -> 4155;
4447 -> 4153;
4447 -> 4187;
4447 -> 4256;
4447 -> 4446;
4447 -> 4265;
4447 -> 4181;
4447 -> 4182;
4447 -> 4432;
4447 -> 4189;
4447 -> 4186;
4448 -> 4201;
4449 -> 4448;
4449 -> 4022;
4450 -> 4449;
4450 -> 4024;
4450 -> 4022;
4451 -> 4220;
4452 -> 4451;
4452 -> 4060;
4453 -> 4452;
4453 -> 4062;
4453 -> 4060;
4454 -> 4058;
4454 -> 4090;
4454 -> 4216;
4454 -> 4453;
4454 -> 4225;
4454 -> 4086;
4454 -> 4087;
4454 -> 4439;
4454 -> 4097;
4454 -> 4089;
4455 -> 4240;
4456 -> 4455;
4456 -> 4109;
4457 -> 4456;
4457 -> 4111;
4457 -> 4109;
4458 -> 4107;
4458 -> 4141;
4458 -> 4236;
4458 -> 4457;
4458 -> 4245;
4458 -> 4135;
4458 -> 4136;
4458 -> 4443;
4458 -> 4143;
4458 -> 4140;
4459 -> 4260;
4460 -> 4459;
4460 -> 4155;
4461 -> 4460;
4461 -> 4157;
4461 -> 4155;
4462 -> 4153;
4462 -> 4187;
4462 -> 4256;
4462 -> 4461;
4462 -> 4265;
4462 -> 4181;
4462 -> 4182;
4462 -> 4447;
4462 -> 4189;
4462 -> 4186;
4463 -> 4201;
4464 -> 4463;
4464 -> 4022;
4465 -> 4464;
4465 -> 4024;
4465 -> 4022;
4466 -> 4220;
4467 -> 4466;
4467 -> 4060;
4468 -> 4467;
4468 -> 4062;
4468 -> 4060;
4469 -> 4058;
4469 -> 4090;
4469 -> 4216;
4469 -> 4468;
4469 -> 4225;
4469 -> 4086;
4469 -> 4087;
4469 -> 4454;
4469 -> 4097;
4469 -> 4089;
4470 -> 4240;
4471 -> 4470;
4471 -> 4109;
4472 -> 4471;
4472 -> 4111;
4472 -> 4109;
4473 -> 4107;
4473 -> 4141;
4473 -> 4236;
4473 -> 4472;
4473 -> 4245;
4473 -> 4135;
4473 -> 4136;
4473 -> 4458;
4473 -> 4143;
4473 -> 4140;
4474 -> 4260;
4475 -> 4474;
4475 -> 4155;
4476 -> 4475;
4476 -> 4157;
4476 -> 4155;
4477 -> 4153;
4477 -> 4187;
4477 -> 4256;
4477 -> 4476;
4477 -> 4265;
4477 -> 4181;
4477 -> 4182;
4477 -> 4462;
4477 -> 4189;
4477 -> 4186;
4478 -> 4201;
4479 -> 4478;
4479 -> 4022;
4480 -> 4479;
4480 -> 4024;
4480 -> 4022;
4481 -> 4220;
4482 -> 4481;
4482 -> 4060;
4483 -> 4482;
4483 -> 4062;
4483 -> 4060;
4484 -> 4058;
4484 -> 4090;
4484 -> 4216;
4484 -> 4483;
4484 -> 4225;
4484 -> 4086;
4484 -> 4087;
4484 -> 4469;
4484 -> 4097;
4484 -> 4089;
4485 -> 4240;
4486 -> 4485;
4486 -> 4109;
4487 -> 4486;
4487 -> 4111;
4487 -> 4109;
4488 -> 4107;
4488 -> 4141;
4488 -> 4236;
4488 -> 4487;
4488 -> 4245;
4488 -> 4135;
4488 -> 4136;
4488 -> 4473;
4488 -> 4143;
4488 -> 4140;
4489 -> 4260;
4490 -> 4489;
4490 -> 4155;
4491 -> 4490;
4491 -> 4157;
4491 -> 4155;
4492 -> 4153;
4492 -> 4187;
4492 -> 4256;
4492 -> 4491;
4492 -> 4265;
4492 -> 4181;
4492 -> 4182;
4492 -> 4477;
4492 -> 4189;
4492 -> 4186;
4493 -> 4201;
4494 -> 4493;
4494 -> 4022;
4495 -> 4494;
4495 -> 4024;
4495 -> 4022;
4496 -> 4220;
4497 -> 4496;
4497 -> 4060;
4498 -> 4497;
4498 -> 4062;
4498 -> 4060;
4499 -> 4058;
4499 -> 4090;
4499 -> 4216;
4499 -> 4498;
4499 -> 4225;
4499 -> 4086;
4499 -> 4087;
4499 -> 4484;
4499 -> 4097;
4499 -> 4089;
4500 -> 4240;
4501 -> 4500;
4501 -> 4109;
4502 -> 4501;
4502 -> 4111;
4502 -> 4109;
4503 -> 4107;
4503 -> 4141;
4503 -> 4236;
4503 -> 4502;
4503 -> 4245;
4503 -> 4135;
4503 -> 4136;
4503 -> 4488;
4503 -> 4143;
4503 -> 4140;
4504 -> 4260;
4505 -> 4504;
4505 -> 4155;
4506 -> 4505;
4506 -> 4157;
4506 -> 4155;
4507 -> 4153;
4507 -> 4187;
4507 -> 4256;
4507 -> 4506;
4507 -> 4265;
4507 -> 4181;
4507 -> 4182;
4507 -> 4492;
4507 -> 4189;
4507 -> 4186;
4508 -> 4201;
4509 -> 4508;
4509 -> 4022;
4510 -> 4509;
4510 -> 4024;
4510 -> 4022;
4511 -> 4220;
4512 -> 4511;
4512 -> 4060;
4513 -> 4512;
4513 -> 4062;
4513 -> 4060;
4514 -> 4058;
4514 -> 4090;
4514 -> 4216;
4514 -> 4513;
4514 -> 4225;
4514 -> 4086;
4514 -> 4087;
4514 -> 4499;
4514 -> 4097;
4514 -> 4089;
4515 -> 4240;
4516 -> 4515;
4516 -> 4109;
4517 -> 4516;
4517 -> 4111;
4517 -> 4109;
4518 -> 4107;
4518 -> 4141;
4518 -> 4236;
4518 -> 4517;
4518 -> 4245;
4518 -> 4135;
4518 -> 4136;
4518 -> 4503;
4518 -> 4143;
4518 -> 4140;
4519 -> 4260;
4520 -> 4519;
4520 -> 4155;
4521 -> 4520;
4521 -> 4157;
4521 -> 4155;
4522 -> 4153;
4522 -> 4187;
4522 -> 4256;
4522 -> 4521;
4522 -> 4265;
4522 -> 4181;
4522 -> 4182;
4522 -> 4507;
4522 -> 4189;
4522 -> 4186;
4523 -> 4201;
4524 -> 4523;
4524 -> 4022;
4525 -> 4524;
4525 -> 4024;
4525 -> 4022;
4526 -> 4220;
4527 -> 4526;
4527 -> 4060;
4528 -> 4527;
4528 -> 4062;
4528 -> 4060;
4529 -> 4058;
4529 -> 4090;
4529 -> 4216;
4529 -> 4528;
4529 -> 4225;
4529 -> 4086;
4529 -> 4087;
4529 -> 4514;
4529 -> 4097;
4529 -> 4089;
4530 -> 4240;
4531 -> 4530;
4531 -> 4109;
4532 -> 4531;
4532 -> 4111;
4532 -> 4109;
4533 -> 4107;
4533 -> 4141;
4533 -> 4236;
4533 -> 4532;
4533 -> 4245;
4533 -> 4135;
4533 -> 4136;
4533 -> 4518;
4533 -> 4143;
4533 -> 4140;
4534 -> 4260;
4535 -> 4534;
4535 -> 4155;
4536 -> 4535;
4536 -> 4157;
4536 -> 4155;
4537 -> 4153;
4537 -> 4187;
4537 -> 4256;
4537 -> 4536;
4537 -> 4265;
4537 -> 4181;
4537 -> 4182;
4537 -> 4522;
4537 -> 4189;
4537 -> 4186;
4538 -> 4201;
4539 -> 4538;
4539 -> 4022;
4540 -> 4539;
4540 -> 4024;
4540 -> 4022;
4541 -> 4220;
4542 -> 4541;
4542 -> 4060;
4543 -> 4542;
4543 -> 4062;
4543 -> 4060;
4544 -> 4058;
4544 -> 4090;
4544 -> 4216;
4544 -> 4543;
4544 -> 4225;
4544 -> 4086;
4544 -> 4087;
4544 -> 4529;
4544 -> 4097;
4544 -> 4089;
4545 -> 4240;
4546 -> 4545;
4546 -> 4109;
4547 -> 4546;
4547 -> 4111;
4547 -> 4109;
4548 -> 4107;
4548 -> 4141;
4548 -> 4236;
4548 -> 4547;
4548 -> 4245;
4548 -> 4135;
4548 -> 4136;
4548 -> 4533;
4548 -> 4143;
4548 -> 4140;
4549 -> 4260;
4550 -> 4549;
4550 -> 4155;
4551 -> 4550;
4551 -> 4157;
4551 -> 4155;
4552 -> 4153;
4552 -> 4187;
4552 -> 4256;
4552 -> 4551;
4552 -> 4265;
4552 -> 4181;
4552 -> 4182;
4552 -> 4537;
4552 -> 4189;
4552 -> 4186;
4553 -> 4201;
4554 -> 4553;
4554 -> 4022;
4555 -> 4554;
4555 -> 4024;
4555 -> 4022;
4556 -> 4220;
4557 -> 4556;
4557 -> 4060;
4558 -> 4557;
4558 -> 4062;
4558 -> 4060;
4559 -> 4058;
4559 -> 4090;
4559 -> 4216;
4559 -> 4558;
4559 -> 4225;
4559 -> 4086;
4559 -> 4087;
4559 -> 4544;
4559 -> 4097;
4559 -> 4089;
4560 -> 4240;
4561 -> 4560;
4561 -> 4109;
4562 -> 4561;
4562 -> 4111;
4562 -> 4109;
4563 -> 4107;
4563 -> 4141;
4563 -> 4236;
4563 -> 4562;
4563 -> 4245;
4563 -> 4135;
4563 -> 4136;
4563 -> 4548;
4563 -> 4143;
4563 -> 4140;
4564 -> 4260;
4565 -> 4564;
4565 -> 4155;
4566 -> 4565;
4566 -> 4157;
4566 -> 4155;
4567 -> 4153;
4567 -> 4187;
4567 -> 4256;
4567 -> 4566;
4567 -> 4265;
4567 -> 4181;
4567 -> 4182;
4567 -> 4552;
4567 -> 4189;
4567 -> 4186;
4568 -> 4201;
4569 -> 4568;
4569 -> 4022;
4570 -> 4569;
4570 -> 4024;
4570 -> 4022;
4571 -> 4220;
4572 -> 4571;
4572 -> 4060;
4573 -> 4572;
4573 -> 4062;
4573 -> 4060;
4574 -> 4058;
4574 -> 4090;
4574 -> 4216;
4574 -> 4573;
4574 -> 4225;
4574 -> 4086;
4574 -> 4087;
4574 -> 4559;
4574 -> 4097;
4574 -> 4089;
4575 -> 4240;
4576 -> 4575;
4576 -> 4109;
4577 -> 4576;
4577 -> 4111;
4577 -> 4109;
4578 -> 4107;
4578 -> 4141;
4578 -> 4236;
4578 -> 4577;
4578 -> 4245;
4578 -> 4135;
4578 -> 4136;
4578 -> 4563;
4578 -> 4143;
4578 -> 4140;
4579 -> 4260;
4580 -> 4579;
4580 -> 4155;
4581 -> 4580;
4581 -> 4157;
4581 -> 4155;
4582 -> 4153;
4582 -> 4187;
4582 -> 4256;
4582 -> 4581;
4582 -> 4265;
4582 -> 4181;
4582 -> 4182;
4582 -> 4567;
4582 -> 4189;
4582 -> 4186;
4583 -> 4201;
4584 -> 4583;
4584 -> 4022;
4585 -> 4584;
4585 -> 4024;
4585 -> 4022;
4586 -> 4220;
4587 -> 4586;
4587 -> 4060;
4588 -> 4587;
4588 -> 4062;
4588 -> 4060;
4589 -> 4058;
4589 -> 4090;
4589 -> 4216;
4589 -> 4588;
4589 -> 4225;
4589 -> 4086;
4589 -> 4087;
4589 -> 4574;
4589 -> 4097;
4589 -> 4089;
4590 -> 4240;
4591 -> 4590;
4591 -> 4109;
4592 -> 4591;
4592 -> 4111;
4592 -> 4109;
4593 -> 4107;
4593 -> 4141;
4593 -> 4236;
4593 -> 4592;
4593 -> 4245;
4593 -> 4135;
4593 -> 4136;
4593 -> 4578;
4593 -> 4143;
4593 -> 4140;
4594 -> 4260;
4595 -> 4594;
4595 -> 4155;
4596 -> 4595;
4596 -> 4157;
4596 -> 4155;
4597 -> 4153;
4597 -> 4187;
4597 -> 4256;
4597 -> 4596;
4597 -> 4265;
4597 -> 4181;
4597 -> 4182;
4597 -> 4582;
4597 -> 4189;
4597 -> 4186;
4598 -> 4201;
4599 -> 4598;
4599 -> 4022;
4600 -> 4599;
4600 -> 4024;
4600 -> 4022;
4601 -> 4220;
4602 -> 4601;
4602 -> 4060;
4603 -> 4602;
4603 -> 4062;
4603 -> 4060;
4604 -> 4058;
4604 -> 4090;
4604 -> 4216;
4604 -> 4603;
4604 -> 4225;
4604 -> 4086;
4604 -> 4087;
4604 -> 4589;
4604 -> 4097;
4604 -> 4089;
4605 -> 4240;
4606 -> 4605;
4606 -> 4109;
4607 -> 4606;
4607 -> 4111;
4607 -> 4109;
4608 -> 4107;
4608 -> 4141;
4608 -> 4236;
4608 -> 4607;
4608 -> 4245;
4608 -> 4135;
4608 -> 4136;
4608 -> 4593;
4608 -> 4143;
4608 -> 4140;
4609 -> 4260;
4610 -> 4609;
4610 -> 4155;
4611 -> 4610;
4611 -> 4157;
4611 -> 4155;
4612 -> 4153;
4612 -> 4187;
4612 -> 4256;
4612 -> 4611;
4612 -> 4265;
4612 -> 4181;
4612 -> 4182;
4612 -> 4597;
4612 -> 4189;
4612 -> 4186;
4613 -> 4201;
4614 -> 4613;
4614 -> 4022;
4615 -> 4614;
4615 -> 4024;
4615 -> 4022;
4616 -> 4220;
4617 -> 4616;
4617 -> 4060;
4618 -> 4617;
4618 -> 4062;
4618 -> 4060;
4619 -> 4058;
4619 -> 4090;
4619 -> 4216;
4619 -> 4618;
4619 -> 4225;
4619 -> 4086;
4619 -> 4087;
4619 -> 4604;
4619 -> 4097;
4619 -> 4089;
4620 -> 4240;
4621 -> 4620;
4621 -> 4109;
4622 -> 4621;
4622 -> 4111;
4622 -> 4109;
4623 -> 4107;
4623 -> 4141;
4623 -> 4236;
4623 -> 4622;
4623 -> 4245;
4623 -> 4135;
4623 -> 4136;
4623 -> 4608;
4623 -> 4143;
4623 -> 4140;
4624 -> 4260;
4625 -> 4624;
4625 -> 4155;
4626 -> 4625;
4626 -> 4157;
4626 -> 4155;
4627 -> 4153;
4627 -> 4187;
4627 -> 4256;
4627 -> 4626;
4627 -> 4265;
4627 -> 4181;
4627 -> 4182;
4627 -> 4612;
4627 -> 4189;
4627 -> 4186;
4628 -> 4201;
4629 -> 4628;
4629 -> 4022;
4630 -> 4629;
4630 -> 4024;
4630 -> 4022;
4631 -> 4220;
4632 -> 4631;
4632 -> 4060;
4633 -> 4632;
4633 -> 4062;
4633 -> 4060;
4634 -> 4058;
4634 -> 4090;
4634 -> 4216;
4634 -> 4633;
4634 -> 4225;
4634 -> 4086;
4634 -> 4087;
4634 -> 4619;
4634 -> 4097;
4634 -> 4089;
4635 -> 4240;
4636 -> 4635;
4636 -> 4109;
4637 -> 4636;
4637 -> 4111;
4637 -> 4109;
4638 -> 4107;
4638 -> 4141;
4638 -> 4236;
4638 -> 4637;
4638 -> 4245;
4638 -> 4135;
4638 -> 4136;
4638 -> 4623;
4638 -> 4143;
4638 -> 4140;
4639 -> 4260;
4640 -> 4639;
4640 -> 4155;
4641 -> 4640;
4641 -> 4157;
4641 -> 4155;
4642 -> 4153;
4642 -> 4187;
4642 -> 4256;
4642 -> 4641;
4642 -> 4265;
4642 -> 4181;
4642 -> 4182;
4642 -> 4627;
4642 -> 4189;
4642 -> 4186;
4643 -> 4201;
4644 -> 4643;
4644 -> 4022;
4645 -> 4644;
4645 -> 4024;
4645 -> 4022;
4646 -> 4220;
4647 -> 4646;
4647 -> 4060;
4648 -> 4647;
4648 -> 4062;
4648 -> 4060;
4649 -> 4058;
4649 -> 4090;
4649 -> 4216;
4649 -> 4648;
4649 -> 4225;
4649 -> 4086;
4649 -> 4087;
4649 -> 4634;
4649 -> 4097;
4649 -> 4089;
4650 -> 4240;
4651 -> 4650;
4651 -> 4109;
4652 -> 4651;
4652 -> 4111;
4652 -> 4109;
4653 -> 4107;
4653 -> 4141;
4653 -> 4236;
4653 -> 4652;
4653 -> 4245;
4653 -> 4135;
4653 -> 4136;
4653 -> 4638;
4653 -> 4143;
4653 -> 4140;
4654 -> 4260;
4655 -> 4654;
4655 -> 4155;
4656 -> 4655;
4656 -> 4157;
4656 -> 4155;
4657 -> 4153;
4657 -> 4187;
4657 -> 4256;
4657 -> 4656;
4657 -> 4265;
4657 -> 4181;
4657 -> 4182;
4657 -> 4642;
4657 -> 4189;
4657 -> 4186;
4658 -> 4201;
4659 -> 4658;
4659 -> 4022;
4660 -> 4659;
4660 -> 4024;
4660 -> 4022;
4661 -> 4220;
4662 -> 4661;
4662 -> 4060;
4663 -> 4662;
4663 -> 4062;
4663 -> 4060;
4664 -> 4058;
4664 -> 4090;
4664 -> 4216;
4664 -> 4663;
4664 -> 4225;
4664 -> 4086;
4664 -> 4087;
4664 -> 4649;
4664 -> 4097;
4664 -> 4089;
4665 -> 4240;
4666 -> 4665;
4666 -> 4109;
4667 -> 4666;
4667 -> 4111;
4667 -> 4109;
4668 -> 4107;
4668 -> 4141;
4668 -> 4236;
4668 -> 4667;
4668 -> 4245;
4668 -> 4135;
4668 -> 4136;
4668 -> 4653;
4668 -> 4143;
4668 -> 4140;
4669 -> 4260;
4670 -> 4669;
4670 -> 4155;
4671 -> 4670;
4671 -> 4157;
4671 -> 4155;
4672 -> 4153;
4672 -> 4187;
4672 -> 4256;
4672 -> 4671;
4672 -> 4265;
4672 -> 4181;
4672 -> 4182;
4672 -> 4657;
4672 -> 4189;
4672 -> 4186;
4673 -> 4201;
4674 -> 4673;
4674 -> 4022;
4675 -> 4674;
4675 -> 4024;
4675 -> 4022;
4676 -> 4220;
4677 -> 4676;
4677 -> 4060;
4678 -> 4677;
4678 -> 4062;
4678 -> 4060;
4679 -> 4058;
4679 -> 4090;
4679 -> 4216;
4679 -> 4678;
4679 -> 4225;
4679 -> 4086;
4679 -> 4087;
4679 -> 4664;
4679 -> 4097;
4679 -> 4089;
4680 -> 4240;
4681 -> 4680;
4681 -> 4109;
4682 -> 4681;
4682 -> 4111;
4682 -> 4109;
4683 -> 4107;
4683 -> 4141;
4683 -> 4236;
4683 -> 4682;
4683 -> 4245;
4683 -> 4135;
4683 -> 4136;
4683 -> 4668;
4683 -> 4143;
4683 -> 4140;
4684 -> 4260;
4685 -> 4684;
4685 -> 4155;
4686 -> 4685;
4686 -> 4157;
4686 -> 4155;
4687 -> 4153;
4687 -> 4187;
4687 -> 4256;
4687 -> 4686;
4687 -> 4265;
4687 -> 4181;
4687 -> 4182;
4687 -> 4672;
4687 -> 4189;
4687 -> 4186;
4688 -> 0;
4688 -> 4201;
4689 -> 4688;
4689 -> 4022;
4690 -> 4689;
4690 -> 4024;
4690 -> 4022;
4691 -> 0;
4691 -> 4220;
4692 -> 4691;
4692 -> 4060;
4693 -> 4692;
4693 -> 4062;
4693 -> 4060;
4694 -> 4058;
4694 -> 4090;
4694 -> 4216;
4694 -> 4693;
4694 -> 4225;
4694 -> 4086;
4694 -> 4087;
4694 -> 4679;
4694 -> 4097;
4694 -> 4089;
4695 -> 0;
4695 -> 4240;
4696 -> 4695;
4696 -> 4109;
4697 -> 4696;
4697 -> 4111;
4697 -> 4109;
4698 -> 4107;
4698 -> 4141;
4698 -> 4236;
4698 -> 4697;
4698 -> 4245;
4698 -> 4135;
4698 -> 4136;
4698 -> 4683;
4698 -> 4143;
4698 -> 4140;
4699 -> 0;
4699 -> 4260;
4700 -> 4699;
4700 -> 4155;
4701 -> 4700;
4701 -> 4157;
4701 -> 4155;
4702 -> 4153;
4702 -> 4187;
4702 -> 4256;
4702 -> 4701;
4702 -> 4265;
4702 -> 4181;
4702 -> 4182;
4702 -> 4687;
4702 -> 4189;
4702 -> 4186;
4703 -> 4201;
4704 -> 4703;
4704 -> 4022;
4705 -> 4704;
4705 -> 4024;
4705 -> 4022;
4706 -> 4220;
4707 -> 4706;
4707 -> 4060;
4708 -> 4707;
4708 -> 4062;
4708 -> 4060;
4709 -> 4058;
4709 -> 4090;
4709 -> 4216;
4709 -> 4708;
4709 -> 4225;
4709 -> 4086;
4709 -> 4087;
4709 -> 4694;
4709 -> 4097;
4709 -> 4089;
4710 -> 4240;
4711 -> 4710;
4711 -> 4109;
4712 -> 4711;
4712 -> 4111;
4712 -> 4109;
4713 -> 4107;
4713 -> 4141;
4713 -> 4236;
4713 -> 4712;
4713 -> 4245;
4713 -> 4135;
4713 -> 4136;
4713 -> 4698;
4713 -> 4143;
4713 -> 4140;
4714 -> 4260;
4715 -> 4714;
4715 -> 4155;
4716 -> 4715;
4716 -> 4157;
4716 -> 4155;
4717 -> 4153;
4717 -> 4187;
4717 -> 4256;
4717 -> 4716;
4717 -> 4265;
4717 -> 4181;
4717 -> 4182;
4717 -> 4702;
4717 -> 4189;
4717 -> 4186;
4718 -> 4201;
4719 -> 4718;
4719 -> 4022;
4720 -> 4719;
4720 -> 4024;
4720 -> 4022;
4721 -> 4220;
4722 -> 4721;
4722 -> 4060;
4723 -> 4722;
4723 -> 4062;
4723 -> 4060;
4724 -> 4058;
4724 -> 4090;
4724 -> 4216;
4724 -> 4723;
4724 -> 4225;
4724 -> 4086;
4724 -> 4087;
4724 -> 4709;
4724 -> 4097;
4724 -> 4089;
4725 -> 4240;
4726 -> 4725;
4726 -> 4109;
4727 -> 4726;
4727 -> 4111;
4727 -> 4109;
4728 -> 4107;
4728 -> 4141;
4728 -> 4236;
4728 -> 4727;
4728 -> 4245;
4728 -> 4135;
4728 -> 4136;
4728 -> 4713;
4728 -> 4143;
4728 -> 4140;
4729 -> 4260;
4730 -> 4729;
4730 -> 4155;
4731 -> 4730;
4731 -> 4157;
4731 -> 4155;
4732 -> 4153;
4732 -> 4187;
4732 -> 4256;
4732 -> 4731;
4732 -> 4265;
4732 -> 4181;
4732 -> 4182;
4732 -> 4717;
4732 -> 4189;
4732 -> 4186;
4733 -> 4201;
4734 -> 4733;
4734 -> 4022;
4735 -> 4734;
4735 -> 4024;
4735 -> 4022;
4736 -> 4220;
4737 -> 4736;
4737 -> 4060;
4738 -> 4737;
4738 -> 4062;
4738 -> 4060;
4739 -> 4058;
4739 -> 4090;
4739 -> 4216;
4739 -> 4738;
4739 -> 4225;
4739 -> 4086;
4739 -> 4087;
4739 -> 4724;
4739 -> 4097;
4739 -> 4089;
4740 -> 4240;
4741 -> 4740;
4741 -> 4109;
4742 -> 4741;
4742 -> 4111;
4742 -> 4109;
4743 -> 4107;
4743 -> 4141;
4743 -> 4236;
4743 -> 4742;
4743 -> 4245;
4743 -> 4135;
4743 -> 4136;
4743 -> 4728;
4743 -> 4143;
4743 -> 4140;
4744 -> 4260;
4745 -> 4744;
4745 -> 4155;
4746 -> 4745;
4746 -> 4157;
4746 -> 4155;
4747 -> 4153;
4747 -> 4187;
4747 -> 4256;
4747 -> 4746;
4747 -> 4265;
4747 -> 4181;
4747 -> 4182;
4747 -> 4732;
4747 -> 4189;
4747 -> 4186;
4748 -> 4201;
4749 -> 4748;
4749 -> 4022;
4750 -> 4749;
4750 -> 4024;
4750 -> 4022;
4751 -> 4220;
4752 -> 4751;
4752 -> 4060;
4753 -> 4752;
4753 -> 4062;
4753 -> 4060;
4754 -> 4058;
4754 -> 4090;
4754 -> 4216;
4754 -> 4753;
4754 -> 4225;
4754 -> 4086;
4754 -> 4087;
4754 -> 4739;
4754 -> 4097;
4754 -> 4089;
4755 -> 4240;
4756 -> 4755;
4756 -> 4109;
4757 -> 4756;
4757 -> 4111;
4757 -> 4109;
4758 -> 4107;
4758 -> 4141;
4758 -> 4236;
4758 -> 4757;
4758 -> 4245;
4758 -> 4135;
4758 -> 4136;
4758 -> 4743;
4758 -> 4143;
4758 -> 4140;
4759 -> 4260;
4760 -> 4759;
4760 -> 4155;
4761 -> 4760;
4761 -> 4157;
4761 -> 4155;
4762 -> 4153;
4762 -> 4187;
4762 -> 4256;
4762 -> 4761;
4762 -> 4265;
4762 -> 4181;
4762 -> 4182;
4762 -> 4747;
4762 -> 4189;
4762 -> 4186;
4763 -> 4201;
4764 -> 4763;
4764 -> 4022;
4765 -> 4764;
4765 -> 4024;
4765 -> 4022;
4766 -> 4220;
4767 -> 4766;
4767 -> 4060;
4768 -> 4767;
4768 -> 4062;
4768 -> 4060;
4769 -> 4058;
4769 -> 4090;
4769 -> 4216;
4769 -> 4768;
4769 -> 4225;
4769 -> 4086;
4769 -> 4087;
4769 -> 4754;
4769 -> 4097;
4769 -> 4089;
4770 -> 4240;
4771 -> 4770;
4771 -> 4109;
4772 -> 4771;
4772 -> 4111;
4772 -> 4109;
4773 -> 4107;
4773 -> 4141;
4773 -> 4236;
4773 -> 4772;
4773 -> 4245;
4773 -> 4135;
4773 -> 4136;
4773 -> 4758;
4773 -> 4143;
4773 -> 4140;
4774 -> 4260;
4775 -> 4774;
4775 -> 4155;
4776 -> 4775;
4776 -> 4157;
4776 -> 4155;
4777 -> 4153;
4777 -> 4187;
4777 -> 4256;
4777 -> 4776;
4777 -> 4265;
4777 -> 4181;
4777 -> 4182;
4777 -> 4762;
4777 -> 4189;
4777 -> 4186;
4778 -> 4201;
4779 -> 4778;
4779 -> 4022;
4780 -> 4779;
4780 -> 4024;
4780 -> 4022;
4781 -> 4220;
4782 -> 4781;
4782 -> 4060;
4783 -> 4782;
4783 -> 4062;
4783 -> 4060;
4784 -> 4058;
4784 -> 4090;
4784 -> 4216;
4784 -> 4783;
4784 -> 4225;
4784 -> 4086;
4784 -> 4087;
4784 -> 4769;
4784 -> 4097;
4784 -> 4089;
4785 -> 4240;
4786 -> 4785;
4786 -> 4109;
4787 -> 4786;
4787 -> 4111;
4787 -> 4109;
4788 -> 4107;
4788 -> 4141;
4788 -> 4236;
4788 -> 4787;
4788 -> 4245;
4788 -> 4135;
4788 -> 4136;
4788 -> 4773;
4788 -> 4143;
4788 -> 4140;
4789 -> 4260;
4790 -> 4789;
4790 -> 4155;
4791 -> 4790;
4791 -> 4157;
4791 -> 4155;
4792 -> 4153;
4792 -> 4187;
4792 -> 4256;
4792 -> 4791;
4792 -> 4265;
4792 -> 4181;
4792 -> 4182;
4792 -> 4777;
4792 -> 4189;
4792 -> 4186;
4793 -> 4201;
4794 -> 4793;
4794 -> 4022;
4795 -> 4794;
4795 -> 4024;
4795 -> 4022;
4796 -> 4220;
4797 -> 4796;
4797 -> 4060;
4798 -> 4797;
4798 -> 4062;
4798 -> 4060;
4799 -> 4058;
4799 -> 4090;
4799 -> 4216;
4799 -> 4798;
4799 -> 4225;
4799 -> 4086;
4799 -> 4087;
4799 -> 4784;
4799 -> 4097;
4799 -> 4089;
4800 -> 4240;
4801 -> 4800;
4801 -> 4109;
4802 -> 4801;
4802 -> 4111;
4802 -> 4109;
4803 -> 4107;
4803 -> 4141;
4803 -> 4236;
4803 -> 4802;
4803 -> 4245;
4803 -> 4135;
4803 -> 4136;
4803 -> 4788;
4803 -> 4143;
4803 -> 4140;
4804 -> 4260;
4805 -> 4804;
4805 -> 4155;
4806 -> 4805;
4806 -> 4157;
4806 -> 4155;
4807 -> 4153;
4807 -> 4187;
4807 -> 4256;
4807 -> 4806;
4807 -> 4265;
4807 -> 4181;
4807 -> 4182;
4807 -> 4792;
4807 -> 4189;
4807 -> 4186;
4808 -> 4201;
4809 -> 4808;
4809 -> 4022;
4810 -> 4809;
4810 -> 4024;
4810 -> 4022;
4811 -> 4220;
4812 -> 4811;
4812 -> 4060;
4813 -> 4812;
4813 -> 4062;
4813 -> 4060;
4814 -> 4058;
4814 -> 4090;
4814 -> 4216;
4814 -> 4813;
4814 -> 4225;
4814 -> 4086;
4814 -> 4087;
4814 -> 4799;
4814 -> 4097;
4814 -> 4089;
4815 -> 4240;
4816 -> 4815;
4816 -> 4109;
4817 -> 4816;
4817 -> 4111;
4817 -> 4109;
4818 -> 4107;
4818 -> 4141;
4818 -> 4236;
4818 -> 4817;
4818 -> 4245;
4818 -> 4135;
4818 -> 4136;
4818 -> 4803;
4818 -> 4143;
4818 -> 4140;
4819 -> 4260;
4820 -> 4819;
4820 -> 4155;
4821 -> 4820;
4821 -> 4157;
4821 -> 4155;
4822 -> 4153;
4822 -> 4187;
4822 -> 4256;
4822 -> 4821;
4822 -> 4265;
4822 -> 4181;
4822 -> 4182;
4822 -> 4807;
4822 -> 4189;
4822 -> 4186;
4823 -> 4201;
4824 -> 4823;
4824 -> 4022;
4825 -> 4824;
4825 -> 4024;
4825 -> 4022;
4826 -> 4220;
4827 -> 4826;
4827 -> 4060;
4828 -> 4827;
4828 -> 4062;
4828 -> 4060;
4829 -> 4058;
4829 -> 4090;
4829 -> 4216;
4829 -> 4828;
4829 -> 4225;
4829 -> 4086;
4829 -> 4087;
4829 -> 4814;
4829 -> 4097;
4829 -> 4089;
4830 -> 4240;
4831 -> 4830;
4831 -> 4109;
4832 -> 4831;
4832 -> 4111;
4832 -> 4109;
4833 -> 4107;
4833 -> 4141;
4833 -> 4236;
4833 -> 4832;
4833 -> 4245;
4833 -> 4135;
4833 -> 4136;
4833 -> 4818;
4833 -> 4143;
4833 -> 4140;
4834 -> 4260;
4835 -> 4834;
4835 -> 4155;
4836 -> 4835;
4836 -> 4157;
4836 -> 4155;
4837 -> 4153;
4837 -> 4187;
4837 -> 4256;
4837 -> 4836;
4837 -> 4265;
4837 -> 4181;
4837 -> 4182;
4837 -> 4822;
4837 -> 4189;
4837 -> 4186;
4838 -> 4201;
4839 -> 4838;
4839 -> 4022;
4840 -> 4839;
4840 -> 4024;
4840 -> 4022;
4841 -> 4220;
4842 -> 4841;
4842 -> 4060;
4843 -> 4842;
4843 -> 4062;
4843 -> 4060;
4844 -> 4058;
4844 -> 4090;
4844 -> 4216;
4844 -> 4843;
4844 -> 4225;
4844 -> 4086;
4844 -> 4087;
4844 -> 4829;
4844 -> 4097;
4844 -> 4089;
4845 -> 4240;
4846 -> 4845;
4846 -> 4109;
4847 -> 4846;
4847 -> 4111;
4847 -> 4109;
4848 -> 4107;
4848 -> 4141;
4848 -> 4236;
4848 -> 4847;
4848 -> 4245;
4848 -> 4135;
4848 -> 4136;
4848 -> 4833;
4848 -> 4143;
4848 -> 4140;
4849 -> 4260;
4850 -> 4849;
4850 -> 4155;
4851 -> 4850;
4851 -> 4157;
4851 -> 4155;
4852 -> 4153;
4852 -> 4187;
4852 -> 4256;
4852 -> 4851;
4852 -> 4265;
4852 -> 4181;
4852 -> 4182;
4852 -> 4837;
4852 -> 4189;
4852 -> 4186;
4853 -> 4201;
4854 -> 4853;
4854 -> 4022;
4855 -> 4854;
4855 -> 4024;
4855 -> 4022;
4856 -> 4220;
4857 -> 4856;
4857 -> 4060;
4858 -> 4857;
4858 -> 4062;
4858 -> 4060;
4859 -> 4058;
4859 -> 4090;
4859 -> 4216;
4859 -> 4858;
4859 -> 4225;
4859 -> 4086;
4859 -> 4087;
4859 -> 4844;
4859 -> 4097;
4859 -> 4089;
4860 -> 4240;
4861 -> 4860;
4861 -> 4109;
4862 -> 4861;
4862 -> 4111;
4862 -> 4109;
4863 -> 4107;
4863 -> 4141;
4863 -> 4236;
4863 -> 4862;
4863 -> 4245;
4863 -> 4135;
4863 -> 4136;
4863 -> 4848;
4863 -> 4143;
4863 -> 4140;
4864 -> 4260;
4865 -> 4864;
4865 -> 4155;
4866 -> 4865;
4866 -> 4157;
4866 -> 4155;
4867 -> 4153;
4867 -> 4187;
4867 -> 4256;
4867 -> 4866;
4867 -> 4265;
4867 -> 4181;
4867 -> 4182;
4867 -> 4852;
4867 -> 4189;
4867 -> 4186;
4868 -> 4201;
4869 -> 4868;
4869 -> 4022;
4870 -> 4869;
4870 -> 4024;
4870 -> 4022;
4871 -> 4220;
4872 -> 4871;
4872 -> 4060;
4873 -> 4872;
4873 -> 4062;
4873 -> 4060;
4874 -> 4058;
4874 -> 4090;
4874 -> 4216;
4874 -> 4873;
4874 -> 4225;
4874 -> 4086;
4874 -> 4087;
4874 -> 4859;
4874 -> 4097;
4874 -> 4089;
4875 -> 4240;
4876 -> 4875;
4876 -> 4109;
4877 -> 4876;
4877 -> 4111;
4877 -> 4109;
4878 -> 4107;
4878 -> 4141;
4878 -> 4236;
4878 -> 4877;
4878 -> 4245;
4878 -> 4135;
4878 -> 4136;
4878 -> 4863;
4878 -> 4143;
4878 -> 4140;
4879 -> 4260;
4880 -> 4879;
4880 -> 4155;
4881 -> 4880;
4881 -> 4157;
4881 -> 4155;
4882 -> 4153;
4882 -> 4187;
4882 -> 4256;
4882 -> 4881;
4882 -> 4265;
4882 -> 4181;
4882 -> 4182;
4882 -> 4867;
4882 -> 4189;
4882 -> 4186;
4883 -> 4201;
4884 -> 4883;
4884 -> 4022;
4885 -> 4884;
4885 -> 4024;
4885 -> 4022;
4886 -> 4220;
4887 -> 4886;
4887 -> 4060;
4888 -> 4887;
4888 -> 4062;
4888 -> 4060;
4889 -> 4058;
4889 -> 4090;
4889 -> 4216;
4889 -> 4888;
4889 -> 4225;
4889 -> 4086;
4889 -> 4087;
4889 -> 4874;
4889 -> 4097;
4889 -> 4089;
4890 -> 4240;
4891 -> 4890;
4891 -> 4109;
4892 -> 4891;
4892 -> 4111;
4892 -> 4109;
4893 -> 4107;
4893 -> 4141;
4893 -> 4236;
4893 -> 4892;
4893 -> 4245;
4893 -> 4135;
4893 -> 4136;
4893 -> 4878;
4893 -> 4143;
4893 -> 4140;
4894 -> 4260;
4895 -> 4894;
4895 -> 4155;
4896 -> 4895;
4896 -> 4157;
4896 -> 4155;
4897 -> 4153;
4897 -> 4187;
4897 -> 4256;
4897 -> 4896;
4897 -> 4265;
4897 -> 4181;
4897 -> 4182;
4897 -> 4882;
4897 -> 4189;
4897 -> 4186;
4898 -> 4201;
4899 -> 4898;
4899 -> 4022;
4900 -> 4899;
4900 -> 4024;
4900 -> 4022;
4901 -> 4220;
4902 -> 4901;
4902 -> 4060;
4903 -> 4902;
4903 -> 4062;
4903 -> 4060;
4904 -> 4058;
4904 -> 4090;
4904 -> 4216;
4904 -> 4903;
4904 -> 4225;
4904 -> 4086;
4904 -> 4087;
4904 -> 4889;
4904 -> 4097;
4904 -> 4089;
4905 -> 4240;
4906 -> 4905;
4906 -> 4109;
4907 -> 4906;
4907 -> 4111;
4907 -> 4109;
4908 -> 4107;
4908 -> 4141;
4908 -> 4236;
4908 -> 4907;
4908 -> 4245;
4908 -> 4135;
4908 -> 4136;
4908 -> 4893;
4908 -> 4143;
4908 -> 4140;
4909 -> 4260;
4910 -> 4909;
4910 -> 4155;
4911 -> 4910;
4911 -> 4157;
4911 -> 4155;
4912 -> 4153;
4912 -> 4187;
4912 -> 4256;
4912 -> 4911;
4912 -> 4265;
4912 -> 4181;
4912 -> 4182;
4912 -> 4897;
4912 -> 4189;
4912 -> 4186;
4913 -> 4201;
4914 -> 4913;
4914 -> 4022;
4915 -> 4914;
4915 -> 4024;
4915 -> 4022;
4916 -> 4220;
4917 -> 4916;
4917 -> 4060;
4918 -> 4917;
4918 -> 4062;
4918 -> 4060;
4919 -> 4058;
4919 -> 4090;
4919 -> 4216;
4919 -> 4918;
4919 -> 4225;
4919 -> 4086;
4919 -> 4087;
4919 -> 4904;
4919 -> 4097;
4919 -> 4089;
4920 -> 4240;
4921 -> 4920;
4921 -> 4109;
4922 -> 4921;
4922 -> 4111;
4922 -> 4109;
4923 -> 4107;
4923 -> 4141;
4923 -> 4236;
4923 -> 4922;
4923 -> 4245;
4923 -> 4135;
4923 -> 4136;
4923 -> 4908;
4923 -> 4143;
4923 -> 4140;
4924 -> 4260;
4925 -> 4924;
4925 -> 4155;
4926 -> 4925;
4926 -> 4157;
4926 -> 4155;
4927 -> 4153;
4927 -> 4187;
4927 -> 4256;
4927 -> 4926;
4927 -> 4265;
4927 -> 4181;
4927 -> 4182;
4927 -> 4912;
4927 -> 4189;
4927 -> 4186;
4928 -> 4201;
4929 -> 4928;
4929 -> 4022;
4930 -> 4929;
4930 -> 4024;
4930 -> 4022;
4931 -> 4220;
4932 -> 4931;
4932 -> 4060;
4933 -> 4932;
4933 -> 4062;
4933 -> 4060;
4934 -> 4058;
4934 -> 4090;
4934 -> 4216;
4934 -> 4933;
4934 -> 4225;
4934 -> 4086;
4934 -> 4087;
4934 -> 4919;
4934 -> 4097;
4934 -> 4089;
4935 -> 4240;
4936 -> 4935;
4936 -> 4109;
4937 -> 4936;
4937 -> 4111;
4937 -> 4109;
4938 -> 4107;
4938 -> 4141;
4938 -> 4236;
4938 -> 4937;
4938 -> 4245;
4938 -> 4135;
4938 -> 4136;
4938 -> 4923;
4938 -> 4143;
4938 -> 4140;
4939 -> 4260;
4940 -> 4939;
4940 -> 4155;
4941 -> 4940;
4941 -> 4157;
4941 -> 4155;
4942 -> 4153;
4942 -> 4187;
4942 -> 4256;
4942 -> 4941;
4942 -> 4265;
4942 -> 4181;
4942 -> 4182;
4942 -> 4927;
4942 -> 4189;
4942 -> 4186;
4943 -> 4201;
4944 -> 4943;
4944 -> 4022;
4945 -> 4944;
4945 -> 4024;
4945 -> 4022;
4946 -> 4220;
4947 -> 4946;
4947 -> 4060;
4948 -> 4947;
4948 -> 4062;
4948 -> 4060;
4949 -> 4058;
4949 -> 4090;
4949 -> 4216;
4949 -> 4948;
4949 -> 4225;
4949 -> 4086;
4949 -> 4087;
4949 -> 4934;
4949 -> 4097;
4949 -> 4089;
4950 -> 4240;
4951 -> 4950;
4951 -> 4109;
4952 -> 4951;
4952 -> 4111;
4952 -> 4109;
4953 -> 4107;
4953 -> 4141;
4953 -> 4236;
4953 -> 4952;
4953 -> 4245;
4953 -> 4135;
4953 -> 4136;
4953 -> 4938;
4953 -> 4143;
4953 -> 4140;
4954 -> 4260;
4955 -> 4954;
4955 -> 4155;
4956 -> 4955;
4956 -> 4157;
4956 -> 4155;
4957 -> 4153;
4957 -> 4187;
4957 -> 4256;
4957 -> 4956;
4957 -> 4265;
4957 -> 4181;
4957 -> 4182;
4957 -> 4942;
4957 -> 4189;
4957 -> 4186;
4958 -> 4201;
4959 -> 4958;
4959 -> 4022;
4960 -> 4959;
4960 -> 4024;
4960 -> 4022;
4961 -> 4220;
4962 -> 4961;
4962 -> 4060;
4963 -> 4962;
4963 -> 4062;
4963 -> 4060;
4964 -> 4058;
4964 -> 4090;
4964 -> 4216;
4964 -> 4963;
4964 -> 4225;
4964 -> 4086;
4964 -> 4087;
4964 -> 4949;
4964 -> 4097;
4964 -> 4089;
4965 -> 4240;
4966 -> 4965;
4966 -> 4109;
4967 -> 4966;
4967 -> 4111;
4967 -> 4109;
4968 -> 4107;
4968 -> 4141;
4968 -> 4236;
4968 -> 4967;
4968 -> 4245;
4968 -> 4135;
4968 -> 4136;
4968 -> 4953;
4968 -> 4143;
4968 -> 4140;
4969 -> 4260;
4970 -> 4969;
4970 -> 4155;
4971 -> 4970;
4971 -> 4157;
4971 -> 4155;
4972 -> 4153;
4972 -> 4187;
4972 -> 4256;
4972 -> 4971;
4972 -> 4265;
4972 -> 4181;
4972 -> 4182;
4972 -> 4957;
4972 -> 4189;
4972 -> 4186;
4973 -> 4201;
4974 -> 4973;
4974 -> 4022;
4975 -> 4974;
4975 -> 4024;
4975 -> 4022;
4976 -> 4220;
4977 -> 4976;
4977 -> 4060;
4978 -> 4977;
4978 -> 4062;
4978 -> 4060;
4979 -> 4058;
4979 -> 4090;
4979 -> 4216;
4979 -> 4978;
4979 -> 4225;
4979 -> 4086;
4979 -> 4087;
4979 -> 4964;
4979 -> 4097;
4979 -> 4089;
4980 -> 4240;
4981 -> 4980;
4981 -> 4109;
4982 -> 4981;
4982 -> 4111;
4982 -> 4109;
4983 -> 4107;
4983 -> 4141;
4983 -> 4236;
4983 -> 4982;
4983 -> 4245;
4983 -> 4135;
4983 -> 4136;
4983 -> 4968;
4983 -> 4143;
4983 -> 4140;
4984 -> 4260;
4985 -> 4984;
4985 -> 4155;
4986 -> 4985;
4986 -> 4157;
4986 -> 4155;
4987 -> 4153;
4987 -> 4187;
4987 -> 4256;
4987 -> 4986;
4987 -> 4265;
4987 -> 4181;
4987 -> 4182;
4987 -> 4972;
4987 -> 4189;
4987 -> 4186;
4988 -> 4201;
4989 -> 4988;
4989 -> 4022;
4990 -> 4989;
4990 -> 4024;
4990 -> 4022;
4991 -> 4220;
4992 -> 4991;
4992 -> 4060;
4993 -> 4992;
4993 -> 4062;
4993 -> 4060;
4994 -> 4058;
4994 -> 4090;
4994 -> 4216;
4994 -> 4993;
4994 -> 4225;
4994 -> 4086;
4994 -> 4087;
4994 -> 4979;
4994 -> 4097;
4994 -> 4089;
4995 -> 4240;
4996 -> 4995;
4996 -> 4109;
4997 -> 4996;
4997 -> 4111;
4997 -> 4109;
4998 -> 4107;
4998 -> 4141;
4998 -> 4236;
4998 -> 4997;
4998 -> 4245;
4998 -> 4135;
4998 -> 4136;
4998 -> 4983;
4998 -> 4143;
4998 -> 4140;
4999 -> 4260;
5000 -> 4999;
5000 -> 4155;
5001 -> 5000;
5001 -> 4157;
5001 -> 4155;
5002 -> 4153;
5002 -> 4187;
5002 -> 4256;
5002 -> 5001;
5002 -> 4265;
5002 -> 4181;
5002 -> 4182;
5002 -> 4987;
5002 -> 4189;
5002 -> 4186;
5003 -> 4201;
5004 -> 5003;
5004 -> 4022;
5005 -> 5004;
5005 -> 4024;
5005 -> 4022;
5006 -> 4220;
5007 -> 5006;
5007 -> 4060;
5008 -> 5007;
5008 -> 4062;
5008 -> 4060;
5009 -> 4058;
5009 -> 4090;
5009 -> 4216;
5009 -> 5008;
5009 -> 4225;
5009 -> 4086;
5009 -> 4087;
5009 -> 4994;
5009 -> 4097;
5009 -> 4089;
5010 -> 4240;
5011 -> 5010;
5011 -> 4109;
5012 -> 5011;
5012 -> 4111;
5012 -> 4109;
5013 -> 4107;
5013 -> 4141;
5013 -> 4236;
5013 -> 5012;
5013 -> 4245;
5013 -> 4135;
5013 -> 4136;
5013 -> 4998;
5013 -> 4143;
5013 -> 4140;
5014 -> 4260;
5015 -> 5014;
5015 -> 4155;
5016 -> 5015;
5016 -> 4157;
5016 -> 4155;
5017 -> 4153;
5017 -> 4187;
5017 -> 4256;
5017 -> 5016;
5017 -> 4265;
5017 -> 4181;
5017 -> 4182;
5017 -> 5002;
5017 -> 4189;
5017 -> 4186;
5018 -> 4201;
5019 -> 5018;
5019 -> 4022;
5020 -> 5019;
5020 -> 4024;
5020 -> 4022;
5021 -> 4220;
5022 -> 5021;
5022 -> 4060;
5023 -> 5022;
5023 -> 4062;
5023 -> 4060;
5024 -> 4058;
5024 -> 4090;
5024 -> 4216;
5024 -> 5023;
5024 -> 4225;
5024 -> 4086;
5024 -> 4087;
5024 -> 5009;
5024 -> 4097;
5024 -> 4089;
5025 -> 4240;
5026 -> 5025;
5026 -> 4109;
5027 -> 5026;
5027 -> 4111;
5027 -> 4109;
5028 -> 4107;
5028 -> 4141;
5028 -> 4236;
5028 -> 5027;
5028 -> 4245;
5028 -> 4135;
5028 -> 4136;
5028 -> 5013;
5028 -> 4143;
5028 -> 4140;
5029 -> 4260;
5030 -> 5029;
5030 -> 4155;
5031 -> 5030;
5031 -> 4157;
5031 -> 4155;
5032 -> 4153;
5032 -> 4187;
5032 -> 4256;
5032 -> 5031;
5032 -> 4265;
5032 -> 4181;
5032 -> 4182;
5032 -> 5017;
5032 -> 4189;
5032 -> 4186;
5033 -> 4201;
5034 -> 5033;
5034 -> 4022;
5035 -> 5034;
5035 -> 4024;
5035 -> 4022;
5036 -> 4220;
5037 -> 5036;
5037 -> 4060;
5038 -> 5037;
5038 -> 4062;
5038 -> 4060;
5039 -> 4058;
5039 -> 4090;
5039 -> 4216;
5039 -> 5038;
5039 -> 4225;
5039 -> 4086;
5039 -> 4087;
5039 -> 5024;
5039 -> 4097;
5039 -> 4089;
5040 -> 4240;
5041 -> 5040;
5041 -> 4109;
5042 -> 5041;
5042 -> 4111;
5042 -> 4109;
5043 -> 4107;
5043 -> 4141;
5043 -> 4236;
5043 -> 5042;
5043 -> 4245;
5043 -> 4135;
5043 -> 4136;
5043 -> 5028;
5043 -> 4143;
5043 -> 4140;
5044 -> 4260;
5045 -> 5044;
5045 -> 4155;
5046 -> 5045;
5046 -> 4157;
5046 -> 4155;
5047 -> 4153;
5047 -> 4187;
5047 -> 4256;
5047 -> 5046;
5047 -> 4265;
5047 -> 4181;
5047 -> 4182;
5047 -> 5032;
5047 -> 4189;
5047 -> 4186;
5048 -> 4201;
5049 -> 5048;
5049 -> 4022;
5050 -> 5049;
5050 -> 4024;
5050 -> 4022;
5051 -> 4220;
5052 -> 5051;
5052 -> 4060;
5053 -> 5052;
5053 -> 4062;
5053 -> 4060;
5054 -> 4058;
5054 -> 4090;
5054 -> 4216;
5054 -> 5053;
5054 -> 4225;
5054 -> 4086;
5054 -> 4087;
5054 -> 5039;
5054 -> 4097;
5054 -> 4089;
5055 -> 4240;
5056 -> 5055;
5056 -> 4109;
5057 -> 5056;
5057 -> 4111;
5057 -> 4109;
5058 -> 4107;
5058 -> 4141;
5058 -> 4236;
5058 -> 5057;
5058 -> 4245;
5058 -> 4135;
5058 -> 4136;
5058 -> 5043;
5058 -> 4143;
5058 -> 4140;
5059 -> 4260;
5060 -> 5059;
5060 -> 4155;
5061 -> 5060;
5061 -> 4157;
5061 -> 4155;
5062 -> 4153;
5062 -> 4187;
5062 -> 4256;
5062 -> 5061;
5062 -> 4265;
5062 -> 4181;
5062 -> 4182;
5062 -> 5047;
5062 -> 4189;
5062 -> 4186;
5063 -> 4201;
5064 -> 5063;
5064 -> 4022;
5065 -> 5064;
5065 -> 4024;
5065 -> 4022;
5066 -> 4220;
5067 -> 5066;
5067 -> 4060;
5068 -> 5067;
5068 -> 4062;
5068 -> 4060;
5069 -> 4058;
5069 -> 4090;
5069 -> 4216;
5069 -> 5068;
5069 -> 4225;
5069 -> 4086;
5069 -> 4087;
5069 -> 5054;
5069 -> 4097;
5069 -> 4089;
5070 -> 4240;
5071 -> 5070;
5071 -> 4109;
5072 -> 5071;
5072 -> 4111;
5072 -> 4109;
5073 -> 4107;
5073 -> 4141;
5073 -> 4236;
5073 -> 5072;
5073 -> 4245;
5073 -> 4135;
5073 -> 4136;
5073 -> 5058;
5073 -> 4143;
5073 -> 4140;
5074 -> 4260;
5075 -> 5074;
5075 -> 4155;
5076 -> 5075;
5076 -> 4157;
5076 -> 4155;
5077 -> 4153;
5077 -> 4187;
5077 -> 4256;
5077 -> 5076;
5077 -> 4265;
5077 -> 4181;
5077 -> 4182;
5077 -> 5062;
5077 -> 4189;
5077 -> 4186;
5078 -> 4201;
5079 -> 5078;
5079 -> 4022;
5080 -> 5079;
5080 -> 4024;
5080 -> 4022;
5081 -> 4220;
5082 -> 5081;
5082 -> 4060;
5083 -> 5082;
5083 -> 4062;
5083 -> 4060;
5084 -> 4058;
5084 -> 4090;
5084 -> 4216;
5084 -> 5083;
5084 -> 4225;
5084 -> 4086;
5084 -> 4087;
5084 -> 5069;
5084 -> 4097;
5084 -> 4089;
5085 -> 4240;
5086 -> 5085;
5086 -> 4109;
5087 -> 5086;
5087 -> 4111;
5087 -> 4109;
5088 -> 4107;
5088 -> 4141;
5088 -> 4236;
5088 -> 5087;
5088 -> 4245;
5088 -> 4135;
5088 -> 4136;
5088 -> 5073;
5088 -> 4143;
5088 -> 4140;
5089 -> 4260;
5090 -> 5089;
5090 -> 4155;
5091 -> 5090;
5091 -> 4157;
5091 -> 4155;
5092 -> 4153;
5092 -> 4187;
5092 -> 4256;
5092 -> 5091;
5092 -> 4265;
5092 -> 4181;
5092 -> 4182;
5092 -> 5077;
5092 -> 4189;
5092 -> 4186;
5093 -> 4201;
5094 -> 5093;
5094 -> 4022;
5095 -> 5094;
5095 -> 4024;
5095 -> 4022;
5096 -> 4220;
5097 -> 5096;
5097 -> 4060;
5098 -> 5097;
5098 -> 4062;
5098 -> 4060;
5099 -> 4058;
5099 -> 4090;
5099 -> 4216;
5099 -> 5098;
5099 -> 4225;
5099 -> 4086;
5099 -> 4087;
5099 -> 5084;
5099 -> 4097;
5099 -> 4089;
5100 -> 4240;
5101 -> 5100;
5101 -> 4109;
5102 -> 5101;
5102 -> 4111;
5102 -> 4109;
5103 -> 4107;
5103 -> 4141;
5103 -> 4236;
5103 -> 5102;
5103 -> 4245;
5103 -> 4135;
5103 -> 4136;
5103 -> 5088;
5103 -> 4143;
5103 -> 4140;
5104 -> 4260;
5105 -> 5104;
5105 -> 4155;
5106 -> 5105;
5106 -> 4157;
5106 -> 4155;
5107 -> 4153;
5107 -> 4187;
5107 -> 4256;
5107 -> 5106;
5107 -> 4265;
5107 -> 4181;
5107 -> 4182;
5107 -> 5092;
5107 -> 4189;
5107 -> 4186;
5108 -> 4201;
5109 -> 5108;
5109 -> 4022;
5110 -> 5109;
5110 -> 4024;
5110 -> 4022;
5111 -> 4220;
5112 -> 5111;
5112 -> 4060;
5113 -> 5112;
5113 -> 4062;
5113 -> 4060;
5114 -> 4058;
5114 -> 4090;
5114 -> 4216;
5114 -> 5113;
5114 -> 4225;
5114 -> 4086;
5114 -> 4087;
5114 -> 5099;
5114 -> 4097;
5114 -> 4089;
5115 -> 4240;
5116 -> 5115;
5116 -> 4109;
5117 -> 5116;
5117 -> 4111;
5117 -> 4109;
5118 -> 4107;
5118 -> 4141;
5118 -> 4236;
5118 -> 5117;
5118 -> 4245;
5118 -> 4135;
5118 -> 4136;
5118 -> 5103;
5118 -> 4143;
5118 -> 4140;
5119 -> 4260;
5120 -> 5119;
5120 -> 4155;
5121 -> 5120;
5121 -> 4157;
5121 -> 4155;
5122 -> 4153;
5122 -> 4187;
5122 -> 4256;
5122 -> 5121;
5122 -> 4265;
5122 -> 4181;
5122 -> 4182;
5122 -> 5107;
5122 -> 4189;
5122 -> 4186;
5123 -> 4201;
5124 -> 5123;
5124 -> 4022;
5125 -> 5124;
5125 -> 4024;
5125 -> 4022;
5126 -> 4220;
5127 -> 5126;
5127 -> 4060;
5128 -> 5127;
5128 -> 4062;
5128 -> 4060;
5129 -> 4058;
5129 -> 4090;
5129 -> 4216;
5129 -> 5128;
5129 -> 4225;
5129 -> 4086;
5129 -> 4087;
5129 -> 5114;
5129 -> 4097;
5129 -> 4089;
5130 -> 4240;
5131 -> 5130;
5131 -> 4109;
5132 -> 5131;
5132 -> 4111;
5132 -> 4109;
5133 -> 4107;
5133 -> 4141;
5133 -> 4236;
5133 -> 5132;
5133 -> 4245;
5133 -> 4135;
5133 -> 4136;
5133 -> 5118;
5133 -> 4143;
5133 -> 4140;
5134 -> 4260;
5135 -> 5134;
5135 -> 4155;
5136 -> 5135;
5136 -> 4157;
5136 -> 4155;
5137 -> 4153;
5137 -> 4187;
5137 -> 4256;
5137 -> 5136;
5137 -> 4265;
5137 -> 4181;
5137 -> 4182;
5137 -> 5122;
5137 -> 4189;
5137 -> 4186;
5138 -> 4201;
5139 -> 5138;
5139 -> 4022;
5140 -> 5139;
5140 -> 4024;
5140 -> 4022;
5141 -> 4220;
5142 -> 5141;
5142 -> 4060;
5143 -> 5142;
5143 -> 4062;
5143 -> 4060;
5144 -> 4058;
5144 -> 4090;
5144 -> 4216;
5144 -> 5143;
5144 -> 4225;
5144 -> 4086;
5144 -> 4087;
5144 -> 5129;
5144 -> 4097;
5144 -> 4089;
5145 -> 4240;
5146 -> 5145;
5146 -> 4109;
5147 -> 5146;
5147 -> 4111;
5147 -> 4109;
5148 -> 4107;
5148 -> 4141;
5148 -> 4236;
5148 -> 5147;
5148 -> 4245;
5148 -> 4135;
5148 -> 4136;
5148 -> 5133;
5148 -> 4143;
5148 -> 4140;
5149 -> 4260;
5150 -> 5149;
5150 -> 4155;
5151 -> 5150;
5151 -> 4157;
5151 -> 4155;
5152 -> 4153;
5152 -> 4187;
5152 -> 4256;
5152 -> 5151;
5152 -> 4265;
5152 -> 4181;
5152 -> 4182;
5152 -> 5137;
5152 -> 4189;
5152 -> 4186;
5153 -> 4201;
5154 -> 5153;
5154 -> 4022;
5155 -> 5154;
5155 -> 4024;
5155 -> 4022;
5156 -> 4220;
5157 -> 5156;
5157 -> 4060;
5158 -> 5157;
5158 -> 4062;
5158 -> 4060;
5159 -> 4058;
5159 -> 4090;
5159 -> 4216;
5159 -> 5158;
5159 -> 4225;
5159 -> 4086;
5159 -> 4087;
5159 -> 5144;
5159 -> 4097;
5159 -> 4089;
5160 -> 4240;
5161 -> 5160;
5161 -> 4109;
5162 -> 5161;
5162 -> 4111;
5162 -> 4109;
5163 -> 4107;
5163 -> 4141;
5163 -> 4236;
5163 -> 5162;
5163 -> 4245;
5163 -> 4135;
5163 -> 4136;
5163 -> 5148;
5163 -> 4143;
5163 -> 4140;
5164 -> 4260;
5165 -> 5164;
5165 -> 4155;
5166 -> 5165;
5166 -> 4157;
5166 -> 4155;
5167 -> 4153;
5167 -> 4187;
5167 -> 4256;
5167 -> 5166;
5167 -> 4265;
5167 -> 4181;
5167 -> 4182;
5167 -> 5152;
5167 -> 4189;
5167 -> 4186;
5168 -> 4201;
5169 -> 5168;
5169 -> 4022;
5170 -> 5169;
5170 -> 4024;
5170 -> 4022;
5171 -> 4220;
5172 -> 5171;
5172 -> 4060;
5173 -> 5172;
5173 -> 4062;
5173 -> 4060;
5174 -> 4058;
5174 -> 4090;
5174 -> 4216;
5174 -> 5173;
5174 -> 4225;
5174 -> 4086;
5174 -> 4087;
5174 -> 5159;
5174 -> 4097;
5174 -> 4089;
5175 -> 4240;
5176 -> 5175;
5176 -> 4109;
5177 -> 5176;
5177 -> 4111;
5177 -> 4109;
5178 -> 4107;
5178 -> 4141;
5178 -> 4236;
5178 -> 5177;
5178 -> 4245;
5178 -> 4135;
5178 -> 4136;
5178 -> 5163;
5178 -> 4143;
5178 -> 4140;
5179 -> 4260;
5180 -> 5179;
5180 -> 4155;
5181 -> 5180;
5181 -> 4157;
5181 -> 4155;
5182 -> 4153;
5182 -> 4187;
5182 -> 4256;
5182 -> 5181;
5182 -> 4265;
5182 -> 4181;
5182 -> 4182;
5182 -> 5167;
5182 -> 4189;
5182 -> 4186;
5183 -> 4201;
5184 -> 5183;
5184 -> 4022;
5185 -> 5184;
5185 -> 4024;
5185 -> 4022;
5186 -> 4220;
5187 -> 5186;
5187 -> 4060;
5188 -> 5187;
5188 -> 4062;
5188 -> 4060;
5189 -> 4058;
5189 -> 4090;
5189 -> 4216;
5189 -> 5188;
5189 -> 4225;
5189 -> 4086;
5189 -> 4087;
5189 -> 5174;
5189 -> 4097;
5189 -> 4089;
5190 -> 4240;
5191 -> 5190;
5191 -> 4109;
5192 -> 5191;
5192 -> 4111;
5192 -> 4109;
5193 -> 4107;
5193 -> 4141;
5193 -> 4236;
5193 -> 5192;
5193 -> 4245;
5193 -> 4135;
5193 -> 4136;
5193 -> 5178;
5193 -> 4143;
5193 -> 4140;
5194 -> 4260;
5195 -> 5194;
5195 -> 4155;
5196 -> 5195;
5196 -> 4157;
5196 -> 4155;
5197 -> 4153;
5197 -> 4187;
5197 -> 4256;
5197 -> 5196;
5197 -> 4265;
5197 -> 4181;
5197 -> 4182;
5197 -> 5182;
5197 -> 4189;
5197 -> 4186;
5198 -> 4201;
5199 -> 5198;
5199 -> 4022;
5200 -> 5199;
5200 -> 4024;
5200 -> 4022;
5201 -> 4220;
5202 -> 5201;
5202 -> 4060;
5203 -> 5202;
5203 -> 4062;
5203 -> 4060;
5204 -> 4058;
5204 -> 4090;
5204 -> 4216;
5204 -> 5203;
5204 -> 4225;
5204 -> 4086;
5204 -> 4087;
5204 -> 5189;
5204 -> 4097;
5204 -> 4089;
5205 -> 4240;
5206 -> 5205;
5206 -> 4109;
5207 -> 5206;
5207 -> 4111;
5207 -> 4109;
5208 -> 4107;
5208 -> 4141;
5208 -> 4236;
5208 -> 5207;
5208 -> 4245;
5208 -> 4135;
5208 -> 4136;
5208 -> 5193;
5208 -> 4143;
5208 -> 4140;
5209 -> 4260;
5210 -> 5209;
5210 -> 4155;
5211 -> 5210;
5211 -> 4157;
5211 -> 4155;
5212 -> 4153;
5212 -> 4187;
5212 -> 4256;
5212 -> 5211;
5212 -> 4265;
5212 -> 4181;
5212 -> 4182;
5212 -> 5197;
5212 -> 4189;
5212 -> 4186;
5213 -> 4201;
5214 -> 5213;
5214 -> 4022;
5215 -> 5214;
5215 -> 4024;
5215 -> 4022;
5216 -> 4220;
5217 -> 5216;
5217 -> 4060;
5218 -> 5217;
5218 -> 4062;
5218 -> 4060;
5219 -> 4058;
5219 -> 4090;
5219 -> 4216;
5219 -> 5218;
5219 -> 4225;
5219 -> 4086;
5219 -> 4087;
5219 -> 5204;
5219 -> 4097;
5219 -> 4089;
5220 -> 4240;
5221 -> 5220;
5221 -> 4109;
5222 -> 5221;
5222 -> 4111;
5222 -> 4109;
5223 -> 4107;
5223 -> 4141;
5223 -> 4236;
5223 -> 5222;
5223 -> 4245;
5223 -> 4135;
5223 -> 4136;
5223 -> 5208;
5223 -> 4143;
5223 -> 4140;
5224 -> 4260;
5225 -> 5224;
5225 -> 4155;
5226 -> 5225;
5226 -> 4157;
5226 -> 4155;
5227 -> 4153;
5227 -> 4187;
5227 -> 4256;
5227 -> 5226;
5227 -> 4265;
5227 -> 4181;
5227 -> 4182;
5227 -> 5212;
5227 -> 4189;
5227 -> 4186;
5228 -> 4201;
5229 -> 5228;
5229 -> 4022;
5230 -> 5229;
5230 -> 4024;
5230 -> 4022;
5231 -> 4220;
5232 -> 5231;
5232 -> 4060;
5233 -> 5232;
5233 -> 4062;
5233 -> 4060;
5234 -> 4058;
5234 -> 4090;
5234 -> 4216;
5234 -> 5233;
5234 -> 4225;
5234 -> 4086;
5234 -> 4087;
5234 -> 5219;
5234 -> 4097;
5234 -> 4089;
5235 -> 4240;
5236 -> 5235;
5236 -> 4109;
5237 -> 5236;
5237 -> 4111;
5237 -> 4109;
5238 -> 4107;
5238 -> 4141;
5238 -> 4236;
5238 -> 5237;
5238 -> 4245;
5238 -> 4135;
5238 -> 4136;
5238 -> 5223;
5238 -> 4143;
5238 -> 4140;
5239 -> 4260;
5240 -> 5239;
5240 -> 4155;
5241 -> 5240;
5241 -> 4157;
5241 -> 4155;
5242 -> 4153;
5242 -> 4187;
5242 -> 4256;
5242 -> 5241;
5242 -> 4265;
5242 -> 4181;
5242 -> 4182;
5242 -> 5227;
5242 -> 4189;
5242 -> 4186;
5243 -> 4201;
5244 -> 5243;
5244 -> 4022;
5245 -> 5244;
5245 -> 4024;
5245 -> 4022;
5246 -> 4220;
5247 -> 5246;
5247 -> 4060;
5248 -> 5247;
5248 -> 4062;
5248 -> 4060;
5249 -> 4058;
5249 -> 4090;
5249 -> 4216;
5249 -> 5248;
5249 -> 4225;
5249 -> 4086;
5249 -> 4087;
5249 -> 5234;
5249 -> 4097;
5249 -> 4089;
5250 -> 4240;
5251 -> 5250;
5251 -> 4109;
5252 -> 5251;
5252 -> 4111;
5252 -> 4109;
5253 -> 4107;
5253 -> 4141;
5253 -> 4236;
5253 -> 5252;
5253 -> 4245;
5253 -> 4135;
5253 -> 4136;
5253 -> 5238;
5253 -> 4143;
5253 -> 4140;
5254 -> 4260;
5255 -> 5254;
5255 -> 4155;
5256 -> 5255;
5256 -> 4157;
5256 -> 4155;
5257 -> 4153;
5257 -> 4187;
5257 -> 4256;
5257 -> 5256;
5257 -> 4265;
5257 -> 4181;
5257 -> 4182;
5257 -> 5242;
5257 -> 4189;
5257 -> 4186;
5258 -> 4201;
5259 -> 5258;
5259 -> 4022;
5260 -> 5259;
5260 -> 4024;
5260 -> 4022;
5261 -> 4220;
5262 -> 5261;
5262 -> 4060;
5263 -> 5262;
5263 -> 4062;
5263 -> 4060;
5264 -> 4058;
5264 -> 4090;
5264 -> 4216;
5264 -> 5263;
5264 -> 4225;
5264 -> 4086;
5264 -> 4087;
5264 -> 5249;
5264 -> 4097;
5264 -> 4089;
5265 -> 4240;
5266 -> 5265;
5266 -> 4109;
5267 -> 5266;
5267 -> 4111;
5267 -> 4109;
5268 -> 4107;
5268 -> 4141;
5268 -> 4236;
5268 -> 5267;
5268 -> 4245;
5268 -> 4135;
5268 -> 4136;
5268 -> 5253;
5268 -> 4143;
5268 -> 4140;
5269 -> 4260;
5270 -> 5269;
5270 -> 4155;
5271 -> 5270;
5271 -> 4157;
5271 -> 4155;
5272 -> 4153;
5272 -> 4187;
5272 -> 4256;
5272 -> 5271;
5272 -> 4265;
5272 -> 4181;
5272 -> 4182;
5272 -> 5257;
5272 -> 4189;
5272 -> 4186;
5273 -> 4201;
5274 -> 5273;
5274 -> 4022;
5275 -> 5274;
5275 -> 4024;
5275 -> 4022;
5276 -> 4220;
5277 -> 5276;
5277 -> 4060;
5278 -> 5277;
5278 -> 4062;
5278 -> 4060;
5279 -> 4058;
5279 -> 4090;
5279 -> 4216;
5279 -> 5278;
5279 -> 4225;
5279 -> 4086;
5279 -> 4087;
5279 -> 5264;
5279 -> 4097;
5279 -> 4089;
5280 -> 4240;
5281 -> 5280;
5281 -> 4109;
5282 -> 5281;
5282 -> 4111;
5282 -> 4109;
5283 -> 4107;
5283 -> 4141;
5283 -> 4236;
5283 -> 5282;
5283 -> 4245;
5283 -> 4135;
5283 -> 4136;
5283 -> 5268;
5283 -> 4143;
5283 -> 4140;
5284 -> 4260;
5285 -> 5284;
5285 -> 4155;
5286 -> 5285;
5286 -> 4157;
5286 -> 4155;
5287 -> 4153;
5287 -> 4187;
5287 -> 4256;
5287 -> 5286;
5287 -> 4265;
5287 -> 4181;
5287 -> 4182;
5287 -> 5272;
5287 -> 4189;
5287 -> 4186;
5288 -> 4201;
5289 -> 5288;
5289 -> 4022;
5290 -> 5289;
5290 -> 4024;
5290 -> 4022;
5291 -> 4220;
5292 -> 5291;
5292 -> 4060;
5293 -> 5292;
5293 -> 4062;
5293 -> 4060;
5294 -> 4058;
5294 -> 4090;
5294 -> 4216;
5294 -> 5293;
5294 -> 4225;
5294 -> 4086;
5294 -> 4087;
5294 -> 5279;
5294 -> 4097;
5294 -> 4089;
5295 -> 4240;
5296 -> 5295;
5296 -> 4109;
5297 -> 5296;
5297 -> 4111;
5297 -> 4109;
5298 -> 4107;
5298 -> 4141;
5298 -> 4236;
5298 -> 5297;
5298 -> 4245;
5298 -> 4135;
5298 -> 4136;
5298 -> 5283;
5298 -> 4143;
5298 -> 4140;
5299 -> 4260;
5300 -> 5299;
5300 -> 4155;
5301 -> 5300;
5301 -> 4157;
5301 -> 4155;
5302 -> 4153;
5302 -> 4187;
5302 -> 4256;
5302 -> 5301;
5302 -> 4265;
5302 -> 4181;
5302 -> 4182;
5302 -> 5287;
5302 -> 4189;
5302 -> 4186;
5303 -> 4201;
5304 -> 5303;
5304 -> 4022;
5305 -> 5304;
5305 -> 4024;
5305 -> 4022;
5306 -> 4220;
5307 -> 5306;
5307 -> 4060;
5308 -> 5307;
5308 -> 4062;
5308 -> 4060;
5309 -> 4058;
5309 -> 4090;
5309 -> 4216;
5309 -> 5308;
5309 -> 4225;
5309 -> 4086;
5309 -> 4087;
5309 -> 5294;
5309 -> 4097;
5309 -> 4089;
5310 -> 4240;
5311 -> 5310;
5311 -> 4109;
5312 -> 5311;
5312 -> 4111;
5312 -> 4109;
5313 -> 4107;
5313 -> 4141;
5313 -> 4236;
5313 -> 5312;
5313 -> 4245;
5313 -> 4135;
5313 -> 4136;
5313 -> 5298;
5313 -> 4143;
5313 -> 4140;
5314 -> 4260;
5315 -> 5314;
5315 -> 4155;
5316 -> 5315;
5316 -> 4157;
5316 -> 4155;
5317 -> 4153;
5317 -> 4187;
5317 -> 4256;
5317 -> 5316;
5317 -> 4265;
5317 -> 4181;
5317 -> 4182;
5317 -> 5302;
5317 -> 4189;
5317 -> 4186;
5318 -> 4201;
5319 -> 5318;
5319 -> 4022;
5320 -> 5319;
5320 -> 4024;
5320 -> 4022;
5321 -> 4220;
5322 -> 5321;
5322 -> 4060;
5323 -> 5322;
5323 -> 4062;
5323 -> 4060;
5324 -> 4058;
5324 -> 4090;
5324 -> 4216;
5324 -> 5323;
5324 -> 4225;
5324 -> 4086;
5324 -> 4087;
5324 -> 5309;
5324 -> 4097;
5324 -> 4089;
5325 -> 4240;
5326 -> 5325;
5326 -> 4109;
5327 -> 5326;
5327 -> 4111;
5327 -> 4109;
5328 -> 4107;
5328 -> 4141;
5328 -> 4236;
5328 -> 5327;
5328 -> 4245;
5328 -> 4135;
5328 -> 4136;
5328 -> 5313;
5328 -> 4143;
5328 -> 4140;
5329 -> 4260;
5330 -> 5329;
5330 -> 4155;
5331 -> 5330;
5331 -> 4157;
5331 -> 4155;
5332 -> 4153;
5332 -> 4187;
5332 -> 4256;
5332 -> 5331;
5332 -> 4265;
5332 -> 4181;
5332 -> 4182;
5332 -> 5317;
5332 -> 4189;
5332 -> 4186;
5333 -> 4201;
5334 -> 5333;
5334 -> 4022;
5335 -> 5334;
5335 -> 4024;
5335 -> 4022;
5336 -> 4220;
5337 -> 5336;
5337 -> 4060;
5338 -> 5337;
5338 -> 4062;
5338 -> 4060;
5339 -> 4058;
5339 -> 4090;
5339 -> 4216;
5339 -> 5338;
5339 -> 4225;
5339 -> 4086;
5339 -> 4087;
5339 -> 5324;
5339 -> 4097;
5339 -> 4089;
5340 -> 4240;
5341 -> 5340;
5341 -> 4109;
5342 -> 5341;
5342 -> 4111;
5342 -> 4109;
5343 -> 4107;
5343 -> 4141;
5343 -> 4236;
5343 -> 5342;
5343 -> 4245;
5343 -> 4135;
5343 -> 4136;
5343 -> 5328;
5343 -> 4143;
5343 -> 4140;
5344 -> 4260;
5345 -> 5344;
5345 -> 4155;
5346 -> 5345;
5346 -> 4157;
5346 -> 4155;
5347 -> 4153;
5347 -> 4187;
5347 -> 4256;
5347 -> 5346;
5347 -> 4265;
5347 -> 4181;
5347 -> 4182;
5347 -> 5332;
5347 -> 4189;
5347 -> 4186;
5348 -> 4201;
5349 -> 5348;
5349 -> 4022;
5350 -> 5349;
5350 -> 4024;
5350 -> 4022;
5351 -> 4220;
5352 -> 5351;
5352 -> 4060;
5353 -> 5352;
5353 -> 4062;
5353 -> 4060;
5354 -> 4058;
5354 -> 4090;
5354 -> 4216;
5354 -> 5353;
5354 -> 4225;
5354 -> 4086;
5354 -> 4087;
5354 -> 5339;
5354 -> 4097;
5354 -> 4089;
5355 -> 4240;
5356 -> 5355;
5356 -> 4109;
5357 -> 5356;
5357 -> 4111;
5357 -> 4109;
5358 -> 4107;
5358 -> 4141;
5358 -> 4236;
5358 -> 5357;
5358 -> 4245;
5358 -> 4135;
5358 -> 4136;
5358 -> 5343;
5358 -> 4143;
5358 -> 4140;
5359 -> 4260;
5360 -> 5359;
5360 -> 4155;
5361 -> 5360;
5361 -> 4157;
5361 -> 4155;
5362 -> 4153;
5362 -> 4187;
5362 -> 4256;
5362 -> 5361;
5362 -> 4265;
5362 -> 4181;
5362 -> 4182;
5362 -> 5347;
5362 -> 4189;
5362 -> 4186;
5363 -> 4201;
5364 -> 5363;
5364 -> 4022;
5365 -> 5364;
5365 -> 4024;
5365 -> 4022;
5366 -> 4220;
5367 -> 5366;
5367 -> 4060;
5368 -> 5367;
5368 -> 4062;
5368 -> 4060;
5369 -> 4058;
5369 -> 4090;
5369 -> 4216;
5369 -> 5368;
5369 -> 4225;
5369 -> 4086;
5369 -> 4087;
5369 -> 5354;
5369 -> 4097;
5369 -> 4089;
5370 -> 4240;
5371 -> 5370;
5371 -> 4109;
5372 -> 5371;
5372 -> 4111;
5372 -> 4109;
5373 -> 4107;
5373 -> 4141;
5373 -> 4236;
5373 -> 5372;
5373 -> 4245;
5373 -> 4135;
5373 -> 4136;
5373 -> 5358;
5373 -> 4143;
5373 -> 4140;
5374 -> 4260;
5375 -> 5374;
5375 -> 4155;
5376 -> 5375;
5376 -> 4157;
5376 -> 4155;
5377 -> 4153;
5377 -> 4187;
5377 -> 4256;
5377 -> 5376;
5377 -> 4265;
5377 -> 4181;
5377 -> 4182;
5377 -> 5362;
5377 -> 4189;
5377 -> 4186;
5378 -> 4201;
5379 -> 5378;
5379 -> 4022;
5380 -> 5379;
5380 -> 4024;
5380 -> 4022;
5381 -> 4220;
5382 -> 5381;
5382 -> 4060;
5383 -> 5382;
5383 -> 4062;
5383 -> 4060;
5384 -> 4058;
5384 -> 4090;
5384 -> 4216;
5384 -> 5383;
5384 -> 4225;
5384 -> 4086;
5384 -> 4087;
5384 -> 5369;
5384 -> 4097;
5384 -> 4089;
5385 -> 4240;
5386 -> 5385;
5386 -> 4109;
5387 -> 5386;
5387 -> 4111;
5387 -> 4109;
5388 -> 4107;
5388 -> 4141;
5388 -> 4236;
5388 -> 5387;
5388 -> 4245;
5388 -> 4135;
5388 -> 4136;
5388 -> 5373;
5388 -> 4143;
5388 -> 4140;
5389 -> 4260;
5390 -> 5389;
5390 -> 4155;
5391 -> 5390;
5391 -> 4157;
5391 -> 4155;
5392 -> 4153;
5392 -> 4187;
5392 -> 4256;
5392 -> 5391;
5392 -> 4265;
5392 -> 4181;
5392 -> 4182;
5392 -> 5377;
5392 -> 4189;
5392 -> 4186;
5393 -> 4201;
5394 -> 5393;
5394 -> 4022;
5395 -> 5394;
5395 -> 4024;
5395 -> 4022;
5396 -> 4220;
5397 -> 5396;
5397 -> 4060;
5398 -> 5397;
5398 -> 4062;
5398 -> 4060;
5399 -> 4058;
5399 -> 4090;
5399 -> 4216;
5399 -> 5398;
5399 -> 4225;
5399 -> 4086;
5399 -> 4087;
5399 -> 5384;
5399 -> 4097;
5399 -> 4089;
5400 -> 4240;
5401 -> 5400;
5401 -> 4109;
5402 -> 5401;
5402 -> 4111;
5402 -> 4109;
5403 -> 4107;
5403 -> 4141;
5403 -> 4236;
5403 -> 5402;
5403 -> 4245;
5403 -> 4135;
5403 -> 4136;
5403 -> 5388;
5403 -> 4143;
5403 -> 4140;
5404 -> 4260;
5405 -> 5404;
5405 -> 4155;
5406 -> 5405;
5406 -> 4157;
5406 -> 4155;
5407 -> 4153;
5407 -> 4187;
5407 -> 4256;
5407 -> 5406;
5407 -> 4265;
5407 -> 4181;
5407 -> 4182;
5407 -> 5392;
5407 -> 4189;
5407 -> 4186;
5408 -> 4201;
5409 -> 5408;
5409 -> 4022;
5410 -> 5409;
5410 -> 4024;
5410 -> 4022;
5411 -> 4220;
5412 -> 5411;
5412 -> 4060;
5413 -> 5412;
5413 -> 4062;
5413 -> 4060;
5414 -> 4058;
5414 -> 4090;
5414 -> 4216;
5414 -> 5413;
5414 -> 4225;
5414 -> 4086;
5414 -> 4087;
5414 -> 5399;
5414 -> 4097;
5414 -> 4089;
5415 -> 4240;
5416 -> 5415;
5416 -> 4109;
5417 -> 5416;
5417 -> 4111;
5417 -> 4109;
5418 -> 4107;
5418 -> 4141;
5418 -> 4236;
5418 -> 5417;
5418 -> 4245;
5418 -> 4135;
5418 -> 4136;
5418 -> 5403;
5418 -> 4143;
5418 -> 4140;
5419 -> 4260;
5420 -> 5419;
5420 -> 4155;
5421 -> 5420;
5421 -> 4157;
5421 -> 4155;
5422 -> 4153;
5422 -> 4187;
5422 -> 4256;
5422 -> 5421;
5422 -> 4265;
5422 -> 4181;
5422 -> 4182;
5422 -> 5407;
5422 -> 4189;
5422 -> 4186;
5423 -> 4201;
5424 -> 5423;
5424 -> 4022;
5425 -> 5424;
5425 -> 4024;
5425 -> 4022;
5426 -> 4220;
5427 -> 5426;
5427 -> 4060;
5428 -> 5427;
5428 -> 4062;
5428 -> 4060;
5429 -> 4058;
5429 -> 4090;
5429 -> 4216;
5429 -> 5428;
5429 -> 4225;
5429 -> 4086;
5429 -> 4087;
5429 -> 5414;
5429 -> 4097;
5429 -> 4089;
5430 -> 4240;
5431 -> 5430;
5431 -> 4109;
5432 -> 5431;
5432 -> 4111;
5432 -> 4109;
5433 -> 4107;
5433 -> 4141;
5433 -> 4236;
5433 -> 5432;
5433 -> 4245;
5433 -> 4135;
5433 -> 4136;
5433 -> 5418;
5433 -> 4143;
5433 -> 4140;
5434 -> 4260;
5435 -> 5434;
5435 -> 4155;
5436 -> 5435;
5436 -> 4157;
5436 -> 4155;
5437 -> 4153;
5437 -> 4187;
5437 -> 4256;
5437 -> 5436;
5437 -> 4265;
5437 -> 4181;
5437 -> 4182;
5437 -> 5422;
5437 -> 4189;
5437 -> 4186;
5438 -> 4201;
5439 -> 5438;
5439 -> 4022;
5440 -> 5439;
5440 -> 4024;
5440 -> 4022;
5441 -> 4220;
5442 -> 5441;
5442 -> 4060;
5443 -> 5442;
5443 -> 4062;
5443 -> 4060;
5444 -> 4058;
5444 -> 4090;
5444 -> 4216;
5444 -> 5443;
5444 -> 4225;
5444 -> 4086;
5444 -> 4087;
5444 -> 5429;
5444 -> 4097;
5444 -> 4089;
5445 -> 4240;
5446 -> 5445;
5446 -> 4109;
5447 -> 5446;
5447 -> 4111;
5447 -> 4109;
5448 -> 4107;
5448 -> 4141;
5448 -> 4236;
5448 -> 5447;
5448 -> 4245;
5448 -> 4135;
5448 -> 4136;
5448 -> 5433;
5448 -> 4143;
5448 -> 4140;
5449 -> 4260;
5450 -> 5449;
5450 -> 4155;
5451 -> 5450;
5451 -> 4157;
5451 -> 4155;
5452 -> 4153;
5452 -> 4187;
5452 -> 4256;
5452 -> 5451;
5452 -> 4265;
5452 -> 4181;
5452 -> 4182;
5452 -> 5437;
5452 -> 4189;
5452 -> 4186;
5453 -> 4201;
5454 -> 5453;
5454 -> 4022;
5455 -> 5454;
5455 -> 4024;
5455 -> 4022;
5456 -> 4220;
5457 -> 5456;
5457 -> 4060;
5458 -> 5457;
5458 -> 4062;
5458 -> 4060;
5459 -> 4058;
5459 -> 4090;
5459 -> 4216;
5459 -> 5458;
5459 -> 4225;
5459 -> 4086;
5459 -> 4087;
5459 -> 5444;
5459 -> 4097;
5459 -> 4089;
5460 -> 4240;
5461 -> 5460;
5461 -> 4109;
5462 -> 5461;
5462 -> 4111;
5462 -> 4109;
5463 -> 4107;
5463 -> 4141;
5463 -> 4236;
5463 -> 5462;
5463 -> 4245;
5463 -> 4135;
5463 -> 4136;
5463 -> 5448;
5463 -> 4143;
5463 -> 4140;
5464 -> 4260;
5465 -> 5464;
5465 -> 4155;
5466 -> 5465;
5466 -> 4157;
5466 -> 4155;
5467 -> 4153;
5467 -> 4187;
5467 -> 4256;
5467 -> 5466;
5467 -> 4265;
5467 -> 4181;
5467 -> 4182;
5467 -> 5452;
5467 -> 4189;
5467 -> 4186;
5468 -> 4201;
5469 -> 5468;
5469 -> 4022;
5470 -> 5469;
5470 -> 4024;
5470 -> 4022;
5471 -> 4220;
5472 -> 5471;
5472 -> 4060;
5473 -> 5472;
5473 -> 4062;
5473 -> 4060;
5474 -> 4058;
5474 -> 4090;
5474 -> 4216;
5474 -> 5473;
5474 -> 4225;
5474 -> 4086;
5474 -> 4087;
5474 -> 5459;
5474 -> 4097;
5474 -> 4089;
5475 -> 4240;
5476 -> 5475;
5476 -> 4109;
5477 -> 5476;
5477 -> 4111;
5477 -> 4109;
5478 -> 4107;
5478 -> 4141;
5478 -> 4236;
5478 -> 5477;
5478 -> 4245;
5478 -> 4135;
5478 -> 4136;
5478 -> 5463;
5478 -> 4143;
5478 -> 4140;
5479 -> 4260;
5480 -> 5479;
5480 -> 4155;
5481 -> 5480;
5481 -> 4157;
5481 -> 4155;
5482 -> 4153;
5482 -> 4187;
5482 -> 4256;
5482 -> 5481;
5482 -> 4265;
5482 -> 4181;
5482 -> 4182;
5482 -> 5467;
5482 -> 4189;
5482 -> 4186;
5483 -> 4201;
5484 -> 5483;
5484 -> 4022;
5485 -> 5484;
5485 -> 4024;
5485 -> 4022;
5486 -> 4220;
5487 -> 5486;
5487 -> 4060;
5488 -> 5487;
5488 -> 4062;
5488 -> 4060;
5489 -> 4058;
5489 -> 4090;
5489 -> 4216;
5489 -> 5488;
5489 -> 4225;
5489 -> 4086;
5489 -> 4087;
5489 -> 5474;
5489 -> 4097;
5489 -> 4089;
5490 -> 4240;
5491 -> 5490;
5491 -> 4109;
5492 -> 5491;
5492 -> 4111;
5492 -> 4109;
5493 -> 4107;
5493 -> 4141;
5493 -> 4236;
5493 -> 5492;
5493 -> 4245;
5493 -> 4135;
5493 -> 4136;
5493 -> 5478;
5493 -> 4143;
5493 -> 4140;
5494 -> 4260;
5495 -> 5494;
5495 -> 4155;
5496 -> 5495;
5496 -> 4157;
5496 -> 4155;
5497 -> 4153;
5497 -> 4187;
5497 -> 4256;
5497 -> 5496;
5497 -> 4265;
5497 -> 4181;
5497 -> 4182;
5497 -> 5482;
5497 -> 4189;
5497 -> 4186;
5498 -> 4201;
5499 -> 5498;
5499 -> 4022;
5500 -> 5499;
5500 -> 4024;
5500 -> 4022;
5501 -> 4220;
5502 -> 5501;
5502 -> 4060;
5503 -> 5502;
5503 -> 4062;
5503 -> 4060;
5504 -> 4058;
5504 -> 4090;
5504 -> 4216;
5504 -> 5503;
5504 -> 4225;
5504 -> 4086;
5504 -> 4087;
5504 -> 5489;
5504 -> 4097;
5504 -> 4089;
5505 -> 4240;
5506 -> 5505;
5506 -> 4109;
5507 -> 5506;
5507 -> 4111;
5507 -> 4109;
5508 -> 4107;
5508 -> 4141;
5508 -> 4236;
5508 -> 5507;
5508 -> 4245;
5508 -> 4135;
5508 -> 4136;
5508 -> 5493;
5508 -> 4143;
5508 -> 4140;
5509 -> 4260;
5510 -> 5509;
5510 -> 4155;
5511 -> 5510;
5511 -> 4157;
5511 -> 4155;
5512 -> 4153;
5512 -> 4187;
5512 -> 4256;
5512 -> 5511;
5512 -> 4265;
5512 -> 4181;
5512 -> 4182;
5512 -> 5497;
5512 -> 4189;
5512 -> 4186;
5513 -> 4201;
5514 -> 5513;
5514 -> 4022;
5515 -> 5514;
5515 -> 4024;
5515 -> 4022;
5516 -> 4220;
5517 -> 5516;
5517 -> 4060;
5518 -> 5517;
5518 -> 4062;
5518 -> 4060;
5519 -> 4058;
5519 -> 4090;
5519 -> 4216;
5519 -> 5518;
5519 -> 4225;
5519 -> 4086;
5519 -> 4087;
5519 -> 5504;
5519 -> 4097;
5519 -> 4089;
5520 -> 4240;
5521 -> 5520;
5521 -> 4109;
5522 -> 5521;
5522 -> 4111;
5522 -> 4109;
5523 -> 4107;
5523 -> 4141;
5523 -> 4236;
5523 -> 5522;
5523 -> 4245;
5523 -> 4135;
5523 -> 4136;
5523 -> 5508;
5523 -> 4143;
5523 -> 4140;
5524 -> 4260;
5525 -> 5524;
5525 -> 4155;
5526 -> 5525;
5526 -> 4157;
5526 -> 4155;
5527 -> 4153;
5527 -> 4187;
5527 -> 4256;
5527 -> 5526;
5527 -> 4265;
5527 -> 4181;
5527 -> 4182;
5527 -> 5512;
5527 -> 4189;
5527 -> 4186;
5528 -> 4201;
5529 -> 5528;
5529 -> 4022;
5530 -> 5529;
5530 -> 4024;
5530 -> 4022;
5531 -> 4220;
5532 -> 5531;
5532 -> 4060;
5533 -> 5532;
5533 -> 4062;
5533 -> 4060;
5534 -> 4058;
5534 -> 4090;
5534 -> 4216;
5534 -> 5533;
5534 -> 4225;
5534 -> 4086;
5534 -> 4087;
5534 -> 5519;
5534 -> 4097;
5534 -> 4089;
5535 -> 4240;
5536 -> 5535;
5536 -> 4109;
5537 -> 5536;
5537 -> 4111;
5537 -> 4109;
5538 -> 4107;
5538 -> 4141;
5538 -> 4236;
5538 -> 5537;
5538 -> 4245;
5538 -> 4135;
5538 -> 4136;
5538 -> 5523;
5538 -> 4143;
5538 -> 4140;
5539 -> 4260;
5540 -> 5539;
5540 -> 4155;
5541 -> 5540;
5541 -> 4157;
5541 -> 4155;
5542 -> 4153;
5542 -> 4187;
5542 -> 4256;
5542 -> 5541;
5542 -> 4265;
5542 -> 4181;
5542 -> 4182;
5542 -> 5527;
5542 -> 4189;
5542 -> 4186;
5543 -> 4201;
5544 -> 5543;
5544 -> 4022;
5545 -> 5544;
5545 -> 4024;
5545 -> 4022;
5546 -> 4220;
5547 -> 5546;
5547 -> 4060;
5548 -> 5547;
5548 -> 4062;
5548 -> 4060;
5549 -> 4058;
5549 -> 4090;
5549 -> 4216;
5549 -> 5548;
5549 -> 4225;
5549 -> 4086;
5549 -> 4087;
5549 -> 5534;
5549 -> 4097;
5549 -> 4089;
5550 -> 4240;
5551 -> 5550;
5551 -> 4109;
5552 -> 5551;
5552 -> 4111;
5552 -> 4109;
5553 -> 4107;
5553 -> 4141;
5553 -> 4236;
5553 -> 5552;
5553 -> 4245;
5553 -> 4135;
5553 -> 4136;
5553 -> 5538;
5553 -> 4143;
5553 -> 4140;
5554 -> 4260;
5555 -> 5554;
5555 -> 4155;
5556 -> 5555;
5556 -> 4157;
5556 -> 4155;
5557 -> 4153;
5557 -> 4187;
5557 -> 4256;
5557 -> 5556;
5557 -> 4265;
5557 -> 4181;
5557 -> 4182;
5557 -> 5542;
5557 -> 4189;
5557 -> 4186;
5558 -> 4201;
5559 -> 5558;
5559 -> 4022;
5560 -> 5559;
5560 -> 4024;
5560 -> 4022;
5561 -> 4220;
5562 -> 5561;
5562 -> 4060;
5563 -> 5562;
5563 -> 4062;
5563 -> 4060;
5564 -> 4058;
5564 -> 4090;
5564 -> 4216;
5564 -> 5563;
5564 -> 4225;
5564 -> 4086;
5564 -> 4087;
5564 -> 5549;
5564 -> 4097;
5564 -> 4089;
5565 -> 4240;
5566 -> 5565;
5566 -> 4109;
5567 -> 5566;
5567 -> 4111;
5567 -> 4109;
5568 -> 4107;
5568 -> 4141;
5568 -> 4236;
5568 -> 5567;
5568 -> 4245;
5568 -> 4135;
5568 -> 4136;
5568 -> 5553;
5568 -> 4143;
5568 -> 4140;
5569 -> 4260;
5570 -> 5569;
5570 -> 4155;
5571 -> 5570;
5571 -> 4157;
5571 -> 4155;
5572 -> 4153;
5572 -> 4187;
5572 -> 4256;
5572 -> 5571;
5572 -> 4265;
5572 -> 4181;
5572 -> 4182;
5572 -> 5557;
5572 -> 4189;
5572 -> 4186;
5573 -> 4201;
5574 -> 5573;
5574 -> 4022;
5575 -> 5574;
5575 -> 4024;
5575 -> 4022;
5576 -> 4220;
5577 -> 5576;
5577 -> 4060;
5578 -> 5577;
5578 -> 4062;
5578 -> 4060;
5579 -> 4058;
5579 -> 4090;
5579 -> 4216;
5579 -> 5578;
5579 -> 4225;
5579 -> 4086;
5579 -> 4087;
5579 -> 5564;
5579 -> 4097;
5579 -> 4089;
5580 -> 4240;
5581 -> 5580;
5581 -> 4109;
5582 -> 5581;
5582 -> 4111;
5582 -> 4109;
5583 -> 4107;
5583 -> 4141;
5583 -> 4236;
5583 -> 5582;
5583 -> 4245;
5583 -> 4135;
5583 -> 4136;
5583 -> 5568;
5583 -> 4143;
5583 -> 4140;
5584 -> 4260;
5585 -> 5584;
5585 -> 4155;
5586 -> 5585;
5586 -> 4157;
5586 -> 4155;
5587 -> 4153;
5587 -> 4187;
5587 -> 4256;
5587 -> 5586;
5587 -> 4265;
5587 -> 4181;
5587 -> 4182;
5587 -> 5572;
5587 -> 4189;
5587 -> 4186;
5588 -> 4201;
5589 -> 5588;
5589 -> 4022;
5590 -> 5589;
5590 -> 4024;
5590 -> 4022;
5591 -> 4220;
5592 -> 5591;
5592 -> 4060;
5593 -> 5592;
5593 -> 4062;
5593 -> 4060;
5594 -> 4058;
5594 -> 4090;
5594 -> 4216;
5594 -> 5593;
5594 -> 4225;
5594 -> 4086;
5594 -> 4087;
5594 -> 5579;
5594 -> 4097;
5594 -> 4089;
5595 -> 4240;
5596 -> 5595;
5596 -> 4109;
5597 -> 5596;
5597 -> 4111;
5597 -> 4109;
5598 -> 4107;
5598 -> 4141;
5598 -> 4236;
5598 -> 5597;
5598 -> 4245;
5598 -> 4135;
5598 -> 4136;
5598 -> 5583;
5598 -> 4143;
5598 -> 4140;
5599 -> 4260;
5600 -> 5599;
5600 -> 4155;
5601 -> 5600;
5601 -> 4157;
5601 -> 4155;
5602 -> 4153;
5602 -> 4187;
5602 -> 4256;
5602 -> 5601;
5602 -> 4265;
5602 -> 4181;
5602 -> 4182;
5602 -> 5587;
5602 -> 4189;
5602 -> 4186;
5603 -> 4201;
5604 -> 5603;
5604 -> 4022;
5605 -> 5604;
5605 -> 4024;
5605 -> 4022;
5606 -> 4220;
5607 -> 5606;
5607 -> 4060;
5608 -> 5607;
5608 -> 4062;
5608 -> 4060;
5609 -> 4058;
5609 -> 4090;
5609 -> 4216;
5609 -> 5608;
5609 -> 4225;
5609 -> 4086;
5609 -> 4087;
5609 -> 5594;
5609 -> 4097;
5609 -> 4089;
5610 -> 4240;
5611 -> 5610;
5611 -> 4109;
5612 -> 5611;
5612 -> 4111;
5612 -> 4109;
5613 -> 4107;
5613 -> 4141;
5613 -> 4236;
5613 -> 5612;
5613 -> 4245;
5613 -> 4135;
5613 -> 4136;
5613 -> 5598;
5613 -> 4143;
5613 -> 4140;
5614 -> 4260;
5615 -> 5614;
5615 -> 4155;
5616 -> 5615;
5616 -> 4157;
5616 -> 4155;
5617 -> 4153;
5617 -> 4187;
5617 -> 4256;
5617 -> 5616;
5617 -> 4265;
5617 -> 4181;
5617 -> 4182;
5617 -> 5602;
5617 -> 4189;
5617 -> 4186;
5618 -> 4201;
5619 -> 5618;
5619 -> 4022;
5620 -> 5619;
5620 -> 4024;
5620 -> 4022;
5621 -> 4220;
5622 -> 5621;
5622 -> 4060;
5623 -> 5622;
5623 -> 4062;
5623 -> 4060;
5624 -> 4058;
5624 -> 4090;
5624 -> 4216;
5624 -> 5623;
5624 -> 4225;
5624 -> 4086;
5624 -> 4087;
5624 -> 5609;
5624 -> 4097;
5624 -> 4089;
5625 -> 4240;
5626 -> 5625;
5626 -> 4109;
5627 -> 5626;
5627 -> 4111;
5627 -> 4109;
5628 -> 4107;
5628 -> 4141;
5628 -> 4236;
5628 -> 5627;
5628 -> 4245;
5628 -> 4135;
5628 -> 4136;
5628 -> 5613;
5628 -> 4143;
5628 -> 4140;
5629 -> 4260;
5630 -> 5629;
5630 -> 4155;
5631 -> 5630;
5631 -> 4157;
5631 -> 4155;
5632 -> 4153;
5632 -> 4187;
5632 -> 4256;
5632 -> 5631;
5632 -> 4265;
5632 -> 4181;
5632 -> 4182;
5632 -> 5617;
5632 -> 4189;
5632 -> 4186;
5633 -> 4201;
5634 -> 5633;
5634 -> 4022;
5635 -> 5634;
5635 -> 4024;
5635 -> 4022;
5636 -> 4220;
5637 -> 5636;
5637 -> 4060;
5638 -> 5637;
5638 -> 4062;
5638 -> 4060;
5639 -> 4058;
5639 -> 4090;
5639 -> 4216;
5639 -> 5638;
5639 -> 4225;
5639 -> 4086;
5639 -> 4087;
5639 -> 5624;
5639 -> 4097;
5639 -> 4089;
5640 -> 4240;
5641 -> 5640;
5641 -> 4109;
5642 -> 5641;
5642 -> 4111;
5642 -> 4109;
5643 -> 4107;
5643 -> 4141;
5643 -> 4236;
5643 -> 5642;
5643 -> 4245;
5643 -> 4135;
5643 -> 4136;
5643 -> 5628;
5643 -> 4143;
5643 -> 4140;
5644 -> 4260;
5645 -> 5644;
5645 -> 4155;
5646 -> 5645;
5646 -> 4157;
5646 -> 4155;
5647 -> 4153;
5647 -> 4187;
5647 -> 4256;
5647 -> 5646;
5647 -> 4265;
5647 -> 4181;
5647 -> 4182;
5647 -> 5632;
5647 -> 4189;
5647 -> 4186;
5648 -> 4201;
5649 -> 5648;
5649 -> 4022;
5650 -> 5649;
5650 -> 4024;
5650 -> 4022;
5651 -> 4220;
5652 -> 5651;
5652 -> 4060;
5653 -> 5652;
5653 -> 4062;
5653 -> 4060;
5654 -> 4058;
5654 -> 4090;
5654 -> 4216;
5654 -> 5653;
5654 -> 4225;
5654 -> 4086;
5654 -> 4087;
5654 -> 5639;
5654 -> 4097;
5654 -> 4089;
5655 -> 4240;
5656 -> 5655;
5656 -> 4109;
5657 -> 5656;
5657 -> 4111;
5657 -> 4109;
5658 -> 4107;
5658 -> 4141;
5658 -> 4236;
5658 -> 5657;
5658 -> 4245;
5658 -> 4135;
5658 -> 4136;
5658 -> 5643;
5658 -> 4143;
5658 -> 4140;
5659 -> 4260;
5660 -> 5659;
5660 -> 4155;
5661 -> 5660;
5661 -> 4157;
5661 -> 4155;
5662 -> 4153;
5662 -> 4187;
5662 -> 4256;
5662 -> 5661;
5662 -> 4265;
5662 -> 4181;
5662 -> 4182;
5662 -> 5647;
5662 -> 4189;
5662 -> 4186;
5663 -> 4201;
5664 -> 5663;
5664 -> 4022;
5665 -> 5664;
5665 -> 4024;
5665 -> 4022;
5666 -> 4220;
5667 -> 5666;
5667 -> 4060;
5668 -> 5667;
5668 -> 4062;
5668 -> 4060;
5669 -> 4058;
5669 -> 4090;
5669 -> 4216;
5669 -> 5668;
5669 -> 4225;
5669 -> 4086;
5669 -> 4087;
5669 -> 5654;
5669 -> 4097;
5669 -> 4089;
5670 -> 4240;
5671 -> 5670;
5671 -> 4109;
5672 -> 5671;
5672 -> 4111;
5672 -> 4109;
5673 -> 4107;
5673 -> 4141;
5673 -> 4236;
5673 -> 5672;
5673 -> 4245;
5673 -> 4135;
5673 -> 4136;
5673 -> 5658;
5673 -> 4143;
5673 -> 4140;
5674 -> 4260;
5675 -> 5674;
5675 -> 4155;
5676 -> 5675;
5676 -> 4157;
5676 -> 4155;
5677 -> 4153;
5677 -> 4187;
5677 -> 4256;
5677 -> 5676;
5677 -> 4265;
5677 -> 4181;
5677 -> 4182;
5677 -> 5662;
5677 -> 4189;
5677 -> 4186;
5678 -> 4201;
5679 -> 5678;
5679 -> 4022;
5680 -> 5679;
5680 -> 4024;
5680 -> 4022;
5681 -> 4220;
5682 -> 5681;
5682 -> 4060;
5683 -> 5682;
5683 -> 4062;
5683 -> 4060;
5684 -> 4058;
5684 -> 4090;
5684 -> 4216;
5684 -> 5683;
5684 -> 4225;
5684 -> 4086;
5684 -> 4087;
5684 -> 5669;
5684 -> 4097;
5684 -> 4089;
5685 -> 4240;
5686 -> 5685;
5686 -> 4109;
5687 -> 5686;
5687 -> 4111;
5687 -> 4109;
5688 -> 4107;
5688 -> 4141;
5688 -> 4236;
5688 -> 5687;
5688 -> 4245;
5688 -> 4135;
5688 -> 4136;
5688 -> 5673;
5688 -> 4143;
5688 -> 4140;
5689 -> 4260;
5690 -> 5689;
5690 -> 4155;
5691 -> 5690;
5691 -> 4157;
5691 -> 4155;
5692 -> 4153;
5692 -> 4187;
5692 -> 4256;
5692 -> 5691;
5692 -> 4265;
5692 -> 4181;
5692 -> 4182;
5692 -> 5677;
5692 -> 4189;
5692 -> 4186;
5693 -> 4201;
5694 -> 5693;
5694 -> 4022;
5695 -> 5694;
5695 -> 4024;
5695 -> 4022;
5696 -> 4220;
5697 -> 5696;
5697 -> 4060;
5698 -> 5697;
5698 -> 4062;
5698 -> 4060;
5699 -> 4058;
5699 -> 4090;
5699 -> 4216;
5699 -> 5698;
5699 -> 4225;
5699 -> 4086;
5699 -> 4087;
5699 -> 5684;
5699 -> 4097;
5699 -> 4089;
5700 -> 4240;
5701 -> 5700;
5701 -> 4109;
5702 -> 5701;
5702 -> 4111;
5702 -> 4109;
5703 -> 4107;
5703 -> 4141;
5703 -> 4236;
5703 -> 5702;
5703 -> 4245;
5703 -> 4135;
5703 -> 4136;
5703 -> 5688;
5703 -> 4143;
5703 -> 4140;
5704 -> 4260;
5705 -> 5704;
5705 -> 4155;
5706 -> 5705;
5706 -> 4157;
5706 -> 4155;
5707 -> 4153;
5707 -> 4187;
5707 -> 4256;
5707 -> 5706;
5707 -> 4265;
5707 -> 4181;
5707 -> 4182;
5707 -> 5692;
5707 -> 4189;
5707 -> 4186;
5708 -> 4201;
5709 -> 5708;
5709 -> 4022;
5710 -> 5709;
5710 -> 4024;
5710 -> 4022;
5711 -> 4220;
5712 -> 5711;
5712 -> 4060;
5713 -> 5712;
5713 -> 4062;
5713 -> 4060;
5714 -> 4058;
5714 -> 4090;
5714 -> 4216;
5714 -> 5713;
5714 -> 4225;
5714 -> 4086;
5714 -> 4087;
5714 -> 5699;
5714 -> 4097;
5714 -> 4089;
5715 -> 4240;
5716 -> 5715;
5716 -> 4109;
5717 -> 5716;
5717 -> 4111;
5717 -> 4109;
5718 -> 4107;
5718 -> 4141;
5718 -> 4236;
5718 -> 5717;
5718 -> 4245;
5718 -> 4135;
5718 -> 4136;
5718 -> 5703;
5718 -> 4143;
5718 -> 4140;
5719 -> 4260;
5720 -> 5719;
5720 -> 4155;
5721 -> 5720;
5721 -> 4157;
5721 -> 4155;
5722 -> 4153;
5722 -> 4187;
5722 -> 4256;
5722 -> 5721;
5722 -> 4265;
5722 -> 4181;
5722 -> 4182;
5722 -> 5707;
5722 -> 4189;
5722 -> 4186;
5723 -> 4201;
5724 -> 5723;
5724 -> 4022;
5725 -> 5724;
5725 -> 4024;
5725 -> 4022;
5726 -> 4220;
5727 -> 5726;
5727 -> 4060;
5728 -> 5727;
5728 -> 4062;
5728 -> 4060;
5729 -> 4058;
5729 -> 4090;
5729 -> 4216;
5729 -> 5728;
5729 -> 4225;
5729 -> 4086;
5729 -> 4087;
5729 -> 5714;
5729 -> 4097;
5729 -> 4089;
5730 -> 4240;
5731 -> 5730;
5731 -> 4109;
5732 -> 5731;
5732 -> 4111;
5732 -> 4109;
5733 -> 4107;
5733 -> 4141;
5733 -> 4236;
5733 -> 5732;
5733 -> 4245;
5733 -> 4135;
5733 -> 4136;
5733 -> 5718;
5733 -> 4143;
5733 -> 4140;
5734 -> 4260;
5735 -> 5734;
5735 -> 4155;
5736 -> 5735;
5736 -> 4157;
5736 -> 4155;
5737 -> 4153;
5737 -> 4187;
5737 -> 4256;
5737 -> 5736;
5737 -> 4265;
5737 -> 4181;
5737 -> 4182;
5737 -> 5722;
5737 -> 4189;
5737 -> 4186;
5738 -> 4201;
5739 -> 5738;
5739 -> 4022;
5740 -> 5739;
5740 -> 4024;
5740 -> 4022;
5741 -> 4220;
5742 -> 5741;
5742 -> 4060;
5743 -> 5742;
5743 -> 4062;
5743 -> 4060;
5744 -> 4058;
5744 -> 4090;
5744 -> 4216;
5744 -> 5743;
5744 -> 4225;
5744 -> 4086;
5744 -> 4087;
5744 -> 5729;
5744 -> 4097;
5744 -> 4089;
5745 -> 4240;
5746 -> 5745;
5746 -> 4109;
5747 -> 5746;
5747 -> 4111;
5747 -> 4109;
5748 -> 4107;
5748 -> 4141;
5748 -> 4236;
5748 -> 5747;
5748 -> 4245;
5748 -> 4135;
5748 -> 4136;
5748 -> 5733;
5748 -> 4143;
5748 -> 4140;
5749 -> 4260;
5750 -> 5749;
5750 -> 4155;
5751 -> 5750;
5751 -> 4157;
5751 -> 4155;
5752 -> 4153;
5752 -> 4187;
5752 -> 4256;
5752 -> 5751;
5752 -> 4265;
5752 -> 4181;
5752 -> 4182;
5752 -> 5737;
5752 -> 4189;
5752 -> 4186;
5753 -> 4201;
5754 -> 5753;
5754 -> 4022;
5755 -> 5754;
5755 -> 4024;
5755 -> 4022;
5756 -> 4220;
5757 -> 5756;
5757 -> 4060;
5758 -> 5757;
5758 -> 4062;
5758 -> 4060;
5759 -> 4058;
5759 -> 4090;
5759 -> 4216;
5759 -> 5758;
5759 -> 4225;
5759 -> 4086;
5759 -> 4087;
5759 -> 5744;
5759 -> 4097;
5759 -> 4089;
5760 -> 4240;
5761 -> 5760;
5761 -> 4109;
5762 -> 5761;
5762 -> 4111;
5762 -> 4109;
5763 -> 4107;
5763 -> 4141;
5763 -> 4236;
5763 -> 5762;
5763 -> 4245;
5763 -> 4135;
5763 -> 4136;
5763 -> 5748;
5763 -> 4143;
5763 -> 4140;
5764 -> 4260;
5765 -> 5764;
5765 -> 4155;
5766 -> 5765;
5766 -> 4157;
5766 -> 4155;
5767 -> 4153;
5767 -> 4187;
5767 -> 4256;
5767 -> 5766;
5767 -> 4265;
5767 -> 4181;
5767 -> 4182;
5767 -> 5752;
5767 -> 4189;
5767 -> 4186;
5768 -> 4201;
5769 -> 5768;
5769 -> 4022;
5770 -> 5769;
5770 -> 4024;
5770 -> 4022;
5771 -> 4220;
5772 -> 5771;
5772 -> 4060;
5773 -> 5772;
5773 -> 4062;
5773 -> 4060;
5774 -> 4058;
5774 -> 4090;
5774 -> 4216;
5774 -> 5773;
5774 -> 4225;
5774 -> 4086;
5774 -> 4087;
5774 -> 5759;
5774 -> 4097;
5774 -> 4089;
5775 -> 4240;
5776 -> 5775;
5776 -> 4109;
5777 -> 5776;
5777 -> 4111;
5777 -> 4109;
5778 -> 4107;
5778 -> 4141;
5778 -> 4236;
5778 -> 5777;
5778 -> 4245;
5778 -> 4135;
5778 -> 4136;
5778 -> 5763;
5778 -> 4143;
5778 -> 4140;
5779 -> 4260;
5780 -> 5779;
5780 -> 4155;
5781 -> 5780;
5781 -> 4157;
5781 -> 4155;
5782 -> 4153;
5782 -> 4187;
5782 -> 4256;
5782 -> 5781;
5782 -> 4265;
5782 -> 4181;
5782 -> 4182;
5782 -> 5767;
5782 -> 4189;
5782 -> 4186;
5783 -> 4201;
5784 -> 5783;
5784 -> 4022;
5785 -> 5784;
5785 -> 4024;
5785 -> 4022;
5786 -> 4220;
5787 -> 5786;
5787 -> 4060;
5788 -> 5787;
5788 -> 4062;
5788 -> 4060;
5789 -> 4058;
5789 -> 4090;
5789 -> 4216;
5789 -> 5788;
5789 -> 4225;
5789 -> 4086;
5789 -> 4087;
5789 -> 5774;
5789 -> 4097;
5789 -> 4089;
5790 -> 4240;
5791 -> 5790;
5791 -> 4109;
5792 -> 5791;
5792 -> 4111;
5792 -> 4109;
5793 -> 4107;
5793 -> 4141;
5793 -> 4236;
5793 -> 5792;
5793 -> 4245;
5793 -> 4135;
5793 -> 4136;
5793 -> 5778;
5793 -> 4143;
5793 -> 4140;
5794 -> 4260;
5795 -> 5794;
5795 -> 4155;
5796 -> 5795;
5796 -> 4157;
5796 -> 4155;
5797 -> 4153;
5797 -> 4187;
5797 -> 4256;
5797 -> 5796;
5797 -> 4265;
5797 -> 4181;
5797 -> 4182;
5797 -> 5782;
5797 -> 4189;
5797 -> 4186;
5798 -> 4201;
5799 -> 5798;
5799 -> 4022;
5800 -> 5799;
5800 -> 4024;
5800 -> 4022;
5801 -> 4220;
5802 -> 5801;
5802 -> 4060;
5803 -> 5802;
5803 -> 4062;
5803 -> 4060;
5804 -> 4058;
5804 -> 4090;
5804 -> 4216;
5804 -> 5803;
5804 -> 4225;
5804 -> 4086;
5804 -> 4087;
5804 -> 5789;
5804 -> 4097;
5804 -> 4089;
5805 -> 4240;
5806 -> 5805;
5806 -> 4109;
5807 -> 5806;
5807 -> 4111;
5807 -> 4109;
5808 -> 4107;
5808 -> 4141;
5808 -> 4236;
5808 -> 5807;
5808 -> 4245;
5808 -> 4135;
5808 -> 4136;
5808 -> 5793;
5808 -> 4143;
5808 -> 4140;
5809 -> 4260;
5810 -> 5809;
5810 -> 4155;
5811 -> 5810;
5811 -> 4157;
5811 -> 4155;
5812 -> 4153;
5812 -> 4187;
5812 -> 4256;
5812 -> 5811;
5812 -> 4265;
5812 -> 4181;
5812 -> 4182;
5812 -> 5797;
5812 -> 4189;
5812 -> 4186;
5813 -> 4201;
5814 -> 5813;
5814 -> 4022;
5815 -> 5814;
5815 -> 4024;
5815 -> 4022;
5816 -> 4220;
5817 -> 5816;
5817 -> 4060;
5818 -> 5817;
5818 -> 4062;
5818 -> 4060;
5819 -> 4058;
5819 -> 4090;
5819 -> 4216;
5819 -> 5818;
5819 -> 4225;
5819 -> 4086;
5819 -> 4087;
5819 -> 5804;
5819 -> 4097;
5819 -> 4089;
5820 -> 4240;
5821 -> 5820;
5821 -> 4109;
5822 -> 5821;
5822 -> 4111;
5822 -> 4109;
5823 -> 4107;
5823 -> 4141;
5823 -> 4236;
5823 -> 5822;
5823 -> 4245;
5823 -> 4135;
5823 -> 4136;
5823 -> 5808;
5823 -> 4143;
5823 -> 4140;
5824 -> 4260;
5825 -> 5824;
5825 -> 4155;
5826 -> 5825;
5826 -> 4157;
5826 -> 4155;
5827 -> 4153;
5827 -> 4187;
5827 -> 4256;
5827 -> 5826;
5827 -> 4265;
5827 -> 4181;
5827 -> 4182;
5827 -> 5812;
5827 -> 4189;
5827 -> 4186;
5828 -> 4201;
5829 -> 5828;
5829 -> 4022;
5830 -> 5829;
5830 -> 4024;
5830 -> 4022;
5831 -> 4220;
5832 -> 5831;
5832 -> 4060;
5833 -> 5832;
5833 -> 4062;
5833 -> 4060;
5834 -> 4058;
5834 -> 4090;
5834 -> 4216;
5834 -> 5833;
5834 -> 4225;
5834 -> 4086;
5834 -> 4087;
5834 -> 5819;
5834 -> 4097;
5834 -> 4089;
5835 -> 4240;
5836 -> 5835;
5836 -> 4109;
5837 -> 5836;
5837 -> 4111;
5837 -> 4109;
5838 -> 4107;
5838 -> 4141;
5838 -> 4236;
5838 -> 5837;
5838 -> 4245;
5838 -> 4135;
5838 -> 4136;
5838 -> 5823;
5838 -> 4143;
5838 -> 4140;
5839 -> 4260;
5840 -> 5839;
5840 -> 4155;
5841 -> 5840;
5841 -> 4157;
5841 -> 4155;
5842 -> 4153;
5842 -> 4187;
5842 -> 4256;
5842 -> 5841;
5842 -> 4265;
5842 -> 4181;
5842 -> 4182;
5842 -> 5827;
5842 -> 4189;
5842 -> 4186;
5843 -> 4201;
5844 -> 5843;
5844 -> 4022;
5845 -> 5844;
5845 -> 4024;
5845 -> 4022;
5846 -> 4220;
5847 -> 5846;
5847 -> 4060;
5848 -> 5847;
5848 -> 4062;
5848 -> 4060;
5849 -> 4058;
5849 -> 4090;
5849 -> 4216;
5849 -> 5848;
5849 -> 4225;
5849 -> 4086;
5849 -> 4087;
5849 -> 5834;
5849 -> 4097;
5849 -> 4089;
5850 -> 4240;
5851 -> 5850;
5851 -> 4109;
5852 -> 5851;
5852 -> 4111;
5852 -> 4109;
5853 -> 4107;
5853 -> 4141;
5853 -> 4236;
5853 -> 5852;
5853 -> 4245;
5853 -> 4135;
5853 -> 4136;
5853 -> 5838;
5853 -> 4143;
5853 -> 4140;
5854 -> 4260;
5855 -> 5854;
5855 -> 4155;
5856 -> 5855;
5856 -> 4157;
5856 -> 4155;
5857 -> 4153;
5857 -> 4187;
5857 -> 4256;
5857 -> 5856;
5857 -> 4265;
5857 -> 4181;
5857 -> 4182;
5857 -> 5842;
5857 -> 4189;
5857 -> 4186;
5858 -> 4201;
5859 -> 5858;
5859 -> 4022;
5860 -> 5859;
5860 -> 4024;
5860 -> 4022;
5861 -> 4220;
5862 -> 5861;
5862 -> 4060;
5863 -> 5862;
5863 -> 4062;
5863 -> 4060;
5864 -> 4058;
5864 -> 4090;
5864 -> 4216;
5864 -> 5863;
5864 -> 4225;
5864 -> 4086;
5864 -> 4087;
5864 -> 5849;
5864 -> 4097;
5864 -> 4089;
5865 -> 4240;
5866 -> 5865;
5866 -> 4109;
5867 -> 5866;
5867 -> 4111;
5867 -> 4109;
5868 -> 4107;
5868 -> 4141;
5868 -> 4236;
5868 -> 5867;
5868 -> 4245;
5868 -> 4135;
5868 -> 4136;
5868 -> 5853;
5868 -> 4143;
5868 -> 4140;
5869 -> 4260;
5870 -> 5869;
5870 -> 4155;
5871 -> 5870;
5871 -> 4157;
5871 -> 4155;
5872 -> 4153;
5872 -> 4187;
5872 -> 4256;
5872 -> 5871;
5872 -> 4265;
5872 -> 4181;
5872 -> 4182;
5872 -> 5857;
5872 -> 4189;
5872 -> 4186;
5873 -> 4201;
5874 -> 5873;
5874 -> 4022;
5875 -> 5874;
5875 -> 4024;
5875 -> 4022;
5876 -> 4220;
5877 -> 5876;
5877 -> 4060;
5878 -> 5877;
5878 -> 4062;
5878 -> 4060;
5879 -> 4058;
5879 -> 4090;
5879 -> 4216;
5879 -> 5878;
5879 -> 4225;
5879 -> 4086;
5879 -> 4087;
5879 -> 5864;
5879 -> 4097;
5879 -> 4089;
5880 -> 4240;
5881 -> 5880;
5881 -> 4109;
5882 -> 5881;
5882 -> 4111;
5882 -> 4109;
5883 -> 4107;
5883 -> 4141;
5883 -> 4236;
5883 -> 5882;
5883 -> 4245;
5883 -> 4135;
5883 -> 4136;
5883 -> 5868;
5883 -> 4143;
5883 -> 4140;
5884 -> 4260;
5885 -> 5884;
5885 -> 4155;
5886 -> 5885;
5886 -> 4157;
5886 -> 4155;
5887 -> 4153;
5887 -> 4187;
5887 -> 4256;
5887 -> 5886;
5887 -> 4265;
5887 -> 4181;
5887 -> 4182;
5887 -> 5872;
5887 -> 4189;
5887 -> 4186;
5888 -> 4201;
5889 -> 5888;
5889 -> 4022;
5890 -> 5889;
5890 -> 4024;
5890 -> 4022;
5891 -> 4220;
5892 -> 5891;
5892 -> 4060;
5893 -> 5892;
5893 -> 4062;
5893 -> 4060;
5894 -> 4058;
5894 -> 4090;
5894 -> 4216;
5894 -> 5893;
5894 -> 4225;
5894 -> 4086;
5894 -> 4087;
5894 -> 5879;
5894 -> 4097;
5894 -> 4089;
5895 -> 4240;
5896 -> 5895;
5896 -> 4109;
5897 -> 5896;
5897 -> 4111;
5897 -> 4109;
5898 -> 4107;
5898 -> 4141;
5898 -> 4236;
5898 -> 5897;
5898 -> 4245;
5898 -> 4135;
5898 -> 4136;
5898 -> 5883;
5898 -> 4143;
5898 -> 4140;
5899 -> 4260;
5900 -> 5899;
5900 -> 4155;
5901 -> 5900;
5901 -> 4157;
5901 -> 4155;
5902 -> 4153;
5902 -> 4187;
5902 -> 4256;
5902 -> 5901;
5902 -> 4265;
5902 -> 4181;
5902 -> 4182;
5902 -> 5887;
5902 -> 4189;
5902 -> 4186;
5903 -> 4201;
5904 -> 5903;
5904 -> 4022;
5905 -> 5904;
5905 -> 4024;
5905 -> 4022;
5906 -> 4220;
5907 -> 5906;
5907 -> 4060;
5908 -> 5907;
5908 -> 4062;
5908 -> 4060;
5909 -> 4058;
5909 -> 4090;
5909 -> 4216;
5909 -> 5908;
5909 -> 4225;
5909 -> 4086;
5909 -> 4087;
5909 -> 5894;
5909 -> 4097;
5909 -> 4089;
5910 -> 4240;
5911 -> 5910;
5911 -> 4109;
5912 -> 5911;
5912 -> 4111;
5912 -> 4109;
5913 -> 4107;
5913 -> 4141;
5913 -> 4236;
5913 -> 5912;
5913 -> 4245;
5913 -> 4135;
5913 -> 4136;
5913 -> 5898;
5913 -> 4143;
5913 -> 4140;
5914 -> 4260;
5915 -> 5914;
5915 -> 4155;
5916 -> 5915;
5916 -> 4157;
5916 -> 4155;
5917 -> 4153;
5917 -> 4187;
5917 -> 4256;
5917 -> 5916;
5917 -> 4265;
5917 -> 4181;
5917 -> 4182;
5917 -> 5902;
5917 -> 4189;
5917 -> 4186;
5918 -> 4201;
5919 -> 5918;
5919 -> 4022;
5920 -> 5919;
5920 -> 4024;
5920 -> 4022;
5921 -> 4220;
5922 -> 5921;
5922 -> 4060;
5923 -> 5922;
5923 -> 4062;
5923 -> 4060;
5924 -> 4058;
5924 -> 4090;
5924 -> 4216;
5924 -> 5923;
5924 -> 4225;
5924 -> 4086;
5924 -> 4087;
5924 -> 5909;
5924 -> 4097;
5924 -> 4089;
5925 -> 4240;
5926 -> 5925;
5926 -> 4109;
5927 -> 5926;
5927 -> 4111;
5927 -> 4109;
5928 -> 4107;
5928 -> 4141;
5928 -> 4236;
5928 -> 5927;
5928 -> 4245;
5928 -> 4135;
5928 -> 4136;
5928 -> 5913;
5928 -> 4143;
5928 -> 4140;
5929 -> 4260;
5930 -> 5929;
5930 -> 4155;
5931 -> 5930;
5931 -> 4157;
5931 -> 4155;
5932 -> 4153;
5932 -> 4187;
5932 -> 4256;
5932 -> 5931;
5932 -> 4265;
5932 -> 4181;
5932 -> 4182;
5932 -> 5917;
5932 -> 4189;
5932 -> 4186;
5933 -> 4201;
5934 -> 5933;
5934 -> 4022;
5935 -> 5934;
5935 -> 4024;
5935 -> 4022;
5936 -> 4220;
5937 -> 5936;
5937 -> 4060;
5938 -> 5937;
5938 -> 4062;
5938 -> 4060;
5939 -> 4058;
5939 -> 4090;
5939 -> 4216;
5939 -> 5938;
5939 -> 4225;
5939 -> 4086;
5939 -> 4087;
5939 -> 5924;
5939 -> 4097;
5939 -> 4089;
5940 -> 4240;
5941 -> 5940;
5941 -> 4109;
5942 -> 5941;
5942 -> 4111;
5942 -> 4109;
5943 -> 4107;
5943 -> 4141;
5943 -> 4236;
5943 -> 5942;
5943 -> 4245;
5943 -> 4135;
5943 -> 4136;
5943 -> 5928;
5943 -> 4143;
5943 -> 4140;
5944 -> 4260;
5945 -> 5944;
5945 -> 4155;
5946 -> 5945;
5946 -> 4157;
5946 -> 4155;
5947 -> 4153;
5947 -> 4187;
5947 -> 4256;
5947 -> 5946;
5947 -> 4265;
5947 -> 4181;
5947 -> 4182;
5947 -> 5932;
5947 -> 4189;
5947 -> 4186;
5948 -> 4201;
5949 -> 5948;
5949 -> 4022;
5950 -> 5949;
5950 -> 4024;
5950 -> 4022;
5951 -> 4220;
5952 -> 5951;
5952 -> 4060;
5953 -> 5952;
5953 -> 4062;
5953 -> 4060;
5954 -> 4058;
5954 -> 4090;
5954 -> 4216;
5954 -> 5953;
5954 -> 4225;
5954 -> 4086;
5954 -> 4087;
5954 -> 5939;
5954 -> 4097;
5954 -> 4089;
5955 -> 4240;
5956 -> 5955;
5956 -> 4109;
5957 -> 5956;
5957 -> 4111;
5957 -> 4109;
5958 -> 4107;
5958 -> 4141;
5958 -> 4236;
5958 -> 5957;
5958 -> 4245;
5958 -> 4135;
5958 -> 4136;
5958 -> 5943;
5958 -> 4143;
5958 -> 4140;
5959 -> 4260;
5960 -> 5959;
5960 -> 4155;
5961 -> 5960;
5961 -> 4157;
5961 -> 4155;
5962 -> 4153;
5962 -> 4187;
5962 -> 4256;
5962 -> 5961;
5962 -> 4265;
5962 -> 4181;
5962 -> 4182;
5962 -> 5947;
5962 -> 4189;
5962 -> 4186;
5963 -> 4201;
5964 -> 5963;
5964 -> 4022;
5965 -> 5964;
5965 -> 4024;
5965 -> 4022;
5966 -> 4220;
5967 -> 5966;
5967 -> 4060;
5968 -> 5967;
5968 -> 4062;
5968 -> 4060;
5969 -> 4058;
5969 -> 4090;
5969 -> 4216;
5969 -> 5968;
5969 -> 4225;
5969 -> 4086;
5969 -> 4087;
5969 -> 5954;
5969 -> 4097;
5969 -> 4089;
5970 -> 4240;
5971 -> 5970;
5971 -> 4109;
5972 -> 5971;
5972 -> 4111;
5972 -> 4109;
5973 -> 4107;
5973 -> 4141;
5973 -> 4236;
5973 -> 5972;
5973 -> 4245;
5973 -> 4135;
5973 -> 4136;
5973 -> 5958;
5973 -> 4143;
5973 -> 4140;
5974 -> 4260;
5975 -> 5974;
5975 -> 4155;
5976 -> 5975;
5976 -> 4157;
5976 -> 4155;
5977 -> 4153;
5977 -> 4187;
5977 -> 4256;
5977 -> 5976;
5977 -> 4265;
5977 -> 4181;
5977 -> 4182;
5977 -> 5962;
5977 -> 4189;
5977 -> 4186;
5978 -> 4201;
5979 -> 5978;
5979 -> 4022;
5980 -> 5979;
5980 -> 4024;
5980 -> 4022;
5981 -> 4220;
5982 -> 5981;
5982 -> 4060;
5983 -> 5982;
5983 -> 4062;
5983 -> 4060;
5984 -> 4058;
5984 -> 4090;
5984 -> 4216;
5984 -> 5983;
5984 -> 4225;
5984 -> 4086;
5984 -> 4087;
5984 -> 5969;
5984 -> 4097;
5984 -> 4089;
5985 -> 4240;
5986 -> 5985;
5986 -> 4109;
5987 -> 5986;
5987 -> 4111;
5987 -> 4109;
5988 -> 4107;
5988 -> 4141;
5988 -> 4236;
5988 -> 5987;
5988 -> 4245;
5988 -> 4135;
5988 -> 4136;
5988 -> 5973;
5988 -> 4143;
5988 -> 4140;
5989 -> 4260;
5990 -> 5989;
5990 -> 4155;
5991 -> 5990;
5991 -> 4157;
5991 -> 4155;
5992 -> 4153;
5992 -> 4187;
5992 -> 4256;
5992 -> 5991;
5992 -> 4265;
5992 -> 4181;
5992 -> 4182;
5992 -> 5977;
5992 -> 4189;
5992 -> 4186;
5993 -> 4201;
5994 -> 5993;
5994 -> 4022;
5995 -> 5994;
5995 -> 4024;
5995 -> 4022;
5996 -> 4220;
5997 -> 5996;
5997 -> 4060;
5998 -> 5997;
5998 -> 4062;
5998 -> 4060;
5999 -> 4058;
5999 -> 4090;
5999 -> 4216;
5999 -> 5998;
5999 -> 4225;
5999 -> 4086;
5999 -> 4087;
5999 -> 5984;
5999 -> 4097;
5999 -> 4089;
6000 -> 4240;
6001 -> 6000;
6001 -> 4109;
6002 -> 6001;
6002 -> 4111;
6002 -> 4109;
6003 -> 4107;
6003 -> 4141;
6003 -> 4236;
6003 -> 6002;
6003 -> 4245;
6003 -> 4135;
6003 -> 4136;
6003 -> 5988;
6003 -> 4143;
6003 -> 4140;
6004 -> 4260;
6005 -> 6004;
6005 -> 4155;
6006 -> 6005;
6006 -> 4157;
6006 -> 4155;
6007 -> 4153;
6007 -> 4187;
6007 -> 4256;
6007 -> 6006;
6007 -> 4265;
6007 -> 4181;
6007 -> 4182;
6007 -> 5992;
6007 -> 4189;
6007 -> 4186;
6008 -> 4201;
6009 -> 6008;
6009 -> 4022;
6010 -> 6009;
6010 -> 4024;
6010 -> 4022;
6011 -> 4220;
6012 -> 6011;
6012 -> 4060;
6013 -> 6012;
6013 -> 4062;
6013 -> 4060;
6014 -> 4058;
6014 -> 4090;
6014 -> 4216;
6014 -> 6013;
6014 -> 4225;
6014 -> 4086;
6014 -> 4087;
6014 -> 5999;
6014 -> 4097;
6014 -> 4089;
6015 -> 4240;
6016 -> 6015;
6016 -> 4109;
6017 -> 6016;
6017 -> 4111;
6017 -> 4109;
6018 -> 4107;
6018 -> 4141;
6018 -> 4236;
6018 -> 6017;
6018 -> 4245;
6018 -> 4135;
6018 -> 4136;
6018 -> 6003;
6018 -> 4143;
6018 -> 4140;
6019 -> 4260;
6020 -> 6019;
6020 -> 4155;
6021 -> 6020;
6021 -> 4157;
6021 -> 4155;
6022 -> 4153;
6022 -> 4187;
6022 -> 4256;
6022 -> 6021;
6022 -> 4265;
6022 -> 4181;
6022 -> 4182;
6022 -> 6007;
6022 -> 4189;
6022 -> 4186;
6023 -> 4201;
6024 -> 6023;
6024 -> 4022;
6025 -> 6024;
6025 -> 4024;
6025 -> 4022;
6026 -> 4220;
6027 -> 6026;
6027 -> 4060;
6028 -> 6027;
6028 -> 4062;
6028 -> 4060;
6029 -> 4058;
6029 -> 4090;
6029 -> 4216;
6029 -> 6028;
6029 -> 4225;
6029 -> 4086;
6029 -> 4087;
6029 -> 6014;
6029 -> 4097;
6029 -> 4089;
6030 -> 4240;
6031 -> 6030;
6031 -> 4109;
6032 -> 6031;
6032 -> 4111;
6032 -> 4109;
6033 -> 4107;
6033 -> 4141;
6033 -> 4236;
6033 -> 6032;
6033 -> 4245;
6033 -> 4135;
6033 -> 4136;
6033 -> 6018;
6033 -> 4143;
6033 -> 4140;
6034 -> 4260;
6035 -> 6034;
6035 -> 4155;
6036 -> 6035;
6036 -> 4157;
6036 -> 4155;
6037 -> 4153;
6037 -> 4187;
6037 -> 4256;
6037 -> 6036;
6037 -> 4265;
6037 -> 4181;
6037 -> 4182;
6037 -> 6022;
6037 -> 4189;
6037 -> 4186;
6038 -> 4201;
6039 -> 6038;
6039 -> 4022;
6040 -> 6039;
6040 -> 4024;
6040 -> 4022;
6041 -> 4220;
6042 -> 6041;
6042 -> 4060;
6043 -> 6042;
6043 -> 4062;
6043 -> 4060;
6044 -> 4058;
6044 -> 4090;
6044 -> 4216;
6044 -> 6043;
6044 -> 4225;
6044 -> 4086;
6044 -> 4087;
6044 -> 6029;
6044 -> 4097;
6044 -> 4089;
6045 -> 4240;
6046 -> 6045;
6046 -> 4109;
6047 -> 6046;
6047 -> 4111;
6047 -> 4109;
6048 -> 4107;
6048 -> 4141;
6048 -> 4236;
6048 -> 6047;
6048 -> 4245;
6048 -> 4135;
6048 -> 4136;
6048 -> 6033;
6048 -> 4143;
6048 -> 4140;
6049 -> 4260;
6050 -> 6049;
6050 -> 4155;
6051 -> 6050;
6051 -> 4157;
6051 -> 4155;
6052 -> 4153;
6052 -> 4187;
6052 -> 4256;
6052 -> 6051;
6052 -> 4265;
6052 -> 4181;
6052 -> 4182;
6052 -> 6037;
6052 -> 4189;
6052 -> 4186;
6053 -> 4201;
6054 -> 6053;
6054 -> 4022;
6055 -> 6054;
6055 -> 4024;
6055 -> 4022;
6056 -> 4220;
6057 -> 6056;
6057 -> 4060;
6058 -> 6057;
6058 -> 4062;
6058 -> 4060;
6059 -> 4058;
6059 -> 4090;
6059 -> 4216;
6059 -> 6058;
6059 -> 4225;
6059 -> 4086;
6059 -> 4087;
6059 -> 6044;
6059 -> 4097;
6059 -> 4089;
6060 -> 4240;
6061 -> 6060;
6061 -> 4109;
6062 -> 6061;
6062 -> 4111;
6062 -> 4109;
6063 -> 4107;
6063 -> 4141;
6063 -> 4236;
6063 -> 6062;
6063 -> 4245;
6063 -> 4135;
6063 -> 4136;
6063 -> 6048;
6063 -> 4143;
6063 -> 4140;
6064 -> 4260;
6065 -> 6064;
6065 -> 4155;
6066 -> 6065;
6066 -> 4157;
6066 -> 4155;
6067 -> 4153;
6067 -> 4187;
6067 -> 4256;
6067 -> 6066;
6067 -> 4265;
6067 -> 4181;
6067 -> 4182;
6067 -> 6052;
6067 -> 4189;
6067 -> 4186;
6068 -> 4201;
6069 -> 6068;
6069 -> 4022;
6070 -> 6069;
6070 -> 4024;
6070 -> 4022;
6071 -> 4220;
6072 -> 6071;
6072 -> 4060;
6073 -> 6072;
6073 -> 4062;
6073 -> 4060;
6074 -> 4058;
6074 -> 4090;
6074 -> 4216;
6074 -> 6073;
6074 -> 4225;
6074 -> 4086;
6074 -> 4087;
6074 -> 6059;
6074 -> 4097;
6074 -> 4089;
6075 -> 4240;
6076 -> 6075;
6076 -> 4109;
6077 -> 6076;
6077 -> 4111;
6077 -> 4109;
6078 -> 4107;
6078 -> 4141;
6078 -> 4236;
6078 -> 6077;
6078 -> 4245;
6078 -> 4135;
6078 -> 4136;
6078 -> 6063;
6078 -> 4143;
6078 -> 4140;
6079 -> 4260;
6080 -> 6079;
6080 -> 4155;
6081 -> 6080;
6081 -> 4157;
6081 -> 4155;
6082 -> 4153;
6082 -> 4187;
6082 -> 4256;
6082 -> 6081;
6082 -> 4265;
6082 -> 4181;
6082 -> 4182;
6082 -> 6067;
6082 -> 4189;
6082 -> 4186;
6083 -> 4201;
6084 -> 6083;
6084 -> 4022;
6085 -> 6084;
6085 -> 4024;
6085 -> 4022;
6086 -> 4220;
6087 -> 6086;
6087 -> 4060;
6088 -> 6087;
6088 -> 4062;
6088 -> 4060;
6089 -> 4058;
6089 -> 4090;
6089 -> 4216;
6089 -> 6088;
6089 -> 4225;
6089 -> 4086;
6089 -> 4087;
6089 -> 6074;
6089 -> 4097;
6089 -> 4089;
6090 -> 4240;
6091 -> 6090;
6091 -> 4109;
6092 -> 6091;
6092 -> 4111;
6092 -> 4109;
6093 -> 4107;
6093 -> 4141;
6093 -> 4236;
6093 -> 6092;
6093 -> 4245;
6093 -> 4135;
6093 -> 4136;
6093 -> 6078;
6093 -> 4143;
6093 -> 4140;
6094 -> 4260;
6095 -> 6094;
6095 -> 4155;
6096 -> 6095;
6096 -> 4157;
6096 -> 4155;
6097 -> 4153;
6097 -> 4187;
6097 -> 4256;
6097 -> 6096;
6097 -> 4265;
6097 -> 4181;
6097 -> 4182;
6097 -> 6082;
6097 -> 4189;
6097 -> 4186;
6098 -> 4201;
6099 -> 6098;
6099 -> 4022;
6100 -> 6099;
6100 -> 4024;
6100 -> 4022;
6101 -> 4220;
6102 -> 6101;
6102 -> 4060;
6103 -> 6102;
6103 -> 4062;
6103 -> 4060;
6104 -> 4058;
6104 -> 4090;
6104 -> 4216;
6104 -> 6103;
6104 -> 4225;
6104 -> 4086;
6104 -> 4087;
6104 -> 6089;
6104 -> 4097;
6104 -> 4089;
6105 -> 4240;
6106 -> 6105;
6106 -> 4109;
6107 -> 6106;
6107 -> 4111;
6107 -> 4109;
6108 -> 4107;
6108 -> 4141;
6108 -> 4236;
6108 -> 6107;
6108 -> 4245;
6108 -> 4135;
6108 -> 4136;
6108 -> 6093;
6108 -> 4143;
6108 -> 4140;
6109 -> 4260;
6110 -> 6109;
6110 -> 4155;
6111 -> 6110;
6111 -> 4157;
6111 -> 4155;
6112 -> 4153;
6112 -> 4187;
6112 -> 4256;
6112 -> 6111;
6112 -> 4265;
6112 -> 4181;
6112 -> 4182;
6112 -> 6097;
6112 -> 4189;
6112 -> 4186;
6113 -> 4201;
6114 -> 6113;
6114 -> 4022;
6115 -> 6114;
6115 -> 4024;
6115 -> 4022;
6116 -> 4220;
6117 -> 6116;
6117 -> 4060;
6118 -> 6117;
6118 -> 4062;
6118 -> 4060;
6119 -> 4058;
6119 -> 4090;
6119 -> 4216;
6119 -> 6118;
6119 -> 4225;
6119 -> 4086;
6119 -> 4087;
6119 -> 6104;
6119 -> 4097;
6119 -> 4089;
6120 -> 4240;
6121 -> 6120;
6121 -> 4109;
6122 -> 6121;
6122 -> 4111;
6122 -> 4109;
6123 -> 4107;
6123 -> 4141;
6123 -> 4236;
6123 -> 6122;
6123 -> 4245;
6123 -> 4135;
6123 -> 4136;
6123 -> 6108;
6123 -> 4143;
6123 -> 4140;
6124 -> 4260;
6125 -> 6124;
6125 -> 4155;
6126 -> 6125;
6126 -> 4157;
6126 -> 4155;
6127 -> 4153;
6127 -> 4187;
6127 -> 4256;
6127 -> 6126;
6127 -> 4265;
6127 -> 4181;
6127 -> 4182;
6127 -> 6112;
6127 -> 4189;
6127 -> 4186;
6128 -> 4201;
6129 -> 6128;
6129 -> 4022;
6130 -> 6129;
6130 -> 4024;
6130 -> 4022;
6131 -> 4220;
6132 -> 6131;
6132 -> 4060;
6133 -> 6132;
6133 -> 4062;
6133 -> 4060;
6134 -> 4058;
6134 -> 4090;
6134 -> 4216;
6134 -> 6133;
6134 -> 4225;
6134 -> 4086;
6134 -> 4087;
6134 -> 6119;
6134 -> 4097;
6134 -> 4089;
6135 -> 4240;
6136 -> 6135;
6136 -> 4109;
6137 -> 6136;
6137 -> 4111;
6137 -> 4109;
6138 -> 4107;
6138 -> 4141;
6138 -> 4236;
6138 -> 6137;
6138 -> 4245;
6138 -> 4135;
6138 -> 4136;
6138 -> 6123;
6138 -> 4143;
6138 -> 4140;
6139 -> 4260;
6140 -> 6139;
6140 -> 4155;
6141 -> 6140;
6141 -> 4157;
6141 -> 4155;
6142 -> 4153;
6142 -> 4187;
6142 -> 4256;
6142 -> 6141;
6142 -> 4265;
6142 -> 4181;
6142 -> 4182;
6142 -> 6127;
6142 -> 4189;
6142 -> 4186;
6143 -> 4201;
6144 -> 6143;
6144 -> 4022;
6145 -> 6144;
6145 -> 4024;
6145 -> 4022;
6146 -> 4220;
6147 -> 6146;
6147 -> 4060;
6148 -> 6147;
6148 -> 4062;
6148 -> 4060;
6149 -> 4058;
6149 -> 4090;
6149 -> 4216;
6149 -> 6148;
6149 -> 4225;
6149 -> 4086;
6149 -> 4087;
6149 -> 6134;
6149 -> 4097;
6149 -> 4089;
6150 -> 4240;
6151 -> 6150;
6151 -> 4109;
6152 -> 6151;
6152 -> 4111;
6152 -> 4109;
6153 -> 4107;
6153 -> 4141;
6153 -> 4236;
6153 -> 6152;
6153 -> 4245;
6153 -> 4135;
6153 -> 4136;
6153 -> 6138;
6153 -> 4143;
6153 -> 4140;
6154 -> 4260;
6155 -> 6154;
6155 -> 4155;
6156 -> 6155;
6156 -> 4157;
6156 -> 4155;
6157 -> 4153;
6157 -> 4187;
6157 -> 4256;
6157 -> 6156;
6157 -> 4265;
6157 -> 4181;
6157 -> 4182;
6157 -> 6142;
6157 -> 4189;
6157 -> 4186;
6158 -> 4201;
6159 -> 6158;
6159 -> 4022;
6160 -> 6159;
6160 -> 4024;
6160 -> 4022;
6161 -> 4220;
6162 -> 6161;
6162 -> 4060;
6163 -> 6162;
6163 -> 4062;
6163 -> 4060;
6164 -> 4058;
6164 -> 4090;
6164 -> 4216;
6164 -> 6163;
6164 -> 4225;
6164 -> 4086;
6164 -> 4087;
6164 -> 6149;
6164 -> 4097;
6164 -> 4089;
6165 -> 4240;
6166 -> 6165;
6166 -> 4109;
6167 -> 6166;
6167 -> 4111;
6167 -> 4109;
6168 -> 4107;
6168 -> 4141;
6168 -> 4236;
6168 -> 6167;
6168 -> 4245;
6168 -> 4135;
6168 -> 4136;
6168 -> 6153;
6168 -> 4143;
6168 -> 4140;
6169 -> 4260;
6170 -> 6169;
6170 -> 4155;
6171 -> 6170;
6171 -> 4157;
6171 -> 4155;
6172 -> 4153;
6172 -> 4187;
6172 -> 4256;
6172 -> 6171;
6172 -> 4265;
6172 -> 4181;
6172 -> 4182;
6172 -> 6157;
6172 -> 4189;
6172 -> 4186;
6173 -> 4201;
6174 -> 6173;
6174 -> 4022;
6175 -> 6174;
6175 -> 4024;
6175 -> 4022;
6176 -> 4220;
6177 -> 6176;
6177 -> 4060;
6178 -> 6177;
6178 -> 4062;
6178 -> 4060;
6179 -> 4058;
6179 -> 4090;
6179 -> 4216;
6179 -> 6178;
6179 -> 4225;
6179 -> 4086;
6179 -> 4087;
6179 -> 6164;
6179 -> 4097;
6179 -> 4089;
6180 -> 4240;
6181 -> 6180;
6181 -> 4109;
6182 -> 6181;
6182 -> 4111;
6182 -> 4109;
6183 -> 4107;
6183 -> 4141;
6183 -> 4236;
6183 -> 6182;
6183 -> 4245;
6183 -> 4135;
6183 -> 4136;
6183 -> 6168;
6183 -> 4143;
6183 -> 4140;
6184 -> 4260;
6185 -> 6184;
6185 -> 4155;
6186 -> 6185;
6186 -> 4157;
6186 -> 4155;
6187 -> 4153;
6187 -> 4187;
6187 -> 4256;
6187 -> 6186;
6187 -> 4265;
6187 -> 4181;
6187 -> 4182;
6187 -> 6172;
6187 -> 4189;
6187 -> 4186;
6188 -> 4201;
6189 -> 6188;
6189 -> 4022;
6190 -> 6189;
6190 -> 4024;
6190 -> 4022;
6191 -> 4220;
6192 -> 6191;
6192 -> 4060;
6193 -> 6192;
6193 -> 4062;
6193 -> 4060;
6194 -> 4058;
6194 -> 4090;
6194 -> 4216;
6194 -> 6193;
6194 -> 4225;
6194 -> 4086;
6194 -> 4087;
6194 -> 6179;
6194 -> 4097;
6194 -> 4089;
6195 -> 4240;
6196 -> 6195;
6196 -> 4109;
6197 -> 6196;
6197 -> 4111;
6197 -> 4109;
6198 -> 4107;
6198 -> 4141;
6198 -> 4236;
6198 -> 6197;
6198 -> 4245;
6198 -> 4135;
6198 -> 4136;
6198 -> 6183;
6198 -> 4143;
6198 -> 4140;
6199 -> 4260;
6200 -> 6199;
6200 -> 4155;
6201 -> 6200;
6201 -> 4157;
6201 -> 4155;
6202 -> 4153;
6202 -> 4187;
6202 -> 4256;
6202 -> 6201;
6202 -> 4265;
6202 -> 4181;
6202 -> 4182;
6202 -> 6187;
6202 -> 4189;
6202 -> 4186;
6203 -> 4201;
6204 -> 6203;
6204 -> 4022;
6205 -> 6204;
6205 -> 4024;
6205 -> 4022;
6206 -> 4220;
6207 -> 6206;
6207 -> 4060;
6208 -> 6207;
6208 -> 4062;
6208 -> 4060;
6209 -> 4058;
6209 -> 4090;
6209 -> 4216;
6209 -> 6208;
6209 -> 4225;
6209 -> 4086;
6209 -> 4087;
6209 -> 6194;
6209 -> 4097;
6209 -> 4089;
6210 -> 4240;
6211 -> 6210;
6211 -> 4109;
6212 -> 6211;
6212 -> 4111;
6212 -> 4109;
6213 -> 4107;
6213 -> 4141;
6213 -> 4236;
6213 -> 6212;
6213 -> 4245;
6213 -> 4135;
6213 -> 4136;
6213 -> 6198;
6213 -> 4143;
6213 -> 4140;
6214 -> 4260;
6215 -> 6214;
6215 -> 4155;
6216 -> 6215;
6216 -> 4157;
6216 -> 4155;
6217 -> 4153;
6217 -> 4187;
6217 -> 4256;
6217 -> 6216;
6217 -> 4265;
6217 -> 4181;
6217 -> 4182;
6217 -> 6202;
6217 -> 4189;
6217 -> 4186;
6218 -> 4201;
6219 -> 6218;
6219 -> 4022;
6220 -> 6219;
6220 -> 4024;
6220 -> 4022;
6221 -> 4220;
6222 -> 6221;
6222 -> 4060;
6223 -> 6222;
6223 -> 4062;
6223 -> 4060;
6224 -> 4058;
6224 -> 4090;
6224 -> 4216;
6224 -> 6223;
6224 -> 4225;
6224 -> 4086;
6224 -> 4087;
6224 -> 6209;
6224 -> 4097;
6224 -> 4089;
6225 -> 4240;
6226 -> 6225;
6226 -> 4109;
6227 -> 6226;
6227 -> 4111;
6227 -> 4109;
6228 -> 4107;
6228 -> 4141;
6228 -> 4236;
6228 -> 6227;
6228 -> 4245;
6228 -> 4135;
6228 -> 4136;
6228 -> 6213;
6228 -> 4143;
6228 -> 4140;
6229 -> 4260;
6230 -> 6229;
6230 -> 4155;
6231 -> 6230;
6231 -> 4157;
6231 -> 4155;
6232 -> 4153;
6232 -> 4187;
6232 -> 4256;
6232 -> 6231;
6232 -> 4265;
6232 -> 4181;
6232 -> 4182;
6232 -> 6217;
6232 -> 4189;
6232 -> 4186;
6233 -> 4201;
6234 -> 6233;
6234 -> 4022;
6235 -> 6234;
6235 -> 4024;
6235 -> 4022;
6236 -> 4220;
6237 -> 6236;
6237 -> 4060;
6238 -> 6237;
6238 -> 4062;
6238 -> 4060;
6239 -> 4058;
6239 -> 4090;
6239 -> 4216;
6239 -> 6238;
6239 -> 4225;
6239 -> 4086;
6239 -> 4087;
6239 -> 6224;
6239 -> 4097;
6239 -> 4089;
6240 -> 4240;
6241 -> 6240;
6241 -> 4109;
6242 -> 6241;
6242 -> 4111;
6242 -> 4109;
6243 -> 4107;
6243 -> 4141;
6243 -> 4236;
6243 -> 6242;
6243 -> 4245;
6243 -> 4135;
6243 -> 4136;
6243 -> 6228;
6243 -> 4143;
6243 -> 4140;
6244 -> 4260;
6245 -> 6244;
6245 -> 4155;
6246 -> 6245;
6246 -> 4157;
6246 -> 4155;
6247 -> 4153;
6247 -> 4187;
6247 -> 4256;
6247 -> 6246;
6247 -> 4265;
6247 -> 4181;
6247 -> 4182;
6247 -> 6232;
6247 -> 4189;
6247 -> 4186;
6248 -> 4201;
6249 -> 6248;
6249 -> 4022;
6250 -> 6249;
6250 -> 4024;
6250 -> 4022;
6251 -> 4220;
6252 -> 6251;
6252 -> 4060;
6253 -> 6252;
6253 -> 4062;
6253 -> 4060;
6254 -> 4058;
6254 -> 4090;
6254 -> 4216;
6254 -> 6253;
6254 -> 4225;
6254 -> 4086;
6254 -> 4087;
6254 -> 6239;
6254 -> 4097;
6254 -> 4089;
6255 -> 4240;
6256 -> 6255;
6256 -> 4109;
6257 -> 6256;
6257 -> 4111;
6257 -> 4109;
6258 -> 4107;
6258 -> 4141;
6258 -> 4236;
6258 -> 6257;
6258 -> 4245;
6258 -> 4135;
6258 -> 4136;
6258 -> 6243;
6258 -> 4143;
6258 -> 4140;
6259 -> 4260;
6260 -> 6259;
6260 -> 4155;
6261 -> 6260;
6261 -> 4157;
6261 -> 4155;
6262 -> 4153;
6262 -> 4187;
6262 -> 4256;
6262 -> 6261;
6262 -> 4265;
6262 -> 4181;
6262 -> 4182;
6262 -> 6247;
6262 -> 4189;
6262 -> 4186;
6263 -> 4201;
6264 -> 6263;
6264 -> 4022;
6265 -> 6264;
6265 -> 4024;
6265 -> 4022;
6266 -> 4220;
6267 -> 6266;
6267 -> 4060;
6268 -> 6267;
6268 -> 4062;
6268 -> 4060;
6269 -> 4058;
6269 -> 4090;
6269 -> 4216;
6269 -> 6268;
6269 -> 4225;
6269 -> 4086;
6269 -> 4087;
6269 -> 6254;
6269 -> 4097;
6269 -> 4089;
6270 -> 4240;
6271 -> 6270;
6271 -> 4109;
6272 -> 6271;
6272 -> 4111;
6272 -> 4109;
6273 -> 4107;
6273 -> 4141;
6273 -> 4236;
6273 -> 6272;
6273 -> 4245;
6273 -> 4135;
6273 -> 4136;
6273 -> 6258;
6273 -> 4143;
6273 -> 4140;
6274 -> 4260;
6275 -> 6274;
6275 -> 4155;
6276 -> 6275;
6276 -> 4157;
6276 -> 4155;
6277 -> 4153;
6277 -> 4187;
6277 -> 4256;
6277 -> 6276;
6277 -> 4265;
6277 -> 4181;
6277 -> 4182;
6277 -> 6262;
6277 -> 4189;
6277 -> 4186;
6278 -> 4201;
6279 -> 6278;
6279 -> 4022;
6280 -> 6279;
6280 -> 4024;
6280 -> 4022;
6281 -> 4220;
6282 -> 6281;
6282 -> 4060;
6283 -> 6282;
6283 -> 4062;
6283 -> 4060;
6284 -> 4058;
6284 -> 4090;
6284 -> 4216;
6284 -> 6283;
6284 -> 4225;
6284 -> 4086;
6284 -> 4087;
6284 -> 6269;
6284 -> 4097;
6284 -> 4089;
6285 -> 4240;
6286 -> 6285;
6286 -> 4109;
6287 -> 6286;
6287 -> 4111;
6287 -> 4109;
6288 -> 4107;
6288 -> 4141;
6288 -> 4236;
6288 -> 6287;
6288 -> 4245;
6288 -> 4135;
6288 -> 4136;
6288 -> 6273;
6288 -> 4143;
6288 -> 4140;
6289 -> 4260;
6290 -> 6289;
6290 -> 4155;
6291 -> 6290;
6291 -> 4157;
6291 -> 4155;
6292 -> 4153;
6292 -> 4187;
6292 -> 4256;
6292 -> 6291;
6292 -> 4265;
6292 -> 4181;
6292 -> 4182;
6292 -> 6277;
6292 -> 4189;
6292 -> 4186;
6293 -> 4201;
6294 -> 6293;
6294 -> 4022;
6295 -> 6294;
6295 -> 4024;
6295 -> 4022;
6296 -> 4220;
6297 -> 6296;
6297 -> 4060;
6298 -> 6297;
6298 -> 4062;
6298 -> 4060;
6299 -> 4058;
6299 -> 4090;
6299 -> 4216;
6299 -> 6298;
6299 -> 4225;
6299 -> 4086;
6299 -> 4087;
6299 -> 6284;
6299 -> 4097;
6299 -> 4089;
6300 -> 4240;
6301 -> 6300;
6301 -> 4109;
6302 -> 6301;
6302 -> 4111;
6302 -> 4109;
6303 -> 4107;
6303 -> 4141;
6303 -> 4236;
6303 -> 6302;
6303 -> 4245;
6303 -> 4135;
6303 -> 4136;
6303 -> 6288;
6303 -> 4143;
6303 -> 4140;
6304 -> 4260;
6305 -> 6304;
6305 -> 4155;
6306 -> 6305;
6306 -> 4157;
6306 -> 4155;
6307 -> 4153;
6307 -> 4187;
6307 -> 4256;
6307 -> 6306;
6307 -> 4265;
6307 -> 4181;
6307 -> 4182;
6307 -> 6292;
6307 -> 4189;
6307 -> 4186;
6308 -> 4201;
6309 -> 6308;
6309 -> 4022;
6310 -> 6309;
6310 -> 4024;
6310 -> 4022;
6311 -> 4220;
6312 -> 6311;
6312 -> 4060;
6313 -> 6312;
6313 -> 4062;
6313 -> 4060;
6314 -> 4058;
6314 -> 4090;
6314 -> 4216;
6314 -> 6313;
6314 -> 4225;
6314 -> 4086;
6314 -> 4087;
6314 -> 6299;
6314 -> 4097;
6314 -> 4089;
6315 -> 4240;
6316 -> 6315;
6316 -> 4109;
6317 -> 6316;
6317 -> 4111;
6317 -> 4109;
6318 -> 4107;
6318 -> 4141;
6318 -> 4236;
6318 -> 6317;
6318 -> 4245;
6318 -> 4135;
6318 -> 4136;
6318 -> 6303;
6318 -> 4143;
6318 -> 4140;
6319 -> 4260;
6320 -> 6319;
6320 -> 4155;
6321 -> 6320;
6321 -> 4157;
6321 -> 4155;
6322 -> 4153;
6322 -> 4187;
6322 -> 4256;
6322 -> 6321;
6322 -> 4265;
6322 -> 4181;
6322 -> 4182;
6322 -> 6307;
6322 -> 4189;
6322 -> 4186;
6323 -> 4201;
6324 -> 6323;
6324 -> 4022;
6325 -> 6324;
6325 -> 4024;
6325 -> 4022;
6326 -> 4220;
6327 -> 6326;
6327 -> 4060;
6328 -> 6327;
6328 -> 4062;
6328 -> 4060;
6329 -> 4058;
6329 -> 4090;
6329 -> 4216;
6329 -> 6328;
6329 -> 4225;
6329 -> 4086;
6329 -> 4087;
6329 -> 6314;
6329 -> 4097;
6329 -> 4089;
6330 -> 4240;
6331 -> 6330;
6331 -> 4109;
6332 -> 6331;
6332 -> 4111;
6332 -> 4109;
6333 -> 4107;
6333 -> 4141;
6333 -> 4236;
6333 -> 6332;
6333 -> 4245;
6333 -> 4135;
6333 -> 4136;
6333 -> 6318;
6333 -> 4143;
6333 -> 4140;
6334 -> 4260;
6335 -> 6334;
6335 -> 4155;
6336 -> 6335;
6336 -> 4157;
6336 -> 4155;
6337 -> 4153;
6337 -> 4187;
6337 -> 4256;
6337 -> 6336;
6337 -> 4265;
6337 -> 4181;
6337 -> 4182;
6337 -> 6322;
6337 -> 4189;
6337 -> 4186;
6338 -> 4201;
6339 -> 6338;
6339 -> 4022;
6340 -> 6339;
6340 -> 4024;
6340 -> 4022;
6341 -> 4220;
6342 -> 6341;
6342 -> 4060;
6343 -> 6342;
6343 -> 4062;
6343 -> 4060;
6344 -> 4058;
6344 -> 4090;
6344 -> 4216;
6344 -> 6343;
6344 -> 4225;
6344 -> 4086;
6344 -> 4087;
6344 -> 6329;
6344 -> 4097;
6344 -> 4089;
6345 -> 4240;
6346 -> 6345;
6346 -> 4109;
6347 -> 6346;
6347 -> 4111;
6347 -> 4109;
6348 -> 4107;
6348 -> 4141;
6348 -> 4236;
6348 -> 6347;
6348 -> 4245;
6348 -> 4135;
6348 -> 4136;
6348 -> 6333;
6348 -> 4143;
6348 -> 4140;
6349 -> 4260;
6350 -> 6349;
6350 -> 4155;
6351 -> 6350;
6351 -> 4157;
6351 -> 4155;
6352 -> 4153;
6352 -> 4187;
6352 -> 4256;
6352 -> 6351;
6352 -> 4265;
6352 -> 4181;
6352 -> 4182;
6352 -> 6337;
6352 -> 4189;
6352 -> 4186;
6353 -> 4201;
6354 -> 6353;
6354 -> 4022;
6355 -> 6354;
6355 -> 4024;
6355 -> 4022;
6356 -> 4220;
6357 -> 6356;
6357 -> 4060;
6358 -> 6357;
6358 -> 4062;
6358 -> 4060;
6359 -> 4058;
6359 -> 4090;
6359 -> 4216;
6359 -> 6358;
6359 -> 4225;
6359 -> 4086;
6359 -> 4087;
6359 -> 6344;
6359 -> 4097;
6359 -> 4089;
6360 -> 4240;
6361 -> 6360;
6361 -> 4109;
6362 -> 6361;
6362 -> 4111;
6362 -> 4109;
6363 -> 4107;
6363 -> 4141;
6363 -> 4236;
6363 -> 6362;
6363 -> 4245;
6363 -> 4135;
6363 -> 4136;
6363 -> 6348;
6363 -> 4143;
6363 -> 4140;
6364 -> 4260;
6365 -> 6364;
6365 -> 4155;
6366 -> 6365;
6366 -> 4157;
6366 -> 4155;
6367 -> 4153;
6367 -> 4187;
6367 -> 4256;
6367 -> 6366;
6367 -> 4265;
6367 -> 4181;
6367 -> 4182;
6367 -> 6352;
6367 -> 4189;
6367 -> 4186;
6368 -> 4201;
6369 -> 6368;
6369 -> 4022;
6370 -> 6369;
6370 -> 4024;
6370 -> 4022;
6371 -> 4220;
6372 -> 6371;
6372 -> 4060;
6373 -> 6372;
6373 -> 4062;
6373 -> 4060;
6374 -> 4058;
6374 -> 4090;
6374 -> 4216;
6374 -> 6373;
6374 -> 4225;
6374 -> 4086;
6374 -> 4087;
6374 -> 6359;
6374 -> 4097;
6374 -> 4089;
6375 -> 4240;
6376 -> 6375;
6376 -> 4109;
6377 -> 6376;
6377 -> 4111;
6377 -> 4109;
6378 -> 4107;
6378 -> 4141;
6378 -> 4236;
6378 -> 6377;
6378 -> 4245;
6378 -> 4135;
6378 -> 4136;
6378 -> 6363;
6378 -> 4143;
6378 -> 4140;
6379 -> 4260;
6380 -> 6379;
6380 -> 4155;
6381 -> 6380;
6381 -> 4157;
6381 -> 4155;
6382 -> 4153;
6382 -> 4187;
6382 -> 4256;
6382 -> 6381;
6382 -> 4265;
6382 -> 4181;
6382 -> 4182;
6382 -> 6367;
6382 -> 4189;
6382 -> 4186;
6383 -> 4201;
6384 -> 6383;
6384 -> 4022;
6385 -> 6384;
6385 -> 4024;
6385 -> 4022;
6386 -> 4220;
6387 -> 6386;
6387 -> 4060;
6388 -> 6387;
6388 -> 4062;
6388 -> 4060;
6389 -> 4058;
6389 -> 4090;
6389 -> 4216;
6389 -> 6388;
6389 -> 4225;
6389 -> 4086;
6389 -> 4087;
6389 -> 6374;
6389 -> 4097;
6389 -> 4089;
6390 -> 4240;
6391 -> 6390;
6391 -> 4109;
6392 -> 6391;
6392 -> 4111;
6392 -> 4109;
6393 -> 4107;
6393 -> 4141;
6393 -> 4236;
6393 -> 6392;
6393 -> 4245;
6393 -> 4135;
6393 -> 4136;
6393 -> 6378;
6393 -> 4143;
6393 -> 4140;
6394 -> 4260;
6395 -> 6394;
6395 -> 4155;
6396 -> 6395;
6396 -> 4157;
6396 -> 4155;
6397 -> 4153;
6397 -> 4187;
6397 -> 4256;
6397 -> 6396;
6397 -> 4265;
6397 -> 4181;
6397 -> 4182;
6397 -> 6382;
6397 -> 4189;
6397 -> 4186;
6398 -> 4201;
6399 -> 6398;
6399 -> 4022;
6400 -> 6399;
6400 -> 4024;
6400 -> 4022;
6401 -> 4220;
6402 -> 6401;
6402 -> 4060;
6403 -> 6402;
6403 -> 4062;
6403 -> 4060;
6404 -> 4058;
6404 -> 4090;
6404 -> 4216;
6404 -> 6403;
6404 -> 4225;
6404 -> 4086;
6404 -> 4087;
6404 -> 6389;
6404 -> 4097;
6404 -> 4089;
6405 -> 4240;
6406 -> 6405;
6406 -> 4109;
6407 -> 6406;
6407 -> 4111;
6407 -> 4109;
6408 -> 4107;
6408 -> 4141;
6408 -> 4236;
6408 -> 6407;
6408 -> 4245;
6408 -> 4135;
6408 -> 4136;
6408 -> 6393;
6408 -> 4143;
6408 -> 4140;
6409 -> 4260;
6410 -> 6409;
6410 -> 4155;
6411 -> 6410;
6411 -> 4157;
6411 -> 4155;
6412 -> 4153;
6412 -> 4187;
6412 -> 4256;
6412 -> 6411;
6412 -> 4265;
6412 -> 4181;
6412 -> 4182;
6412 -> 6397;
6412 -> 4189;
6412 -> 4186;
6413 -> 4201;
6414 -> 6413;
6414 -> 4022;
6415 -> 6414;
6415 -> 4024;
6415 -> 4022;
6416 -> 4220;
6417 -> 6416;
6417 -> 4060;
6418 -> 6417;
6418 -> 4062;
6418 -> 4060;
6419 -> 4058;
6419 -> 4090;
6419 -> 4216;
6419 -> 6418;
6419 -> 4225;
6419 -> 4086;
6419 -> 4087;
6419 -> 6404;
6419 -> 4097;
6419 -> 4089;
6420 -> 4240;
6421 -> 6420;
6421 -> 4109;
6422 -> 6421;
6422 -> 4111;
6422 -> 4109;
6423 -> 4107;
6423 -> 4141;
6423 -> 4236;
6423 -> 6422;
6423 -> 4245;
6423 -> 4135;
6423 -> 4136;
6423 -> 6408;
6423 -> 4143;
6423 -> 4140;
6424 -> 4260;
6425 -> 6424;
6425 -> 4155;
6426 -> 6425;
6426 -> 4157;
6426 -> 4155;
6427 -> 4153;
6427 -> 4187;
6427 -> 4256;
6427 -> 6426;
6427 -> 4265;
6427 -> 4181;
6427 -> 4182;
6427 -> 6412;
6427 -> 4189;
6427 -> 4186;
6428 -> 4201;
6429 -> 6428;
6429 -> 4022;
6430 -> 6429;
6430 -> 4024;
6430 -> 4022;
6431 -> 4220;
6432 -> 6431;
6432 -> 4060;
6433 -> 6432;
6433 -> 4062;
6433 -> 4060;
6434 -> 4058;
6434 -> 4090;
6434 -> 4216;
6434 -> 6433;
6434 -> 4225;
6434 -> 4086;
6434 -> 4087;
6434 -> 6419;
6434 -> 4097;
6434 -> 4089;
6435 -> 4240;
6436 -> 6435;
6436 -> 4109;
6437 -> 6436;
6437 -> 4111;
6437 -> 4109;
6438 -> 4107;
6438 -> 4141;
6438 -> 4236;
6438 -> 6437;
6438 -> 4245;
6438 -> 4135;
6438 -> 4136;
6438 -> 6423;
6438 -> 4143;
6438 -> 4140;
6439 -> 4260;
6440 -> 6439;
6440 -> 4155;
6441 -> 6440;
6441 -> 4157;
6441 -> 4155;
6442 -> 4153;
6442 -> 4187;
6442 -> 4256;
6442 -> 6441;
6442 -> 4265;
6442 -> 4181;
6442 -> 4182;
6442 -> 6427;
6442 -> 4189;
6442 -> 4186;
6443 -> 4201;
6444 -> 6443;
6444 -> 4022;
6445 -> 6444;
6445 -> 4024;
6445 -> 4022;
6446 -> 4220;
6447 -> 6446;
6447 -> 4060;
6448 -> 6447;
6448 -> 4062;
6448 -> 4060;
6449 -> 4058;
6449 -> 4090;
6449 -> 4216;
6449 -> 6448;
6449 -> 4225;
6449 -> 4086;
6449 -> 4087;
6449 -> 6434;
6449 -> 4097;
6449 -> 4089;
6450 -> 4240;
6451 -> 6450;
6451 -> 4109;
6452 -> 6451;
6452 -> 4111;
6452 -> 4109;
6453 -> 4107;
6453 -> 4141;
6453 -> 4236;
6453 -> 6452;
6453 -> 4245;
6453 -> 4135;
6453 -> 4136;
6453 -> 6438;
6453 -> 4143;
6453 -> 4140;
6454 -> 4260;
6455 -> 6454;
6455 -> 4155;
6456 -> 6455;
6456 -> 4157;
6456 -> 4155;
6457 -> 4153;
6457 -> 4187;
6457 -> 4256;
6457 -> 6456;
6457 -> 4265;
6457 -> 4181;
6457 -> 4182;
6457 -> 6442;
6457 -> 4189;
6457 -> 4186;
6458 -> 4201;
6459 -> 6458;
6459 -> 4022;
6460 -> 6459;
6460 -> 4024;
6460 -> 4022;
6461 -> 4220;
6462 -> 6461;
6462 -> 4060;
6463 -> 6462;
6463 -> 4062;
6463 -> 4060;
6464 -> 4058;
6464 -> 4090;
6464 -> 4216;
6464 -> 6463;
6464 -> 4225;
6464 -> 4086;
6464 -> 4087;
6464 -> 6449;
6464 -> 4097;
6464 -> 4089;
6465 -> 4240;
6466 -> 6465;
6466 -> 4109;
6467 -> 6466;
6467 -> 4111;
6467 -> 4109;
6468 -> 4107;
6468 -> 4141;
6468 -> 4236;
6468 -> 6467;
6468 -> 4245;
6468 -> 4135;
6468 -> 4136;
6468 -> 6453;
6468 -> 4143;
6468 -> 4140;
6469 -> 4260;
6470 -> 6469;
6470 -> 4155;
6471 -> 6470;
6471 -> 4157;
6471 -> 4155;
6472 -> 4153;
6472 -> 4187;
6472 -> 4256;
6472 -> 6471;
6472 -> 4265;
6472 -> 4181;
6472 -> 4182;
6472 -> 6457;
6472 -> 4189;
6472 -> 4186;
6473 -> 4201;
6474 -> 6473;
6474 -> 4022;
6475 -> 6474;
6475 -> 4024;
6475 -> 4022;
6476 -> 4220;
6477 -> 6476;
6477 -> 4060;
6478 -> 6477;
6478 -> 4062;
6478 -> 4060;
6479 -> 4058;
6479 -> 4090;
6479 -> 4216;
6479 -> 6478;
6479 -> 4225;
6479 -> 4086;
6479 -> 4087;
6479 -> 6464;
6479 -> 4097;
6479 -> 4089;
6480 -> 4240;
6481 -> 6480;
6481 -> 4109;
6482 -> 6481;
6482 -> 4111;
6482 -> 4109;
6483 -> 4107;
6483 -> 4141;
6483 -> 4236;
6483 -> 6482;
6483 -> 4245;
6483 -> 4135;
6483 -> 4136;
6483 -> 6468;
6483 -> 4143;
6483 -> 4140;
6484 -> 4260;
6485 -> 6484;
6485 -> 4155;
6486 -> 6485;
6486 -> 4157;
6486 -> 4155;
6487 -> 4153;
6487 -> 4187;
6487 -> 4256;
6487 -> 6486;
6487 -> 4265;
6487 -> 4181;
6487 -> 4182;
6487 -> 6472;
6487 -> 4189;
6487 -> 4186;
6488 -> 4201;
6489 -> 6488;
6489 -> 4022;
6490 -> 6489;
6490 -> 4024;
6490 -> 4022;
6491 -> 4220;
6492 -> 6491;
6492 -> 4060;
6493 -> 6492;
6493 -> 4062;
6493 -> 4060;
6494 -> 4058;
6494 -> 4090;
6494 -> 4216;
6494 -> 6493;
6494 -> 4225;
6494 -> 4086;
6494 -> 4087;
6494 -> 6479;
6494 -> 4097;
6494 -> 4089;
6495 -> 4240;
6496 -> 6495;
6496 -> 4109;
6497 -> 6496;
6497 -> 4111;
6497 -> 4109;
6498 -> 4107;
6498 -> 4141;
6498 -> 4236;
6498 -> 6497;
6498 -> 4245;
6498 -> 4135;
6498 -> 4136;
6498 -> 6483;
6498 -> 4143;
6498 -> 4140;
6499 -> 4260;
6500 -> 6499;
6500 -> 4155;
6501 -> 6500;
6501 -> 4157;
6501 -> 4155;
6502 -> 4153;
6502 -> 4187;
6502 -> 4256;
6502 -> 6501;
6502 -> 4265;
6502 -> 4181;
6502 -> 4182;
6502 -> 6487;
6502 -> 4189;
6502 -> 4186;
6503 -> 4201;
6504 -> 6503;
6504 -> 4022;
6505 -> 6504;
6505 -> 4024;
6505 -> 4022;
6506 -> 4220;
6507 -> 6506;
6507 -> 4060;
6508 -> 6507;
6508 -> 4062;
6508 -> 4060;
6509 -> 4058;
6509 -> 4090;
6509 -> 4216;
6509 -> 6508;
6509 -> 4225;
6509 -> 4086;
6509 -> 4087;
6509 -> 6494;
6509 -> 4097;
6509 -> 4089;
6510 -> 4240;
6511 -> 6510;
6511 -> 4109;
6512 -> 6511;
6512 -> 4111;
6512 -> 4109;
6513 -> 4107;
6513 -> 4141;
6513 -> 4236;
6513 -> 6512;
6513 -> 4245;
6513 -> 4135;
6513 -> 4136;
6513 -> 6498;
6513 -> 4143;
6513 -> 4140;
6514 -> 4260;
6515 -> 6514;
6515 -> 4155;
6516 -> 6515;
6516 -> 4157;
6516 -> 4155;
6517 -> 4153;
6517 -> 4187;
6517 -> 4256;
6517 -> 6516;
6517 -> 4265;
6517 -> 4181;
6517 -> 4182;
6517 -> 6502;
6517 -> 4189;
6517 -> 4186;
6518 -> 4201;
6519 -> 6518;
6519 -> 4022;
6520 -> 6519;
6520 -> 4024;
6520 -> 4022;
6521 -> 4220;
6522 -> 6521;
6522 -> 4060;
6523 -> 6522;
6523 -> 4062;
6523 -> 4060;
6524 -> 4058;
6524 -> 4090;
6524 -> 4216;
6524 -> 6523;
6524 -> 4225;
6524 -> 4086;
6524 -> 4087;
6524 -> 6509;
6524 -> 4097;
6524 -> 4089;
6525 -> 4240;
6526 -> 6525;
6526 -> 4109;
6527 -> 6526;
6527 -> 4111;
6527 -> 4109;
6528 -> 4107;
6528 -> 4141;
6528 -> 4236;
6528 -> 6527;
6528 -> 4245;
6528 -> 4135;
6528 -> 4136;
6528 -> 6513;
6528 -> 4143;
6528 -> 4140;
6529 -> 4260;
6530 -> 6529;
6530 -> 4155;
6531 -> 6530;
6531 -> 4157;
6531 -> 4155;
6532 -> 4153;
6532 -> 4187;
6532 -> 4256;
6532 -> 6531;
6532 -> 4265;
6532 -> 4181;
6532 -> 4182;
6532 -> 6517;
6532 -> 4189;
6532 -> 4186;
6533 -> 4201;
6534 -> 6533;
6534 -> 4022;
6535 -> 6534;
6535 -> 4024;
6535 -> 4022;
6536 -> 4220;
6537 -> 6536;
6537 -> 4060;
6538 -> 6537;
6538 -> 4062;
6538 -> 4060;
6539 -> 4058;
6539 -> 4090;
6539 -> 4216;
6539 -> 6538;
6539 -> 4225;
6539 -> 4086;
6539 -> 4087;
6539 -> 6524;
6539 -> 4097;
6539 -> 4089;
6540 -> 4240;
6541 -> 6540;
6541 -> 4109;
6542 -> 6541;
6542 -> 4111;
6542 -> 4109;
6543 -> 4107;
6543 -> 4141;
6543 -> 4236;
6543 -> 6542;
6543 -> 4245;
6543 -> 4135;
6543 -> 4136;
6543 -> 6528;
6543 -> 4143;
6543 -> 4140;
6544 -> 4260;
6545 -> 6544;
6545 -> 4155;
6546 -> 6545;
6546 -> 4157;
6546 -> 4155;
6547 -> 4153;
6547 -> 4187;
6547 -> 4256;
6547 -> 6546;
6547 -> 4265;
6547 -> 4181;
6547 -> 4182;
6547 -> 6532;
6547 -> 4189;
6547 -> 4186;
6548 -> 4201;
6549 -> 6548;
6549 -> 4022;
6550 -> 6549;
6550 -> 4024;
6550 -> 4022;
6551 -> 4220;
6552 -> 6551;
6552 -> 4060;
6553 -> 6552;
6553 -> 4062;
6553 -> 4060;
6554 -> 4058;
6554 -> 4090;
6554 -> 4216;
6554 -> 6553;
6554 -> 4225;
6554 -> 4086;
6554 -> 4087;
6554 -> 6539;
6554 -> 4097;
6554 -> 4089;
6555 -> 4240;
6556 -> 6555;
6556 -> 4109;
6557 -> 6556;
6557 -> 4111;
6557 -> 4109;
6558 -> 4107;
6558 -> 4141;
6558 -> 4236;
6558 -> 6557;
6558 -> 4245;
6558 -> 4135;
6558 -> 4136;
6558 -> 6543;
6558 -> 4143;
6558 -> 4140;
6559 -> 4260;
6560 -> 6559;
6560 -> 4155;
6561 -> 6560;
6561 -> 4157;
6561 -> 4155;
6562 -> 4153;
6562 -> 4187;
6562 -> 4256;
6562 -> 6561;
6562 -> 4265;
6562 -> 4181;
6562 -> 4182;
6562 -> 6547;
6562 -> 4189;
6562 -> 4186;
6563 -> 4201;
6564 -> 6563;
6564 -> 4022;
6565 -> 6564;
6565 -> 4024;
6565 -> 4022;
6566 -> 4220;
6567 -> 6566;
6567 -> 4060;
6568 -> 6567;
6568 -> 4062;
6568 -> 4060;
6569 -> 4058;
6569 -> 4090;
6569 -> 4216;
6569 -> 6568;
6569 -> 4225;
6569 -> 4086;
6569 -> 4087;
6569 -> 6554;
6569 -> 4097;
6569 -> 4089;
6570 -> 4240;
6571 -> 6570;
6571 -> 4109;
6572 -> 6571;
6572 -> 4111;
6572 -> 4109;
6573 -> 4107;
6573 -> 4141;
6573 -> 4236;
6573 -> 6572;
6573 -> 4245;
6573 -> 4135;
6573 -> 4136;
6573 -> 6558;
6573 -> 4143;
6573 -> 4140;
6574 -> 4260;
6575 -> 6574;
6575 -> 4155;
6576 -> 6575;
6576 -> 4157;
6576 -> 4155;
6577 -> 4153;
6577 -> 4187;
6577 -> 4256;
6577 -> 6576;
6577 -> 4265;
6577 -> 4181;
6577 -> 4182;
6577 -> 6562;
6577 -> 4189;
6577 -> 4186;
6578 -> 4201;
6579 -> 6578;
6579 -> 4022;
6580 -> 6579;
6580 -> 4024;
6580 -> 4022;
6581 -> 4220;
6582 -> 6581;
6582 -> 4060;
6583 -> 6582;
6583 -> 4062;
6583 -> 4060;
6584 -> 4058;
6584 -> 4090;
6584 -> 4216;
6584 -> 6583;
6584 -> 4225;
6584 -> 4086;
6584 -> 4087;
6584 -> 6569;
6584 -> 4097;
6584 -> 4089;
6585 -> 4240;
6586 -> 6585;
6586 -> 4109;
6587 -> 6586;
6587 -> 4111;
6587 -> 4109;
6588 -> 4107;
6588 -> 4141;
6588 -> 4236;
6588 -> 6587;
6588 -> 4245;
6588 -> 4135;
6588 -> 4136;
6588 -> 6573;
6588 -> 4143;
6588 -> 4140;
6589 -> 4260;
6590 -> 6589;
6590 -> 4155;
6591 -> 6590;
6591 -> 4157;
6591 -> 4155;
6592 -> 4153;
6592 -> 4187;
6592 -> 4256;
6592 -> 6591;
6592 -> 4265;
6592 -> 4181;
6592 -> 4182;
6592 -> 6577;
6592 -> 4189;
6592 -> 4186;
6593 -> 4201;
6594 -> 6593;
6594 -> 4022;
6595 -> 6594;
6595 -> 4024;
6595 -> 4022;
6596 -> 4220;
6597 -> 6596;
6597 -> 4060;
6598 -> 6597;
6598 -> 4062;
6598 -> 4060;
6599 -> 4058;
6599 -> 4090;
6599 -> 4216;
6599 -> 6598;
6599 -> 4225;
6599 -> 4086;
6599 -> 4087;
6599 -> 6584;
6599 -> 4097;
6599 -> 4089;
6600 -> 4240;
6601 -> 6600;
6601 -> 4109;
6602 -> 6601;
6602 -> 4111;
6602 -> 4109;
6603 -> 4107;
6603 -> 4141;
6603 -> 4236;
6603 -> 6602;
6603 -> 4245;
6603 -> 4135;
6603 -> 4136;
6603 -> 6588;
6603 -> 4143;
6603 -> 4140;
6604 -> 4260;
6605 -> 6604;
6605 -> 4155;
6606 -> 6605;
6606 -> 4157;
6606 -> 4155;
6607 -> 4153;
6607 -> 4187;
6607 -> 4256;
6607 -> 6606;
6607 -> 4265;
6607 -> 4181;
6607 -> 4182;
6607 -> 6592;
6607 -> 4189;
6607 -> 4186;
6608 -> 4201;
6609 -> 6608;
6609 -> 4022;
6610 -> 6609;
6610 -> 4024;
6610 -> 4022;
6611 -> 4220;
6612 -> 6611;
6612 -> 4060;
6613 -> 6612;
6613 -> 4062;
6613 -> 4060;
6614 -> 4058;
6614 -> 4090;
6614 -> 4216;
6614 -> 6613;
6614 -> 4225;
6614 -> 4086;
6614 -> 4087;
6614 -> 6599;
6614 -> 4097;
6614 -> 4089;
6615 -> 4240;
6616 -> 6615;
6616 -> 4109;
6617 -> 6616;
6617 -> 4111;
6617 -> 4109;
6618 -> 4107;
6618 -> 4141;
6618 -> 4236;
6618 -> 6617;
6618 -> 4245;
6618 -> 4135;
6618 -> 4136;
6618 -> 6603;
6618 -> 4143;
6618 -> 4140;
6619 -> 4260;
6620 -> 6619;
6620 -> 4155;
6621 -> 6620;
6621 -> 4157;
6621 -> 4155;
6622 -> 4153;
6622 -> 4187;
6622 -> 4256;
6622 -> 6621;
6622 -> 4265;
6622 -> 4181;
6622 -> 4182;
6622 -> 6607;
6622 -> 4189;
6622 -> 4186;
6623 -> 4201;
6624 -> 6623;
6624 -> 4022;
6625 -> 6624;
6625 -> 4024;
6625 -> 4022;
6626 -> 4220;
6627 -> 6626;
6627 -> 4060;
6628 -> 6627;
6628 -> 4062;
6628 -> 4060;
6629 -> 4058;
6629 -> 4090;
6629 -> 4216;
6629 -> 6628;
6629 -> 4225;
6629 -> 4086;
6629 -> 4087;
6629 -> 6614;
6629 -> 4097;
6629 -> 4089;
6630 -> 4240;
6631 -> 6630;
6631 -> 4109;
6632 -> 6631;
6632 -> 4111;
6632 -> 4109;
6633 -> 4107;
6633 -> 4141;
6633 -> 4236;
6633 -> 6632;
6633 -> 4245;
6633 -> 4135;
6633 -> 4136;
6633 -> 6618;
6633 -> 4143;
6633 -> 4140;
6634 -> 4260;
6635 -> 6634;
6635 -> 4155;
6636 -> 6635;
6636 -> 4157;
6636 -> 4155;
6637 -> 4153;
6637 -> 4187;
6637 -> 4256;
6637 -> 6636;
6637 -> 4265;
6637 -> 4181;
6637 -> 4182;
6637 -> 6622;
6637 -> 4189;
6637 -> 4186;
6638 -> 4201;
6639 -> 6638;
6639 -> 4022;
6640 -> 6639;
6640 -> 4024;
6640 -> 4022;
6641 -> 4220;
6642 -> 6641;
6642 -> 4060;
6643 -> 6642;
6643 -> 4062;
6643 -> 4060;
6644 -> 4058;
6644 -> 4090;
6644 -> 4216;
6644 -> 6643;
6644 -> 4225;
6644 -> 4086;
6644 -> 4087;
6644 -> 6629;
6644 -> 4097;
6644 -> 4089;
6645 -> 4240;
6646 -> 6645;
6646 -> 4109;
6647 -> 6646;
6647 -> 4111;
6647 -> 4109;
6648 -> 4107;
6648 -> 4141;
6648 -> 4236;
6648 -> 6647;
6648 -> 4245;
6648 -> 4135;
6648 -> 4136;
6648 -> 6633;
6648 -> 4143;
6648 -> 4140;
6649 -> 4260;
6650 -> 6649;
6650 -> 4155;
6651 -> 6650;
6651 -> 4157;
6651 -> 4155;
6652 -> 4153;
6652 -> 4187;
6652 -> 4256;
6652 -> 6651;
6652 -> 4265;
6652 -> 4181;
6652 -> 4182;
6652 -> 6637;
6652 -> 4189;
6652 -> 4186;
6653 -> 4201;
6654 -> 6653;
6654 -> 4022;
6655 -> 6654;
6655 -> 4024;
6655 -> 4022;
6656 -> 4220;
6657 -> 6656;
6657 -> 4060;
6658 -> 6657;
6658 -> 4062;
6658 -> 4060;
6659 -> 4058;
6659 -> 4090;
6659 -> 4216;
6659 -> 6658;
6659 -> 4225;
6659 -> 4086;
6659 -> 4087;
6659 -> 6644;
6659 -> 4097;
6659 -> 4089;
6660 -> 4240;
6661 -> 6660;
6661 -> 4109;
6662 -> 6661;
6662 -> 4111;
6662 -> 4109;
6663 -> 4107;
6663 -> 4141;
6663 -> 4236;
6663 -> 6662;
6663 -> 4245;
6663 -> 4135;
6663 -> 4136;
6663 -> 6648;
6663 -> 4143;
6663 -> 4140;
6664 -> 4260;
6665 -> 6664;
6665 -> 4155;
6666 -> 6665;
6666 -> 4157;
6666 -> 4155;
6667 -> 4153;
6667 -> 4187;
6667 -> 4256;
6667 -> 6666;
6667 -> 4265;
6667 -> 4181;
6667 -> 4182;
6667 -> 6652;
6667 -> 4189;
6667 -> 4186;
6668 -> 4201;
6669 -> 6668;
6669 -> 4022;
6670 -> 6669;
6670 -> 4024;
6670 -> 4022;
6671 -> 4220;
6672 -> 6671;
6672 -> 4060;
6673 -> 6672;
6673 -> 4062;
6673 -> 4060;
6674 -> 4058;
6674 -> 4090;
6674 -> 4216;
6674 -> 6673;
6674 -> 4225;
6674 -> 4086;
6674 -> 4087;
6674 -> 6659;
6674 -> 4097;
6674 -> 4089;
6675 -> 4240;
6676 -> 6675;
6676 -> 4109;
6677 -> 6676;
6677 -> 4111;
6677 -> 4109;
6678 -> 4107;
6678 -> 4141;
6678 -> 4236;
6678 -> 6677;
6678 -> 4245;
6678 -> 4135;
6678 -> 4136;
6678 -> 6663;
6678 -> 4143;
6678 -> 4140;
6679 -> 4260;
6680 -> 6679;
6680 -> 4155;
6681 -> 6680;
6681 -> 4157;
6681 -> 4155;
6682 -> 4153;
6682 -> 4187;
6682 -> 4256;
6682 -> 6681;
6682 -> 4265;
6682 -> 4181;
6682 -> 4182;
6682 -> 6667;
6682 -> 4189;
6682 -> 4186;
6683 -> 4201;
6684 -> 6683;
6684 -> 4022;
6685 -> 6684;
6685 -> 4024;
6685 -> 4022;
6686 -> 4220;
6687 -> 6686;
6687 -> 4060;
6688 -> 6687;
6688 -> 4062;
6688 -> 4060;
6689 -> 4058;
6689 -> 4090;
6689 -> 4216;
6689 -> 6688;
6689 -> 4225;
6689 -> 4086;
6689 -> 4087;
6689 -> 6674;
6689 -> 4097;
6689 -> 4089;
6690 -> 4240;
6691 -> 6690;
6691 -> 4109;
6692 -> 6691;
6692 -> 4111;
6692 -> 4109;
6693 -> 4107;
6693 -> 4141;
6693 -> 4236;
6693 -> 6692;
6693 -> 4245;
6693 -> 4135;
6693 -> 4136;
6693 -> 6678;
6693 -> 4143;
6693 -> 4140;
6694 -> 4260;
6695 -> 6694;
6695 -> 4155;
6696 -> 6695;
6696 -> 4157;
6696 -> 4155;
6697 -> 4153;
6697 -> 4187;
6697 -> 4256;
6697 -> 6696;
6697 -> 4265;
6697 -> 4181;
6697 -> 4182;
6697 -> 6682;
6697 -> 4189;
6697 -> 4186;
6698 -> 4201;
6699 -> 6698;
6699 -> 4022;
6700 -> 6699;
6700 -> 4024;
6700 -> 4022;
6701 -> 4220;
6702 -> 6701;
6702 -> 4060;
6703 -> 6702;
6703 -> 4062;
6703 -> 4060;
6704 -> 4058;
6704 -> 4090;
6704 -> 4216;
6704 -> 6703;
6704 -> 4225;
6704 -> 4086;
6704 -> 4087;
6704 -> 6689;
6704 -> 4097;
6704 -> 4089;
6705 -> 4240;
6706 -> 6705;
6706 -> 4109;
6707 -> 6706;
6707 -> 4111;
6707 -> 4109;
6708 -> 4107;
6708 -> 4141;
6708 -> 4236;
6708 -> 6707;
6708 -> 4245;
6708 -> 4135;
6708 -> 4136;
6708 -> 6693;
6708 -> 4143;
6708 -> 4140;
6709 -> 4260;
6710 -> 6709;
6710 -> 4155;
6711 -> 6710;
6711 -> 4157;
6711 -> 4155;
6712 -> 4153;
6712 -> 4187;
6712 -> 4256;
6712 -> 6711;
6712 -> 4265;
6712 -> 4181;
6712 -> 4182;
6712 -> 6697;
6712 -> 4189;
6712 -> 4186;
6713 -> 4201;
6714 -> 6713;
6714 -> 4022;
6715 -> 6714;
6715 -> 4024;
6715 -> 4022;
6716 -> 4220;
6717 -> 6716;
6717 -> 4060;
6718 -> 6717;
6718 -> 4062;
6718 -> 4060;
6719 -> 4058;
6719 -> 4090;
6719 -> 4216;
6719 -> 6718;
6719 -> 4225;
6719 -> 4086;
6719 -> 4087;
6719 -> 6704;
6719 -> 4097;
6719 -> 4089;
6720 -> 4240;
6721 -> 6720;
6721 -> 4109;
6722 -> 6721;
6722 -> 4111;
6722 -> 4109;
6723 -> 4107;
6723 -> 4141;
6723 -> 4236;
6723 -> 6722;
6723 -> 4245;
6723 -> 4135;
6723 -> 4136;
6723 -> 6708;
6723 -> 4143;
6723 -> 4140;
6724 -> 4260;
6725 -> 6724;
6725 -> 4155;
6726 -> 6725;
6726 -> 4157;
6726 -> 4155;
6727 -> 4153;
6727 -> 4187;
6727 -> 4256;
6727 -> 6726;
6727 -> 4265;
6727 -> 4181;
6727 -> 4182;
6727 -> 6712;
6727 -> 4189;
6727 -> 4186;
6728 -> 4201;
6729 -> 6728;
6729 -> 4022;
6730 -> 6729;
6730 -> 4024;
6730 -> 4022;
6731 -> 4220;
6732 -> 6731;
6732 -> 4060;
6733 -> 6732;
6733 -> 4062;
6733 -> 4060;
6734 -> 4058;
6734 -> 4090;
6734 -> 4216;
6734 -> 6733;
6734 -> 4225;
6734 -> 4086;
6734 -> 4087;
6734 -> 6719;
6734 -> 4097;
6734 -> 4089;
6735 -> 4240;
6736 -> 6735;
6736 -> 4109;
6737 -> 6736;
6737 -> 4111;
6737 -> 4109;
6738 -> 4107;
6738 -> 4141;
6738 -> 4236;
6738 -> 6737;
6738 -> 4245;
6738 -> 4135;
6738 -> 4136;
6738 -> 6723;
6738 -> 4143;
6738 -> 4140;
6739 -> 4260;
6740 -> 6739;
6740 -> 4155;
6741 -> 6740;
6741 -> 4157;
6741 -> 4155;
6742 -> 4153;
6742 -> 4187;
6742 -> 4256;
6742 -> 6741;
6742 -> 4265;
6742 -> 4181;
6742 -> 4182;
6742 -> 6727;
6742 -> 4189;
6742 -> 4186;
6743 -> 4201;
6744 -> 6743;
6744 -> 4022;
6745 -> 6744;
6745 -> 4024;
6745 -> 4022;
6746 -> 4220;
6747 -> 6746;
6747 -> 4060;
6748 -> 6747;
6748 -> 4062;
6748 -> 4060;
6749 -> 4058;
6749 -> 4090;
6749 -> 4216;
6749 -> 6748;
6749 -> 4225;
6749 -> 4086;
6749 -> 4087;
6749 -> 6734;
6749 -> 4097;
6749 -> 4089;
6750 -> 4240;
6751 -> 6750;
6751 -> 4109;
6752 -> 6751;
6752 -> 4111;
6752 -> 4109;
6753 -> 4107;
6753 -> 4141;
6753 -> 4236;
6753 -> 6752;
6753 -> 4245;
6753 -> 4135;
6753 -> 4136;
6753 -> 6738;
6753 -> 4143;
6753 -> 4140;
6754 -> 4260;
6755 -> 6754;
6755 -> 4155;
6756 -> 6755;
6756 -> 4157;
6756 -> 4155;
6757 -> 4153;
6757 -> 4187;
6757 -> 4256;
6757 -> 6756;
6757 -> 4265;
6757 -> 4181;
6757 -> 4182;
6757 -> 6742;
6757 -> 4189;
6757 -> 4186;
6758 -> 4201;
6759 -> 6758;
6759 -> 4022;
6760 -> 6759;
6760 -> 4024;
6760 -> 4022;
6761 -> 4220;
6762 -> 6761;
6762 -> 4060;
6763 -> 6762;
6763 -> 4062;
6763 -> 4060;
6764 -> 4058;
6764 -> 4090;
6764 -> 4216;
6764 -> 6763;
6764 -> 4225;
6764 -> 4086;
6764 -> 4087;
6764 -> 6749;
6764 -> 4097;
6764 -> 4089;
6765 -> 4240;
6766 -> 6765;
6766 -> 4109;
6767 -> 6766;
6767 -> 4111;
6767 -> 4109;
6768 -> 4107;
6768 -> 4141;
6768 -> 4236;
6768 -> 6767;
6768 -> 4245;
6768 -> 4135;
6768 -> 4136;
6768 -> 6753;
6768 -> 4143;
6768 -> 4140;
6769 -> 4260;
6770 -> 6769;
6770 -> 4155;
6771 -> 6770;
6771 -> 4157;
6771 -> 4155;
6772 -> 4153;
6772 -> 4187;
6772 -> 4256;
6772 -> 6771;
6772 -> 4265;
6772 -> 4181;
6772 -> 4182;
6772 -> 6757;
6772 -> 4189;
6772 -> 4186;
6773 -> 4201;
6774 -> 6773;
6774 -> 4022;
6775 -> 6774;
6775 -> 4024;
6775 -> 4022;
6776 -> 4220;
6777 -> 6776;
6777 -> 4060;
6778 -> 6777;
6778 -> 4062;
6778 -> 4060;
6779 -> 4058;
6779 -> 4090;
6779 -> 4216;
6779 -> 6778;
6779 -> 4225;
6779 -> 4086;
6779 -> 4087;
6779 -> 6764;
6779 -> 4097;
6779 -> 4089;
6780 -> 4240;
6781 -> 6780;
6781 -> 4109;
6782 -> 6781;
6782 -> 4111;
6782 -> 4109;
6783 -> 4107;
6783 -> 4141;
6783 -> 4236;
6783 -> 6782;
6783 -> 4245;
6783 -> 4135;
6783 -> 4136;
6783 -> 6768;
6783 -> 4143;
6783 -> 4140;
6784 -> 4260;
6785 -> 6784;
6785 -> 4155;
6786 -> 6785;
6786 -> 4157;
6786 -> 4155;
6787 -> 4153;
6787 -> 4187;
6787 -> 4256;
6787 -> 6786;
6787 -> 4265;
6787 -> 4181;
6787 -> 4182;
6787 -> 6772;
6787 -> 4189;
6787 -> 4186;
6788 -> 4201;
6789 -> 6788;
6789 -> 4022;
6790 -> 6789;
6790 -> 4024;
6790 -> 4022;
6791 -> 4220;
6792 -> 6791;
6792 -> 4060;
6793 -> 6792;
6793 -> 4062;
6793 -> 4060;
6794 -> 4058;
6794 -> 4090;
6794 -> 4216;
6794 -> 6793;
6794 -> 4225;
6794 -> 4086;
6794 -> 4087;
6794 -> 6779;
6794 -> 4097;
6794 -> 4089;
6795 -> 4240;
6796 -> 6795;
6796 -> 4109;
6797 -> 6796;
6797 -> 4111;
6797 -> 4109;
6798 -> 4107;
6798 -> 4141;
6798 -> 4236;
6798 -> 6797;
6798 -> 4245;
6798 -> 4135;
6798 -> 4136;
6798 -> 6783;
6798 -> 4143;
6798 -> 4140;
6799 -> 4260;
6800 -> 6799;
6800 -> 4155;
6801 -> 6800;
6801 -> 4157;
6801 -> 4155;
6802 -> 4153;
6802 -> 4187;
6802 -> 4256;
6802 -> 6801;
6802 -> 4265;
6802 -> 4181;
6802 -> 4182;
6802 -> 6787;
6802 -> 4189;
6802 -> 4186;
6803 -> 4201;
6804 -> 6803;
6804 -> 4022;
6805 -> 6804;
6805 -> 4024;
6805 -> 4022;
6806 -> 4220;
6807 -> 6806;
6807 -> 4060;
6808 -> 6807;
6808 -> 4062;
6808 -> 4060;
6809 -> 4058;
6809 -> 4090;
6809 -> 4216;
6809 -> 6808;
6809 -> 4225;
6809 -> 4086;
6809 -> 4087;
6809 -> 6794;
6809 -> 4097;
6809 -> 4089;
6810 -> 4240;
6811 -> 6810;
6811 -> 4109;
6812 -> 6811;
6812 -> 4111;
6812 -> 4109;
6813 -> 4107;
6813 -> 4141;
6813 -> 4236;
6813 -> 6812;
6813 -> 4245;
6813 -> 4135;
6813 -> 4136;
6813 -> 6798;
6813 -> 4143;
6813 -> 4140;
6814 -> 4260;
6815 -> 6814;
6815 -> 4155;
6816 -> 6815;
6816 -> 4157;
6816 -> 4155;
6817 -> 4153;
6817 -> 4187;
6817 -> 4256;
6817 -> 6816;
6817 -> 4265;
6817 -> 4181;
6817 -> 4182;
6817 -> 6802;
6817 -> 4189;
6817 -> 4186;
6818 -> 4201;
6819 -> 6818;
6819 -> 4022;
6820 -> 6819;
6820 -> 4024;
6820 -> 4022;
6821 -> 4220;
6822 -> 6821;
6822 -> 4060;
6823 -> 6822;
6823 -> 4062;
6823 -> 4060;
6824 -> 4058;
6824 -> 4090;
6824 -> 4216;
6824 -> 6823;
6824 -> 4225;
6824 -> 4086;
6824 -> 4087;
6824 -> 6809;
6824 -> 4097;
6824 -> 4089;
6825 -> 4240;
6826 -> 6825;
6826 -> 4109;
6827 -> 6826;
6827 -> 4111;
6827 -> 4109;
6828 -> 4107;
6828 -> 4141;
6828 -> 4236;
6828 -> 6827;
6828 -> 4245;
6828 -> 4135;
6828 -> 4136;
6828 -> 6813;
6828 -> 4143;
6828 -> 4140;
6829 -> 4260;
6830 -> 6829;
6830 -> 4155;
6831 -> 6830;
6831 -> 4157;
6831 -> 4155;
6832 -> 4153;
6832 -> 4187;
6832 -> 4256;
6832 -> 6831;
6832 -> 4265;
6832 -> 4181;
6832 -> 4182;
6832 -> 6817;
6832 -> 4189;
6832 -> 4186;
6833 -> 4201;
6834 -> 6833;
6834 -> 4022;
6835 -> 6834;
6835 -> 4024;
6835 -> 4022;
6836 -> 4220;
6837 -> 6836;
6837 -> 4060;
6838 -> 6837;
6838 -> 4062;
6838 -> 4060;
6839 -> 4058;
6839 -> 4090;
6839 -> 4216;
6839 -> 6838;
6839 -> 4225;
6839 -> 4086;
6839 -> 4087;
6839 -> 6824;
6839 -> 4097;
6839 -> 4089;
6840 -> 4240;
6841 -> 6840;
6841 -> 4109;
6842 -> 6841;
6842 -> 4111;
6842 -> 4109;
6843 -> 4107;
6843 -> 4141;
6843 -> 4236;
6843 -> 6842;
6843 -> 4245;
6843 -> 4135;
6843 -> 4136;
6843 -> 6828;
6843 -> 4143;
6843 -> 4140;
6844 -> 4260;
6845 -> 6844;
6845 -> 4155;
6846 -> 6845;
6846 -> 4157;
6846 -> 4155;
6847 -> 4153;
6847 -> 4187;
6847 -> 4256;
6847 -> 6846;
6847 -> 4265;
6847 -> 4181;
6847 -> 4182;
6847 -> 6832;
6847 -> 4189;
6847 -> 4186;
6848 -> 4201;
6849 -> 6848;
6849 -> 4022;
6850 -> 6849;
6850 -> 4024;
6850 -> 4022;
6851 -> 4220;
6852 -> 6851;
6852 -> 4060;
6853 -> 6852;
6853 -> 4062;
6853 -> 4060;
6854 -> 4058;
6854 -> 4090;
6854 -> 4216;
6854 -> 6853;
6854 -> 4225;
6854 -> 4086;
6854 -> 4087;
6854 -> 6839;
6854 -> 4097;
6854 -> 4089;
6855 -> 4240;
6856 -> 6855;
6856 -> 4109;
6857 -> 6856;
6857 -> 4111;
6857 -> 4109;
6858 -> 4107;
6858 -> 4141;
6858 -> 4236;
6858 -> 6857;
6858 -> 4245;
6858 -> 4135;
6858 -> 4136;
6858 -> 6843;
6858 -> 4143;
6858 -> 4140;
6859 -> 4260;
6860 -> 6859;
6860 -> 4155;
6861 -> 6860;
6861 -> 4157;
6861 -> 4155;
6862 -> 4153;
6862 -> 4187;
6862 -> 4256;
6862 -> 6861;
6862 -> 4265;
6862 -> 4181;
6862 -> 4182;
6862 -> 6847;
6862 -> 4189;
6862 -> 4186;
6863 -> 4201;
6864 -> 6863;
6864 -> 4022;
6865 -> 6864;
6865 -> 4024;
6865 -> 4022;
6866 -> 4220;
6867 -> 6866;
6867 -> 4060;
6868 -> 6867;
6868 -> 4062;
6868 -> 4060;
6869 -> 4058;
6869 -> 4090;
6869 -> 4216;
6869 -> 6868;
6869 -> 4225;
6869 -> 4086;
6869 -> 4087;
6869 -> 6854;
6869 -> 4097;
6869 -> 4089;
6870 -> 4240;
6871 -> 6870;
6871 -> 4109;
6872 -> 6871;
6872 -> 4111;
6872 -> 4109;
6873 -> 4107;
6873 -> 4141;
6873 -> 4236;
6873 -> 6872;
6873 -> 4245;
6873 -> 4135;
6873 -> 4136;
6873 -> 6858;
6873 -> 4143;
6873 -> 4140;
6874 -> 4260;
6875 -> 6874;
6875 -> 4155;
6876 -> 6875;
6876 -> 4157;
6876 -> 4155;
6877 -> 4153;
6877 -> 4187;
6877 -> 4256;
6877 -> 6876;
6877 -> 4265;
6877 -> 4181;
6877 -> 4182;
6877 -> 6862;
6877 -> 4189;
6877 -> 4186;
6878 -> 4201;
6879 -> 6878;
6879 -> 4022;
6880 -> 6879;
6880 -> 4024;
6880 -> 4022;
6881 -> 4220;
6882 -> 6881;
6882 -> 4060;
6883 -> 6882;
6883 -> 4062;
6883 -> 4060;
6884 -> 4058;
6884 -> 4090;
6884 -> 4216;
6884 -> 6883;
6884 -> 4225;
6884 -> 4086;
6884 -> 4087;
6884 -> 6869;
6884 -> 4097;
6884 -> 4089;
6885 -> 4240;
6886 -> 6885;
6886 -> 4109;
6887 -> 6886;
6887 -> 4111;
6887 -> 4109;
6888 -> 4107;
6888 -> 4141;
6888 -> 4236;
6888 -> 6887;
6888 -> 4245;
6888 -> 4135;
6888 -> 4136;
6888 -> 6873;
6888 -> 4143;
6888 -> 4140;
6889 -> 4260;
6890 -> 6889;
6890 -> 4155;
6891 -> 6890;
6891 -> 4157;
6891 -> 4155;
6892 -> 4153;
6892 -> 4187;
6892 -> 4256;
6892 -> 6891;
6892 -> 4265;
6892 -> 4181;
6892 -> 4182;
6892 -> 6877;
6892 -> 4189;
6892 -> 4186;
6893 -> 4201;
6894 -> 6893;
6894 -> 4022;
6895 -> 6894;
6895 -> 4024;
6895 -> 4022;
6896 -> 4220;
6897 -> 6896;
6897 -> 4060;
6898 -> 6897;
6898 -> 4062;
6898 -> 4060;
6899 -> 4058;
6899 -> 4090;
6899 -> 4216;
6899 -> 6898;
6899 -> 4225;
6899 -> 4086;
6899 -> 4087;
6899 -> 6884;
6899 -> 4097;
6899 -> 4089;
6900 -> 4240;
6901 -> 6900;
6901 -> 4109;
6902 -> 6901;
6902 -> 4111;
6902 -> 4109;
6903 -> 4107;
6903 -> 4141;
6903 -> 4236;
6903 -> 6902;
6903 -> 4245;
6903 -> 4135;
6903 -> 4136;
6903 -> 6888;
6903 -> 4143;
6903 -> 4140;
6904 -> 4260;
6905 -> 6904;
6905 -> 4155;
6906 -> 6905;
6906 -> 4157;
6906 -> 4155;
6907 -> 4153;
6907 -> 4187;
6907 -> 4256;
6907 -> 6906;
6907 -> 4265;
6907 -> 4181;
6907 -> 4182;
6907 -> 6892;
6907 -> 4189;
6907 -> 4186;
6908 -> 4201;
6909 -> 6908;
6909 -> 4022;
6910 -> 6909;
6910 -> 4024;
6910 -> 4022;
6911 -> 4220;
6912 -> 6911;
6912 -> 4060;
6913 -> 6912;
6913 -> 4062;
6913 -> 4060;
6914 -> 4058;
6914 -> 4090;
6914 -> 4216;
6914 -> 6913;
6914 -> 4225;
6914 -> 4086;
6914 -> 4087;
6914 -> 6899;
6914 -> 4097;
6914 -> 4089;
6915 -> 4240;
6916 -> 6915;
6916 -> 4109;
6917 -> 6916;
6917 -> 4111;
6917 -> 4109;
6918 -> 4107;
6918 -> 4141;
6918 -> 4236;
6918 -> 6917;
6918 -> 4245;
6918 -> 4135;
6918 -> 4136;
6918 -> 6903;
6918 -> 4143;
6918 -> 4140;
6919 -> 4260;
6920 -> 6919;
6920 -> 4155;
6921 -> 6920;
6921 -> 4157;
6921 -> 4155;
6922 -> 4153;
6922 -> 4187;
6922 -> 4256;
6922 -> 6921;
6922 -> 4265;
6922 -> 4181;
6922 -> 4182;
6922 -> 6907;
6922 -> 4189;
6922 -> 4186;
6923 -> 4201;
6924 -> 6923;
6924 -> 4022;
6925 -> 6924;
6925 -> 4024;
6925 -> 4022;
6926 -> 4220;
6927 -> 6926;
6927 -> 4060;
6928 -> 6927;
6928 -> 4062;
6928 -> 4060;
6929 -> 4058;
6929 -> 4090;
6929 -> 4216;
6929 -> 6928;
6929 -> 4225;
6929 -> 4086;
6929 -> 4087;
6929 -> 6914;
6929 -> 4097;
6929 -> 4089;
6930 -> 4240;
6931 -> 6930;
6931 -> 4109;
6932 -> 6931;
6932 -> 4111;
6932 -> 4109;
6933 -> 4107;
6933 -> 4141;
6933 -> 4236;
6933 -> 6932;
6933 -> 4245;
6933 -> 4135;
6933 -> 4136;
6933 -> 6918;
6933 -> 4143;
6933 -> 4140;
6934 -> 4260;
6935 -> 6934;
6935 -> 4155;
6936 -> 6935;
6936 -> 4157;
6936 -> 4155;
6937 -> 4153;
6937 -> 4187;
6937 -> 4256;
6937 -> 6936;
6937 -> 4265;
6937 -> 4181;
6937 -> 4182;
6937 -> 6922;
6937 -> 4189;
6937 -> 4186;
6938 -> 4201;
6939 -> 6938;
6939 -> 4022;
6940 -> 6939;
6940 -> 4024;
6940 -> 4022;
6941 -> 4220;
6942 -> 6941;
6942 -> 4060;
6943 -> 6942;
6943 -> 4062;
6943 -> 4060;
6944 -> 4058;
6944 -> 4090;
6944 -> 4216;
6944 -> 6943;
6944 -> 4225;
6944 -> 4086;
6944 -> 4087;
6944 -> 6929;
6944 -> 4097;
6944 -> 4089;
6945 -> 4240;
6946 -> 6945;
6946 -> 4109;
6947 -> 6946;
6947 -> 4111;
6947 -> 4109;
6948 -> 4107;
6948 -> 4141;
6948 -> 4236;
6948 -> 6947;
6948 -> 4245;
6948 -> 4135;
6948 -> 4136;
6948 -> 6933;
6948 -> 4143;
6948 -> 4140;
6949 -> 4260;
6950 -> 6949;
6950 -> 4155;
6951 -> 6950;
6951 -> 4157;
6951 -> 4155;
6952 -> 4153;
6952 -> 4187;
6952 -> 4256;
6952 -> 6951;
6952 -> 4265;
6952 -> 4181;
6952 -> 4182;
6952 -> 6937;
6952 -> 4189;
6952 -> 4186;
6953 -> 4201;
6954 -> 6953;
6954 -> 4022;
6955 -> 6954;
6955 -> 4024;
6955 -> 4022;
6956 -> 4220;
6957 -> 6956;
6957 -> 4060;
6958 -> 6957;
6958 -> 4062;
6958 -> 4060;
6959 -> 4058;
6959 -> 4090;
6959 -> 4216;
6959 -> 6958;
6959 -> 4225;
6959 -> 4086;
6959 -> 4087;
6959 -> 6944;
6959 -> 4097;
6959 -> 4089;
6960 -> 4240;
6961 -> 6960;
6961 -> 4109;
6962 -> 6961;
6962 -> 4111;
6962 -> 4109;
6963 -> 4107;
6963 -> 4141;
6963 -> 4236;
6963 -> 6962;
6963 -> 4245;
6963 -> 4135;
6963 -> 4136;
6963 -> 6948;
6963 -> 4143;
6963 -> 4140;
6964 -> 4260;
6965 -> 6964;
6965 -> 4155;
6966 -> 6965;
6966 -> 4157;
6966 -> 4155;
6967 -> 4153;
6967 -> 4187;
6967 -> 4256;
6967 -> 6966;
6967 -> 4265;
6967 -> 4181;
6967 -> 4182;
6967 -> 6952;
6967 -> 4189;
6967 -> 4186;
6968 -> 4201;
6969 -> 6968;
6969 -> 4022;
6970 -> 6969;
6970 -> 4024;
6970 -> 4022;
6971 -> 4220;
6972 -> 6971;
6972 -> 4060;
6973 -> 6972;
6973 -> 4062;
6973 -> 4060;
6974 -> 4058;
6974 -> 4090;
6974 -> 4216;
6974 -> 6973;
6974 -> 4225;
6974 -> 4086;
6974 -> 4087;
6974 -> 6959;
6974 -> 4097;
6974 -> 4089;
6975 -> 4240;
6976 -> 6975;
6976 -> 4109;
6977 -> 6976;
6977 -> 4111;
6977 -> 4109;
6978 -> 4107;
6978 -> 4141;
6978 -> 4236;
6978 -> 6977;
6978 -> 4245;
6978 -> 4135;
6978 -> 4136;
6978 -> 6963;
6978 -> 4143;
6978 -> 4140;
6979 -> 4260;
6980 -> 6979;
6980 -> 4155;
6981 -> 6980;
6981 -> 4157;
6981 -> 4155;
6982 -> 4153;
6982 -> 4187;
6982 -> 4256;
6982 -> 6981;
6982 -> 4265;
6982 -> 4181;
6982 -> 4182;
6982 -> 6967;
6982 -> 4189;
6982 -> 4186;
6983 -> 4201;
6984 -> 6983;
6984 -> 4022;
6985 -> 6984;
6985 -> 4024;
6985 -> 4022;
6986 -> 4220;
6987 -> 6986;
6987 -> 4060;
6988 -> 6987;
6988 -> 4062;
6988 -> 4060;
6989 -> 4058;
6989 -> 4090;
6989 -> 4216;
6989 -> 6988;
6989 -> 4225;
6989 -> 4086;
6989 -> 4087;
6989 -> 6974;
6989 -> 4097;
6989 -> 4089;
6990 -> 4240;
6991 -> 6990;
6991 -> 4109;
6992 -> 6991;
6992 -> 4111;
6992 -> 4109;
6993 -> 4107;
6993 -> 4141;
6993 -> 4236;
6993 -> 6992;
6993 -> 4245;
6993 -> 4135;
6993 -> 4136;
6993 -> 6978;
6993 -> 4143;
6993 -> 4140;
6994 -> 4260;
6995 -> 6994;
6995 -> 4155;
6996 -> 6995;
6996 -> 4157;
6996 -> 4155;
6997 -> 4153;
6997 -> 4187;
6997 -> 4256;
6997 -> 6996;
6997 -> 4265;
6997 -> 4181;
6997 -> 4182;
6997 -> 6982;
6997 -> 4189;
6997 -> 4186;
6998 -> 4201;
6999 -> 6998;
6999 -> 4022;
7000 -> 6999;
7000 -> 4024;
7000 -> 4022;
7001 -> 4220;
7002 -> 7001;
7002 -> 4060;
7003 -> 7002;
7003 -> 4062;
7003 -> 4060;
7004 -> 4058;
7004 -> 4090;
7004 -> 4216;
7004 -> 7003;
7004 -> 4225;
7004 -> 4086;
7004 -> 4087;
7004 -> 6989;
7004 -> 4097;
7004 -> 4089;
7005 -> 4240;
7006 -> 7005;
7006 -> 4109;
7007 -> 7006;
7007 -> 4111;
7007 -> 4109;
7008 -> 4107;
7008 -> 4141;
7008 -> 4236;
7008 -> 7007;
7008 -> 4245;
7008 -> 4135;
7008 -> 4136;
7008 -> 6993;
7008 -> 4143;
7008 -> 4140;
7009 -> 4260;
7010 -> 7009;
7010 -> 4155;
7011 -> 7010;
7011 -> 4157;
7011 -> 4155;
7012 -> 4153;
7012 -> 4187;
7012 -> 4256;
7012 -> 7011;
7012 -> 4265;
7012 -> 4181;
7012 -> 4182;
7012 -> 6997;
7012 -> 4189;
7012 -> 4186;
7013 -> 4201;
7014 -> 7013;
7014 -> 4022;
7015 -> 7014;
7015 -> 4024;
7015 -> 4022;
7016 -> 4220;
7017 -> 7016;
7017 -> 4060;
7018 -> 7017;
7018 -> 4062;
7018 -> 4060;
7019 -> 4058;
7019 -> 4090;
7019 -> 4216;
7019 -> 7018;
7019 -> 4225;
7019 -> 4086;
7019 -> 4087;
7019 -> 7004;
7019 -> 4097;
7019 -> 4089;
7020 -> 4240;
7021 -> 7020;
7021 -> 4109;
7022 -> 7021;
7022 -> 4111;
7022 -> 4109;
7023 -> 4107;
7023 -> 4141;
7023 -> 4236;
7023 -> 7022;
7023 -> 4245;
7023 -> 4135;
7023 -> 4136;
7023 -> 7008;
7023 -> 4143;
7023 -> 4140;
7024 -> 4260;
7025 -> 7024;
7025 -> 4155;
7026 -> 7025;
7026 -> 4157;
7026 -> 4155;
7027 -> 4153;
7027 -> 4187;
7027 -> 4256;
7027 -> 7026;
7027 -> 4265;
7027 -> 4181;
7027 -> 4182;
7027 -> 7012;
7027 -> 4189;
7027 -> 4186;
7028 -> 4201;
7029 -> 7028;
7029 -> 4022;
7030 -> 7029;
7030 -> 4024;
7030 -> 4022;
7031 -> 4220;
7032 -> 7031;
7032 -> 4060;
7033 -> 7032;
7033 -> 4062;
7033 -> 4060;
7034 -> 4058;
7034 -> 4090;
7034 -> 4216;
7034 -> 7033;
7034 -> 4225;
7034 -> 4086;
7034 -> 4087;
7034 -> 7019;
7034 -> 4097;
7034 -> 4089;
7035 -> 4240;
7036 -> 7035;
7036 -> 4109;
7037 -> 7036;
7037 -> 4111;
7037 -> 4109;
7038 -> 4107;
7038 -> 4141;
7038 -> 4236;
7038 -> 7037;
7038 -> 4245;
7038 -> 4135;
7038 -> 4136;
7038 -> 7023;
7038 -> 4143;
7038 -> 4140;
7039 -> 4260;
7040 -> 7039;
7040 -> 4155;
7041 -> 7040;
7041 -> 4157;
7041 -> 4155;
7042 -> 4153;
7042 -> 4187;
7042 -> 4256;
7042 -> 7041;
7042 -> 4265;
7042 -> 4181;
7042 -> 4182;
7042 -> 7027;
7042 -> 4189;
7042 -> 4186;
7043 -> 4201;
7044 -> 7043;
7044 -> 4022;
7045 -> 7044;
7045 -> 4024;
7045 -> 4022;
7046 -> 4220;
7047 -> 7046;
7047 -> 4060;
7048 -> 7047;
7048 -> 4062;
7048 -> 4060;
7049 -> 4058;
7049 -> 4090;
7049 -> 4216;
7049 -> 7048;
7049 -> 4225;
7049 -> 4086;
7049 -> 4087;
7049 -> 7034;
7049 -> 4097;
7049 -> 4089;
7050 -> 4240;
7051 -> 7050;
7051 -> 4109;
7052 -> 7051;
7052 -> 4111;
7052 -> 4109;
7053 -> 4107;
7053 -> 4141;
7053 -> 4236;
7053 -> 7052;
7053 -> 4245;
7053 -> 4135;
7053 -> 4136;
7053 -> 7038;
7053 -> 4143;
7053 -> 4140;
7054 -> 4260;
7055 -> 7054;
7055 -> 4155;
7056 -> 7055;
7056 -> 4157;
7056 -> 4155;
7057 -> 4153;
7057 -> 4187;
7057 -> 4256;
7057 -> 7056;
7057 -> 4265;
7057 -> 4181;
7057 -> 4182;
7057 -> 7042;
7057 -> 4189;
7057 -> 4186;
7058 -> 4201;
7059 -> 7058;
7059 -> 4022;
7060 -> 7059;
7060 -> 4024;
7060 -> 4022;
7061 -> 4220;
7062 -> 7061;
7062 -> 4060;
7063 -> 7062;
7063 -> 4062;
7063 -> 4060;
7064 -> 4058;
7064 -> 4090;
7064 -> 4216;
7064 -> 7063;
7064 -> 4225;
7064 -> 4086;
7064 -> 4087;
7064 -> 7049;
7064 -> 4097;
7064 -> 4089;
7065 -> 4240;
7066 -> 7065;
7066 -> 4109;
7067 -> 7066;
7067 -> 4111;
7067 -> 4109;
7068 -> 4107;
7068 -> 4141;
7068 -> 4236;
7068 -> 7067;
7068 -> 4245;
7068 -> 4135;
7068 -> 4136;
7068 -> 7053;
7068 -> 4143;
7068 -> 4140;
7069 -> 4260;
7070 -> 7069;
7070 -> 4155;
7071 -> 7070;
7071 -> 4157;
7071 -> 4155;
7072 -> 4153;
7072 -> 4187;
7072 -> 4256;
7072 -> 7071;
7072 -> 4265;
7072 -> 4181;
7072 -> 4182;
7072 -> 7057;
7072 -> 4189;
7072 -> 4186;
7073 -> 4201;
7074 -> 7073;
7074 -> 4022;
7075 -> 7074;
7075 -> 4024;
7075 -> 4022;
7076 -> 4220;
7077 -> 7076;
7077 -> 4060;
7078 -> 7077;
7078 -> 4062;
7078 -> 4060;
7079 -> 4058;
7079 -> 4090;
7079 -> 4216;
7079 -> 7078;
7079 -> 4225;
7079 -> 4086;
7079 -> 4087;
7079 -> 7064;
7079 -> 4097;
7079 -> 4089;
7080 -> 4240;
7081 -> 7080;
7081 -> 4109;
7082 -> 7081;
7082 -> 4111;
7082 -> 4109;
7083 -> 4107;
7083 -> 4141;
7083 -> 4236;
7083 -> 7082;
7083 -> 4245;
7083 -> 4135;
7083 -> 4136;
7083 -> 7068;
7083 -> 4143;
7083 -> 4140;
7084 -> 4260;
7085 -> 7084;
7085 -> 4155;
7086 -> 7085;
7086 -> 4157;
7086 -> 4155;
7087 -> 4153;
7087 -> 4187;
7087 -> 4256;
7087 -> 7086;
7087 -> 4265;
7087 -> 4181;
7087 -> 4182;
7087 -> 7072;
7087 -> 4189;
7087 -> 4186;
7088 -> 4201;
7089 -> 7088;
7089 -> 4022;
7090 -> 7089;
7090 -> 4024;
7090 -> 4022;
7091 -> 4220;
7092 -> 7091;
7092 -> 4060;
7093 -> 7092;
7093 -> 4062;
7093 -> 4060;
7094 -> 4058;
7094 -> 4090;
7094 -> 4216;
7094 -> 7093;
7094 -> 4225;
7094 -> 4086;
7094 -> 4087;
7094 -> 7079;
7094 -> 4097;
7094 -> 4089;
7095 -> 4240;
7096 -> 7095;
7096 -> 4109;
7097 -> 7096;
7097 -> 4111;
7097 -> 4109;
7098 -> 4107;
7098 -> 4141;
7098 -> 4236;
7098 -> 7097;
7098 -> 4245;
7098 -> 4135;
7098 -> 4136;
7098 -> 7083;
7098 -> 4143;
7098 -> 4140;
7099 -> 4260;
7100 -> 7099;
7100 -> 4155;
7101 -> 7100;
7101 -> 4157;
7101 -> 4155;
7102 -> 4153;
7102 -> 4187;
7102 -> 4256;
7102 -> 7101;
7102 -> 4265;
7102 -> 4181;
7102 -> 4182;
7102 -> 7087;
7102 -> 4189;
7102 -> 4186;
7103 -> 4201;
7104 -> 7103;
7104 -> 4022;
7105 -> 7104;
7105 -> 4024;
7105 -> 4022;
7106 -> 4220;
7107 -> 7106;
7107 -> 4060;
7108 -> 7107;
7108 -> 4062;
7108 -> 4060;
7109 -> 4058;
7109 -> 4090;
7109 -> 4216;
7109 -> 7108;
7109 -> 4225;
7109 -> 4086;
7109 -> 4087;
7109 -> 7094;
7109 -> 4097;
7109 -> 4089;
7110 -> 4240;
7111 -> 7110;
7111 -> 4109;
7112 -> 7111;
7112 -> 4111;
7112 -> 4109;
7113 -> 4107;
7113 -> 4141;
7113 -> 4236;
7113 -> 7112;
7113 -> 4245;
7113 -> 4135;
7113 -> 4136;
7113 -> 7098;
7113 -> 4143;
7113 -> 4140;
7114 -> 4260;
7115 -> 7114;
7115 -> 4155;
7116 -> 7115;
7116 -> 4157;
7116 -> 4155;
7117 -> 4153;
7117 -> 4187;
7117 -> 4256;
7117 -> 7116;
7117 -> 4265;
7117 -> 4181;
7117 -> 4182;
7117 -> 7102;
7117 -> 4189;
7117 -> 4186;
7118 -> 4201;
7119 -> 7118;
7119 -> 4022;
7120 -> 7119;
7120 -> 4024;
7120 -> 4022;
7121 -> 4220;
7122 -> 7121;
7122 -> 4060;
7123 -> 7122;
7123 -> 4062;
7123 -> 4060;
7124 -> 4058;
7124 -> 4090;
7124 -> 4216;
7124 -> 7123;
7124 -> 4225;
7124 -> 4086;
7124 -> 4087;
7124 -> 7109;
7124 -> 4097;
7124 -> 4089;
7125 -> 4240;
7126 -> 7125;
7126 -> 4109;
7127 -> 7126;
7127 -> 4111;
7127 -> 4109;
7128 -> 4107;
7128 -> 4141;
7128 -> 4236;
7128 -> 7127;
7128 -> 4245;
7128 -> 4135;
7128 -> 4136;
7128 -> 7113;
7128 -> 4143;
7128 -> 4140;
7129 -> 4260;
7130 -> 7129;
7130 -> 4155;
7131 -> 7130;
7131 -> 4157;
7131 -> 4155;
7132 -> 4153;
7132 -> 4187;
7132 -> 4256;
7132 -> 7131;
7132 -> 4265;
7132 -> 4181;
7132 -> 4182;
7132 -> 7117;
7132 -> 4189;
7132 -> 4186;
7133 -> 4201;
7134 -> 7133;
7134 -> 4022;
7135 -> 7134;
7135 -> 4024;
7135 -> 4022;
7136 -> 4220;
7137 -> 7136;
7137 -> 4060;
7138 -> 7137;
7138 -> 4062;
7138 -> 4060;
7139 -> 4058;
7139 -> 4090;
7139 -> 4216;
7139 -> 7138;
7139 -> 4225;
7139 -> 4086;
7139 -> 4087;
7139 -> 7124;
7139 -> 4097;
7139 -> 4089;
7140 -> 4240;
7141 -> 7140;
7141 -> 4109;
7142 -> 7141;
7142 -> 4111;
7142 -> 4109;
7143 -> 4107;
7143 -> 4141;
7143 -> 4236;
7143 -> 7142;
7143 -> 4245;
7143 -> 4135;
7143 -> 4136;
7143 -> 7128;
7143 -> 4143;
7143 -> 4140;
7144 -> 4260;
7145 -> 7144;
7145 -> 4155;
7146 -> 7145;
7146 -> 4157;
7146 -> 4155;
7147 -> 4153;
7147 -> 4187;
7147 -> 4256;
7147 -> 7146;
7147 -> 4265;
7147 -> 4181;
7147 -> 4182;
7147 -> 7132;
7147 -> 4189;
7147 -> 4186;
7148 -> 4201;
7149 -> 7148;
7149 -> 4022;
7150 -> 7149;
7150 -> 4024;
7150 -> 4022;
7151 -> 4220;
7152 -> 7151;
7152 -> 4060;
7153 -> 7152;
7153 -> 4062;
7153 -> 4060;
7154 -> 4058;
7154 -> 4090;
7154 -> 4216;
7154 -> 7153;
7154 -> 4225;
7154 -> 4086;
7154 -> 4087;
7154 -> 7139;
7154 -> 4097;
7154 -> 4089;
7155 -> 4240;
7156 -> 7155;
7156 -> 4109;
7157 -> 7156;
7157 -> 4111;
7157 -> 4109;
7158 -> 4107;
7158 -> 4141;
7158 -> 4236;
7158 -> 7157;
7158 -> 4245;
7158 -> 4135;
7158 -> 4136;
7158 -> 7143;
7158 -> 4143;
7158 -> 4140;
7159 -> 4260;
7160 -> 7159;
7160 -> 4155;
7161 -> 7160;
7161 -> 4157;
7161 -> 4155;
7162 -> 4153;
7162 -> 4187;
7162 -> 4256;
7162 -> 7161;
7162 -> 4265;
7162 -> 4181;
7162 -> 4182;
7162 -> 7147;
7162 -> 4189;
7162 -> 4186;
7163 -> 4201;
7164 -> 7163;
7164 -> 4022;
7165 -> 7164;
7165 -> 4024;
7165 -> 4022;
7166 -> 4220;
7167 -> 7166;
7167 -> 4060;
7168 -> 7167;
7168 -> 4062;
7168 -> 4060;
7169 -> 4058;
7169 -> 4090;
7169 -> 4216;
7169 -> 7168;
7169 -> 4225;
7169 -> 4086;
7169 -> 4087;
7169 -> 7154;
7169 -> 4097;
7169 -> 4089;
7170 -> 4240;
7171 -> 7170;
7171 -> 4109;
7172 -> 7171;
7172 -> 4111;
7172 -> 4109;
7173 -> 4107;
7173 -> 4141;
7173 -> 4236;
7173 -> 7172;
7173 -> 4245;
7173 -> 4135;
7173 -> 4136;
7173 -> 7158;
7173 -> 4143;
7173 -> 4140;
7174 -> 4260;
7175 -> 7174;
7175 -> 4155;
7176 -> 7175;
7176 -> 4157;
7176 -> 4155;
7177 -> 4153;
7177 -> 4187;
7177 -> 4256;
7177 -> 7176;
7177 -> 4265;
7177 -> 4181;
7177 -> 4182;
7177 -> 7162;
7177 -> 4189;
7177 -> 4186;
7178 -> 4201;
7179 -> 7178;
7179 -> 4022;
7180 -> 7179;
7180 -> 4024;
7180 -> 4022;
7181 -> 4220;
7182 -> 7181;
7182 -> 4060;
7183 -> 7182;
7183 -> 4062;
7183 -> 4060;
7184 -> 4058;
7184 -> 4090;
7184 -> 4216;
7184 -> 7183;
7184 -> 4225;
7184 -> 4086;
7184 -> 4087;
7184 -> 7169;
7184 -> 4097;
7184 -> 4089;
7185 -> 4240;
7186 -> 7185;
7186 -> 4109;
7187 -> 7186;
7187 -> 4111;
7187 -> 4109;
7188 -> 4107;
7188 -> 4141;
7188 -> 4236;
7188 -> 7187;
7188 -> 4245;
7188 -> 4135;
7188 -> 4136;
7188 -> 7173;
7188 -> 4143;
7188 -> 4140;
7189 -> 4260;
7190 -> 7189;
7190 -> 4155;
7191 -> 7190;
7191 -> 4157;
7191 -> 4155;
7192 -> 4153;
7192 -> 4187;
7192 -> 4256;
7192 -> 7191;
7192 -> 4265;
7192 -> 4181;
7192 -> 4182;
7192 -> 7177;
7192 -> 4189;
7192 -> 4186;
7193 -> 4201;
7194 -> 7193;
7194 -> 4022;
7195 -> 7194;
7195 -> 4024;
7195 -> 4022;
7196 -> 4220;
7197 -> 7196;
7197 -> 4060;
7198 -> 7197;
7198 -> 4062;
7198 -> 4060;
7199 -> 4058;
7199 -> 4090;
7199 -> 4216;
7199 -> 7198;
7199 -> 4225;
7199 -> 4086;
7199 -> 4087;
7199 -> 7184;
7199 -> 4097;
7199 -> 4089;
7200 -> 4240;
7201 -> 7200;
7201 -> 4109;
7202 -> 7201;
7202 -> 4111;
7202 -> 4109;
7203 -> 4107;
7203 -> 4141;
7203 -> 4236;
7203 -> 7202;
7203 -> 4245;
7203 -> 4135;
7203 -> 4136;
7203 -> 7188;
7203 -> 4143;
7203 -> 4140;
7204 -> 4260;
7205 -> 7204;
7205 -> 4155;
7206 -> 7205;
7206 -> 4157;
7206 -> 4155;
7207 -> 4153;
7207 -> 4187;
7207 -> 4256;
7207 -> 7206;
7207 -> 4265;
7207 -> 4181;
7207 -> 4182;
7207 -> 7192;
7207 -> 4189;
7207 -> 4186;
7208 -> 4201;
7209 -> 7208;
7209 -> 4022;
7210 -> 7209;
7210 -> 4024;
7210 -> 4022;
7211 -> 4220;
7212 -> 7211;
7212 -> 4060;
7213 -> 7212;
7213 -> 4062;
7213 -> 4060;
7214 -> 4058;
7214 -> 4090;
7214 -> 4216;
7214 -> 7213;
7214 -> 4225;
7214 -> 4086;
7214 -> 4087;
7214 -> 7199;
7214 -> 4097;
7214 -> 4089;
7215 -> 4240;
7216 -> 7215;
7216 -> 4109;
7217 -> 7216;
7217 -> 4111;
7217 -> 4109;
7218 -> 4107;
7218 -> 4141;
7218 -> 4236;
7218 -> 7217;
7218 -> 4245;
7218 -> 4135;
7218 -> 4136;
7218 -> 7203;
7218 -> 4143;
7218 -> 4140;
7219 -> 4260;
7220 -> 7219;
7220 -> 4155;
7221 -> 7220;
7221 -> 4157;
7221 -> 4155;
7222 -> 4153;
7222 -> 4187;
7222 -> 4256;
7222 -> 7221;
7222 -> 4265;
7222 -> 4181;
7222 -> 4182;
7222 -> 7207;
7222 -> 4189;
7222 -> 4186;
7223 -> 4201;
7224 -> 7223;
7224 -> 4022;
7225 -> 7224;
7225 -> 4024;
7225 -> 4022;
7226 -> 4220;
7227 -> 7226;
7227 -> 4060;
7228 -> 7227;
7228 -> 4062;
7228 -> 4060;
7229 -> 4058;
7229 -> 4090;
7229 -> 4216;
7229 -> 7228;
7229 -> 4225;
7229 -> 4086;
7229 -> 4087;
7229 -> 7214;
7229 -> 4097;
7229 -> 4089;
7230 -> 4240;
7231 -> 7230;
7231 -> 4109;
7232 -> 7231;
7232 -> 4111;
7232 -> 4109;
7233 -> 4107;
7233 -> 4141;
7233 -> 4236;
7233 -> 7232;
7233 -> 4245;
7233 -> 4135;
7233 -> 4136;
7233 -> 7218;
7233 -> 4143;
7233 -> 4140;
7234 -> 4260;
7235 -> 7234;
7235 -> 4155;
7236 -> 7235;
7236 -> 4157;
7236 -> 4155;
7237 -> 4153;
7237 -> 4187;
7237 -> 4256;
7237 -> 7236;
7237 -> 4265;
7237 -> 4181;
7237 -> 4182;
7237 -> 7222;
7237 -> 4189;
7237 -> 4186;
7238 -> 4201;
7239 -> 7238;
7239 -> 4022;
7240 -> 7239;
7240 -> 4024;
7240 -> 4022;
7241 -> 4220;
7242 -> 7241;
7242 -> 4060;
7243 -> 7242;
7243 -> 4062;
7243 -> 4060;
7244 -> 4058;
7244 -> 4090;
7244 -> 4216;
7244 -> 7243;
7244 -> 4225;
7244 -> 4086;
7244 -> 4087;
7244 -> 7229;
7244 -> 4097;
7244 -> 4089;
7245 -> 4240;
7246 -> 7245;
7246 -> 4109;
7247 -> 7246;
7247 -> 4111;
7247 -> 4109;
7248 -> 4107;
7248 -> 4141;
7248 -> 4236;
7248 -> 7247;
7248 -> 4245;
7248 -> 4135;
7248 -> 4136;
7248 -> 7233;
7248 -> 4143;
7248 -> 4140;
7249 -> 4260;
7250 -> 7249;
7250 -> 4155;
7251 -> 7250;
7251 -> 4157;
7251 -> 4155;
7252 -> 4153;
7252 -> 4187;
7252 -> 4256;
7252 -> 7251;
7252 -> 4265;
7252 -> 4181;
7252 -> 4182;
7252 -> 7237;
7252 -> 4189;
7252 -> 4186;
7253 -> 4201;
7254 -> 7253;
7254 -> 4022;
7255 -> 7254;
7255 -> 4024;
7255 -> 4022;
7256 -> 4220;
7257 -> 7256;
7257 -> 4060;
7258 -> 7257;
7258 -> 4062;
7258 -> 4060;
7259 -> 4058;
7259 -> 4090;
7259 -> 4216;
7259 -> 7258;
7259 -> 4225;
7259 -> 4086;
7259 -> 4087;
7259 -> 7244;
7259 -> 4097;
7259 -> 4089;
7260 -> 4240;
7261 -> 7260;
7261 -> 4109;
7262 -> 7261;
7262 -> 4111;
7262 -> 4109;
7263 -> 4107;
7263 -> 4141;
7263 -> 4236;
7263 -> 7262;
7263 -> 4245;
7263 -> 4135;
7263 -> 4136;
7263 -> 7248;
7263 -> 4143;
7263 -> 4140;
7264 -> 4260;
7265 -> 7264;
7265 -> 4155;
7266 -> 7265;
7266 -> 4157;
7266 -> 4155;
7267 -> 4153;
7267 -> 4187;
7267 -> 4256;
7267 -> 7266;
7267 -> 4265;
7267 -> 4181;
7267 -> 4182;
7267 -> 7252;
7267 -> 4189;
7267 -> 4186;
7268 -> 4201;
7269 -> 7268;
7269 -> 4022;
7270 -> 7269;
7270 -> 4024;
7270 -> 4022;
7271 -> 4220;
7272 -> 7271;
7272 -> 4060;
7273 -> 7272;
7273 -> 4062;
7273 -> 4060;
7274 -> 4058;
7274 -> 4090;
7274 -> 4216;
7274 -> 7273;
7274 -> 4225;
7274 -> 4086;
7274 -> 4087;
7274 -> 7259;
7274 -> 4097;
7274 -> 4089;
7275 -> 4240;
7276 -> 7275;
7276 -> 4109;
7277 -> 7276;
7277 -> 4111;
7277 -> 4109;
7278 -> 4107;
7278 -> 4141;
7278 -> 4236;
7278 -> 7277;
7278 -> 4245;
7278 -> 4135;
7278 -> 4136;
7278 -> 7263;
7278 -> 4143;
7278 -> 4140;
7279 -> 4260;
7280 -> 7279;
7280 -> 4155;
7281 -> 7280;
7281 -> 4157;
7281 -> 4155;
7282 -> 4153;
7282 -> 4187;
7282 -> 4256;
7282 -> 7281;
7282 -> 4265;
7282 -> 4181;
7282 -> 4182;
7282 -> 7267;
7282 -> 4189;
7282 -> 4186;
7283 -> 4201;
7284 -> 7283;
7284 -> 4022;
7285 -> 7284;
7285 -> 4024;
7285 -> 4022;
7286 -> 4220;
7287 -> 7286;
7287 -> 4060;
7288 -> 7287;
7288 -> 4062;
7288 -> 4060;
7289 -> 4058;
7289 -> 4090;
7289 -> 4216;
7289 -> 7288;
7289 -> 4225;
7289 -> 4086;
7289 -> 4087;
7289 -> 7274;
7289 -> 4097;
7289 -> 4089;
7290 -> 4240;
7291 -> 7290;
7291 -> 4109;
7292 -> 7291;
7292 -> 4111;
7292 -> 4109;
7293 -> 4107;
7293 -> 4141;
7293 -> 4236;
7293 -> 7292;
7293 -> 4245;
7293 -> 4135;
7293 -> 4136;
7293 -> 7278;
7293 -> 4143;
7293 -> 4140;
7294 -> 4260;
7295 -> 7294;
7295 -> 4155;
7296 -> 7295;
7296 -> 4157;
7296 -> 4155;
7297 -> 4153;
7297 -> 4187;
7297 -> 4256;
7297 -> 7296;
7297 -> 4265;
7297 -> 4181;
7297 -> 4182;
7297 -> 7282;
7297 -> 4189;
7297 -> 4186;
7298 -> 4201;
7299 -> 7298;
7299 -> 4022;
7300 -> 7299;
7300 -> 4024;
7300 -> 4022;
7301 -> 4220;
7302 -> 7301;
7302 -> 4060;
7303 -> 7302;
7303 -> 4062;
7303 -> 4060;
7304 -> 4058;
7304 -> 4090;
7304 -> 4216;
7304 -> 7303;
7304 -> 4225;
7304 -> 4086;
7304 -> 4087;
7304 -> 7289;
7304 -> 4097;
7304 -> 4089;
7305 -> 4240;
7306 -> 7305;
7306 -> 4109;
7307 -> 7306;
7307 -> 4111;
7307 -> 4109;
7308 -> 4107;
7308 -> 4141;
7308 -> 4236;
7308 -> 7307;
7308 -> 4245;
7308 -> 4135;
7308 -> 4136;
7308 -> 7293;
7308 -> 4143;
7308 -> 4140;
7309 -> 4260;
7310 -> 7309;
7310 -> 4155;
7311 -> 7310;
7311 -> 4157;
7311 -> 4155;
7312 -> 4153;
7312 -> 4187;
7312 -> 4256;
7312 -> 7311;
7312 -> 4265;
7312 -> 4181;
7312 -> 4182;
7312 -> 7297;
7312 -> 4189;
7312 -> 4186;
7313 -> 4201;
7314 -> 7313;
7314 -> 4022;
7315 -> 7314;
7315 -> 4024;
7315 -> 4022;
7316 -> 4220;
7317 -> 7316;
7317 -> 4060;
7318 -> 7317;
7318 -> 4062;
7318 -> 4060;
7319 -> 4058;
7319 -> 4090;
7319 -> 4216;
7319 -> 7318;
7319 -> 4225;
7319 -> 4086;
7319 -> 4087;
7319 -> 7304;
7319 -> 4097;
7319 -> 4089;
7320 -> 4240;
7321 -> 7320;
7321 -> 4109;
7322 -> 7321;
7322 -> 4111;
7322 -> 4109;
7323 -> 4107;
7323 -> 4141;
7323 -> 4236;
7323 -> 7322;
7323 -> 4245;
7323 -> 4135;
7323 -> 4136;
7323 -> 7308;
7323 -> 4143;
7323 -> 4140;
7324 -> 4260;
7325 -> 7324;
7325 -> 4155;
7326 -> 7325;
7326 -> 4157;
7326 -> 4155;
7327 -> 4153;
7327 -> 4187;
7327 -> 4256;
7327 -> 7326;
7327 -> 4265;
7327 -> 4181;
7327 -> 4182;
7327 -> 7312;
7327 -> 4189;
7327 -> 4186;
7328 -> 4201;
7329 -> 7328;
7329 -> 4022;
7330 -> 7329;
7330 -> 4024;
7330 -> 4022;
7331 -> 4220;
7332 -> 7331;
7332 -> 4060;
7333 -> 7332;
7333 -> 4062;
7333 -> 4060;
7334 -> 4058;
7334 -> 4090;
7334 -> 4216;
7334 -> 7333;
7334 -> 4225;
7334 -> 4086;
7334 -> 4087;
7334 -> 7319;
7334 -> 4097;
7334 -> 4089;
7335 -> 4240;
7336 -> 7335;
7336 -> 4109;
7337 -> 7336;
7337 -> 4111;
7337 -> 4109;
7338 -> 4107;
7338 -> 4141;
7338 -> 4236;
7338 -> 7337;
7338 -> 4245;
7338 -> 4135;
7338 -> 4136;
7338 -> 7323;
7338 -> 4143;
7338 -> 4140;
7339 -> 4260;
7340 -> 7339;
7340 -> 4155;
7341 -> 7340;
7341 -> 4157;
7341 -> 4155;
7342 -> 4153;
7342 -> 4187;
7342 -> 4256;
7342 -> 7341;
7342 -> 4265;
7342 -> 4181;
7342 -> 4182;
7342 -> 7327;
7342 -> 4189;
7342 -> 4186;
7343 -> 4201;
7344 -> 7343;
7344 -> 4022;
7345 -> 7344;
7345 -> 4024;
7345 -> 4022;
7346 -> 4220;
7347 -> 7346;
7347 -> 4060;
7348 -> 7347;
7348 -> 4062;
7348 -> 4060;
7349 -> 4058;
7349 -> 4090;
7349 -> 4216;
7349 -> 7348;
7349 -> 4225;
7349 -> 4086;
7349 -> 4087;
7349 -> 7334;
7349 -> 4097;
7349 -> 4089;
7350 -> 4240;
7351 -> 7350;
7351 -> 4109;
7352 -> 7351;
7352 -> 4111;
7352 -> 4109;
7353 -> 4107;
7353 -> 4141;
7353 -> 4236;
7353 -> 7352;
7353 -> 4245;
7353 -> 4135;
7353 -> 4136;
7353 -> 7338;
7353 -> 4143;
7353 -> 4140;
7354 -> 4260;
7355 -> 7354;
7355 -> 4155;
7356 -> 7355;
7356 -> 4157;
7356 -> 4155;
7357 -> 4153;
7357 -> 4187;
7357 -> 4256;
7357 -> 7356;
7357 -> 4265;
7357 -> 4181;
7357 -> 4182;
7357 -> 7342;
7357 -> 4189;
7357 -> 4186;
7358 -> 4201;
7359 -> 7358;
7359 -> 4022;
7360 -> 7359;
7360 -> 4024;
7360 -> 4022;
7361 -> 4220;
7362 -> 7361;
7362 -> 4060;
7363 -> 7362;
7363 -> 4062;
7363 -> 4060;
7364 -> 4058;
7364 -> 4090;
7364 -> 4216;
7364 -> 7363;
7364 -> 4225;
7364 -> 4086;
7364 -> 4087;
7364 -> 7349;
7364 -> 4097;
7364 -> 4089;
7365 -> 4240;
7366 -> 7365;
7366 -> 4109;
7367 -> 7366;
7367 -> 4111;
7367 -> 4109;
7368 -> 4107;
7368 -> 4141;
7368 -> 4236;
7368 -> 7367;
7368 -> 4245;
7368 -> 4135;
7368 -> 4136;
7368 -> 7353;
7368 -> 4143;
7368 -> 4140;
7369 -> 4260;
7370 -> 7369;
7370 -> 4155;
7371 -> 7370;
7371 -> 4157;
7371 -> 4155;
7372 -> 4153;
7372 -> 4187;
7372 -> 4256;
7372 -> 7371;
7372 -> 4265;
7372 -> 4181;
7372 -> 4182;
7372 -> 7357;
7372 -> 4189;
7372 -> 4186;
7373 -> 4201;
7374 -> 7373;
7374 -> 4022;
7375 -> 7374;
7375 -> 4024;
7375 -> 4022;
7376 -> 4220;
7377 -> 7376;
7377 -> 4060;
7378 -> 7377;
7378 -> 4062;
7378 -> 4060;
7379 -> 4058;
7379 -> 4090;
7379 -> 4216;
7379 -> 7378;
7379 -> 4225;
7379 -> 4086;
7379 -> 4087;
7379 -> 7364;
7379 -> 4097;
7379 -> 4089;
7380 -> 4240;
7381 -> 7380;
7381 -> 4109;
7382 -> 7381;
7382 -> 4111;
7382 -> 4109;
7383 -> 4107;
7383 -> 4141;
7383 -> 4236;
7383 -> 7382;
7383 -> 4245;
7383 -> 4135;
7383 -> 4136;
7383 -> 7368;
7383 -> 4143;
7383 -> 4140;
7384 -> 4260;
7385 -> 7384;
7385 -> 4155;
7386 -> 7385;
7386 -> 4157;
7386 -> 4155;
7387 -> 4153;
7387 -> 4187;
7387 -> 4256;
7387 -> 7386;
7387 -> 4265;
7387 -> 4181;
7387 -> 4182;
7387 -> 7372;
7387 -> 4189;
7387 -> 4186;
7388 -> 4201;
7389 -> 7388;
7389 -> 4022;
7390 -> 7389;
7390 -> 4024;
7390 -> 4022;
7391 -> 4220;
7392 -> 7391;
7392 -> 4060;
7393 -> 7392;
7393 -> 4062;
7393 -> 4060;
7394 -> 4058;
7394 -> 4090;
7394 -> 4216;
7394 -> 7393;
7394 -> 4225;
7394 -> 4086;
7394 -> 4087;
7394 -> 7379;
7394 -> 4097;
7394 -> 4089;
7395 -> 4240;
7396 -> 7395;
7396 -> 4109;
7397 -> 7396;
7397 -> 4111;
7397 -> 4109;
7398 -> 4107;
7398 -> 4141;
7398 -> 4236;
7398 -> 7397;
7398 -> 4245;
7398 -> 4135;
7398 -> 4136;
7398 -> 7383;
7398 -> 4143;
7398 -> 4140;
7399 -> 4260;
7400 -> 7399;
7400 -> 4155;
7401 -> 7400;
7401 -> 4157;
7401 -> 4155;
7402 -> 4153;
7402 -> 4187;
7402 -> 4256;
7402 -> 7401;
7402 -> 4265;
7402 -> 4181;
7402 -> 4182;
7402 -> 7387;
7402 -> 4189;
7402 -> 4186;
7403 -> 4201;
7404 -> 7403;
7404 -> 4022;
7405 -> 7404;
7405 -> 4024;
7405 -> 4022;
7406 -> 4220;
7407 -> 7406;
7407 -> 4060;
7408 -> 7407;
7408 -> 4062;
7408 -> 4060;
7409 -> 4058;
7409 -> 4090;
7409 -> 4216;
7409 -> 7408;
7409 -> 4225;
7409 -> 4086;
7409 -> 4087;
7409 -> 7394;
7409 -> 4097;
7409 -> 4089;
7410 -> 4240;
7411 -> 7410;
7411 -> 4109;
7412 -> 7411;
7412 -> 4111;
7412 -> 4109;
7413 -> 4107;
7413 -> 4141;
7413 -> 4236;
7413 -> 7412;
7413 -> 4245;
7413 -> 4135;
7413 -> 4136;
7413 -> 7398;
7413 -> 4143;
7413 -> 4140;
7414 -> 4260;
7415 -> 7414;
7415 -> 4155;
7416 -> 7415;
7416 -> 4157;
7416 -> 4155;
7417 -> 4153;
7417 -> 4187;
7417 -> 4256;
7417 -> 7416;
7417 -> 4265;
7417 -> 4181;
7417 -> 4182;
7417 -> 7402;
7417 -> 4189;
7417 -> 4186;
7418 -> 3996;
7418 -> 3994;
7419 -> 3995;
7419 -> 3994;
7420 -> 3997;
7420 -> 3994;
7421 -> 3994;
7422 -> 7418;
7422 -> 7421;
7423 -> 7419;
7423 -> 7421;
7424 -> 7420;
7424 -> 7421;
7425 -> 7422;
7425 -> 3999;
7425 -> 7421;
7426 -> 7421;
7427 -> 7423;
7427 -> 7426;
7427 -> 7421;
7428 -> 7427;
7429 -> 7424;
7429 -> 7428;
7429 -> 7427;
7430 -> 4003;
7430 -> 4002;
7430 -> 7422;
7430 -> 7429;
7431 -> 3979;
7432 -> 3983;
7432 -> 7431;
7432 -> 3979;
7433 -> 7430;
7433 -> 3979;
7434 -> 7433;
7434 -> 3763;
7435 -> 3763;
7436 -> 7434;
7436 -> 7435;
7437 -> 3752;
7437 -> 7435;
7438 -> 7435;
7439 -> 7436;
7439 -> 7438;
7439 -> 7435;
7440 -> 7437;
7440 -> 3723;
7440 -> 3759;
7440 -> 3758;
7440 -> 7435;
7441 -> 7437;
7441 -> 3759;
7441 -> 3758;
7441 -> 3723;
7441 -> 7435;
7442 -> 7436;
7442 -> 7441;
7442 -> 7435;
7443 -> 7437;
7443 -> 3723;
7443 -> 7435;
7444 -> 3763;
7445 -> 3763;
7446 -> 7433;
7446 -> 7445;
7447 -> 7446;
7447 -> 7445;
7448 -> 7447;
7448 -> 3763;
7449 -> 3750;
7450 -> 3687;
7451 -> 7450;
7451 -> 3693;
7451 -> 3687;
7452 -> 3693;
7452 -> 3687;
7453 -> 3693;
7453 -> 3687;
7454 -> 3693;
7454 -> 3687;
7455 -> 3693;
7455 -> 3687;
7456 -> 3693;
7456 -> 3687;
7457 -> 3693;
7457 -> 3687;
7458 -> 3687;
7459 -> 7458;
7459 -> 3693;
7459 -> 3687;
7460 -> 3693;
7460 -> 7459;
7460 -> 3687;
7461 -> 3687;
7462 -> 7461;
7462 -> 3693;
7462 -> 3687;
7463 -> 3686;
7463 -> 3535;
7464 -> 3535;
7465 -> 7463;
7465 -> 7464;
7466 -> 7465;
7466 -> 7464;
7467 -> 0;
7467 -> 7464;
7468 -> 7464;
7469 -> 7466;
7469 -> 7468;
7470 -> 7467;
7470 -> 7468;
7471 -> 7465;
7471 -> 7468;
7472 -> 7468;
7473 -> 7471;
7473 -> 7454;
7473 -> 7472;
7473 -> 7468;
7474 -> 7469;
7474 -> 7468;
7475 -> 7468;
7476 -> 7474;
7476 -> 7475;
7477 -> 7475;
7478 -> 7475;
7479 -> 7476;
7479 -> 7474;
7479 -> 7475;
7480 -> 7475;
7481 -> 7475;
7482 -> 7479;
7482 -> 7481;
7483 -> 7480;
7483 -> 7481;
7484 -> 7482;
7484 -> 7474;
7484 -> 7481;
7485 -> 7484;
7485 -> 7483;
7485 -> 7481;
7486 -> 7482;
7486 -> 7484;
7486 -> 7481;
7487 -> 7486;
7487 -> 7483;
7487 -> 7481;
7488 -> 7482;
7488 -> 7486;
7488 -> 7481;
7489 -> 7488;
7489 -> 7483;
7489 -> 7481;
7490 -> 7482;
7490 -> 7488;
7490 -> 7481;
7491 -> 7490;
7491 -> 7483;
7491 -> 7481;
7492 -> 7477;
7492 -> 7475;
7493 -> 7480;
7493 -> 7475;
7494 -> 7478;
7494 -> 7475;
7495 -> 0;
7495 -> 7475;
7496 -> 7492;
7496 -> 7493;
7496 -> 7494;
7496 -> 7495;
7496 -> 7476;
7496 -> 7490;
7496 -> 7484;
7496 -> 7486;
7496 -> 7488;
7496 -> 7485;
7496 -> 7487;
7496 -> 7489;
7496 -> 7491;
7496 -> 7475;
7497 -> 7475;
7498 -> 7496;
7498 -> 7497;
7499 -> 7498;
7499 -> 7496;
7499 -> 7497;
7500 -> 7496;
7500 -> 7497;
7501 -> 7497;
7502 -> 7500;
7502 -> 7501;
7503 -> 7502;
7503 -> 7499;
7503 -> 7501;
7504 -> 7501;
7505 -> 7502;
7505 -> 7499;
7505 -> 7504;
7505 -> 7501;
7506 -> 7502;
7506 -> 7499;
7506 -> 7505;
7507 -> 7506;
7507 -> 7497;
7508 -> 7507;
7508 -> 7500;
7508 -> 7497;
7509 -> 7496;
7509 -> 7497;
7510 -> 7509;
7510 -> 7508;
7510 -> 7497;
7511 -> 7496;
7511 -> 7497;
7512 -> 7496;
7512 -> 7497;
7513 -> 7497;
7514 -> 7511;
7514 -> 7510;
7514 -> 7513;
7514 -> 7497;
7515 -> 0;
7515 -> 7475;
7516 -> 7475;
7517 -> 7515;
7517 -> 7516;
7518 -> 7476;
7518 -> 7516;
7519 -> 7517;
7519 -> 7516;
7520 -> 7516;
7521 -> 7519;
7521 -> 7520;
7522 -> 7521;
7522 -> 0;
7522 -> 7520;
7523 -> 7522;
7524 -> 7516;
7525 -> 7518;
7525 -> 7524;
7526 -> 7525;
7526 -> 7510;
7526 -> 7524;
7527 -> 7526;
7527 -> 7516;
7528 -> 7516;
7529 -> 7527;
7529 -> 7528;
7530 -> 7529;
7530 -> 7516;
7531 -> 7530;
7531 -> 7517;
7531 -> 7516;
7532 -> 7531;
7533 -> 7518;
7533 -> 7532;
7534 -> 7532;
7535 -> 7533;
7535 -> 7510;
7535 -> 7534;
7536 -> 7534;
7537 -> 7536;
7537 -> 7532;
7538 -> 7537;
7538 -> 7533;
7538 -> 7532;
7539 -> 7532;
7540 -> 7539;
7540 -> 7533;
7540 -> 7532;
7541 -> 7532;
7542 -> 7533;
7542 -> 7510;
7542 -> 7541;
7542 -> 7532;
7543 -> 7533;
7543 -> 7510;
7543 -> 7532;
7544 -> 7531;
7545 -> 7527;
7545 -> 7531;
7546 -> 7510;
7546 -> 7475;
7547 -> 7545;
7547 -> 7475;
7548 -> 7546;
7548 -> 7547;
7548 -> 7476;
7548 -> 7510;
7548 -> 7538;
7548 -> 7540;
7548 -> 7543;
7548 -> 7475;
7549 -> 7475;
7550 -> 7548;
7550 -> 7549;
7551 -> 7548;
7551 -> 7549;
7552 -> 7550;
7552 -> 7549;
7553 -> 7549;
7554 -> 7553;
7554 -> 7552;
7554 -> 7549;
7555 -> 7553;
7555 -> 7549;
7556 -> 7555;
7556 -> 7554;
7556 -> 7549;
7557 -> 7548;
7557 -> 7549;
7558 -> 7548;
7558 -> 7549;
7559 -> 7557;
7559 -> 7556;
7559 -> 7549;
7560 -> 7557;
7560 -> 7556;
7560 -> 7549;
7561 -> 7475;
7562 -> 7510;
7562 -> 7561;
7562 -> 7475;
7563 -> 7556;
7563 -> 7475;
7564 -> 7476;
7564 -> 7556;
7564 -> 7475;
7565 -> 7475;
7566 -> 7564;
7566 -> 7565;
7567 -> 7510;
7567 -> 7565;
7568 -> 7567;
7568 -> 7510;
7568 -> 7565;
7569 -> 7566;
7569 -> 7568;
7569 -> 7556;
7569 -> 7510;
7569 -> 7565;
7570 -> 7567;
7570 -> 7510;
7570 -> 7565;
7571 -> 7566;
7571 -> 7570;
7571 -> 7569;
7571 -> 7510;
7571 -> 7565;
7572 -> 7567;
7572 -> 7510;
7572 -> 7565;
7573 -> 7566;
7573 -> 7572;
7573 -> 7571;
7573 -> 7510;
7573 -> 7565;
7574 -> 7567;
7574 -> 7510;
7574 -> 7565;
7575 -> 7566;
7575 -> 7574;
7575 -> 7573;
7575 -> 7510;
7575 -> 7565;
7576 -> 7475;
7577 -> 7474;
7577 -> 7563;
7577 -> 7575;
7577 -> 7468;
7578 -> 7577;
7578 -> 3535;
7579 -> 7578;
7579 -> 3535;
7580 -> 7578;
7580 -> 7577;
7580 -> 3535;
7581 -> 3535;
7582 -> 7580;
7582 -> 7581;
7583 -> 7580;
7583 -> 7581;
7584 -> 7580;
7584 -> 7581;
7585 -> 7579;
7585 -> 7581;
7586 -> 7582;
7586 -> 7581;
7587 -> 7583;
7587 -> 7581;
7588 -> 7584;
7588 -> 7581;
7589 -> 7581;
7590 -> 7589;
7590 -> 7586;
7590 -> 7587;
7590 -> 7588;
7590 -> 7580;
7590 -> 7581;
7591 -> 7590;
7591 -> 3524;
7592 -> 3524;
7593 -> 7591;
7593 -> 7592;
7594 -> 3525;
7594 -> 7592;
7595 -> 7593;
7595 -> 7592;
7596 -> 7594;
7596 -> 7592;
7597 -> 7595;
7597 -> 7596;
7597 -> 7592;
7598 -> 7595;
7598 -> 7596;
7598 -> 7590;
7598 -> 3526;
7598 -> 3527;
7598 -> 3528;
7598 -> 3529;
7598 -> 3530;
7598 -> 3531;
7598 -> 3532;
7598 -> 7592;
7599 -> 7592;
7600 -> 7599;
7601 -> 7598;
7601 -> 3525;
7601 -> 3524;
7602 -> 3524;
7603 -> 3520;
7603 -> 3519;
7604 -> 3521;
7604 -> 3519;
7605 -> 3522;
7605 -> 3519;
7606 -> 3523;
7606 -> 3519;
7607 -> 3519;
7608 -> 7603;
7608 -> 7607;
7609 -> 7604;
7609 -> 7607;
7610 -> 7605;
7610 -> 7607;
7611 -> 7606;
7611 -> 7607;
7612 -> 7608;
7612 -> 7607;
7613 -> 7609;
7613 -> 7607;
7614 -> 7610;
7614 -> 7607;
7615 -> 7607;
7616 -> 7611;
7616 -> 7607;
7617 -> 7607;
7618 -> 7612;
7618 -> 7617;
7619 -> 7613;
7619 -> 7617;
7620 -> 7614;
7620 -> 7617;
7621 -> 7615;
7621 -> 7617;
7622 -> 7616;
7622 -> 7617;
7623 -> 7618;
7623 -> 7617;
7624 -> 7619;
7624 -> 7617;
7625 -> 7620;
7625 -> 7617;
7626 -> 7621;
7626 -> 7617;
7627 -> 7617;
7628 -> 7627;
7628 -> 7617;
7629 -> 7622;
7629 -> 7617;
7630 -> 7617;
7631 -> 7623;
7631 -> 7630;
7632 -> 7624;
7632 -> 7630;
7633 -> 7625;
7633 -> 7630;
7634 -> 7626;
7634 -> 7630;
7635 -> 7628;
7635 -> 7630;
7636 -> 7629;
7636 -> 7630;
7637 -> 7630;
7638 -> 7631;
7638 -> 7637;
7638 -> 7630;
7639 -> 7632;
7639 -> 7630;
7640 -> 7631;
7640 -> 7630;
7641 -> 7639;
7641 -> 7630;
7642 -> 7630;
7643 -> 7630;
7644 -> 7640;
7644 -> 7643;
7645 -> 7641;
7645 -> 7643;
7646 -> 7642;
7646 -> 7643;
7647 -> 7642;
7647 -> 7643;
7648 -> 7642;
7648 -> 7643;
7649 -> 7644;
7649 -> 7643;
7650 -> 7643;
7651 -> 7649;
7651 -> 7650;
7652 -> 7648;
7652 -> 7650;
7653 -> 7652;
7653 -> 7650;
7654 -> 7652;
7654 -> 7650;
7655 -> 7651;
7655 -> 7650;
7656 -> 7650;
7657 -> 7650;
7658 -> 7655;
7658 -> 7657;
7659 -> 7656;
7659 -> 7657;
7660 -> 7659;
7660 -> 7657;
7661 -> 7659;
7661 -> 7657;
7662 -> 7659;
7662 -> 7657;
7663 -> 7659;
7663 -> 7657;
7664 -> 7659;
7664 -> 7657;
7665 -> 7659;
7665 -> 7657;
7666 -> 7659;
7666 -> 7657;
7667 -> 7659;
7667 -> 7657;
7668 -> 7658;
7668 -> 7659;
7668 -> 7657;
7669 -> 7657;
7670 -> 7669;
7670 -> 7659;
7670 -> 7657;
7671 -> 7657;
7672 -> 7671;
7672 -> 7659;
7672 -> 7657;
7673 -> 7658;
7673 -> 3987;
7673 -> 7659;
7673 -> 7657;
7674 -> 7657;
7675 -> 7674;
7675 -> 7659;
7675 -> 7657;
7676 -> 3606;
7676 -> 3987;
7676 -> 7657;
7677 -> 7657;
7678 -> 7677;
7678 -> 7659;
7678 -> 7657;
7679 -> 7656;
7679 -> 7652;
7679 -> 7650;
7680 -> 7648;
7680 -> 7643;
7681 -> 7648;
7681 -> 7643;
7682 -> 7648;
7682 -> 7643;
7683 -> 7648;
7683 -> 7643;
7684 -> 7648;
7684 -> 7643;
7685 -> 7648;
7685 -> 7643;
7686 -> 7648;
7686 -> 7643;
7687 -> 7648;
7687 -> 7643;
7688 -> 7648;
7688 -> 7643;
7689 -> 7648;
7689 -> 7643;
7690 -> 7643;
7691 -> 7690;
7691 -> 7643;
7692 -> 7691;
7692 -> 7648;
7692 -> 7643;
7693 -> 7643;
7694 -> 7693;
7694 -> 7643;
7695 -> 7694;
7695 -> 7648;
7695 -> 7643;
7696 -> 7648;
7696 -> 7643;
7697 -> 7648;
7697 -> 7643;
7698 -> 7643;
7699 -> 7645;
7699 -> 7698;
7699 -> 7643;
7700 -> 7645;
7700 -> 7648;
7700 -> 7643;
7701 -> 7643;
7702 -> 7701;
7702 -> 7648;
7702 -> 7643;
7703 -> 7643;
7704 -> 7703;
7704 -> 7648;
7704 -> 7643;
7705 -> 7643;
7706 -> 7643;
7707 -> 7705;
7707 -> 7706;
7708 -> 7707;
7708 -> 7706;
7709 -> 7707;
7709 -> 7706;
7710 -> 7707;
7710 -> 7706;
7711 -> 7706;
7712 -> 7711;
7712 -> 7707;
7712 -> 7706;
7713 -> 7706;
7714 -> 7713;
7714 -> 7707;
7714 -> 7706;
7715 -> 7705;
7715 -> 7648;
7715 -> 7643;
7716 -> 7648;
7716 -> 7643;
7717 -> 7646;
7717 -> 7648;
7717 -> 7643;
7718 -> 7647;
7718 -> 7648;
7718 -> 7643;
7719 -> 7642;
7719 -> 7630;
7720 -> 7630;
7721 -> 7636;
7721 -> 7630;
7722 -> 7630;
7723 -> 7719;
7723 -> 7722;
7724 -> 7720;
7724 -> 7722;
7725 -> 7720;
7725 -> 7722;
7726 -> 7721;
7726 -> 7722;
7727 -> 7720;
7727 -> 7722;
7728 -> 7720;
7728 -> 7722;
7729 -> 7723;
7729 -> 7722;
7730 -> 7726;
7730 -> 7722;
7731 -> 7724;
7731 -> 7722;
7732 -> 7725;
7732 -> 7722;
7733 -> 7722;
7734 -> 7722;
7735 -> 7727;
7735 -> 7722;
7736 -> 7722;
7737 -> 7729;
7737 -> 7736;
7738 -> 7730;
7738 -> 7736;
7739 -> 7731;
7739 -> 7736;
7740 -> 7732;
7740 -> 7736;
7741 -> 7733;
7741 -> 7736;
7742 -> 7734;
7742 -> 7736;
7743 -> 7735;
7743 -> 7736;
7744 -> 7728;
7744 -> 7736;
7745 -> 7744;
7745 -> 7736;
7746 -> 7744;
7746 -> 7736;
7747 -> 7744;
7747 -> 7736;
7748 -> 7744;
7748 -> 7736;
7749 -> 7744;
7749 -> 7736;
7750 -> 7744;
7750 -> 7736;
7751 -> 7744;
7751 -> 7736;
7752 -> 7744;
7752 -> 7736;
7753 -> 7744;
7753 -> 7736;
7754 -> 7744;
7754 -> 7736;
7755 -> 7744;
7755 -> 7736;
7756 -> 7744;
7756 -> 7736;
7757 -> 7744;
7757 -> 7736;
7758 -> 7737;
7758 -> 7744;
7758 -> 7736;
7759 -> 7738;
7759 -> 7744;
7759 -> 7736;
7760 -> 7741;
7760 -> 7744;
7760 -> 7736;
7761 -> 7743;
7761 -> 7744;
7761 -> 7736;
7762 -> 7736;
7763 -> 7762;
7763 -> 7744;
7763 -> 7736;
7764 -> 7736;
7765 -> 7739;
7765 -> 7764;
7765 -> 7736;
7766 -> 7765;
7766 -> 7744;
7766 -> 7736;
7767 -> 7736;
7768 -> 7744;
7768 -> 7767;
7769 -> 7768;
7769 -> 7766;
7769 -> 7767;
7770 -> 7769;
7770 -> 7736;
7771 -> 7770;
7771 -> 7741;
7771 -> 7736;
7772 -> 7771;
7773 -> 7772;
7773 -> 7744;
7773 -> 7771;
7774 -> 7771;
7775 -> 7774;
7775 -> 7744;
7775 -> 7771;
7776 -> 7736;
7777 -> 7744;
7777 -> 7776;
7778 -> 7777;
7778 -> 7766;
7778 -> 7776;
7779 -> 7778;
7779 -> 7736;
7780 -> 7742;
7780 -> 7779;
7780 -> 7736;
7781 -> 7780;
7781 -> 7743;
7781 -> 7736;
7782 -> 7781;
7783 -> 7744;
7783 -> 7782;
7784 -> 7782;
7785 -> 7782;
7786 -> 7783;
7786 -> 7758;
7786 -> 7679;
7786 -> 7785;
7787 -> 7786;
7787 -> 7668;
7787 -> 7785;
7788 -> 7787;
7788 -> 7782;
7789 -> 7788;
7789 -> 7676;
7789 -> 7784;
7789 -> 7782;
7790 -> 7789;
7790 -> 7782;
7791 -> 7790;
7791 -> 7783;
7791 -> 7782;
7792 -> 7783;
7792 -> 7758;
7792 -> 7782;
7793 -> 7783;
7793 -> 7759;
7793 -> 7782;
7794 -> 7782;
7795 -> 7793;
7795 -> 7789;
7796 -> 3768;
7796 -> 7789;
7797 -> 7789;
7797 -> 7679;
7797 -> 7654;
7797 -> 7700;
7797 -> 7795;
7797 -> 7702;
7797 -> 7704;
7797 -> 7684;
7797 -> 7715;
7797 -> 7717;
7797 -> 7718;
7797 -> 7688;
7797 -> 7689;
7797 -> 7692;
7797 -> 7695;
7797 -> 7696;
7797 -> 7716;
7797 -> 7668;
7797 -> 7670;
7797 -> 7672;
7797 -> 7673;
7797 -> 7676;
7797 -> 7665;
7797 -> 7678;
7797 -> 7675;
7797 -> 7674;
7797 -> 7691;
7797 -> 7694;
7797 -> 7701;
7797 -> 7703;
7797 -> 7712;
7797 -> 7714;
7797 -> 7711;
7797 -> 7713;
7798 -> 7795;
7799 -> 7795;
7800 -> 7795;
7800 -> 7797;
7800 -> 7799;
7801 -> 7800;
7801 -> 7795;
7802 -> 7795;
7803 -> 7802;
7803 -> 7795;
7804 -> 7795;
7805 -> 7795;
7806 -> 7795;
7806 -> 7797;
7806 -> 7805;
7807 -> 7806;
7808 -> 7806;
7808 -> 7797;
7808 -> 7795;
7809 -> 7806;
7809 -> 7797;
7810 -> 7806;
7810 -> 7797;
7810 -> 7795;
7811 -> 7806;
7811 -> 7797;
7812 -> 7809;
7812 -> 7806;
7813 -> 7806;
7813 -> 7812;
7813 -> 7809;
7814 -> 7813;
7814 -> 7806;
7815 -> 7806;
7816 -> 7809;
7816 -> 7815;
7816 -> 7806;
7817 -> 7806;
7817 -> 7812;
7817 -> 7814;
7817 -> 7805;
7818 -> 7817;
7818 -> 7795;
7819 -> 7795;
7820 -> 7818;
7820 -> 7819;
7820 -> 7795;
7821 -> 7820;
7822 -> 7818;
7822 -> 7795;
7823 -> 7822;
7824 -> 7795;
7825 -> 7814;
7825 -> 7795;
7826 -> 7814;
7826 -> 7795;
7827 -> 7814;
7827 -> 7795;
7828 -> 0;
7828 -> 7826;
7828 -> 7795;
7829 -> 7826;
7829 -> 7795;
7830 -> 7795;
7831 -> 7829;
7831 -> 7830;
7832 -> 7827;
7832 -> 7830;
7833 -> 7831;
7833 -> 7830;
7834 -> 7833;
7834 -> 7832;
7834 -> 7825;
7834 -> 7828;
7834 -> 7830;
7835 -> 7830;
7836 -> 7834;
7836 -> 7835;
7837 -> 7834;
7837 -> 7835;
7838 -> 7834;
7838 -> 7835;
7839 -> 7834;
7839 -> 7835;
7840 -> 7836;
7840 -> 7835;
7841 -> 7837;
7841 -> 7835;
7842 -> 7838;
7842 -> 7835;
7843 -> 7839;
7843 -> 7834;
7843 -> 7840;
7843 -> 7841;
7843 -> 7842;
7843 -> 7835;
7844 -> 7843;
7845 -> 0;
7845 -> 7844;
7846 -> 7844;
7847 -> 7845;
7847 -> 7846;
7848 -> 7827;
7848 -> 7846;
7849 -> 7848;
7849 -> 7843;
7849 -> 7846;
7850 -> 7846;
7851 -> 7849;
7851 -> 7850;
7852 -> 7851;
7852 -> 0;
7852 -> 7850;
7853 -> 7852;
7853 -> 7847;
7853 -> 7846;
7854 -> 7843;
7854 -> 7853;
7855 -> 7853;
7856 -> 7854;
7856 -> 7855;
7857 -> 7854;
7857 -> 7855;
7858 -> 7827;
7858 -> 7843;
7858 -> 7855;
7859 -> 7856;
7859 -> 3663;
7859 -> 7855;
7860 -> 7856;
7860 -> 7855;
7861 -> 7860;
7861 -> 7858;
7861 -> 7843;
7861 -> 7855;
7862 -> 7855;
7863 -> 7861;
7863 -> 7862;
7864 -> 7863;
7864 -> 7862;
7865 -> 0;
7865 -> 7864;
7866 -> 7865;
7866 -> 0;
7866 -> 7855;
7867 -> 7843;
7867 -> 7865;
7867 -> 7866;
7868 -> 7866;
7869 -> 7867;
7869 -> 7868;
7870 -> 7869;
7870 -> 7868;
7871 -> 7870;
7872 -> 7843;
7872 -> 7865;
7872 -> 0;
7872 -> 7844;
7873 -> 7843;
7874 -> 7843;
7874 -> 7873;
7874 -> 7865;
7874 -> 7795;
7875 -> 7812;
7875 -> 7795;
7876 -> 7795;
7877 -> 7875;
7877 -> 7876;
7878 -> 7876;
7879 -> 7876;
7880 -> 7877;
7880 -> 7879;
7880 -> 7876;
7881 -> 7880;
7882 -> 7881;
7882 -> 7877;
7882 -> 7874;
7882 -> 7880;
7883 -> 7878;
7883 -> 7876;
7884 -> 7883;
7884 -> 7795;
7885 -> 7795;
7886 -> 7884;
7886 -> 7885;
7887 -> 7795;
7887 -> 7885;
7888 -> 7885;
7889 -> 7887;
7889 -> 7874;
7889 -> 7888;
7889 -> 7885;
7890 -> 7889;
7891 -> 7890;
7891 -> 7795;
7892 -> 7795;
7893 -> 7874;
7893 -> 7795;
7894 -> 7893;
7894 -> 7819;
7894 -> 7795;
7895 -> 7795;
7895 -> 7874;
7895 -> 7894;
7896 -> 7894;
7897 -> 7895;
7897 -> 7896;
7898 -> 7897;
7898 -> 7895;
7898 -> 7896;
7899 -> 7895;
7899 -> 7896;
7900 -> 7899;
7900 -> 7898;
7900 -> 7896;
7901 -> 7874;
7901 -> 7894;
7902 -> 7894;
7903 -> 7900;
7903 -> 7902;
7904 -> 7901;
7904 -> 7902;
7905 -> 7795;
7905 -> 7902;
7906 -> 7902;
7907 -> 7905;
7907 -> 7906;
7908 -> 7906;
7909 -> 7907;
7909 -> 7900;
7909 -> 7908;
7909 -> 7906;
7910 -> 7909;
7910 -> 7902;
7911 -> 7902;
7912 -> 7904;
7912 -> 7911;
7912 -> 7902;
7913 -> 7903;
7913 -> 7902;
7914 -> 7904;
7914 -> 7913;
7914 -> 7900;
7914 -> 7902;
7915 -> 7914;
7916 -> 7914;
7916 -> 7795;
7917 -> 7916;
7918 -> 7874;
7918 -> 7795;
7919 -> 7891;
7919 -> 7795;
7920 -> 7795;
7921 -> 7918;
7921 -> 7874;
7921 -> 0;
7921 -> 7795;
7922 -> 7795;
7923 -> 7918;
7923 -> 7874;
7923 -> 7795;
7924 -> 7918;
7924 -> 7874;
7924 -> 7923;
7925 -> 7918;
7925 -> 7874;
7925 -> 7924;
7926 -> 7924;
7927 -> 7925;
7927 -> 7926;
7928 -> 7927;
7928 -> 0;
7928 -> 7926;
7929 -> 7914;
7929 -> 7924;
7930 -> 7918;
7930 -> 7874;
7930 -> 7924;
7931 -> 7924;
7932 -> 7929;
7932 -> 7931;
7933 -> 7930;
7933 -> 7931;
7934 -> 7929;
7934 -> 7931;
7935 -> 7933;
7935 -> 7931;
7936 -> 7932;
7936 -> 7931;
7937 -> 7934;
7937 -> 7931;
7938 -> 7931;
7939 -> 7935;
7939 -> 7938;
7940 -> 7936;
7940 -> 7938;
7941 -> 7937;
7941 -> 7938;
7942 -> 7939;
7942 -> 3999;
7942 -> 7938;
7943 -> 7938;
7944 -> 7940;
7944 -> 7943;
7944 -> 7938;
7945 -> 7944;
7946 -> 7941;
7946 -> 7945;
7946 -> 7944;
7947 -> 7941;
7947 -> 3037;
7947 -> 7946;
7948 -> 4011;
7948 -> 4010;
7948 -> 7939;
7948 -> 7947;
7949 -> 7795;
7950 -> 7919;
7950 -> 7949;
7950 -> 7795;
7951 -> 7948;
7951 -> 7795;
7952 -> 7951;
7952 -> 7789;
7953 -> 7789;
7954 -> 7952;
7954 -> 7953;
7955 -> 7783;
7955 -> 7953;
7956 -> 7953;
7957 -> 7954;
7957 -> 7956;
7957 -> 7953;
7958 -> 7955;
7958 -> 7754;
7958 -> 7791;
7958 -> 7790;
7958 -> 7953;
7959 -> 7955;
7959 -> 7791;
7959 -> 7790;
7959 -> 7754;
7959 -> 7953;
7960 -> 7954;
7960 -> 7959;
7960 -> 7953;
7961 -> 7955;
7961 -> 7754;
7961 -> 7953;
7962 -> 7789;
7963 -> 7789;
7964 -> 7951;
7964 -> 7963;
7965 -> 7964;
7965 -> 7963;
7966 -> 7965;
7966 -> 7789;
7967 -> 7914;
7968 -> 7914;
7969 -> 7968;
7969 -> 7914;
7970 -> 7914;
7971 -> 7914;
7972 -> 7914;
7973 -> 7914;
7974 -> 7914;
7975 -> 7914;
7976 -> 7970;
7976 -> 7914;
7977 -> 7971;
7977 -> 7914;
7978 -> 7972;
7978 -> 7914;
7979 -> 7973;
7979 -> 7914;
7980 -> 7975;
7980 -> 7969;
7980 -> 7976;
7980 -> 7977;
7980 -> 7978;
7980 -> 7979;
7980 -> 7914;
7981 -> 7914;
7982 -> 7980;
7982 -> 7981;
7982 -> 7914;
7983 -> 7974;
7983 -> 7980;
7983 -> 7982;
7984 -> 7982;
7985 -> 7983;
7985 -> 7984;
7986 -> 7984;
7987 -> 7985;
7987 -> 7983;
7987 -> 7986;
7988 -> 7987;
7988 -> 7984;
7989 -> 7984;
7990 -> 7985;
7990 -> 7983;
7990 -> 7989;
7991 -> 7990;
7991 -> 7984;
7992 -> 7984;
7993 -> 7991;
7993 -> 7992;
7994 -> 7985;
7994 -> 7983;
7994 -> 7992;
7995 -> 7984;
7996 -> 7984;
7997 -> 7985;
7997 -> 7996;
7998 -> 7997;
7998 -> 7983;
7998 -> 7993;
7998 -> 7996;
7999 -> 7996;
8000 -> 7997;
8000 -> 7998;
8000 -> 7999;
8001 -> 8000;
8001 -> 7996;
8002 -> 7996;
8003 -> 8002;
8003 -> 7996;
8004 -> 7996;
8005 -> 7996;
8006 -> 7998;
8007 -> 7998;
8007 -> 7996;
8008 -> 8007;
8009 -> 7996;
8010 -> 7998;
8011 -> 7998;
8011 -> 3663;
8012 -> 0;
8012 -> 7998;
8013 -> 7998;
8014 -> 8013;
8014 -> 7998;
8015 -> 0;
8015 -> 8014;
8016 -> 7998;
8016 -> 8015;
8016 -> 8012;
8017 -> 8016;
8017 -> 0;
8017 -> 7998;
8018 -> 0;
8018 -> 7998;
8018 -> 8017;
8019 -> 0;
8019 -> 7998;
8019 -> 8017;
8020 -> 7998;
8020 -> 8016;
8020 -> 8018;
8020 -> 0;
8021 -> 7998;
8021 -> 8016;
8021 -> 8018;
8021 -> 8019;
8021 -> 7996;
8022 -> 7998;
8022 -> 7996;
8023 -> 7996;
8024 -> 8022;
8024 -> 8023;
8025 -> 8023;
8026 -> 8023;
8027 -> 8024;
8027 -> 8026;
8027 -> 8023;
8028 -> 8027;
8029 -> 8028;
8029 -> 8024;
8029 -> 8021;
8029 -> 8027;
8030 -> 8025;
8030 -> 8023;
8031 -> 8030;
8031 -> 7996;
8032 -> 7996;
8033 -> 8031;
8033 -> 8032;
8034 -> 7997;
8034 -> 8032;
8035 -> 8032;
8036 -> 8034;
8036 -> 8021;
8036 -> 8035;
8036 -> 8032;
8037 -> 8036;
8038 -> 8037;
8038 -> 7996;
8039 -> 7996;
8040 -> 8021;
8041 -> 8021;
8041 -> 7996;
8042 -> 8041;
8043 -> 7997;
8043 -> 8042;
8044 -> 8042;
8045 -> 8042;
8046 -> 8043;
8046 -> 8021;
8046 -> 8045;
8047 -> 8046;
8047 -> 8042;
8048 -> 8047;
8049 -> 8047;
8050 -> 8047;
8051 -> 8050;
8051 -> 8021;
8051 -> 8048;
8052 -> 8050;
8052 -> 8021;
8052 -> 7997;
8052 -> 8048;
8053 -> 8052;
8053 -> 8047;
8054 -> 8047;
8055 -> 8053;
8056 -> 8053;
8057 -> 2896;
8057 -> 8053;
8058 -> 8057;
8058 -> 8041;
8059 -> 8021;
8059 -> 8041;
8060 -> 8041;
8061 -> 8058;
8061 -> 8060;
8062 -> 8059;
8062 -> 8060;
8063 -> 7997;
8063 -> 8060;
8064 -> 8060;
8065 -> 8063;
8065 -> 8064;
8066 -> 8064;
8067 -> 8065;
8067 -> 8021;
8067 -> 7997;
8067 -> 8066;
8067 -> 8064;
8068 -> 8067;
8068 -> 8060;
8069 -> 8060;
8070 -> 8062;
8070 -> 8069;
8070 -> 8060;
8071 -> 8062;
8071 -> 8061;
8071 -> 8021;
8071 -> 7997;
8071 -> 8048;
8071 -> 8055;
8071 -> 7417;
8071 -> 4189;
8071 -> 8060;
8072 -> 8041;
8073 -> 8002;
8073 -> 8041;
8074 -> 8073;
8075 -> 8021;
8075 -> 7996;
8076 -> 8038;
8076 -> 7996;
8077 -> 7997;
8077 -> 7996;
8078 -> 8075;
8078 -> 8021;
8078 -> 0;
8078 -> 7996;
8079 -> 7996;
8080 -> 8075;
8080 -> 8021;
8080 -> 8079;
8080 -> 7996;
8081 -> 7996;
8082 -> 8075;
8082 -> 8021;
8082 -> 7996;
8083 -> 8075;
8083 -> 8021;
8083 -> 8082;
8084 -> 8075;
8084 -> 8021;
8084 -> 8083;
8085 -> 8071;
8085 -> 8083;
8086 -> 8083;
8087 -> 8084;
8087 -> 8086;
8088 -> 8085;
8088 -> 8086;
8089 -> 8084;
8089 -> 8086;
8090 -> 8084;
8090 -> 8086;
8091 -> 8085;
8091 -> 8086;
8092 -> 8087;
8092 -> 8086;
8093 -> 8088;
8093 -> 8086;
8094 -> 8089;
8094 -> 8086;
8095 -> 8090;
8095 -> 8086;
8096 -> 8091;
8096 -> 8086;
8097 -> 8086;
8098 -> 8092;
8098 -> 8097;
8099 -> 8093;
8099 -> 8097;
8100 -> 8094;
8100 -> 8097;
8101 -> 8095;
8101 -> 8097;
8102 -> 8096;
8102 -> 8097;
8103 -> 8098;
8103 -> 0;
8103 -> 8097;
8104 -> 8101;
8104 -> 8100;
8104 -> 8097;
8105 -> 8103;
8105 -> 8104;
8105 -> 8097;
8106 -> 8099;
8106 -> 8105;
8107 -> 8100;
8107 -> 8105;
8108 -> 8102;
8108 -> 8105;
8109 -> 8105;
8110 -> 8106;
8110 -> 8109;
8111 -> 8107;
8111 -> 8109;
8112 -> 8108;
8112 -> 8109;
8113 -> 8109;
8114 -> 8110;
8114 -> 8113;
8114 -> 8109;
8115 -> 8114;
8116 -> 8112;
8116 -> 8115;
8116 -> 8114;
8118 -> 8111;
8118 -> 8116;
8119 -> 8112;
8119 -> 8116;
8120 -> 8116;
8121 -> 8116;
8122 -> 8118;
8122 -> 8121;
8123 -> 8119;
8123 -> 8121;
8124 -> 8120;
8124 -> 8121;
8126 -> 8122;
8126 -> 8121;
8127 -> 8121;
8128 -> 8126;
8128 -> 8127;
8129 -> 8124;
8129 -> 8127;
8130 -> 0;
8130 -> 8127;
8131 -> 8128;
8131 -> 8127;
8132 -> 8127;
8133 -> 8130;
8133 -> 8132;
8134 -> 8131;
8134 -> 8132;
8135 -> 8129;
8135 -> 8132;
8136 -> 8133;
8136 -> 8132;
8137 -> 8134;
8137 -> 8132;
8138 -> 8132;
8139 -> 8136;
8139 -> 8138;
8140 -> 8137;
8140 -> 8138;
8141 -> 8135;
8141 -> 8138;
8142 -> 8139;
8142 -> 8138;
8143 -> 8140;
8143 -> 8138;
8144 -> 8138;
8145 -> 8144;
8145 -> 8142;
8145 -> 8143;
8145 -> 8138;
8146 -> 8144;
8146 -> 8138;
8147 -> 8146;
8147 -> 8145;
8147 -> 8138;
8148 -> 8135;
8148 -> 8147;
8148 -> 0;
8148 -> 8132;
8149 -> 8148;
8149 -> 8135;
8149 -> 8132;
8150 -> 8129;
8150 -> 8127;
8151 -> 8128;
8151 -> 8129;
8151 -> 8127;
8152 -> 8124;
8152 -> 8121;
8153 -> 8121;
8154 -> 8123;
8154 -> 8153;
8154 -> 8121;
8155 -> 8123;
8155 -> 8154;
8156 -> 8124;
8156 -> 8155;
8156 -> 8147;
8156 -> 8149;
8156 -> 8150;
8156 -> 8151;
8156 -> 8152;
8156 -> 8071;
8156 -> 8154;
8157 -> 8123;
8157 -> 8124;
8157 -> 8154;
8158 -> 7996;
8159 -> 8076;
8159 -> 8158;
8159 -> 7996;
8160 -> 8120;
8160 -> 7996;
8161 -> 8160;
8161 -> 7984;
8162 -> 7988;
8162 -> 8161;
8162 -> 8156;
8162 -> 7984;
8163 -> 8161;
8163 -> 7984;
8164 -> 7983;
8164 -> 8163;
8164 -> 8156;
8164 -> 8157;
8164 -> 7982;
8165 -> 7970;
8165 -> 7982;
8166 -> 7971;
8166 -> 7982;
8167 -> 7972;
8167 -> 7982;
8168 -> 7973;
8168 -> 7982;
8169 -> 8164;
8169 -> 7982;
8170 -> 8164;
8170 -> 7914;
8171 -> 7914;
8171 -> 8170;
8171 -> 8169;
8172 -> 8171;
8172 -> 7789;
8173 -> 8172;
8173 -> 7953;
8174 -> 8173;
8174 -> 7956;
8174 -> 7953;
8175 -> 7955;
8175 -> 7961;
8175 -> 7791;
8175 -> 7790;
8175 -> 7953;
8176 -> 7955;
8176 -> 7791;
8176 -> 7790;
8176 -> 7961;
8176 -> 7953;
8177 -> 8173;
8177 -> 8176;
8177 -> 7953;
8178 -> 8171;
8178 -> 7963;
8179 -> 8178;
8179 -> 7789;
8180 -> 8171;
8181 -> 8171;
8182 -> 8181;
8182 -> 8171;
8183 -> 8171;
8184 -> 8183;
8184 -> 8171;
8185 -> 8183;
8185 -> 8171;
8186 -> 8185;
8186 -> 8171;
8187 -> 8171;
8188 -> 8171;
8189 -> 8171;
8190 -> 8171;
8191 -> 8183;
8191 -> 8171;
8192 -> 8171;
8193 -> 8191;
8193 -> 8192;
8194 -> 8192;
8195 -> 8192;
8196 -> 8193;
8196 -> 8195;
8196 -> 8192;
8197 -> 8196;
8198 -> 8194;
8198 -> 8192;
8199 -> 8198;
8199 -> 8171;
8200 -> 8171;
8201 -> 8199;
8201 -> 8200;
8202 -> 8171;
8202 -> 8200;
8203 -> 8200;
8204 -> 8202;
8204 -> 8183;
8204 -> 8203;
8204 -> 8200;
8205 -> 8204;
8206 -> 8205;
8206 -> 8171;
8207 -> 8171;
8208 -> 8171;
8209 -> 8208;
8209 -> 8171;
8210 -> 8183;
8211 -> 8183;
8212 -> 8183;
8213 -> 8183;
8214 -> 8171;
8214 -> 8183;
8215 -> 8183;
8216 -> 8214;
8216 -> 8215;
8217 -> 8215;
8218 -> 8216;
8218 -> 8183;
8218 -> 8171;
8218 -> 8217;
8218 -> 8215;
8219 -> 8218;
8219 -> 8183;
8220 -> 8183;
8221 -> 8208;
8221 -> 8183;
8222 -> 8221;
8223 -> 8206;
8223 -> 8171;
8224 -> 8171;
8225 -> 8183;
8225 -> 0;
8225 -> 8171;
8226 -> 8171;
8227 -> 8183;
8228 -> 8183;
8229 -> 8227;
8229 -> 8228;
8230 -> 8229;
8230 -> 0;
8230 -> 8228;
8231 -> 8183;
8232 -> 8183;
8233 -> 8231;
8233 -> 8232;
8234 -> 8231;
8234 -> 8232;
8235 -> 8231;
8235 -> 8232;
8236 -> 8234;
8236 -> 8232;
8237 -> 8233;
8237 -> 8232;
8238 -> 8235;
8238 -> 8232;
8239 -> 8232;
8240 -> 8236;
8240 -> 8239;
8241 -> 8237;
8241 -> 8239;
8242 -> 8238;
8242 -> 8239;
8243 -> 8240;
8243 -> 3999;
8243 -> 8239;
8244 -> 8239;
8245 -> 8241;
8245 -> 8244;
8245 -> 8239;
8246 -> 8245;
8247 -> 8242;
8247 -> 8246;
8247 -> 8245;
8248 -> 8242;
8248 -> 3037;
8248 -> 8247;
8249 -> 8242;
8249 -> 2896;
8249 -> 8248;
8250 -> 4015;
8250 -> 4014;
8250 -> 8240;
8250 -> 8249;
8251 -> 8171;
8252 -> 8223;
8252 -> 8251;
8252 -> 8171;
8253 -> 8182;
8253 -> 8250;
8253 -> 8171;
8254 -> 8250;
8254 -> 7789;
8255 -> 8254;
8255 -> 7953;
8256 -> 8255;
8256 -> 7956;
8256 -> 7953;
8257 -> 8255;
8257 -> 8176;
8257 -> 7953;
8258 -> 8250;
8258 -> 7963;
8259 -> 8258;
8259 -> 7789;
8260 -> 8250;
8261 -> 8250;
8262 -> 8261;
8262 -> 8250;
8263 -> 8250;
8264 -> 8250;
8265 -> 8264;
8265 -> 8250;
8266 -> 8250;
8267 -> 8250;
8267 -> 8261;
8268 -> 8250;
8268 -> 8261;
8269 -> 8250;
8269 -> 8261;
8270 -> 8250;
8270 -> 8261;
8271 -> 8250;
8271 -> 8261;
8272 -> 8250;
8272 -> 8261;
8273 -> 8267;
8273 -> 8261;
8274 -> 8268;
8274 -> 8261;
8275 -> 8269;
8275 -> 8261;
8276 -> 8270;
8276 -> 8261;
8277 -> 8272;
8277 -> 8261;
8277 -> 8273;
8277 -> 8274;
8277 -> 8275;
8277 -> 8276;
8278 -> 8261;
8279 -> 8277;
8279 -> 8278;
8279 -> 8261;
8280 -> 8271;
8280 -> 8277;
8280 -> 8279;
8281 -> 8279;
8282 -> 8280;
8282 -> 8281;
8283 -> 8281;
8284 -> 8281;
8285 -> 8283;
8285 -> 8284;
8286 -> 8282;
8286 -> 8280;
8286 -> 8284;
8287 -> 8284;
8288 -> 8286;
8288 -> 8287;
8289 -> 8288;
8289 -> 8284;
8290 -> 8284;
8291 -> 8286;
8291 -> 8290;
8292 -> 8291;
8292 -> 8284;
8293 -> 8285;
8293 -> 8284;
8294 -> 8284;
8295 -> 8289;
8295 -> 8294;
8296 -> 8292;
8296 -> 8294;
8297 -> 8293;
8297 -> 8294;
8298 -> 8286;
8298 -> 8294;
8299 -> 8295;
8299 -> 8298;
8299 -> 8280;
8299 -> 8294;
8300 -> 8296;
8300 -> 8294;
8301 -> 8297;
8301 -> 8294;
8302 -> 8298;
8302 -> 8280;
8302 -> 8301;
8303 -> 8299;
8303 -> 8301;
8304 -> 8296;
8304 -> 8301;
8305 -> 8301;
8306 -> 8302;
8306 -> 8305;
8307 -> 8303;
8307 -> 8305;
8308 -> 8304;
8308 -> 8305;
8309 -> 8298;
8309 -> 8305;
8310 -> 8309;
8310 -> 8280;
8310 -> 8306;
8310 -> 8307;
8310 -> 8308;
8310 -> 8305;
8311 -> 8281;
8312 -> 8310;
8312 -> 8311;
8313 -> 8283;
8313 -> 8311;
8314 -> 8311;
8314 -> 0;
8315 -> 8267;
8315 -> 8279;
8316 -> 8268;
8316 -> 8279;
8317 -> 8269;
8317 -> 8279;
8318 -> 8270;
8318 -> 8279;
8319 -> 8312;
8319 -> 8279;
8320 -> 8312;
8320 -> 8261;
8321 -> 8250;
8321 -> 8320;
8321 -> 8319;
8322 -> 8250;
8323 -> 8250;
8324 -> 8322;
8324 -> 8323;
8325 -> 8323;
8326 -> 8324;
8326 -> 8321;
8326 -> 8325;
8326 -> 8323;
8327 -> 8326;
8327 -> 8250;
8328 -> 8250;
8329 -> 8261;
8329 -> 8328;
8329 -> 8250;
8330 -> 8321;
8331 -> 8321;
8332 -> 8250;
8333 -> 8321;
8334 -> 8321;
8334 -> 3663;
8335 -> 0;
8335 -> 8321;
8336 -> 8321;
8336 -> 8335;
8337 -> 8335;
8338 -> 8336;
8338 -> 8337;
8339 -> 8338;
8339 -> 8337;
8340 -> 8339;
8341 -> 8321;
8341 -> 8335;
8341 -> 0;
8342 -> 8321;
8342 -> 8250;
8343 -> 8250;
8344 -> 8342;
8344 -> 8343;
8345 -> 8343;
8346 -> 8343;
8347 -> 8344;
8347 -> 8346;
8347 -> 8343;
8348 -> 8347;
8349 -> 8348;
8349 -> 8344;
8349 -> 8335;
8349 -> 8347;
8350 -> 8344;
8350 -> 8348;
8350 -> 8335;
8350 -> 8349;
8351 -> 8345;
8351 -> 8350;
8351 -> 8349;
8352 -> 8351;
8352 -> 8343;
8353 -> 8250;
8354 -> 8352;
8354 -> 8353;
8355 -> 8250;
8355 -> 8353;
8356 -> 8353;
8357 -> 8355;
8357 -> 8350;
8357 -> 8356;
8357 -> 8353;
8358 -> 8357;
8359 -> 8250;
8359 -> 8350;
8360 -> 8350;
8361 -> 8359;
8361 -> 8360;
8362 -> 8360;
8363 -> 8361;
8363 -> 8350;
8363 -> 8362;
8363 -> 8360;
8364 -> 8363;
8364 -> 8350;
8365 -> 8350;
8366 -> 8350;
8367 -> 8350;
8368 -> 8358;
8368 -> 8250;
8369 -> 8250;
8370 -> 8335;
8370 -> 0;
8370 -> 8250;
8371 -> 8250;
8372 -> 8335;
8373 -> 8335;
8374 -> 8372;
8374 -> 8373;
8375 -> 8374;
8375 -> 0;
8375 -> 8373;
8376 -> 8335;
8376 -> 3999;
8377 -> 8350;
8377 -> 3458;
8377 -> 8335;
8378 -> 8335;
8379 -> 8350;
8379 -> 8335;
8380 -> 8335;
8381 -> 8378;
8381 -> 8380;
8382 -> 8379;
8382 -> 8380;
8383 -> 8379;
8383 -> 8380;
8384 -> 8378;
8384 -> 8380;
8385 -> 8380;
8386 -> 8382;
8386 -> 8385;
8386 -> 8380;
8387 -> 8382;
8387 -> 8386;
8388 -> 8382;
8388 -> 8384;
8388 -> 8386;
8389 -> 8384;
8389 -> 8383;
8389 -> 8387;
8389 -> 8388;
8390 -> 8250;
8391 -> 8368;
8391 -> 8390;
8391 -> 8250;
8392 -> 8262;
8392 -> 8378;
8392 -> 8389;
8392 -> 8250;
8393 -> 8389;
8393 -> 7789;
8394 -> 8393;
8394 -> 7953;
8395 -> 8394;
8395 -> 7956;
8395 -> 7953;
8396 -> 8394;
8396 -> 8176;
8396 -> 7953;
8397 -> 8389;
8397 -> 7963;
8398 -> 8397;
8398 -> 7789;
8399 -> 8389;
8400 -> 8389;
8401 -> 8389;
8402 -> 8389;
8403 -> 8402;
8403 -> 8389;
8404 -> 8389;
8405 -> 8389;
8406 -> 8389;
8407 -> 8389;
8408 -> 8389;
8409 -> 8389;
8409 -> 3663;
8410 -> 0;
8410 -> 8389;
8411 -> 8389;
8411 -> 8410;
8412 -> 8410;
8413 -> 8411;
8413 -> 8412;
8414 -> 8413;
8414 -> 8412;
8415 -> 8414;
8416 -> 8389;
8416 -> 8410;
8416 -> 0;
8417 -> 8389;
8418 -> 8417;
8418 -> 8389;
8419 -> 8389;
8420 -> 8418;
8420 -> 8419;
8421 -> 8389;
8421 -> 8419;
8422 -> 8419;
8423 -> 8421;
8423 -> 8410;
8423 -> 8422;
8423 -> 8419;
8424 -> 8423;
8425 -> 8389;
8425 -> 8410;
8426 -> 8410;
8427 -> 8425;
8427 -> 8426;
8428 -> 8426;
8429 -> 8427;
8429 -> 8410;
8429 -> 8428;
8429 -> 8426;
8430 -> 8429;
8430 -> 8410;
8431 -> 8410;
8432 -> 8410;
8433 -> 8410;
8434 -> 8424;
8434 -> 8389;
8435 -> 8389;
8436 -> 8410;
8436 -> 0;
8436 -> 8389;
8437 -> 8389;
8438 -> 8410;
8439 -> 8410;
8440 -> 8438;
8440 -> 8439;
8441 -> 8440;
8441 -> 0;
8441 -> 8439;
8442 -> 8410;
8442 -> 3999;
8443 -> 4011;
8443 -> 4010;
8443 -> 8410;
8444 -> 8389;
8445 -> 8434;
8445 -> 8444;
8445 -> 8389;
8446 -> 8400;
8446 -> 8443;
8446 -> 8389;
8447 -> 8443;
8447 -> 7789;
8448 -> 8447;
8448 -> 7953;
8449 -> 8448;
8449 -> 7956;
8449 -> 7953;
8450 -> 8448;
8450 -> 8176;
8450 -> 7953;
8451 -> 8443;
8451 -> 7963;
8452 -> 8451;
8452 -> 7789;
8453 -> 8443;
8454 -> 8443;
8455 -> 8443;
8456 -> 8443;
8457 -> 8456;
8457 -> 8443;
8458 -> 8443;
8459 -> 8443;
8460 -> 8443;
8461 -> 8443;
8462 -> 8443;
8463 -> 8443;
8463 -> 3663;
8464 -> 8443;
8464 -> 0;
8465 -> 8443;
8466 -> 8465;
8466 -> 8443;
8467 -> 8443;
8468 -> 8466;
8468 -> 8467;
8469 -> 8443;
8469 -> 8467;
8470 -> 8467;
8471 -> 8469;
8471 -> 8443;
8471 -> 8470;
8471 -> 8467;
8472 -> 8471;
8473 -> 8443;
8474 -> 8443;
8475 -> 8473;
8475 -> 8474;
8476 -> 8474;
8477 -> 8475;
8477 -> 8443;
8477 -> 8476;
8477 -> 8474;
8478 -> 8477;
8478 -> 8443;
8479 -> 8443;
8480 -> 8443;
8481 -> 8443;
8482 -> 8443;
8483 -> 8456;
8483 -> 8443;
8484 -> 8483;
8485 -> 8472;
8485 -> 8443;
8486 -> 8443;
8487 -> 8443;
8487 -> 0;
8488 -> 8443;
8489 -> 8443;
8490 -> 8443;
8491 -> 8485;
8491 -> 8490;
8491 -> 8443;
8492 -> 8454;
8492 -> 8443;
8493 -> 8443;
8494 -> 8443;
8495 -> 8493;
8495 -> 8494;
8496 -> 8495;
8496 -> 0;
8496 -> 8494;
8497 -> 8443;
8497 -> 3999;
8498 -> 8443;
8498 -> 3458;
8499 -> 8443;
8500 -> 8443;
8500 -> 0;
8501 -> 0;
8501 -> 8443;
8502 -> 8443;
8502 -> 8501;
8503 -> 8501;
8504 -> 8502;
8504 -> 8503;
8505 -> 8504;
8505 -> 8503;
8506 -> 8505;
8507 -> 8443;
8507 -> 8501;
8507 -> 0;
8508 -> 8465;
8508 -> 8501;
8509 -> 8508;
8509 -> 8443;
8510 -> 8509;
8510 -> 8467;
8511 -> 8469;
8511 -> 8501;
8511 -> 8470;
8511 -> 8467;
8512 -> 8511;
8513 -> 8501;
8514 -> 8501;
8515 -> 8512;
8515 -> 8443;
8516 -> 8501;
8516 -> 0;
8516 -> 8443;
8517 -> 8501;
8518 -> 8501;
8519 -> 8517;
8519 -> 8518;
8520 -> 8519;
8520 -> 0;
8520 -> 8518;
8521 -> 8501;
8521 -> 3999;
8522 -> 8501;
8522 -> 3458;
8523 -> 8515;
8523 -> 8490;
8523 -> 8443;
8524 -> 8454;
8524 -> 8501;
8524 -> 8443;
8525 -> 8501;
8525 -> 7789;
8526 -> 8525;
8526 -> 7953;
8527 -> 8526;
8527 -> 7956;
8527 -> 7953;
8528 -> 8526;
8528 -> 8176;
8528 -> 7953;
8529 -> 8501;
8529 -> 7963;
8530 -> 8529;
8530 -> 7789;
8531 -> 8501;
8532 -> 8501;
8533 -> 8501;
8534 -> 8501;
8535 -> 8534;
8535 -> 8501;
8536 -> 8501;
8537 -> 8501;
8538 -> 8501;
8539 -> 8538;
8539 -> 8501;
8540 -> 8501;
8541 -> 8539;
8541 -> 8540;
8542 -> 8501;
8542 -> 8540;
8543 -> 8540;
8544 -> 8542;
8544 -> 8501;
8544 -> 8543;
8544 -> 8540;
8545 -> 8544;
8546 -> 8501;
8547 -> 8501;
8548 -> 8546;
8548 -> 8547;
8549 -> 8547;
8550 -> 8548;
8550 -> 8501;
8550 -> 8549;
8550 -> 8547;
8551 -> 8550;
8551 -> 8501;
8552 -> 8501;
8553 -> 8545;
8553 -> 8501;
8554 -> 8501;
8555 -> 8501;
8555 -> 0;
8556 -> 8501;
8557 -> 8501;
8558 -> 8553;
8558 -> 8557;
8558 -> 8501;
8559 -> 8532;
8559 -> 8501;
8560 -> 8501;
8561 -> 8501;
8561 -> 3663;
8562 -> 8501;
8562 -> 0;
8563 -> 8534;
8563 -> 8501;
8564 -> 8501;
8565 -> 8501;
8566 -> 8563;
8567 -> 8501;
8567 -> 8566;
8568 -> 8566;
8569 -> 8567;
8569 -> 8501;
8569 -> 8568;
8570 -> 8569;
8570 -> 8566;
8571 -> 8566;
8572 -> 8567;
8572 -> 8501;
8572 -> 8571;
8573 -> 8572;
8573 -> 8566;
8574 -> 8566;
8575 -> 8570;
8575 -> 8574;
8575 -> 8566;
8576 -> 8573;
8576 -> 8575;
8576 -> 8501;
8576 -> 8566;
8577 -> 8566;
8578 -> 8576;
8578 -> 8577;
8579 -> 8577;
8580 -> 8578;
8580 -> 8579;
8580 -> 8577;
8581 -> 8566;
8582 -> 8581;
8582 -> 8563;
8583 -> 8542;
8583 -> 8576;
8583 -> 8543;
8583 -> 8540;
8584 -> 8583;
8585 -> 8501;
8585 -> 8576;
8586 -> 8576;
8587 -> 8585;
8587 -> 8586;
8588 -> 8586;
8589 -> 8587;
8589 -> 8576;
8589 -> 8588;
8589 -> 8586;
8590 -> 8589;
8590 -> 8576;
8591 -> 8576;
8592 -> 8576;
8593 -> 8576;
8594 -> 8584;
8594 -> 8501;
8595 -> 8576;
8595 -> 0;
8595 -> 8501;
8596 -> 8576;
8597 -> 8576;
8598 -> 8596;
8598 -> 8597;
8599 -> 8598;
8599 -> 0;
8599 -> 8597;
8600 -> 8576;
8600 -> 3999;
8601 -> 8594;
8601 -> 8557;
8601 -> 8501;
8602 -> 8532;
8602 -> 8576;
8602 -> 8501;
8603 -> 8576;
8603 -> 7789;
8604 -> 8603;
8604 -> 7953;
8605 -> 8604;
8605 -> 7956;
8605 -> 7953;
8606 -> 8604;
8606 -> 8176;
8606 -> 7953;
8607 -> 8576;
8607 -> 7963;
8608 -> 8607;
8608 -> 7789;
8609 -> 8576;
8610 -> 8576;
8611 -> 8576;
8612 -> 8576;
8613 -> 8576;
8614 -> 8576;
8615 -> 8576;
8616 -> 8576;
8616 -> 3663;
8617 -> 0;
8617 -> 8576;
8618 -> 8576;
8618 -> 8617;
8619 -> 8617;
8620 -> 8618;
8620 -> 8619;
8621 -> 8620;
8621 -> 8619;
8622 -> 8621;
8623 -> 8576;
8623 -> 8617;
8623 -> 0;
8624 -> 8576;
8625 -> 8624;
8625 -> 8576;
8626 -> 8576;
8627 -> 8625;
8627 -> 8626;
8628 -> 8576;
8628 -> 8626;
8629 -> 8626;
8630 -> 8628;
8630 -> 8617;
8630 -> 8629;
8630 -> 8626;
8631 -> 8630;
8632 -> 8617;
8633 -> 8617;
8634 -> 8631;
8634 -> 8576;
8635 -> 8576;
8636 -> 8617;
8636 -> 0;
8636 -> 8576;
8637 -> 8576;
8638 -> 8617;
8639 -> 8617;
8640 -> 8638;
8640 -> 8639;
8641 -> 8640;
8641 -> 0;
8641 -> 8639;
8642 -> 8617;
8642 -> 3999;
8643 -> 4003;
8643 -> 4002;
8643 -> 8617;
8644 -> 8576;
8645 -> 8634;
8645 -> 8644;
8645 -> 8576;
8646 -> 8610;
8646 -> 8643;
8646 -> 8576;
8647 -> 8643;
8647 -> 7789;
8648 -> 8647;
8648 -> 7953;
8649 -> 8648;
8649 -> 7956;
8649 -> 7953;
8650 -> 8648;
8650 -> 8176;
8650 -> 7953;
8651 -> 8643;
8651 -> 7963;
8652 -> 8651;
8652 -> 7789;
8653 -> 8643;
8654 -> 8643;
8655 -> 8643;
8656 -> 8643;
8657 -> 8643;
8658 -> 8643;
8659 -> 8643;
8660 -> 8643;
8661 -> 8643;
8662 -> 8661;
8662 -> 8643;
8663 -> 8643;
8664 -> 8662;
8664 -> 8663;
8665 -> 8643;
8665 -> 8663;
8666 -> 8663;
8667 -> 8665;
8667 -> 8643;
8667 -> 8666;
8667 -> 8663;
8668 -> 8667;
8669 -> 8643;
8670 -> 8643;
8671 -> 8643;
8672 -> 8643;
8673 -> 8643;
8674 -> 8672;
8674 -> 8673;
8675 -> 8673;
8676 -> 8674;
8676 -> 8643;
8676 -> 8675;
8676 -> 8673;
8677 -> 8676;
8677 -> 8643;
8678 -> 8643;
8679 -> 8643;
8680 -> 8679;
8681 -> 8668;
8681 -> 8643;
8682 -> 8643;
8683 -> 8643;
8683 -> 0;
8684 -> 8643;
8685 -> 8643;
8686 -> 8643;
8687 -> 8685;
8687 -> 8686;
8688 -> 8687;
8688 -> 0;
8688 -> 8686;
8689 -> 8643;
8689 -> 3999;
8690 -> 8643;
8691 -> 8681;
8691 -> 8690;
8691 -> 8643;
8692 -> 8654;
8692 -> 8643;
8693 -> 8643;
8693 -> 3458;
8694 -> 8643;
8694 -> 8658;
8695 -> 8658;
8696 -> 8694;
8696 -> 8695;
8697 -> 8695;
8698 -> 8696;
8698 -> 8697;
8698 -> 8695;
8699 -> 8696;
8699 -> 8695;
8700 -> 8643;
8700 -> 8698;
8701 -> 8698;
8702 -> 8700;
8702 -> 8701;
8703 -> 8701;
8704 -> 8702;
8704 -> 8703;
8704 -> 8701;
8705 -> 8643;
8706 -> 8643;
8707 -> 8643;
8708 -> 8706;
8708 -> 8707;
8709 -> 8706;
8709 -> 8707;
8710 -> 8706;
8710 -> 8707;
8711 -> 8709;
8711 -> 3999;
8711 -> 8707;
8712 -> 8709;
8712 -> 7789;
8713 -> 8712;
8713 -> 7953;
8714 -> 8713;
8714 -> 7956;
8714 -> 7953;
8715 -> 8713;
8715 -> 8176;
8715 -> 7953;
8716 -> 8709;
8716 -> 7963;
8717 -> 8716;
8717 -> 7789;
8718 -> 7781;
8719 -> 7722;
8720 -> 8719;
8720 -> 7728;
8720 -> 7722;
8721 -> 7728;
8721 -> 7722;
8722 -> 7728;
8722 -> 7722;
8723 -> 7728;
8723 -> 7722;
8724 -> 7728;
8724 -> 7722;
8725 -> 7728;
8725 -> 7722;
8726 -> 7728;
8726 -> 7722;
8727 -> 7722;
8728 -> 8727;
8728 -> 7728;
8728 -> 7722;
8729 -> 7728;
8729 -> 8728;
8729 -> 7722;
8730 -> 7722;
8731 -> 8730;
8731 -> 7728;
8731 -> 7722;
8732 -> 7630;
8733 -> 7720;
8733 -> 8732;
8734 -> 8733;
8734 -> 8732;
8735 -> 0;
8735 -> 8732;
8736 -> 8732;
8737 -> 8734;
8737 -> 8736;
8738 -> 8735;
8738 -> 8736;
8739 -> 8733;
8739 -> 8736;
8740 -> 8736;
8741 -> 8739;
8741 -> 8723;
8741 -> 8740;
8741 -> 8736;
8742 -> 8737;
8742 -> 8736;
8743 -> 8736;
8744 -> 8742;
8744 -> 8743;
8745 -> 8743;
8746 -> 8743;
8747 -> 8744;
8747 -> 8742;
8747 -> 8743;
8748 -> 8743;
8749 -> 8743;
8750 -> 8747;
8750 -> 8749;
8751 -> 8748;
8751 -> 8749;
8752 -> 8750;
8752 -> 8742;
8752 -> 8749;
8753 -> 8752;
8753 -> 8751;
8753 -> 8749;
8754 -> 8750;
8754 -> 8752;
8754 -> 8749;
8755 -> 8754;
8755 -> 8751;
8755 -> 8749;
8756 -> 8750;
8756 -> 8754;
8756 -> 8749;
8757 -> 8756;
8757 -> 8751;
8757 -> 8749;
8758 -> 8750;
8758 -> 8756;
8758 -> 8749;
8759 -> 8758;
8759 -> 8751;
8759 -> 8749;
8760 -> 8745;
8760 -> 8743;
8761 -> 8748;
8761 -> 8743;
8762 -> 8746;
8762 -> 8743;
8763 -> 0;
8763 -> 8743;
8764 -> 8760;
8764 -> 8761;
8764 -> 8762;
8764 -> 8763;
8764 -> 8744;
8764 -> 8758;
8764 -> 8752;
8764 -> 8754;
8764 -> 8756;
8764 -> 8753;
8764 -> 8755;
8764 -> 8757;
8764 -> 8759;
8764 -> 8743;
8765 -> 8743;
8766 -> 8764;
8766 -> 8765;
8767 -> 8766;
8767 -> 8764;
8767 -> 8765;
8768 -> 8764;
8768 -> 8765;
8769 -> 8765;
8770 -> 8768;
8770 -> 8769;
8771 -> 8770;
8771 -> 8767;
8771 -> 8769;
8772 -> 8769;
8773 -> 8770;
8773 -> 8767;
8773 -> 8772;
8773 -> 8769;
8774 -> 8770;
8774 -> 8767;
8774 -> 8773;
8775 -> 8774;
8775 -> 8765;
8776 -> 8775;
8776 -> 8768;
8776 -> 8765;
8777 -> 8764;
8777 -> 8765;
8778 -> 8777;
8778 -> 8776;
8778 -> 8765;
8779 -> 8764;
8779 -> 8765;
8780 -> 8764;
8780 -> 8765;
8781 -> 8765;
8782 -> 8779;
8782 -> 8778;
8782 -> 8781;
8782 -> 8765;
8783 -> 8780;
8783 -> 8765;
8784 -> 8780;
8784 -> 8765;
8785 -> 8780;
8785 -> 8765;
8786 -> 8785;
8786 -> 8778;
8786 -> 8765;
8787 -> 8785;
8787 -> 8778;
8787 -> 8786;
8787 -> 8765;
8788 -> 8783;
8788 -> 8765;
8789 -> 8784;
8789 -> 8765;
8790 -> 8765;
8791 -> 8788;
8791 -> 8790;
8792 -> 8789;
8792 -> 8790;
8793 -> 8785;
8793 -> 8790;
8794 -> 8790;
8795 -> 8793;
8795 -> 8794;
8796 -> 8795;
8796 -> 8778;
8796 -> 8794;
8797 -> 8796;
8797 -> 8790;
8798 -> 8790;
8799 -> 8797;
8799 -> 8798;
8800 -> 0;
8800 -> 8790;
8801 -> 8790;
8802 -> 8800;
8802 -> 8801;
8803 -> 8793;
8803 -> 8801;
8804 -> 8802;
8804 -> 8801;
8805 -> 8801;
8806 -> 8804;
8806 -> 8805;
8807 -> 8806;
8807 -> 0;
8807 -> 8805;
8808 -> 8807;
8809 -> 8801;
8810 -> 8803;
8810 -> 8809;
8811 -> 8810;
8811 -> 8778;
8811 -> 8809;
8812 -> 8811;
8812 -> 8801;
8813 -> 8801;
8814 -> 8812;
8814 -> 8813;
8815 -> 8814;
8815 -> 8801;
8816 -> 8815;
8816 -> 8802;
8816 -> 8801;
8817 -> 8816;
8818 -> 8803;
8818 -> 8817;
8819 -> 8817;
8820 -> 8818;
8820 -> 8778;
8820 -> 8819;
8821 -> 8820;
8821 -> 8778;
8821 -> 8819;
8822 -> 8821;
8822 -> 8817;
8823 -> 8822;
8823 -> 8818;
8823 -> 8817;
8824 -> 8817;
8825 -> 8824;
8825 -> 8818;
8825 -> 8817;
8826 -> 8817;
8827 -> 8818;
8827 -> 8778;
8827 -> 8826;
8827 -> 8817;
8828 -> 8818;
8828 -> 8778;
8828 -> 8817;
8829 -> 8816;
8830 -> 8812;
8830 -> 8816;
8831 -> 8790;
8832 -> 8793;
8832 -> 8831;
8833 -> 8831;
8834 -> 8832;
8834 -> 8833;
8835 -> 8833;
8836 -> 8834;
8836 -> 8778;
8836 -> 8835;
8837 -> 8836;
8837 -> 8778;
8837 -> 8835;
8838 -> 8837;
8838 -> 8833;
8839 -> 8838;
8839 -> 8831;
8840 -> 8839;
8840 -> 8790;
8841 -> 8790;
8842 -> 8790;
8843 -> 8841;
8843 -> 8842;
8844 -> 8793;
8844 -> 8842;
8845 -> 8843;
8845 -> 8842;
8846 -> 8842;
8847 -> 8845;
8847 -> 8846;
8848 -> 8844;
8848 -> 8846;
8849 -> 8847;
8849 -> 8846;
8850 -> 8846;
8851 -> 8849;
8851 -> 8850;
8852 -> 8848;
8852 -> 8850;
8853 -> 8850;
8854 -> 8850;
8855 -> 8853;
8855 -> 8854;
8856 -> 8852;
8856 -> 8854;
8857 -> 8854;
8858 -> 8856;
8858 -> 8857;
8859 -> 8857;
8860 -> 8858;
8860 -> 8859;
8861 -> 8860;
8861 -> 8778;
8861 -> 8859;
8862 -> 8861;
8862 -> 8857;
8863 -> 8862;
8864 -> 8863;
8864 -> 8854;
8865 -> 8855;
8865 -> 8854;
8866 -> 8854;
8867 -> 8865;
8867 -> 8866;
8868 -> 8856;
8868 -> 8866;
8869 -> 8866;
8870 -> 8868;
8870 -> 8869;
8871 -> 8869;
8872 -> 8870;
8872 -> 8871;
8873 -> 8872;
8873 -> 8778;
8873 -> 8828;
8873 -> 8871;
8874 -> 8871;
8875 -> 8872;
8875 -> 8778;
8875 -> 8874;
8875 -> 8871;
8876 -> 8872;
8876 -> 8778;
8876 -> 8786;
8876 -> 8823;
8876 -> 8825;
8876 -> 8828;
8876 -> 8875;
8877 -> 8876;
8877 -> 8866;
8878 -> 8866;
8879 -> 8877;
8879 -> 8878;
8880 -> 8879;
8880 -> 0;
8880 -> 8866;
8881 -> 8880;
8882 -> 8868;
8882 -> 8881;
8883 -> 8881;
8884 -> 8882;
8884 -> 8883;
8885 -> 8884;
8885 -> 8881;
8886 -> 8881;
8887 -> 8885;
8887 -> 8886;
8888 -> 8886;
8889 -> 8887;
8889 -> 8888;
8890 -> 8889;
8890 -> 8886;
8891 -> 8881;
8892 -> 8891;
8892 -> 8880;
8893 -> 8880;
8894 -> 8868;
8894 -> 8893;
8895 -> 8893;
8896 -> 8894;
8896 -> 8895;
8897 -> 8896;
8897 -> 8778;
8897 -> 8786;
8897 -> 8823;
8897 -> 8825;
8897 -> 8876;
8897 -> 8828;
8897 -> 8895;
8898 -> 8897;
8898 -> 8893;
8899 -> 8898;
8899 -> 8880;
8900 -> 8892;
8900 -> 8899;
8900 -> 8880;
8901 -> 8880;
8902 -> 8868;
8902 -> 8901;
8903 -> 8901;
8904 -> 8902;
8904 -> 8903;
8905 -> 8904;
8905 -> 8901;
8906 -> 8901;
8907 -> 8902;
8907 -> 8906;
8908 -> 8907;
8908 -> 8778;
8908 -> 8825;
8908 -> 8876;
8908 -> 8906;
8909 -> 8908;
8909 -> 8778;
8909 -> 8906;
8910 -> 8906;
8911 -> 8907;
8911 -> 8778;
8911 -> 8910;
8911 -> 8906;
8912 -> 8901;
8913 -> 8905;
8913 -> 8901;
8914 -> 8913;
8914 -> 8880;
8915 -> 8880;
8916 -> 8915;
8916 -> 8778;
8916 -> 8786;
8916 -> 8823;
8916 -> 8909;
8916 -> 8825;
8916 -> 8876;
8916 -> 8907;
8916 -> 8828;
8917 -> 8916;
8917 -> 8880;
8918 -> 8914;
8918 -> 8880;
8919 -> 8918;
8919 -> 8854;
8920 -> 8919;
8920 -> 8854;
8921 -> 8854;
8922 -> 8920;
8922 -> 8921;
8923 -> 8920;
8923 -> 8921;
8924 -> 8922;
8924 -> 8921;
8925 -> 8921;
8926 -> 8925;
8926 -> 8924;
8926 -> 8921;
8927 -> 8925;
8927 -> 8921;
8928 -> 8927;
8928 -> 8926;
8928 -> 8921;
8929 -> 8928;
8929 -> 8850;
8930 -> 8929;
8930 -> 8928;
8930 -> 8850;
8931 -> 8929;
8931 -> 8850;
8932 -> 8850;
8933 -> 8852;
8933 -> 8932;
8934 -> 8932;
8935 -> 8933;
8935 -> 8934;
8936 -> 8935;
8936 -> 8778;
8936 -> 8828;
8936 -> 8907;
8936 -> 8934;
8937 -> 8934;
8938 -> 8935;
8938 -> 8778;
8938 -> 8937;
8938 -> 8934;
8939 -> 8935;
8939 -> 8778;
8939 -> 8786;
8939 -> 8823;
8939 -> 8909;
8939 -> 8825;
8939 -> 8876;
8939 -> 8907;
8939 -> 8828;
8939 -> 8928;
8939 -> 8938;
8940 -> 8939;
8940 -> 8850;
8941 -> 8850;
8942 -> 8940;
8942 -> 8941;
8943 -> 8931;
8943 -> 8850;
8944 -> 8943;
8944 -> 8846;
8945 -> 8846;
8946 -> 8848;
8946 -> 8945;
8947 -> 8946;
8947 -> 8778;
8947 -> 8825;
8947 -> 8876;
8947 -> 8907;
8947 -> 8939;
8947 -> 8945;
8948 -> 8947;
8948 -> 8846;
8949 -> 8846;
8950 -> 8948;
8950 -> 8949;
8951 -> 8944;
8951 -> 8846;
8952 -> 8951;
8952 -> 8842;
8953 -> 8842;
8954 -> 8844;
8954 -> 8953;
8955 -> 8953;
8956 -> 8954;
8956 -> 8955;
8957 -> 8956;
8957 -> 8778;
8957 -> 8825;
8957 -> 8876;
8957 -> 8907;
8957 -> 8939;
8957 -> 8955;
8958 -> 8957;
8958 -> 8953;
8959 -> 8953;
8960 -> 8958;
8960 -> 8959;
8961 -> 8953;
8962 -> 8954;
8962 -> 8961;
8963 -> 8962;
8963 -> 8778;
8963 -> 8825;
8963 -> 8876;
8963 -> 8907;
8963 -> 8939;
8963 -> 8961;
8964 -> 8963;
8964 -> 8953;
8965 -> 8953;
8966 -> 8964;
8966 -> 8965;
8967 -> 8960;
8967 -> 8966;
8967 -> 8953;
8968 -> 8967;
8968 -> 8842;
8969 -> 8842;
8970 -> 8844;
8970 -> 8969;
8971 -> 8970;
8971 -> 8778;
8971 -> 8825;
8971 -> 8876;
8971 -> 8907;
8971 -> 8939;
8971 -> 8969;
8972 -> 8971;
8972 -> 8842;
8973 -> 8842;
8974 -> 8972;
8974 -> 8973;
8975 -> 8968;
8975 -> 8974;
8975 -> 8842;
8976 -> 8952;
8976 -> 8842;
8977 -> 8976;
8977 -> 8790;
8978 -> 8790;
8979 -> 8790;
8980 -> 8793;
8980 -> 8979;
8981 -> 8980;
8981 -> 8778;
8981 -> 8825;
8981 -> 8876;
8981 -> 8907;
8981 -> 8939;
8981 -> 8979;
8982 -> 8981;
8982 -> 8790;
8983 -> 8790;
8984 -> 8982;
8984 -> 8983;
8985 -> 0;
8985 -> 8984;
8986 -> 8984;
8987 -> 8985;
8987 -> 8986;
8988 -> 8987;
8988 -> 8986;
8989 -> 8986;
8990 -> 8988;
8990 -> 8989;
8991 -> 8990;
8991 -> 0;
8991 -> 8989;
8992 -> 8991;
8993 -> 8987;
8994 -> 8987;
8995 -> 8986;
8995 -> 8987;
8996 -> 8793;
8996 -> 8778;
8996 -> 8790;
8997 -> 8790;
8998 -> 8790;
8999 -> 8996;
8999 -> 8998;
9000 -> 8997;
9000 -> 8998;
9001 -> 8999;
9001 -> 8928;
9001 -> 8998;
9002 -> 8790;
9003 -> 8995;
9003 -> 8790;
9004 -> 8997;
9004 -> 8790;
9005 -> 9002;
9005 -> 8790;
9006 -> 0;
9006 -> 8790;
9007 -> 9003;
9007 -> 9004;
9007 -> 9005;
9007 -> 9006;
9007 -> 8793;
9007 -> 8778;
9007 -> 8786;
9007 -> 8823;
9007 -> 8909;
9007 -> 8987;
9007 -> 8825;
9007 -> 8876;
9007 -> 8907;
9007 -> 8939;
9007 -> 8828;
9007 -> 9001;
9007 -> 8928;
9007 -> 8790;
9008 -> 8790;
9009 -> 9008;
9010 -> 9007;
9010 -> 9009;
9011 -> 9009;
9012 -> 9007;
9012 -> 9008;
9013 -> 9007;
9013 -> 9008;
9014 -> 9013;
9014 -> 9007;
9014 -> 9008;
9015 -> 9013;
9015 -> 9007;
9015 -> 9014;
9015 -> 9008;
9016 -> 9012;
9016 -> 9008;
9017 -> 9016;
9017 -> 9013;
9017 -> 9007;
9017 -> 9014;
9017 -> 9008;
9018 -> 9008;
9019 -> 9017;
9019 -> 9018;
9020 -> 9018;
9021 -> 9019;
9021 -> 9020;
9022 -> 9021;
9022 -> 9017;
9022 -> 9020;
9023 -> 9022;
9023 -> 9018;
9024 -> 9023;
9025 -> 9017;
9025 -> 9018;
9026 -> 9025;
9026 -> 9024;
9026 -> 9018;
9027 -> 9025;
9027 -> 9026;
9027 -> 9018;
9028 -> 9025;
9028 -> 9026;
9028 -> 0;
9028 -> 9018;
9029 -> 9028;
9029 -> 9025;
9029 -> 9018;
9030 -> 9018;
9031 -> 9025;
9031 -> 9030;
9032 -> 9030;
9033 -> 9031;
9033 -> 9032;
9034 -> 9033;
9034 -> 9026;
9034 -> 9032;
9035 -> 9034;
9035 -> 9030;
9036 -> 9030;
9037 -> 9035;
9037 -> 9036;
9038 -> 9037;
9038 -> 9018;
9039 -> 9027;
9039 -> 9025;
9039 -> 9018;
9040 -> 9026;
9040 -> 9029;
9040 -> 9039;
9040 -> 9018;
9041 -> 9026;
9041 -> 9018;
9042 -> 9025;
9042 -> 9040;
9042 -> 9041;
9042 -> 9018;
9043 -> 9017;
9043 -> 9018;
9044 -> 9017;
9044 -> 9018;
9045 -> 9017;
9045 -> 9018;
9046 -> 9018;
9047 -> 9046;
9048 -> 9045;
9048 -> 9047;
9049 -> 9048;
9049 -> 9042;
9049 -> 9047;
9050 -> 9049;
9050 -> 9046;
9051 -> 9046;
9052 -> 9050;
9052 -> 9051;
9053 -> 9051;
9054 -> 9052;
9054 -> 9053;
9055 -> 9051;
9056 -> 9052;
9056 -> 9055;
9057 -> 9055;
9058 -> 9056;
9058 -> 9057;
9059 -> 9058;
9059 -> 9055;
9060 -> 9054;
9060 -> 9059;
9060 -> 9051;
9061 -> 9060;
9061 -> 0;
9061 -> 9046;
9062 -> 9046;
9063 -> 9060;
9063 -> 9046;
9064 -> 9063;
9065 -> 9064;
9066 -> 9064;
9067 -> 9064;
9067 -> 9063;
9068 -> 9067;
9068 -> 9046;
9069 -> 9043;
9069 -> 9068;
9069 -> 9042;
9069 -> 9064;
9069 -> 9046;
9070 -> 9047;
9071 -> 9048;
9071 -> 9069;
9071 -> 9070;
9072 -> 9070;
9073 -> 9069;
9073 -> 0;
9073 -> 9046;
9074 -> 9017;
9074 -> 9018;
9075 -> 9018;
9076 -> 9074;
9076 -> 9075;
9077 -> 9076;
9077 -> 9069;
9077 -> 9075;
9078 -> 9077;
9078 -> 9018;
9079 -> 9018;
9080 -> 9078;
9080 -> 9079;
9081 -> 9080;
9082 -> 9017;
9082 -> 9018;
9083 -> 9017;
9083 -> 9018;
9084 -> 9017;
9084 -> 9018;
9085 -> 9018;
9086 -> 9084;
9086 -> 9085;
9087 -> 9086;
9087 -> 9081;
9087 -> 9085;
9088 -> 9087;
9088 -> 9018;
9089 -> 9084;
9089 -> 9081;
9089 -> 9018;
9090 -> 9018;
9091 -> 9084;
9091 -> 9090;
9092 -> 9091;
9092 -> 9089;
9092 -> 9090;
9093 -> 9092;
9093 -> 9018;
9094 -> 9018;
9095 -> 9093;
9095 -> 9094;
9096 -> 9083;
9096 -> 9095;
9097 -> 0;
9097 -> 9095;
9098 -> 9095;
9099 -> 9096;
9099 -> 9098;
9100 -> 9097;
9100 -> 9098;
9101 -> 9097;
9101 -> 9098;
9102 -> 9084;
9102 -> 9098;
9103 -> 9098;
9104 -> 9099;
9104 -> 9089;
9104 -> 9098;
9105 -> 9099;
9105 -> 9103;
9105 -> 9089;
9105 -> 9104;
9106 -> 9105;
9106 -> 9100;
9106 -> 9104;
9107 -> 9095;
9108 -> 9082;
9108 -> 9095;
9109 -> 9083;
9109 -> 9095;
9110 -> 9095;
9111 -> 9108;
9111 -> 9110;
9112 -> 9109;
9112 -> 9110;
9113 -> 9084;
9113 -> 9110;
9114 -> 9110;
9115 -> 9113;
9115 -> 9114;
9116 -> 9115;
9116 -> 9105;
9116 -> 9114;
9117 -> 9116;
9117 -> 9110;
9118 -> 9110;
9119 -> 9117;
9119 -> 9118;
9120 -> 9110;
9121 -> 9113;
9121 -> 9120;
9122 -> 9121;
9122 -> 9105;
9122 -> 9120;
9123 -> 9122;
9123 -> 9110;
9124 -> 9110;
9125 -> 9113;
9125 -> 9124;
9126 -> 9125;
9126 -> 9105;
9126 -> 9124;
9127 -> 9125;
9127 -> 9105;
9127 -> 9124;
9128 -> 9124;
9129 -> 9125;
9129 -> 9105;
9129 -> 9128;
9129 -> 9124;
9130 -> 9125;
9130 -> 9105;
9130 -> 9124;
9131 -> 9124;
9132 -> 9126;
9132 -> 9110;
9133 -> 9110;
9134 -> 9132;
9134 -> 9133;
9135 -> 9133;
9136 -> 9134;
9136 -> 9135;
9137 -> 9136;
9137 -> 9133;
9138 -> 9133;
9139 -> 9134;
9139 -> 9138;
9140 -> 9139;
9140 -> 9133;
9141 -> 9137;
9141 -> 9140;
9141 -> 9133;
9142 -> 9134;
9142 -> 9133;
9143 -> 9113;
9143 -> 9105;
9143 -> 9110;
9144 -> 9110;
9145 -> 9142;
9145 -> 9144;
9146 -> 9145;
9146 -> 9110;
9147 -> 9113;
9147 -> 9105;
9147 -> 9110;
9148 -> 9113;
9148 -> 9105;
9148 -> 0;
9148 -> 9110;
9149 -> 9148;
9149 -> 9113;
9149 -> 9110;
9150 -> 9110;
9151 -> 9110;
9152 -> 9150;
9152 -> 9151;
9153 -> 9113;
9153 -> 9151;
9154 -> 9153;
9154 -> 9105;
9154 -> 9130;
9154 -> 9151;
9155 -> 9153;
9155 -> 9105;
9155 -> 9151;
9156 -> 9153;
9156 -> 9105;
9156 -> 9127;
9156 -> 9125;
9156 -> 9130;
9156 -> 9149;
9156 -> 9155;
9157 -> 9156;
9158 -> 9153;
9158 -> 9157;
9159 -> 9157;
9160 -> 9158;
9160 -> 9159;
9161 -> 9160;
9161 -> 9157;
9162 -> 9157;
9163 -> 9161;
9163 -> 9162;
9164 -> 9157;
9165 -> 9164;
9165 -> 9156;
9166 -> 9156;
9167 -> 9153;
9167 -> 9166;
9168 -> 9166;
9169 -> 9167;
9169 -> 9168;
9170 -> 9169;
9170 -> 9105;
9170 -> 9127;
9170 -> 9125;
9170 -> 9156;
9170 -> 9130;
9170 -> 9149;
9170 -> 9168;
9171 -> 9170;
9171 -> 9166;
9172 -> 9171;
9172 -> 9156;
9173 -> 9165;
9173 -> 9172;
9173 -> 9156;
9174 -> 9156;
9175 -> 9156;
9176 -> 9156;
9177 -> 9176;
9177 -> 9156;
9178 -> 9156;
9178 -> 9110;
9179 -> 9110;
9180 -> 9113;
9180 -> 9179;
9181 -> 9179;
9182 -> 9180;
9182 -> 9181;
9183 -> 9182;
9183 -> 9105;
9183 -> 9130;
9183 -> 9156;
9183 -> 9181;
9184 -> 9182;
9184 -> 9105;
9184 -> 9181;
9185 -> 9182;
9185 -> 9105;
9185 -> 9127;
9185 -> 9156;
9185 -> 9125;
9185 -> 9130;
9185 -> 9149;
9185 -> 9184;
9186 -> 9185;
9186 -> 9179;
9187 -> 9179;
9188 -> 9186;
9188 -> 9187;
9189 -> 9188;
9190 -> 9189;
9190 -> 9110;
9191 -> 9110;
9192 -> 9142;
9192 -> 9191;
9193 -> 9192;
9193 -> 9110;
9194 -> 9193;
9194 -> 9110;
9195 -> 9142;
9195 -> 9110;
9196 -> 9194;
9196 -> 9110;
9197 -> 9110;
9198 -> 9195;
9198 -> 9197;
9199 -> 9196;
9199 -> 9197;
9200 -> 9113;
9200 -> 9197;
9201 -> 9197;
9202 -> 9200;
9202 -> 9201;
9203 -> 9202;
9203 -> 9105;
9203 -> 9125;
9203 -> 9156;
9203 -> 9185;
9203 -> 9201;
9204 -> 9203;
9204 -> 9197;
9205 -> 9197;
9206 -> 9204;
9206 -> 9205;
9207 -> 9206;
9208 -> 9207;
9208 -> 9110;
9209 -> 9147;
9209 -> 9113;
9209 -> 9110;
9210 -> 9110;
9211 -> 9110;
9212 -> 9110;
9213 -> 9110;
9214 -> 9113;
9214 -> 9213;
9215 -> 9214;
9215 -> 9105;
9215 -> 9125;
9215 -> 9156;
9215 -> 9185;
9215 -> 9213;
9216 -> 9215;
9216 -> 9110;
9217 -> 9110;
9218 -> 9216;
9218 -> 9217;
9219 -> 9143;
9219 -> 9113;
9219 -> 9110;
9220 -> 9110;
9221 -> 9110;
9222 -> 9110;
9223 -> 9110;
9224 -> 9142;
9224 -> 9223;
9225 -> 9224;
9225 -> 9110;
9226 -> 0;
9226 -> 9225;
9227 -> 9225;
9228 -> 9226;
9228 -> 9227;
9229 -> 9228;
9229 -> 9227;
9230 -> 9227;
9231 -> 9229;
9231 -> 9230;
9232 -> 9231;
9232 -> 0;
9232 -> 9230;
9233 -> 9232;
9234 -> 9227;
9234 -> 9105;
9234 -> 9125;
9234 -> 9156;
9234 -> 9185;
9235 -> 9234;
9235 -> 9228;
9235 -> 9227;
9236 -> 9235;
9237 -> 9235;
9238 -> 9178;
9238 -> 9105;
9238 -> 9235;
9238 -> 9225;
9239 -> 9210;
9239 -> 9225;
9240 -> 9113;
9240 -> 9105;
9240 -> 9127;
9240 -> 9156;
9240 -> 9235;
9240 -> 9125;
9240 -> 9185;
9240 -> 9130;
9240 -> 9149;
9240 -> 9209;
9240 -> 9219;
9240 -> 9239;
9241 -> 9239;
9242 -> 9241;
9243 -> 9242;
9243 -> 9240;
9244 -> 9242;
9244 -> 9240;
9245 -> 9244;
9245 -> 9241;
9246 -> 9241;
9247 -> 9245;
9247 -> 9246;
9248 -> 9247;
9248 -> 9241;
9249 -> 9241;
9250 -> 9248;
9250 -> 9249;
9251 -> 9250;
9251 -> 9249;
9252 -> 9251;
9253 -> 9113;
9253 -> 9240;
9253 -> 9252;
9254 -> 9113;
9254 -> 9240;
9254 -> 0;
9254 -> 9252;
9255 -> 9254;
9255 -> 9113;
9255 -> 9252;
9256 -> 9252;
9257 -> 9256;
9257 -> 9252;
9258 -> 9252;
9259 -> 9257;
9259 -> 9258;
9260 -> 9258;
9260 -> 9240;
9261 -> 9259;
9261 -> 9258;
9261 -> 9240;
9261 -> 9244;
9261 -> 9255;
9262 -> 9258;
9263 -> 9261;
9263 -> 9262;
9264 -> 9262;
9265 -> 9263;
9265 -> 9264;
9266 -> 9265;
9266 -> 9262;
9267 -> 9262;
9268 -> 9266;
9268 -> 9267;
9269 -> 9268;
9269 -> 9258;
9270 -> 9261;
9270 -> 9258;
9271 -> 9261;
9271 -> 0;
9271 -> 9258;
9272 -> 9261;
9273 -> 9261;
9273 -> 9258;
9274 -> 9273;
9274 -> 9272;
9274 -> 9258;
9275 -> 9273;
9275 -> 9272;
9275 -> 0;
9275 -> 9258;
9276 -> 9275;
9276 -> 9273;
9276 -> 9258;
9277 -> 9258;
9278 -> 9273;
9278 -> 9277;
9279 -> 9277;
9280 -> 9278;
9280 -> 9279;
9281 -> 9280;
9281 -> 9272;
9281 -> 9279;
9282 -> 9281;
9282 -> 9277;
9283 -> 9277;
9284 -> 9282;
9284 -> 9283;
9285 -> 9277;
9286 -> 9277;
9287 -> 9285;
9287 -> 9286;
9288 -> 9278;
9288 -> 9286;
9289 -> 9286;
9290 -> 9288;
9290 -> 9289;
9291 -> 9290;
9291 -> 9272;
9291 -> 9289;
9292 -> 9291;
9292 -> 9286;
9293 -> 9286;
9294 -> 9292;
9294 -> 9293;
9295 -> 9287;
9295 -> 9286;
9296 -> 9295;
9296 -> 9288;
9296 -> 9272;
9296 -> 9276;
9296 -> 9286;
9297 -> 9286;
9298 -> 9296;
9298 -> 9297;
9299 -> 9296;
9299 -> 9297;
9300 -> 9296;
9300 -> 9297;
9301 -> 9297;
9302 -> 9300;
9302 -> 9301;
9303 -> 9302;
9303 -> 9297;
9304 -> 9297;
9305 -> 9303;
9305 -> 9304;
9306 -> 9297;
9307 -> 9305;
9307 -> 9306;
9308 -> 9307;
9308 -> 9306;
9309 -> 9306;
9310 -> 9308;
9310 -> 9309;
9311 -> 9310;
9311 -> 9309;
9312 -> 9311;
9313 -> 9312;
9314 -> 9313;
9315 -> 9313;
9316 -> 9313;
9316 -> 9312;
9317 -> 9312;
9318 -> 9316;
9318 -> 9317;
9319 -> 9318;
9319 -> 9312;
9320 -> 9316;
9320 -> 9312;
9321 -> 9312;
9322 -> 9320;
9322 -> 9321;
9323 -> 9320;
9323 -> 9321;
9324 -> 9320;
9324 -> 9321;
9325 -> 9320;
9325 -> 9321;
9326 -> 9322;
9326 -> 9321;
9327 -> 9323;
9327 -> 9321;
9328 -> 9324;
9328 -> 9321;
9329 -> 9321;
9330 -> 9328;
9330 -> 9329;
9331 -> 9329;
9332 -> 9330;
9332 -> 9320;
9332 -> 9329;
9333 -> 9330;
9333 -> 9320;
9333 -> 9329;
9334 -> 9331;
9334 -> 9329;
9335 -> 9334;
9335 -> 9321;
9336 -> 9325;
9336 -> 9321;
9337 -> 9326;
9337 -> 9327;
9337 -> 9335;
9337 -> 9336;
9337 -> 9320;
9337 -> 9321;
9338 -> 9337;
9338 -> 9321;
9339 -> 9337;
9339 -> 9321;
9340 -> 9338;
9340 -> 9321;
9341 -> 9338;
9341 -> 9321;
9342 -> 9296;
9342 -> 9297;
9343 -> 9296;
9343 -> 9297;
9344 -> 9296;
9344 -> 9297;
9345 -> 9297;
9346 -> 9344;
9346 -> 9345;
9347 -> 9346;
9347 -> 9337;
9347 -> 9345;
9348 -> 9347;
9348 -> 9297;
9349 -> 9348;
9349 -> 9342;
9349 -> 9297;
9350 -> 9348;
9350 -> 9349;
9351 -> 9349;
9352 -> 9350;
9352 -> 9351;
9352 -> 9286;
9353 -> 9350;
9353 -> 9297;
9354 -> 9350;
9354 -> 9297;
9355 -> 9350;
9355 -> 9297;
9356 -> 9297;
9357 -> 9354;
9357 -> 9356;
9357 -> 9297;
9358 -> 9355;
9358 -> 9354;
9358 -> 9297;
9359 -> 9297;
9360 -> 9355;
9360 -> 9359;
9360 -> 9297;
9361 -> 9355;
9361 -> 9354;
9361 -> 9360;
9362 -> 9350;
9362 -> 9297;
9363 -> 9350;
9363 -> 9297;
9364 -> 9297;
9365 -> 9363;
9365 -> 9364;
9366 -> 9365;
9366 -> 9297;
9367 -> 9297;
9368 -> 9366;
9368 -> 9367;
9369 -> 9297;
9370 -> 9363;
9370 -> 9369;
9371 -> 9369;
9372 -> 9370;
9372 -> 9371;
9373 -> 9371;
9374 -> 9372;
9374 -> 9373;
9375 -> 9374;
9375 -> 9371;
9376 -> 9371;
9377 -> 9372;
9377 -> 9376;
9377 -> 9371;
9378 -> 9375;
9378 -> 9372;
9378 -> 9377;
9379 -> 9372;
9379 -> 9371;
9380 -> 9372;
9380 -> 9371;
9381 -> 9375;
9381 -> 9371;
9382 -> 9381;
9382 -> 9369;
9383 -> 9370;
9383 -> 9369;
9384 -> 9369;
9385 -> 9369;
9386 -> 9382;
9386 -> 9385;
9387 -> 9383;
9387 -> 9385;
9388 -> 9383;
9388 -> 9385;
9389 -> 9383;
9389 -> 9385;
9390 -> 9383;
9390 -> 9385;
9391 -> 9384;
9391 -> 9385;
9392 -> 9386;
9392 -> 9391;
9392 -> 9385;
9393 -> 9387;
9393 -> 9391;
9393 -> 9385;
9394 -> 9388;
9394 -> 9391;
9394 -> 9385;
9395 -> 9389;
9395 -> 9391;
9395 -> 9385;
9396 -> 9390;
9396 -> 9391;
9396 -> 9385;
9397 -> 9384;
9397 -> 9297;
9398 -> 9297;
9399 -> 9363;
9399 -> 9398;
9400 -> 9398;
9401 -> 9399;
9401 -> 9400;
9401 -> 9398;
9402 -> 9398;
9403 -> 9399;
9403 -> 9297;
9404 -> 9362;
9404 -> 9297;
9405 -> 9297;
9406 -> 9404;
9406 -> 9405;
9407 -> 9363;
9407 -> 9405;
9408 -> 9406;
9408 -> 9405;
9409 -> 9408;
9410 -> 9403;
9410 -> 9297;
9411 -> 0;
9411 -> 9297;
9412 -> 9297;
9413 -> 9297;
9414 -> 9410;
9414 -> 9413;
9415 -> 9411;
9415 -> 9413;
9416 -> 9412;
9416 -> 9413;
9417 -> 9363;
9417 -> 9413;
9418 -> 9413;
9419 -> 9417;
9419 -> 9418;
9420 -> 9418;
9421 -> 9419;
9421 -> 9420;
9422 -> 9421;
9422 -> 9420;
9423 -> 9422;
9423 -> 9418;
9424 -> 9423;
9424 -> 9413;
9425 -> 9415;
9425 -> 9413;
9426 -> 9413;
9427 -> 9425;
9427 -> 9426;
9428 -> 9427;
9428 -> 9426;
9429 -> 9426;
9430 -> 9428;
9430 -> 9429;
9431 -> 9430;
9431 -> 9429;
9432 -> 9431;
9433 -> 9426;
9434 -> 9427;
9434 -> 9426;
9435 -> 0;
9435 -> 9434;
9436 -> 9415;
9436 -> 9413;
9437 -> 9415;
9437 -> 9413;
9438 -> 9413;
9439 -> 9417;
9439 -> 9438;
9440 -> 9438;
9441 -> 9439;
9441 -> 9440;
9442 -> 9441;
9442 -> 9440;
9443 -> 9442;
9443 -> 9438;
9444 -> 9443;
9444 -> 9413;
9445 -> 9413;
9446 -> 9437;
9446 -> 9445;
9447 -> 9444;
9447 -> 9445;
9448 -> 9446;
9448 -> 9445;
9449 -> 9445;
9450 -> 9448;
9450 -> 9449;
9451 -> 9447;
9451 -> 9449;
9452 -> 9450;
9452 -> 9449;
9453 -> 9449;
9454 -> 9452;
9454 -> 9453;
9455 -> 9454;
9455 -> 9453;
9456 -> 9455;
9457 -> 9449;
9458 -> 9456;
9458 -> 9457;
9458 -> 9449;
9459 -> 9451;
9459 -> 9449;
9460 -> 9450;
9460 -> 9449;
9461 -> 9449;
9462 -> 9460;
9462 -> 9461;
9463 -> 9462;
9463 -> 9461;
9464 -> 9461;
9465 -> 9463;
9465 -> 9464;
9466 -> 9465;
9466 -> 9464;
9467 -> 9466;
9468 -> 9461;
9469 -> 9462;
9469 -> 9461;
9470 -> 0;
9470 -> 9469;
9471 -> 9459;
9471 -> 9470;
9471 -> 9449;
9472 -> 9471;
9473 -> 9472;
9473 -> 9445;
9474 -> 9413;
9475 -> 9473;
9475 -> 9474;
9475 -> 9413;
9476 -> 9414;
9476 -> 9413;
9477 -> 9397;
9477 -> 9297;
9478 -> 9297;
9479 -> 9477;
9479 -> 9478;
9480 -> 9363;
9480 -> 9478;
9481 -> 9479;
9481 -> 9392;
9481 -> 9478;
9482 -> 9478;
9483 -> 9481;
9483 -> 9482;
9484 -> 9480;
9484 -> 9482;
9485 -> 9484;
9485 -> 9483;
9485 -> 9381;
9485 -> 9482;
9486 -> 9484;
9486 -> 9482;
9487 -> 9482;
9488 -> 9484;
9488 -> 9487;
9488 -> 9482;
9489 -> 9488;
9490 -> 9489;
9490 -> 9484;
9490 -> 9488;
9491 -> 9478;
9492 -> 9297;
9493 -> 9350;
9493 -> 9297;
9494 -> 9350;
9494 -> 9297;
9495 -> 9350;
9495 -> 9297;
9496 -> 9350;
9496 -> 9297;
9497 -> 9350;
9497 -> 9297;
9498 -> 9493;
9498 -> 9297;
9499 -> 9494;
9499 -> 9297;
9500 -> 9495;
9500 -> 9297;
9501 -> 9496;
9501 -> 9297;
9502 -> 9297;
9503 -> 9501;
9503 -> 9502;
9504 -> 9502;
9505 -> 9503;
9505 -> 9502;
9506 -> 9503;
9506 -> 9502;
9507 -> 9504;
9507 -> 9502;
9508 -> 9507;
9508 -> 9297;
9509 -> 9497;
9509 -> 9297;
9510 -> 9498;
9510 -> 9499;
9510 -> 9500;
9510 -> 9508;
9510 -> 9509;
9510 -> 9297;
9511 -> 9510;
9511 -> 9297;
9512 -> 9510;
9512 -> 9297;
9513 -> 9511;
9513 -> 9297;
9514 -> 9511;
9514 -> 9297;
9515 -> 9510;
9515 -> 9297;
9516 -> 9510;
9517 -> 9510;
9517 -> 9297;
9518 -> 9288;
9518 -> 9295;
9518 -> 9337;
9518 -> 9351;
9518 -> 9350;
9518 -> 9361;
9518 -> 9476;
9518 -> 9510;
9518 -> 9516;
9518 -> 9286;
9519 -> 9518;
9519 -> 9258;
9520 -> 9274;
9520 -> 9273;
9520 -> 9258;
9521 -> 9519;
9521 -> 9258;
9522 -> 9261;
9522 -> 9521;
9522 -> 9518;
9522 -> 9520;
9522 -> 9258;
9523 -> 9261;
9523 -> 9258;
9524 -> 9258;
9525 -> 9523;
9525 -> 9524;
9526 -> 9524;
9527 -> 9525;
9527 -> 9526;
9528 -> 9527;
9528 -> 9522;
9528 -> 9526;
9529 -> 9528;
9529 -> 9524;
9530 -> 9524;
9531 -> 9525;
9531 -> 9522;
9531 -> 9530;
9531 -> 9524;
9532 -> 9529;
9532 -> 9525;
9532 -> 9531;
9533 -> 9525;
9533 -> 9522;
9533 -> 9524;
9534 -> 9525;
9534 -> 9522;
9534 -> 9533;
9534 -> 9524;
9535 -> 9525;
9535 -> 9522;
9535 -> 9524;
9536 -> 9529;
9536 -> 9524;
9537 -> 9534;
9537 -> 9535;
9537 -> 9536;
9537 -> 9522;
9537 -> 9532;
9537 -> 9533;
9537 -> 9524;
9538 -> 9537;
9538 -> 9258;
9539 -> 9523;
9539 -> 9537;
9539 -> 9258;
9540 -> 9258;
9541 -> 9258;
9542 -> 9538;
9542 -> 9541;
9543 -> 9539;
9543 -> 9541;
9544 -> 9539;
9544 -> 9541;
9545 -> 9539;
9545 -> 9541;
9546 -> 9539;
9546 -> 9541;
9547 -> 9540;
9547 -> 9541;
9548 -> 9542;
9548 -> 9547;
9548 -> 9541;
9549 -> 9543;
9549 -> 9547;
9549 -> 9541;
9550 -> 9544;
9550 -> 9547;
9550 -> 9541;
9551 -> 9545;
9551 -> 9547;
9551 -> 9541;
9552 -> 9546;
9552 -> 9547;
9552 -> 9541;
9553 -> 9261;
9553 -> 9540;
9553 -> 9537;
9553 -> 9548;
9553 -> 9549;
9553 -> 9550;
9553 -> 9551;
9553 -> 9552;
9553 -> 9258;
9554 -> 9261;
9554 -> 9540;
9555 -> 9261;
9555 -> 9540;
9556 -> 9261;
9556 -> 9540;
9557 -> 9261;
9557 -> 9540;
9558 -> 9261;
9558 -> 9540;
9559 -> 9540;
9560 -> 9558;
9560 -> 9559;
9561 -> 9560;
9561 -> 9553;
9561 -> 9559;
9562 -> 9561;
9562 -> 9540;
9563 -> 9540;
9564 -> 9562;
9564 -> 9563;
9565 -> 9540;
9566 -> 9540;
9567 -> 9565;
9567 -> 9566;
9567 -> 9258;
9568 -> 9565;
9568 -> 9540;
9569 -> 9540;
9570 -> 9568;
9570 -> 9569;
9571 -> 9570;
9571 -> 9540;
9572 -> 9540;
9573 -> 9571;
9573 -> 9572;
9574 -> 9540;
9575 -> 9568;
9575 -> 9574;
9576 -> 9575;
9576 -> 9540;
9577 -> 9540;
9578 -> 9576;
9578 -> 9577;
9579 -> 9573;
9579 -> 9578;
9579 -> 9540;
9580 -> 9540;
9581 -> 9568;
9581 -> 9580;
9582 -> 9581;
9582 -> 9540;
9583 -> 9540;
9584 -> 9582;
9584 -> 9583;
9585 -> 9579;
9585 -> 9584;
9585 -> 9540;
9586 -> 9565;
9586 -> 9540;
9587 -> 9565;
9587 -> 9540;
9588 -> 9540;
9589 -> 9587;
9589 -> 9588;
9590 -> 9589;
9590 -> 9540;
9591 -> 9540;
9592 -> 9590;
9592 -> 9591;
9593 -> 9540;
9594 -> 9540;
9595 -> 9593;
9595 -> 9594;
9596 -> 9587;
9596 -> 9594;
9597 -> 9594;
9598 -> 9595;
9598 -> 9597;
9598 -> 9594;
9599 -> 9596;
9599 -> 9595;
9599 -> 9594;
9600 -> 9594;
9601 -> 9596;
9601 -> 9600;
9601 -> 9594;
9602 -> 9596;
9602 -> 9595;
9602 -> 9601;
9603 -> 9540;
9604 -> 9602;
9604 -> 9603;
9605 -> 9604;
9605 -> 9540;
9606 -> 9605;
9607 -> 9565;
9607 -> 9540;
9608 -> 9565;
9608 -> 9540;
9609 -> 9565;
9609 -> 9540;
9610 -> 9565;
9610 -> 9540;
9611 -> 9565;
9611 -> 9540;
9612 -> 9611;
9612 -> 9540;
9613 -> 9611;
9613 -> 0;
9613 -> 9540;
9614 -> 9613;
9614 -> 9611;
9614 -> 9540;
9615 -> 9611;
9615 -> 9540;
9616 -> 9609;
9616 -> 9540;
9617 -> 9540;
9618 -> 9615;
9618 -> 9540;
9619 -> 9610;
9619 -> 9540;
9620 -> 9540;
9621 -> 9616;
9621 -> 9620;
9622 -> 9617;
9622 -> 9620;
9623 -> 9618;
9623 -> 9620;
9624 -> 9619;
9624 -> 9620;
9625 -> 9611;
9625 -> 9620;
9626 -> 9624;
9626 -> 0;
9626 -> 9620;
9627 -> 9620;
9628 -> 9621;
9628 -> 9620;
9629 -> 9622;
9629 -> 9620;
9630 -> 9623;
9630 -> 9620;
9631 -> 9626;
9631 -> 9620;
9632 -> 9620;
9633 -> 9627;
9633 -> 9620;
9634 -> 9620;
9635 -> 9628;
9635 -> 9634;
9636 -> 9629;
9636 -> 9634;
9637 -> 9630;
9637 -> 9634;
9638 -> 9631;
9638 -> 9634;
9639 -> 9632;
9639 -> 9634;
9640 -> 9632;
9640 -> 9634;
9641 -> 9632;
9641 -> 9634;
9642 -> 9633;
9642 -> 9634;
9643 -> 9625;
9643 -> 9634;
9644 -> 9635;
9644 -> 9634;
9645 -> 9636;
9645 -> 9634;
9646 -> 9634;
9647 -> 9639;
9647 -> 9634;
9648 -> 9640;
9648 -> 9634;
9649 -> 9641;
9649 -> 9634;
9650 -> 9642;
9650 -> 9634;
9651 -> 9644;
9651 -> 9645;
9651 -> 9646;
9651 -> 9647;
9651 -> 9648;
9651 -> 9649;
9651 -> 9650;
9651 -> 9643;
9651 -> 9632;
9651 -> 9634;
9652 -> 9651;
9652 -> 9646;
9653 -> 9646;
9654 -> 9652;
9654 -> 9653;
9655 -> 9653;
9656 -> 9654;
9656 -> 9655;
9657 -> 9656;
9657 -> 9651;
9657 -> 9655;
9658 -> 9657;
9658 -> 9653;
9659 -> 9653;
9660 -> 9654;
9660 -> 9651;
9660 -> 9659;
9660 -> 9653;
9661 -> 9654;
9661 -> 9651;
9661 -> 9653;
9662 -> 9654;
9662 -> 9651;
9662 -> 9661;
9662 -> 9653;
9663 -> 9654;
9663 -> 9651;
9663 -> 9653;
9664 -> 9658;
9664 -> 9653;
9665 -> 9662;
9665 -> 9663;
9665 -> 9664;
9665 -> 9651;
9665 -> 9661;
9665 -> 9653;
9666 -> 9646;
9667 -> 9665;
9667 -> 9666;
9668 -> 9665;
9668 -> 9666;
9669 -> 9665;
9669 -> 9666;
9670 -> 9665;
9670 -> 9666;
9671 -> 9665;
9671 -> 9666;
9672 -> 9646;
9672 -> 9666;
9673 -> 9667;
9673 -> 9672;
9673 -> 9666;
9674 -> 9668;
9674 -> 9672;
9674 -> 9666;
9675 -> 9669;
9675 -> 9672;
9675 -> 9666;
9676 -> 9670;
9676 -> 9672;
9676 -> 9666;
9677 -> 9671;
9677 -> 9672;
9677 -> 9666;
9678 -> 9651;
9678 -> 9646;
9678 -> 9665;
9678 -> 9673;
9678 -> 9674;
9678 -> 9675;
9678 -> 9676;
9678 -> 9677;
9678 -> 9634;
9679 -> 9651;
9679 -> 9646;
9680 -> 9679;
9680 -> 9678;
9680 -> 9646;
9681 -> 9651;
9681 -> 9646;
9682 -> 9646;
9683 -> 9681;
9683 -> 9682;
9684 -> 9683;
9684 -> 9680;
9684 -> 9682;
9685 -> 9684;
9685 -> 9646;
9686 -> 9651;
9686 -> 9646;
9687 -> 9651;
9687 -> 9646;
9688 -> 9686;
9688 -> 9685;
9688 -> 9687;
9688 -> 9646;
9689 -> 9686;
9689 -> 9685;
9689 -> 9687;
9689 -> 9646;
9690 -> 9686;
9690 -> 9685;
9690 -> 9687;
9690 -> 9646;
9691 -> 9686;
9691 -> 9685;
9691 -> 9687;
9691 -> 9646;
9692 -> 9686;
9692 -> 9685;
9692 -> 9646;
9693 -> 9646;
9694 -> 9692;
9694 -> 9693;
9695 -> 9687;
9695 -> 9693;
9696 -> 9694;
9696 -> 9685;
9696 -> 9695;
9696 -> 9693;
9697 -> 9693;
9698 -> 9696;
9698 -> 9697;
9698 -> 9693;
9699 -> 9696;
9699 -> 9695;
9699 -> 9685;
9699 -> 9693;
9700 -> 9694;
9700 -> 9685;
9700 -> 9695;
9700 -> 9693;
9701 -> 9693;
9702 -> 9696;
9702 -> 9701;
9702 -> 9693;
9703 -> 9696;
9703 -> 9695;
9703 -> 9685;
9703 -> 9693;
9704 -> 9696;
9704 -> 9695;
9704 -> 9693;
9705 -> 9693;
9706 -> 9705;
9706 -> 9695;
9706 -> 9693;
9707 -> 9693;
9708 -> 9707;
9708 -> 9695;
9708 -> 9693;
9709 -> 9694;
9709 -> 9685;
9709 -> 9695;
9709 -> 9693;
9710 -> 9693;
9711 -> 9695;
9711 -> 9685;
9711 -> 9710;
9711 -> 9693;
9712 -> 9646;
9713 -> 9686;
9713 -> 9646;
9714 -> 9686;
9714 -> 9646;
9715 -> 9713;
9715 -> 9685;
9715 -> 9694;
9715 -> 9646;
9716 -> 9646;
9717 -> 9715;
9717 -> 9716;
9718 -> 9714;
9718 -> 9716;
9719 -> 9718;
9719 -> 9685;
9719 -> 9717;
9719 -> 9716;
9720 -> 9718;
9720 -> 9685;
9720 -> 9716;
9721 -> 9716;
9722 -> 9718;
9722 -> 9685;
9722 -> 9720;
9722 -> 9721;
9722 -> 9716;
9723 -> 9646;
9724 -> 9713;
9724 -> 9646;
9725 -> 9713;
9725 -> 9685;
9725 -> 9646;
9726 -> 9713;
9726 -> 9685;
9726 -> 9646;
9727 -> 9713;
9727 -> 9685;
9727 -> 9694;
9727 -> 9717;
9727 -> 9688;
9727 -> 9689;
9727 -> 9690;
9727 -> 9691;
9727 -> 9700;
9727 -> 9704;
9727 -> 9706;
9727 -> 9708;
9727 -> 9709;
9727 -> 9726;
9728 -> 9727;
9729 -> 9713;
9729 -> 9728;
9730 -> 9728;
9731 -> 9729;
9731 -> 9730;
9732 -> 9731;
9732 -> 9728;
9733 -> 9728;
9734 -> 9732;
9734 -> 9733;
9735 -> 9728;
9736 -> 9735;
9736 -> 9727;
9737 -> 9727;
9738 -> 9713;
9738 -> 9737;
9739 -> 9737;
9740 -> 9738;
9740 -> 9739;
9741 -> 9740;
9741 -> 9685;
9741 -> 9694;
9741 -> 9717;
9741 -> 9727;
9741 -> 9739;
9742 -> 9741;
9742 -> 9737;
9743 -> 9742;
9743 -> 9727;
9744 -> 9736;
9744 -> 9743;
9744 -> 9727;
9745 -> 9727;
9746 -> 9727;
9747 -> 9727;
9748 -> 9747;
9748 -> 9727;
9749 -> 9713;
9749 -> 9727;
9749 -> 9646;
9750 -> 9646;
9751 -> 9713;
9751 -> 9727;
9751 -> 9750;
9751 -> 9646;
9752 -> 9646;
9753 -> 9713;
9753 -> 9646;
9754 -> 9646;
9755 -> 9753;
9755 -> 9754;
9756 -> 9755;
9756 -> 9727;
9756 -> 9754;
9757 -> 9755;
9757 -> 9727;
9757 -> 9754;
9758 -> 9757;
9758 -> 9646;
9759 -> 9646;
9760 -> 9758;
9760 -> 9759;
9761 -> 9760;
9762 -> 9753;
9762 -> 9761;
9763 -> 0;
9763 -> 9761;
9764 -> 9761;
9765 -> 9763;
9765 -> 9764;
9766 -> 9762;
9766 -> 9764;
9767 -> 9766;
9767 -> 9727;
9767 -> 9764;
9768 -> 9766;
9768 -> 9727;
9768 -> 9767;
9768 -> 9764;
9769 -> 9765;
9769 -> 9764;
9770 -> 9764;
9771 -> 9769;
9771 -> 9770;
9772 -> 9766;
9772 -> 9770;
9773 -> 9770;
9774 -> 9770;
9775 -> 9770;
9776 -> 9772;
9776 -> 9775;
9777 -> 9776;
9777 -> 9770;
9778 -> 9770;
9779 -> 9777;
9779 -> 9778;
9780 -> 9779;
9780 -> 9770;
9781 -> 9770;
9782 -> 9780;
9782 -> 9781;
9783 -> 9782;
9783 -> 9781;
9784 -> 9783;
9785 -> 9779;
9785 -> 9770;
9786 -> 9770;
9787 -> 9785;
9787 -> 9786;
9788 -> 9787;
9788 -> 9786;
9789 -> 9786;
9790 -> 9788;
9790 -> 9789;
9791 -> 9790;
9791 -> 9789;
9792 -> 9789;
9793 -> 9791;
9793 -> 9792;
9794 -> 9793;
9794 -> 9792;
9795 -> 0;
9795 -> 9794;
9796 -> 9779;
9796 -> 0;
9796 -> 9795;
9797 -> 9796;
9798 -> 9772;
9798 -> 9797;
9799 -> 9797;
9800 -> 9798;
9800 -> 9799;
9801 -> 9800;
9801 -> 9797;
9802 -> 9797;
9803 -> 9801;
9803 -> 9802;
9804 -> 9797;
9805 -> 9804;
9805 -> 9796;
9806 -> 9805;
9807 -> 9805;
9808 -> 9806;
9808 -> 9807;
9809 -> 9806;
9809 -> 9807;
9810 -> 9772;
9810 -> 9807;
9811 -> 9807;
9812 -> 9810;
9812 -> 9811;
9813 -> 9812;
9813 -> 9807;
9814 -> 9807;
9815 -> 9813;
9815 -> 9814;
9816 -> 9807;
9817 -> 9816;
9817 -> 9805;
9818 -> 9817;
9819 -> 9818;
9819 -> 9817;
9820 -> 9817;
9821 -> 9819;
9821 -> 9820;
9822 -> 9779;
9822 -> 0;
9822 -> 9821;
9823 -> 9771;
9823 -> 9822;
9824 -> 9822;
9825 -> 9823;
9825 -> 9824;
9826 -> 9772;
9826 -> 9824;
9827 -> 9825;
9827 -> 0;
9827 -> 9824;
9828 -> 9824;
9829 -> 9826;
9829 -> 9828;
9830 -> 9829;
9830 -> 9824;
9831 -> 9824;
9832 -> 9830;
9832 -> 9831;
9833 -> 9831;
9834 -> 9832;
9834 -> 9833;
9835 -> 9834;
9835 -> 9831;
9836 -> 9824;
9837 -> 9826;
9837 -> 9836;
9838 -> 9837;
9838 -> 9824;
9839 -> 9824;
9840 -> 9838;
9840 -> 9839;
9841 -> 9824;
9842 -> 9840;
9842 -> 9841;
9843 -> 9842;
9843 -> 9841;
9844 -> 9841;
9845 -> 9843;
9845 -> 9844;
9846 -> 9845;
9846 -> 9844;
9847 -> 9846;
9848 -> 9835;
9848 -> 9847;
9848 -> 9824;
9849 -> 9827;
9849 -> 9848;
9849 -> 9824;
9850 -> 9849;
9851 -> 9771;
9851 -> 9850;
9852 -> 9850;
9853 -> 9851;
9853 -> 9852;
9854 -> 9772;
9854 -> 9852;
9855 -> 9853;
9855 -> 9852;
9856 -> 9852;
9857 -> 9855;
9857 -> 9856;
9858 -> 9854;
9858 -> 9856;
9859 -> 9856;
9860 -> 9858;
9860 -> 9859;
9861 -> 9860;
9861 -> 9856;
9862 -> 9856;
9863 -> 9861;
9863 -> 9862;
9864 -> 9863;
9864 -> 9856;
9865 -> 9863;
9865 -> 9864;
9866 -> 9864;
9867 -> 9865;
9867 -> 9866;
9868 -> 9867;
9868 -> 9866;
9869 -> 0;
9869 -> 9868;
9870 -> 9864;
9871 -> 9870;
9871 -> 9727;
9871 -> 9757;
9872 -> 9870;
9873 -> 9870;
9874 -> 9870;
9875 -> 9870;
9875 -> 9864;
9876 -> 9869;
9876 -> 9875;
9876 -> 9858;
9876 -> 9727;
9876 -> 9757;
9876 -> 9870;
9876 -> 9767;
9876 -> 9872;
9876 -> 9864;
9877 -> 9864;
9878 -> 9876;
9878 -> 9877;
9879 -> 9876;
9879 -> 9877;
9880 -> 9876;
9880 -> 9877;
9881 -> 9876;
9881 -> 9877;
9882 -> 9878;
9882 -> 9877;
9883 -> 9879;
9883 -> 9877;
9884 -> 9880;
9884 -> 9877;
9885 -> 9877;
9886 -> 9884;
9886 -> 9885;
9887 -> 9885;
9888 -> 9886;
9888 -> 9876;
9888 -> 9885;
9889 -> 9886;
9889 -> 9876;
9889 -> 9885;
9890 -> 9887;
9890 -> 9885;
9891 -> 9890;
9891 -> 9877;
9892 -> 9881;
9892 -> 9877;
9893 -> 9882;
9893 -> 9883;
9893 -> 9891;
9893 -> 9892;
9893 -> 9876;
9893 -> 9877;
9894 -> 9893;
9894 -> 9877;
9895 -> 9893;
9895 -> 9877;
9896 -> 9894;
9896 -> 9877;
9897 -> 9894;
9897 -> 9877;
9898 -> 9893;
9898 -> 9854;
9898 -> 9852;
9899 -> 9852;
9900 -> 9898;
9900 -> 9899;
9901 -> 9898;
9901 -> 9850;
9902 -> 9901;
9902 -> 9770;
9903 -> 9771;
9903 -> 9770;
9904 -> 9770;
9905 -> 9902;
9905 -> 9904;
9906 -> 9903;
9906 -> 9904;
9907 -> 9772;
9907 -> 9904;
9908 -> 9904;
9909 -> 9908;
9910 -> 9907;
9910 -> 9909;
9911 -> 9910;
9911 -> 9898;
9911 -> 9909;
9912 -> 9911;
9912 -> 9908;
9913 -> 9908;
9914 -> 9912;
9914 -> 9913;
9915 -> 9908;
9916 -> 9908;
9917 -> 9914;
9917 -> 9908;
9918 -> 9908;
9919 -> 9917;
9919 -> 9918;
9920 -> 9919;
9920 -> 9918;
9921 -> 9918;
9922 -> 9920;
9922 -> 9921;
9923 -> 9922;
9923 -> 9921;
9924 -> 9921;
9925 -> 9923;
9925 -> 9924;
9926 -> 9925;
9926 -> 9924;
9927 -> 0;
9927 -> 9926;
9928 -> 9914;
9928 -> 9927;
9929 -> 9927;
9930 -> 9928;
9930 -> 9929;
9931 -> 9930;
9931 -> 9929;
9932 -> 9929;
9933 -> 9931;
9933 -> 9932;
9934 -> 9933;
9934 -> 9932;
9935 -> 9934;
9936 -> 9914;
9936 -> 0;
9936 -> 9935;
9937 -> 9914;
9937 -> 0;
9937 -> 9936;
9938 -> 9914;
9938 -> 0;
9938 -> 9937;
9939 -> 9904;
9940 -> 9907;
9940 -> 9939;
9941 -> 9940;
9941 -> 9898;
9941 -> 9939;
9942 -> 9941;
9942 -> 9904;
9943 -> 9904;
9944 -> 9942;
9944 -> 9943;
9945 -> 9905;
9945 -> 9904;
9946 -> 9764;
9947 -> 9764;
9948 -> 9945;
9948 -> 9947;
9949 -> 9948;
9949 -> 9764;
9950 -> 9764;
9951 -> 9949;
9951 -> 9950;
9952 -> 9951;
9952 -> 9950;
9953 -> 0;
9953 -> 9952;
9954 -> 9766;
9954 -> 9898;
9954 -> 9764;
9955 -> 9945;
9955 -> 9764;
9956 -> 9955;
9956 -> 9760;
9957 -> 9713;
9957 -> 9956;
9957 -> 9898;
9957 -> 9954;
9957 -> 9634;
9958 -> 9713;
9958 -> 9646;
9959 -> 9713;
9959 -> 9646;
9960 -> 9713;
9960 -> 9646;
9961 -> 9713;
9961 -> 9646;
9962 -> 9713;
9962 -> 9646;
9963 -> 9958;
9963 -> 9646;
9964 -> 9959;
9964 -> 9646;
9965 -> 9960;
9965 -> 9646;
9966 -> 9961;
9966 -> 9646;
9967 -> 9646;
9968 -> 9966;
9968 -> 9967;
9969 -> 9967;
9970 -> 9968;
9970 -> 9957;
9970 -> 9967;
9971 -> 9968;
9971 -> 9957;
9971 -> 9967;
9972 -> 9969;
9972 -> 9967;
9973 -> 9972;
9973 -> 9646;
9974 -> 9962;
9974 -> 9646;
9975 -> 9963;
9975 -> 9964;
9975 -> 9965;
9975 -> 9973;
9975 -> 9974;
9975 -> 9957;
9975 -> 9646;
9976 -> 9975;
9976 -> 9646;
9977 -> 9975;
9977 -> 9646;
9978 -> 9976;
9978 -> 9646;
9979 -> 9976;
9979 -> 9646;
9980 -> 9975;
9980 -> 9646;
9981 -> 9975;
9981 -> 9646;
9982 -> 9975;
9982 -> 9646;
9983 -> 9975;
9983 -> 9646;
9984 -> 9975;
9984 -> 9646;
9985 -> 9975;
9985 -> 9646;
9986 -> 9980;
9986 -> 9646;
9987 -> 9981;
9987 -> 9646;
9988 -> 9982;
9988 -> 9646;
9989 -> 9983;
9989 -> 9646;
9990 -> 9984;
9990 -> 9646;
9991 -> 9646;
9992 -> 9990;
9992 -> 9991;
9993 -> 9991;
9994 -> 9992;
9994 -> 9991;
9995 -> 9992;
9995 -> 9991;
9996 -> 9993;
9996 -> 9991;
9997 -> 9996;
9997 -> 9646;
9998 -> 9985;
9998 -> 9646;
9999 -> 9986;
9999 -> 9987;
9999 -> 9988;
9999 -> 9989;
9999 -> 9997;
9999 -> 9998;
9999 -> 9646;
10000 -> 9999;
10000 -> 9646;
10001 -> 9999;
10001 -> 9646;
10002 -> 10000;
10002 -> 9646;
10003 -> 10000;
10003 -> 9646;
10004 -> 9637;
10004 -> 9999;
10004 -> 9615;
10004 -> 9634;
10005 -> 9634;
10006 -> 9999;
10006 -> 10005;
10006 -> 9634;
10007 -> 9634;
10008 -> 10007;
10009 -> 9643;
10009 -> 10008;
10010 -> 10009;
10010 -> 10007;
10011 -> 10007;
10012 -> 10010;
10012 -> 10011;
10013 -> 9620;
10014 -> 9999;
10014 -> 10013;
10014 -> 9620;
10015 -> 0;
10015 -> 9540;
10016 -> 9540;
10017 -> 10015;
10017 -> 10016;
10018 -> 9611;
10018 -> 10016;
10019 -> 10017;
10019 -> 10016;
10020 -> 10016;
10021 -> 10019;
10021 -> 10020;
10022 -> 10021;
10022 -> 0;
10022 -> 10020;
10023 -> 10022;
10024 -> 10018;
10024 -> 10017;
10024 -> 10016;
10025 -> 10024;
10026 -> 10024;
10027 -> 9607;
10027 -> 9540;
10028 -> 9608;
10028 -> 9540;
10029 -> 9609;
10029 -> 9540;
10030 -> 9615;
10030 -> 9540;
10031 -> 10029;
10031 -> 10030;
10031 -> 9611;
10031 -> 9615;
10031 -> 10004;
10031 -> 9540;
10032 -> 9540;
10033 -> 10031;
10033 -> 10032;
10034 -> 10032;
10035 -> 10033;
10035 -> 10034;
10036 -> 10034;
10037 -> 10035;
10037 -> 10031;
10037 -> 10034;
10038 -> 10035;
10038 -> 10031;
10038 -> 10034;
10039 -> 10036;
10039 -> 10034;
10040 -> 10039;
10040 -> 10032;
10041 -> 10033;
10041 -> 10032;
10042 -> 10033;
10042 -> 10032;
10043 -> 10041;
10043 -> 10032;
10044 -> 10041;
10044 -> 10032;
10045 -> 10024;
10045 -> 9540;
10046 -> 10027;
10046 -> 10028;
10046 -> 10033;
10046 -> 10045;
10046 -> 9611;
10046 -> 9540;
10047 -> 10046;
10047 -> 10032;
10048 -> 10046;
10048 -> 10032;
10049 -> 10047;
10049 -> 10046;
10049 -> 10032;
10050 -> 10047;
10050 -> 10046;
10050 -> 10032;
10051 -> 9612;
10051 -> 9611;
10051 -> 9540;
10052 -> 9615;
10052 -> 9540;
10053 -> 9611;
10053 -> 10052;
10053 -> 10046;
10053 -> 9615;
10053 -> 9540;
10054 -> 9565;
10054 -> 9540;
10055 -> 9565;
10055 -> 9540;
10056 -> 10054;
10056 -> 9540;
10057 -> 9540;
10058 -> 10056;
10058 -> 10057;
10059 -> 10055;
10059 -> 10057;
10060 -> 10059;
10060 -> 10058;
10060 -> 10057;
10061 -> 10059;
10061 -> 10057;
10062 -> 10057;
10063 -> 10059;
10063 -> 10062;
10063 -> 10057;
10064 -> 10063;
10065 -> 10064;
10065 -> 10059;
10065 -> 10063;
10066 -> 9540;
10067 -> 9258;
10067 -> 9259;
10067 -> 9261;
10067 -> 9272;
10067 -> 9521;
10067 -> 9540;
10067 -> 9566;
10067 -> 9565;
10067 -> 9585;
10067 -> 9606;
10067 -> 10046;
10067 -> 9553;
10067 -> 10053;
10068 -> 9258;
10068 -> 10067;
10069 -> 10067;
10069 -> 9258;
10070 -> 9252;
10071 -> 10069;
10071 -> 10070;
10071 -> 9252;
10072 -> 10069;
10072 -> 10071;
10073 -> 9240;
10073 -> 10072;
10073 -> 10067;
10073 -> 10068;
10073 -> 10071;
10074 -> 9253;
10074 -> 9113;
10074 -> 9252;
10075 -> 9242;
10075 -> 10073;
10076 -> 9242;
10076 -> 10073;
10076 -> 10074;
10077 -> 10076;
10078 -> 10076;
10078 -> 0;
10078 -> 10077;
10079 -> 9235;
10079 -> 10073;
10079 -> 9225;
10080 -> 0;
10080 -> 10079;
10081 -> 10079;
10082 -> 10080;
10082 -> 10081;
10083 -> 10082;
10083 -> 10081;
10084 -> 10081;
10085 -> 10083;
10085 -> 10084;
10086 -> 10085;
10086 -> 0;
10086 -> 10084;
10087 -> 10086;
10088 -> 10081;
10088 -> 10073;
10088 -> 10076;
10089 -> 10088;
10089 -> 10082;
10089 -> 10081;
10090 -> 10089;
10091 -> 10089;
10092 -> 0;
10092 -> 9225;
10093 -> 9225;
10094 -> 10092;
10094 -> 10093;
10095 -> 9113;
10095 -> 10093;
10096 -> 10093;
10097 -> 10095;
10097 -> 10096;
10098 -> 10097;
10098 -> 10073;
10098 -> 10089;
10098 -> 10096;
10099 -> 10097;
10099 -> 10073;
10099 -> 10096;
10100 -> 10097;
10100 -> 10073;
10100 -> 10074;
10100 -> 10076;
10100 -> 10089;
10100 -> 10099;
10101 -> 10093;
10102 -> 10100;
10102 -> 10101;
10103 -> 10102;
10103 -> 10094;
10103 -> 10093;
10104 -> 10103;
10105 -> 10104;
10105 -> 10093;
10106 -> 9112;
10106 -> 10073;
10106 -> 10074;
10106 -> 10076;
10106 -> 10089;
10106 -> 10100;
10106 -> 9110;
10107 -> 9240;
10107 -> 9110;
10108 -> 9212;
10108 -> 9110;
10109 -> 9110;
10110 -> 9142;
10110 -> 10109;
10111 -> 10110;
10111 -> 10106;
10111 -> 10109;
10112 -> 10111;
10112 -> 9110;
10113 -> 9194;
10113 -> 10112;
10114 -> 10112;
10115 -> 10112;
10116 -> 9111;
10116 -> 10112;
10117 -> 10106;
10117 -> 10112;
10118 -> 9142;
10118 -> 10112;
10119 -> 9178;
10119 -> 10112;
10120 -> 9190;
10120 -> 10112;
10121 -> 9208;
10121 -> 10112;
10122 -> 10108;
10122 -> 10112;
10123 -> 9235;
10123 -> 10112;
10124 -> 10107;
10124 -> 10112;
10125 -> 10089;
10125 -> 10112;
10126 -> 10105;
10126 -> 10112;
10127 -> 10116;
10127 -> 10117;
10127 -> 10118;
10127 -> 10119;
10127 -> 10120;
10127 -> 10121;
10127 -> 10122;
10127 -> 10123;
10127 -> 10124;
10127 -> 10125;
10127 -> 10126;
10127 -> 9113;
10127 -> 10106;
10127 -> 9081;
10127 -> 9212;
10127 -> 10112;
10128 -> 10112;
10129 -> 10127;
10129 -> 10128;
10130 -> 10127;
10130 -> 10128;
10131 -> 10129;
10131 -> 10127;
10131 -> 10128;
10132 -> 10129;
10132 -> 10127;
10132 -> 10128;
10133 -> 9240;
10133 -> 10127;
10133 -> 10112;
10134 -> 9240;
10134 -> 10133;
10135 -> 9212;
10135 -> 10112;
10136 -> 9007;
10136 -> 9008;
10137 -> 9008;
10138 -> 10136;
10138 -> 10134;
10138 -> 10137;
10138 -> 9008;
10139 -> 0;
10139 -> 8790;
10140 -> 8790;
10141 -> 10139;
10141 -> 10140;
10142 -> 8793;
10142 -> 10140;
10143 -> 10141;
10143 -> 10140;
10144 -> 10140;
10145 -> 10143;
10145 -> 10144;
10146 -> 10145;
10146 -> 0;
10146 -> 10144;
10147 -> 10146;
10148 -> 10140;
10149 -> 10142;
10149 -> 10148;
10150 -> 10149;
10150 -> 10134;
10150 -> 10148;
10151 -> 10140;
10152 -> 10150;
10152 -> 10141;
10152 -> 10140;
10153 -> 10152;
10153 -> 10134;
10154 -> 10152;
10155 -> 10152;
10156 -> 0;
10156 -> 8790;
10157 -> 8790;
10158 -> 10156;
10158 -> 10157;
10159 -> 8793;
10159 -> 10157;
10160 -> 10157;
10161 -> 10159;
10161 -> 10160;
10162 -> 10160;
10163 -> 10161;
10163 -> 10162;
10164 -> 10163;
10164 -> 10134;
10164 -> 10152;
10164 -> 10162;
10165 -> 10162;
10166 -> 10163;
10166 -> 10134;
10166 -> 10165;
10166 -> 10162;
10167 -> 10163;
10167 -> 10134;
10167 -> 10152;
10167 -> 10166;
10168 -> 10157;
10169 -> 10167;
10169 -> 10158;
10169 -> 10157;
10170 -> 8790;
10171 -> 10134;
10171 -> 10170;
10171 -> 8790;
10172 -> 8791;
10172 -> 8790;
10173 -> 8792;
10173 -> 10134;
10173 -> 10152;
10173 -> 10167;
10173 -> 8790;
10174 -> 8830;
10174 -> 8790;
10175 -> 8977;
10175 -> 8790;
10176 -> 10134;
10176 -> 8790;
10177 -> 10152;
10177 -> 8790;
10178 -> 10169;
10178 -> 8790;
10179 -> 10172;
10179 -> 10173;
10179 -> 10174;
10179 -> 10175;
10179 -> 10176;
10179 -> 10177;
10179 -> 10178;
10179 -> 8793;
10179 -> 8778;
10179 -> 8790;
10180 -> 8790;
10181 -> 10180;
10182 -> 10181;
10182 -> 10180;
10183 -> 10179;
10183 -> 10180;
10184 -> 10179;
10184 -> 10180;
10185 -> 10183;
10185 -> 10179;
10185 -> 10180;
10186 -> 10183;
10186 -> 10179;
10186 -> 10180;
10187 -> 8793;
10187 -> 10179;
10187 -> 8790;
10188 -> 8790;
10189 -> 10187;
10189 -> 10188;
10190 -> 10134;
10190 -> 10188;
10191 -> 10190;
10191 -> 10134;
10191 -> 10188;
10192 -> 10189;
10192 -> 10191;
10192 -> 10179;
10192 -> 10134;
10192 -> 10188;
10193 -> 10190;
10193 -> 10134;
10193 -> 10188;
10194 -> 10189;
10194 -> 10193;
10194 -> 10192;
10194 -> 10134;
10194 -> 10188;
10195 -> 10190;
10195 -> 10134;
10195 -> 10188;
10196 -> 10189;
10196 -> 10195;
10196 -> 10194;
10196 -> 10134;
10196 -> 10188;
10197 -> 10190;
10197 -> 10134;
10197 -> 10188;
10198 -> 10189;
10198 -> 10197;
10198 -> 10196;
10198 -> 10134;
10198 -> 10188;
10199 -> 8790;
10200 -> 8785;
10200 -> 10198;
10200 -> 8765;
10201 -> 10179;
10201 -> 8765;
10202 -> 8780;
10202 -> 10201;
10202 -> 10198;
10202 -> 10200;
10202 -> 8743;
10203 -> 8780;
10203 -> 8765;
10204 -> 8780;
10204 -> 8765;
10205 -> 8780;
10205 -> 8765;
10206 -> 10205;
10206 -> 10202;
10206 -> 8781;
10206 -> 8765;
10207 -> 0;
10207 -> 8743;
10208 -> 8743;
10209 -> 10207;
10209 -> 10208;
10210 -> 8744;
10210 -> 10208;
10211 -> 10209;
10211 -> 10208;
10212 -> 10208;
10213 -> 10211;
10213 -> 10212;
10214 -> 10213;
10214 -> 0;
10214 -> 10212;
10215 -> 10214;
10216 -> 10208;
10217 -> 10210;
10217 -> 10216;
10218 -> 10217;
10218 -> 10202;
10218 -> 10216;
10219 -> 10208;
10220 -> 10218;
10220 -> 10209;
10220 -> 10208;
10221 -> 10220;
10221 -> 10202;
10222 -> 10220;
10223 -> 10220;
10224 -> 10202;
10224 -> 8743;
10225 -> 10220;
10225 -> 8743;
10226 -> 8743;
10227 -> 10226;
10228 -> 10227;
10228 -> 10226;
10229 -> 10225;
10229 -> 10226;
10230 -> 10225;
10230 -> 10226;
10231 -> 10229;
10231 -> 10225;
10231 -> 10226;
10232 -> 10229;
10232 -> 10225;
10232 -> 10226;
10233 -> 8743;
10234 -> 10202;
10234 -> 10233;
10234 -> 8743;
10235 -> 10225;
10235 -> 8743;
10236 -> 8744;
10236 -> 10225;
10236 -> 8743;
10237 -> 8743;
10238 -> 10236;
10238 -> 10237;
10239 -> 10202;
10239 -> 10237;
10240 -> 8743;
10241 -> 8742;
10241 -> 10235;
10241 -> 10238;
10241 -> 8736;
10242 -> 10241;
10242 -> 7630;
10243 -> 7630;
10244 -> 10242;
10244 -> 10243;
10245 -> 10242;
10245 -> 10243;
10246 -> 10242;
10246 -> 10243;
10247 -> 10242;
10247 -> 10243;
10248 -> 10244;
10248 -> 10243;
10249 -> 10245;
10249 -> 10243;
10250 -> 10246;
10250 -> 10243;
10251 -> 10243;
10252 -> 10251;
10252 -> 10248;
10252 -> 10249;
10252 -> 10250;
10252 -> 10242;
10252 -> 10243;
10253 -> 7631;
10253 -> 7630;
10254 -> 7631;
10254 -> 8643;
10254 -> 7630;
10255 -> 7633;
10255 -> 7630;
10256 -> 7639;
10256 -> 7630;
10257 -> 10252;
10257 -> 7630;
10258 -> 7630;
10259 -> 7720;
10259 -> 10258;
10260 -> 10258;
10261 -> 10259;
10261 -> 7758;
10261 -> 10260;
10262 -> 10261;
10262 -> 8643;
10262 -> 10260;
10263 -> 10262;
10263 -> 10258;
10264 -> 10263;
10264 -> 7630;
10265 -> 7634;
10265 -> 7630;
10266 -> 7630;
10267 -> 7630;
10268 -> 10253;
10268 -> 10267;
10269 -> 10254;
10269 -> 10267;
10270 -> 10254;
10270 -> 10267;
10271 -> 10255;
10271 -> 10267;
10272 -> 10256;
10272 -> 10267;
10273 -> 10257;
10273 -> 10267;
10274 -> 10264;
10274 -> 10267;
10275 -> 10265;
10275 -> 10267;
10276 -> 10266;
10276 -> 10267;
10277 -> 10266;
10277 -> 10267;
10278 -> 10267;
10279 -> 10277;
10279 -> 10278;
10280 -> 10278;
10281 -> 10280;
10281 -> 10278;
10282 -> 10280;
10282 -> 10278;
10283 -> 10280;
10283 -> 10278;
10284 -> 10280;
10284 -> 10278;
10285 -> 0;
10285 -> 10280;
10285 -> 10278;
10286 -> 10277;
10286 -> 10267;
10287 -> 10277;
10287 -> 10267;
10288 -> 10277;
10288 -> 10267;
10289 -> 10277;
10289 -> 10267;
10290 -> 10277;
10290 -> 10267;
10291 -> 10277;
10291 -> 10267;
10292 -> 10277;
10292 -> 10267;
10293 -> 10277;
10293 -> 10267;
10294 -> 10267;
10295 -> 10273;
10295 -> 10294;
10295 -> 10267;
10296 -> 10267;
10297 -> 10272;
10297 -> 10296;
10297 -> 10267;
10298 -> 10267;
10299 -> 10268;
10299 -> 10298;
10299 -> 10267;
10300 -> 10268;
10300 -> 8643;
10300 -> 10269;
10300 -> 10267;
10301 -> 10268;
10301 -> 8643;
10301 -> 10270;
10301 -> 10267;
10302 -> 10300;
10302 -> 10301;
10302 -> 10267;
10303 -> 10268;
10303 -> 10277;
10303 -> 10267;
10304 -> 10269;
10304 -> 10267;
10305 -> 10304;
10305 -> 10277;
10305 -> 10267;
10306 -> 10270;
10306 -> 10277;
10306 -> 10267;
10307 -> 10272;
10307 -> 10277;
10307 -> 10267;
10308 -> 10271;
10308 -> 10267;
10309 -> 10308;
10309 -> 10277;
10309 -> 10267;
10310 -> 10276;
10310 -> 10267;
10311 -> 10273;
10311 -> 10310;
10312 -> 10310;
10313 -> 10311;
10313 -> 10312;
10314 -> 10277;
10314 -> 10312;
10315 -> 10313;
10315 -> 10312;
10316 -> 10314;
10316 -> 10312;
10317 -> 10315;
10317 -> 10316;
10317 -> 10312;
10318 -> 10315;
10318 -> 10316;
10318 -> 10252;
10318 -> 10280;
10318 -> 10281;
10318 -> 10282;
10318 -> 10283;
10318 -> 10284;
10318 -> 10285;
10318 -> 10286;
10318 -> 10307;
10318 -> 10287;
10318 -> 10309;
10318 -> 10288;
10318 -> 10289;
10318 -> 10290;
10318 -> 10305;
10318 -> 10291;
10318 -> 10306;
10318 -> 10292;
10318 -> 10293;
10318 -> 10303;
10318 -> 8643;
10318 -> 10312;
10319 -> 10312;
10320 -> 10319;
10321 -> 10318;
10321 -> 10277;
10321 -> 10267;
10322 -> 10267;
10323 -> 10273;
10323 -> 10322;
10324 -> 10323;
10324 -> 10318;
10324 -> 10321;
10324 -> 10322;
10325 -> 10324;
10325 -> 10267;
10326 -> 10325;
10326 -> 10277;
10326 -> 10267;
10327 -> 0;
10327 -> 10267;
10328 -> 10327;
10328 -> 10275;
10328 -> 10267;
10329 -> 10328;
10329 -> 10277;
10329 -> 10267;
10330 -> 10274;
10330 -> 10267;
10331 -> 10267;
10332 -> 10330;
10332 -> 10331;
10333 -> 10277;
10333 -> 10331;
10334 -> 10332;
10334 -> 10333;
10334 -> 10331;
10335 -> 10331;
10336 -> 10335;
10336 -> 10333;
10336 -> 10331;
10337 -> 10267;
10338 -> 10266;
10338 -> 7630;
10339 -> 7630;
10340 -> 10338;
10340 -> 10339;
10340 -> 10318;
10340 -> 10321;
10340 -> 10326;
10340 -> 10329;
10340 -> 10334;
10340 -> 10336;
10340 -> 0;
10340 -> 8643;
10340 -> 7630;
10341 -> 10340;
10341 -> 10339;
10342 -> 10340;
10342 -> 10339;
10343 -> 10341;
10343 -> 10339;
10344 -> 10339;
10345 -> 10343;
10345 -> 10344;
10346 -> 10342;
10346 -> 10344;
10347 -> 10346;
10347 -> 10340;
10347 -> 10344;
10348 -> 10347;
10348 -> 10339;
10349 -> 10340;
10349 -> 10339;
10350 -> 10340;
10350 -> 10339;
10351 -> 10339;
10352 -> 10350;
10352 -> 10348;
10352 -> 10351;
10352 -> 10339;
10353 -> 10350;
10353 -> 10348;
10353 -> 10339;
10354 -> 10340;
10354 -> 10339;
10355 -> 10339;
10356 -> 10340;
10356 -> 10355;
10356 -> 10353;
10356 -> 7630;
10357 -> 10340;
10357 -> 10339;
10358 -> 10340;
10358 -> 10339;
10359 -> 10340;
10359 -> 10339;
10360 -> 10340;
10360 -> 10339;
10361 -> 10358;
10361 -> 10339;
10362 -> 10361;
10363 -> 10360;
10363 -> 10362;
10364 -> 10363;
10364 -> 10356;
10364 -> 10362;
10365 -> 10364;
10365 -> 10361;
10366 -> 10361;
10367 -> 10365;
10367 -> 10366;
10367 -> 10361;
10368 -> 10339;
10369 -> 10360;
10369 -> 10368;
10370 -> 10368;
10371 -> 10369;
10371 -> 10356;
10371 -> 10370;
10372 -> 10368;
10373 -> 10371;
10373 -> 10339;
10374 -> 10357;
10374 -> 10373;
10374 -> 10356;
10374 -> 10339;
10375 -> 10359;
10375 -> 10339;
10376 -> 10375;
10377 -> 10360;
10377 -> 10376;
10378 -> 10377;
10378 -> 10374;
10378 -> 10376;
10379 -> 10378;
10379 -> 10375;
10380 -> 10375;
10381 -> 10379;
10381 -> 10380;
10381 -> 10375;
10382 -> 10357;
10382 -> 10381;
10383 -> 10381;
10384 -> 10382;
10384 -> 10383;
10385 -> 10383;
10386 -> 10382;
10386 -> 10383;
10387 -> 10382;
10387 -> 10383;
10388 -> 10387;
10388 -> 10385;
10388 -> 10383;
10389 -> 10386;
10389 -> 10388;
10389 -> 10385;
10389 -> 10383;
10390 -> 10360;
10390 -> 10362;
10391 -> 10362;
10392 -> 10391;
10392 -> 10361;
10393 -> 10392;
10393 -> 10366;
10393 -> 10361;
10394 -> 10360;
10394 -> 10368;
10395 -> 10394;
10395 -> 10389;
10395 -> 10368;
10396 -> 10360;
10396 -> 10376;
10397 -> 10395;
10398 -> 10363;
10398 -> 10395;
10398 -> 10362;
10399 -> 10398;
10399 -> 10361;
10400 -> 10399;
10400 -> 10366;
10400 -> 10361;
10401 -> 10357;
10401 -> 10400;
10402 -> 10400;
10403 -> 10401;
10403 -> 10402;
10404 -> 10401;
10405 -> 10360;
10405 -> 10376;
10406 -> 10376;
10406 -> 10375;
10407 -> 10406;
10407 -> 10380;
10407 -> 10375;
10408 -> 10266;
10408 -> 7630;
10409 -> 10408;
10409 -> 7607;
10410 -> 10409;
10410 -> 3519;
10411 -> 10410;
10411 -> 279;
10412 -> 279;
10413 -> 10411;
10413 -> 10412;
10414 -> 10412;
10415 -> 10412;
10416 -> 10415;
10416 -> 10413;
10416 -> 10401;
10416 -> 10412;
10417 -> 10416;
10417 -> 10415;
10418 -> 10415;
10419 -> 10417;
10419 -> 10418;
10420 -> 10414;
10420 -> 10412;
10421 -> 10412;
10422 -> 10420;
10422 -> 10421;
10422 -> 10417;
10422 -> 10414;
10422 -> 10412;
10423 -> 10422;
10423 -> 10421;
10424 -> 10423;
10424 -> 10422;
10424 -> 3563;
10424 -> 10421;
10425 -> 10423;
10425 -> 10422;
10425 -> 10424;
10425 -> 10421;
10426 -> 10422;
10426 -> 10421;
10427 -> 10422;
10427 -> 10421;
10428 -> 10426;
10428 -> 10421;
10429 -> 10427;
10429 -> 10428;
10429 -> 10425;
10429 -> 10421;
10430 -> 10427;
10430 -> 10429;
10430 -> 10421;
10431 -> 10427;
10431 -> 10430;
10431 -> 10421;
10432 -> 10421;
10433 -> 10431;
10433 -> 10432;
10434 -> 10432;
10435 -> 10433;
10435 -> 10434;
10436 -> 10435;
10436 -> 0;
10436 -> 10432;
10437 -> 10433;
10437 -> 10431;
10437 -> 3563;
10437 -> 10432;
10438 -> 10436;
10438 -> 10437;
10438 -> 10432;
10439 -> 10431;
10439 -> 10432;
10440 -> 10431;
10440 -> 10432;
10441 -> 10439;
10441 -> 10432;
10442 -> 10440;
10442 -> 10441;
10442 -> 10438;
10442 -> 10432;
10443 -> 10440;
10443 -> 10442;
10443 -> 10432;
10444 -> 10422;
10444 -> 10421;
10445 -> 10422;
10445 -> 10421;
10446 -> 10444;
10446 -> 10421;
10447 -> 10421;
10448 -> 10446;
10448 -> 10447;
10449 -> 10445;
10449 -> 10447;
10450 -> 10448;
10450 -> 10447;
10451 -> 10449;
10451 -> 10450;
10451 -> 10443;
10451 -> 10447;
10452 -> 10449;
10452 -> 10451;
10452 -> 10447;
10453 -> 10421;
10454 -> 10445;
10454 -> 10452;
10454 -> 10421;
10455 -> 10421;
10456 -> 10455;
10457 -> 10421;
10458 -> 10457;
10459 -> 10412;
10460 -> 10459;
10460 -> 10414;
10460 -> 10412;
10461 -> 10414;
10461 -> 10412;
10462 -> 10412;
10463 -> 10412;
10464 -> 10461;
10464 -> 10463;
10465 -> 10462;
10465 -> 10463;
10466 -> 10463;
10467 -> 10464;
10467 -> 10466;
10467 -> 10463;
10468 -> 10464;
10468 -> 10454;
10468 -> 10463;
10469 -> 10464;
10469 -> 10463;
10470 -> 10463;
10471 -> 10465;
10471 -> 10463;
10472 -> 10469;
10472 -> 10470;
10472 -> 10471;
10472 -> 10454;
10472 -> 10460;
10472 -> 10462;
10472 -> 10463;
10473 -> 10463;
10474 -> 10472;
10474 -> 10473;
10474 -> 10463;
10475 -> 10472;
10475 -> 10463;
10476 -> 10463;
10477 -> 10475;
10477 -> 10476;
10478 -> 10475;
10478 -> 10476;
10479 -> 10477;
10479 -> 10476;
10480 -> 10476;
10481 -> 10480;
10481 -> 10479;
10481 -> 10475;
10481 -> 10476;
10482 -> 10475;
10482 -> 10476;
10483 -> 10475;
10483 -> 10476;
10484 -> 10482;
10484 -> 10476;
10485 -> 10476;
10486 -> 10484;
10486 -> 10485;
10487 -> 10483;
10487 -> 10485;
10488 -> 10486;
10488 -> 10485;
10489 -> 10485;
10490 -> 10488;
10490 -> 10489;
10491 -> 10487;
10491 -> 10489;
10492 -> 10490;
10492 -> 10489;
10493 -> 10489;
10494 -> 10493;
10494 -> 10492;
10494 -> 10481;
10494 -> 10489;
10495 -> 10485;
10496 -> 10487;
10496 -> 10495;
10497 -> 10495;
10498 -> 10496;
10498 -> 10494;
10498 -> 10497;
10499 -> 10495;
10500 -> 10498;
10500 -> 10485;
10501 -> 10485;
10502 -> 10500;
10502 -> 10501;
10502 -> 10485;
10503 -> 10500;
10503 -> 10487;
10503 -> 10502;
10504 -> 10487;
10504 -> 10494;
10504 -> 0;
10504 -> 10485;
10505 -> 10504;
10505 -> 10487;
10505 -> 10485;
10506 -> 10482;
10506 -> 10494;
10506 -> 10503;
10506 -> 10505;
10506 -> 10483;
10506 -> 10476;
10507 -> 10476;
10508 -> 10506;
10508 -> 10507;
10508 -> 10476;
10509 -> 10482;
10509 -> 10476;
10510 -> 10482;
10510 -> 10506;
10510 -> 10476;
10511 -> 10476;
10512 -> 10510;
10512 -> 10511;
10513 -> 10509;
10513 -> 10511;
10514 -> 10512;
10514 -> 10511;
10515 -> 10511;
10516 -> 10514;
10516 -> 10515;
10517 -> 10513;
10517 -> 10515;
10518 -> 10515;
10519 -> 10512;
10519 -> 10516;
10519 -> 10513;
10519 -> 10511;
10520 -> 10519;
10520 -> 10513;
10520 -> 10511;
10521 -> 10513;
10521 -> 10519;
10521 -> 10520;
10521 -> 10511;
10522 -> 10511;
10523 -> 10476;
10524 -> 10521;
10524 -> 10523;
10524 -> 10476;
10525 -> 10521;
10525 -> 10524;
10526 -> 10521;
10526 -> 10483;
10526 -> 10524;
10527 -> 10475;
10527 -> 10525;
10527 -> 10526;
10527 -> 10463;
10528 -> 10475;
10528 -> 10476;
10529 -> 10475;
10529 -> 10476;
10530 -> 10528;
10530 -> 10476;
10531 -> 10476;
10532 -> 10530;
10532 -> 10531;
10533 -> 10529;
10533 -> 10531;
10534 -> 10532;
10534 -> 10531;
10535 -> 10531;
10536 -> 10534;
10536 -> 10535;
10537 -> 10533;
10537 -> 10535;
10538 -> 10536;
10538 -> 10535;
10539 -> 10535;
10540 -> 10538;
10540 -> 10539;
10541 -> 10537;
10541 -> 10539;
10542 -> 10540;
10542 -> 10539;
10543 -> 10539;
10544 -> 10543;
10544 -> 10542;
10544 -> 10527;
10544 -> 10539;
10545 -> 10535;
10546 -> 10537;
10546 -> 10545;
10547 -> 10535;
10548 -> 10532;
10548 -> 10544;
10548 -> 10533;
10548 -> 10531;
10549 -> 10548;
10549 -> 10533;
10549 -> 10531;
10550 -> 10533;
10550 -> 10548;
10550 -> 10549;
10550 -> 10531;
10551 -> 10528;
10551 -> 10476;
10552 -> 10528;
10552 -> 10548;
10552 -> 10549;
10552 -> 10550;
10552 -> 10529;
10552 -> 10476;
10553 -> 10476;
10554 -> 10551;
10554 -> 10553;
10555 -> 10553;
10556 -> 10554;
10556 -> 10555;
10557 -> 10555;
10558 -> 10553;
10559 -> 10476;
10560 -> 10552;
10560 -> 10559;
10560 -> 10476;
10561 -> 10552;
10561 -> 10560;
10562 -> 10552;
10562 -> 10529;
10562 -> 10560;
10563 -> 10475;
10563 -> 10561;
10563 -> 10562;
10563 -> 10463;
10564 -> 10563;
10564 -> 10507;
10564 -> 10476;
10565 -> 10482;
10565 -> 10476;
10566 -> 10476;
10567 -> 10565;
10567 -> 10566;
10568 -> 10566;
10569 -> 10567;
10569 -> 10568;
10570 -> 10568;
10571 -> 10566;
10572 -> 10563;
10572 -> 10564;
10573 -> 10563;
10573 -> 10483;
10573 -> 10564;
10574 -> 10482;
10574 -> 10572;
10574 -> 10573;
10574 -> 10476;
10575 -> 10475;
10575 -> 10476;
10576 -> 10475;
10576 -> 10476;
10577 -> 10575;
10577 -> 10476;
10578 -> 10476;
10579 -> 10577;
10579 -> 10578;
10580 -> 10576;
10580 -> 10578;
10581 -> 10579;
10581 -> 10578;
10582 -> 10578;
10583 -> 10476;
10584 -> 10576;
10584 -> 10583;
10585 -> 10583;
10586 -> 10583;
10587 -> 10476;
10588 -> 10574;
10588 -> 10463;
10589 -> 10463;
10590 -> 10589;
10591 -> 10413;
10591 -> 10412;
10592 -> 10591;
10592 -> 275;
10593 -> 10592;
10593 -> 276;
10593 -> 275;
10594 -> 276;
10594 -> 260;
10595 -> 260;
10596 -> 263;
10596 -> 10595;
10596 -> 260;
10597 -> 10594;
10597 -> 10596;
10598 -> 10596;
10599 -> 10597;
10599 -> 10598;
10599 -> 276;
10599 -> 10593;
10599 -> 10588;
10599 -> 10596;
10600 -> 10598;
10601 -> 10599;
10601 -> 10600;
10602 -> 10598;
10603 -> 10599;
10603 -> 10598;
10604 -> 10598;
10605 -> 10599;
10605 -> 10596;
10606 -> 1141;
10606 -> 10605;
10607 -> 0;
10607 -> 260;
10608 -> 268;
10608 -> 260;
10609 -> 265;
10609 -> 10594;
10609 -> 262;
10609 -> 10606;
10609 -> 260;
10610 -> 10609;
10610 -> 260;
10611 -> 260;
10612 -> 10610;
10612 -> 10611;
10613 -> 0;
10613 -> 10611;
10614 -> 10613;
10615 -> 260;
10616 -> 10609;
10616 -> 10599;
10616 -> 233;
10616 -> 0;
10616 -> 2608;
10616 -> 2636;
10616 -> 2609;
10616 -> 2637;
10616 -> 2631;
10616 -> 2638;
10616 -> 2632;
10616 -> 2606;
10616 -> 2639;
10616 -> 230;
10616 -> 260;
10617 -> 260;
10618 -> 10617;
10619 -> 10616;
10619 -> 10618;
10619 -> 260;
10620 -> 0;
10622 -> 10620;
10622 -> 10621;
10623 -> 10621;
10624 -> 10621;
10625 -> 10621;
10626 -> 10621;
10627 -> 10621;
10628 -> 10621;
10629 -> 10621;
10630 -> 10621;
10631 -> 10621;
10632 -> 10621;
10633 -> 10621;
10634 -> 10621;
10635 -> 10621;
10636 -> 10621;
10637 -> 10621;
10638 -> 10621;
10639 -> 10621;
10640 -> 10621;
10641 -> 10621;
10642 -> 10621;
10643 -> 10621;
10644 -> 10621;
10645 -> 10621;
10646 -> 10621;
10647 -> 10621;
10648 -> 10621;
10649 -> 10621;
10650 -> 10622;
10650 -> 10621;
10651 -> 10623;
10651 -> 10621;
10652 -> 10624;
10652 -> 10621;
10653 -> 10625;
10653 -> 10621;
10654 -> 10626;
10654 -> 10621;
10655 -> 10627;
10655 -> 10621;
10656 -> 10628;
10656 -> 10621;
10657 -> 10629;
10657 -> 10621;
10658 -> 10630;
10658 -> 10621;
10659 -> 10631;
10659 -> 10621;
10660 -> 10632;
10660 -> 10621;
10661 -> 10633;
10661 -> 10621;
10662 -> 10634;
10662 -> 10621;
10663 -> 10635;
10663 -> 10621;
10664 -> 10636;
10664 -> 10621;
10665 -> 10637;
10665 -> 10621;
10666 -> 10638;
10666 -> 10621;
10667 -> 10639;
10667 -> 10621;
10668 -> 10640;
10668 -> 10621;
10669 -> 10621;
10670 -> 10621;
10671 -> 10641;
10671 -> 10621;
10672 -> 10642;
10672 -> 10621;
10673 -> 10621;
10674 -> 10643;
10674 -> 10621;
10675 -> 10644;
10675 -> 10621;
10676 -> 10645;
10676 -> 10621;
10677 -> 10647;
10677 -> 10621;
10678 -> 10621;
10679 -> 10646;
10679 -> 10621;
10680 -> 0;
10680 -> 10621;
10681 -> 10648;
10681 -> 10621;
10682 -> 10650;
10682 -> 10649;
10683 -> 10651;
10683 -> 10649;
10684 -> 10652;
10684 -> 10649;
10685 -> 10653;
10685 -> 10649;
10686 -> 10654;
10686 -> 10649;
10687 -> 10655;
10687 -> 10649;
10688 -> 10656;
10688 -> 10649;
10689 -> 10657;
10689 -> 10649;
10690 -> 10658;
10690 -> 10649;
10691 -> 10659;
10691 -> 10649;
10692 -> 10660;
10692 -> 10649;
10693 -> 10661;
10693 -> 10649;
10694 -> 10662;
10694 -> 10649;
10695 -> 10663;
10695 -> 10649;
10696 -> 10664;
10696 -> 10649;
10697 -> 10665;
10697 -> 10649;
10698 -> 10666;
10698 -> 10649;
10699 -> 10667;
10699 -> 10649;
10700 -> 10668;
10700 -> 10649;
10701 -> 10669;
10701 -> 10649;
10702 -> 10670;
10702 -> 10649;
10703 -> 10671;
10703 -> 10649;
10704 -> 10672;
10704 -> 10649;
10705 -> 10673;
10705 -> 10649;
10706 -> 10674;
10706 -> 10649;
10707 -> 10675;
10707 -> 10649;
10708 -> 10676;
10708 -> 10649;
10709 -> 10677;
10709 -> 10649;
10710 -> 10678;
10710 -> 10649;
10711 -> 10679;
10711 -> 10649;
10712 -> 10680;
10712 -> 10649;
10713 -> 10681;
10713 -> 10649;
10714 -> 10649;
10715 -> 10682;
10715 -> 10649;
10716 -> 10683;
10716 -> 10649;
10717 -> 10684;
10717 -> 10649;
10718 -> 10685;
10718 -> 10649;
10719 -> 10686;
10719 -> 10649;
10720 -> 10691;
10720 -> 10649;
10721 -> 10692;
10721 -> 10649;
10722 -> 10693;
10722 -> 10649;
10723 -> 10694;
10723 -> 10649;
10724 -> 10711;
10724 -> 10649;
10725 -> 10688;
10725 -> 10649;
10726 -> 10689;
10726 -> 10649;
10727 -> 10695;
10727 -> 10649;
10728 -> 10696;
10728 -> 10649;
10729 -> 10697;
10729 -> 10649;
10730 -> 10698;
10730 -> 10649;
10731 -> 10730;
10731 -> 10649;
10732 -> 10699;
10732 -> 10649;
10733 -> 10700;
10733 -> 10649;
10734 -> 10701;
10734 -> 10649;
10735 -> 10702;
10735 -> 10649;
10736 -> 10703;
10736 -> 10649;
10737 -> 10704;
10737 -> 10649;
10738 -> 10705;
10738 -> 10649;
10739 -> 10706;
10739 -> 10649;
10740 -> 10707;
10740 -> 10649;
10741 -> 10708;
10741 -> 10649;
10742 -> 10709;
10742 -> 10649;
10743 -> 10710;
10743 -> 10649;
10744 -> 10714;
10744 -> 10715;
10744 -> 10716;
10744 -> 10717;
10744 -> 10718;
10744 -> 10719;
10744 -> 10720;
10744 -> 10721;
10744 -> 10722;
10744 -> 10723;
10744 -> 10724;
10744 -> 10725;
10744 -> 10726;
10744 -> 10727;
10744 -> 10728;
10744 -> 10729;
10744 -> 10731;
10744 -> 10732;
10744 -> 10733;
10744 -> 10734;
10744 -> 10735;
10744 -> 10736;
10744 -> 10737;
10744 -> 10738;
10744 -> 10739;
10744 -> 10740;
10744 -> 10741;
10744 -> 10742;
10744 -> 10743;
10744 -> 10621;
10744 -> 10669;
10744 -> 10649;
10745 -> 10714;
10745 -> 10649;
10746 -> 10714;
10746 -> 10649;
10747 -> 10714;
10747 -> 10649;
10748 -> 10687;
10748 -> 10649;
10749 -> 10748;
10749 -> 10714;
10749 -> 10649;
10750 -> 10690;
10750 -> 10714;
10750 -> 10649;
10751 -> 10712;
10751 -> 10714;
10751 -> 10649;
10752 -> 10713;
10752 -> 10714;
10752 -> 10649;
10753 -> 10621;
10754 -> 0;
10756 -> 10754;
10756 -> 10755;
10757 -> 10755;
10758 -> 10755;
10759 -> 10755;
10760 -> 10755;
10761 -> 10755;
10762 -> 10755;
10763 -> 10755;
10764 -> 10755;
10765 -> 10755;
10766 -> 10755;
10767 -> 10755;
10768 -> 10755;
10769 -> 10755;
10770 -> 10755;
10771 -> 10755;
10772 -> 10755;
10773 -> 10755;
10774 -> 10755;
10775 -> 10755;
10776 -> 10755;
10777 -> 10755;
10778 -> 10755;
10779 -> 10755;
10780 -> 10755;
10781 -> 10755;
10782 -> 10755;
10783 -> 10755;
10784 -> 10756;
10784 -> 10755;
10785 -> 10757;
10785 -> 10755;
10786 -> 10758;
10786 -> 10755;
10787 -> 10759;
10787 -> 10755;
10788 -> 10760;
10788 -> 10755;
10789 -> 10761;
10789 -> 10755;
10790 -> 10762;
10790 -> 10755;
10791 -> 10763;
10791 -> 10755;
10792 -> 10764;
10792 -> 10755;
10793 -> 10765;
10793 -> 10755;
10794 -> 10766;
10794 -> 10755;
10795 -> 10767;
10795 -> 10755;
10796 -> 10768;
10796 -> 10755;
10797 -> 10769;
10797 -> 10755;
10798 -> 10770;
10798 -> 10755;
10799 -> 10771;
10799 -> 10755;
10800 -> 10772;
10800 -> 10755;
10801 -> 10773;
10801 -> 10755;
10802 -> 10774;
10802 -> 10755;
10803 -> 10755;
10804 -> 10755;
10805 -> 10775;
10805 -> 10755;
10806 -> 10776;
10806 -> 10755;
10807 -> 10755;
10808 -> 10777;
10808 -> 10755;
10809 -> 10778;
10809 -> 10755;
10810 -> 10779;
10810 -> 10755;
10811 -> 10781;
10811 -> 10755;
10812 -> 10755;
10813 -> 10780;
10813 -> 10755;
10814 -> 0;
10814 -> 10755;
10815 -> 10782;
10815 -> 10755;
10816 -> 10784;
10816 -> 10783;
10817 -> 10785;
10817 -> 10783;
10818 -> 10786;
10818 -> 10783;
10819 -> 10787;
10819 -> 10783;
10820 -> 10788;
10820 -> 10783;
10821 -> 10789;
10821 -> 10783;
10822 -> 10790;
10822 -> 10783;
10823 -> 10791;
10823 -> 10783;
10824 -> 10792;
10824 -> 10783;
10825 -> 10793;
10825 -> 10783;
10826 -> 10794;
10826 -> 10783;
10827 -> 10795;
10827 -> 10783;
10828 -> 10796;
10828 -> 10783;
10829 -> 10797;
10829 -> 10783;
10830 -> 10798;
10830 -> 10783;
10831 -> 10799;
10831 -> 10783;
10832 -> 10800;
10832 -> 10783;
10833 -> 10801;
10833 -> 10783;
10834 -> 10802;
10834 -> 10783;
10835 -> 10803;
10835 -> 10783;
10836 -> 10804;
10836 -> 10783;
10837 -> 10805;
10837 -> 10783;
10838 -> 10806;
10838 -> 10783;
10839 -> 10807;
10839 -> 10783;
10840 -> 10808;
10840 -> 10783;
10841 -> 10809;
10841 -> 10783;
10842 -> 10810;
10842 -> 10783;
10843 -> 10811;
10843 -> 10783;
10844 -> 10812;
10844 -> 10783;
10845 -> 10813;
10845 -> 10783;
10846 -> 10814;
10846 -> 10783;
10847 -> 10815;
10847 -> 10783;
10848 -> 10783;
10849 -> 10816;
10849 -> 10783;
10850 -> 10817;
10850 -> 10783;
10851 -> 10818;
10851 -> 10783;
10852 -> 10819;
10852 -> 10783;
10853 -> 10820;
10853 -> 10783;
10854 -> 10825;
10854 -> 10783;
10855 -> 10826;
10855 -> 10783;
10856 -> 10827;
10856 -> 10783;
10857 -> 10828;
10857 -> 10783;
10858 -> 10845;
10858 -> 10783;
10859 -> 10822;
10859 -> 10783;
10860 -> 10823;
10860 -> 10783;
10861 -> 10829;
10861 -> 10783;
10862 -> 10830;
10862 -> 10783;
10863 -> 10831;
10863 -> 10783;
10864 -> 10832;
10864 -> 10783;
10865 -> 10864;
10865 -> 10783;
10866 -> 10833;
10866 -> 10783;
10867 -> 10834;
10867 -> 10783;
10868 -> 10835;
10868 -> 10783;
10869 -> 10836;
10869 -> 10783;
10870 -> 10837;
10870 -> 10783;
10871 -> 10838;
10871 -> 10783;
10872 -> 10839;
10872 -> 10783;
10873 -> 10840;
10873 -> 10783;
10874 -> 10841;
10874 -> 10783;
10875 -> 10842;
10875 -> 10783;
10876 -> 10843;
10876 -> 10783;
10877 -> 10844;
10877 -> 10783;
10878 -> 10848;
10878 -> 10849;
10878 -> 10850;
10878 -> 10851;
10878 -> 10852;
10878 -> 10853;
10878 -> 10854;
10878 -> 10855;
10878 -> 10856;
10878 -> 10857;
10878 -> 10858;
10878 -> 10859;
10878 -> 10860;
10878 -> 10861;
10878 -> 10862;
10878 -> 10863;
10878 -> 10865;
10878 -> 10866;
10878 -> 10867;
10878 -> 10868;
10878 -> 10869;
10878 -> 10870;
10878 -> 10871;
10878 -> 10872;
10878 -> 10873;
10878 -> 10874;
10878 -> 10875;
10878 -> 10876;
10878 -> 10877;
10878 -> 10755;
10878 -> 10803;
10878 -> 10783;
10879 -> 10848;
10879 -> 10783;
10880 -> 10848;
10880 -> 10783;
10881 -> 10848;
10881 -> 10783;
10882 -> 10821;
10882 -> 10783;
10883 -> 10882;
10883 -> 10848;
10883 -> 10783;
10884 -> 10824;
10884 -> 10848;
10884 -> 10783;
10885 -> 10846;
10885 -> 10848;
10885 -> 10783;
10886 -> 10847;
10886 -> 10848;
10886 -> 10783;
10889 -> 10887;
10889 -> 10888;
10890 -> 10755;
10890 -> 10888;
10891 -> 10889;
10891 -> 10890;
10891 -> 10878;
10891 -> 10888;
10892 -> 10890;
10892 -> 10888;
10893 -> 10888;
10894 -> 10888;
10895 -> 10892;
10895 -> 10894;
10896 -> 10893;
10896 -> 10894;
10897 -> 10895;
10897 -> 10878;
10897 -> 10894;
10898 -> 10895;
10898 -> 10878;
10898 -> 10894;
10899 -> 10895;
10899 -> 10878;
10899 -> 10894;
10900 -> 10895;
10900 -> 10878;
10900 -> 10894;
10901 -> 10895;
10901 -> 10878;
10901 -> 10883;
10901 -> 10894;
10902 -> 10895;
10902 -> 10878;
10902 -> 10894;
10903 -> 10895;
10903 -> 10878;
10903 -> 10894;
10904 -> 10895;
10904 -> 10878;
10904 -> 10879;
10904 -> 10884;
10904 -> 10894;
10905 -> 10895;
10905 -> 10878;
10905 -> 10894;
10906 -> 10895;
10906 -> 10878;
10906 -> 10894;
10907 -> 10895;
10907 -> 10878;
10907 -> 10894;
10908 -> 10895;
10908 -> 10878;
10908 -> 10894;
10909 -> 10895;
10909 -> 10878;
10909 -> 10894;
10910 -> 10895;
10910 -> 10878;
10910 -> 10894;
10911 -> 10895;
10911 -> 10878;
10911 -> 10894;
10912 -> 10895;
10912 -> 10878;
10912 -> 10894;
10913 -> 10895;
10913 -> 10878;
10913 -> 10894;
10914 -> 10895;
10914 -> 10878;
10914 -> 10894;
10915 -> 10895;
10915 -> 10878;
10915 -> 10894;
10916 -> 10895;
10916 -> 10878;
10916 -> 10894;
10917 -> 10895;
10917 -> 10878;
10917 -> 10894;
10918 -> 10895;
10918 -> 10878;
10918 -> 10894;
10919 -> 10895;
10919 -> 10878;
10919 -> 10894;
10920 -> 10895;
10920 -> 10878;
10920 -> 10894;
10921 -> 10895;
10921 -> 10878;
10921 -> 10894;
10922 -> 10895;
10922 -> 10878;
10922 -> 10894;
10923 -> 10895;
10923 -> 10878;
10923 -> 10894;
10924 -> 10895;
10924 -> 10878;
10924 -> 10894;
10925 -> 10895;
10925 -> 10878;
10925 -> 10894;
10926 -> 10895;
10926 -> 10878;
10926 -> 10894;
10927 -> 10895;
10927 -> 10878;
10927 -> 10880;
10927 -> 10885;
10927 -> 10894;
10928 -> 10895;
10928 -> 10878;
10928 -> 10881;
10928 -> 10886;
10928 -> 10894;
10929 -> 10894;
10930 -> 10897;
10930 -> 10929;
10931 -> 10898;
10931 -> 10929;
10932 -> 10899;
10932 -> 10929;
10933 -> 10900;
10933 -> 10929;
10934 -> 10901;
10934 -> 10929;
10935 -> 10902;
10935 -> 10929;
10936 -> 10903;
10936 -> 10929;
10937 -> 10904;
10937 -> 10929;
10938 -> 10905;
10938 -> 10929;
10939 -> 10906;
10939 -> 10929;
10940 -> 10907;
10940 -> 10929;
10941 -> 10908;
10941 -> 10929;
10942 -> 10909;
10942 -> 10929;
10943 -> 10910;
10943 -> 10929;
10944 -> 10911;
10944 -> 10929;
10945 -> 10912;
10945 -> 10929;
10946 -> 10913;
10946 -> 10929;
10947 -> 10914;
10947 -> 10929;
10948 -> 10915;
10948 -> 10929;
10949 -> 10916;
10949 -> 10929;
10950 -> 10917;
10950 -> 10929;
10951 -> 10918;
10951 -> 10929;
10952 -> 10919;
10952 -> 10929;
10953 -> 10920;
10953 -> 10929;
10954 -> 10921;
10954 -> 10929;
10955 -> 10922;
10955 -> 10929;
10956 -> 10923;
10956 -> 10929;
10957 -> 10924;
10957 -> 10929;
10958 -> 10925;
10958 -> 10929;
10959 -> 10926;
10959 -> 10929;
10960 -> 10927;
10960 -> 10929;
10961 -> 10928;
10961 -> 10929;
10962 -> 10896;
10962 -> 10929;
10963 -> 10929;
10964 -> 10963;
10964 -> 10930;
10964 -> 10931;
10964 -> 10932;
10964 -> 10933;
10964 -> 10934;
10964 -> 10939;
10964 -> 10940;
10964 -> 10941;
10964 -> 10942;
10964 -> 10959;
10964 -> 10936;
10964 -> 10937;
10964 -> 10943;
10964 -> 10944;
10964 -> 10945;
10964 -> 10946;
10964 -> 10947;
10964 -> 10948;
10964 -> 10949;
10964 -> 10950;
10964 -> 10951;
10964 -> 10952;
10964 -> 10953;
10964 -> 10954;
10964 -> 10955;
10964 -> 10956;
10964 -> 10957;
10964 -> 10958;
10964 -> 10878;
10964 -> 10879;
10964 -> 10884;
10964 -> 10880;
10964 -> 10885;
10964 -> 10881;
10964 -> 10886;
10964 -> 10883;
10964 -> 10882;
10964 -> 10929;
10965 -> 10963;
10965 -> 10929;
10966 -> 10963;
10966 -> 10929;
10967 -> 10963;
10967 -> 10929;
10968 -> 10935;
10968 -> 10929;
10969 -> 10968;
10969 -> 10963;
10969 -> 10929;
10970 -> 10938;
10970 -> 10963;
10970 -> 10929;
10971 -> 10889;
10971 -> 10893;
10971 -> 10888;
10972 -> 10893;
10973 -> 10616;
10973 -> 10617;
10974 -> 10616;
10974 -> 10617;
10975 -> 10616;
10975 -> 10617;
10976 -> 10616;
10976 -> 10617;
10977 -> 10973;
10977 -> 10617;
10978 -> 10976;
10978 -> 10617;
10979 -> 10974;
10979 -> 10617;
10980 -> 10975;
10980 -> 10617;
10981 -> 10617;
10982 -> 10617;
10983 -> 10977;
10983 -> 10982;
10984 -> 10978;
10984 -> 10982;
10985 -> 10979;
10985 -> 10982;
10986 -> 10980;
10986 -> 10982;
10987 -> 10981;
10987 -> 10982;
10988 -> 10981;
10988 -> 10982;
10989 -> 10981;
10989 -> 10982;
10990 -> 10981;
10990 -> 10982;
10991 -> 10982;
10992 -> 10984;
10992 -> 10991;
10992 -> 10982;
10993 -> 10990;
10993 -> 10982;
10994 -> 10986;
10994 -> 10982;
10995 -> 10994;
10995 -> 10619;
10995 -> 10982;
10996 -> 10983;
10996 -> 10982;
10997 -> 10984;
10997 -> 10982;
10998 -> 10995;
10998 -> 10982;
10999 -> 10987;
10999 -> 10982;
11000 -> 10988;
11000 -> 10982;
11001 -> 10989;
11001 -> 10982;
11002 -> 10990;
11002 -> 10982;
11003 -> 10982;
11004 -> 0;
11004 -> 10982;
11005 -> 10984;
11005 -> 10995;
11005 -> 10982;
11007 -> 11006;
11008 -> 11006;
11010 -> 11008;
11011 -> 11009;
11011 -> 11010;
11011 -> 11007;
11012 -> 11008;
11012 -> 10982;
11013 -> 10982;
11014 -> 11004;
11014 -> 11013;
11015 -> 11005;
11015 -> 11013;
11016 -> 11005;
11016 -> 11013;
11017 -> 11012;
11017 -> 11013;
11018 -> 11002;
11018 -> 11013;
11019 -> 11003;
11019 -> 11013;
11020 -> 11003;
11020 -> 11013;
11021 -> 11014;
11021 -> 11013;
11022 -> 11015;
11022 -> 11013;
11023 -> 11016;
11023 -> 11013;
11024 -> 11017;
11024 -> 11013;
11025 -> 11018;
11025 -> 11013;
11026 -> 11013;
11027 -> 11026;
11027 -> 11021;
11027 -> 11022;
11027 -> 11023;
11027 -> 11024;
11027 -> 11025;
11027 -> 0;
11027 -> 10995;
11027 -> 11011;
11027 -> 11013;
11028 -> 11026;
11028 -> 11013;
11029 -> 11019;
11029 -> 11026;
11029 -> 11013;
11030 -> 10982;
11031 -> 10996;
11031 -> 11030;
11032 -> 10997;
11032 -> 11030;
11033 -> 10998;
11033 -> 11030;
11034 -> 10999;
11034 -> 11030;
11035 -> 11000;
11035 -> 11030;
11036 -> 11001;
11036 -> 11030;
11037 -> 11002;
11037 -> 11030;
11038 -> 11003;
11038 -> 11030;
11039 -> 11003;
11039 -> 11030;
11040 -> 11003;
11040 -> 11030;
11041 -> 11003;
11041 -> 11030;
11042 -> 11003;
11042 -> 11030;
11043 -> 11003;
11043 -> 11030;
11044 -> 11031;
11044 -> 11030;
11045 -> 11032;
11045 -> 11030;
11046 -> 11033;
11046 -> 11030;
11047 -> 11034;
11047 -> 11030;
11048 -> 11035;
11048 -> 11030;
11049 -> 11036;
11049 -> 11030;
11050 -> 11037;
11050 -> 11030;
11051 -> 11038;
11051 -> 11030;
11052 -> 11039;
11052 -> 11030;
11053 -> 11040;
11053 -> 11030;
11054 -> 11040;
11054 -> 11027;
11054 -> 11030;
11055 -> 11054;
11055 -> 11027;
11055 -> 11028;
11055 -> 11029;
11055 -> 11030;
11056 -> 11041;
11056 -> 11030;
11057 -> 11042;
11057 -> 11030;
11058 -> 11030;
11059 -> 11044;
11059 -> 11058;
11060 -> 11045;
11060 -> 11058;
11061 -> 11046;
11061 -> 11058;
11062 -> 11047;
11062 -> 11058;
11063 -> 11048;
11063 -> 11058;
11064 -> 11049;
11064 -> 11058;
11065 -> 11050;
11065 -> 11058;
11066 -> 11051;
11066 -> 11058;
11067 -> 11052;
11067 -> 11058;
11068 -> 11053;
11068 -> 11058;
11069 -> 11055;
11069 -> 11058;
11070 -> 11056;
11070 -> 11058;
11071 -> 11057;
11071 -> 11058;
11072 -> 11043;
11072 -> 11058;
11073 -> 11059;
11073 -> 11058;
11074 -> 11061;
11074 -> 11058;
11075 -> 11069;
11075 -> 11058;
11076 -> 11065;
11076 -> 11058;
11077 -> 11070;
11077 -> 11058;
11078 -> 11071;
11078 -> 11058;
11079 -> 11058;
11080 -> 11079;
11080 -> 11073;
11080 -> 11074;
11080 -> 11075;
11080 -> 11076;
11080 -> 11077;
11080 -> 11078;
11080 -> 10995;
11080 -> 11055;
11080 -> 11058;
11081 -> 11079;
11081 -> 11058;
11082 -> 11079;
11082 -> 11058;
11083 -> 11079;
11083 -> 11058;
11084 -> 11079;
11084 -> 11058;
11085 -> 11079;
11085 -> 11058;
11086 -> 11079;
11086 -> 11058;
11087 -> 11079;
11087 -> 11058;
11088 -> 11079;
11088 -> 11058;
11089 -> 11079;
11089 -> 11058;
11090 -> 11079;
11090 -> 11058;
11091 -> 11079;
11091 -> 11058;
11092 -> 11079;
11092 -> 11058;
11093 -> 11079;
11093 -> 11058;
11094 -> 11079;
11094 -> 11058;
11095 -> 11079;
11095 -> 11058;
11096 -> 11079;
11096 -> 11058;
11097 -> 11079;
11097 -> 11058;
11098 -> 11079;
11098 -> 11058;
11099 -> 11079;
11099 -> 11058;
11100 -> 11079;
11100 -> 11058;
11101 -> 11079;
11101 -> 11058;
11102 -> 11079;
11102 -> 11058;
11103 -> 11079;
11103 -> 11058;
11104 -> 11079;
11104 -> 11058;
11105 -> 11079;
11105 -> 11058;
11106 -> 11079;
11106 -> 11058;
11107 -> 11058;
11108 -> 11107;
11108 -> 11079;
11108 -> 11058;
11109 -> 11079;
11109 -> 11058;
11110 -> 11079;
11110 -> 11058;
11111 -> 11079;
11111 -> 11058;
11112 -> 11079;
11112 -> 11058;
11113 -> 11079;
11113 -> 11058;
11114 -> 11079;
11114 -> 11058;
11115 -> 11079;
11115 -> 11058;
11116 -> 11058;
11117 -> 11058;
11118 -> 11115;
11118 -> 11117;
11119 -> 11116;
11119 -> 11117;
11121 -> 11120;
11122 -> 11120;
11123 -> 11117;
11124 -> 11119;
11124 -> 11123;
11125 -> 11123;
11126 -> 11119;
11126 -> 11117;
11127 -> 11118;
11127 -> 11119;
11127 -> 11117;
11128 -> 11116;
11128 -> 11079;
11128 -> 11058;
11129 -> 11060;
11129 -> 11079;
11129 -> 11058;
11130 -> 11079;
11130 -> 11058;
11131 -> 11058;
11132 -> 11058;
11133 -> 11130;
11133 -> 11132;
11134 -> 11131;
11134 -> 11132;
11135 -> 11134;
11135 -> 11132;
11136 -> 11134;
11136 -> 11132;
11137 -> 11134;
11137 -> 11132;
11138 -> 11133;
11138 -> 11134;
11138 -> 11132;
11139 -> 11131;
11139 -> 11079;
11139 -> 11058;
11140 -> 11079;
11140 -> 11080;
11140 -> 11058;
11141 -> 11140;
11141 -> 11080;
11141 -> 11081;
11141 -> 11129;
11141 -> 11082;
11141 -> 11083;
11141 -> 11084;
11141 -> 11085;
11141 -> 11086;
11141 -> 11087;
11141 -> 11088;
11141 -> 11089;
11141 -> 11090;
11141 -> 11091;
11141 -> 11139;
11141 -> 11092;
11141 -> 11093;
11141 -> 11094;
11141 -> 11095;
11141 -> 11096;
11141 -> 11097;
11141 -> 11098;
11141 -> 11099;
11141 -> 11100;
11141 -> 11101;
11141 -> 11102;
11141 -> 11103;
11141 -> 11104;
11141 -> 11105;
11141 -> 11106;
11141 -> 11108;
11141 -> 11109;
11141 -> 11128;
11141 -> 11110;
11141 -> 11111;
11141 -> 11112;
11141 -> 11113;
11141 -> 11114;
11141 -> 11107;
11141 -> 11125;
11141 -> 11126;
11141 -> 11127;
11141 -> 11138;
11141 -> 11136;
11141 -> 11137;
11141 -> 11058;
11142 -> 11141;
11142 -> 11079;
11142 -> 11058;
11143 -> 11079;
11143 -> 11141;
11143 -> 11058;
11144 -> 11143;
11144 -> 11141;
11144 -> 11142;
11144 -> 11058;
11145 -> 11144;
11145 -> 11079;
11145 -> 11058;
11146 -> 11079;
11146 -> 11144;
11146 -> 11058;
11147 -> 11146;
11147 -> 11144;
11147 -> 11145;
11147 -> 11058;
11148 -> 11147;
11148 -> 11079;
11148 -> 11058;
11149 -> 11079;
11149 -> 11147;
11149 -> 11058;
11150 -> 11149;
11150 -> 11147;
11150 -> 11148;
11150 -> 11058;
11151 -> 11150;
11151 -> 11079;
11151 -> 11058;
11152 -> 11079;
11152 -> 11058;
11153 -> 11058;
11154 -> 11058;
11155 -> 11152;
11155 -> 11154;
11156 -> 11153;
11156 -> 11154;
11157 -> 11154;
11158 -> 11157;
11158 -> 11154;
11159 -> 11157;
11159 -> 11154;
11160 -> 11157;
11160 -> 11154;
11161 -> 11154;
11162 -> 11161;
11162 -> 11157;
11162 -> 11154;
11163 -> 11154;
11164 -> 11155;
11164 -> 11163;
11164 -> 11154;
11165 -> 11155;
11165 -> 11157;
11165 -> 11154;
11166 -> 11153;
11166 -> 11079;
11166 -> 11058;
11167 -> 11068;
11167 -> 11150;
11167 -> 11058;
11168 -> 11058;
11169 -> 11167;
11169 -> 11168;
11170 -> 11168;
11171 -> 11169;
11171 -> 11168;
11172 -> 11171;
11172 -> 11150;
11172 -> 11151;
11172 -> 11166;
11172 -> 11168;
11173 -> 0;
11173 -> 11168;
11174 -> 11168;
11175 -> 11173;
11175 -> 11174;
11176 -> 11175;
11176 -> 11174;
11177 -> 0;
11177 -> 11176;
11178 -> 11177;
11178 -> 11170;
11178 -> 11168;
11179 -> 11178;
11179 -> 11058;
11180 -> 11179;
11180 -> 11079;
11180 -> 11058;
11181 -> 11065;
11181 -> 11058;
11182 -> 11181;
11183 -> 11062;
11183 -> 11182;
11183 -> 11181;
11184 -> 11063;
11184 -> 11182;
11184 -> 11181;
11185 -> 11183;
11185 -> 11184;
11185 -> 11181;
11186 -> 11064;
11186 -> 11182;
11186 -> 11181;
11187 -> 11185;
11187 -> 11186;
11187 -> 11181;
11188 -> 11067;
11188 -> 11058;
11189 -> 11079;
11189 -> 11150;
11189 -> 11151;
11189 -> 11166;
11189 -> 11180;
11189 -> 11157;
11189 -> 11158;
11189 -> 11165;
11189 -> 11159;
11189 -> 11160;
11189 -> 11162;
11189 -> 11161;
11189 -> 11188;
11190 -> 11188;
11191 -> 11079;
11191 -> 11190;
11192 -> 11191;
11192 -> 11189;
11192 -> 11190;
11193 -> 11066;
11193 -> 11188;
11194 -> 11188;
11195 -> 11188;
11196 -> 11189;
11196 -> 11195;
11197 -> 11192;
11197 -> 11195;
11198 -> 11193;
11198 -> 11195;
11199 -> 11194;
11199 -> 11195;
11200 -> 11196;
11200 -> 11195;
11201 -> 11197;
11201 -> 11195;
11202 -> 11198;
11202 -> 11195;
11203 -> 11195;
11204 -> 11203;
11204 -> 11200;
11204 -> 11201;
11204 -> 11202;
11204 -> 11189;
11204 -> 11195;
11205 -> 11194;
11205 -> 11079;
11205 -> 11188;
11206 -> 11068;
11206 -> 11079;
11206 -> 11058;
11207 -> 11079;
11207 -> 11204;
11207 -> 11058;
11208 -> 11058;
11209 -> 11079;
11209 -> 11204;
11209 -> 11208;
11209 -> 11058;
11210 -> 10982;
11211 -> 10985;
11211 -> 11210;
11211 -> 10982;
11212 -> 10985;
11212 -> 11211;
11213 -> 11211;
11214 -> 11212;
11214 -> 11213;
11215 -> 11003;
11215 -> 11213;
11216 -> 11213;
11217 -> 11214;
11217 -> 11216;
11217 -> 11213;
11218 -> 11214;
11218 -> 11213;
11219 -> 11218;
11219 -> 11204;
11219 -> 11205;
11219 -> 11206;
11219 -> 11213;
11220 -> 11213;
11221 -> 11215;
11221 -> 11219;
11221 -> 11213;
11222 -> 11220;
11222 -> 11213;
11223 -> 11221;
11223 -> 11219;
11223 -> 11213;
11224 -> 11222;
11224 -> 11223;
11224 -> 11220;
11224 -> 11219;
11224 -> 11213;
11225 -> 11213;
11226 -> 11213;
11227 -> 11214;
11227 -> 11213;
11228 -> 11227;
11228 -> 11224;
11228 -> 11213;
11229 -> 11228;
11230 -> 11228;
11231 -> 11228;
11231 -> 11230;
11232 -> 11231;
11232 -> 11228;
11232 -> 11230;
11233 -> 11232;
11233 -> 11228;
11234 -> 11228;
11235 -> 11215;
11235 -> 11234;
11235 -> 11228;
11236 -> 11228;
11237 -> 11220;
11237 -> 11236;
11237 -> 11234;
11237 -> 11228;
11238 -> 11228;
11239 -> 11228;
11239 -> 11238;
11240 -> 11238;
11241 -> 11239;
11241 -> 11240;
11242 -> 11241;
11242 -> 11237;
11242 -> 11240;
11243 -> 11242;
11243 -> 11238;
11244 -> 11238;
11245 -> 11239;
11245 -> 11244;
11246 -> 11245;
11246 -> 11237;
11246 -> 11244;
11247 -> 11246;
11247 -> 11238;
11248 -> 11238;
11249 -> 11248;
11249 -> 11228;
11250 -> 11225;
11250 -> 11249;
11250 -> 11228;
11251 -> 11226;
11251 -> 11228;
11252 -> 11220;
11252 -> 11237;
11252 -> 11213;
11253 -> 11215;
11253 -> 11252;
11253 -> 11213;
11254 -> 11214;
11254 -> 11213;
11255 -> 11213;
11256 -> 11254;
11256 -> 11255;
11257 -> 11221;
11257 -> 11255;
11258 -> 11257;
11258 -> 11252;
11258 -> 11255;
11259 -> 11257;
11259 -> 11252;
11259 -> 11255;
11260 -> 11257;
11260 -> 11252;
11260 -> 11255;
11261 -> 11257;
11261 -> 11252;
11261 -> 11255;
11262 -> 11257;
11262 -> 11252;
11262 -> 11255;
11263 -> 11256;
11263 -> 11255;
11264 -> 11257;
11264 -> 11252;
11264 -> 11263;
11264 -> 11255;
11265 -> 11255;
11266 -> 11262;
11266 -> 11265;
11266 -> 11255;
11267 -> 11264;
11267 -> 11266;
11268 -> 11266;
11269 -> 11267;
11269 -> 11268;
11270 -> 11257;
11270 -> 11268;
11271 -> 11269;
11271 -> 11268;
11272 -> 11270;
11272 -> 11264;
11272 -> 11268;
11273 -> 11268;
11274 -> 11268;
11275 -> 11271;
11275 -> 11274;
11276 -> 11272;
11276 -> 11274;
11277 -> 11272;
11277 -> 11274;
11278 -> 11272;
11278 -> 11274;
11279 -> 11272;
11279 -> 11274;
11280 -> 11273;
11280 -> 11274;
11281 -> 11273;
11281 -> 11274;
11282 -> 11274;
11282 -> 11275;
11282 -> 11276;
11282 -> 11277;
11282 -> 11278;
11282 -> 11279;
11282 -> 11264;
11283 -> 11273;
11283 -> 11266;
11284 -> 11283;
11284 -> 11213;
11285 -> 11215;
11285 -> 11282;
11285 -> 11213;
11286 -> 11250;
11286 -> 11213;
11287 -> 11284;
11287 -> 11213;
11288 -> 11213;
11289 -> 11285;
11289 -> 11288;
11290 -> 11286;
11290 -> 11288;
11291 -> 11287;
11291 -> 11288;
11292 -> 11215;
11292 -> 11288;
11293 -> 11292;
11293 -> 11282;
11293 -> 11288;
11294 -> 11288;
11295 -> 11292;
11295 -> 11294;
11296 -> 11295;
11296 -> 11282;
11296 -> 11294;
11297 -> 11296;
11297 -> 11294;
11298 -> 11297;
11298 -> 11288;
11299 -> 11292;
11299 -> 11282;
11299 -> 11274;
11299 -> 11280;
11299 -> 11288;
11300 -> 11288;
11301 -> 11299;
11301 -> 11300;
11302 -> 11301;
11302 -> 11299;
11302 -> 11300;
11303 -> 11288;
11304 -> 11302;
11304 -> 11303;
11305 -> 11289;
11305 -> 11288;
11306 -> 11290;
11306 -> 11288;
11307 -> 11291;
11307 -> 11288;
11308 -> 11288;
11309 -> 11288;
11310 -> 11293;
11310 -> 11309;
11311 -> 11293;
11311 -> 11309;
11312 -> 11293;
11312 -> 11309;
11313 -> 11298;
11313 -> 11309;
11314 -> 11302;
11314 -> 11309;
11315 -> 11304;
11315 -> 11309;
11316 -> 11304;
11316 -> 11309;
11317 -> 11305;
11317 -> 11309;
11318 -> 11306;
11318 -> 11309;
11319 -> 11307;
11319 -> 11309;
11320 -> 11304;
11320 -> 11309;
11321 -> 11308;
11321 -> 11309;
11322 -> 11308;
11322 -> 11309;
11323 -> 11313;
11323 -> 11309;
11324 -> 11314;
11324 -> 11309;
11325 -> 11315;
11325 -> 11309;
11326 -> 11319;
11326 -> 11304;
11326 -> 11309;
11327 -> 11309;
11328 -> 11326;
11328 -> 11327;
11329 -> 11327;
11330 -> 11328;
11330 -> 11329;
11331 -> 11330;
11331 -> 11326;
11331 -> 11329;
11332 -> 11331;
11332 -> 11327;
11333 -> 11321;
11333 -> 11309;
11334 -> 11309;
11335 -> 11323;
11335 -> 11334;
11336 -> 11324;
11336 -> 11334;
11337 -> 11325;
11337 -> 11334;
11338 -> 11333;
11338 -> 11334;
11339 -> 11322;
11339 -> 11334;
11340 -> 11338;
11340 -> 11334;
11341 -> 11334;
11342 -> 11341;
11342 -> 11334;
11343 -> 11341;
11343 -> 11334;
11344 -> 11341;
11344 -> 11334;
11345 -> 11341;
11345 -> 11334;
11346 -> 11341;
11346 -> 11334;
11347 -> 11341;
11347 -> 11334;
11348 -> 11341;
11348 -> 11334;
11349 -> 11341;
11349 -> 11334;
11350 -> 11341;
11350 -> 11334;
11351 -> 11341;
11351 -> 11334;
11352 -> 11341;
11352 -> 11334;
11353 -> 11341;
11353 -> 11334;
11354 -> 11341;
11354 -> 11334;
11355 -> 11341;
11355 -> 11334;
11356 -> 11341;
11356 -> 11334;
11357 -> 11341;
11357 -> 11334;
11358 -> 11341;
11358 -> 11334;
11359 -> 11341;
11359 -> 11334;
11360 -> 11341;
11360 -> 11334;
11361 -> 11341;
11361 -> 11334;
11362 -> 11341;
11362 -> 11334;
11363 -> 11341;
11363 -> 11334;
11364 -> 11341;
11364 -> 11334;
11365 -> 11341;
11365 -> 11334;
11366 -> 11341;
11366 -> 11334;
11367 -> 11341;
11367 -> 11334;
11368 -> 11334;
11369 -> 11368;
11369 -> 11341;
11369 -> 11334;
11370 -> 11341;
11370 -> 11334;
11371 -> 11341;
11371 -> 11334;
11372 -> 11341;
11372 -> 11334;
11373 -> 11341;
11373 -> 11334;
11374 -> 11341;
11374 -> 11334;
11375 -> 11341;
11375 -> 11334;
11376 -> 11341;
11376 -> 11334;
11377 -> 11334;
11378 -> 11334;
11379 -> 11376;
11379 -> 11378;
11380 -> 11377;
11380 -> 11378;
11381 -> 11378;
11382 -> 11380;
11382 -> 11381;
11383 -> 11381;
11384 -> 11380;
11384 -> 11378;
11385 -> 11379;
11385 -> 11380;
11385 -> 11378;
11386 -> 11377;
11386 -> 11341;
11386 -> 11334;
11387 -> 11341;
11387 -> 11334;
11388 -> 11334;
11389 -> 11334;
11390 -> 11387;
11390 -> 11389;
11391 -> 11388;
11391 -> 11389;
11392 -> 11391;
11392 -> 11389;
11393 -> 11391;
11393 -> 11389;
11394 -> 11391;
11394 -> 11389;
11395 -> 11390;
11395 -> 11391;
11395 -> 11389;
11396 -> 11388;
11396 -> 11341;
11396 -> 11334;
11397 -> 11341;
11397 -> 11334;
11398 -> 11334;
11399 -> 11334;
11400 -> 11397;
11400 -> 11399;
11401 -> 11398;
11401 -> 11399;
11402 -> 11399;
11403 -> 11402;
11403 -> 11399;
11404 -> 11402;
11404 -> 11399;
11405 -> 11402;
11405 -> 11399;
11406 -> 11399;
11407 -> 11406;
11407 -> 11402;
11407 -> 11399;
11408 -> 11399;
11409 -> 11400;
11409 -> 11408;
11409 -> 11399;
11410 -> 11400;
11410 -> 11402;
11410 -> 11399;
11411 -> 11398;
11411 -> 11341;
11411 -> 11334;
11412 -> 11334;
11413 -> 11332;
11413 -> 11412;
11414 -> 11412;
11415 -> 11413;
11415 -> 11412;
11416 -> 11415;
11416 -> 11332;
11416 -> 11402;
11416 -> 11406;
11416 -> 11411;
11416 -> 11403;
11416 -> 11410;
11416 -> 11404;
11416 -> 11405;
11416 -> 11407;
11417 -> 11415;
11418 -> 11416;
11418 -> 11417;
11419 -> 11415;
11420 -> 11418;
11420 -> 11419;
11421 -> 11316;
11421 -> 11334;
11422 -> 11421;
11423 -> 11335;
11423 -> 11422;
11423 -> 11421;
11424 -> 11336;
11424 -> 11422;
11424 -> 11421;
11425 -> 11423;
11425 -> 11424;
11425 -> 11421;
11426 -> 11337;
11426 -> 11422;
11426 -> 11421;
11427 -> 11425;
11427 -> 11426;
11427 -> 11421;
11428 -> 11317;
11428 -> 11318;
11429 -> 11341;
11429 -> 11318;
11430 -> 11317;
11430 -> 11429;
11430 -> 11418;
11430 -> 11420;
11430 -> 11318;
11431 -> 11317;
11431 -> 11341;
11431 -> 11318;
11432 -> 11341;
11432 -> 11430;
11432 -> 11334;
11433 -> 11334;
11434 -> 11341;
11434 -> 11430;
11434 -> 11433;
11434 -> 11334;
11435 -> 11308;
11435 -> 11213;
11436 -> 11435;
11436 -> 11211;
11437 -> 11436;
11437 -> 11430;
11437 -> 10982;
11438 -> 11436;
11438 -> 10982;
11439 -> 10616;
11439 -> 11438;
11439 -> 11430;
11439 -> 11431;
11439 -> 11319;
11439 -> 260;
11440 -> 11439;
11440 -> 260;
11441 -> 260;
11442 -> 11440;
11442 -> 11441;
11443 -> 11441;
11444 -> 11442;
11444 -> 11443;
11445 -> 11443;
11446 -> 11444;
11446 -> 11439;
11446 -> 11445;
11447 -> 11445;
11448 -> 11446;
11448 -> 11439;
11448 -> 11447;
11448 -> 11445;
11449 -> 11446;
11449 -> 11439;
11449 -> 11448;
11450 -> 11448;
11451 -> 11449;
11451 -> 11450;
11452 -> 11449;
11452 -> 11450;
11453 -> 11449;
11453 -> 11450;
11454 -> 11449;
11454 -> 11450;
11455 -> 11449;
11455 -> 11450;
11456 -> 11450;
11457 -> 11450;
11458 -> 11450;
11459 -> 11450;
11460 -> 11450;
11461 -> 0;
11463 -> 11462;
11465 -> 11464;
11467 -> 11461;
11467 -> 11466;
11468 -> 11463;
11468 -> 11466;
11469 -> 11465;
11469 -> 11466;
11470 -> 11466;
11471 -> 11470;
11471 -> 11466;
11472 -> 11470;
11472 -> 11466;
11473 -> 11470;
11473 -> 11466;
11474 -> 11470;
11474 -> 11466;
11475 -> 11470;
11475 -> 11466;
11476 -> 11470;
11476 -> 11466;
11477 -> 11470;
11477 -> 11466;
11478 -> 11467;
11478 -> 11470;
11478 -> 11466;
11479 -> 11468;
11479 -> 11470;
11479 -> 11466;
11480 -> 11470;
11480 -> 11466;
11481 -> 11466;
11482 -> 11466;
11483 -> 11480;
11483 -> 11482;
11484 -> 11481;
11484 -> 11482;
11485 -> 11484;
11485 -> 11482;
11486 -> 11484;
11486 -> 11482;
11487 -> 11484;
11487 -> 11482;
11488 -> 11484;
11488 -> 11482;
11489 -> 11483;
11489 -> 11478;
11489 -> 0;
11489 -> 11482;
11490 -> 11489;
11490 -> 11484;
11490 -> 11482;
11491 -> 11484;
11491 -> 11490;
11491 -> 11489;
11491 -> 11482;
11492 -> 11491;
11492 -> 11484;
11492 -> 11482;
11493 -> 11484;
11493 -> 11490;
11493 -> 11491;
11493 -> 11482;
11494 -> 11493;
11494 -> 11484;
11494 -> 11482;
11495 -> 11484;
11495 -> 11490;
11495 -> 11493;
11495 -> 11482;
11496 -> 11495;
11496 -> 11484;
11496 -> 11482;
11497 -> 11481;
11497 -> 11469;
11497 -> 11466;
11498 -> 11497;
11498 -> 11470;
11498 -> 11466;
11499 -> 11470;
11499 -> 11466;
11500 -> 11499;
11500 -> 11470;
11500 -> 11466;
11501 -> 11470;
11501 -> 11466;
11502 -> 11501;
11502 -> 11470;
11502 -> 11466;
11503 -> 11470;
11503 -> 11466;
11504 -> 11503;
11504 -> 11470;
11504 -> 11466;
11505 -> 11466;
11506 -> 0;
11507 -> 11506;
11508 -> 0;
11509 -> 11508;
11510 -> 11505;
11510 -> 11450;
11511 -> 11451;
11511 -> 11450;
11512 -> 11456;
11512 -> 11511;
11513 -> 11511;
11514 -> 11452;
11514 -> 11511;
11515 -> 11453;
11515 -> 11511;
11516 -> 11454;
11516 -> 11511;
11517 -> 11455;
11517 -> 11511;
11518 -> 11457;
11518 -> 11511;
11519 -> 11458;
11519 -> 11511;
11520 -> 11459;
11520 -> 11511;
11521 -> 11460;
11521 -> 11511;
11522 -> 11510;
11522 -> 11511;
11523 -> 11511;
11524 -> 11512;
11524 -> 11523;
11525 -> 11513;
11525 -> 11523;
11526 -> 11514;
11526 -> 11523;
11527 -> 11515;
11527 -> 11523;
11528 -> 11516;
11528 -> 11523;
11529 -> 11517;
11529 -> 11523;
11530 -> 11518;
11530 -> 11523;
11531 -> 11519;
11531 -> 11523;
11532 -> 11520;
11532 -> 11523;
11533 -> 11521;
11533 -> 11523;
11534 -> 11522;
11534 -> 11523;
11535 -> 11525;
11535 -> 11439;
11535 -> 11523;
11536 -> 11523;
11537 -> 11535;
11537 -> 11536;
11538 -> 11537;
11538 -> 0;
11538 -> 11523;
11539 -> 11525;
11539 -> 11523;
11540 -> 11526;
11540 -> 11523;
11541 -> 11529;
11541 -> 11523;
11542 -> 11533;
11542 -> 11523;
11543 -> 11534;
11543 -> 11523;
11544 -> 11523;
11545 -> 11539;
11545 -> 11544;
11546 -> 11540;
11546 -> 11544;
11547 -> 11541;
11547 -> 11544;
11548 -> 11542;
11548 -> 11544;
11549 -> 11543;
11549 -> 11544;
11550 -> 11545;
11550 -> 11546;
11550 -> 11547;
11550 -> 11544;
11551 -> 11550;
11551 -> 11537;
11551 -> 11544;
11552 -> 11545;
11552 -> 11544;
11553 -> 11551;
11553 -> 11544;
11554 -> 11548;
11554 -> 11552;
11554 -> 11553;
11554 -> 11460;
11554 -> 11551;
11554 -> 11544;
11555 -> 11551;
11555 -> 11544;
11556 -> 11544;
11557 -> 11555;
11557 -> 11556;
11558 -> 11549;
11558 -> 11556;
11559 -> 11556;
11560 -> 11558;
11560 -> 11479;
11560 -> 11559;
11560 -> 11556;
11561 -> 11558;
11561 -> 11478;
11561 -> 11560;
11562 -> 11557;
11562 -> 11560;
11563 -> 11558;
11563 -> 11498;
11563 -> 11560;
11564 -> 11560;
11565 -> 11560;
11566 -> 11561;
11566 -> 11565;
11567 -> 11562;
11567 -> 11565;
11568 -> 11563;
11568 -> 11565;
11569 -> 11564;
11569 -> 11565;
11570 -> 11569;
11570 -> 11565;
11571 -> 11569;
11571 -> 11565;
11572 -> 11569;
11572 -> 11565;
11573 -> 11569;
11573 -> 11565;
11574 -> 11569;
11574 -> 11565;
11575 -> 11569;
11575 -> 11565;
11576 -> 11569;
11576 -> 11565;
11577 -> 11569;
11577 -> 11565;
11578 -> 11577;
11578 -> 11569;
11578 -> 11565;
11579 -> 11569;
11579 -> 11565;
11580 -> 11579;
11580 -> 11569;
11580 -> 11565;
11581 -> 11569;
11581 -> 11565;
11582 -> 11581;
11582 -> 11569;
11582 -> 11565;
11583 -> 11564;
11583 -> 11544;
11584 -> 11523;
11585 -> 11525;
11585 -> 11523;
11586 -> 11524;
11586 -> 11585;
11586 -> 11456;
11586 -> 11554;
11586 -> 11523;
11587 -> 11525;
11587 -> 11523;
11588 -> 11530;
11588 -> 11457;
11588 -> 11523;
11589 -> 11530;
11589 -> 11587;
11589 -> 11588;
11589 -> 11457;
11589 -> 11586;
11589 -> 11523;
11590 -> 11456;
11590 -> 11589;
11590 -> 11450;
11591 -> 11457;
11591 -> 11589;
11591 -> 11450;
11592 -> 11458;
11592 -> 11450;
11593 -> 11459;
11593 -> 11450;
11594 -> 11583;
11594 -> 11450;
11595 -> 11450;
11596 -> 11450;
11597 -> 11590;
11597 -> 11596;
11598 -> 11591;
11598 -> 11596;
11599 -> 11592;
11599 -> 11596;
11600 -> 11593;
11600 -> 11596;
11601 -> 11591;
11601 -> 11596;
11602 -> 11594;
11602 -> 11596;
11603 -> 11595;
11603 -> 11596;
11604 -> 11603;
11604 -> 11596;
11605 -> 11603;
11605 -> 11596;
11606 -> 11603;
11606 -> 11596;
11607 -> 11603;
11607 -> 11596;
11608 -> 11603;
11608 -> 11596;
11609 -> 11597;
11609 -> 11596;
11610 -> 11597;
11610 -> 11590;
11610 -> 11596;
11611 -> 11597;
11611 -> 11596;
11612 -> 11601;
11612 -> 11609;
11612 -> 11596;
11613 -> 0;
11613 -> 11596;
11614 -> 11597;
11614 -> 11603;
11614 -> 11596;
11615 -> 11598;
11615 -> 11603;
11615 -> 11596;
11616 -> 11599;
11616 -> 11603;
11616 -> 11596;
11617 -> 11600;
11617 -> 11603;
11617 -> 11596;
11618 -> 11601;
11618 -> 11603;
11618 -> 11596;
11619 -> 11602;
11619 -> 11603;
11619 -> 11596;
11620 -> 11595;
11620 -> 11448;
11621 -> 11448;
11622 -> 11449;
11622 -> 11620;
11622 -> 11621;
11622 -> 11615;
11622 -> 11616;
11622 -> 11617;
11622 -> 11618;
11622 -> 11619;
11622 -> 11614;
11622 -> 11612;
11622 -> 11590;
11622 -> 11592;
11622 -> 11593;
11622 -> 11566;
11622 -> 11567;
11622 -> 11568;
11622 -> 11573;
11622 -> 11578;
11622 -> 11580;
11622 -> 11582;
11622 -> 0;
11622 -> 11490;
11622 -> 11492;
11622 -> 11494;
11622 -> 11496;
11622 -> 11495;
11622 -> 11577;
11622 -> 11579;
11622 -> 11581;
11622 -> 11448;
11623 -> 11446;
11623 -> 11622;
11623 -> 11445;
11624 -> 11623;
11624 -> 11443;
11625 -> 11624;
11625 -> 11441;
11626 -> 11625;
11626 -> 11622;
11626 -> 11441;
11627 -> 11441;
11628 -> 11625;
11628 -> 11627;
11628 -> 11622;
11628 -> 11441;
11629 -> 11441;
11630 -> 11628;
11630 -> 11629;
11631 -> 11629;
11632 -> 0;
11632 -> 11441;
11633 -> 11441;
11634 -> 11632;
11634 -> 11633;
11635 -> 11630;
11635 -> 11633;
11636 -> 11634;
11636 -> 11633;
11637 -> 11633;
11638 -> 11636;
11638 -> 11637;
11639 -> 11638;
11639 -> 11637;
11640 -> 11639;
11641 -> 11633;
11642 -> 11640;
11642 -> 11641;
11642 -> 11633;
11643 -> 11635;
11643 -> 11630;
11643 -> 11633;
11644 -> 11634;
11644 -> 11633;
11645 -> 11633;
11646 -> 11644;
11646 -> 11645;
11647 -> 11646;
11647 -> 11645;
11648 -> 11645;
11649 -> 11647;
11649 -> 11648;
11650 -> 11649;
11650 -> 11648;
11651 -> 11650;
11652 -> 11645;
11653 -> 11646;
11653 -> 11645;
11654 -> 0;
11654 -> 11653;
11655 -> 11643;
11655 -> 11654;
11655 -> 11633;
11656 -> 267;
11656 -> 11655;
11656 -> 260;
11657 -> 11439;
11657 -> 260;
11658 -> 1;
11659 -> 11657;
11659 -> 11658;
11660 -> 11659;
11660 -> 11630;
11660 -> 11658;
11661 -> 11660;
11662 -> 11661;
11662 -> 11660;
11663 -> 11660;
11664 -> 11662;
11664 -> 11663;
11665 -> 11659;
11665 -> 11663;
11666 -> 11663;
11667 -> 11665;
11667 -> 11666;
11668 -> 11666;
11669 -> 11667;
11669 -> 11668;
11670 -> 11668;
11671 -> 11669;
11671 -> 11670;
11672 -> 11671;
11672 -> 11630;
11672 -> 11670;
11673 -> 11671;
11673 -> 11672;
11674 -> 11672;
11675 -> 11673;
11675 -> 11674;
11676 -> 11671;
11676 -> 11630;
11676 -> 11674;
11677 -> 11675;
11677 -> 11674;
11678 -> 11674;
11679 -> 11677;
11679 -> 11678;
11680 -> 11676;
11680 -> 11678;
11681 -> 11678;
11682 -> 11678;
11683 -> 11678;
11684 -> 11679;
11684 -> 11683;
11685 -> 11684;
11685 -> 11678;
11686 -> 11678;
11687 -> 11678;
11688 -> 11687;
11688 -> 11678;
11689 -> 11678;
11690 -> 11689;
11690 -> 11678;
11691 -> 11678;
11692 -> 11691;
11692 -> 11678;
11693 -> 11678;
11694 -> 11693;
11694 -> 11678;
11695 -> 11679;
11695 -> 11678;
11696 -> 11682;
11696 -> 11678;
11697 -> 11693;
11697 -> 11678;
11698 -> 11686;
11698 -> 11678;
11699 -> 11687;
11699 -> 11678;
11700 -> 11689;
11700 -> 11678;
11701 -> 11691;
11701 -> 11678;
11702 -> 11681;
11702 -> 11678;
11703 -> 11695;
11703 -> 11696;
11703 -> 11697;
11703 -> 11698;
11703 -> 11699;
11703 -> 11700;
11703 -> 11701;
11703 -> 11702;
11703 -> 11680;
11703 -> 11630;
11703 -> 11682;
11703 -> 11681;
11703 -> 11694;
11703 -> 11688;
11703 -> 11690;
11703 -> 11692;
11703 -> 11678;
11704 -> 11678;
11705 -> 11703;
11705 -> 11704;
11706 -> 11704;
11707 -> 11705;
11707 -> 11706;
11708 -> 11706;
11709 -> 11707;
11709 -> 11703;
11709 -> 11708;
11710 -> 11709;
11710 -> 11706;
11711 -> 11710;
11711 -> 11704;
11712 -> 11704;
11713 -> 11711;
11713 -> 11712;
11714 -> 11713;
11714 -> 11703;
11714 -> 11712;
11715 -> 11712;
11716 -> 11714;
11716 -> 11715;
11717 -> 11716;
11717 -> 11714;
11717 -> 11715;
11718 -> 11715;
11719 -> 11717;
11719 -> 11718;
11720 -> 11719;
11720 -> 11718;
11721 -> 11718;
11722 -> 11718;
11723 -> 11720;
11723 -> 11722;
11724 -> 11721;
11724 -> 11722;
11725 -> 11723;
11725 -> 11717;
11725 -> 11722;
11726 -> 0;
11726 -> 11725;
11727 -> 11722;
11728 -> 11726;
11728 -> 11727;
11729 -> 11724;
11729 -> 11727;
11730 -> 11728;
11730 -> 11727;
11731 -> 11727;
11732 -> 11730;
11732 -> 11731;
11733 -> 11729;
11733 -> 11731;
11734 -> 11733;
11734 -> 11731;
11735 -> 11732;
11735 -> 11733;
11735 -> 11731;
11736 -> 11723;
11736 -> 11724;
11736 -> 11722;
11737 -> 11721;
11737 -> 11715;
11738 -> 11717;
11738 -> 11737;
11738 -> 11735;
11738 -> 11736;
11738 -> 11715;
11739 -> 11717;
11739 -> 11718;
11740 -> 11739;
11740 -> 11738;
11740 -> 11718;
11741 -> 11715;
11742 -> 11716;
11742 -> 11740;
11742 -> 11741;
11742 -> 11715;
11744 -> 11743;
11745 -> 11744;
11746 -> 11740;
11746 -> 11742;
11747 -> 11716;
11747 -> 11740;
11747 -> 11742;
11748 -> 11742;
11749 -> 11747;
11749 -> 11748;
11750 -> 11747;
11750 -> 11748;
11751 -> 11747;
11751 -> 11748;
11752 -> 11749;
11752 -> 11748;
11753 -> 11750;
11753 -> 11748;
11754 -> 11751;
11754 -> 11748;
11755 -> 11748;
11756 -> 11748;
11757 -> 11752;
11757 -> 11756;
11758 -> 11753;
11758 -> 11756;
11759 -> 11754;
11759 -> 11756;
11760 -> 11755;
11760 -> 11756;
11761 -> 11756;
11762 -> 11760;
11762 -> 11761;
11763 -> 11760;
11763 -> 11756;
11764 -> 11760;
11764 -> 11756;
11765 -> 11760;
11765 -> 11756;
11766 -> 11757;
11766 -> 11760;
11766 -> 11756;
11767 -> 11758;
11767 -> 11760;
11767 -> 11756;
11768 -> 11759;
11768 -> 11760;
11768 -> 11756;
11769 -> 11748;
11770 -> 11769;
11770 -> 11749;
11770 -> 11747;
11770 -> 11748;
11771 -> 11770;
11771 -> 11769;
11772 -> 11748;
11773 -> 11770;
11773 -> 11772;
11774 -> 11755;
11774 -> 11772;
11775 -> 11772;
11776 -> 11773;
11776 -> 11775;
11776 -> 11772;
11777 -> 11774;
11777 -> 11776;
11778 -> 11777;
11778 -> 11773;
11778 -> 11766;
11778 -> 11767;
11778 -> 11768;
11778 -> 11770;
11778 -> 11776;
11779 -> 11776;
11780 -> 11778;
11780 -> 11779;
11781 -> 11778;
11781 -> 11779;
11782 -> 11781;
11782 -> 11778;
11782 -> 11779;
11783 -> 11779;
11784 -> 11782;
11784 -> 11783;
11785 -> 11780;
11785 -> 11779;
11786 -> 11780;
11786 -> 11784;
11786 -> 11779;
11787 -> 11779;
11788 -> 11785;
11788 -> 11787;
11789 -> 11786;
11789 -> 11787;
11790 -> 11786;
11790 -> 11787;
11791 -> 11781;
11791 -> 11787;
11792 -> 11787;
11793 -> 11788;
11793 -> 11792;
11794 -> 11793;
11794 -> 11784;
11794 -> 11792;
11795 -> 11794;
11795 -> 11787;
11796 -> 11787;
11797 -> 11788;
11797 -> 11796;
11798 -> 11797;
11798 -> 11784;
11798 -> 11796;
11799 -> 11798;
11799 -> 11787;
11800 -> 11791;
11800 -> 11784;
11800 -> 11787;
11801 -> 11787;
11802 -> 11800;
11802 -> 11801;
11803 -> 11799;
11803 -> 11802;
11803 -> 11787;
11804 -> 11795;
11804 -> 11803;
11804 -> 11787;
11805 -> 11787;
11806 -> 11789;
11806 -> 11784;
11806 -> 11805;
11806 -> 11787;
11807 -> 11787;
11808 -> 11787;
11809 -> 11788;
11809 -> 11808;
11810 -> 11809;
11810 -> 11802;
11810 -> 11808;
11811 -> 11810;
11811 -> 11787;
11812 -> 11791;
11812 -> 11802;
11812 -> 11787;
11813 -> 11787;
11814 -> 11812;
11814 -> 11813;
11815 -> 11811;
11815 -> 11814;
11815 -> 11787;
11816 -> 11787;
11817 -> 11787;
11818 -> 11787;
11819 -> 11787;
11820 -> 11787;
11821 -> 11789;
11821 -> 11787;
11822 -> 11821;
11823 -> 11821;
11824 -> 11822;
11824 -> 11823;
11825 -> 11791;
11825 -> 11823;
11826 -> 11825;
11826 -> 11824;
11827 -> 11826;
11827 -> 11824;
11827 -> 11814;
11827 -> 11784;
11828 -> 11827;
11828 -> 11824;
11829 -> 11827;
11829 -> 11824;
11830 -> 11828;
11830 -> 11824;
11831 -> 11828;
11831 -> 11827;
11831 -> 11824;
11832 -> 11824;
11833 -> 11831;
11833 -> 11832;
11834 -> 11831;
11834 -> 11832;
11835 -> 11831;
11835 -> 11832;
11836 -> 11831;
11836 -> 11832;
11837 -> 11824;
11838 -> 11828;
11838 -> 11837;
11839 -> 11838;
11839 -> 11833;
11839 -> 11837;
11840 -> 11824;
11841 -> 11830;
11841 -> 11840;
11842 -> 11833;
11842 -> 11840;
11843 -> 11839;
11843 -> 11840;
11844 -> 11829;
11844 -> 11840;
11845 -> 11840;
11846 -> 11841;
11846 -> 11845;
11847 -> 11846;
11847 -> 11833;
11847 -> 11845;
11848 -> 11840;
11849 -> 11842;
11849 -> 11833;
11849 -> 11848;
11849 -> 11840;
11850 -> 11840;
11851 -> 11840;
11852 -> 11841;
11852 -> 11851;
11853 -> 11852;
11853 -> 11833;
11853 -> 11851;
11854 -> 11840;
11855 -> 11840;
11856 -> 11840;
11857 -> 11840;
11858 -> 11840;
11859 -> 11844;
11859 -> 11842;
11860 -> 11859;
11860 -> 11842;
11861 -> 11859;
11861 -> 11842;
11862 -> 11860;
11862 -> 11842;
11863 -> 0;
11863 -> 11842;
11864 -> 11842;
11865 -> 11862;
11865 -> 11864;
11866 -> 11863;
11866 -> 11864;
11867 -> 11861;
11867 -> 11864;
11868 -> 11865;
11868 -> 11859;
11868 -> 11864;
11869 -> 11868;
11869 -> 11864;
11870 -> 11864;
11871 -> 11865;
11871 -> 11868;
11871 -> 11870;
11871 -> 11864;
11872 -> 11864;
11873 -> 11864;
11874 -> 11865;
11874 -> 11873;
11875 -> 11873;
11876 -> 11874;
11876 -> 11868;
11876 -> 11875;
11876 -> 11873;
11877 -> 11876;
11877 -> 11873;
11878 -> 11877;
11878 -> 11864;
11879 -> 11864;
11880 -> 0;
11881 -> 0;
11881 -> 11880;
11882 -> 0;
11883 -> 11881;
11883 -> 0;
11883 -> 11882;
11884 -> 11883;
11885 -> 11865;
11885 -> 11868;
11885 -> 11878;
11886 -> 11872;
11886 -> 11878;
11887 -> 11878;
11888 -> 11885;
11888 -> 11887;
11889 -> 11886;
11889 -> 11887;
11890 -> 11887;
11891 -> 11888;
11891 -> 11868;
11891 -> 11890;
11891 -> 11887;
11892 -> 11878;
11893 -> 11865;
11893 -> 11868;
11893 -> 11864;
11894 -> 11869;
11894 -> 11864;
11895 -> 11864;
11896 -> 11864;
11897 -> 11893;
11897 -> 11896;
11898 -> 11894;
11898 -> 11896;
11899 -> 11895;
11899 -> 11896;
11900 -> 11896;
11901 -> 11896;
11902 -> 11896;
11903 -> 11745;
11903 -> 11744;
11903 -> 11896;
11904 -> 11897;
11904 -> 11896;
11905 -> 11904;
11906 -> 11903;
11906 -> 11904;
11907 -> 11902;
11907 -> 11904;
11908 -> 11899;
11908 -> 11904;
11909 -> 11904;
11910 -> 11905;
11910 -> 11909;
11911 -> 11906;
11911 -> 11909;
11912 -> 11907;
11912 -> 11909;
11913 -> 11908;
11913 -> 11909;
11914 -> 11909;
11915 -> 11910;
11915 -> 11914;
11916 -> 11915;
11916 -> 11909;
11917 -> 11916;
11918 -> 11910;
11918 -> 11868;
11918 -> 11916;
11919 -> 11918;
11919 -> 11868;
11919 -> 11916;
11920 -> 11916;
11921 -> 11920;
11921 -> 11919;
11921 -> 11916;
11922 -> 11918;
11922 -> 11920;
11922 -> 11868;
11922 -> 11921;
11923 -> 11921;
11924 -> 11922;
11924 -> 11923;
11925 -> 11924;
11925 -> 11922;
11925 -> 11923;
11926 -> 11911;
11926 -> 11925;
11926 -> 11903;
11926 -> 11921;
11927 -> 11904;
11928 -> 11904;
11929 -> 11927;
11929 -> 11928;
11930 -> 11928;
11931 -> 11929;
11931 -> 11930;
11932 -> 11931;
11932 -> 11868;
11932 -> 11922;
11932 -> 11930;
11933 -> 11932;
11933 -> 11928;
11934 -> 11928;
11935 -> 11934;
11935 -> 11904;
11936 -> 11900;
11936 -> 11935;
11936 -> 11904;
11937 -> 11904;
11938 -> 11904;
11939 -> 11937;
11939 -> 11938;
11940 -> 11938;
11941 -> 11939;
11941 -> 11940;
11942 -> 11941;
11942 -> 11868;
11942 -> 11922;
11942 -> 11940;
11943 -> 11942;
11943 -> 11938;
11944 -> 11939;
11944 -> 11868;
11944 -> 11922;
11944 -> 11943;
11945 -> 11901;
11945 -> 11944;
11945 -> 11904;
11946 -> 11900;
11946 -> 11896;
11947 -> 11901;
11947 -> 11896;
11948 -> 11917;
11948 -> 11896;
11949 -> 11898;
11949 -> 0;
11949 -> 11948;
11950 -> 11903;
11950 -> 11896;
11951 -> 11896;
11952 -> 11950;
11952 -> 11951;
11953 -> 11952;
11953 -> 11926;
11953 -> 11951;
11954 -> 11952;
11954 -> 11953;
11954 -> 11951;
11955 -> 11952;
11955 -> 11951;
11956 -> 11745;
11956 -> 11955;
11956 -> 11954;
11956 -> 11951;
11957 -> 11953;
11957 -> 11951;
11958 -> 11949;
11958 -> 0;
11958 -> 11864;
11959 -> 11864;
11960 -> 11865;
11960 -> 11944;
11960 -> 11864;
11961 -> 11864;
11962 -> 11960;
11962 -> 11961;
11963 -> 11961;
11963 -> 11864;
11964 -> 11960;
11964 -> 11963;
11964 -> 11864;
11965 -> 11960;
11965 -> 11961;
11966 -> 11960;
11966 -> 11961;
11967 -> 0;
11967 -> 11961;
11968 -> 11961;
11969 -> 11961;
11970 -> 11965;
11970 -> 11961;
11971 -> 11961;
11972 -> 11970;
11972 -> 11971;
11973 -> 11971;
11974 -> 11971;
11975 -> 11973;
11975 -> 11974;
11976 -> 11974;
11977 -> 11975;
11977 -> 11976;
11978 -> 0;
11978 -> 11976;
11979 -> 11978;
11979 -> 11974;
11980 -> 11979;
11980 -> 11974;
11981 -> 11980;
11982 -> 11975;
11982 -> 11981;
11983 -> 11981;
11984 -> 11982;
11984 -> 11983;
11985 -> 11984;
11985 -> 11981;
11986 -> 11971;
11987 -> 11985;
11987 -> 11986;
11988 -> 11987;
11988 -> 11986;
11989 -> 0;
11989 -> 11988;
11990 -> 11971;
11991 -> 11989;
11991 -> 11971;
11992 -> 11967;
11992 -> 11971;
11993 -> 11968;
11993 -> 11971;
11994 -> 11969;
11994 -> 11971;
11995 -> 11966;
11995 -> 11971;
11996 -> 11971;
11997 -> 11990;
11997 -> 11996;
11998 -> 11991;
11998 -> 11996;
11999 -> 11992;
11999 -> 11996;
12000 -> 11993;
12000 -> 11996;
12001 -> 11994;
12001 -> 11996;
12002 -> 11995;
12002 -> 11996;
12003 -> 11999;
12003 -> 11998;
12003 -> 11996;
12004 -> 11996;
12005 -> 11967;
12005 -> 11989;
12005 -> 11971;
12006 -> 12005;
12006 -> 0;
12006 -> 11961;
12007 -> 12005;
12007 -> 11961;
12008 -> 12007;
12008 -> 11864;
12009 -> 11960;
12009 -> 12008;
12009 -> 11970;
12009 -> 11864;
12010 -> 11872;
12010 -> 11864;
12011 -> 12009;
12011 -> 12010;
12011 -> 11872;
12011 -> 11864;
12012 -> 11866;
12012 -> 11864;
12013 -> 11865;
12013 -> 12011;
12013 -> 11864;
12014 -> 11864;
12015 -> 12013;
12015 -> 12014;
12016 -> 12014;
12016 -> 11864;
12017 -> 12013;
12017 -> 12016;
12017 -> 11864;
12018 -> 12013;
12018 -> 12014;
12019 -> 12014;
12020 -> 12018;
12020 -> 12019;
12021 -> 12020;
12021 -> 12017;
12021 -> 12019;
12022 -> 12021;
12022 -> 12014;
12023 -> 12013;
12023 -> 12014;
12024 -> 12014;
12025 -> 12023;
12025 -> 12022;
12025 -> 12024;
12025 -> 12014;
12026 -> 12025;
12026 -> 12014;
12027 -> 12011;
12027 -> 11864;
12028 -> 11864;
12029 -> 12026;
12029 -> 12028;
12030 -> 12026;
12030 -> 12028;
12031 -> 12029;
12031 -> 12028;
12032 -> 12028;
12033 -> 12028;
12034 -> 12031;
12034 -> 12033;
12035 -> 12032;
12035 -> 12033;
12036 -> 12033;
12037 -> 12036;
12037 -> 12033;
12038 -> 12034;
12038 -> 12036;
12038 -> 12033;
12039 -> 12032;
12039 -> 11864;
12040 -> 12026;
12040 -> 12039;
12040 -> 12036;
12040 -> 12037;
12040 -> 12038;
12040 -> 11864;
12041 -> 11949;
12041 -> 11864;
12042 -> 11865;
12042 -> 11864;
12043 -> 11867;
12043 -> 12040;
12043 -> 12042;
12043 -> 11864;
12044 -> 11864;
12045 -> 12043;
12045 -> 12044;
12046 -> 12044;
12046 -> 11864;
12047 -> 12043;
12047 -> 12046;
12047 -> 11864;
12048 -> 11864;
12049 -> 12047;
12049 -> 12048;
12050 -> 12048;
12051 -> 12049;
12051 -> 12050;
12052 -> 12051;
12052 -> 12050;
12053 -> 12050;
12054 -> 12052;
12054 -> 12053;
12055 -> 12053;
12056 -> 12053;
12057 -> 12053;
12058 -> 12054;
12058 -> 12047;
12058 -> 12057;
12059 -> 12057;
12060 -> 12058;
12060 -> 12059;
12060 -> 12057;
12061 -> 12057;
12062 -> 12054;
12062 -> 12061;
12063 -> 12062;
12063 -> 12047;
12063 -> 12061;
12064 -> 12063;
12064 -> 12057;
12065 -> 12057;
12066 -> 12064;
12066 -> 12065;
12066 -> 12057;
12067 -> 12064;
12067 -> 12047;
12067 -> 12057;
12068 -> 12057;
12069 -> 12067;
12069 -> 12068;
12069 -> 12057;
12070 -> 12057;
12071 -> 12054;
12071 -> 12057;
12072 -> 12064;
12072 -> 12057;
12073 -> 12072;
12073 -> 12071;
12073 -> 12057;
12074 -> 12073;
12074 -> 12059;
12074 -> 12057;
12075 -> 12072;
12075 -> 12071;
12075 -> 12061;
12076 -> 12075;
12076 -> 12065;
12076 -> 12057;
12077 -> 12075;
12077 -> 12071;
12077 -> 12057;
12078 -> 12077;
12078 -> 12068;
12078 -> 12057;
12079 -> 12077;
12079 -> 12072;
12079 -> 12078;
12080 -> 12053;
12081 -> 12070;
12081 -> 12080;
12081 -> 12053;
12082 -> 12081;
12083 -> 12077;
12083 -> 12082;
12083 -> 12081;
12084 -> 12070;
12084 -> 12081;
12085 -> 12084;
12085 -> 12071;
12085 -> 12079;
12085 -> 12081;
12086 -> 12085;
12086 -> 12071;
12086 -> 12079;
12087 -> 12085;
12088 -> 12086;
12088 -> 12087;
12088 -> 12085;
12089 -> 12077;
12089 -> 12085;
12090 -> 12070;
12090 -> 12071;
12090 -> 12079;
12090 -> 12089;
12090 -> 12081;
12091 -> 12077;
12091 -> 12053;
12092 -> 12091;
12092 -> 12051;
12092 -> 12090;
12092 -> 12050;
12093 -> 12050;
12094 -> 12092;
12094 -> 12093;
12094 -> 12050;
12095 -> 12092;
12095 -> 12050;
12096 -> 12095;
12096 -> 12048;
12097 -> 12047;
12097 -> 12048;
12098 -> 12048;
12099 -> 12097;
12099 -> 12098;
12100 -> 12098;
12101 -> 12100;
12101 -> 12048;
12102 -> 12048;
12103 -> 12101;
12103 -> 12102;
12103 -> 12048;
12104 -> 12103;
12104 -> 12048;
12105 -> 12047;
12105 -> 12104;
12105 -> 12096;
12105 -> 11864;
12106 -> 12047;
12106 -> 12048;
12107 -> 12048;
12108 -> 12106;
12108 -> 12107;
12109 -> 12108;
12109 -> 12105;
12109 -> 12107;
12110 -> 12109;
12110 -> 12048;
12111 -> 11957;
12111 -> 11864;
12112 -> 11864;
12113 -> 12042;
12113 -> 12112;
12114 -> 11867;
12114 -> 12112;
12115 -> 12113;
12115 -> 12110;
12115 -> 12112;
12116 -> 12112;
12117 -> 12115;
12117 -> 12116;
12118 -> 12115;
12118 -> 12116;
12119 -> 12115;
12119 -> 12116;
12120 -> 12115;
12120 -> 12116;
12121 -> 12112;
12122 -> 12112;
12123 -> 12113;
12123 -> 12117;
12123 -> 12112;
12124 -> 12123;
12125 -> 12123;
12126 -> 12124;
12126 -> 12125;
12127 -> 12114;
12127 -> 12125;
12128 -> 12127;
12128 -> 12126;
12129 -> 12128;
12129 -> 12126;
12130 -> 12128;
12130 -> 12126;
12131 -> 12126;
12132 -> 12128;
12132 -> 12131;
12132 -> 12126;
12133 -> 12123;
12134 -> 12132;
12134 -> 12133;
12134 -> 12123;
12135 -> 12122;
12135 -> 12112;
12136 -> 12135;
12136 -> 11864;
12137 -> 11864;
12138 -> 12012;
12138 -> 12137;
12139 -> 12026;
12139 -> 12137;
12140 -> 12027;
12140 -> 12137;
12141 -> 12040;
12141 -> 12137;
12142 -> 12041;
12142 -> 12137;
12143 -> 12043;
12143 -> 12137;
12144 -> 12110;
12144 -> 12137;
12145 -> 12111;
12145 -> 12137;
12146 -> 12136;
12146 -> 12137;
12147 -> 12132;
12147 -> 12137;
12148 -> 12048;
12148 -> 12137;
12149 -> 12139;
12149 -> 12137;
12150 -> 12143;
12150 -> 12137;
12151 -> 12144;
12151 -> 12137;
12152 -> 12147;
12152 -> 12137;
12153 -> 12137;
12154 -> 12149;
12154 -> 12153;
12155 -> 12150;
12155 -> 12153;
12156 -> 12151;
12156 -> 12153;
12157 -> 12152;
12157 -> 12153;
12158 -> 12148;
12158 -> 12153;
12159 -> 12154;
12159 -> 12153;
12160 -> 12153;
12161 -> 12159;
12161 -> 12160;
12162 -> 12158;
12162 -> 12160;
12163 -> 12158;
12163 -> 12153;
12164 -> 12158;
12164 -> 12153;
12165 -> 12155;
12165 -> 12158;
12165 -> 12153;
12166 -> 12156;
12166 -> 12158;
12166 -> 12153;
12167 -> 12157;
12167 -> 12158;
12167 -> 12153;
12168 -> 12148;
12168 -> 12137;
12169 -> 12148;
12169 -> 12137;
12170 -> 12148;
12170 -> 12137;
12171 -> 12148;
12171 -> 12137;
12172 -> 12148;
12172 -> 12137;
12173 -> 12138;
12173 -> 0;
12173 -> 12137;
12174 -> 12138;
12174 -> 12148;
12174 -> 12137;
12175 -> 12140;
12175 -> 12148;
12175 -> 12137;
12176 -> 12141;
12176 -> 12148;
12176 -> 12137;
12177 -> 12145;
12177 -> 12148;
12177 -> 12137;
12178 -> 12146;
12178 -> 12148;
12178 -> 12137;
12179 -> 12142;
12179 -> 12148;
12179 -> 12137;
12180 -> 12048;
12180 -> 11842;
12181 -> 11859;
12181 -> 12180;
12181 -> 12132;
12181 -> 12161;
12181 -> 12165;
12181 -> 12166;
12181 -> 12167;
12181 -> 12174;
12181 -> 12179;
12181 -> 12175;
12181 -> 12176;
12181 -> 12177;
12181 -> 12178;
12181 -> 11956;
12181 -> 12135;
12181 -> 12122;
12181 -> 11842;
12182 -> 11842;
12183 -> 12181;
12183 -> 12182;
12183 -> 11842;
12184 -> 12181;
12184 -> 12183;
12185 -> 11858;
12185 -> 12184;
12185 -> 12181;
12185 -> 12183;
12186 -> 11857;
12186 -> 11840;
12187 -> 11850;
12187 -> 11840;
12188 -> 11858;
12188 -> 12185;
12188 -> 11840;
12189 -> 11828;
12189 -> 12185;
12189 -> 11824;
12190 -> 11828;
12190 -> 12189;
12190 -> 11824;
12191 -> 11828;
12191 -> 12190;
12191 -> 11824;
12192 -> 11824;
12193 -> 12191;
12193 -> 12192;
12194 -> 12191;
12194 -> 12192;
12195 -> 12191;
12195 -> 12192;
12196 -> 12191;
12196 -> 12192;
12197 -> 11828;
12197 -> 11824;
12198 -> 11824;
12199 -> 12193;
12199 -> 11824;
12200 -> 11824;
12201 -> 12193;
12201 -> 12200;
12201 -> 11824;
12202 -> 11824;
12203 -> 11828;
12203 -> 12193;
12203 -> 11824;
12204 -> 11824;
12205 -> 12203;
12205 -> 12204;
12206 -> 12204;
12207 -> 12205;
12207 -> 12206;
12208 -> 12207;
12208 -> 12204;
12209 -> 12204;
12210 -> 12209;
12210 -> 11824;
12211 -> 11828;
12211 -> 12193;
12211 -> 11824;
12212 -> 11824;
12213 -> 12211;
12213 -> 12212;
12214 -> 12212;
12215 -> 12213;
12215 -> 12214;
12216 -> 12215;
12216 -> 12212;
12217 -> 12212;
12218 -> 12217;
12218 -> 11824;
12219 -> 11824;
12220 -> 11828;
12220 -> 12193;
12220 -> 12219;
12220 -> 11824;
12221 -> 11828;
12221 -> 12193;
12221 -> 11824;
12222 -> 11824;
12223 -> 12221;
12223 -> 12222;
12224 -> 12223;
12224 -> 12221;
12224 -> 12222;
12225 -> 11824;
12226 -> 11824;
12227 -> 12193;
12227 -> 12226;
12228 -> 12227;
12228 -> 12226;
12229 -> 12228;
12229 -> 11824;
12230 -> 12229;
12230 -> 12224;
12230 -> 11824;
12231 -> 11824;
12232 -> 12230;
12232 -> 12231;
12233 -> 12231;
12233 -> 11824;
12234 -> 12230;
12234 -> 12233;
12234 -> 11824;
12235 -> 12230;
12235 -> 12231;
12236 -> 12231;
12237 -> 12230;
12237 -> 12231;
12238 -> 12230;
12238 -> 12231;
12239 -> 12231;
12240 -> 12231;
12241 -> 12239;
12241 -> 12240;
12242 -> 12240;
12243 -> 12242;
12243 -> 12240;
12244 -> 12239;
12244 -> 11824;
12245 -> 12189;
12245 -> 11824;
12246 -> 12190;
12246 -> 11824;
12247 -> 12197;
12247 -> 11824;
12248 -> 11829;
12248 -> 12235;
12248 -> 12247;
12248 -> 11824;
12249 -> 12193;
12249 -> 11824;
12250 -> 11824;
12251 -> 12250;
12252 -> 12251;
12253 -> 12252;
12254 -> 12252;
12255 -> 12252;
12256 -> 12248;
12256 -> 12255;
12257 -> 12255;
12258 -> 12256;
12258 -> 12257;
12258 -> 12255;
12259 -> 12255;
12260 -> 12255;
12261 -> 12248;
12261 -> 12260;
12261 -> 12255;
12262 -> 12255;
12263 -> 12252;
12264 -> 12253;
12264 -> 12263;
12264 -> 12252;
12265 -> 12251;
12266 -> 12248;
12266 -> 12265;
12266 -> 12251;
12267 -> 12248;
12267 -> 12250;
12268 -> 12250;
12269 -> 12267;
12269 -> 12268;
12270 -> 12268;
12271 -> 12270;
12271 -> 12250;
12272 -> 12250;
12273 -> 12271;
12273 -> 12272;
12273 -> 12250;
12274 -> 12273;
12274 -> 12250;
12275 -> 12248;
12275 -> 12250;
12276 -> 12250;
12277 -> 12275;
12277 -> 12276;
12278 -> 12277;
12278 -> 12250;
12279 -> 12250;
12280 -> 12278;
12280 -> 12279;
12280 -> 12250;
12281 -> 12280;
12281 -> 12250;
12282 -> 12278;
12282 -> 12248;
12282 -> 12281;
12283 -> 12188;
12283 -> 11824;
12284 -> 12202;
12284 -> 11824;
12285 -> 11824;
12286 -> 12235;
12286 -> 12285;
12287 -> 12245;
12287 -> 12285;
12288 -> 12246;
12288 -> 12285;
12289 -> 12248;
12289 -> 12285;
12290 -> 12282;
12290 -> 12285;
12291 -> 12283;
12291 -> 12285;
12292 -> 12284;
12292 -> 12285;
12293 -> 12287;
12293 -> 12288;
12293 -> 12285;
12294 -> 12286;
12294 -> 12293;
12295 -> 12289;
12295 -> 12293;
12296 -> 12290;
12296 -> 12293;
12297 -> 12291;
12297 -> 12293;
12298 -> 12292;
12298 -> 12293;
12299 -> 12293;
12300 -> 12293;
12301 -> 12294;
12301 -> 12300;
12302 -> 12295;
12302 -> 12300;
12303 -> 12296;
12303 -> 12300;
12304 -> 12297;
12304 -> 12300;
12305 -> 12298;
12305 -> 12300;
12306 -> 12299;
12306 -> 12300;
12307 -> 12301;
12307 -> 12300;
12308 -> 12302;
12308 -> 12300;
12309 -> 12303;
12309 -> 12300;
12310 -> 12305;
12310 -> 12300;
12311 -> 12300;
12312 -> 12307;
12312 -> 12311;
12313 -> 12308;
12313 -> 12311;
12314 -> 12309;
12314 -> 12311;
12315 -> 12310;
12315 -> 12311;
12316 -> 12306;
12316 -> 12311;
12317 -> 12306;
12317 -> 12311;
12318 -> 12306;
12318 -> 12311;
12319 -> 12304;
12319 -> 12306;
12319 -> 12300;
12320 -> 11827;
12320 -> 12299;
12320 -> 12282;
12320 -> 12312;
12320 -> 12313;
12320 -> 12314;
12320 -> 12315;
12320 -> 12319;
12320 -> 12284;
12320 -> 12188;
12320 -> 11824;
12321 -> 11821;
12322 -> 11819;
12322 -> 11787;
12323 -> 11807;
12323 -> 11787;
12324 -> 11780;
12324 -> 12320;
12324 -> 11779;
12325 -> 11779;
12326 -> 12324;
12326 -> 12325;
12327 -> 12324;
12327 -> 12325;
12328 -> 12325;
12329 -> 12325;
12330 -> 12328;
12330 -> 12329;
12331 -> 12329;
12332 -> 12331;
12332 -> 12329;
12333 -> 12328;
12333 -> 11779;
12334 -> 11780;
12334 -> 11779;
12335 -> 12320;
12335 -> 11779;
12336 -> 0;
12336 -> 11779;
12337 -> 11779;
12338 -> 12326;
12338 -> 12337;
12339 -> 12326;
12339 -> 12337;
12340 -> 12326;
12340 -> 12337;
12341 -> 12326;
12341 -> 12337;
12342 -> 12326;
12342 -> 12337;
12343 -> 12326;
12343 -> 12337;
12344 -> 12326;
12344 -> 12337;
12345 -> 11726;
12345 -> 12337;
12346 -> 12340;
12346 -> 12337;
12347 -> 12340;
12347 -> 12337;
12348 -> 12347;
12348 -> 12326;
12348 -> 12337;
12349 -> 12337;
12350 -> 12348;
12350 -> 12349;
12351 -> 12350;
12351 -> 12348;
12351 -> 12349;
12352 -> 12349;
12353 -> 12351;
12353 -> 12352;
12354 -> 12352;
12355 -> 12354;
12356 -> 12353;
12356 -> 12355;
12356 -> 12354;
12357 -> 12348;
12357 -> 12349;
12358 -> 12357;
12358 -> 12353;
12358 -> 12349;
12359 -> 12349;
12360 -> 12358;
12360 -> 12359;
12361 -> 12359;
12362 -> 12359;
12363 -> 12358;
12363 -> 12359;
12364 -> 12359;
12365 -> 12363;
12365 -> 12364;
12366 -> 12364;
12366 -> 12359;
12367 -> 12359;
12368 -> 12366;
12368 -> 12367;
12368 -> 12359;
12369 -> 12368;
12369 -> 12359;
12370 -> 12369;
12370 -> 12349;
12371 -> 12341;
12371 -> 12337;
12372 -> 0;
12372 -> 12337;
12373 -> 12337;
12374 -> 12345;
12374 -> 12373;
12375 -> 12346;
12375 -> 12373;
12376 -> 12360;
12376 -> 12373;
12377 -> 12371;
12377 -> 12373;
12378 -> 12372;
12378 -> 12373;
12379 -> 12374;
12379 -> 12373;
12380 -> 12378;
12380 -> 12373;
12381 -> 12373;
12382 -> 12379;
12382 -> 12381;
12383 -> 12380;
12383 -> 12381;
12384 -> 12382;
12384 -> 12381;
12385 -> 12381;
12386 -> 12384;
12386 -> 12385;
12387 -> 12344;
12387 -> 12385;
12388 -> 12386;
12388 -> 12344;
12388 -> 12385;
12389 -> 12344;
12389 -> 12381;
12390 -> 12344;
12390 -> 12381;
12391 -> 12383;
12391 -> 12344;
12391 -> 12381;
12392 -> 12344;
12392 -> 12337;
12393 -> 12344;
12393 -> 12337;
12394 -> 12344;
12394 -> 12337;
12395 -> 12342;
12395 -> 12326;
12395 -> 12337;
12396 -> 12342;
12396 -> 12344;
12396 -> 12337;
12397 -> 12343;
12397 -> 12344;
12397 -> 12337;
12398 -> 12338;
12398 -> 12344;
12398 -> 12337;
12399 -> 12339;
12399 -> 12344;
12399 -> 12337;
12400 -> 12326;
12400 -> 12360;
12400 -> 12388;
12400 -> 12375;
12400 -> 12376;
12400 -> 12391;
12400 -> 12377;
12400 -> 12397;
12400 -> 12398;
12400 -> 12399;
12400 -> 12396;
12400 -> 0;
12400 -> 11779;
12401 -> 11742;
12402 -> 11716;
12402 -> 12400;
12402 -> 12401;
12403 -> 12402;
12403 -> 12400;
12403 -> 12401;
12404 -> 11703;
12404 -> 11704;
12405 -> 12404;
12405 -> 12403;
12405 -> 11704;
12406 -> 11703;
12406 -> 11704;
12407 -> 11008;
12407 -> 11704;
12408 -> 11703;
12408 -> 12407;
12408 -> 12405;
12408 -> 11678;
12409 -> 11703;
12409 -> 11704;
12410 -> 11703;
12410 -> 11704;
12411 -> 11703;
12411 -> 11704;
12412 -> 11703;
12412 -> 11704;
12413 -> 11703;
12413 -> 11704;
12414 -> 11703;
12414 -> 11704;
12415 -> 11703;
12415 -> 11704;
12416 -> 12409;
12416 -> 11704;
12417 -> 12410;
12417 -> 11704;
12418 -> 12414;
12418 -> 11704;
12419 -> 12411;
12419 -> 11704;
12420 -> 12412;
12420 -> 11704;
12421 -> 12413;
12421 -> 11704;
12422 -> 11704;
12423 -> 11704;
12424 -> 12416;
12424 -> 12423;
12425 -> 12417;
12425 -> 12423;
12426 -> 12418;
12426 -> 12423;
12427 -> 12419;
12427 -> 12423;
12428 -> 12420;
12428 -> 12423;
12429 -> 12421;
12429 -> 12423;
12430 -> 12422;
12430 -> 12423;
12431 -> 12424;
12431 -> 12408;
12431 -> 12423;
12432 -> 12424;
12432 -> 12408;
12432 -> 12423;
12433 -> 12426;
12433 -> 12423;
12434 -> 12423;
12435 -> 12431;
12435 -> 12434;
12436 -> 12432;
12436 -> 12434;
12437 -> 12433;
12437 -> 12434;
12438 -> 12430;
12438 -> 12434;
12439 -> 12434;
12440 -> 12439;
12440 -> 12434;
12441 -> 12439;
12441 -> 12434;
12442 -> 12439;
12442 -> 12434;
12443 -> 12434;
12444 -> 12435;
12444 -> 12443;
12444 -> 12434;
12445 -> 12436;
12445 -> 12408;
12445 -> 12434;
12446 -> 12437;
12446 -> 12439;
12446 -> 12434;
12447 -> 12435;
12447 -> 12439;
12447 -> 12434;
12448 -> 12436;
12448 -> 12439;
12448 -> 12434;
12449 -> 12430;
12449 -> 12423;
12450 -> 12430;
12450 -> 12423;
12451 -> 12430;
12451 -> 12423;
12452 -> 12430;
12452 -> 12423;
12453 -> 12430;
12453 -> 12423;
12454 -> 12430;
12454 -> 12423;
12455 -> 12430;
12455 -> 12423;
12456 -> 12423;
12457 -> 12427;
12457 -> 12456;
12457 -> 12423;
12458 -> 12423;
12459 -> 12425;
12459 -> 12458;
12459 -> 12423;
12460 -> 12425;
12460 -> 12430;
12460 -> 12423;
12461 -> 12424;
12461 -> 12430;
12461 -> 12423;
12462 -> 12427;
12462 -> 12430;
12462 -> 12423;
12463 -> 12429;
12463 -> 12430;
12463 -> 12423;
12464 -> 12428;
12464 -> 12430;
12464 -> 12423;
12465 -> 11703;
12465 -> 12422;
12465 -> 12408;
12465 -> 12439;
12465 -> 12440;
12465 -> 12441;
12465 -> 12447;
12465 -> 12442;
12465 -> 12446;
12465 -> 12448;
12465 -> 12449;
12465 -> 12461;
12465 -> 12450;
12465 -> 12460;
12465 -> 12451;
12465 -> 12462;
12465 -> 12452;
12465 -> 12463;
12465 -> 12453;
12465 -> 12464;
12465 -> 12454;
12465 -> 12455;
12465 -> 11678;
12466 -> 12465;
12466 -> 12443;
12466 -> 12434;
12467 -> 12465;
12467 -> 12434;
12468 -> 11680;
12468 -> 12465;
12468 -> 11678;
12469 -> 11678;
12470 -> 12465;
12470 -> 11678;
12471 -> 12468;
12471 -> 12469;
12472 -> 12471;
12472 -> 12468;
12472 -> 12469;
12473 -> 11678;
12474 -> 12472;
12474 -> 11678;
12475 -> 11678;
12476 -> 11678;
12477 -> 11678;
12478 -> 12477;
12478 -> 11678;
12479 -> 11678;
12480 -> 12479;
12480 -> 11678;
12481 -> 11678;
12482 -> 12481;
12482 -> 11678;
12483 -> 11679;
12483 -> 12474;
12483 -> 11678;
12484 -> 11678;
12485 -> 12483;
12485 -> 12484;
12485 -> 11678;
12486 -> 12485;
12486 -> 11678;
12487 -> 11678;
12488 -> 12486;
12488 -> 12487;
12488 -> 11678;
12489 -> 12488;
12489 -> 11678;
12490 -> 11678;
12491 -> 12489;
12491 -> 12490;
12491 -> 11678;
12492 -> 12491;
12492 -> 11678;
12493 -> 0;
12493 -> 11678;
12494 -> 12493;
12494 -> 12492;
12494 -> 11678;
12495 -> 11679;
12495 -> 11678;
12496 -> 12474;
12496 -> 11678;
12497 -> 12465;
12497 -> 11678;
12498 -> 11678;
12499 -> 11679;
12499 -> 12498;
12500 -> 12499;
12500 -> 12474;
12500 -> 12498;
12501 -> 12500;
12501 -> 11678;
12502 -> 11678;
12503 -> 11679;
12503 -> 12502;
12504 -> 12503;
12504 -> 12474;
12504 -> 12502;
12505 -> 12504;
12505 -> 11678;
12506 -> 11685;
12506 -> 11678;
12507 -> 11682;
12507 -> 11678;
12508 -> 12481;
12508 -> 11678;
12509 -> 12477;
12509 -> 11678;
12510 -> 12479;
12510 -> 11678;
12511 -> 12494;
12511 -> 11678;
12512 -> 11681;
12512 -> 11678;
12513 -> 12475;
12513 -> 11678;
12514 -> 12476;
12514 -> 11678;
12515 -> 12495;
12515 -> 12496;
12515 -> 12497;
12515 -> 12501;
12515 -> 12505;
12515 -> 12506;
12515 -> 12507;
12515 -> 12508;
12515 -> 12509;
12515 -> 12510;
12515 -> 12511;
12515 -> 12512;
12515 -> 12513;
12515 -> 12514;
12515 -> 11680;
12515 -> 12474;
12515 -> 12465;
12515 -> 12482;
12515 -> 12478;
12515 -> 12480;
12515 -> 0;
12515 -> 11678;
12516 -> 11678;
12517 -> 12515;
12517 -> 12516;
12518 -> 12515;
12518 -> 12516;
12519 -> 12515;
12519 -> 12516;
12520 -> 12519;
12520 -> 12515;
12520 -> 12516;
12521 -> 12517;
12521 -> 12516;
12522 -> 12516;
12523 -> 12518;
12523 -> 12516;
12524 -> 12520;
12524 -> 12521;
12524 -> 12522;
12524 -> 12523;
12524 -> 12515;
12524 -> 12516;
12525 -> 12515;
12525 -> 12516;
12526 -> 12525;
12526 -> 12524;
12526 -> 12516;
12527 -> 12515;
12527 -> 12516;
12528 -> 12527;
12528 -> 12526;
12528 -> 12516;
12529 -> 12515;
12529 -> 12516;
12530 -> 12529;
12530 -> 12528;
12530 -> 12516;
12531 -> 12515;
12531 -> 12516;
12532 -> 12531;
12532 -> 12530;
12532 -> 12516;
12533 -> 12515;
12533 -> 12516;
12534 -> 12516;
12535 -> 12533;
12535 -> 12532;
12535 -> 12534;
12535 -> 12516;
12536 -> 12535;
12537 -> 12536;
12537 -> 12533;
12537 -> 12535;
12538 -> 12533;
12538 -> 12532;
12538 -> 12537;
12538 -> 12535;
12539 -> 12535;
12540 -> 12538;
12540 -> 12539;
12541 -> 12533;
12541 -> 12539;
12542 -> 12541;
12542 -> 12532;
12542 -> 12539;
12543 -> 12542;
12543 -> 12532;
12543 -> 12537;
12543 -> 12539;
12544 -> 12535;
12545 -> 12533;
12545 -> 12532;
12545 -> 12537;
12545 -> 12516;
12546 -> 12533;
12546 -> 12545;
12547 -> 12545;
12548 -> 12546;
12548 -> 12547;
12549 -> 12533;
12549 -> 12547;
12550 -> 12549;
12550 -> 12545;
12550 -> 12547;
12551 -> 12545;
12552 -> 12545;
12552 -> 11678;
12553 -> 12545;
12553 -> 11678;
12554 -> 12545;
12554 -> 11678;
12555 -> 12465;
12555 -> 12554;
12555 -> 12545;
12555 -> 12553;
12555 -> 11678;
12556 -> 11678;
12557 -> 11678;
12558 -> 12557;
12558 -> 11678;
12559 -> 12545;
12559 -> 11678;
12560 -> 12553;
12560 -> 11678;
12561 -> 12555;
12561 -> 11678;
12562 -> 12465;
12562 -> 11678;
12563 -> 12465;
12563 -> 12555;
12563 -> 11678;
12564 -> 11682;
12564 -> 11678;
12565 -> 11685;
12565 -> 11678;
12566 -> 12556;
12566 -> 11678;
12567 -> 12557;
12567 -> 11678;
12568 -> 12559;
12568 -> 12560;
12568 -> 12561;
12568 -> 12562;
12568 -> 12563;
12568 -> 12564;
12568 -> 12565;
12568 -> 12566;
12568 -> 12567;
12568 -> 12555;
12568 -> 12553;
12568 -> 12558;
12568 -> 11678;
12569 -> 11678;
12570 -> 11678;
12571 -> 12570;
12571 -> 12545;
12571 -> 12568;
12571 -> 11678;
12572 -> 12545;
12572 -> 12568;
12572 -> 12570;
12572 -> 12571;
12573 -> 12572;
12573 -> 12568;
12573 -> 12571;
12574 -> 12545;
12574 -> 12570;
12574 -> 12568;
12574 -> 12573;
12575 -> 12573;
12576 -> 12574;
12576 -> 12575;
12577 -> 12576;
12577 -> 12574;
12577 -> 12575;
12578 -> 12575;
12579 -> 12576;
12579 -> 12578;
12580 -> 12579;
12580 -> 12575;
12581 -> 12575;
12582 -> 12576;
12582 -> 12581;
12583 -> 12581;
12584 -> 12582;
12584 -> 12583;
12585 -> 12584;
12585 -> 12574;
12585 -> 12583;
12586 -> 12584;
12586 -> 12574;
12586 -> 12585;
12587 -> 12586;
12587 -> 12584;
12587 -> 12585;
12588 -> 12585;
12589 -> 12588;
12589 -> 12584;
12589 -> 12585;
12590 -> 12584;
12590 -> 12586;
12590 -> 12587;
12590 -> 12583;
12591 -> 12590;
12591 -> 12581;
12592 -> 12582;
12592 -> 12586;
12592 -> 12581;
12593 -> 12592;
12593 -> 12575;
12594 -> 12575;
12595 -> 12575;
12596 -> 12577;
12596 -> 12595;
12597 -> 12577;
12597 -> 12595;
12598 -> 12580;
12598 -> 12595;
12599 -> 12593;
12599 -> 12595;
12600 -> 12594;
12600 -> 12595;
12601 -> 12595;
12602 -> 12600;
12602 -> 12601;
12603 -> 12601;
12604 -> 12602;
12604 -> 12603;
12607 -> 12606;
12607 -> 12605;
12608 -> 12605;
12609 -> 12603;
12610 -> 12604;
12610 -> 12609;
12611 -> 12609;
12612 -> 12610;
12612 -> 12611;
12613 -> 12612;
12613 -> 12611;
12614 -> 12610;
12614 -> 12609;
12615 -> 12603;
12616 -> 12615;
12616 -> 12604;
12616 -> 12603;
12617 -> 12604;
12617 -> 12603;
12618 -> 12602;
12618 -> 12601;
12619 -> 12602;
12619 -> 12601;
12620 -> 12602;
12620 -> 12601;
12621 -> 12602;
12621 -> 12601;
12622 -> 12602;
12622 -> 12601;
12623 -> 12602;
12623 -> 12601;
12624 -> 12602;
12624 -> 12601;
12625 -> 12600;
12625 -> 12595;
12626 -> 12600;
12626 -> 12595;
12627 -> 12600;
12627 -> 12595;
12628 -> 12595;
12629 -> 12596;
12629 -> 12628;
12629 -> 12595;
12630 -> 12595;
12631 -> 12597;
12631 -> 12630;
12631 -> 12595;
12632 -> 12596;
12632 -> 12600;
12632 -> 12595;
12633 -> 12597;
12633 -> 12600;
12633 -> 12595;
12634 -> 12596;
12634 -> 12586;
12634 -> 12587;
12634 -> 12589;
12634 -> 12595;
12635 -> 12595;
12636 -> 12635;
12636 -> 12596;
12636 -> 12586;
12636 -> 12587;
12636 -> 12589;
12636 -> 12595;
12637 -> 12600;
12637 -> 12636;
12639 -> 12638;
12640 -> 12596;
12640 -> 12586;
12640 -> 12635;
12640 -> 12587;
12640 -> 12589;
12640 -> 12636;
12641 -> 12599;
12641 -> 12636;
12642 -> 12635;
12642 -> 12636;
12643 -> 12636;
12644 -> 12636;
12645 -> 12637;
12645 -> 12644;
12646 -> 12640;
12646 -> 12644;
12647 -> 12641;
12647 -> 12644;
12648 -> 12642;
12648 -> 12644;
12649 -> 12643;
12649 -> 12644;
12650 -> 12645;
12650 -> 12644;
12651 -> 12646;
12651 -> 12644;
12652 -> 12647;
12652 -> 12644;
12653 -> 12648;
12653 -> 12644;
12654 -> 12644;
12655 -> 12650;
12655 -> 12654;
12656 -> 12651;
12656 -> 12654;
12657 -> 12652;
12657 -> 12654;
12658 -> 12653;
12658 -> 12654;
12659 -> 12649;
12659 -> 12654;
12660 -> 12654;
12661 -> 12659;
12661 -> 12660;
12662 -> 12660;
12663 -> 12661;
12663 -> 12662;
12664 -> 12662;
12665 -> 12663;
12665 -> 12664;
12666 -> 12665;
12666 -> 12664;
12667 -> 12661;
12667 -> 12660;
12668 -> 12659;
12668 -> 12654;
12669 -> 12659;
12669 -> 12654;
12670 -> 12659;
12670 -> 12654;
12671 -> 12659;
12671 -> 12654;
12672 -> 12659;
12672 -> 12654;
12673 -> 12659;
12673 -> 12654;
12674 -> 12659;
12674 -> 12654;
12675 -> 12654;
12676 -> 12675;
12676 -> 12654;
12677 -> 12639;
12677 -> 12654;
12678 -> 12676;
12678 -> 12677;
12678 -> 12654;
12679 -> 12678;
12679 -> 12659;
12679 -> 12654;
12680 -> 12654;
12681 -> 12680;
12681 -> 12654;
12682 -> 12639;
12682 -> 12654;
12683 -> 12681;
12683 -> 12682;
12683 -> 12654;
12684 -> 12683;
12684 -> 12659;
12684 -> 12654;
12685 -> 12659;
12685 -> 12654;
12686 -> 12659;
12686 -> 12654;
12687 -> 12659;
12687 -> 12654;
12688 -> 12659;
12688 -> 12654;
12689 -> 12654;
12690 -> 12655;
12690 -> 12689;
12690 -> 12654;
12691 -> 12654;
12692 -> 12656;
12692 -> 12691;
12692 -> 12654;
12693 -> 12655;
12693 -> 12659;
12693 -> 12654;
12694 -> 12658;
12694 -> 12659;
12694 -> 12654;
12695 -> 12656;
12695 -> 12659;
12695 -> 12654;
12696 -> 12657;
12696 -> 12659;
12696 -> 12654;
12697 -> 12659;
12697 -> 12654;
12698 -> 12654;
12699 -> 12654;
12700 -> 12697;
12700 -> 12699;
12701 -> 12698;
12701 -> 12699;
12702 -> 12699;
12703 -> 12701;
12703 -> 12702;
12704 -> 12702;
12705 -> 12703;
12705 -> 12704;
12706 -> 12704;
12707 -> 12705;
12707 -> 12706;
12708 -> 12706;
12709 -> 12707;
12709 -> 12708;
12710 -> 12709;
12710 -> 12708;
12711 -> 12705;
12711 -> 12704;
12712 -> 12705;
12712 -> 12704;
12713 -> 12703;
12713 -> 12702;
12714 -> 12703;
12714 -> 12702;
12715 -> 12703;
12715 -> 12702;
12716 -> 12701;
12716 -> 12699;
12717 -> 12699;
12718 -> 12700;
12718 -> 12717;
12718 -> 12699;
12719 -> 12700;
12719 -> 12701;
12719 -> 12699;
12720 -> 12698;
12720 -> 12659;
12720 -> 12654;
12721 -> 12659;
12721 -> 12654;
12722 -> 12721;
12722 -> 12666;
12722 -> 12667;
12722 -> 12693;
12722 -> 12694;
12722 -> 12695;
12722 -> 12720;
12722 -> 12672;
12722 -> 12673;
12722 -> 12674;
12722 -> 12679;
12722 -> 12684;
12722 -> 12696;
12722 -> 12686;
12722 -> 12687;
12722 -> 12688;
12722 -> 12678;
12722 -> 12683;
12722 -> 12613;
12722 -> 12614;
12722 -> 12616;
12722 -> 12617;
12722 -> 12618;
12722 -> 12619;
12722 -> 12620;
12722 -> 12621;
12722 -> 12622;
12722 -> 12623;
12722 -> 12624;
12722 -> 12632;
12722 -> 12633;
12722 -> 12627;
12722 -> 12615;
12722 -> 12640;
12722 -> 12710;
12722 -> 12711;
12722 -> 12712;
12722 -> 12713;
12722 -> 12714;
12722 -> 12715;
12722 -> 12719;
12722 -> 12654;
12723 -> 12722;
12723 -> 12659;
12723 -> 12654;
12724 -> 12644;
12725 -> 12648;
12725 -> 12724;
12725 -> 12644;
12726 -> 12643;
12726 -> 12635;
12726 -> 12634;
12726 -> 12636;
12727 -> 12634;
12727 -> 12595;
12728 -> 12727;
12728 -> 12634;
12728 -> 12726;
12728 -> 12722;
12728 -> 12723;
12728 -> 12595;
12729 -> 12728;
12729 -> 12600;
12729 -> 12595;
12730 -> 12598;
12730 -> 12600;
12730 -> 12595;
12731 -> 12594;
12731 -> 12573;
12732 -> 12731;
12732 -> 12572;
12732 -> 12573;
12733 -> 12570;
12733 -> 12573;
12734 -> 12569;
12734 -> 12733;
12734 -> 12573;
12735 -> 12545;
12735 -> 12570;
12735 -> 12728;
12735 -> 12729;
12735 -> 12730;
12735 -> 12571;
12736 -> 12571;
12737 -> 12735;
12737 -> 12736;
12738 -> 12571;
12739 -> 12572;
12739 -> 12568;
12739 -> 12732;
12739 -> 12738;
12740 -> 12739;
12740 -> 12735;
12740 -> 12738;
12741 -> 12737;
12741 -> 12740;
12741 -> 12571;
12742 -> 12735;
12743 -> 12742;
12743 -> 12735;
12744 -> 12735;
12745 -> 12735;
12746 -> 12735;
12747 -> 12735;
12748 -> 12735;
12749 -> 12735;
12750 -> 12735;
12751 -> 12735;
12752 -> 12735;
12753 -> 12735;
12754 -> 12735;
12755 -> 12735;
12756 -> 12735;
12757 -> 12735;
12758 -> 12735;
12759 -> 12571;
12759 -> 12735;
12760 -> 12569;
12760 -> 12734;
12760 -> 12759;
12760 -> 12735;
12761 -> 12735;
12762 -> 12735;
12763 -> 12735;
12763 -> 12758;
12763 -> 12762;
12764 -> 12763;
12764 -> 12735;
12764 -> 12762;
12765 -> 12761;
12765 -> 12764;
12765 -> 12735;
12766 -> 12761;
12766 -> 12735;
12767 -> 12761;
12767 -> 12735;
12768 -> 12761;
12769 -> 12761;
12770 -> 12761;
12771 -> 12761;
12772 -> 12761;
12773 -> 12761;
12774 -> 12761;
12775 -> 12761;
12776 -> 12761;
12777 -> 12761;
12777 -> 12757;
12777 -> 12735;
12778 -> 12761;
12778 -> 12735;
12779 -> 12735;
12780 -> 12735;
12780 -> 12778;
12780 -> 12762;
12781 -> 12780;
12781 -> 12761;
12781 -> 12762;
12782 -> 12761;
12783 -> 12782;
12783 -> 12761;
12784 -> 12761;
12785 -> 12761;
12786 -> 12761;
12787 -> 12761;
12788 -> 12761;
12789 -> 12761;
12790 -> 12735;
12790 -> 12761;
12791 -> 12569;
12791 -> 12734;
12791 -> 12760;
12791 -> 12790;
12791 -> 12761;
12792 -> 12761;
12793 -> 12761;
12793 -> 12789;
12793 -> 12792;
12794 -> 12793;
12794 -> 12761;
12794 -> 12792;
12795 -> 12761;
12796 -> 11679;
12796 -> 11678;
12797 -> 11680;
12797 -> 12761;
12797 -> 11678;
12798 -> 11679;
12798 -> 12761;
12798 -> 11678;
12799 -> 11678;
12801 -> 12465;
12801 -> 11678;
12802 -> 11678;
12803 -> 12796;
12803 -> 12802;
12804 -> 12797;
12804 -> 12802;
12805 -> 12798;
12805 -> 12802;
12806 -> 12801;
12806 -> 12802;
12807 -> 12799;
12807 -> 12802;
12808 -> 12802;
12809 -> 12807;
12809 -> 12808;
12810 -> 12808;
12811 -> 12809;
12811 -> 12810;
12812 -> 12810;
12813 -> 12811;
12813 -> 12812;
12814 -> 12812;
12815 -> 12813;
12815 -> 12814;
12816 -> 12815;
12816 -> 12814;
12817 -> 12813;
12817 -> 12812;
12818 -> 12810;
12819 -> 12818;
12819 -> 12811;
12819 -> 12810;
12820 -> 12811;
12820 -> 12810;
12821 -> 12809;
12821 -> 12808;
12822 -> 12809;
12822 -> 12808;
12823 -> 12809;
12823 -> 12808;
12824 -> 12809;
12824 -> 12808;
12825 -> 12809;
12825 -> 12808;
12826 -> 12809;
12826 -> 12808;
12827 -> 12809;
12827 -> 12808;
12828 -> 12807;
12828 -> 12802;
12829 -> 12807;
12829 -> 12802;
12830 -> 12807;
12830 -> 12802;
12831 -> 12807;
12831 -> 12802;
12832 -> 12807;
12832 -> 12802;
12833 -> 12807;
12833 -> 12802;
12834 -> 12807;
12834 -> 12802;
12835 -> 12807;
12835 -> 12802;
12836 -> 12807;
12836 -> 12802;
12837 -> 12802;
12838 -> 12837;
12838 -> 12807;
12838 -> 12802;
12839 -> 12802;
12840 -> 12839;
12840 -> 12807;
12840 -> 12802;
12841 -> 12802;
12842 -> 12841;
12842 -> 12807;
12842 -> 12802;
12843 -> 12807;
12843 -> 12802;
12844 -> 12807;
12844 -> 12802;
12845 -> 12802;
12846 -> 12803;
12846 -> 12845;
12846 -> 12802;
12847 -> 12802;
12848 -> 12804;
12848 -> 12847;
12848 -> 12802;
12849 -> 12805;
12849 -> 12802;
12850 -> 12806;
12850 -> 12465;
12850 -> 12802;
12851 -> 12803;
12851 -> 12807;
12851 -> 12802;
12852 -> 12804;
12852 -> 12807;
12852 -> 12802;
12853 -> 12802;
12854 -> 12853;
12854 -> 12806;
12854 -> 12465;
12854 -> 12802;
12855 -> 12807;
12855 -> 12802;
12856 -> 12802;
12857 -> 12803;
12857 -> 12856;
12858 -> 12856;
12859 -> 12857;
12859 -> 12798;
12859 -> 12858;
12860 -> 12859;
12860 -> 12802;
12861 -> 12805;
12861 -> 12802;
12862 -> 12802;
12863 -> 12802;
12864 -> 12855;
12864 -> 12863;
12865 -> 12860;
12865 -> 12863;
12866 -> 12861;
12866 -> 12863;
12867 -> 12862;
12867 -> 12863;
12868 -> 12863;
12869 -> 12867;
12869 -> 12868;
12870 -> 12868;
12871 -> 12869;
12871 -> 12870;
12872 -> 12870;
12873 -> 12871;
12873 -> 12872;
12874 -> 12873;
12874 -> 12872;
12875 -> 12869;
12875 -> 12868;
12876 -> 12867;
12876 -> 12863;
12877 -> 0;
12877 -> 12867;
12877 -> 12863;
12878 -> 12867;
12878 -> 12863;
12879 -> 12867;
12879 -> 12863;
12880 -> 12867;
12880 -> 12863;
12881 -> 12867;
12881 -> 12863;
12882 -> 12867;
12882 -> 12863;
12883 -> 12863;
12884 -> 12864;
12884 -> 12883;
12884 -> 12863;
12885 -> 12864;
12885 -> 12867;
12885 -> 12863;
12886 -> 12865;
12886 -> 12867;
12886 -> 12863;
12887 -> 12866;
12887 -> 12867;
12887 -> 12863;
12888 -> 12854;
12888 -> 12862;
12888 -> 12874;
12888 -> 12875;
12888 -> 12885;
12888 -> 12877;
12888 -> 12886;
12888 -> 12879;
12888 -> 12880;
12888 -> 12881;
12888 -> 12887;
12888 -> 12816;
12888 -> 12817;
12888 -> 12819;
12888 -> 12820;
12888 -> 12821;
12888 -> 12822;
12888 -> 12823;
12888 -> 12824;
12888 -> 12825;
12888 -> 12826;
12888 -> 12827;
12888 -> 12851;
12888 -> 12829;
12888 -> 12852;
12888 -> 12831;
12888 -> 12832;
12888 -> 12833;
12888 -> 12834;
12888 -> 12835;
12888 -> 12836;
12888 -> 12838;
12888 -> 12840;
12888 -> 12842;
12888 -> 12843;
12888 -> 12844;
12888 -> 12818;
12888 -> 12798;
12888 -> 12837;
12888 -> 12839;
12888 -> 12841;
12888 -> 12802;
12889 -> 12802;
12890 -> 12803;
12890 -> 12889;
12891 -> 12890;
12891 -> 12888;
12891 -> 12889;
12892 -> 12891;
12892 -> 12802;
12893 -> 12892;
12893 -> 12802;
12894 -> 12806;
12894 -> 12802;
12895 -> 12854;
12895 -> 12888;
12895 -> 12802;
12896 -> 12895;
12896 -> 12807;
12896 -> 12802;
12897 -> 12802;
12898 -> 12803;
12898 -> 12897;
12899 -> 12898;
12899 -> 12888;
12899 -> 12897;
12900 -> 12899;
12900 -> 12802;
12901 -> 12900;
12901 -> 12888;
12901 -> 12896;
12901 -> 12802;
12902 -> 11678;
12903 -> 11678;
12904 -> 12545;
12904 -> 12903;
12904 -> 11678;
12905 -> 12904;
12906 -> 12545;
12906 -> 12888;
12906 -> 12896;
12906 -> 12905;
12907 -> 12906;
12907 -> 11678;
12908 -> 11678;
12909 -> 12907;
12909 -> 12908;
12910 -> 12799;
12910 -> 12908;
12911 -> 12908;
12912 -> 12910;
12912 -> 12888;
12912 -> 12911;
12912 -> 12908;
12913 -> 12909;
12913 -> 12910;
12913 -> 12908;
12914 -> 11678;
12915 -> 11678;
12916 -> 11678;
12917 -> 12545;
12917 -> 12888;
12917 -> 12916;
12917 -> 11678;
12918 -> 11678;
12919 -> 12918;
12919 -> 11678;
12920 -> 12799;
12920 -> 11678;
12921 -> 12465;
12921 -> 11678;
12922 -> 12917;
12922 -> 11678;
12923 -> 12545;
12923 -> 11678;
12924 -> 12915;
12924 -> 11678;
12925 -> 12918;
12925 -> 11678;
12926 -> 11678;
12927 -> 12920;
12927 -> 12926;
12928 -> 12921;
12928 -> 12926;
12929 -> 12922;
12929 -> 12926;
12930 -> 12923;
12930 -> 12926;
12931 -> 12924;
12931 -> 12926;
12932 -> 12925;
12932 -> 12926;
12933 -> 12926;
12934 -> 12927;
12934 -> 12933;
12935 -> 12934;
12935 -> 12888;
12935 -> 12896;
12935 -> 12933;
12936 -> 12935;
12936 -> 12926;
12937 -> 12926;
12938 -> 12937;
12938 -> 12928;
12938 -> 12465;
12938 -> 12926;
12939 -> 12936;
12939 -> 12888;
12939 -> 12895;
12939 -> 12938;
12939 -> 12926;
12940 -> 12926;
12941 -> 12936;
12941 -> 12888;
12941 -> 12895;
12941 -> 12940;
12941 -> 12926;
12942 -> 12941;
12942 -> 12926;
12943 -> 12926;
12944 -> 12926;
12945 -> 12944;
12945 -> 12936;
12945 -> 12888;
12945 -> 12895;
12945 -> 12926;
12946 -> 12945;
12947 -> 12946;
12947 -> 12945;
12948 -> 12929;
12948 -> 12947;
12949 -> 12948;
12949 -> 12945;
12950 -> 12948;
12950 -> 12945;
12951 -> 12945;
12952 -> 12945;
12953 -> 12952;
12953 -> 12948;
12953 -> 12945;
12954 -> 12953;
12955 -> 12930;
12955 -> 12888;
12955 -> 12896;
12955 -> 12913;
12955 -> 12954;
12955 -> 12953;
12956 -> 12953;
12957 -> 12930;
12957 -> 12888;
12957 -> 12896;
12957 -> 12913;
12957 -> 12956;
12957 -> 12953;
12958 -> 12943;
12958 -> 12952;
12958 -> 12953;
12959 -> 12957;
12959 -> 12888;
12959 -> 12896;
12959 -> 12913;
12959 -> 12895;
12959 -> 12958;
12959 -> 12953;
12960 -> 12959;
12960 -> 12888;
12960 -> 12895;
12960 -> 12953;
12961 -> 12959;
12961 -> 12888;
12961 -> 12895;
12961 -> 12953;
12962 -> 12930;
12962 -> 12961;
12963 -> 12959;
12963 -> 12961;
12964 -> 12951;
12964 -> 12961;
12965 -> 12961;
12966 -> 12962;
12966 -> 12965;
12967 -> 12963;
12967 -> 12965;
12968 -> 12964;
12968 -> 12965;
12969 -> 12967;
12969 -> 12888;
12969 -> 12895;
12969 -> 12965;
12970 -> 12967;
12970 -> 12888;
12970 -> 12895;
12970 -> 12965;
12971 -> 12966;
12971 -> 12888;
12971 -> 12896;
12971 -> 12913;
12971 -> 12967;
12971 -> 12895;
12971 -> 12965;
12972 -> 12971;
12972 -> 12965;
12973 -> 12965;
12974 -> 12967;
12974 -> 12888;
12974 -> 12895;
12974 -> 12973;
12974 -> 12965;
12975 -> 12971;
12975 -> 12965;
12976 -> 12975;
12976 -> 12952;
12976 -> 12950;
12976 -> 12961;
12977 -> 12959;
12977 -> 12888;
12977 -> 12895;
12977 -> 12952;
12977 -> 12949;
12977 -> 12953;
12978 -> 12943;
12978 -> 12953;
12979 -> 12957;
12979 -> 12888;
12979 -> 12896;
12979 -> 12913;
12979 -> 12895;
12979 -> 12978;
12979 -> 12953;
12980 -> 12979;
12980 -> 12888;
12980 -> 12895;
12980 -> 12953;
12981 -> 12979;
12981 -> 12888;
12981 -> 12895;
12981 -> 12953;
12982 -> 12930;
12982 -> 12981;
12983 -> 12979;
12983 -> 12981;
12984 -> 12981;
12985 -> 12982;
12985 -> 12984;
12986 -> 12983;
12986 -> 12984;
12987 -> 12986;
12987 -> 12888;
12987 -> 12895;
12987 -> 12984;
12988 -> 12986;
12988 -> 12888;
12988 -> 12895;
12988 -> 12984;
12989 -> 12985;
12989 -> 12888;
12989 -> 12896;
12989 -> 12913;
12989 -> 12986;
12989 -> 12895;
12989 -> 12984;
12990 -> 12989;
12990 -> 12984;
12991 -> 12984;
12992 -> 12986;
12992 -> 12888;
12992 -> 12895;
12992 -> 12991;
12992 -> 12984;
12993 -> 12989;
12993 -> 12984;
12994 -> 12993;
12994 -> 12953;
12994 -> 12950;
12994 -> 12981;
12995 -> 12979;
12995 -> 12888;
12995 -> 12895;
12995 -> 12953;
12995 -> 12949;
12996 -> 12949;
12996 -> 12945;
12997 -> 12996;
12997 -> 12949;
12997 -> 12977;
12997 -> 12995;
12997 -> 12888;
12997 -> 12896;
12997 -> 12913;
12997 -> 12895;
12997 -> 12945;
12998 -> 12950;
12998 -> 12945;
12999 -> 12998;
12999 -> 12950;
12999 -> 12976;
12999 -> 12994;
12999 -> 12997;
12999 -> 12945;
13000 -> 12968;
13000 -> 12945;
13001 -> 12997;
13001 -> 12999;
13001 -> 13000;
13001 -> 12945;
13002 -> 12945;
13003 -> 12936;
13003 -> 12944;
13003 -> 12888;
13003 -> 12896;
13003 -> 12913;
13003 -> 12895;
13003 -> 13001;
13003 -> 12945;
13004 -> 13001;
13004 -> 12945;
13005 -> 12927;
13005 -> 12945;
13006 -> 12945;
13007 -> 13004;
13007 -> 13006;
13008 -> 13005;
13008 -> 13006;
13009 -> 13003;
13009 -> 13006;
13010 -> 13006;
13011 -> 13007;
13011 -> 13010;
13011 -> 13006;
13012 -> 13006;
13013 -> 13009;
13013 -> 13012;
13014 -> 13012;
13015 -> 13013;
13015 -> 13003;
13015 -> 13014;
13015 -> 13012;
13016 -> 13006;
13017 -> 13007;
13017 -> 13009;
13017 -> 13006;
13018 -> 12945;
13019 -> 12943;
13019 -> 12948;
13019 -> 12945;
13020 -> 12942;
13020 -> 12926;
13021 -> 11678;
13022 -> 11678;
13023 -> 12569;
13023 -> 12734;
13023 -> 12760;
13023 -> 12791;
13023 -> 13022;
13023 -> 11678;
13024 -> 12545;
13024 -> 13023;
13025 -> 12569;
13025 -> 13023;
13026 -> 12799;
13026 -> 13023;
13027 -> 12545;
13027 -> 13023;
13028 -> 12931;
13028 -> 13023;
13029 -> 13023;
13030 -> 13025;
13030 -> 13029;
13031 -> 13026;
13031 -> 13029;
13032 -> 13027;
13032 -> 13029;
13033 -> 13027;
13033 -> 13029;
13034 -> 13028;
13034 -> 13029;
13035 -> 13029;
13036 -> 13030;
13036 -> 12569;
13036 -> 12734;
13036 -> 12760;
13036 -> 12791;
13036 -> 13035;
13036 -> 13029;
13037 -> 13029;
13038 -> 13031;
13038 -> 13037;
13039 -> 13038;
13039 -> 13003;
13039 -> 13037;
13040 -> 13039;
13040 -> 13029;
13041 -> 13029;
13042 -> 13040;
13042 -> 13041;
13042 -> 13029;
13043 -> 13030;
13043 -> 13029;
13044 -> 13032;
13044 -> 13043;
13044 -> 13003;
13044 -> 13017;
13045 -> 13043;
13046 -> 13044;
13046 -> 13045;
13046 -> 13043;
13047 -> 13032;
13047 -> 13043;
13047 -> 13044;
13047 -> 13046;
13048 -> 13047;
13048 -> 13046;
13049 -> 13033;
13049 -> 13046;
13050 -> 13033;
13050 -> 13047;
13050 -> 13043;
13050 -> 13046;
13051 -> 13034;
13051 -> 13046;
13052 -> 13031;
13052 -> 13046;
13053 -> 13046;
13054 -> 13048;
13054 -> 13053;
13055 -> 13049;
13055 -> 13053;
13056 -> 13050;
13056 -> 13053;
13057 -> 13051;
13057 -> 13053;
13058 -> 13052;
13058 -> 13053;
13059 -> 13056;
13059 -> 13047;
13059 -> 13053;
13060 -> 13056;
13060 -> 13047;
13060 -> 13053;
13061 -> 13056;
13061 -> 13047;
13061 -> 13053;
13062 -> 13053;
13063 -> 13061;
13063 -> 13062;
13064 -> 13063;
13064 -> 13047;
13064 -> 13062;
13065 -> 13064;
13065 -> 13053;
13066 -> 13065;
13066 -> 13047;
13066 -> 13053;
13067 -> 13053;
13068 -> 13053;
13069 -> 13068;
13069 -> 13066;
13069 -> 13053;
13070 -> 13054;
13070 -> 13047;
13070 -> 13068;
13070 -> 13069;
13071 -> 13070;
13071 -> 13069;
13072 -> 13070;
13072 -> 13069;
13073 -> 13069;
13074 -> 13054;
13074 -> 13073;
13075 -> 13074;
13075 -> 13070;
13075 -> 13073;
13076 -> 13075;
13076 -> 13069;
13077 -> 13067;
13077 -> 13069;
13078 -> 13071;
13078 -> 13069;
13079 -> 13069;
13080 -> 13070;
13080 -> 13069;
13081 -> 13076;
13081 -> 13077;
13081 -> 13078;
13081 -> 13079;
13081 -> 13080;
13081 -> 13070;
13081 -> 13071;
13081 -> 13069;
13082 -> 13069;
13083 -> 13069;
13084 -> 13083;
13084 -> 13070;
13084 -> 13069;
13085 -> 13071;
13085 -> 13069;
13086 -> 13085;
13086 -> 13081;
13086 -> 13069;
13087 -> 13072;
13087 -> 13069;
13088 -> 13082;
13088 -> 13069;
13089 -> 13086;
13089 -> 13087;
13089 -> 13088;
13089 -> 13069;
13090 -> 13065;
13090 -> 13068;
13090 -> 13047;
13090 -> 13089;
13090 -> 13069;
13091 -> 13089;
13091 -> 13069;
13092 -> 13058;
13092 -> 13069;
13093 -> 13069;
13094 -> 13091;
13094 -> 13093;
13095 -> 13092;
13095 -> 13093;
13096 -> 13090;
13096 -> 13093;
13097 -> 13093;
13098 -> 13094;
13098 -> 13097;
13098 -> 13093;
13099 -> 13093;
13100 -> 13096;
13100 -> 13099;
13101 -> 13099;
13102 -> 13100;
13102 -> 13090;
13102 -> 13101;
13102 -> 13099;
13103 -> 13093;
13104 -> 13069;
13105 -> 13067;
13105 -> 13070;
13105 -> 13069;
13106 -> 13046;
13107 -> 13057;
13107 -> 13094;
13108 -> 13031;
13108 -> 13094;
13109 -> 13094;
13110 -> 13108;
13110 -> 13094;
13111 -> 13094;
13112 -> 13094;
13113 -> 13094;
13114 -> 13094;
13114 -> 13113;
13115 -> 13114;
13115 -> 13094;
13115 -> 13113;
13116 -> 13109;
13116 -> 13115;
13117 -> 13114;
13117 -> 13115;
13118 -> 13094;
13118 -> 13115;
13119 -> 13115;
13120 -> 13116;
13120 -> 13119;
13121 -> 13117;
13121 -> 13119;
13122 -> 13118;
13122 -> 13119;
13123 -> 13121;
13123 -> 13094;
13123 -> 13119;
13124 -> 13121;
13124 -> 13094;
13124 -> 13119;
13125 -> 13120;
13125 -> 13119;
13126 -> 13119;
13127 -> 13121;
13127 -> 13094;
13127 -> 13126;
13127 -> 13119;
13128 -> 13120;
13128 -> 13113;
13128 -> 13094;
13128 -> 13115;
13129 -> 13094;
13129 -> 13113;
13129 -> 13115;
13130 -> 13107;
13130 -> 13115;
13131 -> 13115;
13132 -> 13129;
13132 -> 13131;
13133 -> 13130;
13133 -> 13131;
13134 -> 13131;
13135 -> 13131;
13136 -> 13133;
13136 -> 13135;
13136 -> 13131;
13137 -> 13136;
13138 -> 13132;
13138 -> 13131;
13139 -> 13131;
13140 -> 13131;
13141 -> 13138;
13141 -> 13140;
13142 -> 13139;
13142 -> 13140;
13143 -> 13140;
13144 -> 13142;
13144 -> 13140;
13145 -> 13142;
13145 -> 13140;
13146 -> 13140;
13147 -> 13141;
13147 -> 13146;
13147 -> 13140;
13148 -> 13141;
13148 -> 13142;
13148 -> 13140;
13149 -> 13142;
13149 -> 13140;
13150 -> 13140;
13151 -> 13140;
13152 -> 13149;
13152 -> 13151;
13153 -> 13150;
13153 -> 13151;
13154 -> 13150;
13154 -> 13151;
13155 -> 13151;
13156 -> 13154;
13156 -> 13151;
13157 -> 13154;
13157 -> 13151;
13158 -> 13154;
13158 -> 13151;
13159 -> 13151;
13160 -> 13152;
13160 -> 13159;
13160 -> 13151;
13161 -> 13151;
13162 -> 13153;
13162 -> 13161;
13162 -> 13151;
13163 -> 13152;
13163 -> 13154;
13163 -> 13151;
13164 -> 13153;
13164 -> 13154;
13164 -> 13151;
13165 -> 13154;
13165 -> 13151;
13166 -> 13151;
13167 -> 13151;
13168 -> 13165;
13168 -> 13167;
13169 -> 13166;
13169 -> 13167;
13170 -> 13167;
13171 -> 13169;
13171 -> 13167;
13172 -> 13169;
13172 -> 13167;
13173 -> 13167;
13174 -> 13168;
13174 -> 13173;
13174 -> 13167;
13175 -> 13168;
13175 -> 13169;
13175 -> 13167;
13176 -> 11726;
13176 -> 13169;
13176 -> 13167;
13177 -> 13166;
13177 -> 13154;
13177 -> 13151;
13178 -> 13150;
13178 -> 13142;
13178 -> 13140;
13179 -> 13132;
13179 -> 13131;
13180 -> 13139;
13180 -> 13131;
13181 -> 13137;
13181 -> 13179;
13181 -> 13180;
13181 -> 13131;
13182 -> 13139;
13182 -> 13131;
13183 -> 13182;
13183 -> 13115;
13184 -> 13183;
13184 -> 13113;
13184 -> 13094;
13184 -> 13115;
13185 -> 13132;
13185 -> 13137;
13186 -> 13134;
13186 -> 13137;
13187 -> 13137;
13187 -> 13185;
13187 -> 13186;
13187 -> 13094;
13187 -> 13181;
13187 -> 13142;
13187 -> 13148;
13187 -> 13178;
13187 -> 13154;
13187 -> 13163;
13187 -> 13164;
13187 -> 13177;
13187 -> 13169;
13187 -> 13176;
13187 -> 13175;
13188 -> 13094;
13188 -> 13128;
13188 -> 13184;
13188 -> 13187;
13189 -> 13110;
13189 -> 13094;
13190 -> 13094;
13191 -> 13188;
13191 -> 13190;
13191 -> 13094;
13192 -> 13094;
13193 -> 13188;
13193 -> 13192;
13194 -> 13192;
13195 -> 13193;
13195 -> 13188;
13195 -> 13194;
13195 -> 13192;
13196 -> 13094;
13197 -> 13094;
13198 -> 13031;
13198 -> 13188;
13199 -> 13198;
13199 -> 13188;
13200 -> 13188;
13201 -> 13188;
13202 -> 13188;
13203 -> 13188;
13204 -> 13188;
13205 -> 13188;
13206 -> 13188;
13207 -> 13206;
13207 -> 13188;
13208 -> 13206;
13208 -> 13188;
13209 -> 13188;
13210 -> 13206;
13210 -> 13209;
13210 -> 13188;
13211 -> 13206;
13211 -> 13188;
13212 -> 13206;
13212 -> 13188;
13213 -> 13206;
13213 -> 13188;
13214 -> 13188;
13215 -> 13206;
13215 -> 13214;
13215 -> 13188;
13216 -> 13188;
13217 -> 13206;
13217 -> 13216;
13217 -> 13188;
13218 -> 13206;
13218 -> 13188;
13219 -> 13206;
13219 -> 13188;
13220 -> 13188;
13221 -> 13206;
13221 -> 13220;
13221 -> 13188;
13222 -> 13206;
13223 -> 13206;
13224 -> 13206;
13225 -> 13206;
13226 -> 13206;
13227 -> 13206;
13228 -> 13206;
13229 -> 13206;
13230 -> 13206;
13231 -> 13206;
13232 -> 13206;
13233 -> 13199;
13233 -> 13188;
13234 -> 13188;
13235 -> 13206;
13235 -> 13234;
13235 -> 13188;
13236 -> 13188;
13237 -> 13206;
13237 -> 13236;
13238 -> 13236;
13239 -> 13237;
13239 -> 13206;
13239 -> 13238;
13239 -> 13236;
13240 -> 13188;
13241 -> 13188;
13242 -> 13031;
13242 -> 13206;
13243 -> 13242;
13243 -> 13206;
13244 -> 13206;
13245 -> 13206;
13246 -> 13206;
13247 -> 13206;
13248 -> 13206;
13249 -> 13206;
13250 -> 13249;
13251 -> 13250;
13252 -> 13206;
13252 -> 13249;
13253 -> 13251;
13253 -> 13252;
13253 -> 13249;
13254 -> 13253;
13255 -> 13253;
13256 -> 13253;
13257 -> 13253;
13258 -> 13253;
13259 -> 13253;
13260 -> 13253;
13261 -> 13253;
13262 -> 13253;
13263 -> 13253;
13264 -> 13253;
13265 -> 13243;
13265 -> 13206;
13266 -> 13206;
13267 -> 13253;
13267 -> 13266;
13267 -> 13206;
13268 -> 13206;
13269 -> 13253;
13269 -> 13268;
13270 -> 13268;
13271 -> 13269;
13271 -> 13253;
13271 -> 13270;
13271 -> 13268;
13272 -> 13206;
13273 -> 13206;
13274 -> 13031;
13274 -> 13253;
13275 -> 13274;
13275 -> 13253;
13276 -> 13253;
13277 -> 13253;
13278 -> 13253;
13279 -> 13253;
13280 -> 13253;
13281 -> 13275;
13281 -> 13253;
13282 -> 13253;
13283 -> 13253;
13284 -> 13253;
13284 -> 13283;
13285 -> 13283;
13286 -> 13284;
13286 -> 13253;
13286 -> 13285;
13286 -> 13283;
13287 -> 13253;
13288 -> 13253;
13289 -> 13029;
13290 -> 13029;
13291 -> 13031;
13291 -> 13290;
13292 -> 13291;
13292 -> 13253;
13292 -> 13290;
13293 -> 13292;
13293 -> 13029;
13294 -> 13029;
13295 -> 13029;
13296 -> 13293;
13296 -> 13295;
13297 -> 13295;
13298 -> 13296;
13298 -> 13297;
13299 -> 13297;
13300 -> 13298;
13300 -> 13293;
13300 -> 13299;
13300 -> 13297;
13301 -> 13295;
13302 -> 13296;
13302 -> 13293;
13302 -> 13295;
13303 -> 13030;
13303 -> 13029;
13304 -> 13033;
13304 -> 13293;
13304 -> 13303;
13305 -> 13304;
13305 -> 13293;
13305 -> 13303;
13306 -> 13304;
13306 -> 13293;
13306 -> 13303;
13307 -> 13032;
13307 -> 13303;
13307 -> 13293;
13308 -> 13303;
13309 -> 13307;
13309 -> 13308;
13310 -> 13289;
13310 -> 13303;
13311 -> 13032;
13311 -> 13303;
13311 -> 13309;
13312 -> 13303;
13313 -> 13311;
13313 -> 13312;
13314 -> 13304;
13314 -> 13293;
13314 -> 13303;
13315 -> 13314;
13315 -> 13311;
13315 -> 13303;
13316 -> 13303;
13317 -> 13289;
13317 -> 13310;
13317 -> 13316;
13317 -> 13303;
13318 -> 13040;
13318 -> 13303;
13319 -> 13303;
13320 -> 13318;
13320 -> 13319;
13321 -> 13304;
13321 -> 13293;
13321 -> 13319;
13322 -> 13319;
13323 -> 13321;
13323 -> 13311;
13323 -> 13322;
13323 -> 13319;
13324 -> 13320;
13324 -> 13321;
13324 -> 13319;
13325 -> 13303;
13326 -> 13033;
13326 -> 13311;
13326 -> 13324;
13326 -> 13303;
13327 -> 13326;
13327 -> 13311;
13327 -> 13303;
13328 -> 13326;
13328 -> 13311;
13328 -> 13303;
13329 -> 13032;
13329 -> 13303;
13329 -> 13311;
13329 -> 13324;
13330 -> 13329;
13330 -> 13312;
13331 -> 13326;
13331 -> 13311;
13331 -> 13303;
13332 -> 13032;
13332 -> 13331;
13332 -> 13329;
13333 -> 13331;
13334 -> 13332;
13334 -> 13333;
13335 -> 13326;
13335 -> 13332;
13335 -> 13322;
13335 -> 13319;
13336 -> 13332;
13336 -> 13303;
13337 -> 13332;
13337 -> 13303;
13338 -> 13332;
13338 -> 13312;
13339 -> 13332;
13340 -> 13332;
13340 -> 13322;
13340 -> 13319;
13341 -> 13289;
13341 -> 13310;
13341 -> 13029;
13342 -> 13029;
13343 -> 13253;
13343 -> 13342;
13343 -> 13029;
13344 -> 13253;
13344 -> 13332;
13344 -> 13343;
13345 -> 13040;
13345 -> 13344;
13346 -> 13344;
13347 -> 13345;
13347 -> 13346;
13348 -> 13346;
13349 -> 13344;
13350 -> 13347;
13351 -> 13023;
13352 -> 11679;
13352 -> 13332;
13352 -> 11678;
13353 -> 11679;
13353 -> 13332;
13353 -> 13352;
13354 -> 11680;
13354 -> 13332;
13354 -> 13353;
13355 -> 12569;
13355 -> 13353;
13356 -> 12545;
13356 -> 13353;
13357 -> 13353;
13358 -> 13355;
13358 -> 13357;
13359 -> 13356;
13359 -> 13357;
13360 -> 13356;
13360 -> 13357;
13361 -> 13358;
13361 -> 13357;
13362 -> 13360;
13362 -> 13332;
13362 -> 13347;
13362 -> 13361;
13363 -> 13362;
13363 -> 13332;
13363 -> 13361;
13364 -> 13359;
13364 -> 13361;
13364 -> 13332;
13364 -> 13347;
13365 -> 13361;
13366 -> 13364;
13366 -> 13365;
13366 -> 13361;
13367 -> 13359;
13367 -> 13361;
13367 -> 13364;
13367 -> 13366;
13368 -> 13362;
13368 -> 13332;
13368 -> 13366;
13369 -> 13367;
13369 -> 13368;
13369 -> 13366;
13370 -> 13369;
13370 -> 13361;
13371 -> 13353;
13372 -> 12568;
13372 -> 13353;
13373 -> 12465;
13373 -> 13353;
13374 -> 12545;
13374 -> 13353;
13375 -> 11681;
13375 -> 13369;
13375 -> 13353;
13376 -> 12906;
13376 -> 13353;
13377 -> 12799;
13377 -> 13353;
13378 -> 13376;
13378 -> 13353;
13379 -> 13020;
13379 -> 13353;
13380 -> 13353;
13381 -> 12799;
13381 -> 13380;
13382 -> 13380;
13383 -> 13381;
13383 -> 13382;
13384 -> 13383;
13384 -> 13375;
13384 -> 13382;
13385 -> 13384;
13385 -> 13380;
13386 -> 13380;
13387 -> 13353;
13388 -> 13385;
13388 -> 13387;
13389 -> 13387;
13390 -> 13388;
13390 -> 13389;
13391 -> 13389;
13392 -> 13390;
13392 -> 13385;
13392 -> 13391;
13392 -> 13389;
13393 -> 13387;
13394 -> 13388;
13394 -> 13385;
13394 -> 13387;
13395 -> 13353;
13396 -> 12799;
13396 -> 13395;
13397 -> 13395;
13398 -> 13396;
13398 -> 13397;
13399 -> 13398;
13399 -> 13385;
13399 -> 13397;
13400 -> 13395;
13401 -> 13353;
13402 -> 13399;
13402 -> 13401;
13403 -> 13401;
13404 -> 13402;
13404 -> 13403;
13405 -> 13403;
13406 -> 13404;
13406 -> 13399;
13406 -> 13405;
13406 -> 13403;
13407 -> 13401;
13408 -> 13402;
13408 -> 13399;
13408 -> 13401;
13409 -> 11680;
13409 -> 13372;
13409 -> 13373;
13409 -> 13374;
13409 -> 13375;
13409 -> 13378;
13409 -> 13379;
13409 -> 13394;
13409 -> 13408;
13409 -> 13399;
13409 -> 13385;
13409 -> 12465;
13409 -> 13369;
13409 -> 13020;
13409 -> 12568;
13409 -> 13353;
13410 -> 11679;
13410 -> 13409;
13410 -> 13353;
13411 -> 11680;
13411 -> 13353;
13412 -> 11680;
13412 -> 11679;
13412 -> 13353;
13413 -> 12799;
13413 -> 11679;
13413 -> 13353;
13414 -> 11678;
13415 -> 11681;
13415 -> 13409;
13415 -> 13412;
13415 -> 13413;
13415 -> 11678;
13416 -> 11682;
13416 -> 13415;
13416 -> 11678;
13417 -> 13414;
13417 -> 11674;
13418 -> 11676;
13418 -> 13416;
13418 -> 13417;
13418 -> 11674;
13419 -> 11676;
13419 -> 13416;
13419 -> 11674;
13420 -> 11675;
13420 -> 13419;
13420 -> 11674;
13421 -> 11672;
13422 -> 11671;
13422 -> 13419;
13422 -> 11672;
13423 -> 11671;
13423 -> 13419;
13423 -> 11670;
13424 -> 13423;
13424 -> 11668;
13425 -> 11669;
13425 -> 13419;
13425 -> 11668;
13426 -> 11669;
13426 -> 13425;
13426 -> 11668;
13427 -> 13426;
13427 -> 11666;
13428 -> 13427;
13428 -> 11663;
13429 -> 11663;
13430 -> 13428;
13430 -> 13429;
13431 -> 11664;
13431 -> 13430;
13431 -> 11661;
13431 -> 13425;
13431 -> 11663;
13432 -> 11663;
13433 -> 11665;
13433 -> 13432;
13434 -> 13433;
13434 -> 13431;
13434 -> 13432;
13435 -> 13433;
13435 -> 13431;
13435 -> 13432;
13436 -> 13435;
13436 -> 11663;
13437 -> 11663;
13438 -> 13437;
13438 -> 13436;
13438 -> 13431;
13438 -> 11663;
13439 -> 13437;
13439 -> 13438;
13440 -> 13436;
13440 -> 13439;
13440 -> 13437;
13441 -> 13439;
13442 -> 13440;
13442 -> 13441;
13443 -> 11660;
13444 -> 11659;
13444 -> 11660;
13445 -> 11660;
13446 -> 11660;
13447 -> 13444;
13447 -> 13446;
13448 -> 13445;
13448 -> 13446;
13449 -> 0;
13449 -> 13448;
13449 -> 13446;
13450 -> 13447;
13450 -> 13448;
13450 -> 13446;
13451 -> 13445;
13451 -> 11661;
13451 -> 13442;
13451 -> 11660;
13452 -> 13451;
13452 -> 13445;
13453 -> 13445;
13454 -> 13452;
13454 -> 13451;
13454 -> 13453;
13454 -> 13445;
13455 -> 13454;
13456 -> 13452;
13456 -> 13454;
13457 -> 13454;
13458 -> 13452;
13458 -> 13457;
13459 -> 13457;
13460 -> 13458;
13460 -> 13451;
13460 -> 13459;
13461 -> 13460;
13461 -> 13451;
13461 -> 13459;
13462 -> 13461;
13462 -> 13457;
13463 -> 13462;
13463 -> 13454;
13464 -> 13454;
13465 -> 13463;
13465 -> 13464;
13466 -> 13464;
13467 -> 13465;
13467 -> 13466;
13468 -> 13467;
13468 -> 13464;
13469 -> 13465;
13469 -> 13464;
13470 -> 13464;
13471 -> 13469;
13471 -> 13470;
13472 -> 13468;
13472 -> 13470;
13473 -> 13470;
13474 -> 13471;
13474 -> 13473;
13475 -> 13474;
13475 -> 13470;
13476 -> 13475;
13476 -> 13472;
13476 -> 13470;
13477 -> 13470;
13478 -> 13472;
13478 -> 13451;
13478 -> 13477;
13478 -> 13470;
13479 -> 13472;
13479 -> 13451;
13479 -> 13478;
13480 -> 13471;
13480 -> 13478;
13481 -> 13478;
13482 -> 13480;
13482 -> 13481;
13483 -> 13472;
13483 -> 13481;
13484 -> 13483;
13484 -> 13451;
13484 -> 13481;
13485 -> 13481;
13486 -> 13483;
13486 -> 13451;
13486 -> 13485;
13486 -> 13481;
13487 -> 13486;
13488 -> 13484;
13488 -> 13487;
13488 -> 13486;
13489 -> 13488;
13490 -> 13489;
13490 -> 13488;
13491 -> 13488;
13492 -> 13490;
13492 -> 13451;
13492 -> 13491;
13492 -> 13488;
13493 -> 13490;
13493 -> 13488;
13494 -> 13492;
13494 -> 13493;
13494 -> 13451;
13494 -> 13488;
13495 -> 13483;
13495 -> 13494;
13495 -> 13488;
13496 -> 13488;
13497 -> 13482;
13497 -> 13496;
13497 -> 13488;
13498 -> 13482;
13498 -> 13497;
13499 -> 13497;
13500 -> 13497;
13501 -> 13498;
13501 -> 13500;
13502 -> 13499;
13502 -> 13500;
13503 -> 13502;
13503 -> 13500;
13504 -> 13501;
13504 -> 13502;
13504 -> 13500;
13505 -> 13492;
13505 -> 13499;
13505 -> 13495;
13505 -> 13504;
13505 -> 13497;
13506 -> 13492;
13506 -> 13505;
13506 -> 13488;
13507 -> 13488;
13508 -> 13506;
13508 -> 13507;
13509 -> 13508;
13510 -> 13508;
13510 -> 13509;
13510 -> 13506;
13510 -> 13505;
13511 -> 13508;
13512 -> 13510;
13512 -> 13511;
13513 -> 13512;
13513 -> 13510;
13513 -> 13511;
13514 -> 13507;
13515 -> 13507;
13515 -> 13488;
13516 -> 13515;
13516 -> 13478;
13517 -> 13478;
13518 -> 13472;
13518 -> 13513;
13518 -> 13470;
13520 -> 13519;
13522 -> 13521;
13523 -> 13455;
13523 -> 13454;
13524 -> 13454;
13525 -> 13454;
13526 -> 13456;
13526 -> 13525;
13527 -> 13456;
13527 -> 13525;
13528 -> 13518;
13528 -> 13525;
13529 -> 13523;
13529 -> 13525;
13530 -> 13524;
13530 -> 13525;
13531 -> 13525;
13532 -> 13530;
13532 -> 13525;
13533 -> 13530;
13533 -> 13525;
13534 -> 13530;
13534 -> 13525;
13535 -> 13530;
13535 -> 13525;
13536 -> 13530;
13536 -> 13525;
13537 -> 13530;
13537 -> 13525;
13540 -> 13539;
13540 -> 13538;
13542 -> 13541;
13542 -> 13538;
13543 -> 13538;
13546 -> 13545;
13546 -> 13544;
13548 -> 13547;
13548 -> 13544;
13549 -> 13544;
13551 -> 0;
13551 -> 13550;
13553 -> 0;
13553 -> 13552;
13554 -> 13553;
13554 -> 13550;
13555 -> 13550;
13557 -> 0;
13557 -> 13556;
13558 -> 0;
13558 -> 13556;
13559 -> 13556;
13560 -> 13549;
13560 -> 13530;
13560 -> 13525;
13561 -> 13525;
13562 -> 13528;
13562 -> 13561;
13562 -> 13525;
13563 -> 13526;
13563 -> 13530;
13563 -> 13525;
13564 -> 13527;
13564 -> 13530;
13564 -> 13525;
13565 -> 13528;
13565 -> 13530;
13565 -> 13525;
13566 -> 13525;
13567 -> 13528;
13567 -> 13566;
13568 -> 13567;
13568 -> 13525;
13569 -> 13568;
13569 -> 13513;
13570 -> 13529;
13570 -> 13569;
13570 -> 13455;
13570 -> 13513;
13570 -> 13568;
13571 -> 13455;
13571 -> 13570;
13571 -> 13454;
13572 -> 13455;
13572 -> 13570;
13572 -> 13454;
13573 -> 13452;
13573 -> 13572;
13573 -> 13454;
13574 -> 13524;
13574 -> 13454;
13575 -> 13454;
13576 -> 13573;
13576 -> 13574;
13576 -> 13575;
13576 -> 13530;
13576 -> 13563;
13576 -> 13564;
13576 -> 13565;
13576 -> 13535;
13576 -> 13536;
13576 -> 13537;
13576 -> 13560;
13576 -> 13572;
13576 -> 13546;
13576 -> 13548;
13576 -> 13544;
13576 -> 13454;
13577 -> 13452;
13577 -> 13576;
13577 -> 13445;
13578 -> 13451;
13578 -> 13445;
13579 -> 13578;
13579 -> 13445;
13580 -> 13579;
13580 -> 13577;
13580 -> 13445;
13581 -> 13451;
13581 -> 13445;
13582 -> 13581;
13582 -> 13580;
13582 -> 13445;
13583 -> 11660;
13584 -> 13445;
13584 -> 13583;
13585 -> 13445;
13585 -> 13583;
13586 -> 13582;
13586 -> 13583;
13587 -> 13445;
13587 -> 13583;
13588 -> 13583;
13589 -> 13586;
13589 -> 13582;
13589 -> 13588;
13589 -> 13583;
13590 -> 13583;
13591 -> 13586;
13591 -> 13582;
13591 -> 13590;
13591 -> 13583;
13592 -> 13591;
13592 -> 13583;
13593 -> 13584;
13593 -> 13592;
13594 -> 13585;
13594 -> 13592;
13595 -> 13587;
13595 -> 13592;
13596 -> 13592;
13597 -> 13593;
13597 -> 13596;
13598 -> 13594;
13598 -> 13596;
13599 -> 13592;
13599 -> 13596;
13600 -> 13595;
13600 -> 13596;
13601 -> 13592;
13601 -> 13596;
13602 -> 13596;
13603 -> 13601;
13603 -> 13596;
13604 -> 13601;
13604 -> 13596;
13605 -> 13601;
13605 -> 13596;
13606 -> 13597;
13606 -> 13601;
13606 -> 13596;
13607 -> 13599;
13607 -> 13601;
13607 -> 13596;
13608 -> 13598;
13608 -> 13601;
13608 -> 13596;
13609 -> 13601;
13609 -> 13596;
13610 -> 0;
13610 -> 13596;
13611 -> 13609;
13611 -> 13601;
13611 -> 13596;
13612 -> 13600;
13612 -> 13601;
13612 -> 13596;
13613 -> 13599;
13613 -> 13596;
13614 -> 13613;
13615 -> 13613;
13615 -> 13614;
13616 -> 13615;
13616 -> 13614;
13617 -> 13616;
13617 -> 13613;
13618 -> 13613;
13619 -> 11661;
13619 -> 13582;
13619 -> 11660;
13620 -> 11659;
13620 -> 13619;
13620 -> 11660;
13621 -> 13592;
13621 -> 11660;
13622 -> 11660;
13623 -> 13620;
13623 -> 13621;
13623 -> 13622;
13623 -> 13601;
13623 -> 13608;
13623 -> 13612;
13623 -> 13611;
13623 -> 13606;
13623 -> 13607;
13623 -> 13619;
13623 -> 13449;
13623 -> 13450;
13623 -> 13582;
13623 -> 13609;
13623 -> 11660;
13624 -> 11659;
13624 -> 13623;
13624 -> 11658;
13625 -> 13624;
13625 -> 1;
13626 -> 1;
13627 -> 1;
13628 -> 13626;
13628 -> 13627;
13629 -> 13625;
13629 -> 13627;
13630 -> 13629;
13630 -> 13623;
13630 -> 13628;
13630 -> 13627;
13631 -> 13627;
13632 -> 13630;
13632 -> 13631;
13633 -> 13630;
13633 -> 13631;
13634 -> 13631;
13635 -> 13631;
13636 -> 13633;
13636 -> 13630;
13636 -> 13631;
13637 -> 13632;
13637 -> 13636;
13638 -> 13636;
13639 -> 13637;
13639 -> 13638;
13640 -> 13636;
13640 -> 13638;
13641 -> 13638;
13642 -> 13641;
13642 -> 13638;
13643 -> 13638;
13644 -> 13640;
13644 -> 13643;
13645 -> 13643;
13646 -> 13644;
13646 -> 13630;
13646 -> 13645;
13646 -> 13643;
13647 -> 13646;
13648 -> 13644;
13648 -> 13630;
13648 -> 13646;
13649 -> 13647;
13649 -> 13646;
13650 -> 13646;
13651 -> 13649;
13651 -> 13650;
13652 -> 13644;
13652 -> 13650;
13653 -> 13650;
13654 -> 13652;
13654 -> 13630;
13654 -> 13653;
13655 -> 13654;
13655 -> 13630;
13655 -> 13653;
13656 -> 13654;
13656 -> 13630;
13656 -> 13655;
13657 -> 13655;
13658 -> 13654;
13658 -> 13657;
13659 -> 13657;
13660 -> 13657;
13661 -> 13657;
13662 -> 13657;
13663 -> 13658;
13663 -> 13630;
13663 -> 13657;
13664 -> 13663;
13665 -> 13663;
13665 -> 13664;
13666 -> 13664;
13667 -> 13665;
13667 -> 13666;
13668 -> 13667;
13668 -> 13630;
13668 -> 13666;
13669 -> 13668;
13669 -> 13664;
13670 -> 13669;
13670 -> 13663;
13671 -> 13670;
13672 -> 13670;
13673 -> 13671;
13673 -> 13672;
13673 -> 13670;
13674 -> 13670;
13675 -> 13670;
13676 -> 13674;
13676 -> 13675;
13676 -> 13670;
13677 -> 13676;
13678 -> 13659;
13678 -> 13677;
13678 -> 13676;
13679 -> 13678;
13680 -> 13674;
13680 -> 13676;
13681 -> 13679;
13681 -> 13680;
13681 -> 13630;
13681 -> 13676;
13682 -> 13681;
13683 -> 13681;
13684 -> 13661;
13684 -> 13683;
13685 -> 13679;
13685 -> 13681;
13685 -> 13684;
13686 -> 13684;
13687 -> 13685;
13687 -> 13686;
13688 -> 13686;
13689 -> 13686;
13689 -> 13684;
13690 -> 13682;
13690 -> 13689;
13690 -> 13687;
13690 -> 13684;
13691 -> 13681;
13692 -> 13660;
13692 -> 13691;
13692 -> 13681;
13693 -> 13682;
13693 -> 13690;
13693 -> 13681;
13694 -> 13693;
13694 -> 13655;
13695 -> 13654;
13695 -> 13694;
13695 -> 13653;
13696 -> 13695;
13696 -> 13650;
13697 -> 13650;
13698 -> 13650;
13699 -> 13696;
13699 -> 13698;
13700 -> 13697;
13700 -> 13698;
13701 -> 13699;
13701 -> 13698;
13702 -> 0;
13702 -> 13698;
13703 -> 13701;
13703 -> 13700;
13703 -> 13698;
13704 -> 13650;
13705 -> 13652;
13705 -> 13694;
13705 -> 13704;
13706 -> 13705;
13706 -> 13694;
13706 -> 13704;
13707 -> 13706;
13707 -> 13650;
13708 -> 13707;
13709 -> 13651;
13709 -> 13707;
13710 -> 13707;
13711 -> 13708;
13711 -> 13710;
13712 -> 13709;
13712 -> 13710;
13713 -> 13652;
13713 -> 13710;
13714 -> 13710;
13715 -> 13711;
13715 -> 13714;
13716 -> 0;
13716 -> 13714;
13717 -> 13716;
13717 -> 13710;
13718 -> 13713;
13718 -> 13694;
13718 -> 13717;
13719 -> 13713;
13719 -> 13717;
13720 -> 13711;
13720 -> 13717;
13721 -> 13712;
13721 -> 13717;
13722 -> 13717;
13723 -> 13717;
13724 -> 13718;
13724 -> 13723;
13725 -> 13719;
13725 -> 13723;
13726 -> 13720;
13726 -> 13723;
13727 -> 13721;
13727 -> 13723;
13728 -> 13722;
13728 -> 13723;
13729 -> 13728;
13729 -> 13723;
13730 -> 13728;
13730 -> 13723;
13731 -> 13728;
13731 -> 13723;
13732 -> 13723;
13733 -> 13726;
13733 -> 13732;
13733 -> 13723;
13734 -> 13727;
13734 -> 13726;
13734 -> 13647;
13734 -> 13694;
13735 -> 13722;
13735 -> 13707;
13736 -> 13707;
13737 -> 13735;
13737 -> 13736;
13738 -> 13697;
13738 -> 13736;
13739 -> 13736;
13740 -> 13737;
13740 -> 13739;
13741 -> 13739;
13742 -> 13740;
13742 -> 13726;
13742 -> 13741;
13743 -> 13742;
13743 -> 13694;
13743 -> 13734;
13743 -> 13741;
13744 -> 13743;
13744 -> 13736;
13745 -> 13736;
13746 -> 13744;
13746 -> 13736;
13747 -> 13745;
13747 -> 13736;
13748 -> 13738;
13748 -> 13703;
13748 -> 13746;
13748 -> 13747;
13748 -> 13701;
13748 -> 0;
13748 -> 13736;
13749 -> 13737;
13749 -> 13744;
13749 -> 13738;
13749 -> 13748;
13750 -> 13650;
13751 -> 13697;
13751 -> 13750;
13752 -> 13751;
13752 -> 13750;
13753 -> 0;
13753 -> 13750;
13754 -> 13751;
13754 -> 13749;
13754 -> 13750;
13755 -> 13754;
13756 -> 13754;
13757 -> 13756;
13757 -> 13754;
13758 -> 13755;
13758 -> 13754;
13759 -> 13754;
13760 -> 13758;
13760 -> 13759;
13760 -> 13754;
13761 -> 13755;
13761 -> 13760;
13762 -> 13760;
13763 -> 13761;
13763 -> 13762;
13764 -> 0;
13764 -> 13762;
13765 -> 13764;
13765 -> 13760;
13766 -> 13765;
13766 -> 13760;
13767 -> 13761;
13767 -> 13766;
13768 -> 13754;
13769 -> 13767;
13769 -> 13754;
13770 -> 13752;
13770 -> 13768;
13770 -> 13769;
13770 -> 13754;
13771 -> 13752;
13771 -> 13750;
13772 -> 13771;
13772 -> 13650;
13773 -> 13652;
13773 -> 13650;
13774 -> 13772;
13774 -> 13650;
13775 -> 13651;
13775 -> 13650;
13776 -> 13650;
13777 -> 13773;
13777 -> 13776;
13778 -> 13774;
13778 -> 13776;
13779 -> 13775;
13779 -> 13776;
13780 -> 13776;
13781 -> 13776;
13782 -> 13776;
13783 -> 13777;
13783 -> 13782;
13784 -> 13782;
13785 -> 13783;
13785 -> 13734;
13785 -> 13784;
13786 -> 13785;
13786 -> 13734;
13786 -> 13784;
13787 -> 13786;
13787 -> 13776;
13788 -> 13776;
13789 -> 13787;
13789 -> 13788;
13790 -> 13776;
13791 -> 13778;
13791 -> 13752;
13791 -> 13776;
13792 -> 13791;
13792 -> 13752;
13792 -> 13770;
13792 -> 13776;
13793 -> 13780;
13793 -> 13792;
13794 -> 13792;
13795 -> 13778;
13795 -> 13792;
13795 -> 13752;
13795 -> 13770;
13795 -> 13748;
13795 -> 13767;
13796 -> 13795;
13797 -> 13795;
13798 -> 13796;
13798 -> 13797;
13798 -> 13795;
13799 -> 13798;
13799 -> 13795;
13800 -> 13799;
13800 -> 13780;
13800 -> 13793;
13800 -> 13795;
13801 -> 13780;
13801 -> 13793;
13801 -> 13799;
13801 -> 13795;
13802 -> 13795;
13803 -> 13801;
13803 -> 13802;
13803 -> 13795;
13804 -> 13781;
13804 -> 13802;
13804 -> 13795;
13805 -> 13803;
13805 -> 13804;
13805 -> 13795;
13806 -> 13795;
13807 -> 13801;
13807 -> 13806;
13807 -> 13795;
13808 -> 13795;
13808 -> 13799;
13808 -> 13780;
13809 -> 13795;
13810 -> 13796;
13810 -> 13809;
13810 -> 13795;
13811 -> 13650;
13812 -> 13772;
13812 -> 13650;
13813 -> 13812;
13813 -> 13646;
13814 -> 13646;
13815 -> 13648;
13815 -> 13813;
13815 -> 13814;
13815 -> 13795;
13815 -> 13734;
13815 -> 13646;
13816 -> 13815;
13817 -> 13644;
13817 -> 13816;
13818 -> 13816;
13819 -> 13817;
13819 -> 13818;
13820 -> 13818;
13820 -> 13816;
13821 -> 13816;
13822 -> 13817;
13822 -> 13821;
13823 -> 13822;
13823 -> 13815;
13823 -> 13821;
13824 -> 13823;
13824 -> 13816;
13825 -> 13816;
13826 -> 13824;
13826 -> 13825;
13826 -> 13816;
13827 -> 13826;
13827 -> 13816;
13828 -> 13827;
13829 -> 13828;
13829 -> 13815;
13830 -> 13815;
13831 -> 13829;
13831 -> 13830;
13832 -> 13831;
13832 -> 13815;
13832 -> 13830;
13833 -> 13830;
13834 -> 13831;
13834 -> 13815;
13834 -> 13833;
13834 -> 13830;
13835 -> 13834;
13836 -> 13831;
13836 -> 13815;
13836 -> 13834;
13837 -> 13835;
13837 -> 13834;
13838 -> 13834;
13839 -> 13831;
13839 -> 13837;
13839 -> 13830;
13840 -> 13647;
13840 -> 13815;
13841 -> 13815;
13842 -> 13644;
13842 -> 13841;
13843 -> 13841;
13844 -> 13842;
13844 -> 13843;
13845 -> 13843;
13846 -> 13844;
13846 -> 13839;
13846 -> 13845;
13847 -> 13846;
13847 -> 13839;
13847 -> 13845;
13848 -> 13847;
13848 -> 13841;
13849 -> 13841;
13850 -> 13848;
13850 -> 13849;
13851 -> 13849;
13852 -> 13850;
13852 -> 13851;
13853 -> 13852;
13853 -> 13849;
13854 -> 13850;
13854 -> 13849;
13855 -> 13853;
13855 -> 13841;
13856 -> 13815;
13857 -> 13815;
13858 -> 13644;
13858 -> 13857;
13859 -> 13857;
13860 -> 13858;
13860 -> 13859;
13861 -> 13859;
13861 -> 13857;
13862 -> 13857;
13863 -> 13858;
13863 -> 13862;
13864 -> 13863;
13864 -> 13839;
13864 -> 13862;
13865 -> 13857;
13866 -> 13864;
13866 -> 13815;
13867 -> 13644;
13867 -> 13815;
13868 -> 13815;
13869 -> 13867;
13869 -> 13868;
13870 -> 13866;
13870 -> 13868;
13871 -> 13870;
13871 -> 13839;
13871 -> 13868;
13872 -> 13815;
13873 -> 0;
13873 -> 13815;
13874 -> 13815;
13875 -> 13873;
13875 -> 13874;
13876 -> 13644;
13876 -> 13839;
13876 -> 13874;
13877 -> 13876;
13877 -> 13839;
13877 -> 13874;
13878 -> 13875;
13878 -> 13874;
13879 -> 13877;
13879 -> 13878;
13879 -> 13874;
13880 -> 13879;
13880 -> 13815;
13881 -> 13647;
13881 -> 13839;
13881 -> 13879;
13881 -> 13646;
13882 -> 13644;
13882 -> 13881;
13882 -> 13643;
13883 -> 13882;
13883 -> 13638;
13884 -> 13639;
13884 -> 13638;
13885 -> 13641;
13885 -> 13638;
13886 -> 13883;
13886 -> 13884;
13886 -> 13885;
13886 -> 13881;
13886 -> 13642;
13886 -> 13638;
13887 -> 13886;
13887 -> 13638;
13888 -> 13887;
13889 -> 13887;
13889 -> 13888;
13890 -> 13888;
13890 -> 13887;
13891 -> 13890;
13892 -> 13891;
13892 -> 13634;
13892 -> 13890;
13893 -> 13887;
13893 -> 13890;
13894 -> 13892;
13894 -> 13893;
13894 -> 13891;
13894 -> 13887;
13894 -> 13890;
13895 -> 13894;
13896 -> 13894;
13897 -> 13894;
13898 -> 13896;
13898 -> 13897;
13899 -> 13897;
13900 -> 13898;
13900 -> 13894;
13900 -> 13899;
13900 -> 13897;
13901 -> 13900;
13902 -> 13900;
13903 -> 13898;
13903 -> 13894;
13903 -> 13902;
13904 -> 13903;
13904 -> 13894;
13904 -> 13902;
13905 -> 13904;
13905 -> 13900;
13906 -> 0;
13906 -> 13900;
13907 -> 13905;
13907 -> 13900;
13908 -> 13900;
13909 -> 13907;
13909 -> 13908;
13910 -> 13898;
13910 -> 13908;
13911 -> 13908;
13912 -> 13909;
13912 -> 13911;
13912 -> 13908;
13913 -> 13908;
13914 -> 13908;
13915 -> 13908;
13916 -> 13910;
13916 -> 13915;
13917 -> 13915;
13918 -> 13917;
13918 -> 13908;
13919 -> 13918;
13919 -> 13908;
13920 -> 13918;
13920 -> 13908;
13921 -> 13920;
13922 -> 13909;
13922 -> 13908;
13923 -> 0;
13923 -> 13908;
13924 -> 13913;
13924 -> 13908;
13925 -> 13914;
13925 -> 13908;
13926 -> 13919;
13926 -> 13921;
13926 -> 13922;
13926 -> 13923;
13926 -> 13924;
13926 -> 13925;
13926 -> 13905;
13926 -> 13908;
13927 -> 13926;
13927 -> 13908;
13928 -> 13908;
13929 -> 13927;
13929 -> 13928;
13930 -> 13910;
13930 -> 13928;
13931 -> 13928;
13932 -> 13930;
13932 -> 13926;
13932 -> 13931;
13932 -> 13928;
13933 -> 0;
13933 -> 13932;
13934 -> 13929;
13934 -> 13932;
13935 -> 13934;
13935 -> 13926;
13936 -> 13930;
13936 -> 13934;
13937 -> 13934;
13938 -> 13934;
13939 -> 13935;
13939 -> 13938;
13940 -> 13936;
13940 -> 13938;
13941 -> 13935;
13941 -> 13938;
13942 -> 13937;
13942 -> 13938;
13943 -> 13938;
13944 -> 13942;
13944 -> 13938;
13945 -> 13942;
13945 -> 13938;
13946 -> 13942;
13946 -> 13938;
13947 -> 13938;
13948 -> 13939;
13948 -> 13947;
13948 -> 13938;
13949 -> 13938;
13950 -> 13940;
13950 -> 13949;
13950 -> 13938;
13951 -> 13938;
13952 -> 13941;
13952 -> 13951;
13952 -> 13938;
13953 -> 13940;
13953 -> 13942;
13953 -> 13938;
13954 -> 13939;
13954 -> 13942;
13954 -> 13938;
13955 -> 13941;
13955 -> 13942;
13955 -> 13938;
13956 -> 13934;
13957 -> 13937;
13957 -> 13956;
13958 -> 13957;
13958 -> 13954;
13958 -> 13956;
13959 -> 13958;
13959 -> 13934;
13960 -> 13937;
13960 -> 13934;
13961 -> 13933;
13961 -> 13959;
13961 -> 13960;
13961 -> 13934;
13962 -> 13930;
13962 -> 13926;
13962 -> 13932;
13963 -> 13933;
13963 -> 13932;
13964 -> 13932;
13965 -> 13962;
13965 -> 13963;
13965 -> 13964;
13965 -> 13933;
13965 -> 13926;
13965 -> 13961;
13965 -> 13942;
13965 -> 13953;
13965 -> 13954;
13965 -> 13955;
13965 -> 13932;
13966 -> 13908;
13967 -> 13926;
13967 -> 13908;
13968 -> 13908;
13969 -> 13967;
13969 -> 13968;
13970 -> 13910;
13970 -> 13968;
13971 -> 13968;
13972 -> 13970;
13972 -> 13965;
13972 -> 13971;
13972 -> 13968;
13973 -> 13972;
13974 -> 13970;
13974 -> 13973;
13975 -> 13974;
13975 -> 13965;
13975 -> 13973;
13976 -> 13975;
13976 -> 13972;
13977 -> 13972;
13978 -> 13972;
13979 -> 13976;
13979 -> 13978;
13980 -> 13979;
13980 -> 13972;
13981 -> 13972;
13982 -> 13969;
13982 -> 13972;
13983 -> 13982;
13983 -> 13980;
13983 -> 13972;
13984 -> 13983;
13985 -> 13980;
13985 -> 13984;
13986 -> 13976;
13986 -> 13985;
13987 -> 13970;
13987 -> 13985;
13988 -> 13984;
13988 -> 13985;
13989 -> 0;
13990 -> 13989;
13991 -> 13990;
13993 -> 13992;
13994 -> 13993;
13994 -> 13992;
13995 -> 0;
13995 -> 13993;
13995 -> 13992;
13996 -> 0;
13996 -> 13993;
13996 -> 13992;
13997 -> 13993;
13997 -> 13992;
13998 -> 13993;
13998 -> 13992;
13999 -> 13993;
13999 -> 13992;
14000 -> 13993;
14000 -> 13992;
14002 -> 14001;
14003 -> 14001;
14004 -> 14003;
14005 -> 14003;
14007 -> 14006;
14009 -> 14008;
14011 -> 14010;
14013 -> 14012;
14015 -> 14013;
14015 -> 14014;
14016 -> 14015;
14018 -> 14017;
14020 -> 14019;
14022 -> 14021;
14024 -> 14023;
14034 -> 14026;
14034 -> 14025;
14035 -> 14027;
14035 -> 14025;
14036 -> 14028;
14036 -> 14025;
14037 -> 14029;
14037 -> 14025;
14038 -> 14030;
14038 -> 14025;
14039 -> 14031;
14039 -> 14025;
14040 -> 14032;
14040 -> 14025;
14041 -> 14033;
14041 -> 14025;
14042 -> 14025;
14043 -> 14005;
14043 -> 14003;
14044 -> 14043;
14044 -> 14004;
14045 -> 14004;
14047 -> 14046;
14049 -> 0;
14051 -> 14049;
14051 -> 14050;
14052 -> 14050;
14053 -> 14052;
14053 -> 14050;
14054 -> 14051;
14054 -> 14052;
14054 -> 14050;
14055 -> 14050;
14056 -> 0;
14058 -> 14056;
14058 -> 14057;
14059 -> 14057;
14060 -> 14059;
14060 -> 14057;
14061 -> 14058;
14061 -> 14059;
14061 -> 14057;
14062 -> 14057;
14063 -> 0;
14065 -> 14063;
14065 -> 14064;
14066 -> 14064;
14067 -> 14066;
14067 -> 14064;
14068 -> 14065;
14068 -> 14066;
14068 -> 14064;
14069 -> 14064;
14070 -> 0;
14072 -> 14070;
14072 -> 14071;
14073 -> 14071;
14074 -> 14073;
14074 -> 14071;
14075 -> 14072;
14075 -> 14073;
14075 -> 14071;
14076 -> 14071;
14077 -> 0;
14079 -> 14077;
14079 -> 14078;
14080 -> 14078;
14081 -> 14080;
14081 -> 14078;
14082 -> 14079;
14082 -> 14080;
14082 -> 14078;
14083 -> 14078;
14084 -> 0;
14086 -> 14084;
14086 -> 14085;
14087 -> 14085;
14088 -> 14087;
14088 -> 14085;
14089 -> 14086;
14089 -> 14087;
14089 -> 14085;
14090 -> 14085;
14091 -> 0;
14093 -> 14091;
14093 -> 14092;
14094 -> 14092;
14095 -> 14094;
14095 -> 14092;
14096 -> 14093;
14096 -> 14094;
14096 -> 14092;
14097 -> 14092;
14098 -> 0;
14100 -> 14098;
14100 -> 14099;
14101 -> 14099;
14102 -> 14101;
14102 -> 14099;
14103 -> 14100;
14103 -> 14101;
14103 -> 14099;
14104 -> 14099;
14105 -> 14104;
14107 -> 14048;
14107 -> 14105;
14107 -> 14106;
14107 -> 14101;
14107 -> 14102;
14107 -> 14103;
14108 -> 14107;
14110 -> 14109;
14111 -> 14110;
14111 -> 14109;
14112 -> 14110;
14112 -> 14109;
14113 -> 14110;
14113 -> 14109;
14114 -> 14109;
14116 -> 14115;
14117 -> 14045;
14118 -> 14117;
14119 -> 14118;
14120 -> 14119;
14120 -> 14118;
14121 -> 14117;
14121 -> 14045;
14122 -> 14117;
14122 -> 14045;
14123 -> 14045;
14123 -> 14004;
14124 -> 14045;
14124 -> 14004;
14125 -> 14045;
14125 -> 14004;
14126 -> 14044;
14126 -> 14045;
14126 -> 14004;
14127 -> 14003;
14127 -> 14001;
14128 -> 14002;
14128 -> 14003;
14128 -> 14001;
14129 -> 14001;
14130 -> 14129;
14130 -> 13993;
14130 -> 13992;
14131 -> 0;
14131 -> 13993;
14131 -> 13992;
14132 -> 13992;
14133 -> 13983;
14133 -> 13980;
14133 -> 13985;
14134 -> 13985;
14135 -> 13986;
14135 -> 14134;
14136 -> 13987;
14136 -> 14134;
14137 -> 13988;
14137 -> 14134;
14138 -> 14133;
14138 -> 14134;
14139 -> 14134;
14140 -> 14139;
14140 -> 14134;
14141 -> 14134;
14142 -> 14134;
14143 -> 14135;
14143 -> 14134;
14144 -> 14137;
14144 -> 14134;
14145 -> 14139;
14145 -> 14134;
14146 -> 14141;
14146 -> 14134;
14147 -> 14142;
14147 -> 14134;
14148 -> 14134;
14149 -> 14143;
14149 -> 14148;
14150 -> 14144;
14150 -> 14148;
14151 -> 14145;
14151 -> 14148;
14152 -> 14146;
14152 -> 14148;
14153 -> 14147;
14153 -> 14148;
14154 -> 14148;
14155 -> 14149;
14155 -> 14154;
14156 -> 14155;
14156 -> 14148;
14157 -> 14150;
14157 -> 14148;
14158 -> 14156;
14158 -> 14157;
14158 -> 13980;
14158 -> 14148;
14159 -> 14158;
14159 -> 14148;
14160 -> 14148;
14161 -> 14134;
14162 -> 14134;
14163 -> 14134;
14164 -> 14134;
14165 -> 14159;
14165 -> 14164;
14165 -> 14134;
14166 -> 14135;
14166 -> 14165;
14167 -> 14136;
14167 -> 14165;
14168 -> 14137;
14168 -> 14165;
14169 -> 14138;
14169 -> 14165;
14170 -> 14162;
14170 -> 14165;
14171 -> 14165;
14172 -> 14165;
14173 -> 14166;
14173 -> 14172;
14174 -> 14167;
14174 -> 14172;
14175 -> 14168;
14175 -> 14172;
14176 -> 14169;
14176 -> 14172;
14177 -> 14170;
14177 -> 14172;
14178 -> 14171;
14178 -> 14172;
14179 -> 14173;
14179 -> 14172;
14180 -> 14174;
14180 -> 14172;
14181 -> 14175;
14181 -> 14172;
14182 -> 14176;
14182 -> 14172;
14183 -> 14172;
14184 -> 14177;
14184 -> 14172;
14185 -> 14172;
14186 -> 14179;
14186 -> 14185;
14187 -> 14180;
14187 -> 14185;
14188 -> 14181;
14188 -> 14185;
14189 -> 14182;
14189 -> 14185;
14190 -> 14183;
14190 -> 14185;
14191 -> 14184;
14191 -> 14185;
14192 -> 14178;
14192 -> 14185;
14193 -> 14185;
14194 -> 14192;
14194 -> 14193;
14195 -> 14193;
14196 -> 14193;
14197 -> 14194;
14197 -> 14196;
14198 -> 14196;
14199 -> 14197;
14199 -> 14196;
14200 -> 14197;
14200 -> 14196;
14201 -> 14194;
14201 -> 14193;
14202 -> 14194;
14202 -> 14193;
14203 -> 14194;
14203 -> 14193;
14204 -> 14195;
14204 -> 14194;
14204 -> 14193;
14205 -> 14192;
14205 -> 14185;
14206 -> 14192;
14206 -> 14185;
14207 -> 14192;
14207 -> 14185;
14208 -> 14192;
14208 -> 14185;
14209 -> 14192;
14209 -> 14185;
14210 -> 14192;
14210 -> 14185;
14211 -> 14192;
14211 -> 14185;
14212 -> 14192;
14212 -> 14185;
14213 -> 14192;
14213 -> 14185;
14214 -> 14129;
14214 -> 14192;
14214 -> 14185;
14215 -> 14185;
14216 -> 14215;
14216 -> 14192;
14216 -> 14185;
14217 -> 14129;
14217 -> 14192;
14217 -> 14185;
14218 -> 14185;
14219 -> 14218;
14219 -> 14192;
14219 -> 14185;
14220 -> 14192;
14220 -> 14185;
14223 -> 14221;
14223 -> 14222;
14224 -> 14222;
14225 -> 14223;
14225 -> 14222;
14226 -> 14222;
14227 -> 0;
14227 -> 14222;
14228 -> 0;
14228 -> 14222;
14229 -> 14225;
14229 -> 14224;
14230 -> 14226;
14230 -> 14224;
14231 -> 14227;
14231 -> 14224;
14232 -> 14228;
14232 -> 14224;
14233 -> 14224;
14234 -> 14229;
14234 -> 14224;
14235 -> 14230;
14235 -> 14224;
14236 -> 14231;
14236 -> 14224;
14237 -> 14234;
14237 -> 14233;
14238 -> 14235;
14238 -> 14233;
14239 -> 14236;
14239 -> 14233;
14240 -> 14233;
14241 -> 11008;
14241 -> 14233;
14242 -> 14237;
14242 -> 14233;
14243 -> 14238;
14243 -> 14233;
14244 -> 14240;
14244 -> 14241;
14244 -> 14242;
14244 -> 14243;
14244 -> 14158;
14244 -> 14226;
14244 -> 14233;
14245 -> 14244;
14245 -> 14240;
14246 -> 14244;
14246 -> 14240;
14248 -> 14247;
14250 -> 14249;
14251 -> 0;
14252 -> 14251;
14253 -> 14252;
14257 -> 0;
14259 -> 14257;
14259 -> 14258;
14260 -> 14259;
14260 -> 14258;
14261 -> 14260;
14261 -> 11008;
14261 -> 14244;
14261 -> 14258;
14262 -> 14258;
14263 -> 14261;
14263 -> 14262;
14264 -> 14262;
14265 -> 14261;
14265 -> 14264;
14265 -> 14258;
14266 -> 14256;
14266 -> 14265;
14267 -> 0;
14269 -> 14267;
14269 -> 14268;
14270 -> 14269;
14270 -> 14268;
14271 -> 14270;
14271 -> 11008;
14271 -> 14265;
14271 -> 14268;
14272 -> 14268;
14273 -> 14271;
14273 -> 14272;
14274 -> 14272;
14275 -> 14256;
14275 -> 14271;
14275 -> 14266;
14276 -> 0;
14278 -> 14276;
14278 -> 14277;
14279 -> 14278;
14279 -> 14277;
14280 -> 14279;
14280 -> 11008;
14280 -> 14271;
14280 -> 14277;
14281 -> 14277;
14282 -> 14280;
14282 -> 14281;
14283 -> 14281;
14284 -> 14256;
14284 -> 14280;
14284 -> 14275;
14285 -> 0;
14287 -> 14285;
14287 -> 14286;
14288 -> 14287;
14288 -> 14286;
14289 -> 14288;
14289 -> 11008;
14289 -> 14280;
14289 -> 14286;
14290 -> 14286;
14291 -> 14289;
14291 -> 14290;
14292 -> 14290;
14293 -> 14256;
14293 -> 14289;
14293 -> 14284;
14294 -> 0;
14296 -> 14294;
14296 -> 14295;
14297 -> 14296;
14297 -> 14295;
14298 -> 14297;
14298 -> 11008;
14298 -> 14289;
14298 -> 14295;
14299 -> 14295;
14300 -> 14298;
14300 -> 14299;
14301 -> 14299;
14302 -> 14256;
14302 -> 14298;
14302 -> 14293;
14303 -> 0;
14305 -> 14303;
14305 -> 14304;
14306 -> 14305;
14306 -> 14304;
14307 -> 14306;
14307 -> 11008;
14307 -> 14298;
14307 -> 14304;
14308 -> 14304;
14309 -> 14307;
14309 -> 14308;
14310 -> 14308;
14311 -> 14256;
14311 -> 14307;
14311 -> 14302;
14312 -> 0;
14314 -> 14312;
14314 -> 14313;
14315 -> 14314;
14315 -> 14313;
14316 -> 14315;
14316 -> 11008;
14316 -> 14307;
14316 -> 14313;
14317 -> 14313;
14318 -> 14316;
14318 -> 14317;
14319 -> 14317;
14320 -> 14256;
14320 -> 14316;
14320 -> 14311;
14321 -> 0;
14323 -> 14321;
14323 -> 14322;
14324 -> 14323;
14324 -> 14322;
14325 -> 14324;
14325 -> 11008;
14325 -> 14316;
14325 -> 14322;
14326 -> 14322;
14327 -> 14325;
14327 -> 14326;
14328 -> 14326;
14329 -> 14256;
14329 -> 14325;
14329 -> 14320;
14330 -> 0;
14332 -> 14330;
14332 -> 14331;
14333 -> 14332;
14333 -> 14331;
14334 -> 14333;
14334 -> 11008;
14334 -> 14325;
14334 -> 14331;
14335 -> 14331;
14336 -> 14334;
14336 -> 14335;
14337 -> 14335;
14338 -> 14256;
14338 -> 14334;
14338 -> 14329;
14339 -> 0;
14341 -> 14339;
14341 -> 14340;
14342 -> 14341;
14342 -> 14340;
14343 -> 14342;
14343 -> 11008;
14343 -> 14334;
14343 -> 14340;
14344 -> 14340;
14345 -> 14343;
14345 -> 14344;
14346 -> 14344;
14347 -> 14256;
14347 -> 14343;
14347 -> 14338;
14348 -> 0;
14350 -> 14348;
14350 -> 14349;
14351 -> 14350;
14351 -> 14349;
14352 -> 14351;
14352 -> 11008;
14352 -> 14343;
14352 -> 14349;
14353 -> 14349;
14354 -> 14352;
14354 -> 14353;
14355 -> 14353;
14356 -> 14256;
14356 -> 14352;
14356 -> 14347;
14357 -> 0;
14359 -> 14357;
14359 -> 14358;
14360 -> 14359;
14360 -> 14358;
14361 -> 14360;
14361 -> 11008;
14361 -> 14352;
14361 -> 14358;
14362 -> 14358;
14363 -> 14361;
14363 -> 14362;
14364 -> 14362;
14365 -> 14256;
14365 -> 14361;
14365 -> 14356;
14366 -> 0;
14368 -> 14366;
14368 -> 14367;
14369 -> 14368;
14369 -> 14367;
14370 -> 14369;
14370 -> 11008;
14370 -> 14361;
14370 -> 14367;
14371 -> 14367;
14372 -> 14370;
14372 -> 14371;
14373 -> 14371;
14374 -> 14256;
14374 -> 14370;
14374 -> 14365;
14375 -> 0;
14377 -> 14375;
14377 -> 14376;
14378 -> 14377;
14378 -> 14376;
14379 -> 14378;
14379 -> 11008;
14379 -> 14370;
14379 -> 14376;
14380 -> 14376;
14381 -> 14379;
14381 -> 14380;
14382 -> 14380;
14383 -> 14256;
14383 -> 14379;
14383 -> 14374;
14384 -> 0;
14386 -> 14384;
14386 -> 14385;
14387 -> 14386;
14387 -> 14385;
14388 -> 14387;
14388 -> 11008;
14388 -> 14379;
14388 -> 14385;
14389 -> 14385;
14390 -> 14388;
14390 -> 14389;
14391 -> 14389;
14392 -> 14256;
14392 -> 14388;
14392 -> 14383;
14393 -> 0;
14395 -> 14393;
14395 -> 14394;
14396 -> 14395;
14396 -> 14394;
14397 -> 14396;
14397 -> 11008;
14397 -> 14388;
14397 -> 14394;
14398 -> 14394;
14399 -> 14397;
14399 -> 14398;
14400 -> 14398;
14401 -> 14256;
14401 -> 14397;
14401 -> 14392;
14402 -> 0;
14404 -> 14402;
14404 -> 14403;
14405 -> 14404;
14405 -> 14403;
14406 -> 14405;
14406 -> 11008;
14406 -> 14397;
14406 -> 14403;
14407 -> 14403;
14408 -> 14406;
14408 -> 14407;
14409 -> 14407;
14410 -> 14256;
14410 -> 14406;
14410 -> 14401;
14411 -> 0;
14413 -> 14411;
14413 -> 14412;
14414 -> 14413;
14414 -> 14412;
14415 -> 14414;
14415 -> 11008;
14415 -> 14406;
14415 -> 14412;
14416 -> 14412;
14417 -> 14415;
14417 -> 14416;
14418 -> 14416;
14419 -> 14256;
14419 -> 14415;
14419 -> 14410;
14420 -> 0;
14422 -> 14420;
14422 -> 14421;
14423 -> 14422;
14423 -> 14421;
14424 -> 14423;
14424 -> 11008;
14424 -> 14415;
14424 -> 14421;
14425 -> 14421;
14426 -> 14424;
14426 -> 14425;
14427 -> 14425;
14428 -> 14256;
14428 -> 14424;
14428 -> 14419;
14429 -> 0;
14431 -> 14429;
14431 -> 14430;
14432 -> 14431;
14432 -> 14430;
14433 -> 14432;
14433 -> 11008;
14433 -> 14424;
14433 -> 14430;
14434 -> 14430;
14435 -> 14433;
14435 -> 14434;
14436 -> 14434;
14437 -> 14256;
14437 -> 14433;
14437 -> 14428;
14438 -> 0;
14440 -> 14438;
14440 -> 14439;
14441 -> 14440;
14441 -> 14439;
14442 -> 14441;
14442 -> 11008;
14442 -> 14433;
14442 -> 14439;
14443 -> 14439;
14444 -> 14442;
14444 -> 14443;
14445 -> 14443;
14446 -> 14256;
14446 -> 14442;
14446 -> 14437;
14447 -> 0;
14449 -> 14447;
14449 -> 14448;
14450 -> 14449;
14450 -> 14448;
14451 -> 14450;
14451 -> 11008;
14451 -> 14442;
14451 -> 14448;
14452 -> 14448;
14453 -> 14451;
14453 -> 14452;
14454 -> 14452;
14455 -> 14256;
14455 -> 14451;
14455 -> 14446;
14456 -> 0;
14458 -> 14456;
14458 -> 14457;
14459 -> 14458;
14459 -> 14457;
14460 -> 14459;
14460 -> 11008;
14460 -> 14451;
14460 -> 14457;
14461 -> 14457;
14462 -> 14460;
14462 -> 14461;
14463 -> 14461;
14464 -> 14256;
14464 -> 14460;
14464 -> 14455;
14465 -> 0;
14467 -> 14465;
14467 -> 14466;
14468 -> 14467;
14468 -> 14466;
14469 -> 14468;
14469 -> 11008;
14469 -> 14460;
14469 -> 14466;
14470 -> 14466;
14471 -> 14469;
14471 -> 14470;
14472 -> 14470;
14473 -> 14256;
14473 -> 14469;
14473 -> 14464;
14474 -> 0;
14476 -> 14474;
14476 -> 14475;
14477 -> 14476;
14477 -> 14475;
14478 -> 14477;
14478 -> 11008;
14478 -> 14469;
14478 -> 14475;
14479 -> 14475;
14480 -> 14478;
14480 -> 14479;
14481 -> 14479;
14482 -> 14256;
14482 -> 14478;
14482 -> 14473;
14483 -> 0;
14485 -> 14483;
14485 -> 14484;
14486 -> 14485;
14486 -> 14484;
14487 -> 14486;
14487 -> 11008;
14487 -> 14478;
14487 -> 14484;
14488 -> 14484;
14489 -> 14487;
14489 -> 14488;
14490 -> 14488;
14491 -> 14256;
14491 -> 14487;
14491 -> 14482;
14492 -> 0;
14494 -> 14492;
14494 -> 14493;
14495 -> 14494;
14495 -> 14493;
14496 -> 14495;
14496 -> 11008;
14496 -> 14487;
14496 -> 14493;
14497 -> 14493;
14498 -> 14496;
14498 -> 14497;
14499 -> 14497;
14500 -> 14256;
14500 -> 14496;
14500 -> 14491;
14501 -> 0;
14503 -> 14501;
14503 -> 14502;
14504 -> 14503;
14504 -> 14502;
14505 -> 14504;
14505 -> 11008;
14505 -> 14496;
14505 -> 14502;
14506 -> 14502;
14507 -> 14505;
14507 -> 14506;
14508 -> 14506;
14509 -> 14256;
14509 -> 14505;
14509 -> 14500;
14510 -> 0;
14512 -> 14510;
14512 -> 14511;
14513 -> 14512;
14513 -> 14511;
14514 -> 14513;
14514 -> 11008;
14514 -> 14505;
14514 -> 14511;
14515 -> 14511;
14516 -> 14514;
14516 -> 14515;
14517 -> 14515;
14518 -> 14256;
14518 -> 14514;
14518 -> 14509;
14519 -> 0;
14521 -> 14519;
14521 -> 14520;
14522 -> 14521;
14522 -> 14520;
14523 -> 14522;
14523 -> 11008;
14523 -> 14514;
14523 -> 14520;
14524 -> 14520;
14525 -> 14523;
14525 -> 14524;
14526 -> 14524;
14527 -> 14256;
14527 -> 14523;
14527 -> 14518;
14528 -> 0;
14530 -> 14528;
14530 -> 14529;
14531 -> 14530;
14531 -> 14529;
14532 -> 14531;
14532 -> 11008;
14532 -> 14523;
14532 -> 14529;
14533 -> 14529;
14534 -> 14532;
14534 -> 14533;
14535 -> 14533;
14536 -> 14256;
14536 -> 14532;
14536 -> 14527;
14537 -> 0;
14539 -> 14537;
14539 -> 14538;
14540 -> 14539;
14540 -> 14538;
14541 -> 14540;
14541 -> 11008;
14541 -> 14532;
14541 -> 14538;
14542 -> 14538;
14543 -> 14541;
14543 -> 14542;
14544 -> 14542;
14545 -> 14256;
14545 -> 14541;
14545 -> 14536;
14546 -> 0;
14548 -> 14546;
14548 -> 14547;
14549 -> 14548;
14549 -> 14547;
14550 -> 14549;
14550 -> 11008;
14550 -> 14541;
14550 -> 14547;
14551 -> 14547;
14552 -> 14550;
14552 -> 14551;
14553 -> 14551;
14554 -> 14256;
14554 -> 14550;
14554 -> 14545;
14555 -> 0;
14557 -> 14555;
14557 -> 14556;
14558 -> 14557;
14558 -> 14556;
14559 -> 14558;
14559 -> 11008;
14559 -> 14550;
14559 -> 14556;
14560 -> 14556;
14561 -> 14559;
14561 -> 14560;
14562 -> 14560;
14563 -> 14256;
14563 -> 14559;
14563 -> 14554;
14564 -> 0;
14566 -> 14564;
14566 -> 14565;
14567 -> 14566;
14567 -> 14565;
14568 -> 14567;
14568 -> 11008;
14568 -> 14559;
14568 -> 14565;
14569 -> 14565;
14570 -> 14568;
14570 -> 14569;
14571 -> 14569;
14572 -> 14256;
14572 -> 14568;
14572 -> 14563;
14573 -> 0;
14575 -> 14573;
14575 -> 14574;
14576 -> 14575;
14576 -> 14574;
14577 -> 14576;
14577 -> 11008;
14577 -> 14568;
14577 -> 14574;
14578 -> 14574;
14579 -> 14577;
14579 -> 14578;
14580 -> 14578;
14581 -> 14256;
14581 -> 14577;
14581 -> 14572;
14582 -> 0;
14584 -> 14582;
14584 -> 14583;
14585 -> 14584;
14585 -> 14583;
14586 -> 14585;
14586 -> 11008;
14586 -> 14577;
14586 -> 14583;
14587 -> 14583;
14588 -> 14586;
14588 -> 14587;
14589 -> 14587;
14590 -> 14256;
14590 -> 14586;
14590 -> 14581;
14591 -> 0;
14593 -> 14591;
14593 -> 14592;
14594 -> 14593;
14594 -> 14592;
14595 -> 14594;
14595 -> 11008;
14595 -> 14586;
14595 -> 14592;
14596 -> 14592;
14597 -> 14595;
14597 -> 14596;
14598 -> 14596;
14599 -> 14256;
14599 -> 14595;
14599 -> 14590;
14600 -> 0;
14602 -> 14600;
14602 -> 14601;
14603 -> 14602;
14603 -> 14601;
14604 -> 14603;
14604 -> 11008;
14604 -> 14595;
14604 -> 14601;
14605 -> 14601;
14606 -> 14604;
14606 -> 14605;
14607 -> 14605;
14608 -> 14256;
14608 -> 14604;
14608 -> 14599;
14609 -> 0;
14611 -> 14609;
14611 -> 14610;
14612 -> 14611;
14612 -> 14610;
14613 -> 14612;
14613 -> 11008;
14613 -> 14604;
14613 -> 14610;
14614 -> 14610;
14615 -> 14613;
14615 -> 14614;
14616 -> 14614;
14617 -> 14256;
14617 -> 14613;
14617 -> 14608;
14618 -> 0;
14620 -> 14618;
14620 -> 14619;
14621 -> 14620;
14621 -> 14619;
14622 -> 14621;
14622 -> 11008;
14622 -> 14613;
14622 -> 14619;
14623 -> 14619;
14624 -> 14622;
14624 -> 14623;
14625 -> 14623;
14626 -> 14256;
14626 -> 14622;
14626 -> 14617;
14627 -> 0;
14629 -> 14627;
14629 -> 14628;
14630 -> 14629;
14630 -> 14628;
14631 -> 14630;
14631 -> 11008;
14631 -> 14622;
14631 -> 14628;
14632 -> 14628;
14633 -> 14631;
14633 -> 14632;
14634 -> 14632;
14635 -> 14256;
14635 -> 14631;
14635 -> 14626;
14636 -> 0;
14638 -> 14636;
14638 -> 14637;
14639 -> 14638;
14639 -> 14637;
14640 -> 14639;
14640 -> 11008;
14640 -> 14631;
14640 -> 14637;
14641 -> 14637;
14642 -> 14640;
14642 -> 14641;
14643 -> 14641;
14644 -> 14256;
14644 -> 14640;
14644 -> 14635;
14645 -> 0;
14647 -> 14645;
14647 -> 14646;
14648 -> 14647;
14648 -> 14646;
14649 -> 14648;
14649 -> 11008;
14649 -> 14640;
14649 -> 14646;
14650 -> 14646;
14651 -> 14649;
14651 -> 14650;
14652 -> 14650;
14653 -> 14256;
14653 -> 14649;
14653 -> 14644;
14654 -> 0;
14656 -> 14654;
14656 -> 14655;
14657 -> 14656;
14657 -> 14655;
14658 -> 14657;
14658 -> 11008;
14658 -> 14649;
14658 -> 14655;
14659 -> 14655;
14660 -> 14658;
14660 -> 14659;
14661 -> 14659;
14662 -> 14256;
14662 -> 14658;
14662 -> 14653;
14663 -> 0;
14665 -> 14663;
14665 -> 14664;
14666 -> 14665;
14666 -> 14664;
14667 -> 14666;
14667 -> 11008;
14667 -> 14658;
14667 -> 14664;
14668 -> 14664;
14669 -> 14667;
14669 -> 14668;
14670 -> 14668;
14671 -> 14256;
14671 -> 14667;
14671 -> 14662;
14672 -> 0;
14674 -> 14672;
14674 -> 14673;
14675 -> 14674;
14675 -> 14673;
14676 -> 14675;
14676 -> 11008;
14676 -> 14667;
14676 -> 14673;
14677 -> 14673;
14678 -> 14676;
14678 -> 14677;
14679 -> 14677;
14680 -> 14256;
14680 -> 14676;
14680 -> 14671;
14681 -> 0;
14683 -> 14681;
14683 -> 14682;
14684 -> 14683;
14684 -> 14682;
14685 -> 14684;
14685 -> 11008;
14685 -> 14676;
14685 -> 14682;
14686 -> 14682;
14687 -> 14685;
14687 -> 14686;
14688 -> 14686;
14689 -> 14256;
14689 -> 14685;
14689 -> 14680;
14690 -> 0;
14692 -> 14690;
14692 -> 14691;
14693 -> 14692;
14693 -> 14691;
14694 -> 14693;
14694 -> 11008;
14694 -> 14685;
14694 -> 14691;
14695 -> 14691;
14696 -> 14694;
14696 -> 14695;
14697 -> 14695;
14698 -> 14256;
14698 -> 14694;
14698 -> 14689;
14699 -> 0;
14701 -> 14699;
14701 -> 14700;
14702 -> 14701;
14702 -> 14700;
14703 -> 14702;
14703 -> 11008;
14703 -> 14694;
14703 -> 14700;
14704 -> 14700;
14705 -> 14703;
14705 -> 14704;
14706 -> 14704;
14707 -> 14256;
14707 -> 14703;
14707 -> 14698;
14708 -> 0;
14710 -> 14708;
14710 -> 14709;
14711 -> 14710;
14711 -> 14709;
14712 -> 14711;
14712 -> 11008;
14712 -> 14703;
14712 -> 14709;
14713 -> 14709;
14714 -> 14712;
14714 -> 14713;
14715 -> 14713;
14716 -> 14256;
14716 -> 14712;
14716 -> 14707;
14717 -> 0;
14719 -> 14717;
14719 -> 14718;
14720 -> 14719;
14720 -> 14718;
14721 -> 14720;
14721 -> 11008;
14721 -> 14712;
14721 -> 14718;
14722 -> 14718;
14723 -> 14721;
14723 -> 14722;
14724 -> 14722;
14725 -> 14256;
14725 -> 14721;
14725 -> 14716;
14726 -> 0;
14728 -> 14726;
14728 -> 14727;
14729 -> 14728;
14729 -> 14727;
14730 -> 14729;
14730 -> 11008;
14730 -> 14721;
14730 -> 14727;
14731 -> 14727;
14732 -> 14730;
14732 -> 14731;
14733 -> 14731;
14734 -> 14256;
14734 -> 14730;
14734 -> 14725;
14735 -> 0;
14737 -> 14735;
14737 -> 14736;
14738 -> 14737;
14738 -> 14736;
14739 -> 14738;
14739 -> 11008;
14739 -> 14730;
14739 -> 14736;
14740 -> 14736;
14741 -> 14739;
14741 -> 14740;
14742 -> 14740;
14743 -> 14256;
14743 -> 14739;
14743 -> 14734;
14744 -> 14256;
14744 -> 14743;
14745 -> 14245;
14745 -> 14240;
14746 -> 14240;
14747 -> 14745;
14747 -> 14746;
14748 -> 14747;
14748 -> 0;
14748 -> 14746;
14749 -> 14747;
14749 -> 0;
14749 -> 14748;
14750 -> 14747;
14750 -> 14749;
14751 -> 14749;
14752 -> 14750;
14752 -> 14751;
14753 -> 14752;
14753 -> 14751;
14754 -> 14753;
14755 -> 14747;
14755 -> 14754;
14756 -> 14754;
14757 -> 14755;
14757 -> 14756;
14758 -> 14757;
14758 -> 14756;
14759 -> 14758;
14760 -> 14747;
14760 -> 14759;
14761 -> 14759;
14762 -> 14760;
14762 -> 14761;
14763 -> 14762;
14763 -> 14761;
14764 -> 14763;
14765 -> 0;
14765 -> 14764;
14766 -> 14244;
14766 -> 14765;
14766 -> 14739;
14766 -> 14233;
14767 -> 14239;
14767 -> 14240;
14767 -> 14233;
14768 -> 14233;
14768 -> 14224;
14769 -> 14229;
14769 -> 0;
14769 -> 14224;
14770 -> 14232;
14770 -> 0;
14770 -> 14224;
14771 -> 14770;
14772 -> 14771;
14772 -> 14233;
14772 -> 14224;
14773 -> 14222;
14774 -> 0;
14776 -> 14774;
14776 -> 14775;
14777 -> 14775;
14778 -> 14776;
14778 -> 14775;
14779 -> 14775;
14780 -> 0;
14780 -> 14775;
14781 -> 0;
14781 -> 14775;
14782 -> 14778;
14782 -> 14777;
14783 -> 14779;
14783 -> 14777;
14784 -> 14780;
14784 -> 14777;
14785 -> 14781;
14785 -> 14777;
14786 -> 14777;
14787 -> 14782;
14787 -> 14777;
14788 -> 14783;
14788 -> 14777;
14789 -> 14784;
14789 -> 14777;
14790 -> 14787;
14790 -> 14786;
14791 -> 14788;
14791 -> 14786;
14792 -> 14789;
14792 -> 14786;
14793 -> 14786;
14794 -> 11008;
14794 -> 14786;
14795 -> 14790;
14795 -> 14786;
14796 -> 14791;
14796 -> 14786;
14797 -> 14793;
14797 -> 14794;
14797 -> 14795;
14797 -> 14796;
14797 -> 14766;
14797 -> 14767;
14797 -> 14768;
14797 -> 14772;
14797 -> 14779;
14797 -> 0;
14797 -> 14771;
14797 -> 14786;
14798 -> 14797;
14798 -> 14793;
14799 -> 14793;
14800 -> 0;
14800 -> 14797;
14801 -> 14792;
14801 -> 14793;
14801 -> 14786;
14802 -> 14786;
14802 -> 14777;
14803 -> 14782;
14803 -> 0;
14803 -> 14777;
14804 -> 14785;
14804 -> 0;
14804 -> 14777;
14805 -> 14804;
14806 -> 14805;
14806 -> 14786;
14806 -> 14777;
14807 -> 14775;
14808 -> 14773;
14808 -> 14192;
14808 -> 14185;
14809 -> 14192;
14809 -> 14185;
14810 -> 14192;
14810 -> 14185;
14811 -> 14188;
14811 -> 13980;
14811 -> 14185;
14812 -> 14185;
14813 -> 14187;
14813 -> 14812;
14813 -> 14185;
14814 -> 14185;
14815 -> 14190;
14815 -> 14814;
14815 -> 14185;
14816 -> 14185;
14817 -> 14185;
14818 -> 14185;
14819 -> 14186;
14819 -> 14818;
14820 -> 14819;
14820 -> 14800;
14820 -> 14818;
14821 -> 14820;
14821 -> 14185;
14822 -> 14188;
14822 -> 14185;
14823 -> 14821;
14823 -> 14822;
14823 -> 14800;
14823 -> 14801;
14823 -> 14802;
14823 -> 14806;
14823 -> 13980;
14823 -> 0;
14823 -> 14805;
14823 -> 14185;
14824 -> 14188;
14824 -> 14192;
14824 -> 14185;
14825 -> 14187;
14825 -> 14192;
14825 -> 14185;
14826 -> 14185;
14827 -> 14186;
14827 -> 14826;
14828 -> 14827;
14828 -> 14823;
14828 -> 14826;
14829 -> 14828;
14829 -> 14185;
14830 -> 14188;
14830 -> 14185;
14831 -> 14829;
14831 -> 14192;
14831 -> 14185;
14832 -> 14185;
14833 -> 14190;
14833 -> 14832;
14833 -> 14185;
14834 -> 14823;
14834 -> 14192;
14834 -> 14833;
14835 -> 14833;
14836 -> 14185;
14837 -> 14189;
14837 -> 14836;
14837 -> 14185;
14838 -> 14185;
14839 -> 14186;
14839 -> 14838;
14840 -> 14839;
14840 -> 14829;
14840 -> 14838;
14841 -> 14840;
14841 -> 14185;
14842 -> 14185;
14843 -> 14841;
14843 -> 14842;
14844 -> 14842;
14845 -> 14843;
14845 -> 14844;
14846 -> 14845;
14846 -> 14842;
14847 -> 14843;
14847 -> 14842;
14848 -> 14843;
14848 -> 14829;
14848 -> 0;
14848 -> 14842;
14849 -> 14837;
14849 -> 14846;
14849 -> 14185;
14850 -> 14185;
14851 -> 14192;
14851 -> 14850;
14852 -> 0;
14852 -> 14850;
14853 -> 14851;
14853 -> 14831;
14853 -> 0;
14853 -> 14850;
14854 -> 0;
14854 -> 14853;
14855 -> 14854;
14855 -> 14850;
14856 -> 14855;
14856 -> 14185;
14857 -> 14849;
14857 -> 14856;
14857 -> 14185;
14858 -> 0;
14858 -> 14192;
14858 -> 14857;
14859 -> 14817;
14859 -> 14185;
14860 -> 14134;
14861 -> 14160;
14861 -> 14860;
14861 -> 14134;
14862 -> 14171;
14862 -> 14134;
14863 -> 13977;
14863 -> 14862;
14863 -> 14197;
14863 -> 14199;
14863 -> 14200;
14863 -> 14201;
14863 -> 14202;
14863 -> 14204;
14863 -> 14825;
14863 -> 14834;
14863 -> 14831;
14863 -> 14858;
14863 -> 14209;
14863 -> 14210;
14863 -> 14211;
14863 -> 14212;
14863 -> 14213;
14863 -> 14214;
14863 -> 14216;
14863 -> 14217;
14863 -> 14219;
14863 -> 14220;
14863 -> 14808;
14863 -> 14809;
14863 -> 14810;
14863 -> 14824;
14863 -> 14120;
14863 -> 14121;
14863 -> 14122;
14863 -> 14123;
14863 -> 14124;
14863 -> 14126;
14863 -> 14128;
14863 -> 14215;
14863 -> 14218;
14863 -> 14829;
14863 -> 13980;
14863 -> 13985;
14864 -> 14863;
14865 -> 14864;
14865 -> 14863;
14866 -> 14863;
14867 -> 14863;
14868 -> 14864;
14868 -> 14863;
14869 -> 14866;
14869 -> 14863;
14870 -> 14867;
14870 -> 14863;
14871 -> 14863;
14872 -> 14863;
14873 -> 14863;
14874 -> 14863;
14875 -> 14872;
14875 -> 14863;
14876 -> 14863;
14877 -> 14874;
14877 -> 14876;
14878 -> 14874;
14878 -> 14876;
14879 -> 14874;
14879 -> 14876;
14880 -> 14874;
14880 -> 14876;
14881 -> 14874;
14881 -> 14876;
14882 -> 14874;
14882 -> 14876;
14883 -> 14875;
14883 -> 14876;
14884 -> 14874;
14884 -> 14876;
14885 -> 14877;
14885 -> 14876;
14886 -> 14878;
14886 -> 14876;
14887 -> 14879;
14887 -> 14876;
14888 -> 14880;
14888 -> 14876;
14889 -> 14882;
14889 -> 14876;
14890 -> 14883;
14890 -> 14876;
14891 -> 14876;
14892 -> 14885;
14892 -> 14891;
14893 -> 14886;
14893 -> 14891;
14894 -> 14887;
14894 -> 14891;
14895 -> 14888;
14895 -> 14891;
14896 -> 14889;
14896 -> 14891;
14897 -> 14890;
14897 -> 14891;
14898 -> 14884;
14898 -> 14891;
14899 -> 14884;
14899 -> 14891;
14900 -> 14884;
14900 -> 14891;
14901 -> 14884;
14901 -> 14891;
14902 -> 14884;
14902 -> 14891;
14903 -> 14894;
14903 -> 14863;
14903 -> 14891;
14904 -> 14891;
14905 -> 14893;
14905 -> 14904;
14905 -> 14891;
14906 -> 14891;
14907 -> 14896;
14907 -> 14906;
14907 -> 14891;
14908 -> 14891;
14909 -> 14891;
14910 -> 14892;
14910 -> 14894;
14910 -> 14863;
14910 -> 14891;
14911 -> 14910;
14911 -> 14896;
14912 -> 14896;
14913 -> 14911;
14913 -> 14884;
14913 -> 14896;
14914 -> 14884;
14914 -> 14913;
14914 -> 14896;
14915 -> 14910;
14915 -> 14896;
14916 -> 14884;
14916 -> 14913;
14916 -> 14910;
14916 -> 14896;
14917 -> 14884;
14917 -> 14913;
14917 -> 14896;
14918 -> 14910;
14918 -> 14896;
14919 -> 14895;
14919 -> 14910;
14919 -> 14891;
14920 -> 0;
14920 -> 14891;
14921 -> 14909;
14921 -> 14891;
14922 -> 14884;
14922 -> 14876;
14923 -> 14884;
14923 -> 14876;
14924 -> 14876;
14925 -> 14881;
14925 -> 14863;
14925 -> 14924;
14925 -> 14876;
14926 -> 14882;
14926 -> 14884;
14926 -> 14876;
14927 -> 14881;
14927 -> 14884;
14927 -> 14876;
14928 -> 14917;
14928 -> 14884;
14928 -> 14876;
14929 -> 14863;
14930 -> 14871;
14930 -> 14929;
14930 -> 14863;
14931 -> 13977;
14931 -> 14874;
14931 -> 14910;
14931 -> 14884;
14931 -> 14893;
14931 -> 14913;
14931 -> 14919;
14931 -> 14894;
14931 -> 14926;
14931 -> 14928;
14931 -> 14927;
14931 -> 14891;
14931 -> 14863;
14932 -> 14931;
14933 -> 14932;
14933 -> 14931;
14934 -> 14931;
14935 -> 14931;
14936 -> 14932;
14936 -> 14931;
14937 -> 14934;
14937 -> 14931;
14938 -> 14935;
14938 -> 14931;
14939 -> 14931;
14940 -> 14931;
14941 -> 14931;
14942 -> 14940;
14942 -> 14931;
14943 -> 14942;
14943 -> 14931;
14944 -> 14943;
14944 -> 14940;
14945 -> 14940;
14946 -> 14940;
14947 -> 14940;
14948 -> 14940;
14949 -> 14940;
14950 -> 14940;
14950 -> 14931;
14951 -> 14940;
14952 -> 14940;
14953 -> 14940;
14954 -> 14940;
14955 -> 14940;
14956 -> 0;
14956 -> 14940;
14957 -> 14954;
14957 -> 14940;
14958 -> 14940;
14958 -> 14931;
14959 -> 14940;
14959 -> 14931;
14960 -> 14931;
14961 -> 14931;
14962 -> 14939;
14962 -> 14961;
14962 -> 14931;
14963 -> 14940;
14964 -> 14963;
14964 -> 14940;
14965 -> 14940;
14966 -> 14940;
14967 -> 14963;
14967 -> 14940;
14968 -> 14965;
14968 -> 14940;
14969 -> 14966;
14969 -> 14940;
14970 -> 14940;
14971 -> 14940;
14972 -> 14940;
14973 -> 14972;
14973 -> 14940;
14974 -> 14973;
14974 -> 14940;
14975 -> 14940;
14976 -> 14940;
14977 -> 14940;
14978 -> 14970;
14978 -> 14977;
14978 -> 14940;
14979 -> 14963;
14980 -> 14979;
14980 -> 14963;
14981 -> 14980;
14981 -> 14963;
14982 -> 14963;
14983 -> 14963;
14984 -> 14963;
14985 -> 14963;
14986 -> 14963;
14987 -> 14963;
14987 -> 14940;
14988 -> 14963;
14989 -> 14963;
14990 -> 14963;
14991 -> 14963;
14992 -> 14963;
14993 -> 0;
14993 -> 14963;
14994 -> 14991;
14994 -> 14963;
14995 -> 14963;
14996 -> 14963;
14997 -> 14963;
14998 -> 14963;
14999 -> 14996;
14999 -> 14963;
15000 -> 14997;
15000 -> 14963;
15001 -> 14963;
15002 -> 14963;
15003 -> 14963;
15004 -> 14963;
15005 -> 15001;
15005 -> 15004;
15005 -> 14963;
15006 -> 14996;
15006 -> 14963;
15007 -> 14996;
15008 -> 15007;
15008 -> 14996;
15009 -> 15008;
15009 -> 14996;
15010 -> 14996;
15011 -> 14996;
15012 -> 14996;
15013 -> 14996;
15014 -> 14996;
15015 -> 14996;
15015 -> 14963;
15016 -> 14996;
15017 -> 14996;
15018 -> 14996;
15019 -> 14996;
15020 -> 14996;
15021 -> 0;
15021 -> 14996;
15022 -> 15019;
15022 -> 14996;
15023 -> 13972;
15024 -> 0;
15024 -> 13972;
15025 -> 15023;
15025 -> 15024;
15025 -> 13977;
15025 -> 14996;
15025 -> 13972;
15026 -> 15025;
15026 -> 15023;
15027 -> 15026;
15027 -> 15025;
15027 -> 15023;
15028 -> 13977;
15028 -> 15027;
15028 -> 13972;
15029 -> 13972;
15030 -> 13981;
15030 -> 15029;
15030 -> 13972;
15031 -> 13970;
15031 -> 15028;
15031 -> 13972;
15032 -> 15027;
15032 -> 13972;
15033 -> 13972;
15034 -> 13972;
15035 -> 15031;
15035 -> 15034;
15035 -> 13972;
15036 -> 15027;
15036 -> 15035;
15037 -> 15035;
15038 -> 15036;
15038 -> 15037;
15039 -> 13976;
15039 -> 15037;
15040 -> 15037;
15041 -> 15039;
15041 -> 15031;
15041 -> 15040;
15041 -> 15037;
15042 -> 15037;
15043 -> 15039;
15043 -> 15031;
15043 -> 15042;
15044 -> 15043;
15044 -> 15037;
15045 -> 15038;
15045 -> 15031;
15045 -> 15037;
15046 -> 15045;
15047 -> 15046;
15048 -> 15046;
15049 -> 15046;
15049 -> 15048;
15050 -> 15049;
15050 -> 15031;
15050 -> 15048;
15051 -> 15050;
15051 -> 15046;
15052 -> 15046;
15053 -> 15039;
15053 -> 15031;
15053 -> 15051;
15053 -> 15052;
15053 -> 15046;
15054 -> 15053;
15054 -> 15046;
15055 -> 15046;
15056 -> 15046;
15056 -> 15055;
15057 -> 15056;
15057 -> 15053;
15057 -> 15055;
15058 -> 15057;
15058 -> 15046;
15059 -> 15044;
15059 -> 15058;
15059 -> 15046;
15060 -> 15053;
15061 -> 15053;
15062 -> 15053;
15063 -> 15053;
15063 -> 15062;
15064 -> 15063;
15064 -> 15053;
15064 -> 15062;
15065 -> 15064;
15065 -> 15053;
15066 -> 15044;
15066 -> 15065;
15066 -> 15053;
15067 -> 15035;
15068 -> 13908;
15069 -> 13900;
15070 -> 13894;
15071 -> 13894;
15072 -> 13894;
15073 -> 15072;
15073 -> 13894;
15074 -> 13895;
15074 -> 13894;
15075 -> 15071;
15075 -> 13894;
15076 -> 13896;
15076 -> 15053;
15076 -> 15074;
15076 -> 15075;
15076 -> 13894;
15077 -> 13895;
15077 -> 15076;
15078 -> 15072;
15078 -> 15076;
15079 -> 13896;
15079 -> 15076;
15079 -> 15077;
15079 -> 15078;
15079 -> 15073;
15080 -> 0;
15080 -> 13894;
15081 -> 15079;
15082 -> 15079;
15083 -> 15079;
15084 -> 15079;
15085 -> 15079;
15086 -> 15079;
15087 -> 15079;
15088 -> 15079;
15089 -> 15079;
15090 -> 15079;
15091 -> 15079;
15092 -> 15079;
15093 -> 15079;
15094 -> 15079;
15095 -> 15092;
15095 -> 15079;
15096 -> 15079;
15097 -> 15079;
15098 -> 15079;
15099 -> 15098;
15099 -> 15079;
15100 -> 15099;
15100 -> 15079;
15101 -> 15079;
15102 -> 15079;
15103 -> 15079;
15104 -> 15079;
15105 -> 15079;
15106 -> 15079;
15107 -> 15079;
15108 -> 15079;
15109 -> 15079;
15110 -> 15079;
15111 -> 15079;
15112 -> 15110;
15112 -> 15079;
15113 -> 15079;
15114 -> 15096;
15114 -> 15113;
15114 -> 15079;
15115 -> 15092;
15115 -> 15079;
15116 -> 15092;
15116 -> 15079;
15117 -> 15092;
15118 -> 15117;
15118 -> 15092;
15119 -> 15118;
15119 -> 15092;
15120 -> 15092;
15121 -> 15092;
15122 -> 15092;
15123 -> 15092;
15124 -> 15092;
15125 -> 15092;
15125 -> 15079;
15126 -> 15092;
15127 -> 15092;
15128 -> 15092;
15129 -> 15092;
15130 -> 15092;
15131 -> 15129;
15131 -> 15092;
15132 -> 15092;
15133 -> 15092;
15134 -> 15092;
15135 -> 15092;
15136 -> 15092;
15137 -> 15092;
15138 -> 15092;
15139 -> 15092;
15140 -> 15136;
15140 -> 15139;
15140 -> 15092;
15141 -> 15079;
15142 -> 15090;
15142 -> 15141;
15142 -> 15079;
15143 -> 15092;
15144 -> 15092;
15145 -> 15144;
15145 -> 15092;
15146 -> 15092;
15147 -> 15092;
15148 -> 15145;
15148 -> 15092;
15149 -> 15079;
15150 -> 0;
15150 -> 15079;
15151 -> 15092;
15152 -> 15092;
15153 -> 15092;
15154 -> 15092;
15155 -> 15092;
15156 -> 15092;
15157 -> 15092;
15158 -> 15092;
15159 -> 15092;
15160 -> 15092;
15161 -> 15092;
15162 -> 15160;
15162 -> 15161;
15162 -> 15092;
15163 -> 15144;
15164 -> 15144;
15165 -> 15144;
15166 -> 15163;
15166 -> 15144;
15167 -> 15092;
15168 -> 0;
15168 -> 15092;
15169 -> 15144;
15170 -> 15144;
15171 -> 15144;
15172 -> 15144;
15173 -> 15144;
15174 -> 15144;
15175 -> 15144;
15176 -> 15144;
15177 -> 15144;
15178 -> 15144;
15179 -> 15144;
15180 -> 15144;
15181 -> 15144;
15182 -> 15144;
15183 -> 15144;
15184 -> 15144;
15185 -> 15144;
15186 -> 15185;
15186 -> 15144;
15187 -> 15186;
15187 -> 15144;
15188 -> 15144;
15189 -> 15144;
15190 -> 15144;
15191 -> 15144;
15192 -> 15144;
15193 -> 15144;
15194 -> 15144;
15195 -> 15144;
15196 -> 15144;
15197 -> 15144;
15198 -> 15144;
15199 -> 15197;
15199 -> 15144;
15200 -> 15144;
15201 -> 15183;
15201 -> 15200;
15201 -> 15144;
15202 -> 15144;
15203 -> 15178;
15203 -> 15202;
15203 -> 15144;
15204 -> 15144;
15205 -> 0;
15205 -> 15144;
15206 -> 13631;
15207 -> 13892;
15207 -> 15206;
15207 -> 13631;
15208 -> 13633;
15208 -> 15144;
15208 -> 15207;
15209 -> 13633;
15209 -> 15207;
15210 -> 13892;
15210 -> 15144;
15210 -> 15207;
15211 -> 15207;
15212 -> 15207;
15213 -> 15208;
15213 -> 15212;
15214 -> 15209;
15214 -> 15212;
15215 -> 15210;
15215 -> 15212;
15216 -> 15211;
15216 -> 15212;
15217 -> 15212;
15218 -> 15215;
15218 -> 15210;
15218 -> 15217;
15218 -> 15212;
15219 -> 13635;
15219 -> 15215;
15219 -> 15207;
15220 -> 13635;
15220 -> 15219;
15220 -> 13631;
15221 -> 1;
15222 -> 1;
15223 -> 15221;
15223 -> 15222;
15224 -> 15220;
15224 -> 15222;
15225 -> 15222;
15226 -> 15225;
15226 -> 15222;
15227 -> 15222;
15228 -> 15224;
15228 -> 15227;
15229 -> 15227;
15230 -> 15228;
15230 -> 15220;
15230 -> 15229;
15230 -> 15227;
15231 -> 15228;
15231 -> 15220;
15231 -> 15230;
15232 -> 15230;
15233 -> 15232;
15234 -> 15232;
15235 -> 15232;
15236 -> 15232;
15237 -> 15235;
15237 -> 15236;
15237 -> 15232;
15238 -> 15237;
15239 -> 15233;
15239 -> 15238;
15239 -> 15237;
15240 -> 15239;
15241 -> 15235;
15241 -> 15237;
15242 -> 15240;
15242 -> 15241;
15242 -> 15220;
15242 -> 15237;
15243 -> 15242;
15244 -> 15234;
15244 -> 15243;
15245 -> 15240;
15245 -> 15242;
15245 -> 15244;
15246 -> 15244;
15247 -> 15244;
15248 -> 15245;
15248 -> 15247;
15249 -> 15246;
15249 -> 15247;
15250 -> 15247;
15251 -> 15248;
15251 -> 15250;
15251 -> 15245;
15251 -> 15242;
15251 -> 15247;
15252 -> 15247;
15253 -> 15251;
15253 -> 15252;
15254 -> 15247;
15255 -> 15253;
15255 -> 15254;
15256 -> 15249;
15256 -> 15254;
15257 -> 15249;
15257 -> 15247;
15258 -> 15248;
15258 -> 15249;
15258 -> 15247;
15259 -> 15242;
15259 -> 15246;
15259 -> 15255;
15259 -> 15257;
15259 -> 15258;
15259 -> 15251;
15259 -> 15244;
15260 -> 15232;
15260 -> 15259;
15261 -> 15259;
15262 -> 15259;
15263 -> 15261;
15263 -> 15262;
15264 -> 15263;
15264 -> 15259;
15264 -> 15262;
15265 -> 15264;
15265 -> 15259;
15266 -> 15259;
15267 -> 15259;
15268 -> 15265;
15268 -> 15267;
15269 -> 15268;
15269 -> 15265;
15269 -> 15267;
15270 -> 15260;
15270 -> 15269;
15271 -> 15259;
15271 -> 15269;
15272 -> 15269;
15273 -> 15269;
15274 -> 15270;
15274 -> 15273;
15275 -> 15271;
15275 -> 15273;
15276 -> 15271;
15276 -> 15273;
15277 -> 15272;
15277 -> 15273;
15278 -> 15272;
15278 -> 15273;
15280 -> 15279;
15282 -> 15281;
15284 -> 15283;
15286 -> 15285;
15288 -> 15287;
15290 -> 15289;
15291 -> 0;
15293 -> 15280;
15293 -> 15292;
15294 -> 15282;
15294 -> 15292;
15295 -> 15284;
15295 -> 15292;
15296 -> 15286;
15296 -> 15292;
15297 -> 15288;
15297 -> 15292;
15298 -> 15290;
15298 -> 15292;
15299 -> 15291;
15299 -> 15292;
15300 -> 15292;
15301 -> 15300;
15301 -> 15292;
15302 -> 15300;
15302 -> 15292;
15303 -> 15300;
15303 -> 15292;
15304 -> 15300;
15304 -> 15292;
15305 -> 15300;
15305 -> 15292;
15306 -> 15300;
15306 -> 15292;
15307 -> 15300;
15307 -> 15292;
15308 -> 15294;
15308 -> 15292;
15309 -> 15292;
15310 -> 15293;
15310 -> 15300;
15310 -> 15292;
15311 -> 15294;
15311 -> 15300;
15311 -> 15292;
15312 -> 15295;
15312 -> 15300;
15312 -> 15292;
15313 -> 15296;
15313 -> 15300;
15313 -> 15292;
15314 -> 15297;
15314 -> 15300;
15314 -> 15292;
15315 -> 15298;
15315 -> 15300;
15315 -> 15292;
15316 -> 15299;
15316 -> 15300;
15316 -> 15292;
15317 -> 15300;
15317 -> 15316;
15317 -> 0;
15317 -> 15292;
15318 -> 15292;
15319 -> 15298;
15319 -> 15292;
15320 -> 15292;
15322 -> 15321;
15324 -> 15323;
15326 -> 15325;
15328 -> 15327;
15330 -> 15329;
15332 -> 15331;
15333 -> 0;
15335 -> 15322;
15335 -> 15334;
15336 -> 15324;
15336 -> 15334;
15337 -> 15326;
15337 -> 15334;
15338 -> 15328;
15338 -> 15334;
15339 -> 15330;
15339 -> 15334;
15340 -> 15332;
15340 -> 15334;
15341 -> 15333;
15341 -> 15334;
15342 -> 15334;
15343 -> 15342;
15343 -> 15334;
15344 -> 15342;
15344 -> 15334;
15345 -> 15342;
15345 -> 15334;
15346 -> 15342;
15346 -> 15334;
15347 -> 15342;
15347 -> 15334;
15348 -> 15342;
15348 -> 15334;
15349 -> 15342;
15349 -> 15334;
15350 -> 15336;
15350 -> 15335;
15350 -> 15334;
15351 -> 15334;
15352 -> 15335;
15352 -> 15342;
15352 -> 15334;
15353 -> 15336;
15353 -> 15342;
15353 -> 15334;
15354 -> 15337;
15354 -> 15342;
15354 -> 15334;
15355 -> 15338;
15355 -> 15342;
15355 -> 15334;
15356 -> 15339;
15356 -> 15342;
15356 -> 15334;
15357 -> 15340;
15357 -> 15342;
15357 -> 15334;
15358 -> 15341;
15358 -> 15342;
15358 -> 15334;
15359 -> 15342;
15359 -> 15358;
15359 -> 0;
15359 -> 15334;
15360 -> 15334;
15361 -> 15340;
15361 -> 15334;
15362 -> 15334;
15364 -> 15363;
15366 -> 15365;
15368 -> 15367;
15370 -> 15369;
15372 -> 15371;
15374 -> 15373;
15375 -> 0;
15377 -> 15364;
15377 -> 15376;
15378 -> 15366;
15378 -> 15376;
15379 -> 15368;
15379 -> 15376;
15380 -> 15370;
15380 -> 15376;
15381 -> 15372;
15381 -> 15376;
15382 -> 15374;
15382 -> 15376;
15383 -> 15375;
15383 -> 15376;
15384 -> 15376;
15385 -> 15384;
15385 -> 15376;
15386 -> 15384;
15386 -> 15376;
15387 -> 15384;
15387 -> 15376;
15388 -> 15384;
15388 -> 15376;
15389 -> 15384;
15389 -> 15376;
15390 -> 15384;
15390 -> 15376;
15391 -> 15384;
15391 -> 15376;
15392 -> 15378;
15392 -> 15377;
15392 -> 15376;
15393 -> 15376;
15394 -> 15377;
15394 -> 15384;
15394 -> 15376;
15395 -> 15378;
15395 -> 15384;
15395 -> 15376;
15396 -> 15379;
15396 -> 15384;
15396 -> 15376;
15397 -> 15380;
15397 -> 15384;
15397 -> 15376;
15398 -> 15381;
15398 -> 15384;
15398 -> 15376;
15399 -> 15382;
15399 -> 15384;
15399 -> 15376;
15400 -> 15383;
15400 -> 15384;
15400 -> 15376;
15401 -> 15384;
15401 -> 15400;
15401 -> 0;
15401 -> 15376;
15402 -> 15376;
15403 -> 15382;
15403 -> 15376;
15404 -> 15376;
15406 -> 15405;
15408 -> 15407;
15410 -> 15409;
15412 -> 15411;
15414 -> 15413;
15416 -> 15415;
15417 -> 0;
15419 -> 15406;
15419 -> 15418;
15420 -> 15408;
15420 -> 15418;
15421 -> 15410;
15421 -> 15418;
15422 -> 15412;
15422 -> 15418;
15423 -> 15414;
15423 -> 15418;
15424 -> 15416;
15424 -> 15418;
15425 -> 15417;
15425 -> 15418;
15426 -> 15418;
15427 -> 15426;
15427 -> 15418;
15428 -> 15426;
15428 -> 15418;
15429 -> 15426;
15429 -> 15418;
15430 -> 15426;
15430 -> 15418;
15431 -> 15426;
15431 -> 15418;
15432 -> 15426;
15432 -> 15418;
15433 -> 15426;
15433 -> 15418;
15434 -> 15420;
15434 -> 15419;
15434 -> 15418;
15435 -> 15418;
15436 -> 15419;
15436 -> 15426;
15436 -> 15418;
15437 -> 15420;
15437 -> 15426;
15437 -> 15418;
15438 -> 15421;
15438 -> 15426;
15438 -> 15418;
15439 -> 15422;
15439 -> 15426;
15439 -> 15418;
15440 -> 15423;
15440 -> 15426;
15440 -> 15418;
15441 -> 15424;
15441 -> 15426;
15441 -> 15418;
15442 -> 15425;
15442 -> 15426;
15442 -> 15418;
15443 -> 15426;
15443 -> 15442;
15443 -> 0;
15443 -> 15418;
15444 -> 15418;
15445 -> 15424;
15445 -> 15418;
15446 -> 15426;
15446 -> 15442;
15446 -> 0;
15446 -> 15445;
15447 -> 15446;
15447 -> 15426;
15447 -> 15445;
15448 -> 15418;
15450 -> 15449;
15452 -> 15451;
15454 -> 15453;
15456 -> 15455;
15458 -> 15457;
15460 -> 15459;
15461 -> 0;
15463 -> 15450;
15463 -> 15462;
15464 -> 15452;
15464 -> 15462;
15465 -> 15454;
15465 -> 15462;
15466 -> 15456;
15466 -> 15462;
15467 -> 15458;
15467 -> 15462;
15468 -> 15460;
15468 -> 15462;
15469 -> 15461;
15469 -> 15462;
15470 -> 15462;
15471 -> 15470;
15471 -> 15462;
15472 -> 15470;
15472 -> 15462;
15473 -> 15470;
15473 -> 15462;
15474 -> 15470;
15474 -> 15462;
15475 -> 15470;
15475 -> 15462;
15476 -> 15470;
15476 -> 15462;
15477 -> 15470;
15477 -> 15462;
15478 -> 15464;
15478 -> 15463;
15478 -> 15462;
15479 -> 15462;
15480 -> 15463;
15480 -> 15470;
15480 -> 15462;
15481 -> 15464;
15481 -> 15470;
15481 -> 15462;
15482 -> 15465;
15482 -> 15470;
15482 -> 15462;
15483 -> 15466;
15483 -> 15470;
15483 -> 15462;
15484 -> 15467;
15484 -> 15470;
15484 -> 15462;
15485 -> 15468;
15485 -> 15470;
15485 -> 15462;
15486 -> 15469;
15486 -> 15470;
15486 -> 15462;
15487 -> 15470;
15487 -> 15486;
15487 -> 0;
15487 -> 15462;
15488 -> 15462;
15489 -> 15468;
15489 -> 15462;
15490 -> 15462;
15492 -> 15491;
15494 -> 15493;
15496 -> 15495;
15498 -> 15497;
15500 -> 15499;
15502 -> 15501;
15503 -> 0;
15505 -> 15492;
15505 -> 15504;
15506 -> 15494;
15506 -> 15504;
15507 -> 15496;
15507 -> 15504;
15508 -> 15498;
15508 -> 15504;
15509 -> 15500;
15509 -> 15504;
15510 -> 15502;
15510 -> 15504;
15511 -> 15503;
15511 -> 15504;
15512 -> 15504;
15513 -> 15512;
15513 -> 15504;
15514 -> 15512;
15514 -> 15504;
15515 -> 15512;
15515 -> 15504;
15516 -> 15512;
15516 -> 15504;
15517 -> 15512;
15517 -> 15504;
15518 -> 15512;
15518 -> 15504;
15519 -> 15512;
15519 -> 15504;
15520 -> 15506;
15520 -> 15505;
15520 -> 15504;
15521 -> 15504;
15522 -> 15505;
15522 -> 15512;
15522 -> 15504;
15523 -> 15506;
15523 -> 15512;
15523 -> 15504;
15524 -> 15507;
15524 -> 15512;
15524 -> 15504;
15525 -> 15508;
15525 -> 15512;
15525 -> 15504;
15526 -> 15509;
15526 -> 15512;
15526 -> 15504;
15527 -> 15510;
15527 -> 15512;
15527 -> 15504;
15528 -> 15511;
15528 -> 15512;
15528 -> 15504;
15529 -> 15512;
15529 -> 15528;
15529 -> 0;
15529 -> 15504;
15530 -> 15504;
15531 -> 15510;
15531 -> 15504;
15532 -> 15504;
15534 -> 15533;
15536 -> 15535;
15538 -> 15537;
15540 -> 15539;
15542 -> 15541;
15544 -> 15543;
15545 -> 0;
15547 -> 15534;
15547 -> 15546;
15548 -> 15536;
15548 -> 15546;
15549 -> 15538;
15549 -> 15546;
15550 -> 15540;
15550 -> 15546;
15551 -> 15542;
15551 -> 15546;
15552 -> 15544;
15552 -> 15546;
15553 -> 15545;
15553 -> 15546;
15554 -> 15546;
15555 -> 15554;
15555 -> 15546;
15556 -> 15554;
15556 -> 15546;
15557 -> 15554;
15557 -> 15546;
15558 -> 15554;
15558 -> 15546;
15559 -> 15554;
15559 -> 15546;
15560 -> 15554;
15560 -> 15546;
15561 -> 15554;
15561 -> 15546;
15562 -> 15548;
15562 -> 15546;
15563 -> 15546;
15564 -> 15547;
15564 -> 15554;
15564 -> 15546;
15565 -> 15548;
15565 -> 15554;
15565 -> 15546;
15566 -> 15549;
15566 -> 15554;
15566 -> 15546;
15567 -> 15550;
15567 -> 15554;
15567 -> 15546;
15568 -> 15551;
15568 -> 15554;
15568 -> 15546;
15569 -> 15552;
15569 -> 15554;
15569 -> 15546;
15570 -> 15553;
15570 -> 15554;
15570 -> 15546;
15571 -> 15554;
15571 -> 15570;
15571 -> 0;
15571 -> 15546;
15572 -> 15546;
15573 -> 15552;
15573 -> 15546;
15574 -> 15546;
15576 -> 15575;
15578 -> 15577;
15580 -> 15579;
15582 -> 15581;
15584 -> 15583;
15586 -> 15585;
15587 -> 0;
15588 -> 15587;
15590 -> 15576;
15590 -> 15589;
15591 -> 15578;
15591 -> 15589;
15592 -> 15580;
15592 -> 15589;
15593 -> 15582;
15593 -> 15589;
15594 -> 15584;
15594 -> 15589;
15595 -> 15586;
15595 -> 15589;
15596 -> 15588;
15596 -> 15589;
15597 -> 15589;
15598 -> 15597;
15598 -> 15589;
15599 -> 15597;
15599 -> 15589;
15600 -> 15597;
15600 -> 15589;
15601 -> 15597;
15601 -> 15589;
15602 -> 15597;
15602 -> 15589;
15603 -> 15597;
15603 -> 15589;
15604 -> 15597;
15604 -> 15589;
15605 -> 15591;
15605 -> 15589;
15606 -> 15589;
15607 -> 15590;
15607 -> 15597;
15607 -> 15589;
15608 -> 15591;
15608 -> 15597;
15608 -> 15589;
15609 -> 15592;
15609 -> 15597;
15609 -> 15589;
15610 -> 15593;
15610 -> 15597;
15610 -> 15589;
15611 -> 15594;
15611 -> 15597;
15611 -> 15589;
15612 -> 15595;
15612 -> 15597;
15612 -> 15589;
15613 -> 15596;
15613 -> 15597;
15613 -> 15589;
15614 -> 15597;
15614 -> 15613;
15614 -> 0;
15614 -> 15589;
15615 -> 15589;
15616 -> 15595;
15616 -> 15589;
15617 -> 15597;
15617 -> 15613;
15617 -> 0;
15617 -> 15616;
15618 -> 15617;
15618 -> 15597;
15618 -> 15616;
15619 -> 15589;
15621 -> 15620;
15623 -> 15622;
15625 -> 15624;
15627 -> 15626;
15629 -> 15628;
15631 -> 15630;
15632 -> 0;
15634 -> 15621;
15634 -> 15633;
15635 -> 15623;
15635 -> 15633;
15636 -> 15625;
15636 -> 15633;
15637 -> 15627;
15637 -> 15633;
15638 -> 15629;
15638 -> 15633;
15639 -> 15631;
15639 -> 15633;
15640 -> 15632;
15640 -> 15633;
15641 -> 15633;
15642 -> 15641;
15642 -> 15633;
15643 -> 15641;
15643 -> 15633;
15644 -> 15641;
15644 -> 15633;
15645 -> 15641;
15645 -> 15633;
15646 -> 15641;
15646 -> 15633;
15647 -> 15641;
15647 -> 15633;
15648 -> 15641;
15648 -> 15633;
15649 -> 15635;
15649 -> 15633;
15650 -> 15633;
15651 -> 15634;
15651 -> 15641;
15651 -> 15633;
15652 -> 15635;
15652 -> 15641;
15652 -> 15633;
15653 -> 15636;
15653 -> 15641;
15653 -> 15633;
15654 -> 15637;
15654 -> 15641;
15654 -> 15633;
15655 -> 15638;
15655 -> 15641;
15655 -> 15633;
15656 -> 15639;
15656 -> 15641;
15656 -> 15633;
15657 -> 15640;
15657 -> 15641;
15657 -> 15633;
15658 -> 15641;
15658 -> 15657;
15658 -> 0;
15658 -> 15633;
15659 -> 15633;
15660 -> 15639;
15660 -> 15633;
15661 -> 15641;
15661 -> 15657;
15661 -> 0;
15661 -> 15660;
15662 -> 15661;
15662 -> 15641;
15662 -> 15660;
15663 -> 15633;
15665 -> 15664;
15667 -> 15666;
15669 -> 15668;
15671 -> 15670;
15673 -> 15672;
15675 -> 15674;
15676 -> 0;
15678 -> 15665;
15678 -> 15677;
15679 -> 15667;
15679 -> 15677;
15680 -> 15669;
15680 -> 15677;
15681 -> 15671;
15681 -> 15677;
15682 -> 15673;
15682 -> 15677;
15683 -> 15675;
15683 -> 15677;
15684 -> 15676;
15684 -> 15677;
15685 -> 15677;
15686 -> 15685;
15686 -> 15677;
15687 -> 15685;
15687 -> 15677;
15688 -> 15685;
15688 -> 15677;
15689 -> 15685;
15689 -> 15677;
15690 -> 15685;
15690 -> 15677;
15691 -> 15685;
15691 -> 15677;
15692 -> 15685;
15692 -> 15677;
15693 -> 15679;
15693 -> 15677;
15694 -> 15677;
15695 -> 15678;
15695 -> 15685;
15695 -> 15677;
15696 -> 15679;
15696 -> 15685;
15696 -> 15677;
15697 -> 15680;
15697 -> 15685;
15697 -> 15677;
15698 -> 15681;
15698 -> 15685;
15698 -> 15677;
15699 -> 15682;
15699 -> 15685;
15699 -> 15677;
15700 -> 15683;
15700 -> 15685;
15700 -> 15677;
15701 -> 15684;
15701 -> 15685;
15701 -> 15677;
15702 -> 15685;
15702 -> 15701;
15702 -> 0;
15702 -> 15677;
15703 -> 15677;
15704 -> 15683;
15704 -> 15677;
15705 -> 15677;
15707 -> 15706;
15709 -> 15708;
15711 -> 15710;
15713 -> 15712;
15715 -> 15714;
15717 -> 15716;
15718 -> 0;
15719 -> 15718;
15719 -> 0;
15720 -> 15719;
15722 -> 15707;
15722 -> 15721;
15723 -> 15709;
15723 -> 15721;
15724 -> 15711;
15724 -> 15721;
15725 -> 15713;
15725 -> 15721;
15726 -> 15715;
15726 -> 15721;
15727 -> 15717;
15727 -> 15721;
15728 -> 15720;
15728 -> 15721;
15729 -> 15721;
15730 -> 15729;
15730 -> 15721;
15731 -> 15729;
15731 -> 15721;
15732 -> 15729;
15732 -> 15721;
15733 -> 15729;
15733 -> 15721;
15734 -> 15729;
15734 -> 15721;
15735 -> 15729;
15735 -> 15721;
15736 -> 15729;
15736 -> 15721;
15737 -> 15723;
15737 -> 15721;
15738 -> 15721;
15739 -> 15722;
15739 -> 15729;
15739 -> 15721;
15740 -> 15723;
15740 -> 15729;
15740 -> 15721;
15741 -> 15724;
15741 -> 15729;
15741 -> 15721;
15742 -> 15725;
15742 -> 15729;
15742 -> 15721;
15743 -> 15726;
15743 -> 15729;
15743 -> 15721;
15744 -> 15727;
15744 -> 15729;
15744 -> 15721;
15745 -> 15728;
15745 -> 15729;
15745 -> 15721;
15746 -> 15729;
15746 -> 15745;
15746 -> 0;
15746 -> 15721;
15747 -> 15721;
15748 -> 15727;
15748 -> 15721;
15749 -> 15721;
15751 -> 15750;
15753 -> 15752;
15755 -> 15754;
15757 -> 15756;
15759 -> 15758;
15761 -> 15760;
15762 -> 0;
15763 -> 15762;
15763 -> 0;
15764 -> 15763;
15766 -> 15751;
15766 -> 15765;
15767 -> 15753;
15767 -> 15765;
15768 -> 15755;
15768 -> 15765;
15769 -> 15757;
15769 -> 15765;
15770 -> 15759;
15770 -> 15765;
15771 -> 15761;
15771 -> 15765;
15772 -> 15764;
15772 -> 15765;
15773 -> 15765;
15774 -> 15773;
15774 -> 15765;
15775 -> 15773;
15775 -> 15765;
15776 -> 15773;
15776 -> 15765;
15777 -> 15773;
15777 -> 15765;
15778 -> 15773;
15778 -> 15765;
15779 -> 15773;
15779 -> 15765;
15780 -> 15773;
15780 -> 15765;
15781 -> 15767;
15781 -> 15765;
15782 -> 15765;
15783 -> 15766;
15783 -> 15773;
15783 -> 15765;
15784 -> 15767;
15784 -> 15773;
15784 -> 15765;
15785 -> 15768;
15785 -> 15773;
15785 -> 15765;
15786 -> 15769;
15786 -> 15773;
15786 -> 15765;
15787 -> 15770;
15787 -> 15773;
15787 -> 15765;
15788 -> 15771;
15788 -> 15773;
15788 -> 15765;
15789 -> 15772;
15789 -> 15773;
15789 -> 15765;
15790 -> 15773;
15790 -> 15789;
15790 -> 0;
15790 -> 15765;
15791 -> 15765;
15792 -> 15771;
15792 -> 15765;
15793 -> 15773;
15793 -> 15789;
15793 -> 0;
15793 -> 15792;
15794 -> 15793;
15794 -> 15773;
15794 -> 15792;
15795 -> 15765;
15797 -> 15796;
15799 -> 15798;
15801 -> 15800;
15803 -> 15802;
15805 -> 15804;
15807 -> 15806;
15808 -> 0;
15809 -> 15808;
15809 -> 0;
15810 -> 15809;
15812 -> 15797;
15812 -> 15811;
15813 -> 15799;
15813 -> 15811;
15814 -> 15801;
15814 -> 15811;
15815 -> 15803;
15815 -> 15811;
15816 -> 15805;
15816 -> 15811;
15817 -> 15807;
15817 -> 15811;
15818 -> 15810;
15818 -> 15811;
15819 -> 15811;
15820 -> 15819;
15820 -> 15811;
15821 -> 15819;
15821 -> 15811;
15822 -> 15819;
15822 -> 15811;
15823 -> 15819;
15823 -> 15811;
15824 -> 15819;
15824 -> 15811;
15825 -> 15819;
15825 -> 15811;
15826 -> 15819;
15826 -> 15811;
15827 -> 15813;
15827 -> 15811;
15828 -> 15811;
15829 -> 15812;
15829 -> 15819;
15829 -> 15811;
15830 -> 15813;
15830 -> 15819;
15830 -> 15811;
15831 -> 15814;
15831 -> 15819;
15831 -> 15811;
15832 -> 15815;
15832 -> 15819;
15832 -> 15811;
15833 -> 15816;
15833 -> 15819;
15833 -> 15811;
15834 -> 15817;
15834 -> 15819;
15834 -> 15811;
15835 -> 15818;
15835 -> 15819;
15835 -> 15811;
15836 -> 15819;
15836 -> 15835;
15836 -> 0;
15836 -> 15811;
15837 -> 15811;
15838 -> 15817;
15838 -> 15811;
15839 -> 15819;
15839 -> 15835;
15839 -> 0;
15839 -> 15838;
15840 -> 15839;
15840 -> 15819;
15840 -> 15838;
15841 -> 15811;
15843 -> 15842;
15845 -> 15844;
15847 -> 15846;
15849 -> 15848;
15851 -> 15850;
15853 -> 15852;
15854 -> 0;
15855 -> 15854;
15855 -> 0;
15856 -> 15855;
15858 -> 15843;
15858 -> 15857;
15859 -> 15845;
15859 -> 15857;
15860 -> 15847;
15860 -> 15857;
15861 -> 15849;
15861 -> 15857;
15862 -> 15851;
15862 -> 15857;
15863 -> 15853;
15863 -> 15857;
15864 -> 15856;
15864 -> 15857;
15865 -> 15857;
15866 -> 15865;
15866 -> 15857;
15867 -> 15865;
15867 -> 15857;
15868 -> 15865;
15868 -> 15857;
15869 -> 15865;
15869 -> 15857;
15870 -> 15865;
15870 -> 15857;
15871 -> 15865;
15871 -> 15857;
15872 -> 15865;
15872 -> 15857;
15873 -> 15859;
15873 -> 15857;
15874 -> 15857;
15875 -> 15858;
15875 -> 15865;
15875 -> 15857;
15876 -> 15859;
15876 -> 15865;
15876 -> 15857;
15877 -> 15860;
15877 -> 15865;
15877 -> 15857;
15878 -> 15861;
15878 -> 15865;
15878 -> 15857;
15879 -> 15862;
15879 -> 15865;
15879 -> 15857;
15880 -> 15863;
15880 -> 15865;
15880 -> 15857;
15881 -> 15864;
15881 -> 15865;
15881 -> 15857;
15882 -> 15865;
15882 -> 15881;
15882 -> 0;
15882 -> 15857;
15883 -> 15857;
15884 -> 15863;
15884 -> 15857;
15885 -> 15857;
15887 -> 15886;
15889 -> 15888;
15891 -> 15890;
15893 -> 15892;
15895 -> 15894;
15897 -> 15896;
15898 -> 0;
15899 -> 15898;
15899 -> 0;
15900 -> 15899;
15902 -> 15887;
15902 -> 15901;
15903 -> 15889;
15903 -> 15901;
15904 -> 15891;
15904 -> 15901;
15905 -> 15893;
15905 -> 15901;
15906 -> 15895;
15906 -> 15901;
15907 -> 15897;
15907 -> 15901;
15908 -> 15900;
15908 -> 15901;
15909 -> 15901;
15910 -> 15909;
15910 -> 15901;
15911 -> 15909;
15911 -> 15901;
15912 -> 15909;
15912 -> 15901;
15913 -> 15909;
15913 -> 15901;
15914 -> 15909;
15914 -> 15901;
15915 -> 15909;
15915 -> 15901;
15916 -> 15909;
15916 -> 15901;
15917 -> 15903;
15917 -> 15902;
15917 -> 15901;
15918 -> 15901;
15919 -> 15902;
15919 -> 15909;
15919 -> 15901;
15920 -> 15903;
15920 -> 15909;
15920 -> 15901;
15921 -> 15904;
15921 -> 15909;
15921 -> 15901;
15922 -> 15905;
15922 -> 15909;
15922 -> 15901;
15923 -> 15906;
15923 -> 15909;
15923 -> 15901;
15924 -> 15907;
15924 -> 15909;
15924 -> 15901;
15925 -> 15908;
15925 -> 15909;
15925 -> 15901;
15926 -> 15909;
15926 -> 15925;
15926 -> 0;
15926 -> 15901;
15927 -> 15901;
15928 -> 15907;
15928 -> 15901;
15929 -> 15909;
15929 -> 15925;
15929 -> 0;
15929 -> 15928;
15930 -> 15929;
15930 -> 15909;
15930 -> 15928;
15931 -> 15901;
15933 -> 15932;
15935 -> 15934;
15937 -> 15936;
15939 -> 15938;
15941 -> 15940;
15943 -> 15942;
15944 -> 0;
15945 -> 15944;
15945 -> 0;
15946 -> 15945;
15948 -> 15933;
15948 -> 15947;
15949 -> 15935;
15949 -> 15947;
15950 -> 15937;
15950 -> 15947;
15951 -> 15939;
15951 -> 15947;
15952 -> 15941;
15952 -> 15947;
15953 -> 15943;
15953 -> 15947;
15954 -> 15946;
15954 -> 15947;
15955 -> 15947;
15956 -> 15955;
15956 -> 15947;
15957 -> 15955;
15957 -> 15947;
15958 -> 15955;
15958 -> 15947;
15959 -> 15955;
15959 -> 15947;
15960 -> 15955;
15960 -> 15947;
15961 -> 15955;
15961 -> 15947;
15962 -> 15955;
15962 -> 15947;
15963 -> 15949;
15963 -> 15948;
15963 -> 15947;
15964 -> 15947;
15965 -> 15948;
15965 -> 15955;
15965 -> 15947;
15966 -> 15949;
15966 -> 15955;
15966 -> 15947;
15967 -> 15950;
15967 -> 15955;
15967 -> 15947;
15968 -> 15951;
15968 -> 15955;
15968 -> 15947;
15969 -> 15952;
15969 -> 15955;
15969 -> 15947;
15970 -> 15953;
15970 -> 15955;
15970 -> 15947;
15971 -> 15954;
15971 -> 15955;
15971 -> 15947;
15972 -> 15955;
15972 -> 15971;
15972 -> 0;
15972 -> 15947;
15973 -> 15947;
15974 -> 15953;
15974 -> 15947;
15975 -> 15947;
15977 -> 15976;
15979 -> 15978;
15981 -> 15980;
15983 -> 15982;
15985 -> 15984;
15987 -> 15986;
15988 -> 0;
15989 -> 15988;
15989 -> 0;
15990 -> 15989;
15992 -> 15977;
15992 -> 15991;
15993 -> 15979;
15993 -> 15991;
15994 -> 15981;
15994 -> 15991;
15995 -> 15983;
15995 -> 15991;
15996 -> 15985;
15996 -> 15991;
15997 -> 15987;
15997 -> 15991;
15998 -> 15990;
15998 -> 15991;
15999 -> 15991;
16000 -> 15999;
16000 -> 15991;
16001 -> 15999;
16001 -> 15991;
16002 -> 15999;
16002 -> 15991;
16003 -> 15999;
16003 -> 15991;
16004 -> 15999;
16004 -> 15991;
16005 -> 15999;
16005 -> 15991;
16006 -> 15999;
16006 -> 15991;
16007 -> 15993;
16007 -> 15991;
16008 -> 15991;
16009 -> 15992;
16009 -> 15999;
16009 -> 15991;
16010 -> 15993;
16010 -> 15999;
16010 -> 15991;
16011 -> 15994;
16011 -> 15999;
16011 -> 15991;
16012 -> 15995;
16012 -> 15999;
16012 -> 15991;
16013 -> 15996;
16013 -> 15999;
16013 -> 15991;
16014 -> 15997;
16014 -> 15999;
16014 -> 15991;
16015 -> 15998;
16015 -> 15999;
16015 -> 15991;
16016 -> 15999;
16016 -> 16015;
16016 -> 0;
16016 -> 15991;
16017 -> 15991;
16018 -> 15997;
16018 -> 15991;
16019 -> 15991;
16021 -> 16020;
16023 -> 16022;
16025 -> 16024;
16027 -> 16026;
16029 -> 16028;
16031 -> 16030;
16032 -> 0;
16033 -> 16032;
16033 -> 0;
16034 -> 16033;
16036 -> 16021;
16036 -> 16035;
16037 -> 16023;
16037 -> 16035;
16038 -> 16025;
16038 -> 16035;
16039 -> 16027;
16039 -> 16035;
16040 -> 16029;
16040 -> 16035;
16041 -> 16031;
16041 -> 16035;
16042 -> 16034;
16042 -> 16035;
16043 -> 16035;
16044 -> 16043;
16044 -> 16035;
16045 -> 16043;
16045 -> 16035;
16046 -> 16043;
16046 -> 16035;
16047 -> 16043;
16047 -> 16035;
16048 -> 16043;
16048 -> 16035;
16049 -> 16043;
16049 -> 16035;
16050 -> 16043;
16050 -> 16035;
16051 -> 16037;
16051 -> 16035;
16052 -> 16035;
16053 -> 16036;
16053 -> 16043;
16053 -> 16035;
16054 -> 16037;
16054 -> 16043;
16054 -> 16035;
16055 -> 16038;
16055 -> 16043;
16055 -> 16035;
16056 -> 16039;
16056 -> 16043;
16056 -> 16035;
16057 -> 16040;
16057 -> 16043;
16057 -> 16035;
16058 -> 16041;
16058 -> 16043;
16058 -> 16035;
16059 -> 16042;
16059 -> 16043;
16059 -> 16035;
16060 -> 16043;
16060 -> 16059;
16060 -> 0;
16060 -> 16035;
16061 -> 16035;
16062 -> 16041;
16062 -> 16035;
16063 -> 16035;
16064 -> 15490;
16065 -> 16064;
16065 -> 15480;
16065 -> 15481;
16065 -> 15482;
16065 -> 15483;
16065 -> 15484;
16065 -> 15485;
16065 -> 15486;
16066 -> 16065;
16067 -> 0;
16068 -> 16067;
16069 -> 16068;
16070 -> 0;
16071 -> 16070;
16072 -> 0;
16073 -> 16072;
16074 -> 15274;
16074 -> 15273;
16075 -> 15275;
16075 -> 15273;
16076 -> 15276;
16076 -> 15273;
16077 -> 15277;
16077 -> 15273;
16078 -> 15273;
16079 -> 16074;
16079 -> 16078;
16080 -> 16075;
16080 -> 16078;
16081 -> 16076;
16081 -> 16078;
16082 -> 16077;
16082 -> 16078;
16083 -> 15278;
16083 -> 16078;
16084 -> 16082;
16084 -> 16078;
16085 -> 16078;
16086 -> 16084;
16086 -> 16085;
16087 -> 16083;
16087 -> 16085;
16088 -> 16083;
16088 -> 16078;
16089 -> 16083;
16089 -> 16078;
16090 -> 16083;
16090 -> 16078;
16092 -> 16091;
16093 -> 16092;
16093 -> 16091;
16094 -> 16092;
16094 -> 16091;
16095 -> 16092;
16095 -> 16091;
16096 -> 16092;
16096 -> 16091;
16097 -> 16092;
16097 -> 16091;
16098 -> 16092;
16098 -> 16091;
16099 -> 16091;
16100 -> 16099;
16100 -> 16083;
16100 -> 16078;
16101 -> 16083;
16101 -> 16078;
16102 -> 16083;
16102 -> 16078;
16103 -> 16083;
16103 -> 16078;
16104 -> 16083;
16104 -> 16078;
16105 -> 16083;
16105 -> 16078;
16106 -> 13549;
16106 -> 16083;
16106 -> 16078;
16107 -> 16083;
16107 -> 16078;
16108 -> 16083;
16108 -> 16078;
16109 -> 16079;
16109 -> 16083;
16109 -> 16078;
16110 -> 16080;
16110 -> 16083;
16110 -> 16078;
16111 -> 16078;
16112 -> 16080;
16112 -> 16111;
16113 -> 16112;
16113 -> 16078;
16114 -> 16078;
16115 -> 16113;
16115 -> 16114;
16116 -> 16115;
16116 -> 16114;
16117 -> 0;
16117 -> 16116;
16118 -> 16117;
16118 -> 16078;
16119 -> 16081;
16119 -> 16078;
16120 -> 16078;
16121 -> 16118;
16121 -> 16120;
16122 -> 16119;
16122 -> 16120;
16123 -> 16083;
16123 -> 16120;
16124 -> 16120;
16125 -> 16123;
16125 -> 16124;
16126 -> 16125;
16126 -> 16109;
16126 -> 16124;
16127 -> 16126;
16127 -> 16120;
16128 -> 16120;
16129 -> 0;
16129 -> 16120;
16130 -> 16120;
16131 -> 16127;
16131 -> 16130;
16132 -> 16130;
16132 -> 16120;
16133 -> 0;
16133 -> 16132;
16134 -> 16121;
16134 -> 16120;
16135 -> 0;
16135 -> 16134;
16136 -> 16129;
16136 -> 16135;
16136 -> 16134;
16137 -> 16134;
16138 -> 16123;
16138 -> 16137;
16139 -> 16137;
16140 -> 16138;
16140 -> 16110;
16140 -> 16139;
16141 -> 16140;
16141 -> 16137;
16142 -> 16137;
16143 -> 16137;
16144 -> 16141;
16144 -> 16143;
16145 -> 16144;
16145 -> 16134;
16146 -> 16136;
16146 -> 0;
16146 -> 16145;
16147 -> 16120;
16148 -> 16133;
16148 -> 16120;
16149 -> 16146;
16149 -> 16120;
16150 -> 16122;
16150 -> 16120;
16151 -> 16147;
16151 -> 16120;
16152 -> 16120;
16153 -> 16148;
16153 -> 16152;
16154 -> 16149;
16154 -> 16152;
16155 -> 16150;
16155 -> 16152;
16156 -> 16151;
16156 -> 16152;
16157 -> 16123;
16157 -> 16152;
16158 -> 16152;
16159 -> 0;
16159 -> 16152;
16160 -> 16152;
16161 -> 16157;
16161 -> 16110;
16161 -> 16160;
16162 -> 16161;
16162 -> 15259;
16162 -> 16141;
16162 -> 16160;
16163 -> 16162;
16163 -> 16152;
16164 -> 16152;
16165 -> 16152;
16166 -> 16165;
16166 -> 16163;
16166 -> 16152;
16167 -> 16166;
16168 -> 16167;
16168 -> 16166;
16169 -> 16166;
16170 -> 16168;
16170 -> 16169;
16171 -> 16170;
16171 -> 16168;
16171 -> 16169;
16172 -> 16171;
16172 -> 16166;
16173 -> 16166;
16174 -> 16158;
16174 -> 16166;
16175 -> 16172;
16175 -> 16174;
16176 -> 16154;
16176 -> 16174;
16177 -> 16174;
16178 -> 16177;
16178 -> 15259;
16178 -> 16168;
16179 -> 16178;
16179 -> 16174;
16180 -> 16174;
16181 -> 16179;
16181 -> 16180;
16182 -> 16181;
16182 -> 16179;
16182 -> 16180;
16183 -> 16155;
16183 -> 16174;
16184 -> 16174;
16185 -> 16158;
16185 -> 16174;
16186 -> 16174;
16187 -> 16175;
16187 -> 16186;
16188 -> 16176;
16188 -> 16186;
16189 -> 16182;
16189 -> 16186;
16190 -> 16183;
16190 -> 16186;
16191 -> 16184;
16191 -> 16186;
16192 -> 16185;
16192 -> 16186;
16193 -> 16186;
16194 -> 16187;
16194 -> 16188;
16194 -> 16186;
16195 -> 16187;
16195 -> 16188;
16195 -> 16186;
16196 -> 16194;
16196 -> 0;
16196 -> 16186;
16197 -> 16195;
16197 -> 0;
16197 -> 16186;
16198 -> 16186;
16199 -> 16195;
16199 -> 16186;
16200 -> 16193;
16200 -> 16174;
16201 -> 16199;
16201 -> 16200;
16202 -> 16157;
16202 -> 16200;
16203 -> 16200;
16204 -> 16200;
16205 -> 16201;
16205 -> 16204;
16206 -> 16202;
16206 -> 16204;
16207 -> 16203;
16207 -> 16204;
16208 -> 16205;
16208 -> 16204;
16209 -> 16204;
16210 -> 16208;
16210 -> 16209;
16211 -> 16210;
16211 -> 0;
16211 -> 16209;
16212 -> 16211;
16213 -> 16204;
16214 -> 16206;
16214 -> 16213;
16215 -> 0;
16215 -> 16213;
16216 -> 16215;
16216 -> 16204;
16217 -> 16207;
16217 -> 16216;
16217 -> 16204;
16218 -> 16205;
16218 -> 0;
16218 -> 16204;
16219 -> 16204;
16220 -> 16217;
16220 -> 16218;
16220 -> 16204;
16221 -> 16205;
16221 -> 0;
16221 -> 16220;
16222 -> 16204;
16223 -> 16222;
16223 -> 16200;
16224 -> 16200;
16225 -> 16223;
16225 -> 16224;
16225 -> 16200;
16226 -> 16159;
16226 -> 0;
16226 -> 16166;
16227 -> 16199;
16227 -> 16226;
16228 -> 16227;
16228 -> 0;
16228 -> 16152;
16229 -> 16152;
16230 -> 16164;
16230 -> 16152;
16231 -> 16152;
16232 -> 16157;
16232 -> 16231;
16233 -> 16231;
16234 -> 16232;
16234 -> 16110;
16234 -> 16233;
16235 -> 16234;
16235 -> 15259;
16235 -> 16179;
16235 -> 16233;
16236 -> 16235;
16236 -> 16231;
16237 -> 16236;
16237 -> 16152;
16238 -> 0;
16238 -> 16152;
16239 -> 16152;
16240 -> 16238;
16240 -> 16239;
16241 -> 16237;
16241 -> 16240;
16241 -> 16152;
16242 -> 16227;
16242 -> 16152;
16244 -> 16243;
16245 -> 16123;
16245 -> 16120;
16246 -> 16242;
16246 -> 16120;
16247 -> 16122;
16247 -> 16120;
16248 -> 16120;
16249 -> 16245;
16249 -> 16248;
16250 -> 16246;
16250 -> 16248;
16251 -> 16247;
16251 -> 16248;
16252 -> 16249;
16252 -> 16248;
16253 -> 16250;
16253 -> 16248;
16254 -> 16248;
16255 -> 16249;
16255 -> 16254;
16256 -> 16254;
16257 -> 16255;
16257 -> 16110;
16257 -> 16256;
16258 -> 16256;
16259 -> 16257;
16259 -> 16258;
16260 -> 16259;
16260 -> 15259;
16260 -> 16179;
16260 -> 16258;
16261 -> 16260;
16261 -> 16256;
16262 -> 16256;
16263 -> 16261;
16264 -> 16263;
16264 -> 16261;
16265 -> 16261;
16266 -> 16261;
16267 -> 16264;
16267 -> 16266;
16268 -> 16267;
16268 -> 16264;
16268 -> 16266;
16269 -> 16268;
16269 -> 16254;
16270 -> 16269;
16270 -> 16248;
16271 -> 16248;
16272 -> 16251;
16272 -> 16248;
16273 -> 16248;
16274 -> 16252;
16274 -> 16273;
16275 -> 16253;
16275 -> 16273;
16276 -> 16270;
16276 -> 16273;
16277 -> 16272;
16277 -> 16273;
16278 -> 16275;
16278 -> 0;
16278 -> 16273;
16279 -> 16120;
16280 -> 16242;
16280 -> 0;
16280 -> 16120;
16281 -> 16120;
16282 -> 16193;
16282 -> 16280;
16282 -> 16120;
16283 -> 0;
16283 -> 16120;
16284 -> 16242;
16284 -> 16283;
16284 -> 16120;
16285 -> 16193;
16285 -> 16284;
16285 -> 16120;
16286 -> 16121;
16286 -> 16120;
16287 -> 16242;
16287 -> 16120;
16288 -> 16078;
16289 -> 16080;
16289 -> 16288;
16290 -> 16289;
16290 -> 15259;
16290 -> 16270;
16290 -> 16288;
16291 -> 16290;
16291 -> 16078;
16292 -> 16291;
16292 -> 16270;
16293 -> 16081;
16293 -> 16292;
16293 -> 15232;
16293 -> 16270;
16293 -> 16291;
16294 -> 16287;
16294 -> 0;
16294 -> 16078;
16295 -> 16078;
16296 -> 16294;
16296 -> 16295;
16296 -> 16078;
16297 -> 16287;
16297 -> 16083;
16297 -> 16078;
16298 -> 16294;
16298 -> 0;
16298 -> 16078;
16299 -> 16298;
16299 -> 16078;
16300 -> 16299;
16301 -> 16083;
16301 -> 16300;
16302 -> 16300;
16303 -> 16301;
16303 -> 16302;
16304 -> 16303;
16304 -> 16109;
16304 -> 16302;
16305 -> 16304;
16305 -> 16300;
16306 -> 16300;
16307 -> 16305;
16307 -> 16306;
16308 -> 16306;
16308 -> 16300;
16309 -> 16300;
16310 -> 16301;
16310 -> 16309;
16311 -> 16310;
16311 -> 16109;
16311 -> 16309;
16312 -> 16311;
16312 -> 16300;
16313 -> 16300;
16314 -> 16312;
16314 -> 16313;
16315 -> 16313;
16316 -> 16314;
16316 -> 16293;
16316 -> 16315;
16317 -> 16316;
16317 -> 16293;
16317 -> 16315;
16318 -> 16300;
16319 -> 16317;
16319 -> 16318;
16320 -> 16308;
16320 -> 16319;
16320 -> 16300;
16321 -> 0;
16321 -> 16320;
16323 -> 16322;
16325 -> 16324;
16326 -> 16323;
16326 -> 16325;
16327 -> 16326;
16329 -> 16328;
16330 -> 16327;
16330 -> 16329;
16331 -> 16330;
16333 -> 16332;
16334 -> 16331;
16334 -> 16333;
16335 -> 16334;
16337 -> 16336;
16338 -> 16335;
16338 -> 16337;
16339 -> 16338;
16341 -> 16340;
16342 -> 16339;
16342 -> 16341;
16343 -> 16342;
16345 -> 16344;
16347 -> 16346;
16347 -> 16325;
16349 -> 16347;
16349 -> 16348;
16350 -> 16349;
16352 -> 16351;
16352 -> 16329;
16354 -> 16352;
16354 -> 16353;
16355 -> 16354;
16357 -> 16356;
16357 -> 16341;
16359 -> 16357;
16359 -> 16358;
16360 -> 16359;
16362 -> 16361;
16362 -> 16345;
16364 -> 16362;
16364 -> 16363;
16365 -> 16364;
16367 -> 16366;
16367 -> 16331;
16368 -> 16367;
16370 -> 16369;
16370 -> 16335;
16371 -> 16370;
16372 -> 16350;
16373 -> 16365;
16374 -> 16321;
16374 -> 16078;
16375 -> 16117;
16375 -> 16078;
16376 -> 16078;
16377 -> 16078;
16378 -> 16374;
16378 -> 16377;
16379 -> 16375;
16379 -> 16377;
16380 -> 16376;
16380 -> 16377;
16381 -> 16378;
16381 -> 16350;
16381 -> 16377;
16382 -> 16381;
16382 -> 16323;
16382 -> 16377;
16383 -> 16379;
16383 -> 16360;
16383 -> 16377;
16384 -> 16383;
16384 -> 16339;
16384 -> 16377;
16385 -> 16382;
16385 -> 16384;
16385 -> 16377;
16386 -> 16385;
16386 -> 16380;
16386 -> 16377;
16387 -> 16376;
16387 -> 16083;
16387 -> 16078;
16388 -> 16078;
16389 -> 16083;
16389 -> 16388;
16390 -> 16389;
16390 -> 16109;
16390 -> 16388;
16391 -> 16390;
16391 -> 16078;
16392 -> 16391;
16392 -> 16078;
16393 -> 16078;
16394 -> 0;
16394 -> 16078;
16395 -> 16078;
16396 -> 16394;
16396 -> 16395;
16397 -> 16083;
16397 -> 16395;
16398 -> 16397;
16398 -> 16396;
16398 -> 16395;
16399 -> 15278;
16399 -> 15273;
16400 -> 15278;
16400 -> 15273;
16401 -> 15278;
16401 -> 15273;
16402 -> 0;
16402 -> 15278;
16402 -> 15273;
16403 -> 15278;
16403 -> 15273;
16404 -> 14129;
16404 -> 15278;
16404 -> 15273;
16405 -> 15278;
16405 -> 15273;
16406 -> 14129;
16406 -> 15278;
16406 -> 15273;
16407 -> 15273;
16408 -> 15275;
16408 -> 16407;
16409 -> 16408;
16409 -> 15259;
16409 -> 16293;
16409 -> 16407;
16410 -> 16409;
16410 -> 15273;
16411 -> 15273;
16412 -> 15274;
16412 -> 16411;
16413 -> 16411;
16413 -> 15273;
16414 -> 15272;
16414 -> 15259;
16415 -> 15259;
16416 -> 16414;
16416 -> 16110;
16416 -> 16415;
16417 -> 16416;
16417 -> 15259;
16417 -> 16409;
16417 -> 16415;
16418 -> 16417;
16418 -> 15259;
16419 -> 16418;
16420 -> 16419;
16420 -> 16418;
16421 -> 16418;
16422 -> 0;
16422 -> 16418;
16423 -> 15232;
16424 -> 15232;
16425 -> 15232;
16426 -> 15232;
16427 -> 15232;
16428 -> 16423;
16428 -> 16427;
16429 -> 16427;
16430 -> 16428;
16430 -> 16418;
16430 -> 16429;
16431 -> 16430;
16431 -> 16418;
16431 -> 16429;
16432 -> 16431;
16432 -> 15232;
16433 -> 15232;
16434 -> 16432;
16434 -> 16433;
16435 -> 15232;
16436 -> 16425;
16436 -> 16422;
16437 -> 16422;
16438 -> 16422;
16439 -> 16422;
16440 -> 16438;
16440 -> 16439;
16440 -> 16422;
16441 -> 16440;
16441 -> 16422;
16442 -> 16441;
16443 -> 16438;
16443 -> 16442;
16444 -> 16442;
16445 -> 16443;
16445 -> 16422;
16445 -> 16444;
16446 -> 16444;
16447 -> 16445;
16447 -> 16446;
16448 -> 16447;
16448 -> 16444;
16449 -> 16444;
16450 -> 16444;
16451 -> 16448;
16451 -> 16450;
16452 -> 16451;
16452 -> 16448;
16452 -> 16450;
16453 -> 16452;
16453 -> 16442;
16454 -> 16453;
16454 -> 16425;
16454 -> 16436;
16454 -> 16422;
16455 -> 16425;
16455 -> 16436;
16455 -> 16453;
16455 -> 16422;
16456 -> 16422;
16457 -> 16455;
16457 -> 16456;
16457 -> 16422;
16458 -> 16426;
16458 -> 16456;
16458 -> 16422;
16459 -> 16457;
16459 -> 16458;
16459 -> 16422;
16460 -> 16422;
16461 -> 16455;
16461 -> 16460;
16461 -> 16422;
16462 -> 16422;
16462 -> 16453;
16462 -> 16425;
16463 -> 16422;
16464 -> 16438;
16464 -> 16463;
16464 -> 16422;
16465 -> 16464;
16466 -> 16438;
16466 -> 16465;
16467 -> 16466;
16467 -> 16448;
16467 -> 16465;
16468 -> 16465;
16469 -> 16467;
16469 -> 16468;
16470 -> 16469;
16470 -> 0;
16470 -> 16468;
16471 -> 0;
16471 -> 16470;
16472 -> 16471;
16472 -> 16464;
16473 -> 16472;
16473 -> 0;
16473 -> 16464;
16474 -> 16448;
16475 -> 16448;
16475 -> 16474;
16476 -> 16474;
16476 -> 16448;
16477 -> 16448;
16478 -> 16448;
16479 -> 15232;
16479 -> 16478;
16480 -> 16478;
16481 -> 16479;
16481 -> 16480;
16482 -> 16480;
16483 -> 16481;
16483 -> 16448;
16483 -> 16482;
16484 -> 16483;
16484 -> 16448;
16484 -> 16482;
16485 -> 16484;
16485 -> 16478;
16486 -> 16478;
16487 -> 16485;
16487 -> 16486;
16488 -> 16487;
16488 -> 16478;
16489 -> 16448;
16490 -> 16448;
16491 -> 16490;
16492 -> 16490;
16492 -> 16491;
16493 -> 16491;
16493 -> 16490;
16494 -> 16490;
16494 -> 16448;
16495 -> 15232;
16495 -> 16448;
16496 -> 16448;
16497 -> 16495;
16497 -> 16496;
16498 -> 16494;
16498 -> 16496;
16499 -> 16498;
16499 -> 16448;
16499 -> 16496;
16500 -> 16448;
16501 -> 16448;
16502 -> 16448;
16502 -> 15230;
16503 -> 15230;
16504 -> 16502;
16504 -> 16503;
16505 -> 0;
16505 -> 16503;
16506 -> 16504;
16506 -> 16503;
16507 -> 16506;
16507 -> 16448;
16508 -> 16506;
16509 -> 16506;
16510 -> 16507;
16510 -> 16506;
16511 -> 16510;
16512 -> 16510;
16512 -> 16511;
16513 -> 16511;
16513 -> 16510;
16514 -> 16513;
16515 -> 16509;
16515 -> 16513;
16516 -> 16514;
16516 -> 16506;
16517 -> 16509;
16517 -> 16516;
16518 -> 16506;
16518 -> 16448;
16518 -> 16517;
16519 -> 16507;
16519 -> 16448;
16519 -> 16517;
16520 -> 16505;
16520 -> 16518;
16520 -> 16519;
16520 -> 16517;
16521 -> 16505;
16521 -> 16503;
16522 -> 16521;
16522 -> 15230;
16523 -> 15230;
16524 -> 15231;
16524 -> 16522;
16524 -> 16523;
16524 -> 16505;
16524 -> 16519;
16524 -> 16520;
16524 -> 15230;
16525 -> 15228;
16525 -> 16524;
16525 -> 15227;
16526 -> 16525;
16526 -> 15222;
16527 -> 15223;
16527 -> 15222;
16528 -> 15225;
16528 -> 15222;
16529 -> 16526;
16529 -> 16527;
16529 -> 16528;
16529 -> 16524;
16529 -> 15226;
16529 -> 15222;
16530 -> 16529;
16530 -> 15222;
16531 -> 1;
16532 -> 1;
16533 -> 16531;
16533 -> 16532;
16534 -> 16530;
16534 -> 16532;
16535 -> 16532;
16536 -> 16535;
16536 -> 16532;
16537 -> 16532;
16538 -> 16534;
16538 -> 16537;
16539 -> 0;
16539 -> 16537;
16540 -> 16537;
16541 -> 16539;
16541 -> 16540;
16542 -> 16538;
16542 -> 16530;
16542 -> 16540;
16543 -> 16542;
16543 -> 16530;
16543 -> 16541;
16543 -> 16540;
16544 -> 16537;
16545 -> 16538;
16545 -> 16544;
16546 -> 16544;
16547 -> 16545;
16547 -> 16530;
16547 -> 16546;
16547 -> 16544;
16548 -> 16547;
16549 -> 16548;
16549 -> 16547;
16550 -> 16547;
16551 -> 16549;
16551 -> 16550;
16552 -> 16545;
16552 -> 16550;
16553 -> 16550;
16554 -> 16550;
16555 -> 16552;
16555 -> 16554;
16556 -> 16555;
16556 -> 16530;
16556 -> 16554;
16557 -> 16554;
16558 -> 16556;
16558 -> 16557;
16558 -> 16554;
16559 -> 16554;
16560 -> 16559;
16560 -> 16554;
16561 -> 16554;
16562 -> 16560;
16562 -> 16561;
16563 -> 16555;
16563 -> 16561;
16564 -> 16561;
16565 -> 16563;
16565 -> 16564;
16566 -> 16565;
16566 -> 16530;
16566 -> 16564;
16567 -> 16566;
16567 -> 16099;
16567 -> 16564;
16568 -> 16565;
16568 -> 16530;
16568 -> 16564;
16569 -> 16564;
16570 -> 16569;
16570 -> 16564;
16571 -> 16564;
16572 -> 16570;
16572 -> 16571;
16573 -> 16565;
16573 -> 16571;
16574 -> 16571;
16575 -> 16571;
16576 -> 16574;
16576 -> 16575;
16577 -> 16575;
16578 -> 16577;
16578 -> 16576;
16578 -> 16575;
16579 -> 16575;
16580 -> 16579;
16580 -> 16576;
16580 -> 16575;
16581 -> 16575;
16582 -> 16581;
16582 -> 16576;
16582 -> 16575;
16583 -> 16576;
16583 -> 16575;
16584 -> 16576;
16584 -> 16575;
16585 -> 16576;
16585 -> 16575;
16586 -> 16575;
16587 -> 16586;
16587 -> 16576;
16587 -> 16575;
16588 -> 16576;
16588 -> 16575;
16589 -> 16576;
16589 -> 16575;
16590 -> 16574;
16590 -> 16571;
16591 -> 16572;
16591 -> 16571;
16592 -> 16571;
16593 -> 16590;
16593 -> 16592;
16594 -> 16591;
16594 -> 16592;
16595 -> 16573;
16595 -> 16592;
16596 -> 16592;
16597 -> 16595;
16597 -> 16568;
16597 -> 16596;
16598 -> 16597;
16598 -> 16592;
16599 -> 16598;
16600 -> 16598;
16600 -> 16599;
16601 -> 16600;
16601 -> 16568;
16601 -> 0;
16601 -> 16599;
16602 -> 16599;
16603 -> 16601;
16603 -> 16598;
16604 -> 16598;
16605 -> 16598;
16606 -> 16598;
16606 -> 16605;
16607 -> 16606;
16607 -> 16568;
16607 -> 16605;
16608 -> 16607;
16608 -> 16598;
16609 -> 16598;
16610 -> 16598;
16611 -> 16609;
16611 -> 16610;
16612 -> 16608;
16612 -> 16610;
16613 -> 16612;
16613 -> 16568;
16613 -> 16610;
16614 -> 16613;
16614 -> 16598;
16615 -> 16598;
16616 -> 16614;
16616 -> 16615;
16617 -> 16616;
16617 -> 16568;
16617 -> 16615;
16618 -> 16617;
16618 -> 16615;
16619 -> 16615;
16620 -> 16618;
16620 -> 16619;
16621 -> 16619;
16622 -> 0;
16622 -> 16619;
16623 -> 16620;
16623 -> 16621;
16623 -> 16619;
16624 -> 16619;
16625 -> 16622;
16625 -> 16624;
16625 -> 16619;
16626 -> 16625;
16626 -> 16621;
16626 -> 16619;
16627 -> 16623;
16627 -> 16626;
16627 -> 16619;
16628 -> 16613;
16628 -> 16627;
16629 -> 16593;
16629 -> 16627;
16630 -> 16627;
16631 -> 16628;
16631 -> 16568;
16631 -> 16627;
16632 -> 16594;
16632 -> 16627;
16633 -> 16627;
16634 -> 16629;
16634 -> 16633;
16635 -> 16630;
16635 -> 16633;
16636 -> 16631;
16636 -> 16633;
16637 -> 16632;
16637 -> 16633;
16638 -> 16595;
16638 -> 16633;
16639 -> 16633;
16640 -> 16636;
16640 -> 16568;
16640 -> 16639;
16640 -> 16633;
16641 -> 16633;
16642 -> 16636;
16642 -> 16641;
16642 -> 16568;
16642 -> 16633;
16643 -> 16642;
16643 -> 16633;
16644 -> 16633;
16645 -> 16643;
16645 -> 16644;
16646 -> 16638;
16646 -> 16644;
16647 -> 16644;
16648 -> 16646;
16648 -> 16647;
16649 -> 16647;
16650 -> 16648;
16650 -> 16649;
16651 -> 16649;
16651 -> 16647;
16652 -> 16648;
16652 -> 16647;
16653 -> 16647;
16654 -> 16652;
16654 -> 16653;
16655 -> 16654;
16655 -> 16642;
16655 -> 16653;
16656 -> 16655;
16656 -> 16647;
16657 -> 16647;
16658 -> 16656;
16658 -> 16657;
16658 -> 16647;
16659 -> 16658;
16659 -> 16647;
16660 -> 16659;
16661 -> 16660;
16661 -> 16644;
16662 -> 16645;
16662 -> 16644;
16663 -> 16644;
16664 -> 16662;
16664 -> 16663;
16665 -> 16661;
16665 -> 16663;
16666 -> 16663;
16667 -> 16664;
16667 -> 16666;
16668 -> 16666;
16669 -> 16666;
16670 -> 16667;
16670 -> 16642;
16670 -> 16666;
16671 -> 16666;
16672 -> 16670;
16672 -> 16671;
16672 -> 16666;
16673 -> 16666;
16674 -> 16667;
16674 -> 16673;
16674 -> 16666;
16675 -> 16666;
16676 -> 16667;
16676 -> 16675;
16676 -> 16666;
16677 -> 16667;
16677 -> 16663;
16678 -> 16663;
16679 -> 16663;
16680 -> 16677;
16680 -> 16679;
16681 -> 16678;
16681 -> 16679;
16682 -> 16665;
16682 -> 16679;
16683 -> 16681;
16683 -> 16679;
16684 -> 16680;
16684 -> 16679;
16685 -> 16679;
16686 -> 16682;
16686 -> 16642;
16686 -> 16679;
16687 -> 16679;
16688 -> 16684;
16688 -> 16687;
16689 -> 16685;
16689 -> 16687;
16690 -> 16686;
16690 -> 16687;
16691 -> 16682;
16691 -> 16687;
16692 -> 16690;
16692 -> 16687;
16693 -> 16689;
16693 -> 16687;
16694 -> 16691;
16694 -> 16642;
16694 -> 16693;
16695 -> 16691;
16695 -> 16642;
16695 -> 16694;
16695 -> 16687;
16696 -> 16692;
16696 -> 16695;
16696 -> 16642;
16696 -> 16667;
16696 -> 16694;
16696 -> 16687;
16697 -> 16688;
16697 -> 16687;
16698 -> 16687;
16699 -> 16697;
16699 -> 16698;
16700 -> 16691;
16700 -> 16698;
16701 -> 16699;
16701 -> 16698;
16702 -> 16698;
16703 -> 16701;
16703 -> 16702;
16704 -> 16700;
16704 -> 16702;
16705 -> 16702;
16706 -> 16703;
16706 -> 16705;
16706 -> 16702;
16707 -> 16702;
16708 -> 16704;
16708 -> 16696;
16708 -> 16707;
16709 -> 16708;
16709 -> 16702;
16710 -> 16703;
16710 -> 16702;
16711 -> 16709;
16711 -> 16696;
16711 -> 16710;
16711 -> 16702;
16712 -> 16698;
16713 -> 16700;
16713 -> 16711;
16713 -> 16712;
16714 -> 16713;
16714 -> 16698;
16715 -> 16696;
16715 -> 16687;
16716 -> 16687;
16717 -> 16715;
16717 -> 16716;
16717 -> 16687;
16718 -> 16717;
16719 -> 16718;
16719 -> 16714;
16720 -> 16719;
16720 -> 16717;
16721 -> 16696;
16721 -> 16717;
16722 -> 16720;
16722 -> 16717;
16723 -> 16717;
16724 -> 16687;
16725 -> 16722;
16725 -> 16714;
16725 -> 16687;
16726 -> 16687;
16727 -> 16725;
16727 -> 16726;
16727 -> 16687;
16728 -> 16688;
16728 -> 16687;
16729 -> 16689;
16729 -> 16687;
16730 -> 16722;
16730 -> 16714;
16730 -> 16687;
16731 -> 16687;
16732 -> 16728;
16732 -> 16731;
16733 -> 16729;
16733 -> 16731;
16734 -> 16730;
16734 -> 16731;
16735 -> 16691;
16735 -> 16731;
16736 -> 16735;
16736 -> 16731;
16737 -> 16732;
16737 -> 16731;
16738 -> 16733;
16738 -> 16731;
16739 -> 16731;
16740 -> 16731;
16741 -> 16736;
16741 -> 16740;
16742 -> 16737;
16742 -> 16740;
16743 -> 16738;
16743 -> 16740;
16744 -> 16739;
16744 -> 16740;
16745 -> 16744;
16745 -> 16740;
16746 -> 16744;
16746 -> 16740;
16747 -> 16744;
16747 -> 16740;
16748 -> 16744;
16748 -> 16740;
16749 -> 16744;
16749 -> 16740;
16750 -> 16744;
16750 -> 16740;
16751 -> 16741;
16751 -> 16744;
16751 -> 16740;
16752 -> 16742;
16752 -> 16744;
16752 -> 16740;
16753 -> 16743;
16753 -> 16744;
16753 -> 16740;
16754 -> 16744;
16754 -> 16740;
16755 -> 16740;
16756 -> 16754;
16756 -> 16755;
16756 -> 16745;
16756 -> 16751;
16756 -> 16752;
16756 -> 16748;
16756 -> 16753;
16756 -> 16750;
16756 -> 16722;
16756 -> 16740;
16757 -> 16756;
16757 -> 16744;
16757 -> 16740;
16758 -> 16740;
16759 -> 16758;
16759 -> 16744;
16759 -> 16740;
16760 -> 16741;
16760 -> 16740;
16761 -> 16740;
16762 -> 16740;
16763 -> 16760;
16763 -> 16762;
16764 -> 16761;
16764 -> 16762;
16766 -> 16765;
16768 -> 16767;
16770 -> 16769;
16773 -> 16772;
16774 -> 0;
16775 -> 0;
16776 -> 0;
16777 -> 16776;
16779 -> 16774;
16779 -> 16775;
16779 -> 16777;
16779 -> 16778;
16780 -> 16779;
16782 -> 16781;
16784 -> 16783;
16786 -> 16785;
16788 -> 16787;
16789 -> 16763;
16789 -> 16762;
16790 -> 16762;
16791 -> 16789;
16791 -> 16790;
16792 -> 16764;
16792 -> 16790;
16793 -> 16792;
16793 -> 16790;
16794 -> 16792;
16794 -> 16790;
16795 -> 16792;
16795 -> 16790;
16796 -> 16792;
16796 -> 16790;
16797 -> 16792;
16797 -> 16790;
16798 -> 16790;
16799 -> 16791;
16799 -> 16798;
16799 -> 16790;
16800 -> 16792;
16800 -> 16790;
16801 -> 16800;
16801 -> 16793;
16801 -> 16794;
16801 -> 16795;
16801 -> 16796;
16801 -> 16797;
16801 -> 16790;
16802 -> 16790;
16803 -> 16791;
16803 -> 16802;
16804 -> 16803;
16804 -> 16756;
16804 -> 16802;
16805 -> 16804;
16805 -> 16790;
16806 -> 16805;
16806 -> 16756;
16806 -> 16792;
16806 -> 16790;
16807 -> 16791;
16807 -> 16792;
16807 -> 16790;
16808 -> 16761;
16808 -> 16744;
16808 -> 16740;
16809 -> 16739;
16809 -> 16731;
16810 -> 16809;
16810 -> 16756;
16810 -> 16757;
16810 -> 16759;
16810 -> 16808;
16810 -> 16758;
16810 -> 16801;
16810 -> 16806;
16810 -> 16807;
16810 -> 16731;
16811 -> 16731;
16812 -> 16811;
16813 -> 16734;
16813 -> 16811;
16814 -> 16811;
16815 -> 16813;
16815 -> 16814;
16815 -> 16811;
16816 -> 16734;
16816 -> 16811;
16817 -> 16810;
16817 -> 16811;
16818 -> 16813;
16818 -> 16811;
16819 -> 16816;
16819 -> 16817;
16819 -> 16818;
16819 -> 16810;
16819 -> 16811;
16820 -> 16739;
16820 -> 16819;
16821 -> 16664;
16821 -> 16663;
16822 -> 16663;
16823 -> 16821;
16823 -> 16822;
16824 -> 16678;
16824 -> 16822;
16825 -> 16678;
16825 -> 16822;
16826 -> 16820;
16826 -> 16822;
16827 -> 16823;
16827 -> 16819;
16827 -> 16722;
16827 -> 16822;
16828 -> 16822;
16829 -> 16827;
16829 -> 16828;
16830 -> 16829;
16830 -> 16827;
16831 -> 16822;
16832 -> 16826;
16832 -> 16831;
16833 -> 16832;
16833 -> 16830;
16833 -> 16831;
16834 -> 16831;
16835 -> 16833;
16835 -> 16834;
16836 -> 16835;
16836 -> 16822;
16837 -> 16822;
16838 -> 16823;
16838 -> 16835;
16838 -> 16837;
16838 -> 16822;
16839 -> 16823;
16839 -> 16835;
16839 -> 16836;
16840 -> 16839;
16840 -> 16822;
16841 -> 16830;
16841 -> 16822;
16842 -> 16824;
16842 -> 16822;
16843 -> 16825;
16843 -> 16822;
16844 -> 16822;
16845 -> 16840;
16845 -> 16844;
16846 -> 16841;
16846 -> 16844;
16847 -> 16842;
16847 -> 16844;
16848 -> 16843;
16848 -> 16844;
16849 -> 16826;
16849 -> 16844;
16850 -> 16844;
16851 -> 16845;
16851 -> 16850;
16851 -> 16844;
16852 -> 16848;
16852 -> 16844;
16853 -> 16849;
16853 -> 16835;
16853 -> 16844;
16854 -> 16844;
16855 -> 16853;
16855 -> 16854;
16856 -> 16853;
16856 -> 16854;
16857 -> 16854;
16858 -> 16856;
16858 -> 16857;
16859 -> 16856;
16859 -> 16854;
16860 -> 16856;
16860 -> 16854;
16861 -> 16856;
16861 -> 16854;
16862 -> 16856;
16862 -> 16854;
16863 -> 16855;
16863 -> 16856;
16863 -> 16854;
16864 -> 16853;
16864 -> 16859;
16864 -> 16860;
16864 -> 16861;
16864 -> 16863;
16864 -> 16844;
16865 -> 16846;
16865 -> 16844;
16866 -> 16847;
16866 -> 16844;
16867 -> 16848;
16867 -> 16844;
16868 -> 16844;
16869 -> 16865;
16869 -> 16868;
16870 -> 16866;
16870 -> 16868;
16871 -> 16867;
16871 -> 16868;
16872 -> 16864;
16872 -> 16868;
16873 -> 16868;
16874 -> 16868;
16875 -> 16870;
16875 -> 16874;
16876 -> 16873;
16876 -> 16874;
16877 -> 16876;
16877 -> 16874;
16878 -> 16875;
16878 -> 16877;
16879 -> 16870;
16879 -> 16873;
16879 -> 16868;
16880 -> 16871;
16880 -> 16873;
16880 -> 16868;
16881 -> 16879;
16881 -> 16880;
16881 -> 16868;
16882 -> 16869;
16882 -> 16872;
16882 -> 16868;
16883 -> 16870;
16883 -> 16872;
16883 -> 16868;
16884 -> 16871;
16884 -> 16872;
16884 -> 16868;
16885 -> 16844;
16886 -> 16845;
16886 -> 16844;
16887 -> 16844;
16888 -> 16886;
16888 -> 16887;
16889 -> 16864;
16889 -> 16887;
16890 -> 16888;
16890 -> 16887;
16891 -> 16887;
16892 -> 16890;
16892 -> 16891;
16893 -> 16889;
16893 -> 16891;
16894 -> 16893;
16894 -> 16891;
16895 -> 16894;
16895 -> 16892;
16895 -> 16864;
16895 -> 16882;
16895 -> 16883;
16895 -> 16884;
16895 -> 16891;
16896 -> 16891;
16897 -> 16895;
16897 -> 16896;
16898 -> 16895;
16898 -> 16896;
16899 -> 16897;
16899 -> 16896;
16900 -> 16896;
16901 -> 16899;
16901 -> 16900;
16902 -> 16898;
16902 -> 16900;
16903 -> 16902;
16903 -> 16895;
16903 -> 16900;
16904 -> 16901;
16904 -> 16900;
16905 -> 16900;
16906 -> 16903;
16906 -> 16905;
16907 -> 16904;
16907 -> 16905;
16908 -> 16905;
16909 -> 16907;
16909 -> 16908;
16909 -> 16905;
16910 -> 16906;
16910 -> 16905;
16911 -> 16907;
16911 -> 16905;
16912 -> 16907;
16912 -> 16895;
16912 -> 16905;
16913 -> 16905;
16914 -> 16912;
16914 -> 16913;
16915 -> 16913;
16915 -> 16905;
16916 -> 16912;
16916 -> 16915;
16916 -> 16905;
16917 -> 16905;
16918 -> 16910;
16918 -> 16917;
16919 -> 16911;
16919 -> 16917;
16920 -> 16916;
16920 -> 16917;
16921 -> 16918;
16921 -> 16917;
16922 -> 16920;
16922 -> 16917;
16923 -> 16917;
16924 -> 16921;
16924 -> 16923;
16925 -> 16922;
16925 -> 16923;
16926 -> 16925;
16926 -> 16923;
16927 -> 16923;
16928 -> 16926;
16928 -> 16927;
16929 -> 16928;
16929 -> 16916;
16929 -> 16927;
16930 -> 16929;
16930 -> 16927;
16931 -> 16927;
16932 -> 16930;
16932 -> 16931;
16933 -> 16925;
16933 -> 16916;
16933 -> 16923;
16934 -> 16923;
16935 -> 16933;
16935 -> 16934;
16936 -> 16924;
16936 -> 16925;
16936 -> 16935;
16936 -> 16923;
16937 -> 16932;
16937 -> 16936;
16937 -> 16923;
16938 -> 16919;
16938 -> 16935;
16938 -> 16917;
16939 -> 16917;
16940 -> 16938;
16940 -> 16939;
16941 -> 16918;
16941 -> 16919;
16941 -> 16940;
16941 -> 16917;
16942 -> 16937;
16942 -> 16941;
16942 -> 16917;
16943 -> 0;
16943 -> 16900;
16944 -> 16901;
16944 -> 16940;
16944 -> 16900;
16945 -> 16900;
16946 -> 16944;
16946 -> 16945;
16947 -> 16945;
16947 -> 16900;
16948 -> 16944;
16948 -> 16947;
16948 -> 16900;
16949 -> 16900;
16950 -> 16900;
16951 -> 16948;
16951 -> 16950;
16952 -> 16950;
16952 -> 16900;
16953 -> 16948;
16953 -> 16952;
16953 -> 16900;
16954 -> 16902;
16954 -> 16953;
16954 -> 16900;
16955 -> 16900;
16956 -> 16953;
16956 -> 16955;
16957 -> 16955;
16957 -> 16900;
16958 -> 16953;
16958 -> 16957;
16958 -> 16900;
16959 -> 16900;
16960 -> 16958;
16960 -> 16959;
16961 -> 16959;
16961 -> 16900;
16962 -> 16958;
16962 -> 16961;
16962 -> 16900;
16963 -> 16900;
16964 -> 16954;
16964 -> 16963;
16965 -> 16958;
16965 -> 16963;
16966 -> 16962;
16966 -> 16963;
16967 -> 16965;
16967 -> 16958;
16967 -> 16962;
16967 -> 16963;
16968 -> 16963;
16969 -> 16967;
16969 -> 16968;
16970 -> 16964;
16970 -> 16965;
16970 -> 16969;
16970 -> 16963;
16971 -> 16964;
16971 -> 16963;
16972 -> 16966;
16972 -> 16963;
16973 -> 16963;
16974 -> 16971;
16974 -> 16973;
16975 -> 16972;
16975 -> 16973;
16976 -> 16973;
16977 -> 16975;
16977 -> 16976;
16978 -> 16977;
16978 -> 16962;
16978 -> 16976;
16979 -> 16978;
16979 -> 16976;
16980 -> 16976;
16981 -> 16979;
16981 -> 16980;
16982 -> 16975;
16982 -> 16962;
16982 -> 16969;
16982 -> 16973;
16983 -> 16973;
16984 -> 16974;
16984 -> 16975;
16984 -> 16982;
16984 -> 16973;
16985 -> 16981;
16985 -> 16984;
16985 -> 16973;
16986 -> 0;
16986 -> 16985;
16987 -> 16901;
16987 -> 16900;
16988 -> 16986;
16988 -> 16900;
16989 -> 16900;
16990 -> 16987;
16990 -> 16989;
16991 -> 16988;
16991 -> 16989;
16992 -> 16902;
16992 -> 16989;
16993 -> 16990;
16993 -> 16989;
16994 -> 16991;
16994 -> 16989;
16995 -> 16989;
16996 -> 16993;
16996 -> 16995;
16997 -> 16994;
16997 -> 16995;
16998 -> 16997;
16998 -> 16995;
16999 -> 16995;
17000 -> 16996;
17000 -> 16995;
17001 -> 16997;
17001 -> 16995;
17002 -> 16995;
17003 -> 16995;
17004 -> 17000;
17004 -> 17003;
17005 -> 17001;
17005 -> 17003;
17006 -> 17002;
17006 -> 17003;
17007 -> 17004;
17007 -> 17006;
17007 -> 17003;
17008 -> 17005;
17008 -> 17006;
17008 -> 17003;
17009 -> 17002;
17009 -> 16989;
17010 -> 16989;
17011 -> 16989;
17012 -> 16992;
17012 -> 17011;
17013 -> 17012;
17013 -> 16982;
17013 -> 17011;
17014 -> 17013;
17014 -> 16989;
17015 -> 17009;
17015 -> 16989;
17016 -> 17010;
17016 -> 16989;
17017 -> 17015;
17017 -> 17016;
17017 -> 17014;
17017 -> 17007;
17017 -> 17008;
17017 -> 16982;
17017 -> 16989;
17018 -> 16989;
17019 -> 17017;
17019 -> 17018;
17020 -> 17019;
17020 -> 17017;
17020 -> 17018;
17021 -> 17020;
17022 -> 17021;
17022 -> 17020;
17023 -> 17020;
17024 -> 17022;
17024 -> 17023;
17025 -> 17024;
17025 -> 17023;
17026 -> 17024;
17026 -> 17023;
17027 -> 17026;
17027 -> 17024;
17027 -> 17023;
17028 -> 17025;
17028 -> 17023;
17029 -> 17023;
17030 -> 17027;
17030 -> 17029;
17031 -> 17028;
17031 -> 17029;
17032 -> 17029;
17033 -> 17031;
17033 -> 17032;
17033 -> 17029;
17034 -> 17030;
17034 -> 17029;
17035 -> 17031;
17035 -> 17024;
17035 -> 17029;
17036 -> 17029;
17037 -> 17035;
17037 -> 17036;
17038 -> 17035;
17038 -> 17036;
17039 -> 17036;
17039 -> 17029;
17040 -> 17029;
17041 -> 17037;
17041 -> 17040;
17042 -> 17037;
17042 -> 17040;
17043 -> 17040;
17043 -> 17029;
17044 -> 17029;
17045 -> 17034;
17045 -> 17044;
17046 -> 17037;
17046 -> 17044;
17047 -> 17041;
17047 -> 17044;
17048 -> 17046;
17048 -> 17037;
17048 -> 17041;
17048 -> 17044;
17049 -> 17045;
17049 -> 17046;
17049 -> 17048;
17049 -> 17044;
17050 -> 17047;
17050 -> 17044;
17051 -> 17045;
17051 -> 17047;
17051 -> 17044;
17052 -> 17026;
17052 -> 17047;
17052 -> 17023;
17053 -> 17025;
17053 -> 17047;
17053 -> 17023;
17054 -> 17023;
17055 -> 17053;
17055 -> 17054;
17056 -> 17053;
17056 -> 17054;
17057 -> 17054;
17057 -> 17023;
17058 -> 17023;
17059 -> 17055;
17059 -> 17058;
17060 -> 17055;
17060 -> 17058;
17061 -> 17058;
17061 -> 17023;
17062 -> 17023;
17063 -> 17052;
17063 -> 17062;
17064 -> 17055;
17064 -> 17062;
17065 -> 17059;
17065 -> 17062;
17066 -> 17064;
17066 -> 17055;
17066 -> 17059;
17066 -> 17062;
17067 -> 17063;
17067 -> 17064;
17067 -> 17066;
17067 -> 17062;
17068 -> 17065;
17068 -> 17062;
17069 -> 17063;
17069 -> 17065;
17069 -> 17062;
17070 -> 17025;
17070 -> 17023;
17071 -> 17023;
17072 -> 17070;
17072 -> 17071;
17073 -> 17026;
17073 -> 17071;
17074 -> 17072;
17074 -> 17065;
17074 -> 17071;
17075 -> 17071;
17076 -> 17074;
17076 -> 17075;
17077 -> 17074;
17077 -> 17075;
17078 -> 17077;
17078 -> 17075;
17079 -> 17075;
17079 -> 17071;
17080 -> 17071;
17081 -> 17080;
17081 -> 17071;
17082 -> 17071;
17083 -> 17072;
17083 -> 17082;
17084 -> 17083;
17084 -> 17076;
17084 -> 17082;
17085 -> 17084;
17085 -> 17071;
17086 -> 17073;
17086 -> 17076;
17086 -> 17071;
17087 -> 17085;
17087 -> 17086;
17087 -> 17071;
17088 -> 17073;
17088 -> 17076;
17088 -> 17087;
17089 -> 17073;
17089 -> 17076;
17089 -> 17088;
17090 -> 17088;
17091 -> 17088;
17092 -> 17089;
17092 -> 17091;
17093 -> 17090;
17093 -> 17091;
17094 -> 17072;
17094 -> 17091;
17095 -> 17092;
17095 -> 17091;
17096 -> 17093;
17096 -> 17091;
17097 -> 17095;
17097 -> 17096;
17097 -> 17094;
17097 -> 17091;
17098 -> 17095;
17098 -> 17096;
17098 -> 17094;
17098 -> 17076;
17098 -> 17091;
17099 -> 17091;
17100 -> 17098;
17100 -> 17099;
17101 -> 17097;
17101 -> 17071;
17102 -> 17071;
17103 -> 17101;
17103 -> 17102;
17103 -> 17071;
17104 -> 17101;
17104 -> 17072;
17104 -> 17071;
17105 -> 17101;
17105 -> 17103;
17106 -> 0;
17106 -> 17103;
17107 -> 17103;
17108 -> 17105;
17108 -> 17107;
17109 -> 17106;
17109 -> 17107;
17110 -> 17108;
17110 -> 17097;
17110 -> 17109;
17110 -> 17107;
17111 -> 17101;
17111 -> 17097;
17111 -> 17103;
17112 -> 17111;
17113 -> 0;
17113 -> 17111;
17114 -> 17111;
17115 -> 17112;
17115 -> 17114;
17116 -> 17113;
17116 -> 17114;
17117 -> 17115;
17117 -> 17097;
17117 -> 17116;
17117 -> 17114;
17118 -> 17071;
17119 -> 17118;
17119 -> 17023;
17120 -> 17025;
17120 -> 17023;
17121 -> 17026;
17121 -> 17097;
17121 -> 17023;
17122 -> 17067;
17122 -> 17023;
17123 -> 17119;
17123 -> 17023;
17124 -> 17023;
17125 -> 17120;
17125 -> 17124;
17126 -> 17121;
17126 -> 17124;
17127 -> 17122;
17127 -> 17124;
17128 -> 17123;
17128 -> 17124;
17129 -> 17026;
17129 -> 17124;
17130 -> 17128;
17130 -> 17124;
17131 -> 17124;
17132 -> 17128;
17132 -> 17124;
17133 -> 17127;
17133 -> 17132;
17134 -> 0;
17134 -> 17133;
17135 -> 17125;
17135 -> 17124;
17136 -> 17134;
17136 -> 17124;
17137 -> 17124;
17138 -> 17135;
17138 -> 17137;
17139 -> 17136;
17139 -> 17137;
17140 -> 17139;
17140 -> 17137;
17141 -> 17137;
17142 -> 17137;
17142 -> 17124;
17143 -> 17124;
17144 -> 17124;
17145 -> 17129;
17145 -> 17144;
17146 -> 17145;
17146 -> 17097;
17146 -> 17144;
17147 -> 17146;
17147 -> 17124;
17148 -> 17142;
17148 -> 17124;
17149 -> 17143;
17149 -> 17124;
17150 -> 17148;
17150 -> 17149;
17150 -> 17147;
17150 -> 17138;
17150 -> 17139;
17150 -> 17097;
17150 -> 17124;
17151 -> 17124;
17152 -> 17150;
17153 -> 17150;
17154 -> 17153;
17154 -> 17150;
17155 -> 17150;
17156 -> 17129;
17156 -> 17155;
17157 -> 17155;
17158 -> 17156;
17158 -> 17150;
17158 -> 17157;
17159 -> 17158;
17159 -> 17155;
17160 -> 17159;
17160 -> 17150;
17161 -> 17160;
17162 -> 17161;
17162 -> 17160;
17163 -> 17126;
17163 -> 17160;
17164 -> 17160;
17165 -> 17160;
17166 -> 17162;
17166 -> 17165;
17167 -> 17163;
17167 -> 17165;
17168 -> 17164;
17168 -> 17165;
17169 -> 17164;
17169 -> 17165;
17170 -> 17165;
17171 -> 17166;
17171 -> 17170;
17171 -> 17165;
17172 -> 17169;
17172 -> 17165;
17173 -> 17165;
17174 -> 17165;
17175 -> 17165;
17176 -> 17165;
17177 -> 17168;
17177 -> 17176;
17178 -> 17175;
17178 -> 17176;
17179 -> 17178;
17179 -> 17176;
17180 -> 17177;
17180 -> 17179;
17181 -> 17168;
17181 -> 17175;
17181 -> 17165;
17182 -> 17169;
17182 -> 17175;
17182 -> 17165;
17183 -> 17165;
17183 -> 17166;
17183 -> 17167;
17183 -> 17168;
17183 -> 17169;
17184 -> 17183;
17184 -> 17165;
17185 -> 17183;
17185 -> 17165;
17186 -> 17184;
17186 -> 17165;
17187 -> 17165;
17188 -> 17186;
17188 -> 17187;
17189 -> 17185;
17189 -> 17187;
17190 -> 17188;
17190 -> 17187;
17191 -> 17187;
17192 -> 17191;
17192 -> 17187;
17193 -> 17189;
17193 -> 17188;
17194 -> 17193;
17195 -> 17193;
17195 -> 17187;
17196 -> 17187;
17197 -> 17195;
17197 -> 17196;
17197 -> 17187;
17198 -> 17195;
17198 -> 17188;
17198 -> 17187;
17199 -> 17195;
17199 -> 17197;
17200 -> 0;
17200 -> 17197;
17201 -> 17197;
17202 -> 17199;
17202 -> 17201;
17203 -> 17200;
17203 -> 17201;
17204 -> 17202;
17204 -> 17193;
17204 -> 17203;
17204 -> 17201;
17205 -> 17195;
17205 -> 17193;
17205 -> 17197;
17206 -> 17205;
17207 -> 0;
17207 -> 17205;
17208 -> 17205;
17209 -> 17206;
17209 -> 17208;
17210 -> 17207;
17210 -> 17208;
17211 -> 17209;
17211 -> 17193;
17211 -> 17210;
17211 -> 17208;
17212 -> 17187;
17212 -> 17165;
17213 -> 17165;
17214 -> 17185;
17214 -> 17213;
17215 -> 17214;
17215 -> 17193;
17215 -> 17213;
17216 -> 17165;
17217 -> 17186;
17217 -> 17216;
17218 -> 17212;
17218 -> 17216;
17219 -> 17215;
17219 -> 17216;
17220 -> 17185;
17220 -> 17216;
17221 -> 17216;
17222 -> 17220;
17222 -> 17221;
17223 -> 17222;
17223 -> 17215;
17223 -> 17221;
17224 -> 17223;
17224 -> 17216;
17225 -> 17216;
17226 -> 17224;
17226 -> 17225;
17227 -> 17217;
17227 -> 17224;
17227 -> 17216;
17228 -> 17218;
17228 -> 17216;
17229 -> 17219;
17229 -> 17228;
17230 -> 0;
17230 -> 17229;
17231 -> 17217;
17231 -> 17216;
17232 -> 17230;
17232 -> 17216;
17233 -> 17216;
17234 -> 17231;
17234 -> 17233;
17235 -> 17232;
17235 -> 17233;
17236 -> 17235;
17236 -> 17233;
17237 -> 17233;
17238 -> 17233;
17238 -> 17216;
17239 -> 17216;
17240 -> 17216;
17241 -> 17220;
17241 -> 17240;
17242 -> 17241;
17242 -> 17224;
17242 -> 17240;
17243 -> 17242;
17243 -> 17216;
17244 -> 17238;
17244 -> 17216;
17245 -> 17239;
17245 -> 17216;
17246 -> 17244;
17246 -> 17245;
17246 -> 17243;
17246 -> 17234;
17246 -> 17235;
17246 -> 17224;
17246 -> 17216;
17247 -> 17216;
17248 -> 17246;
17249 -> 17220;
17249 -> 17248;
17250 -> 17249;
17250 -> 17246;
17250 -> 17248;
17251 -> 17250;
17251 -> 17246;
17252 -> 17219;
17252 -> 17246;
17253 -> 17252;
17254 -> 17220;
17254 -> 17253;
17255 -> 17254;
17255 -> 17246;
17255 -> 17253;
17256 -> 17255;
17256 -> 17252;
17257 -> 17252;
17258 -> 17256;
17258 -> 17257;
17259 -> 17251;
17259 -> 17252;
17260 -> 17217;
17260 -> 17252;
17261 -> 17218;
17261 -> 17252;
17262 -> 17252;
17263 -> 17252;
17264 -> 17258;
17264 -> 17263;
17265 -> 17259;
17265 -> 17263;
17266 -> 17260;
17266 -> 17263;
17267 -> 17261;
17267 -> 17263;
17268 -> 17262;
17268 -> 17263;
17269 -> 17265;
17269 -> 17263;
17270 -> 17263;
17271 -> 17269;
17271 -> 17270;
17272 -> 17268;
17272 -> 17270;
17273 -> 17270;
17274 -> 17270;
17275 -> 17271;
17275 -> 17274;
17275 -> 17270;
17276 -> 17271;
17276 -> 17272;
17276 -> 17270;
17277 -> 17271;
17277 -> 17246;
17277 -> 17272;
17277 -> 17270;
17278 -> 17271;
17278 -> 17246;
17278 -> 17272;
17278 -> 17270;
17279 -> 17273;
17279 -> 17272;
17279 -> 17270;
17280 -> 17268;
17280 -> 17263;
17281 -> 17268;
17281 -> 17263;
17282 -> 17268;
17282 -> 17263;
17283 -> 17268;
17283 -> 17263;
17284 -> 17268;
17284 -> 17263;
17285 -> 17263;
17286 -> 17264;
17286 -> 17285;
17286 -> 17263;
17287 -> 17263;
17288 -> 17266;
17288 -> 17287;
17288 -> 17263;
17289 -> 17264;
17289 -> 17268;
17289 -> 17263;
17290 -> 17266;
17290 -> 17268;
17290 -> 17267;
17290 -> 17263;
17291 -> 17290;
17291 -> 17268;
17291 -> 17263;
17292 -> 17267;
17292 -> 17263;
17293 -> 17292;
17294 -> 17266;
17294 -> 17293;
17295 -> 17294;
17295 -> 17292;
17296 -> 17266;
17296 -> 17295;
17297 -> 17296;
17297 -> 17246;
17297 -> 17268;
17297 -> 17295;
17298 -> 17252;
17299 -> 17220;
17299 -> 17298;
17300 -> 17299;
17300 -> 17246;
17300 -> 17298;
17301 -> 17300;
17301 -> 17252;
17302 -> 17217;
17302 -> 17252;
17303 -> 17252;
17304 -> 17252;
17305 -> 17301;
17305 -> 17304;
17306 -> 17302;
17306 -> 17304;
17307 -> 17303;
17307 -> 17304;
17308 -> 17305;
17308 -> 17304;
17309 -> 17304;
17310 -> 17308;
17310 -> 17309;
17311 -> 17309;
17312 -> 17310;
17312 -> 17311;
17313 -> 17311;
17314 -> 17312;
17314 -> 17313;
17315 -> 17314;
17315 -> 17313;
17316 -> 17314;
17316 -> 17311;
17317 -> 17311;
17318 -> 17316;
17318 -> 17317;
17319 -> 17311;
17320 -> 17318;
17320 -> 17309;
17321 -> 17309;
17322 -> 17320;
17322 -> 17321;
17323 -> 0;
17323 -> 17309;
17324 -> 17309;
17325 -> 17323;
17325 -> 17324;
17326 -> 17322;
17326 -> 17324;
17327 -> 17326;
17328 -> 17326;
17329 -> 17326;
17330 -> 17326;
17330 -> 17329;
17331 -> 17329;
17331 -> 17326;
17332 -> 17326;
17333 -> 17327;
17333 -> 17326;
17334 -> 17326;
17334 -> 17304;
17335 -> 17334;
17336 -> 17246;
17337 -> 17336;
17337 -> 17326;
17338 -> 17337;
17338 -> 17246;
17339 -> 17238;
17339 -> 17246;
17340 -> 17262;
17340 -> 17246;
17341 -> 17339;
17341 -> 17340;
17341 -> 17338;
17341 -> 17234;
17341 -> 17235;
17341 -> 17278;
17341 -> 17277;
17341 -> 17276;
17341 -> 17279;
17341 -> 17272;
17341 -> 17289;
17341 -> 17291;
17341 -> 17282;
17341 -> 17283;
17341 -> 17284;
17341 -> 17297;
17341 -> 17326;
17341 -> 17290;
17341 -> 17246;
17342 -> 17246;
17343 -> 17262;
17343 -> 17216;
17344 -> 17183;
17344 -> 17343;
17344 -> 17341;
17344 -> 17165;
17345 -> 17165;
17346 -> 17165;
17346 -> 17344;
17346 -> 17345;
17347 -> 17344;
17347 -> 17165;
17348 -> 17127;
17348 -> 17150;
17349 -> 17125;
17349 -> 17348;
17350 -> 17125;
17350 -> 17346;
17350 -> 17348;
17351 -> 17347;
17351 -> 17348;
17352 -> 17128;
17352 -> 17348;
17353 -> 17348;
17354 -> 17349;
17354 -> 17353;
17355 -> 17350;
17355 -> 17353;
17356 -> 17351;
17356 -> 17353;
17357 -> 17352;
17357 -> 17353;
17358 -> 17129;
17358 -> 17353;
17359 -> 17353;
17360 -> 17355;
17360 -> 17353;
17361 -> 17353;
17362 -> 17355;
17362 -> 17361;
17362 -> 17353;
17363 -> 17353;
17364 -> 17356;
17364 -> 17353;
17365 -> 17364;
17366 -> 17364;
17366 -> 17365;
17367 -> 17366;
17367 -> 17346;
17367 -> 17365;
17368 -> 17367;
17368 -> 17364;
17369 -> 17355;
17369 -> 17353;
17370 -> 17353;
17371 -> 17369;
17371 -> 17370;
17372 -> 17368;
17372 -> 17370;
17373 -> 17370;
17374 -> 17371;
17374 -> 17373;
17375 -> 17374;
17375 -> 17370;
17376 -> 17371;
17376 -> 17346;
17376 -> 17375;
17377 -> 17375;
17378 -> 17376;
17378 -> 17377;
17379 -> 17377;
17379 -> 17375;
17380 -> 17376;
17380 -> 17377;
17381 -> 17376;
17381 -> 17377;
17382 -> 17376;
17382 -> 17377;
17383 -> 17381;
17383 -> 17377;
17384 -> 17377;
17385 -> 17383;
17385 -> 17384;
17386 -> 17382;
17386 -> 17384;
17387 -> 17386;
17387 -> 17380;
17387 -> 17385;
17387 -> 17384;
17388 -> 17387;
17389 -> 17387;
17389 -> 17388;
17390 -> 17388;
17390 -> 17387;
17391 -> 17387;
17391 -> 17390;
17392 -> 17372;
17392 -> 17391;
17392 -> 17375;
17393 -> 17353;
17394 -> 17392;
17394 -> 17393;
17394 -> 17353;
17395 -> 17392;
17395 -> 17353;
17396 -> 17356;
17396 -> 17353;
17397 -> 17354;
17397 -> 17353;
17398 -> 17357;
17398 -> 17353;
17399 -> 17353;
17400 -> 17353;
17401 -> 17395;
17401 -> 17400;
17402 -> 17396;
17402 -> 17400;
17403 -> 17397;
17403 -> 17400;
17404 -> 17398;
17404 -> 17400;
17405 -> 17399;
17405 -> 17400;
17406 -> 17400;
17407 -> 17405;
17407 -> 17406;
17408 -> 17406;
17409 -> 17406;
17410 -> 17402;
17410 -> 17409;
17410 -> 17406;
17411 -> 17402;
17411 -> 17392;
17411 -> 17407;
17411 -> 17406;
17412 -> 17402;
17412 -> 17392;
17412 -> 17407;
17412 -> 17406;
17413 -> 17408;
17413 -> 17407;
17413 -> 17406;
17414 -> 17405;
17414 -> 17400;
17415 -> 17405;
17415 -> 17400;
17416 -> 17405;
17416 -> 17400;
17417 -> 17405;
17417 -> 17400;
17418 -> 17405;
17418 -> 17400;
17419 -> 17400;
17420 -> 17401;
17420 -> 17419;
17420 -> 17400;
17421 -> 17400;
17422 -> 17403;
17422 -> 17421;
17422 -> 17400;
17423 -> 17403;
17423 -> 17405;
17423 -> 17404;
17423 -> 17400;
17424 -> 17423;
17424 -> 17405;
17424 -> 17400;
17425 -> 17404;
17425 -> 17400;
17426 -> 17425;
17427 -> 17403;
17427 -> 17426;
17428 -> 17427;
17428 -> 17392;
17428 -> 17426;
17429 -> 17428;
17430 -> 17429;
17430 -> 17428;
17431 -> 17403;
17431 -> 17430;
17432 -> 17431;
17432 -> 17392;
17432 -> 17405;
17432 -> 17430;
17433 -> 17399;
17433 -> 17348;
17434 -> 17150;
17435 -> 17434;
17435 -> 17392;
17436 -> 17435;
17436 -> 17150;
17437 -> 17142;
17437 -> 17150;
17438 -> 17433;
17438 -> 17150;
17439 -> 17437;
17439 -> 17438;
17439 -> 17436;
17439 -> 17138;
17439 -> 17139;
17439 -> 17412;
17439 -> 17411;
17439 -> 17402;
17439 -> 17413;
17439 -> 17407;
17439 -> 17401;
17439 -> 17424;
17439 -> 17416;
17439 -> 17417;
17439 -> 17418;
17439 -> 17432;
17439 -> 17392;
17439 -> 17423;
17439 -> 17150;
17440 -> 17150;
17441 -> 17433;
17441 -> 17124;
17442 -> 17024;
17442 -> 17441;
17442 -> 17439;
17442 -> 17023;
17443 -> 16991;
17443 -> 17230;
17443 -> 17020;
17444 -> 17443;
17445 -> 17442;
17445 -> 17444;
17446 -> 17445;
17446 -> 17442;
17446 -> 17444;
17447 -> 17444;
17448 -> 17446;
17448 -> 17447;
17448 -> 17444;
17449 -> 17448;
17449 -> 17444;
17450 -> 17445;
17450 -> 17442;
17450 -> 17449;
17451 -> 17450;
17451 -> 17443;
17452 -> 16990;
17452 -> 17443;
17453 -> 17443;
17454 -> 17452;
17454 -> 17453;
17455 -> 17451;
17455 -> 17453;
17456 -> 17454;
17456 -> 17442;
17456 -> 17450;
17456 -> 17453;
17457 -> 17453;
17458 -> 17456;
17458 -> 17457;
17459 -> 17457;
17459 -> 17453;
17460 -> 17456;
17460 -> 17459;
17460 -> 17453;
17461 -> 17456;
17461 -> 17457;
17462 -> 17456;
17462 -> 17457;
17463 -> 17453;
17464 -> 17461;
17464 -> 17463;
17465 -> 17454;
17465 -> 17453;
17466 -> 17453;
17467 -> 17461;
17467 -> 17466;
17468 -> 17464;
17468 -> 17466;
17469 -> 17464;
17469 -> 17466;
17470 -> 17465;
17470 -> 17466;
17471 -> 17455;
17471 -> 17466;
17472 -> 17469;
17472 -> 17466;
17473 -> 17466;
17474 -> 17472;
17474 -> 17473;
17475 -> 17474;
17475 -> 17473;
17476 -> 0;
17476 -> 17475;
17477 -> 17466;
17478 -> 17476;
17478 -> 17477;
17479 -> 17467;
17479 -> 17466;
17480 -> 17468;
17480 -> 17466;
17481 -> 17466;
17482 -> 17479;
17482 -> 17481;
17483 -> 17480;
17483 -> 17481;
17484 -> 17471;
17484 -> 17481;
17485 -> 17482;
17485 -> 17481;
17486 -> 17481;
17487 -> 17485;
17487 -> 17486;
17488 -> 17484;
17488 -> 17486;
17489 -> 17488;
17489 -> 17464;
17489 -> 17486;
17490 -> 17488;
17490 -> 17464;
17490 -> 17486;
17491 -> 17490;
17491 -> 17487;
17491 -> 17486;
17491 -> 17464;
17492 -> 17481;
17493 -> 17483;
17493 -> 17481;
17494 -> 17491;
17494 -> 17492;
17494 -> 17493;
17494 -> 17481;
17495 -> 17492;
17496 -> 17494;
17496 -> 17495;
17497 -> 17496;
17497 -> 17494;
17497 -> 17495;
17498 -> 17497;
17498 -> 17492;
17499 -> 17498;
17500 -> 17498;
17501 -> 17499;
17501 -> 17500;
17501 -> 17498;
17502 -> 17498;
17503 -> 17499;
17503 -> 17502;
17504 -> 17502;
17505 -> 17503;
17505 -> 17498;
17505 -> 17504;
17506 -> 17505;
17506 -> 17498;
17506 -> 16339;
17506 -> 17504;
17507 -> 17506;
17507 -> 16360;
17507 -> 17504;
17508 -> 17507;
17508 -> 17502;
17509 -> 17508;
17509 -> 17498;
17510 -> 17509;
17510 -> 17478;
17510 -> 17498;
17511 -> 17510;
17512 -> 17470;
17512 -> 17511;
17512 -> 17510;
17513 -> 17512;
17514 -> 17513;
17514 -> 17512;
17515 -> 17514;
17516 -> 17515;
17517 -> 17515;
17517 -> 17514;
17518 -> 17470;
17518 -> 17513;
17518 -> 17514;
17519 -> 17514;
17520 -> 17518;
17520 -> 17519;
17521 -> 17518;
17521 -> 17519;
17522 -> 17517;
17522 -> 17520;
17522 -> 17514;
17523 -> 17499;
17523 -> 17522;
17524 -> 16991;
17524 -> 0;
17524 -> 17443;
17525 -> 17523;
17525 -> 17524;
17526 -> 17442;
17526 -> 17524;
17527 -> 17524;
17528 -> 17524;
17529 -> 17525;
17529 -> 17528;
17530 -> 17526;
17530 -> 17528;
17531 -> 17527;
17531 -> 17528;
17532 -> 17527;
17532 -> 17528;
17533 -> 17530;
17533 -> 17528;
17534 -> 17528;
17535 -> 17533;
17535 -> 17534;
17536 -> 17532;
17536 -> 17534;
17537 -> 17534;
17538 -> 17534;
17539 -> 17535;
17539 -> 17538;
17539 -> 17534;
17540 -> 17535;
17540 -> 17520;
17540 -> 17536;
17540 -> 17534;
17541 -> 17535;
17541 -> 17520;
17541 -> 17536;
17541 -> 17534;
17542 -> 17537;
17542 -> 17536;
17542 -> 17534;
17543 -> 17532;
17543 -> 17528;
17544 -> 17532;
17544 -> 17528;
17545 -> 17532;
17545 -> 17528;
17546 -> 17532;
17546 -> 17528;
17547 -> 17532;
17547 -> 17528;
17548 -> 17528;
17549 -> 17529;
17549 -> 17548;
17549 -> 17528;
17550 -> 17529;
17550 -> 17532;
17550 -> 17528;
17552 -> 0;
17553 -> 0;
17554 -> 0;
17557 -> 17551;
17557 -> 17556;
17558 -> 17552;
17558 -> 17556;
17559 -> 17553;
17559 -> 17556;
17560 -> 17554;
17560 -> 17556;
17561 -> 17555;
17561 -> 17556;
17562 -> 17556;
17563 -> 17562;
17563 -> 17556;
17564 -> 17562;
17564 -> 17556;
17565 -> 17562;
17565 -> 17556;
17566 -> 17556;
17567 -> 17558;
17567 -> 17566;
17567 -> 17556;
17568 -> 17559;
17568 -> 0;
17568 -> 17556;
17569 -> 17560;
17569 -> 0;
17569 -> 17556;
17570 -> 17557;
17570 -> 17562;
17570 -> 17556;
17571 -> 17558;
17571 -> 17562;
17571 -> 17556;
17572 -> 17559;
17572 -> 17562;
17572 -> 17556;
17573 -> 17561;
17573 -> 17562;
17573 -> 17556;
17574 -> 17560;
17574 -> 17562;
17574 -> 17556;
17575 -> 17556;
17576 -> 17575;
17576 -> 17528;
17577 -> 17576;
17577 -> 17531;
17577 -> 17528;
17578 -> 17577;
17578 -> 17532;
17578 -> 17528;
17579 -> 17524;
17580 -> 16990;
17580 -> 17520;
17580 -> 17579;
17580 -> 17524;
17581 -> 16990;
17581 -> 17520;
17581 -> 17020;
17582 -> 17020;
17583 -> 17581;
17583 -> 17582;
17584 -> 17582;
17584 -> 17020;
17585 -> 17581;
17585 -> 17584;
17585 -> 17020;
17586 -> 17020;
17587 -> 17585;
17587 -> 17586;
17588 -> 17527;
17588 -> 17586;
17589 -> 17588;
17589 -> 17540;
17589 -> 17586;
17590 -> 0;
17590 -> 17586;
17591 -> 17586;
17592 -> 17589;
17592 -> 17591;
17593 -> 17590;
17593 -> 17591;
17594 -> 17592;
17594 -> 17593;
17594 -> 17591;
17595 -> 17587;
17595 -> 17586;
17596 -> 17586;
17597 -> 17595;
17597 -> 17596;
17598 -> 17590;
17598 -> 17596;
17599 -> 17597;
17599 -> 17596;
17600 -> 17598;
17600 -> 17596;
17601 -> 17596;
17602 -> 17599;
17602 -> 17601;
17603 -> 17600;
17603 -> 17601;
17604 -> 17603;
17604 -> 17601;
17605 -> 17604;
17605 -> 17602;
17605 -> 17585;
17605 -> 17601;
17606 -> 17601;
17607 -> 17605;
17607 -> 17606;
17608 -> 17596;
17609 -> 17594;
17609 -> 17605;
17609 -> 17586;
17610 -> 17609;
17610 -> 17586;
17611 -> 17020;
17612 -> 17611;
17612 -> 17605;
17613 -> 17612;
17613 -> 17020;
17614 -> 17009;
17614 -> 17020;
17615 -> 17610;
17615 -> 17020;
17616 -> 17614;
17616 -> 17615;
17616 -> 17613;
17616 -> 17007;
17616 -> 17008;
17616 -> 17541;
17616 -> 17540;
17616 -> 17535;
17616 -> 17542;
17616 -> 17536;
17616 -> 17550;
17616 -> 17544;
17616 -> 17578;
17616 -> 17546;
17616 -> 17547;
17616 -> 17605;
17616 -> 17498;
17616 -> 17570;
17616 -> 17573;
17616 -> 17571;
17616 -> 17572;
17616 -> 17574;
17616 -> 0;
17616 -> 17020;
17617 -> 17020;
17618 -> 17610;
17618 -> 16989;
17619 -> 16895;
17619 -> 17618;
17619 -> 17616;
17619 -> 16891;
17620 -> 16864;
17620 -> 16844;
17621 -> 16633;
17622 -> 16633;
17623 -> 16638;
17623 -> 17622;
17624 -> 17622;
17625 -> 17623;
17625 -> 17624;
17626 -> 17624;
17626 -> 17622;
17627 -> 17623;
17627 -> 17622;
17628 -> 17622;
17629 -> 17627;
17629 -> 17628;
17630 -> 17629;
17630 -> 17619;
17630 -> 17628;
17631 -> 17622;
17632 -> 17630;
17632 -> 16633;
17633 -> 16636;
17633 -> 16633;
17634 -> 17633;
17634 -> 17619;
17634 -> 16633;
17635 -> 17634;
17636 -> 17634;
17636 -> 17619;
17637 -> 17634;
17638 -> 17637;
17638 -> 17634;
17639 -> 17634;
17639 -> 17638;
17640 -> 17638;
17641 -> 16638;
17641 -> 17640;
17642 -> 17640;
17643 -> 17641;
17643 -> 17619;
17643 -> 17642;
17644 -> 17643;
17644 -> 17640;
17645 -> 17640;
17646 -> 17640;
17647 -> 17644;
17647 -> 17646;
17648 -> 17647;
17648 -> 17638;
17649 -> 17638;
17650 -> 16638;
17650 -> 17638;
17651 -> 17639;
17651 -> 17644;
17651 -> 17638;
17652 -> 17638;
17653 -> 17651;
17653 -> 17652;
17654 -> 17651;
17654 -> 17652;
17655 -> 17651;
17655 -> 17652;
17656 -> 17651;
17656 -> 17652;
17657 -> 17638;
17658 -> 17638;
17659 -> 17653;
17659 -> 17658;
17660 -> 17658;
17660 -> 17638;
17661 -> 17653;
17661 -> 17660;
17661 -> 17638;
17662 -> 16637;
17662 -> 17638;
17663 -> 17649;
17663 -> 17638;
17664 -> 17638;
17665 -> 17650;
17665 -> 17664;
17666 -> 17661;
17666 -> 17664;
17667 -> 17661;
17667 -> 17664;
17668 -> 17662;
17668 -> 17664;
17669 -> 17663;
17669 -> 17664;
17670 -> 17664;
17671 -> 17665;
17671 -> 17670;
17672 -> 17670;
17673 -> 17671;
17673 -> 17672;
17674 -> 17673;
17674 -> 17661;
17674 -> 17672;
17675 -> 17674;
17675 -> 17670;
17676 -> 17675;
17676 -> 17664;
17677 -> 17676;
17677 -> 17664;
17678 -> 0;
17678 -> 17664;
17679 -> 17666;
17679 -> 17664;
17680 -> 17664;
17681 -> 17680;
17682 -> 17680;
17683 -> 17679;
17683 -> 17680;
17684 -> 17680;
17685 -> 17683;
17685 -> 17684;
17685 -> 17680;
17686 -> 17680;
17687 -> 17679;
17687 -> 17686;
17687 -> 17680;
17688 -> 17680;
17689 -> 17679;
17689 -> 17688;
17689 -> 17680;
17690 -> 17679;
17691 -> 17679;
17692 -> 17690;
17692 -> 17691;
17692 -> 17679;
17693 -> 17680;
17694 -> 17679;
17694 -> 17693;
17694 -> 17680;
17695 -> 17679;
17695 -> 17680;
17696 -> 17667;
17696 -> 17664;
17697 -> 17677;
17697 -> 17664;
17698 -> 17678;
17698 -> 17664;
17699 -> 17679;
17699 -> 17664;
17700 -> 17668;
17700 -> 17664;
17701 -> 17669;
17701 -> 17664;
17702 -> 17664;
17703 -> 17696;
17703 -> 17702;
17704 -> 17697;
17704 -> 17702;
17705 -> 17698;
17705 -> 17702;
17706 -> 17699;
17706 -> 17702;
17707 -> 17700;
17707 -> 17702;
17708 -> 17701;
17708 -> 17702;
17709 -> 17703;
17709 -> 17702;
17710 -> 17707;
17710 -> 17702;
17711 -> 17702;
17712 -> 17709;
17712 -> 17711;
17713 -> 17710;
17713 -> 17711;
17714 -> 17711;
17715 -> 17711;
17716 -> 17711;
17716 -> 0;
17717 -> 17711;
17717 -> 17702;
17718 -> 17717;
17718 -> 17702;
17719 -> 17705;
17719 -> 17702;
17720 -> 17706;
17720 -> 17702;
17721 -> 17707;
17721 -> 17702;
17722 -> 17703;
17722 -> 17702;
17723 -> 17708;
17723 -> 17702;
17724 -> 17702;
17725 -> 17718;
17725 -> 17724;
17726 -> 17719;
17726 -> 17724;
17727 -> 17720;
17727 -> 17724;
17728 -> 17721;
17728 -> 17724;
17729 -> 17722;
17729 -> 17724;
17730 -> 17723;
17730 -> 17724;
17731 -> 17724;
17732 -> 17725;
17732 -> 17726;
17732 -> 17724;
17733 -> 17725;
17733 -> 17726;
17733 -> 17724;
17734 -> 17732;
17734 -> 0;
17734 -> 17724;
17735 -> 17733;
17735 -> 0;
17735 -> 17724;
17736 -> 17724;
17737 -> 17733;
17737 -> 17724;
17738 -> 17737;
17738 -> 0;
17738 -> 17702;
17739 -> 17702;
17740 -> 17737;
17740 -> 17704;
17740 -> 17738;
17741 -> 17740;
17741 -> 17702;
17742 -> 17741;
17742 -> 0;
17742 -> 17664;
17743 -> 17664;
17744 -> 17741;
17744 -> 0;
17744 -> 17664;
17745 -> 17664;
17746 -> 17741;
17746 -> 0;
17746 -> 17664;
17747 -> 17664;
17748 -> 17665;
17748 -> 17746;
17749 -> 17741;
17749 -> 17746;
17750 -> 17679;
17750 -> 17746;
17751 -> 17668;
17751 -> 17746;
17752 -> 17746;
17753 -> 17748;
17753 -> 17752;
17754 -> 17749;
17754 -> 17752;
17755 -> 17750;
17755 -> 17752;
17756 -> 17751;
17756 -> 17752;
17757 -> 17754;
17757 -> 0;
17757 -> 17752;
17758 -> 17746;
17759 -> 17741;
17759 -> 17664;
17760 -> 17639;
17760 -> 17679;
17760 -> 17638;
17761 -> 17759;
17761 -> 0;
17761 -> 17760;
17762 -> 17760;
17763 -> 17761;
17763 -> 17760;
17764 -> 17731;
17764 -> 17763;
17765 -> 16637;
17765 -> 17763;
17766 -> 17763;
17767 -> 17763;
17767 -> 17766;
17768 -> 17763;
17768 -> 17766;
17769 -> 17763;
17769 -> 17766;
17770 -> 17764;
17770 -> 17766;
17771 -> 17765;
17771 -> 17766;
17772 -> 17763;
17772 -> 17766;
17773 -> 17767;
17773 -> 17766;
17774 -> 17769;
17774 -> 17766;
17775 -> 17768;
17775 -> 17679;
17775 -> 17766;
17776 -> 17766;
17777 -> 17775;
17777 -> 17776;
17778 -> 17775;
17778 -> 17776;
17779 -> 17776;
17780 -> 17778;
17780 -> 17779;
17781 -> 17779;
17782 -> 17780;
17782 -> 17781;
17782 -> 17779;
17783 -> 17780;
17783 -> 17776;
17784 -> 17778;
17784 -> 17776;
17785 -> 17776;
17786 -> 17784;
17786 -> 17785;
17787 -> 17783;
17787 -> 17785;
17788 -> 17785;
17788 -> 17776;
17789 -> 17768;
17789 -> 17786;
17789 -> 17766;
17790 -> 17768;
17790 -> 17786;
17790 -> 17766;
17791 -> 17768;
17791 -> 17790;
17791 -> 17766;
17792 -> 17766;
17793 -> 17791;
17793 -> 17792;
17794 -> 17792;
17795 -> 17791;
17795 -> 17794;
17795 -> 17792;
17796 -> 17791;
17796 -> 17792;
17797 -> 17791;
17797 -> 17792;
17798 -> 17791;
17798 -> 17792;
17799 -> 17798;
17799 -> 17792;
17800 -> 17797;
17800 -> 17792;
17801 -> 17799;
17801 -> 17800;
17801 -> 17791;
17801 -> 17792;
17802 -> 17791;
17802 -> 17792;
17803 -> 17791;
17803 -> 17792;
17804 -> 17791;
17804 -> 17792;
17805 -> 17791;
17805 -> 17792;
17806 -> 17791;
17806 -> 17792;
17807 -> 17791;
17807 -> 17792;
17808 -> 17802;
17808 -> 17792;
17809 -> 17804;
17809 -> 17792;
17810 -> 17805;
17810 -> 17792;
17811 -> 17806;
17811 -> 17792;
17812 -> 17792;
17813 -> 17808;
17813 -> 17812;
17814 -> 17809;
17814 -> 17812;
17815 -> 17810;
17815 -> 17812;
17816 -> 17811;
17816 -> 17812;
17817 -> 17807;
17817 -> 17812;
17818 -> 17813;
17818 -> 17812;
17819 -> 17812;
17820 -> 17818;
17820 -> 17819;
17821 -> 17817;
17821 -> 17819;
17822 -> 17819;
17823 -> 17821;
17823 -> 17822;
17824 -> 17822;
17825 -> 17823;
17825 -> 17824;
17826 -> 17824;
17827 -> 17825;
17827 -> 17824;
17828 -> 17823;
17828 -> 17822;
17829 -> 17821;
17829 -> 17819;
17830 -> 17819;
17831 -> 17820;
17831 -> 17830;
17831 -> 17819;
17832 -> 17820;
17832 -> 17821;
17832 -> 17819;
17833 -> 17817;
17833 -> 17812;
17834 -> 17817;
17834 -> 17812;
17835 -> 17817;
17835 -> 17812;
17836 -> 17817;
17836 -> 17812;
17837 -> 17817;
17837 -> 17812;
17838 -> 0;
17838 -> 17817;
17838 -> 17812;
17839 -> 0;
17839 -> 17817;
17839 -> 17812;
17840 -> 17812;
17841 -> 17814;
17841 -> 17840;
17841 -> 17812;
17842 -> 17812;
17843 -> 17815;
17843 -> 17842;
17843 -> 17812;
17844 -> 17812;
17845 -> 17816;
17845 -> 17844;
17845 -> 17812;
17846 -> 17814;
17846 -> 17817;
17846 -> 17812;
17847 -> 17815;
17847 -> 17817;
17847 -> 17812;
17848 -> 17816;
17848 -> 17817;
17848 -> 17812;
17849 -> 17807;
17849 -> 17792;
17850 -> 17803;
17850 -> 17807;
17850 -> 17792;
17851 -> 17791;
17851 -> 17801;
17851 -> 17825;
17851 -> 17827;
17851 -> 17828;
17851 -> 17832;
17851 -> 17846;
17851 -> 17848;
17851 -> 17847;
17851 -> 17836;
17851 -> 17837;
17851 -> 17838;
17851 -> 17839;
17851 -> 17850;
17851 -> 0;
17851 -> 17766;
17852 -> 17768;
17852 -> 17851;
17852 -> 17766;
17853 -> 17766;
17854 -> 17853;
17854 -> 17773;
17854 -> 17774;
17854 -> 17789;
17854 -> 17790;
17854 -> 17852;
17854 -> 17766;
17855 -> 17853;
17855 -> 17766;
17856 -> 17853;
17856 -> 17766;
17857 -> 17853;
17857 -> 17766;
17858 -> 17768;
17858 -> 17854;
17858 -> 17766;
17859 -> 17768;
17859 -> 17854;
17859 -> 17855;
17859 -> 17856;
17859 -> 17857;
17859 -> 17766;
17860 -> 17766;
17861 -> 17859;
17861 -> 17860;
17862 -> 17859;
17862 -> 17860;
17863 -> 17859;
17863 -> 17860;
17864 -> 17858;
17864 -> 17860;
17865 -> 17766;
17866 -> 17861;
17866 -> 17853;
17866 -> 17766;
17867 -> 17771;
17867 -> 17766;
17868 -> 17766;
17869 -> 17867;
17869 -> 17868;
17870 -> 17853;
17870 -> 17868;
17871 -> 17868;
17872 -> 17870;
17872 -> 17871;
17873 -> 17872;
17873 -> 17861;
17873 -> 17871;
17874 -> 17873;
17874 -> 17868;
17875 -> 17870;
17875 -> 17868;
17876 -> 17868;
17877 -> 17868;
17878 -> 17874;
17878 -> 17877;
17879 -> 17875;
17879 -> 17877;
17880 -> 17876;
17880 -> 17877;
17881 -> 17878;
17881 -> 17877;
17882 -> 17877;
17883 -> 17881;
17883 -> 17882;
17884 -> 17883;
17884 -> 0;
17884 -> 17882;
17885 -> 17884;
17886 -> 17877;
17887 -> 17879;
17887 -> 17886;
17888 -> 0;
17888 -> 17886;
17889 -> 17888;
17889 -> 17877;
17890 -> 17880;
17890 -> 17889;
17890 -> 17877;
17891 -> 17878;
17891 -> 0;
17891 -> 17877;
17892 -> 17877;
17893 -> 17890;
17893 -> 17891;
17893 -> 17877;
17894 -> 17878;
17894 -> 0;
17894 -> 17893;
17895 -> 17877;
17896 -> 17895;
17896 -> 17868;
17897 -> 17868;
17898 -> 17896;
17898 -> 17897;
17898 -> 17868;
17899 -> 17766;
17900 -> 17770;
17900 -> 17766;
17901 -> 17771;
17901 -> 17900;
17902 -> 17900;
17903 -> 17901;
17903 -> 17902;
17904 -> 17853;
17904 -> 17902;
17905 -> 17902;
17906 -> 17904;
17906 -> 17905;
17907 -> 17906;
17907 -> 17861;
17907 -> 17905;
17908 -> 17907;
17908 -> 17902;
17909 -> 17902;
17910 -> 17908;
17910 -> 17909;
17911 -> 0;
17911 -> 17909;
17912 -> 17909;
17913 -> 17911;
17913 -> 17912;
17914 -> 17910;
17914 -> 17912;
17915 -> 17914;
17915 -> 17861;
17915 -> 17913;
17915 -> 17912;
17916 -> 17912;
17917 -> 17915;
17917 -> 17916;
17917 -> 17912;
17918 -> 17917;
17919 -> 17904;
17919 -> 17918;
17920 -> 17918;
17921 -> 17919;
17921 -> 17920;
17922 -> 17921;
17922 -> 17861;
17922 -> 17920;
17923 -> 17922;
17923 -> 0;
17923 -> 17918;
17924 -> 17918;
17925 -> 17923;
17925 -> 17924;
17925 -> 17918;
17926 -> 17925;
17926 -> 17917;
17927 -> 17926;
17928 -> 17904;
17928 -> 17861;
17928 -> 17927;
17929 -> 0;
17929 -> 17927;
17930 -> 17927;
17931 -> 17929;
17931 -> 17930;
17932 -> 17928;
17932 -> 17930;
17933 -> 17932;
17933 -> 17861;
17933 -> 17931;
17933 -> 17930;
17934 -> 17933;
17934 -> 17926;
17935 -> 17934;
17936 -> 17904;
17936 -> 17935;
17937 -> 17935;
17938 -> 17936;
17938 -> 17937;
17939 -> 17938;
17939 -> 0;
17939 -> 17935;
17940 -> 17935;
17941 -> 17939;
17941 -> 17940;
17941 -> 17935;
17942 -> 17941;
17942 -> 17934;
17943 -> 17934;
17944 -> 17904;
17944 -> 17943;
17945 -> 17943;
17946 -> 17944;
17946 -> 17945;
17947 -> 17946;
17947 -> 0;
17947 -> 17943;
17948 -> 17943;
17949 -> 17947;
17949 -> 17948;
17949 -> 17943;
17950 -> 17949;
17950 -> 17934;
17951 -> 17942;
17951 -> 17950;
17951 -> 17934;
17952 -> 17934;
17953 -> 17904;
17953 -> 17861;
17953 -> 17952;
17954 -> 0;
17954 -> 17952;
17955 -> 17952;
17956 -> 17954;
17956 -> 17955;
17957 -> 17953;
17957 -> 17955;
17958 -> 17957;
17958 -> 17861;
17958 -> 17956;
17958 -> 17955;
17959 -> 17958;
17959 -> 17934;
17960 -> 17951;
17960 -> 17959;
17960 -> 17934;
17961 -> 17900;
17962 -> 17766;
17963 -> 17767;
17963 -> 17962;
17964 -> 17963;
17964 -> 17861;
17964 -> 17962;
17965 -> 17964;
17965 -> 17766;
17966 -> 17763;
17966 -> 17760;
17967 -> 16634;
17967 -> 16578;
17967 -> 17966;
17967 -> 16577;
17967 -> 17861;
17967 -> 17866;
17967 -> 17760;
17968 -> 17760;
17969 -> 17763;
17969 -> 17968;
17970 -> 17968;
17971 -> 17969;
17971 -> 17970;
17972 -> 17971;
17972 -> 17967;
17972 -> 17970;
17973 -> 17972;
17973 -> 0;
17973 -> 17968;
17974 -> 17968;
17975 -> 17973;
17975 -> 17974;
17975 -> 17968;
17976 -> 17975;
17976 -> 17760;
17977 -> 17632;
17977 -> 17760;
17978 -> 17760;
17979 -> 17760;
17980 -> 17976;
17980 -> 17979;
17981 -> 17977;
17981 -> 17979;
17982 -> 17978;
17982 -> 17979;
17983 -> 16634;
17983 -> 17979;
17984 -> 17980;
17984 -> 17979;
17985 -> 17979;
17986 -> 17984;
17986 -> 17985;
17987 -> 17983;
17987 -> 17985;
17988 -> 17986;
17988 -> 17985;
17989 -> 17987;
17989 -> 16588;
17989 -> 17988;
17990 -> 17987;
17990 -> 17989;
17990 -> 17985;
17991 -> 17982;
17991 -> 17979;
17992 -> 17979;
17993 -> 17991;
17993 -> 17992;
17994 -> 17981;
17994 -> 17992;
17995 -> 17993;
17995 -> 17967;
17995 -> 17992;
17996 -> 17992;
17997 -> 17995;
17997 -> 17996;
17998 -> 17996;
17999 -> 17997;
17999 -> 17998;
17999 -> 17996;
18000 -> 17992;
18001 -> 17997;
18001 -> 18000;
18002 -> 18001;
18002 -> 18000;
18003 -> 18000;
18003 -> 17992;
18004 -> 17997;
18004 -> 18003;
18004 -> 17992;
18005 -> 17997;
18005 -> 18000;
18006 -> 18005;
18006 -> 18000;
18007 -> 17992;
18008 -> 17997;
18008 -> 18007;
18009 -> 18004;
18009 -> 18007;
18010 -> 17994;
18010 -> 18007;
18011 -> 18007;
18012 -> 18010;
18012 -> 18011;
18013 -> 18011;
18014 -> 18012;
18014 -> 18013;
18014 -> 18004;
18014 -> 18011;
18015 -> 18014;
18015 -> 18011;
18016 -> 18015;
18016 -> 18007;
18017 -> 18009;
18017 -> 18007;
18018 -> 18007;
18019 -> 18017;
18019 -> 18018;
18020 -> 18008;
18020 -> 18018;
18021 -> 18018;
18022 -> 18020;
18022 -> 18021;
18023 -> 18021;
18024 -> 18022;
18024 -> 18014;
18024 -> 18023;
18024 -> 18021;
18025 -> 18022;
18025 -> 18014;
18025 -> 18024;
18026 -> 18022;
18026 -> 18024;
18027 -> 18024;
18028 -> 18026;
18028 -> 18027;
18029 -> 18028;
18029 -> 18027;
18030 -> 18027;
18031 -> 18029;
18031 -> 18030;
18032 -> 18030;
18033 -> 18032;
18034 -> 18033;
18034 -> 18032;
18035 -> 0;
18035 -> 18032;
18036 -> 0;
18036 -> 18032;
18037 -> 18032;
18038 -> 18034;
18038 -> 18037;
18039 -> 18035;
18039 -> 18037;
18040 -> 18036;
18040 -> 18037;
18041 -> 18037;
18042 -> 18038;
18042 -> 18041;
18042 -> 18037;
18043 -> 18039;
18043 -> 18041;
18043 -> 18037;
18044 -> 18040;
18044 -> 18041;
18044 -> 18037;
18045 -> 18037;
18045 -> 18030;
18046 -> 18030;
18047 -> 18030;
18048 -> 18047;
18048 -> 18031;
18048 -> 18014;
18048 -> 18030;
18049 -> 18048;
18049 -> 18047;
18050 -> 18030;
18051 -> 18048;
18051 -> 18050;
18052 -> 18047;
18052 -> 18050;
18053 -> 18052;
18053 -> 18050;
18054 -> 18050;
18055 -> 18053;
18055 -> 18054;
18056 -> 18051;
18056 -> 18054;
18057 -> 18055;
18057 -> 18054;
18058 -> 18056;
18058 -> 18057;
18058 -> 18048;
18058 -> 18054;
18059 -> 18046;
18059 -> 18030;
18060 -> 18059;
18060 -> 18027;
18061 -> 18060;
18061 -> 18027;
18062 -> 18027;
18063 -> 18027;
18064 -> 18061;
18064 -> 18063;
18065 -> 18062;
18065 -> 18063;
18066 -> 18063;
18067 -> 18066;
18067 -> 18064;
18067 -> 18059;
18067 -> 18063;
18068 -> 18064;
18068 -> 18065;
18068 -> 18063;
18069 -> 18062;
18069 -> 18024;
18070 -> 18069;
18070 -> 18068;
18070 -> 18059;
18070 -> 18046;
18070 -> 18024;
18071 -> 18024;
18072 -> 18025;
18072 -> 18070;
18072 -> 18071;
18072 -> 18058;
18072 -> 18024;
18073 -> 18022;
18073 -> 18072;
18073 -> 18021;
18074 -> 18019;
18074 -> 18018;
18075 -> 18018;
18076 -> 18074;
18076 -> 18075;
18077 -> 18073;
18077 -> 18075;
18078 -> 18075;
18079 -> 18076;
18079 -> 18004;
18079 -> 18075;
18080 -> 18075;
18081 -> 18079;
18081 -> 18080;
18082 -> 18077;
18082 -> 18080;
18083 -> 18081;
18083 -> 18080;
18084 -> 0;
18084 -> 18080;
18085 -> 18080;
18086 -> 18080;
18087 -> 18083;
18087 -> 18086;
18088 -> 18084;
18088 -> 18086;
18089 -> 18084;
18089 -> 18086;
18090 -> 18085;
18090 -> 18086;
18091 -> 18087;
18091 -> 18090;
18091 -> 18086;
18092 -> 18088;
18092 -> 18090;
18092 -> 18086;
18093 -> 18089;
18093 -> 18090;
18093 -> 18086;
18095 -> 18094;
18096 -> 18094;
18097 -> 18082;
18097 -> 18072;
18097 -> 18080;
18098 -> 18085;
18098 -> 18080;
18099 -> 18096;
18099 -> 18080;
18100 -> 18097;
18100 -> 18098;
18100 -> 18099;
18100 -> 18072;
18100 -> 18091;
18100 -> 18092;
18100 -> 18093;
18100 -> 18080;
18101 -> 18080;
18102 -> 18100;
18102 -> 18101;
18102 -> 18080;
18103 -> 18102;
18104 -> 18080;
18105 -> 18103;
18105 -> 18104;
18105 -> 18080;
18106 -> 18103;
18106 -> 18082;
18106 -> 18072;
18106 -> 18100;
18106 -> 18080;
18107 -> 18080;
18108 -> 18103;
18108 -> 18107;
18108 -> 18080;
18109 -> 18103;
18109 -> 18080;
18110 -> 18075;
18111 -> 18109;
18111 -> 18110;
18111 -> 18075;
18112 -> 18111;
18112 -> 18075;
18113 -> 18112;
18114 -> 18113;
18115 -> 18114;
18115 -> 18113;
18116 -> 0;
18116 -> 18113;
18117 -> 0;
18117 -> 18113;
18118 -> 18113;
18119 -> 18115;
18119 -> 18118;
18120 -> 18116;
18120 -> 18118;
18121 -> 18117;
18121 -> 18118;
18122 -> 18118;
18122 -> 18119;
18122 -> 18076;
18122 -> 18004;
18122 -> 18075;
18123 -> 18075;
18124 -> 18118;
18124 -> 18120;
18124 -> 18123;
18125 -> 18124;
18126 -> 18109;
18126 -> 18123;
18127 -> 18126;
18127 -> 18077;
18127 -> 18072;
18127 -> 18100;
18127 -> 18123;
18128 -> 18125;
18128 -> 18075;
18129 -> 18128;
18130 -> 18007;
18131 -> 18010;
18131 -> 18130;
18132 -> 18131;
18132 -> 18100;
18132 -> 18130;
18133 -> 18007;
18134 -> 18132;
18134 -> 18129;
18134 -> 18007;
18135 -> 18134;
18135 -> 18016;
18135 -> 18007;
18136 -> 17990;
18136 -> 18135;
18136 -> 17979;
18137 -> 17760;
18138 -> 16638;
18138 -> 18137;
18139 -> 18137;
18140 -> 18138;
18140 -> 18100;
18140 -> 18139;
18141 -> 18140;
18141 -> 18137;
18142 -> 18137;
18143 -> 18137;
18144 -> 18141;
18144 -> 18143;
18145 -> 18144;
18145 -> 0;
18145 -> 18137;
18146 -> 18145;
18146 -> 17760;
18147 -> 17760;
18148 -> 17760;
18148 -> 18141;
18148 -> 18147;
18149 -> 18148;
18150 -> 17763;
18150 -> 18149;
18151 -> 18149;
18152 -> 18150;
18152 -> 18151;
18153 -> 18152;
18153 -> 18141;
18153 -> 18151;
18154 -> 18153;
18154 -> 0;
18154 -> 18149;
18155 -> 18149;
18156 -> 18154;
18156 -> 18155;
18156 -> 18149;
18157 -> 18156;
18157 -> 18148;
18158 -> 16635;
18158 -> 18157;
18159 -> 17763;
18159 -> 18157;
18160 -> 17760;
18160 -> 18141;
18160 -> 18157;
18161 -> 18157;
18162 -> 18158;
18162 -> 18161;
18163 -> 18159;
18163 -> 18161;
18164 -> 18160;
18164 -> 18161;
18165 -> 18161;
18166 -> 18162;
18166 -> 18165;
18166 -> 18161;
18167 -> 18166;
18168 -> 18163;
18168 -> 18161;
18169 -> 18164;
18169 -> 18161;
18170 -> 18161;
18171 -> 18161;
18172 -> 18168;
18172 -> 18171;
18173 -> 18169;
18173 -> 18171;
18174 -> 18170;
18174 -> 18171;
18175 -> 18173;
18175 -> 18171;
18176 -> 0;
18176 -> 18171;
18177 -> 18171;
18178 -> 18175;
18178 -> 18177;
18179 -> 18176;
18179 -> 18177;
18180 -> 18178;
18180 -> 18141;
18180 -> 18179;
18180 -> 18177;
18181 -> 18173;
18181 -> 18171;
18182 -> 0;
18182 -> 18171;
18183 -> 18171;
18184 -> 18181;
18184 -> 18183;
18185 -> 18182;
18185 -> 18183;
18186 -> 18184;
18186 -> 18141;
18186 -> 18185;
18186 -> 18183;
18187 -> 18171;
18188 -> 18171;
18189 -> 18172;
18189 -> 18188;
18190 -> 18187;
18190 -> 18188;
18191 -> 18190;
18191 -> 18188;
18192 -> 18189;
18192 -> 18191;
18193 -> 18172;
18193 -> 18187;
18193 -> 18171;
18194 -> 18173;
18194 -> 18171;
18195 -> 18180;
18195 -> 18171;
18196 -> 18195;
18196 -> 18193;
18196 -> 18171;
18197 -> 18172;
18197 -> 18174;
18197 -> 18171;
18198 -> 18173;
18198 -> 18141;
18198 -> 18171;
18199 -> 18171;
18200 -> 18199;
18201 -> 18199;
18202 -> 18198;
18202 -> 18199;
18203 -> 18199;
18204 -> 18202;
18204 -> 18203;
18204 -> 18199;
18205 -> 18199;
18206 -> 18198;
18206 -> 18205;
18206 -> 18199;
18207 -> 18199;
18208 -> 18198;
18208 -> 18207;
18208 -> 18199;
18209 -> 18198;
18209 -> 18199;
18210 -> 18198;
18210 -> 18174;
18210 -> 18171;
18211 -> 18167;
18211 -> 18170;
18211 -> 18197;
18211 -> 18210;
18211 -> 18198;
18211 -> 18161;
18212 -> 18157;
18213 -> 16634;
18213 -> 16582;
18213 -> 16633;
18214 -> 18167;
18214 -> 16633;
18215 -> 16633;
18216 -> 18213;
18216 -> 18215;
18217 -> 18214;
18217 -> 18215;
18218 -> 18215;
18219 -> 18217;
18219 -> 18218;
18219 -> 18215;
18220 -> 18217;
18220 -> 18219;
18221 -> 18216;
18221 -> 18220;
18221 -> 16581;
18221 -> 18211;
18221 -> 18219;
18222 -> 16633;
18223 -> 16634;
18223 -> 16580;
18223 -> 16633;
18224 -> 17621;
18224 -> 16633;
18225 -> 16633;
18226 -> 18223;
18226 -> 18225;
18227 -> 18224;
18227 -> 18225;
18228 -> 18225;
18229 -> 18227;
18229 -> 18228;
18229 -> 18225;
18230 -> 16633;
18231 -> 16571;
18232 -> 16571;
18233 -> 16573;
18233 -> 18232;
18234 -> 18232;
18235 -> 18233;
18235 -> 18221;
18235 -> 18234;
18236 -> 18235;
18236 -> 16571;
18237 -> 16571;
18238 -> 16573;
18238 -> 18237;
18239 -> 18237;
18240 -> 18239;
18240 -> 18237;
18241 -> 18237;
18242 -> 18240;
18242 -> 18241;
18243 -> 18238;
18243 -> 18241;
18244 -> 18241;
18245 -> 18243;
18245 -> 18244;
18246 -> 18244;
18247 -> 18246;
18247 -> 18241;
18248 -> 18241;
18249 -> 18243;
18249 -> 18248;
18250 -> 18249;
18250 -> 18221;
18250 -> 18248;
18251 -> 18250;
18251 -> 18241;
18252 -> 18241;
18253 -> 18251;
18253 -> 18252;
18254 -> 18252;
18254 -> 18241;
18255 -> 18247;
18255 -> 18254;
18255 -> 18241;
18256 -> 18241;
18257 -> 18243;
18257 -> 18256;
18258 -> 18256;
18259 -> 18257;
18259 -> 18258;
18260 -> 18259;
18260 -> 18221;
18260 -> 18258;
18261 -> 18260;
18261 -> 18256;
18262 -> 18256;
18263 -> 18261;
18264 -> 18261;
18265 -> 18263;
18265 -> 18264;
18265 -> 18261;
18266 -> 18263;
18266 -> 18265;
18267 -> 18266;
18267 -> 18241;
18268 -> 18241;
18269 -> 18267;
18269 -> 18268;
18270 -> 18268;
18271 -> 18269;
18271 -> 18270;
18272 -> 18271;
18272 -> 18221;
18272 -> 18270;
18273 -> 18268;
18274 -> 18241;
18275 -> 18272;
18275 -> 18274;
18276 -> 18274;
18277 -> 18275;
18277 -> 18276;
18278 -> 18276;
18279 -> 18276;
18280 -> 18277;
18281 -> 18277;
18281 -> 18280;
18282 -> 18281;
18282 -> 18221;
18282 -> 18280;
18283 -> 18282;
18284 -> 18282;
18285 -> 18276;
18286 -> 18285;
18286 -> 18274;
18287 -> 18274;
18288 -> 18286;
18288 -> 18241;
18289 -> 18241;
18290 -> 18255;
18290 -> 18288;
18290 -> 18241;
18291 -> 18241;
18292 -> 18243;
18292 -> 18291;
18293 -> 18292;
18293 -> 18221;
18293 -> 18291;
18294 -> 18293;
18294 -> 18241;
18295 -> 18294;
18295 -> 14018;
18295 -> 18241;
18296 -> 18290;
18296 -> 18295;
18296 -> 18241;
18297 -> 18241;
18298 -> 18241;
18299 -> 18298;
18299 -> 16571;
18300 -> 16573;
18300 -> 18221;
18300 -> 16571;
18301 -> 18300;
18301 -> 16099;
18301 -> 16571;
18302 -> 16571;
18303 -> 16574;
18303 -> 18302;
18304 -> 18303;
18304 -> 16578;
18304 -> 18300;
18304 -> 18302;
18305 -> 18303;
18305 -> 16580;
18305 -> 18302;
18306 -> 18302;
18307 -> 18305;
18307 -> 18306;
18308 -> 18306;
18309 -> 18307;
18309 -> 16579;
18309 -> 18308;
18309 -> 18306;
18310 -> 18307;
18310 -> 16579;
18310 -> 18309;
18311 -> 0;
18311 -> 18309;
18312 -> 18303;
18312 -> 16582;
18312 -> 18302;
18313 -> 18302;
18314 -> 18312;
18314 -> 18313;
18315 -> 18313;
18316 -> 18314;
18316 -> 18300;
18316 -> 18315;
18316 -> 18313;
18317 -> 18314;
18317 -> 18300;
18317 -> 18313;
18318 -> 18314;
18318 -> 18313;
18319 -> 18318;
18319 -> 18300;
18319 -> 18313;
18320 -> 18319;
18320 -> 18300;
18321 -> 18317;
18321 -> 18320;
18321 -> 18300;
18321 -> 18319;
18322 -> 18314;
18322 -> 18321;
18322 -> 18313;
18323 -> 18317;
18323 -> 18322;
18323 -> 18313;
18324 -> 18303;
18324 -> 16583;
18324 -> 18302;
18325 -> 18303;
18325 -> 16584;
18325 -> 18302;
18326 -> 18303;
18326 -> 16585;
18326 -> 18302;
18327 -> 18303;
18327 -> 16587;
18327 -> 18302;
18328 -> 18303;
18328 -> 17989;
18328 -> 18302;
18329 -> 18303;
18329 -> 16589;
18329 -> 18302;
18330 -> 18302;
18331 -> 18302;
18332 -> 18304;
18332 -> 18331;
18333 -> 18311;
18333 -> 18331;
18334 -> 18323;
18334 -> 18331;
18335 -> 18324;
18335 -> 18331;
18336 -> 18325;
18336 -> 18331;
18337 -> 18326;
18337 -> 18331;
18338 -> 18327;
18338 -> 18331;
18339 -> 18328;
18339 -> 18331;
18340 -> 18329;
18340 -> 18331;
18341 -> 18330;
18341 -> 18331;
18342 -> 18341;
18342 -> 18331;
18343 -> 18341;
18343 -> 18331;
18344 -> 18341;
18344 -> 18331;
18345 -> 18341;
18345 -> 18331;
18346 -> 18341;
18346 -> 18331;
18347 -> 18341;
18347 -> 18331;
18348 -> 18332;
18348 -> 18304;
18348 -> 18331;
18349 -> 18333;
18349 -> 0;
18349 -> 18331;
18350 -> 18334;
18350 -> 18323;
18350 -> 18331;
18351 -> 18332;
18351 -> 18331;
18352 -> 18331;
18353 -> 18351;
18353 -> 18352;
18353 -> 18304;
18353 -> 18322;
18353 -> 18331;
18354 -> 18336;
18354 -> 18337;
18354 -> 18331;
18355 -> 18332;
18355 -> 18341;
18355 -> 18331;
18356 -> 18333;
18356 -> 18341;
18356 -> 18331;
18357 -> 18334;
18357 -> 18341;
18357 -> 18331;
18358 -> 18335;
18358 -> 18341;
18358 -> 18331;
18359 -> 18336;
18359 -> 18341;
18359 -> 18331;
18360 -> 18337;
18360 -> 18341;
18360 -> 18331;
18361 -> 18338;
18361 -> 18341;
18361 -> 18331;
18362 -> 18339;
18362 -> 18341;
18362 -> 18331;
18363 -> 18340;
18363 -> 18341;
18363 -> 18331;
18364 -> 18330;
18364 -> 16571;
18365 -> 18364;
18365 -> 16564;
18366 -> 16565;
18366 -> 18353;
18366 -> 16564;
18367 -> 18365;
18367 -> 16564;
18368 -> 16099;
18368 -> 16564;
18369 -> 18366;
18369 -> 18367;
18369 -> 18368;
18369 -> 18358;
18369 -> 18359;
18369 -> 18360;
18369 -> 18361;
18369 -> 18362;
18369 -> 18363;
18369 -> 18355;
18369 -> 18356;
18369 -> 18357;
18369 -> 16093;
18369 -> 16094;
18369 -> 16095;
18369 -> 16096;
18369 -> 16097;
18369 -> 16098;
18369 -> 18353;
18369 -> 18304;
18369 -> 0;
18369 -> 18323;
18369 -> 16564;
18370 -> 18369;
18370 -> 16099;
18370 -> 16564;
18371 -> 16569;
18371 -> 16564;
18372 -> 16564;
18373 -> 18371;
18373 -> 18372;
18374 -> 16565;
18374 -> 18372;
18375 -> 18372;
18376 -> 18374;
18376 -> 18375;
18377 -> 18376;
18377 -> 18369;
18377 -> 18375;
18378 -> 18377;
18378 -> 18372;
18379 -> 18373;
18379 -> 16569;
18379 -> 18372;
18380 -> 16564;
18381 -> 16569;
18381 -> 16564;
18382 -> 18365;
18382 -> 16564;
18383 -> 18382;
18383 -> 16561;
18384 -> 18383;
18384 -> 16561;
18385 -> 18383;
18385 -> 16561;
18386 -> 16561;
18387 -> 16561;
18388 -> 18385;
18388 -> 18387;
18389 -> 18386;
18389 -> 18387;
18390 -> 18389;
18390 -> 18387;
18391 -> 18389;
18391 -> 18387;
18392 -> 18389;
18392 -> 18387;
18393 -> 18389;
18393 -> 18387;
18394 -> 18388;
18394 -> 16099;
18394 -> 18387;
18395 -> 18388;
18395 -> 18369;
18395 -> 18389;
18395 -> 18387;
18396 -> 18388;
18396 -> 18369;
18396 -> 18389;
18396 -> 18387;
18397 -> 18386;
18397 -> 16561;
18398 -> 18383;
18398 -> 16561;
18399 -> 16562;
18399 -> 16561;
18400 -> 16561;
18401 -> 18397;
18401 -> 18400;
18402 -> 18398;
18402 -> 18400;
18403 -> 18399;
18403 -> 18400;
18404 -> 16563;
18404 -> 18400;
18405 -> 18400;
18406 -> 18404;
18406 -> 18405;
18407 -> 18405;
18408 -> 18406;
18408 -> 18369;
18408 -> 18407;
18409 -> 18408;
18409 -> 18400;
18410 -> 18401;
18410 -> 18409;
18411 -> 18402;
18411 -> 18409;
18412 -> 18403;
18412 -> 18409;
18413 -> 18409;
18414 -> 18410;
18414 -> 18413;
18415 -> 18411;
18415 -> 18413;
18416 -> 18412;
18416 -> 18413;
18417 -> 18404;
18417 -> 18413;
18418 -> 18413;
18419 -> 18417;
18419 -> 18369;
18419 -> 18418;
18420 -> 18419;
18420 -> 18413;
18421 -> 18420;
18422 -> 18409;
18423 -> 18401;
18423 -> 18409;
18424 -> 18402;
18424 -> 18409;
18425 -> 18403;
18425 -> 18409;
18426 -> 18409;
18427 -> 18423;
18427 -> 18426;
18428 -> 18424;
18428 -> 18426;
18429 -> 18425;
18429 -> 18426;
18430 -> 18404;
18430 -> 18426;
18431 -> 18426;
18432 -> 18426;
18433 -> 18426;
18434 -> 18428;
18434 -> 18426;
18435 -> 18426;
18436 -> 18434;
18436 -> 18435;
18437 -> 18427;
18437 -> 18435;
18438 -> 18436;
18438 -> 18419;
18438 -> 18435;
18439 -> 18438;
18439 -> 18437;
18439 -> 18390;
18439 -> 18435;
18440 -> 18439;
18440 -> 18426;
18441 -> 18440;
18442 -> 18440;
18442 -> 18441;
18443 -> 0;
18443 -> 18441;
18444 -> 18443;
18444 -> 18440;
18445 -> 18431;
18445 -> 18440;
18450 -> 18446;
18450 -> 18449;
18451 -> 18447;
18451 -> 18449;
18452 -> 18448;
18452 -> 18449;
18453 -> 18449;
18454 -> 0;
18455 -> 18454;
18456 -> 0;
18457 -> 18456;
18458 -> 0;
18459 -> 18458;
18460 -> 0;
18461 -> 18460;
18462 -> 18430;
18462 -> 18426;
18463 -> 18426;
18464 -> 18462;
18464 -> 18463;
18465 -> 18463;
18466 -> 18464;
18466 -> 18465;
18466 -> 18463;
18467 -> 18463;
18468 -> 18464;
18468 -> 18467;
18469 -> 18468;
18469 -> 18419;
18469 -> 18467;
18470 -> 18469;
18470 -> 18463;
18471 -> 18432;
18471 -> 18470;
18471 -> 18426;
18472 -> 18426;
18473 -> 18430;
18473 -> 18472;
18474 -> 0;
18474 -> 18472;
18475 -> 18472;
18476 -> 18474;
18476 -> 18475;
18477 -> 18473;
18477 -> 18475;
18478 -> 18477;
18478 -> 18419;
18478 -> 18476;
18478 -> 18475;
18479 -> 18475;
18480 -> 18478;
18480 -> 18479;
18480 -> 18475;
18481 -> 18480;
18481 -> 18426;
18482 -> 18431;
18482 -> 18481;
18482 -> 18426;
18483 -> 18426;
18484 -> 18430;
18484 -> 18483;
18485 -> 18484;
18485 -> 18419;
18485 -> 18483;
18486 -> 18485;
18486 -> 18426;
18487 -> 18482;
18487 -> 18486;
18487 -> 18426;
18488 -> 18471;
18488 -> 18487;
18488 -> 18426;
18489 -> 18488;
18490 -> 18489;
18490 -> 18488;
18491 -> 18490;
18491 -> 18488;
18492 -> 18491;
18493 -> 18491;
18493 -> 18492;
18494 -> 18491;
18494 -> 18492;
18495 -> 18492;
18496 -> 18494;
18496 -> 18495;
18498 -> 18497;
18499 -> 18495;
18500 -> 18496;
18500 -> 18499;
18501 -> 18499;
18502 -> 18500;
18502 -> 18499;
18503 -> 18500;
18503 -> 18499;
18504 -> 18496;
18504 -> 18495;
18505 -> 18494;
18505 -> 18492;
18506 -> 18492;
18507 -> 18493;
18507 -> 18506;
18507 -> 18492;
18508 -> 18493;
18508 -> 18494;
18508 -> 18492;
18509 -> 18428;
18509 -> 18488;
18510 -> 18488;
18511 -> 18491;
18511 -> 18510;
18512 -> 18509;
18512 -> 18510;
18513 -> 18427;
18513 -> 18510;
18514 -> 18513;
18514 -> 18390;
18514 -> 18510;
18515 -> 18514;
18516 -> 18512;
18516 -> 18419;
18516 -> 18515;
18516 -> 18514;
18517 -> 18516;
18517 -> 18513;
18517 -> 18514;
18518 -> 18512;
18518 -> 18419;
18518 -> 18514;
18519 -> 18513;
18519 -> 18517;
18519 -> 18518;
18519 -> 18516;
18519 -> 18419;
18519 -> 18514;
18520 -> 18511;
18520 -> 18510;
18521 -> 18513;
18521 -> 18517;
18521 -> 18520;
18521 -> 18519;
18521 -> 18500;
18521 -> 18502;
18521 -> 18503;
18521 -> 18504;
18521 -> 18508;
18521 -> 18510;
18522 -> 18488;
18523 -> 18428;
18523 -> 18521;
18523 -> 18426;
18524 -> 18426;
18525 -> 18523;
18525 -> 18524;
18526 -> 18525;
18526 -> 18524;
18527 -> 18524;
18528 -> 18433;
18528 -> 18526;
18528 -> 18426;
18529 -> 18426;
18530 -> 18430;
18530 -> 18529;
18531 -> 18530;
18531 -> 18526;
18531 -> 18529;
18532 -> 18529;
18533 -> 18531;
18533 -> 18532;
18534 -> 18533;
18534 -> 0;
18534 -> 18529;
18535 -> 18534;
18535 -> 18426;
18536 -> 18409;
18537 -> 16561;
18538 -> 16563;
18538 -> 18531;
18538 -> 16561;
18539 -> 16561;
18540 -> 18383;
18540 -> 16561;
18541 -> 16561;
18542 -> 18540;
18542 -> 18541;
18543 -> 18386;
18543 -> 18541;
18544 -> 18543;
18544 -> 18517;
18544 -> 18538;
18544 -> 18541;
18545 -> 18543;
18545 -> 18391;
18545 -> 18541;
18546 -> 18545;
18546 -> 18541;
18547 -> 18542;
18547 -> 18538;
18547 -> 18546;
18548 -> 18544;
18548 -> 18541;
18549 -> 18542;
18549 -> 18538;
18549 -> 18541;
18550 -> 18547;
18550 -> 18541;
18551 -> 18543;
18551 -> 18395;
18551 -> 18541;
18552 -> 18543;
18552 -> 18396;
18552 -> 18541;
18553 -> 18541;
18554 -> 18541;
18555 -> 18548;
18555 -> 18554;
18556 -> 18549;
18556 -> 18554;
18557 -> 18550;
18557 -> 18554;
18558 -> 18549;
18558 -> 18554;
18559 -> 18551;
18559 -> 18554;
18560 -> 18552;
18560 -> 18554;
18561 -> 18553;
18561 -> 18554;
18562 -> 18561;
18562 -> 18554;
18563 -> 18561;
18563 -> 18554;
18564 -> 18561;
18564 -> 18554;
18565 -> 18555;
18565 -> 18544;
18565 -> 18554;
18566 -> 18556;
18566 -> 18538;
18566 -> 18554;
18567 -> 18556;
18567 -> 18554;
18568 -> 18554;
18569 -> 18567;
18569 -> 18568;
18569 -> 18538;
18569 -> 18547;
18569 -> 18554;
18570 -> 18557;
18570 -> 18538;
18570 -> 18554;
18571 -> 18557;
18571 -> 18554;
18572 -> 18554;
18573 -> 18571;
18573 -> 18572;
18573 -> 18538;
18573 -> 18547;
18573 -> 18569;
18573 -> 18554;
18574 -> 18555;
18574 -> 18554;
18575 -> 18554;
18576 -> 18574;
18576 -> 18575;
18576 -> 18544;
18576 -> 18573;
18576 -> 18554;
18577 -> 18555;
18577 -> 18554;
18578 -> 18554;
18579 -> 18577;
18579 -> 18578;
18579 -> 18544;
18579 -> 18576;
18579 -> 18554;
18580 -> 18558;
18580 -> 18579;
18580 -> 18554;
18581 -> 18580;
18581 -> 18578;
18582 -> 18578;
18583 -> 18581;
18583 -> 18582;
18584 -> 0;
18584 -> 18582;
18585 -> 18584;
18585 -> 18578;
18586 -> 18580;
18586 -> 18585;
18586 -> 18554;
18587 -> 18581;
18587 -> 18582;
18588 -> 0;
18588 -> 18582;
18589 -> 18588;
18589 -> 18578;
18590 -> 18580;
18590 -> 18589;
18590 -> 18586;
18590 -> 18554;
18591 -> 18580;
18591 -> 18585;
18591 -> 18589;
18591 -> 18554;
18592 -> 18555;
18592 -> 18561;
18592 -> 18554;
18593 -> 18556;
18593 -> 18561;
18593 -> 18554;
18594 -> 18557;
18594 -> 18561;
18594 -> 18554;
18595 -> 18558;
18595 -> 18561;
18595 -> 18554;
18596 -> 18559;
18596 -> 18561;
18596 -> 18554;
18597 -> 18560;
18597 -> 18561;
18597 -> 18554;
18598 -> 18553;
18598 -> 16561;
18599 -> 18598;
18599 -> 16554;
18600 -> 16555;
18600 -> 18579;
18600 -> 16554;
18601 -> 18599;
18601 -> 16554;
18602 -> 16554;
18603 -> 18600;
18603 -> 18601;
18603 -> 18602;
18603 -> 18595;
18603 -> 18596;
18603 -> 18597;
18603 -> 18592;
18603 -> 18593;
18603 -> 18594;
18603 -> 18579;
18603 -> 18544;
18603 -> 18538;
18603 -> 18547;
18603 -> 16554;
18604 -> 16554;
18605 -> 18603;
18605 -> 18604;
18605 -> 16554;
18606 -> 16559;
18606 -> 16554;
18607 -> 16554;
18608 -> 18606;
18608 -> 18607;
18609 -> 16555;
18609 -> 18607;
18610 -> 18607;
18611 -> 18609;
18611 -> 18610;
18612 -> 18611;
18612 -> 18603;
18612 -> 18610;
18613 -> 18612;
18613 -> 18607;
18614 -> 18608;
18614 -> 16559;
18614 -> 18607;
18615 -> 16554;
18616 -> 16559;
18616 -> 16554;
18617 -> 16554;
18618 -> 18617;
18618 -> 16555;
18618 -> 16554;
18619 -> 18599;
18619 -> 16554;
18620 -> 18619;
18620 -> 16550;
18621 -> 16550;
18622 -> 16552;
18622 -> 18621;
18623 -> 18621;
18624 -> 18623;
18624 -> 18621;
18625 -> 18621;
18626 -> 18624;
18626 -> 18625;
18627 -> 18622;
18627 -> 18625;
18628 -> 18625;
18629 -> 18627;
18629 -> 18628;
18630 -> 18628;
18631 -> 18630;
18631 -> 18625;
18632 -> 18625;
18633 -> 18627;
18633 -> 18632;
18634 -> 18633;
18634 -> 18603;
18634 -> 18632;
18635 -> 18634;
18635 -> 18625;
18636 -> 18625;
18637 -> 18635;
18637 -> 18636;
18638 -> 18636;
18638 -> 18625;
18639 -> 18631;
18639 -> 18638;
18639 -> 18625;
18640 -> 18625;
18641 -> 18627;
18641 -> 18640;
18642 -> 18640;
18643 -> 18641;
18643 -> 18642;
18644 -> 18643;
18644 -> 18603;
18644 -> 18642;
18645 -> 18644;
18645 -> 18640;
18646 -> 18640;
18647 -> 18645;
18648 -> 18645;
18649 -> 18647;
18649 -> 18648;
18649 -> 18645;
18650 -> 18647;
18650 -> 18649;
18651 -> 18650;
18651 -> 18625;
18652 -> 18625;
18653 -> 18651;
18653 -> 18652;
18654 -> 18652;
18655 -> 18653;
18655 -> 18654;
18656 -> 18655;
18656 -> 18603;
18656 -> 18654;
18657 -> 18652;
18658 -> 18625;
18659 -> 18656;
18659 -> 18658;
18660 -> 18658;
18661 -> 18659;
18661 -> 18660;
18662 -> 18660;
18663 -> 18660;
18664 -> 18661;
18665 -> 18661;
18665 -> 18664;
18666 -> 18665;
18666 -> 18603;
18666 -> 18664;
18667 -> 18666;
18668 -> 18666;
18669 -> 18660;
18670 -> 18669;
18670 -> 18658;
18671 -> 18658;
18672 -> 18670;
18672 -> 18625;
18673 -> 18625;
18674 -> 18639;
18674 -> 18672;
18674 -> 18625;
18675 -> 18625;
18676 -> 18627;
18676 -> 18675;
18677 -> 18676;
18677 -> 18603;
18677 -> 18675;
18678 -> 18677;
18678 -> 18625;
18679 -> 18678;
18679 -> 14018;
18679 -> 18625;
18680 -> 18674;
18680 -> 18679;
18680 -> 18625;
18681 -> 18625;
18682 -> 18625;
18683 -> 18682;
18683 -> 16550;
18684 -> 18620;
18684 -> 18603;
18684 -> 18683;
18684 -> 16550;
18685 -> 18620;
18685 -> 18603;
18685 -> 18684;
18686 -> 18684;
18687 -> 0;
18687 -> 18684;
18688 -> 18685;
18688 -> 18686;
18688 -> 18687;
18688 -> 18603;
18688 -> 18618;
18688 -> 18684;
18689 -> 18688;
18689 -> 18686;
18690 -> 18689;
18690 -> 18688;
18690 -> 18686;
18691 -> 18688;
18691 -> 18686;
18692 -> 0;
18692 -> 18686;
18693 -> 18688;
18693 -> 18692;
18693 -> 18690;
18693 -> 18684;
18694 -> 18693;
18694 -> 18684;
18695 -> 18684;
18696 -> 16552;
18696 -> 18695;
18697 -> 18695;
18698 -> 18696;
18698 -> 18693;
18698 -> 18697;
18698 -> 18695;
18699 -> 18698;
18700 -> 18696;
18700 -> 18693;
18700 -> 18698;
18701 -> 18699;
18701 -> 18698;
18702 -> 18698;
18703 -> 18701;
18703 -> 18702;
18704 -> 18696;
18704 -> 18702;
18705 -> 18702;
18706 -> 18702;
18707 -> 18702;
18708 -> 18704;
18708 -> 18693;
18708 -> 18707;
18709 -> 18708;
18709 -> 18693;
18709 -> 18707;
18710 -> 18708;
18710 -> 18693;
18710 -> 18709;
18711 -> 18709;
18712 -> 18708;
18712 -> 18711;
18713 -> 18711;
18714 -> 18711;
18715 -> 18712;
18715 -> 18714;
18716 -> 18715;
18716 -> 18711;
18717 -> 18716;
18718 -> 18716;
18718 -> 18717;
18719 -> 18718;
18719 -> 18693;
18719 -> 18717;
18720 -> 18719;
18720 -> 18716;
18721 -> 18711;
18722 -> 18711;
18723 -> 18713;
18723 -> 18722;
18723 -> 18711;
18724 -> 18721;
18724 -> 18711;
18725 -> 18724;
18725 -> 18709;
18726 -> 18708;
18726 -> 18725;
18726 -> 18707;
18727 -> 18726;
18727 -> 18702;
18728 -> 18702;
18729 -> 18704;
18729 -> 18728;
18730 -> 18729;
18730 -> 18725;
18730 -> 18728;
18731 -> 18730;
18731 -> 18702;
18732 -> 18702;
18733 -> 16069;
18733 -> 16068;
18733 -> 18732;
18733 -> 18702;
18734 -> 18702;
18735 -> 18705;
18735 -> 18734;
18735 -> 18702;
18736 -> 18735;
18736 -> 18702;
18737 -> 16069;
18737 -> 18736;
18738 -> 18705;
18738 -> 18702;
18739 -> 18737;
18739 -> 18698;
18740 -> 18698;
18741 -> 18700;
18741 -> 18739;
18741 -> 18740;
18741 -> 16068;
18741 -> 18725;
18741 -> 0;
18741 -> 18698;
18742 -> 18699;
18742 -> 18741;
18743 -> 18741;
18744 -> 18742;
18744 -> 18743;
18745 -> 18696;
18745 -> 18743;
18746 -> 18743;
18747 -> 18745;
18747 -> 18746;
18748 -> 18747;
18748 -> 18743;
18749 -> 18744;
18749 -> 18699;
18749 -> 18743;
18750 -> 18741;
18751 -> 0;
18751 -> 18741;
18752 -> 18741;
18753 -> 18751;
18753 -> 18752;
18754 -> 18699;
18754 -> 18698;
18755 -> 18696;
18755 -> 18741;
18755 -> 18695;
18756 -> 18755;
18756 -> 18684;
18757 -> 18684;
18758 -> 18694;
18758 -> 18757;
18759 -> 18756;
18759 -> 18757;
18760 -> 18759;
18760 -> 18757;
18761 -> 18760;
18761 -> 18741;
18761 -> 18753;
18761 -> 18757;
18762 -> 18684;
18763 -> 18693;
18763 -> 16550;
18764 -> 16551;
18764 -> 16550;
18765 -> 16550;
18766 -> 18763;
18766 -> 18765;
18767 -> 18764;
18767 -> 18765;
18768 -> 16552;
18768 -> 18765;
18769 -> 18766;
18769 -> 18741;
18769 -> 18765;
18770 -> 18766;
18770 -> 18741;
18770 -> 18765;
18771 -> 18769;
18771 -> 18770;
18771 -> 18741;
18771 -> 18753;
18771 -> 18765;
18772 -> 15532;
18772 -> 18765;
18773 -> 18769;
18773 -> 18765;
18774 -> 18773;
18774 -> 18771;
18774 -> 18765;
18775 -> 18772;
18775 -> 15522;
18775 -> 15523;
18775 -> 15524;
18775 -> 15525;
18775 -> 15526;
18775 -> 15527;
18775 -> 15528;
18775 -> 18774;
18776 -> 18766;
18776 -> 18774;
18776 -> 18771;
18777 -> 18776;
18778 -> 18777;
18778 -> 18776;
18779 -> 18772;
18779 -> 18775;
18779 -> 18776;
18780 -> 18772;
18780 -> 18775;
18780 -> 18776;
18781 -> 18772;
18781 -> 18780;
18781 -> 18776;
18782 -> 18769;
18782 -> 18776;
18783 -> 16550;
18784 -> 18766;
18784 -> 16550;
18785 -> 18784;
18785 -> 16547;
18786 -> 16545;
18786 -> 18782;
18786 -> 16547;
18787 -> 18785;
18787 -> 16547;
18788 -> 16547;
18789 -> 18786;
18789 -> 18787;
18789 -> 18788;
18789 -> 18782;
18789 -> 16547;
18790 -> 16548;
18790 -> 18789;
18791 -> 18789;
18792 -> 18790;
18792 -> 18791;
18793 -> 16545;
18793 -> 18791;
18794 -> 18791;
18795 -> 18793;
18795 -> 18794;
18796 -> 18795;
18796 -> 18791;
18797 -> 18792;
18797 -> 16548;
18797 -> 18791;
18798 -> 18789;
18799 -> 0;
18799 -> 18789;
18800 -> 18789;
18801 -> 18799;
18801 -> 18800;
18802 -> 16548;
18802 -> 16547;
18803 -> 0;
18803 -> 16544;
18804 -> 16544;
18805 -> 16544;
18806 -> 18803;
18806 -> 18805;
18807 -> 18804;
18807 -> 18805;
18808 -> 16545;
18808 -> 18789;
18808 -> 18805;
18809 -> 18806;
18809 -> 18805;
18810 -> 18805;
18811 -> 18809;
18811 -> 18810;
18812 -> 18808;
18812 -> 18810;
18813 -> 18812;
18813 -> 18789;
18813 -> 18801;
18813 -> 18811;
18813 -> 18810;
18814 -> 18813;
18815 -> 16545;
18815 -> 18789;
18815 -> 16544;
18816 -> 18815;
18816 -> 16537;
18817 -> 18816;
18817 -> 16532;
18818 -> 16533;
18818 -> 16532;
18819 -> 16535;
18819 -> 16532;
18820 -> 18817;
18820 -> 18818;
18820 -> 18819;
18820 -> 18789;
18820 -> 18801;
18820 -> 16536;
18820 -> 16532;
18821 -> 18820;
18822 -> 0;
18822 -> 1;
18823 -> 1;
18824 -> 18821;
18824 -> 18823;
18825 -> 0;
18825 -> 18823;
18826 -> 18825;
18826 -> 1;
18827 -> 0;
18827 -> 1;
18828 -> 1;
18829 -> 18827;
18829 -> 18828;
18830 -> 11657;
18830 -> 18828;
18831 -> 18829;
18831 -> 0;
18831 -> 18828;
18832 -> 18828;
18833 -> 18829;
18833 -> 18828;
18834 -> 18830;
18834 -> 18833;
18834 -> 18821;
18834 -> 18828;
18835 -> 18834;
18836 -> 18835;
18837 -> 18835;
18837 -> 18834;
18838 -> 18829;
18838 -> 18834;
18839 -> 18834;
18840 -> 18838;
18840 -> 18839;
18841 -> 18837;
18841 -> 18839;
18842 -> 18839;
18843 -> 18841;
18843 -> 18842;
18844 -> 18843;
18844 -> 18839;
18845 -> 18840;
18845 -> 18839;
18846 -> 18839;
18847 -> 18845;
18847 -> 18846;
18848 -> 18844;
18848 -> 18846;
18849 -> 18846;
18850 -> 18848;
18850 -> 18849;
18851 -> 18850;
18851 -> 18846;
18852 -> 18851;
18853 -> 18851;
18853 -> 18852;
18854 -> 18852;
18855 -> 18853;
18855 -> 18854;
18856 -> 18854;
18857 -> 18855;
18857 -> 18835;
18857 -> 18856;
18857 -> 18854;
18858 -> 18852;
18859 -> 18853;
18859 -> 18835;
18859 -> 18852;
18860 -> 18859;
18860 -> 18851;
18861 -> 18851;
18862 -> 18846;
18863 -> 18848;
18863 -> 18835;
18863 -> 18862;
18863 -> 18846;
18864 -> 18847;
18864 -> 18863;
18865 -> 18863;
18866 -> 18863;
18867 -> 18866;
18867 -> 18863;
18868 -> 18863;
18869 -> 18864;
18869 -> 18863;
18870 -> 18863;
18871 -> 18869;
18871 -> 18870;
18872 -> 18867;
18872 -> 18870;
18873 -> 18870;
18874 -> 18870;
18875 -> 18872;
18875 -> 18874;
18876 -> 18875;
18876 -> 18870;
18877 -> 18871;
18877 -> 18864;
18877 -> 18870;
18878 -> 18870;
18879 -> 18877;
18879 -> 18878;
18880 -> 18876;
18880 -> 18878;
18881 -> 18880;
18881 -> 18878;
18882 -> 18879;
18882 -> 18878;
18883 -> 18882;
18884 -> 18882;
18885 -> 18882;
18886 -> 18884;
18886 -> 18885;
18887 -> 18881;
18887 -> 18885;
18888 -> 18885;
18889 -> 18887;
18889 -> 18867;
18889 -> 18886;
18889 -> 18885;
18890 -> 18886;
18890 -> 18889;
18891 -> 18885;
18891 -> 18889;
18892 -> 18889;
18892 -> 18890;
18893 -> 18892;
18894 -> 18892;
18895 -> 18893;
18895 -> 18894;
18895 -> 18892;
18896 -> 18895;
18897 -> 18883;
18897 -> 18896;
18897 -> 18895;
18898 -> 18893;
18898 -> 18895;
18899 -> 18898;
18899 -> 18882;
18900 -> 18882;
18901 -> 18899;
18901 -> 18900;
18901 -> 18882;
18902 -> 18899;
18902 -> 18878;
18903 -> 18870;
18904 -> 18902;
18904 -> 18903;
18904 -> 18870;
18905 -> 18871;
18905 -> 18904;
18906 -> 18904;
18907 -> 18905;
18907 -> 18906;
18908 -> 18902;
18908 -> 18906;
18909 -> 18907;
18909 -> 18864;
18909 -> 18906;
18910 -> 18908;
18910 -> 18906;
18911 -> 18906;
18912 -> 18910;
18912 -> 18911;
18913 -> 18911;
18913 -> 18906;
18914 -> 18906;
18915 -> 18906;
18916 -> 18915;
18916 -> 18906;
18917 -> 18906;
18918 -> 18910;
18918 -> 18917;
18919 -> 18917;
18920 -> 18918;
18920 -> 18919;
18921 -> 18919;
18921 -> 18917;
18922 -> 18921;
18922 -> 18906;
18923 -> 0;
18923 -> 18906;
18924 -> 18906;
18925 -> 18923;
18925 -> 18924;
18926 -> 18910;
18926 -> 18924;
18927 -> 18924;
18928 -> 18926;
18928 -> 18927;
18929 -> 18928;
18929 -> 18892;
18929 -> 18890;
18929 -> 18927;
18930 -> 18928;
18930 -> 18892;
18930 -> 18890;
18930 -> 18929;
18931 -> 18929;
18932 -> 18928;
18932 -> 18931;
18933 -> 18932;
18933 -> 18931;
18934 -> 18931;
18935 -> 18931;
18936 -> 18933;
18936 -> 18935;
18937 -> 18934;
18937 -> 18935;
18938 -> 18935;
18939 -> 18937;
18939 -> 18938;
18940 -> 18938;
18941 -> 18939;
18941 -> 18940;
18942 -> 18937;
18942 -> 18935;
18943 -> 18936;
18943 -> 18935;
18944 -> 18936;
18944 -> 18937;
18944 -> 18935;
18945 -> 18934;
18945 -> 18929;
18946 -> 18929;
18947 -> 18930;
18947 -> 18945;
18947 -> 18946;
18947 -> 18944;
18947 -> 18890;
18947 -> 18892;
18947 -> 18929;
18948 -> 18928;
18948 -> 18947;
18948 -> 18927;
18949 -> 18948;
18949 -> 18924;
18950 -> 18925;
18950 -> 18924;
18951 -> 18924;
18952 -> 18949;
18952 -> 18951;
18953 -> 18950;
18953 -> 18951;
18954 -> 18952;
18954 -> 18951;
18955 -> 18953;
18955 -> 18951;
18956 -> 18951;
18957 -> 18954;
18957 -> 18956;
18958 -> 18955;
18958 -> 18956;
18959 -> 18958;
18959 -> 18956;
18960 -> 18957;
18960 -> 18956;
18961 -> 18956;
18962 -> 18959;
18962 -> 18956;
18963 -> 18956;
18964 -> 18960;
18964 -> 18963;
18965 -> 18961;
18965 -> 18963;
18966 -> 18961;
18966 -> 18963;
18967 -> 18962;
18967 -> 18963;
18968 -> 18961;
18968 -> 18963;
18969 -> 18963;
18970 -> 18964;
18970 -> 18969;
18970 -> 18963;
18971 -> 18968;
18971 -> 18963;
18972 -> 18971;
18973 -> 18965;
18973 -> 18972;
18973 -> 18971;
18974 -> 18971;
18975 -> 18966;
18975 -> 18974;
18975 -> 18971;
18976 -> 18964;
18976 -> 18963;
18977 -> 18963;
18979 -> 18978;
18981 -> 18980;
18982 -> 18977;
18982 -> 18963;
18983 -> 18967;
18983 -> 18963;
18984 -> 18965;
18984 -> 18963;
18985 -> 18966;
18985 -> 18963;
18986 -> 18963;
18987 -> 18963;
18988 -> 18982;
18988 -> 18987;
18989 -> 18983;
18989 -> 18987;
18990 -> 18984;
18990 -> 18987;
18991 -> 18985;
18991 -> 18987;
18992 -> 18986;
18992 -> 18987;
18993 -> 18988;
18993 -> 18987;
18994 -> 18989;
18994 -> 18987;
18995 -> 18987;
18996 -> 18990;
18996 -> 18987;
18997 -> 18991;
18997 -> 18987;
18998 -> 18987;
18999 -> 18998;
18999 -> 18993;
18999 -> 18994;
18999 -> 18995;
18999 -> 18996;
18999 -> 18997;
18999 -> 18977;
18999 -> 0;
18999 -> 18987;
19000 -> 18998;
19000 -> 18987;
19001 -> 18998;
19001 -> 18987;
19002 -> 18989;
19002 -> 18999;
19002 -> 18987;
19003 -> 0;
19003 -> 18987;
19004 -> 19002;
19004 -> 18998;
19004 -> 18987;
19005 -> 18986;
19005 -> 18963;
19006 -> 18963;
19007 -> 19005;
19007 -> 19006;
19008 -> 18964;
19008 -> 19006;
19009 -> 19007;
19009 -> 19006;
19010 -> 19006;
19011 -> 19009;
19011 -> 19010;
19012 -> 19008;
19012 -> 19010;
19013 -> 19012;
19013 -> 19010;
19014 -> 19010;
19015 -> 19013;
19015 -> 19014;
19016 -> 19011;
19016 -> 19014;
19017 -> 19016;
19017 -> 18999;
19017 -> 19014;
19018 -> 19016;
19018 -> 18999;
19018 -> 19000;
19018 -> 19004;
19018 -> 19001;
19018 -> 19014;
19019 -> 0;
19019 -> 19014;
19020 -> 19016;
19020 -> 18999;
19020 -> 19000;
19020 -> 19004;
19020 -> 19001;
19020 -> 0;
19020 -> 19014;
19021 -> 19020;
19022 -> 19015;
19022 -> 19021;
19023 -> 19021;
19024 -> 19022;
19024 -> 19023;
19025 -> 19024;
19025 -> 18947;
19025 -> 19023;
19026 -> 19021;
19027 -> 19025;
19027 -> 19026;
19028 -> 19026;
19029 -> 19027;
19029 -> 19028;
19030 -> 19029;
19030 -> 18947;
19030 -> 19028;
19031 -> 19030;
19031 -> 19026;
19032 -> 19026;
19033 -> 19031;
19034 -> 19031;
19035 -> 19033;
19035 -> 19034;
19035 -> 19031;
19036 -> 19033;
19036 -> 19035;
19037 -> 19021;
19038 -> 19036;
19038 -> 19037;
19039 -> 19038;
19039 -> 19037;
19040 -> 19037;
19041 -> 19039;
19041 -> 19040;
19042 -> 19040;
19043 -> 19041;
19043 -> 19042;
19044 -> 19043;
19045 -> 19044;
19046 -> 19043;
19047 -> 19043;
19048 -> 19043;
19048 -> 19040;
19049 -> 19048;
19049 -> 19020;
19050 -> 19049;
19050 -> 19020;
19051 -> 19020;
19052 -> 19050;
19052 -> 19051;
19053 -> 19016;
19053 -> 19051;
19054 -> 19052;
19054 -> 19051;
19055 -> 19051;
19056 -> 19054;
19056 -> 19055;
19056 -> 19051;
19057 -> 19053;
19057 -> 18999;
19057 -> 19000;
19057 -> 19004;
19057 -> 19001;
19057 -> 0;
19057 -> 19051;
19058 -> 19051;
19059 -> 19054;
19059 -> 19058;
19060 -> 19058;
19061 -> 19059;
19061 -> 19043;
19061 -> 19060;
19062 -> 19060;
19062 -> 19051;
19063 -> 19053;
19063 -> 18999;
19063 -> 19000;
19063 -> 19004;
19063 -> 19001;
19063 -> 0;
19063 -> 19051;
19064 -> 19062;
19064 -> 19063;
19064 -> 19051;
19065 -> 19064;
19065 -> 19020;
19066 -> 19014;
19067 -> 19015;
19067 -> 19066;
19068 -> 19066;
19069 -> 19067;
19069 -> 19043;
19069 -> 19068;
19070 -> 19068;
19071 -> 19070;
19071 -> 19014;
19072 -> 0;
19072 -> 19071;
19073 -> 19015;
19073 -> 19071;
19074 -> 19071;
19075 -> 19015;
19075 -> 19074;
19076 -> 19074;
19077 -> 19075;
19077 -> 19076;
19078 -> 19077;
19078 -> 19043;
19078 -> 19076;
19079 -> 19074;
19080 -> 19078;
19080 -> 19079;
19081 -> 19080;
19081 -> 19071;
19082 -> 19071;
19083 -> 19072;
19083 -> 19082;
19084 -> 19073;
19084 -> 19082;
19085 -> 19081;
19085 -> 19082;
19086 -> 19016;
19086 -> 19082;
19087 -> 19082;
19088 -> 19085;
19088 -> 19087;
19088 -> 19082;
19089 -> 19088;
19089 -> 19082;
19090 -> 19086;
19090 -> 18999;
19090 -> 19000;
19090 -> 19004;
19090 -> 19089;
19091 -> 19090;
19091 -> 19089;
19092 -> 19083;
19092 -> 19082;
19093 -> 19084;
19093 -> 19082;
19094 -> 19091;
19094 -> 19082;
19095 -> 19092;
19095 -> 19093;
19095 -> 19094;
19095 -> 19043;
19095 -> 19082;
19096 -> 19010;
19097 -> 19006;
19098 -> 18963;
19099 -> 18977;
19099 -> 19095;
19099 -> 18963;
19100 -> 19099;
19100 -> 18907;
19100 -> 18864;
19100 -> 18906;
19101 -> 18922;
19101 -> 19100;
19101 -> 18906;
19102 -> 18907;
19102 -> 18864;
19102 -> 18906;
19103 -> 18907;
19103 -> 18864;
19103 -> 19102;
19104 -> 19102;
19105 -> 19102;
19106 -> 18907;
19106 -> 18864;
19106 -> 19105;
19107 -> 19105;
19108 -> 19106;
19108 -> 19107;
19109 -> 18910;
19109 -> 19107;
19110 -> 19107;
19111 -> 19109;
19111 -> 19110;
19112 -> 19111;
19112 -> 19099;
19112 -> 19110;
19113 -> 19110;
19114 -> 19111;
19114 -> 19099;
19114 -> 19113;
19114 -> 19110;
19115 -> 19114;
19116 -> 19112;
19116 -> 19115;
19116 -> 19114;
19117 -> 19112;
19117 -> 19114;
19118 -> 19114;
19119 -> 19117;
19119 -> 19118;
19120 -> 19118;
19121 -> 19119;
19121 -> 19120;
19121 -> 19118;
19122 -> 19118;
19123 -> 19118;
19124 -> 19118;
19124 -> 19123;
19125 -> 19123;
19126 -> 19124;
19126 -> 19125;
19127 -> 19126;
19127 -> 19123;
19128 -> 19123;
19129 -> 19124;
19129 -> 19128;
19130 -> 19129;
19130 -> 19123;
19131 -> 19123;
19132 -> 19130;
19132 -> 19131;
19133 -> 19131;
19133 -> 19123;
19134 -> 19123;
19135 -> 19127;
19135 -> 19123;
19136 -> 19118;
19136 -> 19135;
19136 -> 19119;
19136 -> 19099;
19137 -> 19136;
19138 -> 19136;
19139 -> 19136;
19140 -> 19136;
19141 -> 19136;
19142 -> 19136;
19143 -> 19118;
19143 -> 19136;
19144 -> 19136;
19145 -> 19143;
19145 -> 19136;
19145 -> 19144;
19146 -> 19145;
19146 -> 19136;
19147 -> 19136;
19148 -> 19146;
19149 -> 19146;
19150 -> 19146;
19151 -> 19146;
19152 -> 19146;
19153 -> 19146;
19154 -> 19146;
19155 -> 19154;
19155 -> 19146;
19156 -> 19155;
19156 -> 19146;
19157 -> 19146;
19158 -> 19146;
19159 -> 19146;
19160 -> 19146;
19161 -> 19146;
19162 -> 19146;
19163 -> 19146;
19164 -> 19146;
19165 -> 19146;
19166 -> 19146;
19167 -> 19146;
19168 -> 0;
19168 -> 19146;
19169 -> 0;
19169 -> 19146;
19170 -> 19146;
19170 -> 19169;
19171 -> 19170;
19171 -> 19146;
19171 -> 19169;
19172 -> 19166;
19172 -> 19146;
19173 -> 19146;
19174 -> 19152;
19174 -> 19173;
19174 -> 19146;
19175 -> 19171;
19176 -> 19171;
19177 -> 19171;
19178 -> 19171;
19179 -> 19171;
19180 -> 19171;
19181 -> 19171;
19182 -> 19181;
19182 -> 19171;
19183 -> 19182;
19183 -> 19171;
19184 -> 19171;
19185 -> 19171;
19186 -> 19171;
19187 -> 19171;
19188 -> 19171;
19189 -> 19171;
19190 -> 19171;
19191 -> 19171;
19192 -> 19171;
19193 -> 19171;
19194 -> 19171;
19195 -> 0;
19195 -> 19171;
19196 -> 19193;
19196 -> 19171;
19197 -> 19171;
19198 -> 19179;
19198 -> 19197;
19198 -> 19171;
19199 -> 19171;
19200 -> 19199;
19200 -> 19171;
19201 -> 19200;
19201 -> 19171;
19202 -> 19171;
19203 -> 19171;
19204 -> 19171;
19205 -> 19171;
19206 -> 19136;
19207 -> 19147;
19207 -> 19206;
19207 -> 19136;
19208 -> 19171;
19209 -> 19171;
19210 -> 19171;
19211 -> 19171;
19212 -> 19171;
19212 -> 19211;
19213 -> 19212;
19213 -> 19171;
19213 -> 19211;
19214 -> 19213;
19214 -> 19171;
19215 -> 19208;
19215 -> 19214;
19215 -> 19171;
19216 -> 19171;
19216 -> 19215;
19217 -> 19215;
19218 -> 19216;
19218 -> 19217;
19219 -> 19171;
19219 -> 19217;
19220 -> 19217;
19221 -> 19218;
19221 -> 19220;
19222 -> 19221;
19222 -> 19217;
19223 -> 19222;
19223 -> 0;
19223 -> 19217;
19224 -> 19217;
19225 -> 19218;
19225 -> 19224;
19226 -> 19224;
19227 -> 19225;
19227 -> 19226;
19228 -> 19227;
19228 -> 19171;
19228 -> 19226;
19229 -> 19228;
19229 -> 19224;
19230 -> 19224;
19231 -> 19229;
19231 -> 19230;
19231 -> 19224;
19232 -> 19231;
19232 -> 19224;
19233 -> 19232;
19234 -> 19229;
19234 -> 19233;
19235 -> 19233;
19236 -> 19234;
19236 -> 19235;
19237 -> 19236;
19237 -> 19233;
19238 -> 19233;
19239 -> 19237;
19239 -> 19238;
19240 -> 19239;
19240 -> 19217;
19241 -> 19219;
19241 -> 19217;
19242 -> 19240;
19242 -> 19241;
19242 -> 19217;
19243 -> 19217;
19244 -> 19218;
19244 -> 19243;
19245 -> 19243;
19246 -> 19244;
19246 -> 19245;
19247 -> 19246;
19247 -> 19171;
19247 -> 19245;
19248 -> 19245;
19249 -> 19247;
19249 -> 19248;
19250 -> 19248;
19250 -> 19245;
19251 -> 19245;
19252 -> 19247;
19252 -> 19251;
19253 -> 19252;
19253 -> 19245;
19254 -> 19253;
19254 -> 19243;
19255 -> 19254;
19255 -> 19217;
19256 -> 19217;
19257 -> 19255;
19257 -> 19256;
19258 -> 19257;
19258 -> 19171;
19258 -> 19256;
19259 -> 19217;
19260 -> 19217;
19261 -> 19219;
19261 -> 19260;
19262 -> 19261;
19262 -> 19217;
19263 -> 19219;
19263 -> 19217;
19264 -> 19217;
19265 -> 19219;
19265 -> 19171;
19265 -> 19264;
19265 -> 19217;
19266 -> 19219;
19266 -> 19171;
19266 -> 19265;
19267 -> 19265;
19268 -> 19219;
19268 -> 19266;
19268 -> 19222;
19268 -> 19217;
19269 -> 19218;
19269 -> 19217;
19270 -> 19217;
19271 -> 19219;
19271 -> 19268;
19272 -> 19268;
19273 -> 19219;
19273 -> 19268;
19273 -> 19271;
19273 -> 19272;
19274 -> 19219;
19274 -> 19268;
19274 -> 19271;
19274 -> 0;
19275 -> 19215;
19276 -> 19215;
19277 -> 19171;
19277 -> 19268;
19277 -> 19276;
19278 -> 19277;
19278 -> 19268;
19278 -> 19271;
19278 -> 0;
19278 -> 19276;
19279 -> 19278;
19279 -> 19215;
19280 -> 19271;
19281 -> 19271;
19282 -> 19279;
19282 -> 0;
19283 -> 19279;
19284 -> 19279;
19284 -> 19283;
19285 -> 19283;
19286 -> 19284;
19286 -> 19285;
19287 -> 19286;
19287 -> 19271;
19287 -> 19285;
19288 -> 19287;
19288 -> 19283;
19289 -> 19283;
19290 -> 19288;
19290 -> 19289;
19290 -> 19283;
19291 -> 19290;
19291 -> 19283;
19292 -> 19291;
19293 -> 19288;
19293 -> 19292;
19294 -> 19292;
19295 -> 19293;
19295 -> 19294;
19296 -> 19295;
19296 -> 19292;
19297 -> 19292;
19298 -> 19296;
19298 -> 19297;
19299 -> 19298;
19299 -> 19279;
19300 -> 19279;
19301 -> 19279;
19302 -> 19279;
19302 -> 19301;
19303 -> 19301;
19304 -> 19302;
19304 -> 19303;
19305 -> 19304;
19305 -> 19271;
19305 -> 19303;
19306 -> 19303;
19307 -> 19305;
19307 -> 19306;
19308 -> 19306;
19308 -> 19303;
19309 -> 19303;
19310 -> 19305;
19310 -> 19309;
19311 -> 19310;
19311 -> 19303;
19312 -> 19311;
19312 -> 19301;
19313 -> 19312;
19313 -> 19279;
19314 -> 19279;
19315 -> 19313;
19315 -> 19314;
19316 -> 19315;
19316 -> 19271;
19316 -> 19314;
19317 -> 19279;
19318 -> 19279;
19319 -> 19318;
19319 -> 19279;
19320 -> 19279;
19321 -> 19279;
19322 -> 19279;
19322 -> 0;
19323 -> 19279;
19324 -> 19279;
19325 -> 19318;
19325 -> 0;
19326 -> 19318;
19327 -> 19318;
19327 -> 19326;
19328 -> 19326;
19329 -> 19327;
19329 -> 19328;
19330 -> 19329;
19330 -> 19279;
19330 -> 19328;
19331 -> 19330;
19331 -> 19326;
19332 -> 19326;
19333 -> 19331;
19333 -> 19332;
19333 -> 19326;
19334 -> 19333;
19334 -> 19326;
19335 -> 19334;
19336 -> 19331;
19336 -> 19335;
19337 -> 19335;
19338 -> 19336;
19338 -> 19337;
19339 -> 19338;
19339 -> 19335;
19340 -> 19335;
19341 -> 19339;
19341 -> 19340;
19342 -> 19341;
19342 -> 19318;
19343 -> 19318;
19344 -> 19318;
19345 -> 19318;
19345 -> 19344;
19346 -> 19344;
19347 -> 19345;
19347 -> 19346;
19348 -> 19347;
19348 -> 19279;
19348 -> 19346;
19349 -> 19346;
19350 -> 19348;
19350 -> 19349;
19351 -> 19349;
19351 -> 19346;
19352 -> 19346;
19353 -> 19348;
19353 -> 19352;
19354 -> 19353;
19354 -> 19346;
19355 -> 19354;
19355 -> 19344;
19356 -> 19355;
19356 -> 19318;
19357 -> 19318;
19358 -> 19356;
19358 -> 19357;
19359 -> 19358;
19359 -> 19279;
19359 -> 19357;
19360 -> 19318;
19361 -> 19318;
19362 -> 19318;
19363 -> 19318;
19363 -> 0;
19364 -> 19318;
19365 -> 19318;
19366 -> 19329;
19366 -> 19318;
19366 -> 19328;
19367 -> 19366;
19367 -> 19326;
19368 -> 19367;
19368 -> 19332;
19368 -> 19326;
19369 -> 19368;
19369 -> 19326;
19370 -> 19369;
19371 -> 19367;
19371 -> 19370;
19372 -> 19370;
19373 -> 19371;
19373 -> 19372;
19374 -> 19373;
19374 -> 19370;
19375 -> 19370;
19376 -> 19374;
19376 -> 19375;
19377 -> 19376;
19377 -> 19318;
19378 -> 19347;
19378 -> 19318;
19378 -> 19346;
19379 -> 19378;
19379 -> 19349;
19380 -> 19378;
19380 -> 19352;
19381 -> 19380;
19381 -> 19346;
19382 -> 19381;
19382 -> 19344;
19383 -> 19382;
19383 -> 19318;
19384 -> 19383;
19384 -> 19357;
19385 -> 19384;
19385 -> 19318;
19385 -> 19357;
19386 -> 19114;
19387 -> 19111;
19387 -> 19318;
19387 -> 19114;
19388 -> 19114;
19389 -> 19107;
19390 -> 19107;
19391 -> 19390;
19391 -> 19107;
19392 -> 19108;
19392 -> 19107;
19393 -> 19390;
19393 -> 19107;
19394 -> 19109;
19394 -> 19387;
19394 -> 19392;
19394 -> 19393;
19394 -> 19391;
19394 -> 19107;
19395 -> 19394;
19395 -> 19107;
19396 -> 19395;
19396 -> 19105;
19397 -> 19396;
19398 -> 19396;
19398 -> 19397;
19399 -> 19398;
19399 -> 19395;
19399 -> 19397;
19400 -> 19399;
19400 -> 19396;
19401 -> 19396;
19402 -> 19396;
19402 -> 19401;
19403 -> 19402;
19403 -> 19395;
19403 -> 19401;
19404 -> 19403;
19404 -> 19396;
19405 -> 19400;
19405 -> 19404;
19405 -> 19396;
19406 -> 19405;
19407 -> 18914;
19407 -> 19406;
19407 -> 19405;
19408 -> 19396;
19408 -> 19405;
19409 -> 19396;
19409 -> 19397;
19410 -> 19397;
19411 -> 19410;
19411 -> 19396;
19412 -> 18907;
19412 -> 18864;
19412 -> 18906;
19413 -> 18907;
19413 -> 18864;
19413 -> 18906;
19414 -> 19413;
19415 -> 19414;
19416 -> 19408;
19416 -> 19415;
19416 -> 19414;
19417 -> 19408;
19417 -> 19414;
19418 -> 18870;
19419 -> 19417;
19419 -> 19418;
19419 -> 18870;
19420 -> 19417;
19420 -> 18870;
19421 -> 18863;
19422 -> 19420;
19422 -> 19421;
19423 -> 19421;
19423 -> 18863;
19424 -> 18863;
19425 -> 19420;
19425 -> 19424;
19426 -> 0;
19426 -> 19424;
19427 -> 19425;
19427 -> 18863;
19428 -> 19423;
19428 -> 19427;
19428 -> 18863;
19429 -> 19420;
19429 -> 18863;
19430 -> 18863;
19431 -> 19429;
19431 -> 19430;
19432 -> 18848;
19432 -> 19430;
19433 -> 19430;
19434 -> 19431;
19434 -> 0;
19434 -> 19430;
19435 -> 19430;
19436 -> 19431;
19436 -> 19435;
19437 -> 19435;
19438 -> 19436;
19438 -> 19437;
19439 -> 19438;
19439 -> 19395;
19439 -> 19437;
19440 -> 19439;
19440 -> 19435;
19441 -> 19435;
19442 -> 19440;
19442 -> 19441;
19442 -> 19435;
19443 -> 19442;
19443 -> 19435;
19444 -> 19443;
19445 -> 19440;
19445 -> 19444;
19446 -> 19444;
19447 -> 19445;
19447 -> 19446;
19448 -> 19447;
19448 -> 19444;
19449 -> 19444;
19450 -> 19448;
19450 -> 19449;
19451 -> 19450;
19451 -> 19430;
19452 -> 19432;
19452 -> 19430;
19453 -> 19430;
19454 -> 19431;
19454 -> 19453;
19455 -> 19453;
19456 -> 19454;
19456 -> 19455;
19457 -> 19456;
19457 -> 19395;
19457 -> 19455;
19458 -> 19455;
19459 -> 19457;
19459 -> 19458;
19460 -> 19458;
19460 -> 19455;
19461 -> 19455;
19462 -> 19457;
19462 -> 19461;
19463 -> 19461;
19464 -> 19462;
19464 -> 19455;
19465 -> 19464;
19465 -> 19453;
19466 -> 19465;
19466 -> 19430;
19467 -> 19430;
19468 -> 19466;
19468 -> 19467;
19469 -> 19468;
19469 -> 19395;
19469 -> 19467;
19470 -> 19430;
19471 -> 19430;
19472 -> 19432;
19472 -> 19471;
19473 -> 19472;
19473 -> 19395;
19473 -> 19471;
19474 -> 19473;
19474 -> 19430;
19475 -> 19432;
19475 -> 19430;
19476 -> 19430;
19477 -> 19432;
19477 -> 19395;
19477 -> 19476;
19477 -> 19430;
19478 -> 19430;
19479 -> 19431;
19480 -> 19432;
19480 -> 19431;
19481 -> 18863;
19482 -> 18848;
19482 -> 19431;
19482 -> 18847;
19482 -> 18846;
19483 -> 18828;
19484 -> 19482;
19484 -> 19483;
19485 -> 19484;
19485 -> 18828;
19486 -> 19482;
19486 -> 18828;
19487 -> 1;
19488 -> 18821;
19488 -> 19487;
19489 -> 19487;
19490 -> 19488;
19490 -> 19489;
19491 -> 0;
19491 -> 19489;
19492 -> 19489;
19493 -> 19491;
19493 -> 19492;
19494 -> 19490;
19494 -> 19492;
19495 -> 19492;
19496 -> 19493;
19496 -> 19495;
19496 -> 19492;
19497 -> 19492;
19498 -> 19494;
19498 -> 19431;
19498 -> 19497;
19498 -> 19492;
19499 -> 19492;
19500 -> 19494;
19500 -> 19499;
19501 -> 19499;
19502 -> 19500;
19502 -> 19501;
19503 -> 19501;
19504 -> 19501;
19505 -> 19503;
19505 -> 19504;
19506 -> 19502;
19506 -> 19431;
19506 -> 19504;
19507 -> 19506;
19507 -> 19501;
19508 -> 19507;
19508 -> 19499;
19509 -> 19508;
19509 -> 19492;
19510 -> 19509;
19510 -> 19492;
19511 -> 19492;
19512 -> 19510;
19512 -> 19511;
19513 -> 19511;
19514 -> 19512;
19514 -> 19513;
19515 -> 19514;
19515 -> 19511;
19516 -> 19511;
19517 -> 19515;
19517 -> 19516;
19518 -> 19517;
19518 -> 19431;
19518 -> 19492;
19519 -> 19492;
19520 -> 19494;
19520 -> 19519;
19521 -> 19519;
19522 -> 19520;
19522 -> 19521;
19523 -> 0;
19523 -> 19521;
19524 -> 19523;
19524 -> 19519;
19525 -> 19519;
19526 -> 19525;
19527 -> 19520;
19527 -> 19526;
19528 -> 19527;
19528 -> 19431;
19528 -> 19526;
19529 -> 19525;
19530 -> 19519;
19531 -> 19528;
19531 -> 19492;
19532 -> 19492;
19533 -> 19492;
19534 -> 19533;
19534 -> 19492;
19535 -> 19492;
19536 -> 19492;
19537 -> 19494;
19537 -> 19536;
19538 -> 19536;
19539 -> 19538;
19539 -> 19492;
19540 -> 19492;
19541 -> 19539;
19541 -> 19540;
19541 -> 19492;
19542 -> 19541;
19543 -> 19494;
19543 -> 19542;
19544 -> 19542;
19545 -> 19543;
19545 -> 19431;
19545 -> 19544;
19546 -> 19544;
19547 -> 19546;
19548 -> 19547;
19549 -> 19545;
19549 -> 19548;
19549 -> 19547;
19550 -> 19545;
19550 -> 19542;
19551 -> 19550;
19551 -> 19541;
19552 -> 19541;
19553 -> 19541;
19554 -> 19551;
19554 -> 19553;
19555 -> 19552;
19555 -> 19553;
19556 -> 19531;
19556 -> 19553;
19557 -> 19555;
19557 -> 19553;
19558 -> 19553;
19559 -> 19556;
19559 -> 19545;
19559 -> 19553;
19560 -> 19553;
19561 -> 19558;
19561 -> 19560;
19562 -> 19561;
19562 -> 19560;
19563 -> 19556;
19563 -> 19545;
19563 -> 19562;
19564 -> 19560;
19565 -> 19564;
19566 -> 19565;
19567 -> 19565;
19568 -> 19567;
19569 -> 19559;
19569 -> 19554;
19569 -> 19565;
19570 -> 19564;
19571 -> 19570;
19572 -> 19560;
19573 -> 19560;
19574 -> 19559;
19574 -> 19569;
19574 -> 19560;
19575 -> 19560;
19576 -> 19574;
19576 -> 19575;
19576 -> 19560;
19577 -> 19573;
19577 -> 19560;
19578 -> 19574;
19578 -> 19577;
19578 -> 19569;
19578 -> 19560;
19579 -> 19561;
19579 -> 19560;
19580 -> 19560;
19581 -> 19579;
19581 -> 19580;
19582 -> 19581;
19582 -> 19580;
19583 -> 19580;
19584 -> 19580;
19585 -> 19582;
19585 -> 19584;
19586 -> 19583;
19586 -> 19584;
19587 -> 19586;
19587 -> 19584;
19588 -> 19586;
19588 -> 19584;
19589 -> 19586;
19589 -> 19584;
19590 -> 19586;
19590 -> 19584;
19591 -> 19586;
19591 -> 19584;
19592 -> 19586;
19592 -> 19584;
19593 -> 19585;
19593 -> 19586;
19593 -> 19584;
19594 -> 19586;
19594 -> 19584;
19595 -> 19584;
19596 -> 19584;
19597 -> 19596;
19597 -> 19586;
19597 -> 19584;
19598 -> 19584;
19599 -> 19584;
19600 -> 19598;
19600 -> 19599;
19601 -> 19599;
19602 -> 19600;
19602 -> 19601;
19603 -> 19602;
19603 -> 19601;
19604 -> 19602;
19604 -> 19601;
19605 -> 19602;
19605 -> 19601;
19606 -> 19602;
19606 -> 19601;
19607 -> 19602;
19607 -> 19601;
19608 -> 19601;
19609 -> 19556;
19609 -> 19608;
19609 -> 19601;
19610 -> 19602;
19610 -> 19601;
19611 -> 19610;
19611 -> 19603;
19611 -> 19604;
19611 -> 19605;
19611 -> 19606;
19611 -> 19607;
19611 -> 19601;
19612 -> 19601;
19613 -> 19598;
19613 -> 19586;
19613 -> 19584;
19614 -> 19583;
19614 -> 19580;
19615 -> 19580;
19616 -> 19615;
19617 -> 19615;
19618 -> 19578;
19618 -> 19617;
19618 -> 19615;
19619 -> 19616;
19619 -> 19615;
19620 -> 19578;
19620 -> 19619;
19620 -> 19615;
19621 -> 19518;
19621 -> 19541;
19622 -> 19541;
19623 -> 19541;
19624 -> 19621;
19624 -> 19623;
19625 -> 19622;
19625 -> 19623;
19626 -> 19622;
19626 -> 19623;
19627 -> 19620;
19627 -> 19623;
19628 -> 19624;
19628 -> 19620;
19628 -> 19559;
19628 -> 19623;
19629 -> 19623;
19630 -> 19629;
19631 -> 19629;
19632 -> 19623;
19633 -> 19632;
19634 -> 19633;
19635 -> 19623;
19636 -> 19625;
19636 -> 19623;
19637 -> 19626;
19637 -> 19623;
19638 -> 19623;
19639 -> 19636;
19639 -> 19638;
19640 -> 19637;
19640 -> 19638;
19641 -> 19638;
19642 -> 19628;
19642 -> 19641;
19642 -> 19638;
19643 -> 19640;
19643 -> 19638;
19644 -> 19638;
19645 -> 19644;
19646 -> 19628;
19646 -> 19645;
19647 -> 19628;
19647 -> 19644;
19648 -> 19639;
19648 -> 19638;
19649 -> 19640;
19649 -> 19638;
19650 -> 19638;
19651 -> 19648;
19651 -> 19650;
19652 -> 19649;
19652 -> 19650;
19653 -> 19650;
19654 -> 19650;
19655 -> 19651;
19655 -> 19654;
19656 -> 19653;
19656 -> 19654;
19657 -> 19656;
19657 -> 19654;
19658 -> 19655;
19658 -> 19657;
19659 -> 19651;
19659 -> 19653;
19659 -> 19650;
19660 -> 19652;
19660 -> 19653;
19660 -> 19650;
19661 -> 19659;
19661 -> 19660;
19661 -> 19650;
19662 -> 19638;
19663 -> 19638;
19664 -> 19663;
19665 -> 19664;
19666 -> 19628;
19666 -> 19665;
19667 -> 19628;
19667 -> 19665;
19668 -> 19666;
19668 -> 19628;
19668 -> 19665;
19669 -> 19665;
19670 -> 19668;
19670 -> 19669;
19671 -> 19667;
19671 -> 19669;
19672 -> 19671;
19672 -> 19670;
19672 -> 19628;
19672 -> 19669;
19673 -> 19672;
19673 -> 19669;
19674 -> 19672;
19674 -> 19669;
19675 -> 19669;
19676 -> 19673;
19676 -> 19675;
19677 -> 19676;
19677 -> 19669;
19678 -> 19669;
19679 -> 19677;
19679 -> 19678;
19680 -> 19674;
19680 -> 19678;
19681 -> 19680;
19681 -> 19679;
19681 -> 19672;
19681 -> 19678;
19682 -> 19678;
19683 -> 19682;
19684 -> 19681;
19684 -> 19683;
19685 -> 19683;
19686 -> 19681;
19686 -> 19685;
19686 -> 19683;
19687 -> 19683;
19688 -> 19684;
19688 -> 19687;
19689 -> 19687;
19690 -> 19689;
19690 -> 19683;
19691 -> 19683;
19692 -> 19684;
19692 -> 19691;
19693 -> 19691;
19694 -> 19693;
19695 -> 19694;
19696 -> 19695;
19697 -> 0;
19697 -> 19695;
19698 -> 19695;
19699 -> 19697;
19699 -> 19698;
19699 -> 19695;
19700 -> 19699;
19700 -> 19696;
19700 -> 19695;
19701 -> 19693;
19702 -> 19701;
19703 -> 19701;
19704 -> 19691;
19705 -> 19704;
19706 -> 19704;
19707 -> 17230;
19707 -> 19682;
19708 -> 19682;
19709 -> 19692;
19709 -> 19708;
19710 -> 19708;
19711 -> 19710;
19711 -> 19682;
19712 -> 19682;
19713 -> 19682;
19714 -> 19692;
19714 -> 19713;
19715 -> 19713;
19716 -> 19715;
19716 -> 19682;
19717 -> 19682;
19718 -> 19692;
19718 -> 19717;
19719 -> 19717;
19720 -> 19719;
19720 -> 19682;
19721 -> 19682;
19722 -> 19692;
19722 -> 19721;
19723 -> 19721;
19724 -> 19723;
19724 -> 19682;
19725 -> 19682;
19726 -> 19725;
19727 -> 19726;
19728 -> 19726;
19729 -> 19725;
19730 -> 19729;
19731 -> 19730;
19732 -> 19731;
19733 -> 0;
19733 -> 19731;
19734 -> 19731;
19735 -> 19733;
19735 -> 19734;
19735 -> 19731;
19736 -> 19735;
19736 -> 19732;
19736 -> 19731;
19737 -> 19729;
19738 -> 19737;
19739 -> 19737;
19740 -> 19682;
19741 -> 19740;
19742 -> 19692;
19742 -> 19741;
19743 -> 19741;
19744 -> 19741;
19745 -> 19741;
19746 -> 19744;
19746 -> 19745;
19747 -> 19744;
19747 -> 19740;
19748 -> 19740;
19749 -> 19740;
19750 -> 19747;
19750 -> 19740;
19751 -> 19748;
19751 -> 19740;
19752 -> 19740;
19753 -> 19692;
19754 -> 19692;
19755 -> 19753;
19755 -> 19692;
19756 -> 19753;
19756 -> 19692;
19757 -> 19753;
19758 -> 19753;
19758 -> 19692;
19759 -> 19692;
19760 -> 19759;
19760 -> 19692;
19761 -> 19753;
19762 -> 19753;
19762 -> 19692;
19763 -> 19692;
19764 -> 19762;
19764 -> 19763;
19764 -> 19692;
19765 -> 19762;
19765 -> 19692;
19766 -> 19762;
19766 -> 19764;
19767 -> 0;
19767 -> 19764;
19768 -> 19764;
19769 -> 19766;
19769 -> 19768;
19770 -> 19767;
19770 -> 19768;
19771 -> 19769;
19771 -> 19753;
19771 -> 19770;
19771 -> 19768;
19772 -> 19762;
19772 -> 19753;
19772 -> 19764;
19773 -> 19772;
19774 -> 0;
19774 -> 19772;
19775 -> 19772;
19776 -> 19773;
19776 -> 19775;
19777 -> 19774;
19777 -> 19775;
19778 -> 19776;
19778 -> 19753;
19778 -> 19777;
19778 -> 19775;
19779 -> 19753;
19779 -> 19692;
19780 -> 19692;
19781 -> 19753;
19781 -> 19692;
19782 -> 19692;
19783 -> 19753;
19784 -> 19753;
19785 -> 19784;
19785 -> 19753;
19786 -> 19753;
19787 -> 19784;
19787 -> 19786;
19787 -> 19753;
19788 -> 19784;
19788 -> 19753;
19789 -> 19753;
19790 -> 19753;
19791 -> 19753;
19792 -> 19753;
19793 -> 19784;
19793 -> 19792;
19794 -> 19791;
19794 -> 19792;
19795 -> 19794;
19795 -> 19792;
19796 -> 19793;
19796 -> 19795;
19797 -> 19784;
19797 -> 19791;
19797 -> 19753;
19798 -> 19784;
19799 -> 19784;
19800 -> 19799;
19800 -> 19784;
19801 -> 19784;
19802 -> 19784;
19803 -> 19784;
19804 -> 19802;
19804 -> 19803;
19804 -> 19784;
19805 -> 19802;
19805 -> 19784;
19806 -> 19802;
19806 -> 19804;
19807 -> 0;
19807 -> 19804;
19808 -> 19804;
19809 -> 19806;
19809 -> 19808;
19810 -> 19807;
19810 -> 19808;
19811 -> 19809;
19811 -> 19784;
19811 -> 19810;
19811 -> 19808;
19812 -> 19802;
19812 -> 19784;
19812 -> 19804;
19813 -> 19812;
19814 -> 0;
19814 -> 19812;
19815 -> 19812;
19816 -> 19813;
19816 -> 19815;
19817 -> 19814;
19817 -> 19815;
19818 -> 19816;
19818 -> 19784;
19818 -> 19817;
19818 -> 19815;
19819 -> 19784;
19820 -> 19784;
19821 -> 19784;
19822 -> 19784;
19823 -> 19784;
19824 -> 19784;
19825 -> 19784;
19826 -> 19784;
19827 -> 19784;
19828 -> 19784;
19829 -> 19828;
19830 -> 19692;
19830 -> 19753;
19831 -> 19753;
19832 -> 19784;
19832 -> 19753;
19833 -> 19753;
19834 -> 19784;
19834 -> 19833;
19834 -> 19753;
19835 -> 19753;
19836 -> 19784;
19837 -> 19753;
19838 -> 19784;
19838 -> 19837;
19838 -> 19753;
19839 -> 19784;
19839 -> 19753;
19840 -> 19753;
19841 -> 19784;
19841 -> 19840;
19841 -> 19753;
19842 -> 19753;
19843 -> 19784;
19843 -> 19842;
19843 -> 19753;
19844 -> 19784;
19845 -> 19784;
19846 -> 19784;
19847 -> 19784;
19847 -> 19692;
19848 -> 19669;
19849 -> 19784;
19849 -> 19848;
19850 -> 19784;
19850 -> 19848;
19851 -> 0;
19851 -> 19848;
19852 -> 19848;
19853 -> 19851;
19853 -> 19852;
19854 -> 19848;
19855 -> 19851;
19855 -> 19854;
19856 -> 19855;
19856 -> 19854;
19857 -> 19854;
19858 -> 19856;
19858 -> 19857;
19859 -> 19858;
19859 -> 19857;
19860 -> 19854;
19861 -> 0;
19861 -> 19541;
19862 -> 19494;
19862 -> 19541;
19863 -> 19541;
19864 -> 19861;
19864 -> 19863;
19865 -> 19862;
19865 -> 19863;
19866 -> 19850;
19866 -> 19863;
19867 -> 19863;
19868 -> 19865;
19868 -> 19867;
19868 -> 19863;
19869 -> 19866;
19869 -> 19863;
19870 -> 19866;
19870 -> 19850;
19870 -> 19864;
19870 -> 19863;
19871 -> 19865;
19871 -> 19863;
19872 -> 19863;
19873 -> 19863;
19874 -> 19869;
19874 -> 19873;
19875 -> 19870;
19875 -> 19873;
19876 -> 19871;
19876 -> 19873;
19877 -> 19872;
19877 -> 19873;
19878 -> 19874;
19878 -> 19873;
19879 -> 19875;
19879 -> 19873;
19880 -> 19873;
19881 -> 19878;
19881 -> 19880;
19882 -> 19879;
19882 -> 19880;
19883 -> 19877;
19883 -> 19880;
19884 -> 19883;
19884 -> 19880;
19885 -> 19883;
19885 -> 19880;
19886 -> 19883;
19886 -> 19880;
19887 -> 19883;
19887 -> 19880;
19888 -> 19883;
19888 -> 19880;
19889 -> 19880;
19890 -> 19881;
19890 -> 19889;
19890 -> 19880;
19891 -> 19882;
19891 -> 19880;
19892 -> 0;
19892 -> 19880;
19893 -> 19880;
19894 -> 19891;
19894 -> 19893;
19895 -> 19892;
19895 -> 19893;
19896 -> 19882;
19896 -> 19880;
19897 -> 0;
19897 -> 19880;
19898 -> 19880;
19899 -> 19896;
19899 -> 19898;
19900 -> 19897;
19900 -> 19898;
19901 -> 19881;
19901 -> 19883;
19901 -> 19880;
19902 -> 19882;
19902 -> 19883;
19902 -> 19880;
19903 -> 19881;
19903 -> 19850;
19903 -> 19883;
19903 -> 19880;
19904 -> 19877;
19904 -> 19873;
19905 -> 19873;
19906 -> 19873;
19907 -> 19876;
19907 -> 19906;
19908 -> 19905;
19908 -> 19906;
19909 -> 19908;
19909 -> 19906;
19910 -> 19907;
19910 -> 19909;
19911 -> 19876;
19911 -> 19905;
19911 -> 19873;
19912 -> 19876;
19912 -> 19877;
19912 -> 19873;
19913 -> 19872;
19913 -> 19541;
19914 -> 19541;
19915 -> 19494;
19915 -> 19914;
19916 -> 19915;
19916 -> 19850;
19916 -> 19914;
19917 -> 19916;
19917 -> 19541;
19918 -> 19541;
19919 -> 19917;
19919 -> 19918;
19920 -> 19918;
19921 -> 19918;
19922 -> 19918;
19923 -> 19919;
19923 -> 19922;
19924 -> 19923;
19924 -> 0;
19924 -> 19918;
19925 -> 19518;
19925 -> 19924;
19926 -> 19535;
19926 -> 19924;
19927 -> 19924;
19928 -> 19924;
19929 -> 19925;
19929 -> 19928;
19930 -> 19926;
19930 -> 19928;
19931 -> 19927;
19931 -> 19928;
19932 -> 19927;
19932 -> 19928;
19933 -> 19913;
19933 -> 19928;
19934 -> 19929;
19934 -> 19928;
19935 -> 19930;
19935 -> 19928;
19936 -> 19931;
19936 -> 19928;
19937 -> 19932;
19937 -> 19928;
19938 -> 19928;
19939 -> 19934;
19939 -> 19938;
19940 -> 19935;
19940 -> 19938;
19941 -> 19936;
19941 -> 19938;
19942 -> 19937;
19942 -> 19938;
19943 -> 19933;
19943 -> 19938;
19944 -> 19938;
19945 -> 19940;
19945 -> 19944;
19945 -> 19938;
19946 -> 19939;
19946 -> 19938;
19947 -> 19940;
19947 -> 19938;
19948 -> 19941;
19948 -> 19938;
19949 -> 19938;
19950 -> 19941;
19950 -> 19949;
19950 -> 19938;
19951 -> 19950;
19951 -> 19942;
19951 -> 19938;
19952 -> 19938;
19953 -> 19946;
19953 -> 19952;
19954 -> 19947;
19954 -> 19952;
19955 -> 19948;
19955 -> 19952;
19956 -> 19951;
19956 -> 19952;
19957 -> 19943;
19957 -> 19952;
19958 -> 19952;
19959 -> 19953;
19959 -> 19958;
19960 -> 19959;
19960 -> 19952;
19961 -> 19953;
19961 -> 19960;
19962 -> 19954;
19962 -> 19960;
19963 -> 19955;
19963 -> 19960;
19964 -> 19960;
19965 -> 19961;
19965 -> 19964;
19966 -> 19962;
19966 -> 19964;
19967 -> 19963;
19967 -> 19964;
19968 -> 19957;
19968 -> 19964;
19969 -> 19965;
19969 -> 19964;
19970 -> 19969;
19970 -> 19919;
19970 -> 19964;
19971 -> 19970;
19971 -> 19964;
19972 -> 19966;
19972 -> 19964;
19973 -> 19967;
19973 -> 19964;
19974 -> 19964;
19975 -> 19964;
19976 -> 19971;
19976 -> 19975;
19977 -> 19972;
19977 -> 19975;
19978 -> 19973;
19978 -> 19975;
19979 -> 19974;
19979 -> 19975;
19980 -> 19968;
19980 -> 19975;
19981 -> 19979;
19981 -> 19975;
19982 -> 19975;
19983 -> 19977;
19983 -> 19982;
19983 -> 19975;
19984 -> 19978;
19984 -> 19981;
19984 -> 19975;
19985 -> 19984;
19985 -> 19975;
19986 -> 19976;
19987 -> 19977;
19987 -> 19976;
19988 -> 19976;
19989 -> 19986;
19989 -> 19988;
19990 -> 19987;
19990 -> 19988;
19991 -> 19980;
19991 -> 19988;
19992 -> 19989;
19992 -> 19988;
19993 -> 19992;
19993 -> 19988;
19994 -> 19990;
19994 -> 19988;
19995 -> 19988;
19996 -> 19993;
19996 -> 19995;
19997 -> 19994;
19997 -> 19995;
19998 -> 19991;
19998 -> 19995;
19999 -> 19996;
19999 -> 19919;
19999 -> 19995;
20000 -> 19995;
20001 -> 19999;
20001 -> 20000;
20002 -> 20000;
20002 -> 19995;
20003 -> 19999;
20003 -> 20002;
20003 -> 19995;
20004 -> 19999;
20004 -> 20000;
20005 -> 19999;
20005 -> 20000;
20006 -> 20005;
20006 -> 20000;
20007 -> 0;
20007 -> 20006;
20008 -> 19997;
20008 -> 19995;
20009 -> 19996;
20009 -> 19995;
20010 -> 19995;
20011 -> 20007;
20011 -> 20010;
20012 -> 20008;
20012 -> 20010;
20013 -> 20009;
20013 -> 20010;
20014 -> 19998;
20014 -> 20010;
20015 -> 20014;
20015 -> 19903;
20015 -> 20010;
20016 -> 20011;
20016 -> 20010;
20017 -> 20013;
20017 -> 20010;
20018 -> 20012;
20018 -> 20010;
20019 -> 20010;
20020 -> 20015;
20020 -> 20019;
20021 -> 20016;
20021 -> 20019;
20022 -> 20017;
20022 -> 20019;
20023 -> 20018;
20023 -> 20019;
20024 -> 20021;
20024 -> 20019;
20025 -> 20019;
20026 -> 20024;
20026 -> 20025;
20027 -> 20020;
20027 -> 20025;
20028 -> 20026;
20028 -> 0;
20028 -> 20025;
20029 -> 20025;
20030 -> 20027;
20030 -> 20026;
20030 -> 20007;
20030 -> 20025;
20031 -> 20030;
20032 -> 20030;
20033 -> 20032;
20033 -> 20030;
20034 -> 20033;
20035 -> 20033;
20035 -> 20034;
20036 -> 20034;
20037 -> 20035;
20037 -> 20036;
20038 -> 20036;
20039 -> 20037;
20039 -> 20030;
20039 -> 20038;
20039 -> 20036;
20040 -> 20034;
20041 -> 20035;
20041 -> 20030;
20041 -> 20034;
20042 -> 20041;
20042 -> 20033;
20043 -> 20033;
20044 -> 20030;
20045 -> 20025;
20046 -> 20044;
20046 -> 20045;
20047 -> 20046;
20047 -> 20025;
20048 -> 20044;
20048 -> 20025;
20049 -> 20019;
20050 -> 20048;
20050 -> 20049;
20050 -> 20019;
20051 -> 20048;
20051 -> 20019;
20052 -> 20023;
20052 -> 20019;
20053 -> 20022;
20053 -> 20019;
20054 -> 20019;
20055 -> 20051;
20055 -> 20054;
20056 -> 20052;
20056 -> 20054;
20057 -> 20053;
20057 -> 20054;
20058 -> 20054;
20059 -> 20055;
20059 -> 20058;
20060 -> 20059;
20060 -> 20030;
20060 -> 20058;
20061 -> 14773;
20061 -> 20058;
20062 -> 20060;
20063 -> 20059;
20063 -> 20062;
20064 -> 20062;
20065 -> 20064;
20065 -> 20062;
20066 -> 20062;
20067 -> 20063;
20067 -> 20066;
20068 -> 20066;
20069 -> 20068;
20069 -> 20066;
20070 -> 20066;
20071 -> 20067;
20071 -> 20070;
20072 -> 20070;
20073 -> 20071;
20073 -> 20072;
20074 -> 20073;
20074 -> 20030;
20074 -> 20072;
20075 -> 14129;
20075 -> 20072;
20076 -> 20073;
20076 -> 20030;
20076 -> 20074;
20077 -> 20074;
20078 -> 20073;
20078 -> 20077;
20079 -> 20077;
20080 -> 20077;
20081 -> 20079;
20081 -> 20080;
20082 -> 20078;
20082 -> 20080;
20083 -> 20080;
20084 -> 20080;
20085 -> 20083;
20085 -> 20084;
20086 -> 20082;
20086 -> 20084;
20087 -> 20086;
20087 -> 20030;
20087 -> 20084;
20088 -> 14129;
20088 -> 20084;
20089 -> 20087;
20090 -> 20086;
20090 -> 20089;
20091 -> 20090;
20091 -> 20030;
20091 -> 20089;
20092 -> 20091;
20093 -> 20090;
20093 -> 20092;
20094 -> 20093;
20094 -> 20030;
20094 -> 20092;
20095 -> 20092;
20096 -> 20094;
20096 -> 20095;
20097 -> 20095;
20097 -> 20092;
20098 -> 20092;
20099 -> 20094;
20099 -> 20098;
20100 -> 20099;
20100 -> 20092;
20101 -> 20100;
20101 -> 20091;
20102 -> 20091;
20103 -> 20101;
20103 -> 20102;
20104 -> 20103;
20104 -> 20091;
20105 -> 20090;
20105 -> 20030;
20105 -> 20091;
20106 -> 20104;
20106 -> 20091;
20107 -> 20101;
20107 -> 20106;
20108 -> 20090;
20108 -> 20106;
20109 -> 20106;
20110 -> 20106;
20111 -> 20107;
20111 -> 20110;
20112 -> 20108;
20112 -> 20110;
20113 -> 20109;
20113 -> 20110;
20114 -> 20111;
20114 -> 20110;
20115 -> 20112;
20115 -> 20110;
20116 -> 20110;
20117 -> 20110;
20118 -> 20114;
20118 -> 20117;
20119 -> 20115;
20119 -> 20117;
20120 -> 20116;
20120 -> 20117;
20121 -> 20113;
20121 -> 20117;
20122 -> 20117;
20123 -> 20118;
20123 -> 20122;
20124 -> 20117;
20125 -> 20118;
20125 -> 20124;
20126 -> 20125;
20126 -> 20117;
20127 -> 20126;
20128 -> 20126;
20129 -> 20127;
20129 -> 20128;
20130 -> 20129;
20130 -> 20104;
20130 -> 20128;
20132 -> 20131;
20133 -> 20131;
20134 -> 20133;
20134 -> 20117;
20135 -> 20118;
20135 -> 20117;
20136 -> 20117;
20137 -> 20136;
20137 -> 20123;
20137 -> 20130;
20137 -> 20134;
20137 -> 20135;
20137 -> 20104;
20137 -> 20132;
20137 -> 20117;
20138 -> 20136;
20138 -> 20117;
20139 -> 20136;
20139 -> 20117;
20140 -> 20117;
20141 -> 20118;
20141 -> 20140;
20141 -> 20117;
20142 -> 20119;
20142 -> 20136;
20142 -> 20117;
20143 -> 20120;
20143 -> 20136;
20143 -> 20117;
20144 -> 20104;
20144 -> 20106;
20145 -> 20144;
20145 -> 20109;
20145 -> 20104;
20145 -> 20137;
20145 -> 20138;
20145 -> 20142;
20145 -> 20139;
20145 -> 20143;
20145 -> 20106;
20146 -> 20145;
20146 -> 20109;
20147 -> 20146;
20147 -> 20145;
20147 -> 20109;
20148 -> 20147;
20148 -> 20087;
20149 -> 20148;
20149 -> 20087;
20150 -> 20085;
20150 -> 20149;
20151 -> 20149;
20152 -> 20151;
20153 -> 20151;
20153 -> 20152;
20154 -> 20152;
20154 -> 20151;
20155 -> 20151;
20155 -> 20149;
20156 -> 20148;
20156 -> 20149;
20157 -> 20149;
20158 -> 20086;
20158 -> 20147;
20158 -> 20149;
20159 -> 20155;
20159 -> 20149;
20160 -> 20149;
20161 -> 20156;
20161 -> 20160;
20162 -> 20157;
20162 -> 20160;
20163 -> 20158;
20163 -> 20160;
20164 -> 20159;
20164 -> 20160;
20165 -> 20157;
20165 -> 20160;
20166 -> 20160;
20167 -> 20161;
20167 -> 20166;
20167 -> 20160;
20168 -> 20160;
20169 -> 20168;
20169 -> 20160;
20170 -> 20160;
20171 -> 20164;
20171 -> 20170;
20172 -> 20171;
20172 -> 20160;
20173 -> 20163;
20173 -> 20160;
20174 -> 20168;
20174 -> 20160;
20175 -> 20172;
20175 -> 20173;
20175 -> 20174;
20175 -> 20147;
20175 -> 20169;
20175 -> 20160;
20176 -> 20161;
20176 -> 20160;
20177 -> 20176;
20177 -> 20149;
20178 -> 20086;
20178 -> 20175;
20178 -> 20149;
20179 -> 20155;
20179 -> 20149;
20180 -> 20149;
20181 -> 20177;
20181 -> 20180;
20182 -> 20178;
20182 -> 20180;
20183 -> 20179;
20183 -> 20180;
20184 -> 20180;
20185 -> 20183;
20185 -> 20184;
20186 -> 20185;
20186 -> 20175;
20186 -> 20184;
20187 -> 20186;
20187 -> 20180;
20188 -> 20182;
20188 -> 20180;
20189 -> 20180;
20190 -> 20187;
20190 -> 20188;
20190 -> 20189;
20190 -> 20175;
20190 -> 20180;
20191 -> 20190;
20191 -> 20180;
20192 -> 20181;
20192 -> 20191;
20193 -> 20192;
20193 -> 20149;
20194 -> 20086;
20194 -> 20190;
20194 -> 20149;
20195 -> 20155;
20195 -> 20149;
20196 -> 20149;
20197 -> 20193;
20197 -> 20196;
20198 -> 20194;
20198 -> 20196;
20199 -> 20195;
20199 -> 20196;
20200 -> 20196;
20201 -> 20200;
20201 -> 20196;
20202 -> 20196;
20203 -> 20199;
20203 -> 20202;
20204 -> 20203;
20204 -> 20190;
20204 -> 20202;
20205 -> 20204;
20205 -> 20196;
20206 -> 20198;
20206 -> 20196;
20207 -> 20200;
20207 -> 20196;
20208 -> 20205;
20208 -> 20206;
20208 -> 20207;
20208 -> 20190;
20208 -> 20201;
20208 -> 20196;
20209 -> 20208;
20209 -> 20196;
20210 -> 20197;
20210 -> 20196;
20211 -> 20208;
20211 -> 20196;
20212 -> 20196;
20213 -> 20210;
20213 -> 20212;
20214 -> 20211;
20214 -> 20212;
20215 -> 20211;
20215 -> 20212;
20216 -> 20213;
20216 -> 20212;
20217 -> 20216;
20217 -> 20208;
20217 -> 20212;
20218 -> 20214;
20218 -> 20212;
20219 -> 20212;
20220 -> 20212;
20221 -> 20218;
20221 -> 20220;
20222 -> 20219;
20222 -> 20220;
20223 -> 20221;
20223 -> 20222;
20223 -> 20220;
20224 -> 20221;
20224 -> 20208;
20224 -> 20220;
20225 -> 20224;
20226 -> 20225;
20226 -> 20222;
20226 -> 20220;
20227 -> 20220;
20228 -> 20227;
20228 -> 20222;
20228 -> 20220;
20229 -> 20220;
20230 -> 20229;
20230 -> 20222;
20230 -> 20220;
20231 -> 20213;
20231 -> 20212;
20232 -> 20212;
20233 -> 20231;
20233 -> 20232;
20234 -> 20219;
20234 -> 20232;
20235 -> 20232;
20236 -> 20233;
20236 -> 20235;
20237 -> 20235;
20237 -> 20232;
20238 -> 20233;
20238 -> 20237;
20239 -> 20237;
20240 -> 20238;
20240 -> 20239;
20241 -> 20234;
20241 -> 20239;
20242 -> 20239;
20243 -> 20240;
20243 -> 20242;
20244 -> 0;
20244 -> 20242;
20245 -> 20244;
20245 -> 20239;
20246 -> 20245;
20246 -> 20239;
20247 -> 20239;
20248 -> 20246;
20248 -> 20247;
20249 -> 20241;
20249 -> 20247;
20250 -> 20248;
20250 -> 0;
20250 -> 20247;
20251 -> 20248;
20251 -> 20250;
20252 -> 20240;
20252 -> 20239;
20253 -> 20239;
20254 -> 20240;
20254 -> 20253;
20255 -> 20254;
20255 -> 20217;
20255 -> 20253;
20256 -> 20255;
20256 -> 20239;
20257 -> 20239;
20258 -> 20256;
20258 -> 20239;
20259 -> 20256;
20259 -> 20258;
20260 -> 20259;
20260 -> 20239;
20261 -> 20256;
20261 -> 20239;
20262 -> 20245;
20262 -> 20251;
20262 -> 20239;
20263 -> 20262;
20263 -> 20260;
20263 -> 20239;
20264 -> 20239;
20265 -> 20252;
20265 -> 20264;
20266 -> 20264;
20267 -> 20266;
20267 -> 20264;
20268 -> 20267;
20268 -> 20264;
20269 -> 20265;
20269 -> 20264;
20270 -> 20264;
20271 -> 20269;
20271 -> 20270;
20272 -> 20270;
20273 -> 20272;
20273 -> 20264;
20274 -> 20264;
20275 -> 20269;
20275 -> 20274;
20276 -> 20275;
20276 -> 20217;
20276 -> 20274;
20277 -> 20276;
20277 -> 20264;
20278 -> 20264;
20279 -> 20277;
20279 -> 20278;
20280 -> 20278;
20280 -> 20264;
20281 -> 20273;
20281 -> 20280;
20281 -> 20264;
20282 -> 20264;
20283 -> 20269;
20283 -> 20282;
20284 -> 20283;
20284 -> 20282;
20285 -> 20284;
20285 -> 20217;
20285 -> 20282;
20286 -> 20285;
20286 -> 20264;
20287 -> 20264;
20288 -> 20286;
20288 -> 20287;
20289 -> 20264;
20290 -> 20288;
20290 -> 20289;
20291 -> 20289;
20291 -> 20264;
20292 -> 20264;
20293 -> 20281;
20293 -> 20291;
20293 -> 20264;
20294 -> 20264;
20295 -> 20269;
20295 -> 20294;
20296 -> 20295;
20296 -> 20217;
20296 -> 20294;
20297 -> 20296;
20297 -> 20264;
20298 -> 20297;
20298 -> 14018;
20298 -> 20264;
20299 -> 20293;
20299 -> 20298;
20299 -> 20264;
20300 -> 20264;
20301 -> 20264;
20301 -> 20239;
20302 -> 20252;
20302 -> 20239;
20303 -> 20219;
20303 -> 20228;
20303 -> 20212;
20304 -> 20215;
20304 -> 20303;
20305 -> 20302;
20305 -> 20304;
20306 -> 0;
20307 -> 0;
20308 -> 0;
20309 -> 20308;
20311 -> 20306;
20311 -> 20307;
20311 -> 20309;
20311 -> 20310;
20312 -> 20311;
20313 -> 0;
20314 -> 0;
20315 -> 0;
20316 -> 20315;
20316 -> 0;
20317 -> 20316;
20319 -> 20313;
20319 -> 20314;
20319 -> 20317;
20319 -> 20318;
20320 -> 20319;
20321 -> 20305;
20321 -> 20149;
20322 -> 20149;
20323 -> 20149;
20324 -> 20321;
20324 -> 20323;
20325 -> 20322;
20325 -> 20323;
20326 -> 20322;
20326 -> 20323;
20327 -> 20324;
20327 -> 20323;
20328 -> 20325;
20328 -> 0;
20328 -> 20323;
20329 -> 20325;
20329 -> 20323;
20330 -> 20324;
20330 -> 20329;
20331 -> 20329;
20332 -> 20330;
20332 -> 20331;
20333 -> 20331;
20334 -> 20332;
20334 -> 20333;
20335 -> 20333;
20336 -> 20334;
20336 -> 20335;
20337 -> 20335;
20338 -> 20336;
20338 -> 20337;
20339 -> 20338;
20339 -> 20337;
20340 -> 20339;
20340 -> 20335;
20341 -> 20340;
20341 -> 20333;
20342 -> 20341;
20342 -> 20331;
20343 -> 20331;
20344 -> 20342;
20344 -> 20343;
20345 -> 20344;
20345 -> 20217;
20345 -> 20343;
20346 -> 20324;
20346 -> 20323;
20347 -> 20325;
20347 -> 20323;
20348 -> 20326;
20348 -> 20323;
20349 -> 20323;
20350 -> 20346;
20350 -> 20349;
20351 -> 20347;
20351 -> 20349;
20352 -> 20348;
20352 -> 20349;
20353 -> 0;
20355 -> 20353;
20355 -> 20354;
20356 -> 20354;
20357 -> 20356;
20358 -> 20355;
20358 -> 0;
20358 -> 20354;
20359 -> 20355;
20359 -> 20356;
20359 -> 20354;
20360 -> 20354;
20361 -> 20350;
20361 -> 20349;
20362 -> 20351;
20362 -> 20349;
20363 -> 20352;
20363 -> 20349;
20364 -> 20349;
20365 -> 20363;
20365 -> 20364;
20366 -> 20365;
20366 -> 20348;
20366 -> 20364;
20367 -> 20360;
20367 -> 20366;
20368 -> 20349;
20369 -> 20349;
20370 -> 20361;
20370 -> 20369;
20371 -> 20362;
20371 -> 20369;
20372 -> 20367;
20372 -> 20369;
20373 -> 20368;
20373 -> 20369;
20374 -> 20370;
20374 -> 20369;
20375 -> 20374;
20375 -> 20369;
20376 -> 20370;
20376 -> 20375;
20377 -> 20375;
20378 -> 20376;
20378 -> 20377;
20379 -> 20377;
20380 -> 20378;
20380 -> 20379;
20381 -> 20379;
20382 -> 20380;
20382 -> 20381;
20383 -> 20381;
20384 -> 20382;
20384 -> 20383;
20385 -> 20384;
20385 -> 20383;
20386 -> 20385;
20386 -> 20381;
20387 -> 20386;
20387 -> 20379;
20388 -> 20387;
20388 -> 20377;
20389 -> 20377;
20390 -> 20388;
20390 -> 20389;
20391 -> 20390;
20391 -> 20217;
20391 -> 20389;
20392 -> 20371;
20392 -> 0;
20392 -> 20369;
20393 -> 20369;
20394 -> 20391;
20394 -> 20393;
20394 -> 20369;
20395 -> 20369;
20396 -> 20372;
20396 -> 20395;
20396 -> 20369;
20397 -> 20370;
20397 -> 20373;
20397 -> 20369;
20398 -> 20371;
20398 -> 20373;
20398 -> 20369;
20399 -> 20372;
20399 -> 20373;
20399 -> 20369;
20400 -> 20368;
20400 -> 20323;
20401 -> 20400;
20401 -> 20149;
20402 -> 20086;
20402 -> 20217;
20402 -> 20149;
20403 -> 20155;
20403 -> 20149;
20404 -> 20086;
20404 -> 20149;
20405 -> 20149;
20406 -> 20401;
20406 -> 20405;
20407 -> 20402;
20407 -> 20405;
20408 -> 20403;
20408 -> 20405;
20409 -> 20404;
20409 -> 20405;
20410 -> 20404;
20410 -> 20405;
20411 -> 20405;
20412 -> 20406;
20412 -> 20411;
20413 -> 20412;
20413 -> 20397;
20413 -> 20411;
20414 -> 20413;
20414 -> 20411;
20415 -> 20414;
20415 -> 20405;
20416 -> 20405;
20417 -> 20409;
20417 -> 20416;
20418 -> 20416;
20419 -> 20417;
20419 -> 20418;
20420 -> 20418;
20421 -> 20419;
20421 -> 20420;
20422 -> 20420;
20423 -> 20421;
20423 -> 20422;
20424 -> 20422;
20425 -> 20423;
20425 -> 20424;
20426 -> 20425;
20426 -> 20424;
20427 -> 20426;
20427 -> 20422;
20428 -> 20427;
20428 -> 20420;
20429 -> 20428;
20429 -> 20418;
20430 -> 20429;
20430 -> 20416;
20431 -> 20430;
20431 -> 20405;
20432 -> 20405;
20433 -> 20409;
20433 -> 20432;
20434 -> 20432;
20435 -> 20433;
20435 -> 20434;
20436 -> 20435;
20436 -> 20217;
20436 -> 20434;
20437 -> 20434;
20438 -> 20436;
20438 -> 20437;
20439 -> 20437;
20439 -> 20434;
20440 -> 20436;
20440 -> 20432;
20441 -> 20440;
20441 -> 20405;
20442 -> 20441;
20442 -> 20408;
20442 -> 20405;
20443 -> 20405;
20444 -> 20409;
20444 -> 20405;
20445 -> 20405;
20446 -> 20444;
20446 -> 20445;
20447 -> 20443;
20447 -> 20445;
20448 -> 20446;
20448 -> 20445;
20449 -> 20445;
20450 -> 20446;
20450 -> 20449;
20451 -> 20449;
20451 -> 20445;
20452 -> 20445;
20453 -> 20445;
20454 -> 20446;
20454 -> 20453;
20455 -> 0;
20455 -> 20453;
20456 -> 20454;
20456 -> 20217;
20456 -> 0;
20456 -> 20453;
20457 -> 20456;
20457 -> 20445;
20458 -> 20445;
20459 -> 20446;
20459 -> 20458;
20460 -> 20459;
20460 -> 20217;
20460 -> 20458;
20461 -> 20460;
20461 -> 20445;
20462 -> 20461;
20462 -> 20445;
20463 -> 20445;
20464 -> 20463;
20464 -> 20405;
20465 -> 20405;
20466 -> 20405;
20467 -> 20466;
20467 -> 20405;
20468 -> 20405;
20469 -> 20408;
20469 -> 20468;
20470 -> 20469;
20470 -> 20217;
20470 -> 20468;
20471 -> 20470;
20471 -> 20405;
20472 -> 20407;
20472 -> 20405;
20473 -> 20465;
20473 -> 20405;
20474 -> 20466;
20474 -> 20405;
20475 -> 20471;
20475 -> 20472;
20475 -> 20473;
20475 -> 20474;
20475 -> 20217;
20475 -> 20467;
20475 -> 20405;
20476 -> 20475;
20477 -> 20410;
20477 -> 20476;
20478 -> 20476;
20479 -> 20477;
20479 -> 20475;
20479 -> 20476;
20480 -> 20478;
20480 -> 20476;
20481 -> 20476;
20482 -> 20479;
20482 -> 20481;
20483 -> 20480;
20483 -> 20481;
20484 -> 20482;
20484 -> 20481;
20485 -> 20484;
20486 -> 20484;
20487 -> 20486;
20488 -> 20487;
20489 -> 20487;
20489 -> 20488;
20490 -> 20488;
20490 -> 20487;
20491 -> 20487;
20491 -> 20486;
20492 -> 20486;
20493 -> 20491;
20493 -> 20492;
20494 -> 20477;
20494 -> 20475;
20494 -> 20486;
20495 -> 20486;
20496 -> 20493;
20496 -> 20486;
20497 -> 20496;
20498 -> 20477;
20498 -> 20493;
20498 -> 20497;
20499 -> 20497;
20500 -> 20498;
20500 -> 20499;
20501 -> 20499;
20502 -> 20501;
20502 -> 20497;
20503 -> 20497;
20504 -> 20498;
20504 -> 20503;
20505 -> 20504;
20505 -> 20497;
20506 -> 20497;
20507 -> 20505;
20507 -> 20506;
20508 -> 20506;
20509 -> 20507;
20509 -> 20508;
20510 -> 20508;
20511 -> 20510;
20511 -> 20506;
20512 -> 20506;
20513 -> 20507;
20513 -> 20512;
20514 -> 20513;
20514 -> 20493;
20514 -> 20512;
20515 -> 20514;
20515 -> 20508;
20516 -> 20514;
20516 -> 20512;
20517 -> 20516;
20517 -> 20493;
20517 -> 20512;
20518 -> 20517;
20518 -> 20508;
20519 -> 20517;
20519 -> 20512;
20520 -> 20512;
20521 -> 20520;
20521 -> 20506;
20522 -> 20521;
20522 -> 20511;
20522 -> 20506;
20523 -> 20522;
20523 -> 20486;
20524 -> 20486;
20525 -> 20523;
20525 -> 20524;
20526 -> 20525;
20526 -> 20524;
20527 -> 0;
20527 -> 20526;
20528 -> 20527;
20528 -> 20477;
20528 -> 20486;
20529 -> 20522;
20529 -> 20476;
20530 -> 20529;
20530 -> 20475;
20531 -> 20475;
20532 -> 20530;
20532 -> 20531;
20532 -> 20475;
20533 -> 20406;
20533 -> 20532;
20534 -> 20149;
20535 -> 20533;
20535 -> 20534;
20536 -> 20535;
20536 -> 20397;
20536 -> 20534;
20537 -> 20534;
20538 -> 20536;
20538 -> 20537;
20539 -> 20535;
20539 -> 20399;
20539 -> 20537;
20540 -> 20538;
20540 -> 20537;
20541 -> 20540;
20541 -> 20534;
20542 -> 20086;
20542 -> 20493;
20542 -> 20087;
20543 -> 20541;
20543 -> 20087;
20544 -> 14129;
20544 -> 20087;
20545 -> 20542;
20545 -> 20543;
20545 -> 20544;
20545 -> 20493;
20545 -> 20528;
20545 -> 20087;
20546 -> 20086;
20546 -> 20545;
20546 -> 20084;
20547 -> 20546;
20547 -> 20080;
20548 -> 20547;
20548 -> 20077;
20549 -> 20077;
20550 -> 20548;
20550 -> 20549;
20550 -> 20077;
20551 -> 20548;
20551 -> 20077;
20552 -> 20078;
20552 -> 20077;
20553 -> 20077;
20554 -> 20551;
20554 -> 20553;
20555 -> 20552;
20555 -> 20553;
20556 -> 20553;
20557 -> 20554;
20557 -> 20556;
20557 -> 20553;
20558 -> 20553;
20559 -> 20555;
20559 -> 20558;
20559 -> 20553;
20560 -> 20553;
20561 -> 20555;
20561 -> 20560;
20562 -> 20560;
20563 -> 20561;
20563 -> 20562;
20564 -> 20562;
20565 -> 20563;
20565 -> 20564;
20566 -> 20564;
20567 -> 20565;
20567 -> 20566;
20568 -> 20566;
20569 -> 20567;
20569 -> 20568;
20570 -> 20569;
20570 -> 20568;
20571 -> 20570;
20571 -> 20566;
20572 -> 20571;
20572 -> 20564;
20573 -> 20572;
20573 -> 20562;
20574 -> 20573;
20574 -> 20560;
20575 -> 20574;
20575 -> 20553;
20576 -> 20553;
20577 -> 20554;
20577 -> 20553;
20578 -> 20553;
20579 -> 20554;
20579 -> 20578;
20580 -> 20578;
20581 -> 20580;
20581 -> 20553;
20582 -> 20576;
20582 -> 20553;
20583 -> 20553;
20584 -> 20577;
20584 -> 20583;
20585 -> 20581;
20585 -> 20583;
20586 -> 20582;
20586 -> 20583;
20587 -> 20583;
20588 -> 20584;
20588 -> 20587;
20588 -> 20583;
20589 -> 20583;
20590 -> 20584;
20590 -> 20589;
20591 -> 20590;
20591 -> 20589;
20592 -> 20591;
20592 -> 20583;
20593 -> 20592;
20593 -> 20583;
20594 -> 20593;
20594 -> 20586;
20594 -> 20545;
20594 -> 20576;
20594 -> 20583;
20595 -> 20583;
20596 -> 20594;
20596 -> 20595;
20597 -> 20595;
20598 -> 20596;
20598 -> 20597;
20599 -> 20598;
20599 -> 20595;
20600 -> 20595;
20601 -> 20596;
20601 -> 20600;
20602 -> 20601;
20602 -> 20595;
20603 -> 20602;
20604 -> 20592;
20604 -> 20603;
20605 -> 20604;
20605 -> 20602;
20605 -> 20603;
20606 -> 20605;
20606 -> 20602;
20607 -> 20606;
20608 -> 20606;
20609 -> 20607;
20609 -> 20608;
20610 -> 20608;
20611 -> 20608;
20612 -> 20608;
20612 -> 20611;
20613 -> 20611;
20613 -> 20608;
20614 -> 20608;
20615 -> 20610;
20615 -> 20608;
20616 -> 20608;
20617 -> 20608;
20618 -> 20608;
20619 -> 20608;
20620 -> 20608;
20621 -> 20620;
20621 -> 20608;
20622 -> 20621;
20622 -> 20620;
20622 -> 20608;
20623 -> 20621;
20623 -> 20608;
20624 -> 20623;
20625 -> 20624;
20625 -> 20620;
20625 -> 20608;
20626 -> 20608;
20627 -> 20626;
20627 -> 20620;
20627 -> 20608;
20628 -> 20620;
20628 -> 20608;
20629 -> 20608;
20630 -> 20628;
20630 -> 20608;
20631 -> 20608;
20632 -> 20608;
20632 -> 20631;
20633 -> 0;
20633 -> 20631;
20634 -> 20633;
20634 -> 20608;
20635 -> 20634;
20635 -> 20608;
20636 -> 20608;
20637 -> 20635;
20637 -> 20636;
20638 -> 20630;
20638 -> 20636;
20639 -> 20637;
20639 -> 0;
20639 -> 20636;
20640 -> 20637;
20640 -> 20639;
20641 -> 20608;
20642 -> 20608;
20642 -> 20641;
20643 -> 20642;
20643 -> 20608;
20643 -> 20641;
20644 -> 20643;
20644 -> 20608;
20645 -> 20608;
20646 -> 20644;
20646 -> 20608;
20647 -> 20644;
20647 -> 20646;
20648 -> 20647;
20648 -> 20608;
20649 -> 20644;
20649 -> 20608;
20650 -> 20634;
20650 -> 20640;
20650 -> 20608;
20651 -> 20650;
20651 -> 20648;
20651 -> 20608;
20652 -> 20608;
20653 -> 20608;
20653 -> 20652;
20654 -> 20652;
20655 -> 20654;
20655 -> 20652;
20656 -> 20655;
20656 -> 20652;
20657 -> 20653;
20657 -> 20652;
20658 -> 20652;
20659 -> 20657;
20659 -> 20658;
20660 -> 20658;
20661 -> 20660;
20661 -> 20652;
20662 -> 20652;
20663 -> 20657;
20663 -> 20662;
20664 -> 20663;
20664 -> 20608;
20664 -> 20662;
20665 -> 20664;
20665 -> 20652;
20666 -> 20652;
20667 -> 20665;
20667 -> 20666;
20668 -> 20666;
20668 -> 20652;
20669 -> 20661;
20669 -> 20668;
20669 -> 20652;
20670 -> 20652;
20671 -> 20657;
20671 -> 20670;
20672 -> 20671;
20672 -> 20670;
20673 -> 20672;
20673 -> 20608;
20673 -> 20670;
20674 -> 20673;
20674 -> 20652;
20675 -> 20652;
20676 -> 20674;
20676 -> 20675;
20677 -> 20652;
20678 -> 20676;
20678 -> 20677;
20679 -> 20677;
20679 -> 20652;
20680 -> 20652;
20681 -> 20669;
20681 -> 20679;
20681 -> 20652;
20682 -> 20652;
20683 -> 20657;
20683 -> 20682;
20684 -> 20683;
20684 -> 20652;
20685 -> 20684;
20685 -> 14018;
20685 -> 20652;
20686 -> 20681;
20686 -> 20685;
20686 -> 20652;
20687 -> 20652;
20688 -> 20652;
20688 -> 20608;
20689 -> 20620;
20689 -> 20608;
20690 -> 20620;
20690 -> 20608;
20691 -> 20620;
20691 -> 20608;
20692 -> 20689;
20692 -> 0;
20692 -> 20608;
20693 -> 20689;
20693 -> 20608;
20694 -> 20620;
20694 -> 20693;
20695 -> 20693;
20696 -> 20694;
20696 -> 20695;
20697 -> 20695;
20698 -> 20696;
20698 -> 20697;
20699 -> 20697;
20700 -> 20698;
20700 -> 20699;
20701 -> 20699;
20702 -> 20700;
20702 -> 20701;
20703 -> 20702;
20703 -> 20699;
20704 -> 20703;
20704 -> 20697;
20705 -> 20704;
20705 -> 20695;
20706 -> 20695;
20707 -> 20705;
20707 -> 20706;
20708 -> 20689;
20708 -> 20608;
20709 -> 20690;
20709 -> 20608;
20710 -> 20608;
20711 -> 20709;
20711 -> 20710;
20712 -> 20711;
20712 -> 20690;
20712 -> 20710;
20713 -> 20360;
20713 -> 20712;
20714 -> 20708;
20714 -> 20608;
20715 -> 20713;
20715 -> 20608;
20716 -> 20620;
20716 -> 20608;
20717 -> 20716;
20717 -> 20608;
20718 -> 20620;
20718 -> 20717;
20719 -> 20717;
20720 -> 20718;
20720 -> 20719;
20721 -> 20719;
20722 -> 20720;
20722 -> 20721;
20723 -> 20721;
20724 -> 20722;
20724 -> 20723;
20725 -> 20723;
20726 -> 20724;
20726 -> 20725;
20727 -> 20726;
20727 -> 20723;
20728 -> 20727;
20728 -> 20721;
20729 -> 20728;
20729 -> 20719;
20730 -> 20719;
20731 -> 20729;
20731 -> 20730;
20732 -> 20714;
20732 -> 0;
20732 -> 20608;
20733 -> 20608;
20734 -> 20731;
20734 -> 20733;
20734 -> 20608;
20735 -> 20608;
20736 -> 20715;
20736 -> 20735;
20736 -> 20608;
20737 -> 20714;
20737 -> 20620;
20737 -> 20608;
20738 -> 20715;
20738 -> 20620;
20738 -> 20608;
20739 -> 20620;
20739 -> 20608;
20740 -> 20608;
20741 -> 20620;
20741 -> 20740;
20742 -> 20741;
20742 -> 20620;
20742 -> 20740;
20743 -> 20742;
20743 -> 20740;
20744 -> 20743;
20744 -> 20608;
20745 -> 20608;
20746 -> 20739;
20746 -> 20745;
20747 -> 20745;
20748 -> 20746;
20748 -> 20747;
20749 -> 20747;
20750 -> 20748;
20750 -> 20749;
20751 -> 20749;
20752 -> 20750;
20752 -> 20751;
20753 -> 20751;
20754 -> 20752;
20754 -> 20753;
20755 -> 20754;
20755 -> 20751;
20756 -> 20755;
20756 -> 20749;
20757 -> 20756;
20757 -> 20747;
20758 -> 20757;
20758 -> 20745;
20759 -> 20758;
20759 -> 20608;
20760 -> 20608;
20761 -> 20739;
20761 -> 20760;
20762 -> 20760;
20763 -> 20761;
20763 -> 20762;
20764 -> 20762;
20765 -> 20763;
20765 -> 20764;
20766 -> 20764;
20766 -> 20762;
20767 -> 20763;
20767 -> 20760;
20768 -> 20767;
20768 -> 20608;
20769 -> 20608;
20770 -> 20739;
20770 -> 20608;
20771 -> 20608;
20772 -> 20770;
20772 -> 20771;
20773 -> 20769;
20773 -> 20771;
20774 -> 20772;
20774 -> 20771;
20775 -> 20771;
20776 -> 20772;
20776 -> 20775;
20777 -> 20775;
20777 -> 20771;
20778 -> 20771;
20779 -> 20771;
20780 -> 20772;
20780 -> 20779;
20781 -> 0;
20781 -> 20779;
20782 -> 20780;
20782 -> 20771;
20783 -> 20771;
20784 -> 20772;
20784 -> 20783;
20785 -> 20784;
20785 -> 20608;
20785 -> 20783;
20786 -> 20785;
20786 -> 20771;
20787 -> 20786;
20787 -> 20771;
20788 -> 20771;
20789 -> 20788;
20789 -> 20608;
20790 -> 20620;
20791 -> 20790;
20791 -> 20620;
20792 -> 20620;
20793 -> 20790;
20794 -> 20790;
20794 -> 20793;
20795 -> 20793;
20795 -> 20790;
20796 -> 20620;
20796 -> 20790;
20797 -> 20796;
20797 -> 20790;
20798 -> 20796;
20798 -> 20790;
20799 -> 20798;
20799 -> 20790;
20800 -> 20799;
20800 -> 20790;
20801 -> 20799;
20801 -> 20790;
20802 -> 20801;
20802 -> 20790;
20803 -> 20802;
20803 -> 20790;
20804 -> 20802;
20804 -> 20790;
20805 -> 20790;
20805 -> 20738;
20805 -> 20608;
20806 -> 20790;
20806 -> 20606;
20807 -> 20585;
20807 -> 20606;
20808 -> 20586;
20808 -> 20606;
20809 -> 20606;
20810 -> 20806;
20810 -> 20809;
20811 -> 20807;
20811 -> 20809;
20812 -> 20808;
20812 -> 20809;
20813 -> 20809;
20814 -> 20810;
20814 -> 20813;
20814 -> 20809;
20815 -> 20809;
20816 -> 20810;
20816 -> 20815;
20817 -> 20816;
20817 -> 20809;
20818 -> 0;
20818 -> 20817;
20819 -> 20818;
20820 -> 20818;
20821 -> 20818;
20822 -> 20818;
20822 -> 20821;
20823 -> 20821;
20823 -> 20818;
20824 -> 20818;
20825 -> 20811;
20825 -> 20818;
20826 -> 20818;
20827 -> 20824;
20827 -> 20826;
20827 -> 20818;
20828 -> 20827;
20829 -> 20818;
20830 -> 20811;
20830 -> 20829;
20830 -> 20818;
20831 -> 20602;
20832 -> 20585;
20832 -> 20831;
20832 -> 20602;
20833 -> 20553;
20834 -> 20555;
20834 -> 20553;
20835 -> 20834;
20835 -> 20576;
20835 -> 20824;
20835 -> 20553;
20836 -> 20553;
20837 -> 20836;
20838 -> 20836;
20839 -> 20576;
20839 -> 20835;
20839 -> 20553;
20840 -> 20835;
20840 -> 20553;
20841 -> 20077;
20842 -> 20078;
20842 -> 20841;
20843 -> 20841;
20844 -> 20843;
20844 -> 20842;
20844 -> 20841;
20845 -> 20077;
20846 -> 20548;
20846 -> 20077;
20847 -> 20846;
20847 -> 20074;
20848 -> 14129;
20848 -> 20074;
20849 -> 20076;
20849 -> 20847;
20849 -> 20848;
20849 -> 20839;
20849 -> 20844;
20849 -> 20074;
20850 -> 20073;
20850 -> 20849;
20850 -> 20072;
20851 -> 20850;
20851 -> 20070;
20852 -> 20070;
20853 -> 20851;
20853 -> 20852;
20853 -> 20070;
20854 -> 20851;
20854 -> 20853;
20855 -> 20853;
20856 -> 20854;
20856 -> 20855;
20857 -> 20855;
20858 -> 20856;
20858 -> 20857;
20858 -> 20855;
20859 -> 20855;
20860 -> 20856;
20860 -> 20859;
20861 -> 20859;
20861 -> 20855;
20862 -> 20861;
20862 -> 20853;
20863 -> 20853;
20864 -> 20863;
20865 -> 20863;
20866 -> 20863;
20867 -> 20863;
20868 -> 20863;
20869 -> 20863;
20870 -> 20863;
20870 -> 20869;
20871 -> 20869;
20872 -> 20870;
20872 -> 20871;
20873 -> 20871;
20874 -> 20872;
20874 -> 20873;
20875 -> 20873;
20876 -> 20874;
20876 -> 20875;
20877 -> 20875;
20878 -> 20876;
20878 -> 20877;
20879 -> 20878;
20879 -> 20875;
20880 -> 20879;
20880 -> 20873;
20881 -> 20880;
20881 -> 20871;
20882 -> 20881;
20882 -> 20869;
20883 -> 20882;
20883 -> 20863;
20884 -> 20863;
20885 -> 20863;
20885 -> 20884;
20886 -> 20884;
20887 -> 20886;
20887 -> 20863;
20888 -> 20863;
20889 -> 20888;
20890 -> 20863;
20891 -> 20887;
20891 -> 20890;
20891 -> 20863;
20892 -> 20863;
20893 -> 20863;
20894 -> 20863;
20894 -> 20853;
20895 -> 20894;
20896 -> 20894;
20897 -> 20895;
20897 -> 20896;
20898 -> 20896;
20899 -> 20897;
20899 -> 20898;
20899 -> 20896;
20900 -> 20896;
20901 -> 20897;
20901 -> 20900;
20902 -> 20900;
20902 -> 20896;
20903 -> 20902;
20903 -> 20894;
20904 -> 20894;
20905 -> 20894;
20906 -> 20894;
20907 -> 20906;
20908 -> 20070;
20909 -> 20908;
20909 -> 20066;
20910 -> 20066;
20911 -> 20069;
20911 -> 20910;
20912 -> 20909;
20912 -> 20910;
20913 -> 20067;
20913 -> 20910;
20914 -> 20910;
20915 -> 20912;
20915 -> 20914;
20915 -> 20910;
20916 -> 20915;
20917 -> 20066;
20918 -> 20067;
20918 -> 20917;
20919 -> 20917;
20920 -> 20918;
20920 -> 20919;
20921 -> 20920;
20921 -> 20907;
20921 -> 20919;
20922 -> 20919;
20923 -> 20921;
20923 -> 20922;
20924 -> 20922;
20924 -> 20919;
20925 -> 20919;
20926 -> 20921;
20926 -> 20917;
20927 -> 20926;
20927 -> 20066;
20928 -> 20066;
20929 -> 20927;
20929 -> 20928;
20930 -> 20928;
20931 -> 20929;
20931 -> 20930;
20932 -> 20930;
20933 -> 20931;
20933 -> 20932;
20934 -> 20932;
20935 -> 20933;
20935 -> 20907;
20935 -> 20934;
20935 -> 20932;
20936 -> 20930;
20937 -> 20931;
20937 -> 20928;
20938 -> 20928;
20939 -> 20911;
20939 -> 20066;
20940 -> 20939;
20940 -> 20062;
20941 -> 20062;
20942 -> 20065;
20942 -> 20941;
20943 -> 20940;
20943 -> 20941;
20944 -> 20063;
20944 -> 20941;
20945 -> 20941;
20946 -> 20943;
20946 -> 20945;
20946 -> 20941;
20947 -> 20946;
20948 -> 20947;
20949 -> 20063;
20949 -> 20948;
20950 -> 20949;
20950 -> 20907;
20950 -> 20948;
20951 -> 20948;
20952 -> 20950;
20952 -> 20951;
20953 -> 20951;
20953 -> 20948;
20954 -> 20948;
20955 -> 20950;
20955 -> 20947;
20956 -> 20947;
20957 -> 20955;
20957 -> 20956;
20958 -> 20063;
20958 -> 20907;
20958 -> 20947;
20959 -> 20957;
20960 -> 20063;
20960 -> 20959;
20961 -> 20960;
20961 -> 20957;
20961 -> 20959;
20962 -> 20961;
20962 -> 0;
20962 -> 20959;
20963 -> 20960;
20963 -> 20957;
20963 -> 20962;
20964 -> 20963;
20965 -> 20963;
20966 -> 20964;
20966 -> 20965;
20967 -> 20965;
20967 -> 20963;
20968 -> 0;
20968 -> 20963;
20969 -> 20963;
20970 -> 20967;
20970 -> 20969;
20970 -> 20963;
20971 -> 20970;
20972 -> 20971;
20972 -> 20970;
20973 -> 20972;
20973 -> 20970;
20974 -> 20973;
20975 -> 20974;
20975 -> 20973;
20976 -> 0;
20976 -> 20975;
20977 -> 20976;
20977 -> 20960;
20977 -> 20962;
20978 -> 20976;
20978 -> 20959;
20979 -> 20978;
20979 -> 20957;
20980 -> 20942;
20980 -> 20062;
20981 -> 20980;
20981 -> 20060;
20982 -> 20981;
20982 -> 20059;
20982 -> 20060;
20983 -> 20059;
20983 -> 20957;
20983 -> 20982;
20983 -> 20058;
20984 -> 20983;
20984 -> 20054;
20985 -> 20054;
20986 -> 20984;
20986 -> 20985;
20986 -> 20054;
20987 -> 20048;
20987 -> 20019;
20988 -> 19992;
20988 -> 20957;
20988 -> 20977;
20988 -> 20982;
20988 -> 19988;
20989 -> 19988;
20990 -> 20988;
20990 -> 20989;
20991 -> 20989;
20991 -> 19988;
20992 -> 20988;
20992 -> 20991;
20992 -> 19988;
20993 -> 19988;
20994 -> 20992;
20994 -> 20993;
20995 -> 19991;
20995 -> 20993;
20996 -> 20994;
20996 -> 20992;
20996 -> 20993;
20997 -> 20993;
20998 -> 20997;
20999 -> 20997;
21000 -> 20996;
21000 -> 20997;
21001 -> 20997;
21002 -> 21000;
21002 -> 21001;
21002 -> 20997;
21003 -> 20997;
21004 -> 20996;
21004 -> 21003;
21004 -> 20997;
21005 -> 20997;
21006 -> 20996;
21006 -> 21005;
21006 -> 20997;
21007 -> 20996;
21008 -> 20996;
21009 -> 21007;
21009 -> 21008;
21009 -> 20996;
21010 -> 20997;
21011 -> 20996;
21011 -> 21010;
21011 -> 20997;
21012 -> 20994;
21012 -> 20992;
21012 -> 20993;
21013 -> 21012;
21013 -> 20995;
21013 -> 20996;
21013 -> 19903;
21013 -> 19902;
21013 -> 19901;
21013 -> 19887;
21013 -> 19888;
21013 -> 19912;
21013 -> 20993;
21014 -> 20993;
21015 -> 21014;
21016 -> 21013;
21016 -> 21015;
21016 -> 21014;
21017 -> 21013;
21017 -> 21014;
21018 -> 21013;
21018 -> 21014;
21019 -> 21013;
21019 -> 21014;
21020 -> 21017;
21020 -> 21014;
21021 -> 21018;
21021 -> 21014;
21022 -> 21014;
21023 -> 21021;
21023 -> 21022;
21024 -> 21020;
21024 -> 21022;
21025 -> 21022;
21026 -> 21024;
21026 -> 21025;
21027 -> 21023;
21027 -> 21022;
21028 -> 21022;
21029 -> 21027;
21029 -> 21028;
21030 -> 21026;
21030 -> 21028;
21031 -> 21029;
21031 -> 21028;
21032 -> 21028;
21033 -> 21031;
21033 -> 21032;
21034 -> 21030;
21034 -> 21032;
21035 -> 21034;
21035 -> 21032;
21035 -> 21013;
21035 -> 21033;
21036 -> 21032;
21037 -> 21035;
21037 -> 21036;
21037 -> 21032;
21038 -> 21037;
21039 -> 21032;
21040 -> 21038;
21040 -> 21039;
21040 -> 21032;
21041 -> 21038;
21041 -> 21034;
21041 -> 21013;
21041 -> 21035;
21041 -> 21032;
21042 -> 21032;
21043 -> 21038;
21043 -> 21042;
21043 -> 21032;
21044 -> 21038;
21044 -> 21032;
21045 -> 21028;
21046 -> 21044;
21046 -> 21045;
21046 -> 21028;
21047 -> 21046;
21047 -> 21028;
21048 -> 21047;
21049 -> 21048;
21050 -> 21049;
21050 -> 21048;
21051 -> 0;
21051 -> 21048;
21052 -> 0;
21052 -> 21048;
21053 -> 21048;
21054 -> 21050;
21054 -> 21053;
21055 -> 21051;
21055 -> 21053;
21056 -> 21052;
21056 -> 21053;
21057 -> 21053;
21057 -> 21056;
21057 -> 21014;
21058 -> 21057;
21059 -> 21019;
21059 -> 21035;
21059 -> 21058;
21060 -> 21059;
21060 -> 21057;
21061 -> 0;
21061 -> 21057;
21062 -> 21057;
21063 -> 21060;
21063 -> 21062;
21064 -> 21061;
21064 -> 21062;
21065 -> 21020;
21065 -> 21062;
21066 -> 21063;
21066 -> 21062;
21067 -> 21066;
21067 -> 21062;
21068 -> 21067;
21069 -> 21065;
21069 -> 21068;
21070 -> 21069;
21070 -> 21035;
21070 -> 0;
21070 -> 21068;
21071 -> 21069;
21071 -> 21070;
21072 -> 0;
21072 -> 21070;
21073 -> 21070;
21074 -> 21071;
21074 -> 21073;
21075 -> 21074;
21075 -> 21071;
21075 -> 21073;
21076 -> 21071;
21076 -> 21073;
21077 -> 21071;
21077 -> 21073;
21078 -> 21071;
21078 -> 21073;
21079 -> 21073;
21080 -> 21078;
21080 -> 21079;
21081 -> 21080;
21081 -> 21075;
21081 -> 21079;
21082 -> 21081;
21082 -> 21073;
21083 -> 21082;
21083 -> 21070;
21084 -> 0;
21084 -> 21083;
21085 -> 21084;
21085 -> 21069;
21085 -> 21070;
21086 -> 21069;
21086 -> 21082;
21086 -> 21085;
21086 -> 0;
21086 -> 21068;
21087 -> 21057;
21088 -> 21019;
21088 -> 21087;
21089 -> 21088;
21089 -> 21082;
21089 -> 21087;
21090 -> 21089;
21090 -> 21082;
21090 -> 21085;
21090 -> 21087;
21091 -> 21087;
21092 -> 21088;
21092 -> 21090;
21092 -> 21091;
21093 -> 21092;
21093 -> 21091;
21094 -> 21091;
21095 -> 21093;
21095 -> 21094;
21096 -> 21094;
21097 -> 21095;
21097 -> 21092;
21097 -> 21096;
21098 -> 21097;
21098 -> 21094;
21099 -> 21098;
21100 -> 21099;
21100 -> 21091;
21101 -> 21100;
21101 -> 21091;
21102 -> 21086;
21102 -> 21101;
21102 -> 21057;
21103 -> 20987;
21103 -> 19988;
21104 -> 19988;
21105 -> 19988;
21106 -> 21102;
21106 -> 21105;
21107 -> 21103;
21107 -> 21105;
21108 -> 21104;
21108 -> 21105;
21109 -> 21107;
21109 -> 21105;
21110 -> 21107;
21110 -> 21105;
21111 -> 21108;
21111 -> 21105;
21112 -> 21106;
21112 -> 21111;
21113 -> 0;
21113 -> 21112;
21114 -> 21105;
21115 -> 21105;
21116 -> 21110;
21116 -> 21115;
21117 -> 21113;
21117 -> 21115;
21118 -> 21114;
21118 -> 21115;
21119 -> 21116;
21119 -> 21115;
21120 -> 21117;
21120 -> 0;
21120 -> 21115;
21121 -> 21117;
21121 -> 21115;
21122 -> 21116;
21122 -> 21121;
21123 -> 21121;
21124 -> 21122;
21124 -> 21123;
21125 -> 21123;
21126 -> 21124;
21126 -> 21125;
21127 -> 21125;
21128 -> 21126;
21128 -> 21127;
21129 -> 21127;
21130 -> 21128;
21130 -> 21129;
21131 -> 21130;
21131 -> 21127;
21132 -> 21131;
21132 -> 21125;
21133 -> 21132;
21133 -> 21123;
21134 -> 21123;
21135 -> 21133;
21135 -> 21134;
21136 -> 21116;
21136 -> 21115;
21137 -> 21118;
21137 -> 21115;
21138 -> 21115;
21139 -> 21136;
21139 -> 21138;
21140 -> 21117;
21140 -> 21138;
21141 -> 21137;
21141 -> 21138;
21142 -> 21139;
21142 -> 21138;
21143 -> 21141;
21143 -> 21138;
21144 -> 21138;
21145 -> 21143;
21145 -> 21144;
21146 -> 21145;
21146 -> 21137;
21146 -> 21144;
21147 -> 20360;
21147 -> 21146;
21148 -> 21138;
21149 -> 21138;
21150 -> 21142;
21150 -> 21149;
21151 -> 21140;
21151 -> 21149;
21152 -> 21147;
21152 -> 21149;
21153 -> 21148;
21153 -> 21149;
21154 -> 21150;
21154 -> 21149;
21155 -> 21154;
21155 -> 21149;
21156 -> 21150;
21156 -> 21155;
21157 -> 21155;
21158 -> 21156;
21158 -> 21157;
21159 -> 21157;
21160 -> 21158;
21160 -> 21159;
21161 -> 21159;
21162 -> 21160;
21162 -> 21161;
21163 -> 21161;
21164 -> 21162;
21164 -> 21163;
21165 -> 21164;
21165 -> 21163;
21166 -> 21165;
21166 -> 21161;
21167 -> 21166;
21167 -> 21159;
21168 -> 21167;
21168 -> 21157;
21169 -> 21157;
21170 -> 21168;
21170 -> 21169;
21171 -> 21170;
21171 -> 21102;
21171 -> 21169;
21172 -> 21151;
21172 -> 0;
21172 -> 21149;
21173 -> 21149;
21174 -> 21171;
21174 -> 21173;
21174 -> 21149;
21175 -> 21149;
21176 -> 21152;
21176 -> 21175;
21176 -> 21149;
21177 -> 21150;
21177 -> 21153;
21177 -> 21149;
21178 -> 21151;
21178 -> 21153;
21178 -> 21149;
21179 -> 21152;
21179 -> 21153;
21179 -> 21149;
21180 -> 21148;
21180 -> 21115;
21181 -> 21180;
21181 -> 21105;
21182 -> 21181;
21182 -> 19988;
21183 -> 21182;
21183 -> 21105;
21184 -> 21183;
21184 -> 21105;
21185 -> 21105;
21186 -> 21105;
21187 -> 21184;
21187 -> 21186;
21188 -> 21185;
21188 -> 21186;
21189 -> 21186;
21190 -> 21187;
21190 -> 21189;
21191 -> 21190;
21191 -> 21177;
21191 -> 21189;
21192 -> 21191;
21192 -> 21189;
21193 -> 21192;
21193 -> 21186;
21194 -> 21187;
21194 -> 21188;
21194 -> 21186;
21195 -> 21186;
21196 -> 21195;
21196 -> 21188;
21196 -> 21186;
21197 -> 21186;
21198 -> 21197;
21198 -> 21188;
21198 -> 21186;
21199 -> 21185;
21199 -> 19988;
21200 -> 21199;
21200 -> 19976;
21201 -> 19975;
21202 -> 21200;
21202 -> 21201;
21203 -> 21201;
21204 -> 21202;
21204 -> 21194;
21204 -> 21203;
21205 -> 21204;
21205 -> 21177;
21205 -> 21203;
21206 -> 21205;
21206 -> 21203;
21207 -> 21206;
21207 -> 21203;
21208 -> 21207;
21208 -> 21201;
21209 -> 21208;
21209 -> 19975;
21210 -> 21209;
21211 -> 21210;
21211 -> 21209;
21212 -> 21211;
21213 -> 21200;
21213 -> 21212;
21214 -> 21213;
21214 -> 21194;
21214 -> 21212;
21215 -> 21214;
21215 -> 21211;
21216 -> 19980;
21216 -> 21211;
21217 -> 19976;
21217 -> 21211;
21218 -> 19977;
21218 -> 21211;
21219 -> 21211;
21220 -> 21216;
21220 -> 21219;
21221 -> 21217;
21221 -> 21219;
21222 -> 21218;
21222 -> 21219;
21223 -> 21215;
21223 -> 21219;
21224 -> 21223;
21224 -> 21219;
21225 -> 21220;
21225 -> 21219;
21226 -> 21221;
21226 -> 21219;
21227 -> 21222;
21227 -> 21219;
21228 -> 21219;
21229 -> 21224;
21229 -> 21228;
21230 -> 21225;
21230 -> 21228;
21231 -> 21226;
21231 -> 21228;
21232 -> 21227;
21232 -> 21228;
21233 -> 21223;
21233 -> 21179;
21233 -> 21228;
21234 -> 21230;
21234 -> 21228;
21235 -> 21231;
21235 -> 21228;
21236 -> 21232;
21236 -> 21228;
21237 -> 21228;
21238 -> 21234;
21238 -> 21237;
21239 -> 21235;
21239 -> 21237;
21240 -> 21236;
21240 -> 21237;
21241 -> 21229;
21241 -> 21237;
21242 -> 21240;
21242 -> 21237;
21243 -> 21237;
21244 -> 21241;
21244 -> 21243;
21245 -> 21244;
21245 -> 21177;
21245 -> 21243;
21246 -> 21243;
21247 -> 21245;
21247 -> 21246;
21248 -> 21244;
21248 -> 21179;
21248 -> 21246;
21249 -> 21247;
21249 -> 21246;
21250 -> 21249;
21250 -> 21243;
21251 -> 21250;
21251 -> 21237;
21252 -> 21239;
21252 -> 21237;
21253 -> 21237;
21254 -> 21237;
21255 -> 21242;
21255 -> 21254;
21256 -> 21251;
21256 -> 21254;
21257 -> 21252;
21257 -> 21254;
21258 -> 21253;
21258 -> 21254;
21259 -> 21238;
21259 -> 21254;
21260 -> 21255;
21260 -> 21254;
21261 -> 21256;
21261 -> 21254;
21262 -> 21257;
21262 -> 21254;
21263 -> 21258;
21263 -> 21254;
21264 -> 21254;
21265 -> 21260;
21265 -> 21264;
21266 -> 21261;
21266 -> 21264;
21267 -> 21262;
21267 -> 21264;
21268 -> 21263;
21268 -> 21264;
21269 -> 21259;
21269 -> 21264;
21270 -> 21264;
21271 -> 21266;
21271 -> 21270;
21272 -> 21270;
21272 -> 21264;
21273 -> 21265;
21273 -> 21272;
21274 -> 21266;
21274 -> 21272;
21275 -> 21267;
21275 -> 21272;
21276 -> 21268;
21276 -> 21272;
21277 -> 21272;
21278 -> 21269;
21278 -> 21277;
21279 -> 21278;
21279 -> 21102;
21279 -> 21277;
21280 -> 21279;
21280 -> 21272;
21281 -> 21272;
21282 -> 21269;
21282 -> 21281;
21283 -> 21281;
21284 -> 21282;
21284 -> 21283;
21285 -> 21284;
21285 -> 21102;
21285 -> 21283;
21286 -> 21285;
21286 -> 21281;
21287 -> 21286;
21287 -> 21281;
21288 -> 21281;
21289 -> 21286;
21289 -> 21288;
21290 -> 0;
21290 -> 21288;
21291 -> 21290;
21291 -> 21281;
21292 -> 21287;
21292 -> 21291;
21292 -> 21281;
21293 -> 21286;
21293 -> 21281;
21294 -> 21293;
21295 -> 21294;
21295 -> 21293;
21296 -> 21295;
21296 -> 21272;
21297 -> 21269;
21297 -> 21102;
21297 -> 21272;
21298 -> 21272;
21299 -> 21273;
21299 -> 21298;
21300 -> 21274;
21300 -> 21298;
21301 -> 21275;
21301 -> 21298;
21302 -> 21276;
21302 -> 21298;
21303 -> 21280;
21303 -> 21298;
21304 -> 21296;
21304 -> 21298;
21305 -> 21297;
21305 -> 21298;
21306 -> 21300;
21306 -> 21298;
21307 -> 21306;
21307 -> 21102;
21307 -> 21298;
21308 -> 21298;
21309 -> 21300;
21309 -> 21308;
21310 -> 21308;
21310 -> 21298;
21311 -> 21298;
21312 -> 21300;
21312 -> 21311;
21313 -> 21311;
21313 -> 21298;
21314 -> 21300;
21314 -> 21298;
21315 -> 21304;
21315 -> 21298;
21316 -> 21298;
21317 -> 21314;
21317 -> 21316;
21318 -> 21315;
21318 -> 21316;
21319 -> 21316;
21320 -> 21317;
21320 -> 21319;
21321 -> 21319;
21321 -> 21316;
21322 -> 21317;
21322 -> 21321;
21323 -> 21302;
21323 -> 21298;
21324 -> 21323;
21324 -> 21298;
21325 -> 21299;
21325 -> 21298;
21326 -> 21322;
21326 -> 21298;
21327 -> 21301;
21327 -> 21298;
21328 -> 21303;
21328 -> 21298;
21329 -> 21305;
21329 -> 21298;
21330 -> 21298;
21331 -> 21325;
21331 -> 21330;
21332 -> 21326;
21332 -> 21330;
21333 -> 21327;
21333 -> 21330;
21334 -> 21328;
21334 -> 21330;
21335 -> 21329;
21335 -> 21330;
21336 -> 21330;
21337 -> 21331;
21337 -> 21336;
21337 -> 21330;
21338 -> 21332;
21338 -> 21330;
21339 -> 21334;
21339 -> 21330;
21340 -> 21330;
21341 -> 21330;
21342 -> 21338;
21342 -> 21341;
21343 -> 21339;
21343 -> 21341;
21344 -> 21340;
21344 -> 21341;
21345 -> 21341;
21346 -> 21342;
21346 -> 21345;
21347 -> 21345;
21348 -> 21346;
21348 -> 21347;
21349 -> 21347;
21350 -> 21348;
21350 -> 21349;
21351 -> 21350;
21351 -> 21307;
21351 -> 21349;
21352 -> 21349;
21353 -> 21351;
21353 -> 21352;
21353 -> 21349;
21354 -> 21349;
21355 -> 21350;
21355 -> 21354;
21356 -> 21354;
21357 -> 21355;
21357 -> 21356;
21358 -> 21357;
21358 -> 21307;
21358 -> 21356;
21359 -> 21356;
21360 -> 21358;
21360 -> 21359;
21361 -> 21359;
21361 -> 21356;
21362 -> 21356;
21363 -> 21358;
21363 -> 21354;
21364 -> 21355;
21364 -> 21307;
21364 -> 21354;
21365 -> 21354;
21366 -> 21364;
21366 -> 21365;
21367 -> 21363;
21367 -> 21365;
21368 -> 21366;
21368 -> 21365;
21369 -> 21367;
21369 -> 21307;
21369 -> 21368;
21369 -> 21365;
21370 -> 21369;
21371 -> 21370;
21372 -> 21371;
21372 -> 21349;
21373 -> 21372;
21374 -> 21372;
21375 -> 21373;
21375 -> 21374;
21376 -> 21375;
21376 -> 21374;
21377 -> 0;
21377 -> 21375;
21377 -> 21374;
21378 -> 0;
21378 -> 21375;
21378 -> 21374;
21379 -> 21375;
21379 -> 21374;
21380 -> 21375;
21380 -> 21374;
21381 -> 21375;
21381 -> 21374;
21382 -> 21375;
21382 -> 21374;
21383 -> 14129;
21383 -> 21375;
21383 -> 21374;
21384 -> 0;
21384 -> 21375;
21384 -> 21374;
21385 -> 21350;
21385 -> 21369;
21385 -> 21372;
21386 -> 21373;
21386 -> 21372;
21387 -> 21372;
21388 -> 21385;
21388 -> 21386;
21388 -> 21387;
21388 -> 21376;
21388 -> 21377;
21388 -> 21378;
21388 -> 21379;
21388 -> 21380;
21388 -> 21381;
21388 -> 21382;
21388 -> 21383;
21388 -> 21384;
21388 -> 21369;
21388 -> 0;
21388 -> 21372;
21389 -> 21388;
21389 -> 21347;
21390 -> 21389;
21390 -> 14132;
21390 -> 21347;
21391 -> 21347;
21392 -> 21348;
21392 -> 21391;
21393 -> 21391;
21394 -> 21392;
21394 -> 21393;
21395 -> 21394;
21395 -> 21388;
21395 -> 21393;
21396 -> 21393;
21397 -> 21395;
21397 -> 21396;
21397 -> 21393;
21398 -> 21395;
21398 -> 14132;
21398 -> 21397;
21399 -> 21397;
21400 -> 21395;
21400 -> 21397;
21401 -> 21400;
21401 -> 21391;
21402 -> 21401;
21402 -> 14132;
21402 -> 21391;
21403 -> 21401;
21403 -> 21388;
21403 -> 21391;
21404 -> 0;
21404 -> 21403;
21405 -> 21403;
21406 -> 21405;
21407 -> 21406;
21407 -> 21403;
21408 -> 21407;
21409 -> 21408;
21410 -> 21408;
21410 -> 21409;
21411 -> 21409;
21411 -> 21408;
21412 -> 21408;
21412 -> 21407;
21413 -> 21407;
21414 -> 21412;
21414 -> 21413;
21415 -> 21414;
21415 -> 21407;
21416 -> 21392;
21416 -> 21388;
21416 -> 21407;
21417 -> 21415;
21417 -> 21416;
21417 -> 21388;
21417 -> 21407;
21418 -> 21417;
21418 -> 21401;
21418 -> 21403;
21419 -> 21401;
21419 -> 21417;
21419 -> 21418;
21419 -> 21391;
21420 -> 21419;
21420 -> 21347;
21421 -> 21389;
21421 -> 21417;
21421 -> 21347;
21422 -> 21348;
21422 -> 21417;
21422 -> 21347;
21423 -> 21347;
21424 -> 21348;
21424 -> 21423;
21425 -> 21424;
21425 -> 21417;
21425 -> 21423;
21426 -> 21423;
21427 -> 21425;
21427 -> 21426;
21428 -> 21426;
21428 -> 21423;
21429 -> 21423;
21430 -> 21425;
21430 -> 21347;
21431 -> 21420;
21431 -> 21347;
21432 -> 21347;
21433 -> 21421;
21433 -> 21432;
21434 -> 21422;
21434 -> 21432;
21435 -> 21430;
21435 -> 21432;
21436 -> 21431;
21436 -> 21432;
21437 -> 21433;
21437 -> 21432;
21438 -> 0;
21438 -> 21432;
21439 -> 21434;
21439 -> 21437;
21440 -> 21435;
21440 -> 21437;
21441 -> 21436;
21441 -> 21437;
21442 -> 21437;
21443 -> 21439;
21443 -> 21442;
21444 -> 21440;
21444 -> 21442;
21445 -> 21441;
21445 -> 21442;
21446 -> 21442;
21447 -> 21444;
21447 -> 21446;
21448 -> 21447;
21448 -> 21442;
21449 -> 21443;
21449 -> 21442;
21450 -> 21444;
21450 -> 21442;
21451 -> 21442;
21452 -> 21442;
21453 -> 21450;
21453 -> 21452;
21454 -> 21451;
21454 -> 21452;
21455 -> 21453;
21455 -> 21452;
21456 -> 21452;
21457 -> 21452;
21458 -> 21452;
21459 -> 21455;
21459 -> 21458;
21460 -> 21456;
21460 -> 21458;
21461 -> 21457;
21461 -> 21458;
21462 -> 21459;
21462 -> 21417;
21462 -> 21418;
21463 -> 21458;
21464 -> 21459;
21464 -> 21463;
21464 -> 21458;
21465 -> 21445;
21465 -> 21442;
21466 -> 21448;
21466 -> 21449;
21466 -> 21451;
21466 -> 21465;
21466 -> 21462;
21466 -> 21458;
21466 -> 21460;
21466 -> 21461;
21466 -> 21417;
21466 -> 21418;
21466 -> 21442;
21467 -> 21442;
21468 -> 21466;
21468 -> 21467;
21468 -> 21442;
21469 -> 21466;
21469 -> 21442;
21470 -> 21433;
21470 -> 21437;
21471 -> 21469;
21471 -> 21437;
21472 -> 0;
21472 -> 21437;
21473 -> 21347;
21474 -> 21389;
21474 -> 21471;
21474 -> 21347;
21475 -> 21474;
21475 -> 21345;
21476 -> 21345;
21477 -> 21475;
21477 -> 21476;
21477 -> 21345;
21478 -> 21477;
21478 -> 21345;
21479 -> 21478;
21479 -> 21341;
21480 -> 0;
21480 -> 21479;
21481 -> 21330;
21482 -> 21480;
21482 -> 21330;
21483 -> 21330;
21484 -> 21481;
21484 -> 21483;
21484 -> 21330;
21485 -> 21480;
21485 -> 21330;
21486 -> 21485;
21486 -> 21298;
21487 -> 21323;
21487 -> 21486;
21488 -> 21272;
21489 -> 21254;
21490 -> 21228;
21491 -> 21211;
21492 -> 21200;
21492 -> 21209;
21493 -> 21492;
21493 -> 19975;
21494 -> 19977;
21494 -> 19975;
21495 -> 19976;
21495 -> 19975;
21496 -> 19978;
21496 -> 19975;
21497 -> 19975;
21498 -> 21493;
21498 -> 21497;
21499 -> 21494;
21499 -> 21497;
21500 -> 21495;
21500 -> 21497;
21501 -> 21496;
21501 -> 21497;
21502 -> 19980;
21502 -> 21497;
21503 -> 21497;
21504 -> 21498;
21504 -> 21503;
21505 -> 21504;
21505 -> 21196;
21505 -> 21503;
21506 -> 21505;
21506 -> 0;
21506 -> 21503;
21507 -> 21506;
21507 -> 21497;
21508 -> 21498;
21508 -> 21497;
21509 -> 19975;
21510 -> 21508;
21510 -> 21509;
21511 -> 21510;
21511 -> 21194;
21511 -> 21509;
21512 -> 19968;
21512 -> 21471;
21512 -> 19964;
21513 -> 19964;
21514 -> 21512;
21514 -> 21513;
21515 -> 21511;
21515 -> 21513;
21516 -> 21513;
21517 -> 21515;
21517 -> 21516;
21518 -> 21516;
21519 -> 21517;
21519 -> 21179;
21519 -> 21518;
21520 -> 21519;
21520 -> 20359;
21520 -> 21518;
21521 -> 21520;
21521 -> 21513;
21522 -> 21513;
21523 -> 21515;
21523 -> 21522;
21524 -> 21523;
21524 -> 21177;
21524 -> 21522;
21525 -> 21522;
21526 -> 21524;
21526 -> 21525;
21527 -> 21523;
21527 -> 21179;
21527 -> 21525;
21528 -> 21526;
21528 -> 21525;
21529 -> 21528;
21529 -> 21522;
21530 -> 21529;
21530 -> 21513;
21531 -> 21513;
21532 -> 21530;
21532 -> 21531;
21533 -> 21532;
21533 -> 21471;
21533 -> 21531;
21534 -> 21533;
21534 -> 21513;
21535 -> 21534;
21536 -> 21530;
21536 -> 21535;
21537 -> 21535;
21538 -> 21536;
21538 -> 21537;
21539 -> 21538;
21539 -> 21535;
21540 -> 21539;
21540 -> 0;
21540 -> 21535;
21541 -> 21540;
21541 -> 21534;
21542 -> 21514;
21542 -> 21541;
21543 -> 21530;
21543 -> 21541;
21544 -> 21541;
21545 -> 21542;
21545 -> 21544;
21546 -> 21543;
21546 -> 21544;
21547 -> 21515;
21547 -> 21544;
21548 -> 0;
21548 -> 21544;
21549 -> 21544;
21550 -> 21548;
21550 -> 21549;
21551 -> 21545;
21551 -> 21549;
21552 -> 21550;
21552 -> 0;
21552 -> 21549;
21553 -> 21549;
21554 -> 21551;
21555 -> 21551;
21556 -> 21555;
21556 -> 21551;
21557 -> 21556;
21558 -> 21556;
21558 -> 21557;
21559 -> 21557;
21560 -> 21558;
21560 -> 21559;
21561 -> 21559;
21562 -> 21560;
21562 -> 21551;
21562 -> 21561;
21562 -> 21559;
21563 -> 21557;
21564 -> 21558;
21564 -> 21551;
21564 -> 21557;
21565 -> 21564;
21565 -> 21556;
21566 -> 21556;
21567 -> 21549;
21568 -> 21551;
21568 -> 21567;
21569 -> 21568;
21569 -> 21549;
21570 -> 21544;
21571 -> 21551;
21571 -> 21570;
21572 -> 21551;
21572 -> 21570;
21573 -> 21571;
21573 -> 21570;
21574 -> 21570;
21575 -> 21570;
21576 -> 21573;
21576 -> 21575;
21577 -> 21574;
21577 -> 21575;
21578 -> 21572;
21578 -> 21575;
21579 -> 21575;
21580 -> 21579;
21580 -> 21575;
21581 -> 21576;
21581 -> 21551;
21581 -> 21575;
21582 -> 21576;
21582 -> 21581;
21583 -> 21581;
21584 -> 21582;
21584 -> 21583;
21585 -> 21582;
21585 -> 21583;
21586 -> 21582;
21586 -> 21583;
21587 -> 21584;
21587 -> 0;
21587 -> 21583;
21588 -> 21584;
21588 -> 21583;
21589 -> 21582;
21589 -> 21588;
21590 -> 21588;
21591 -> 21589;
21591 -> 21590;
21592 -> 21590;
21593 -> 21591;
21593 -> 21592;
21594 -> 21592;
21595 -> 21593;
21595 -> 21594;
21596 -> 21594;
21597 -> 21595;
21597 -> 21596;
21598 -> 21597;
21598 -> 21594;
21599 -> 21598;
21599 -> 21592;
21600 -> 21599;
21600 -> 21590;
21601 -> 21590;
21602 -> 21600;
21602 -> 21601;
21603 -> 21584;
21603 -> 21583;
21604 -> 21585;
21604 -> 21583;
21605 -> 21583;
21606 -> 21604;
21606 -> 21605;
21607 -> 21606;
21607 -> 21585;
21607 -> 21605;
21608 -> 20360;
21608 -> 21607;
21609 -> 21603;
21609 -> 21583;
21610 -> 21608;
21610 -> 21583;
21611 -> 21582;
21611 -> 21583;
21612 -> 21611;
21612 -> 21583;
21613 -> 21582;
21613 -> 21612;
21614 -> 21612;
21615 -> 21613;
21615 -> 21614;
21616 -> 21614;
21617 -> 21615;
21617 -> 21616;
21618 -> 21616;
21619 -> 21617;
21619 -> 21618;
21620 -> 21618;
21621 -> 21619;
21621 -> 21620;
21622 -> 21621;
21622 -> 21618;
21623 -> 21622;
21623 -> 21616;
21624 -> 21623;
21624 -> 21614;
21625 -> 21614;
21626 -> 21624;
21626 -> 21625;
21627 -> 21626;
21627 -> 21585;
21627 -> 21625;
21628 -> 21609;
21628 -> 0;
21628 -> 21583;
21629 -> 21583;
21630 -> 21627;
21630 -> 21629;
21630 -> 21583;
21631 -> 21583;
21632 -> 21610;
21632 -> 21631;
21632 -> 21583;
21633 -> 21609;
21633 -> 21583;
21634 -> 21610;
21634 -> 21583;
21635 -> 21582;
21635 -> 21583;
21635 -> 21585;
21635 -> 21633;
21635 -> 21634;
21635 -> 20359;
21635 -> 0;
21635 -> 21581;
21636 -> 21635;
21636 -> 21575;
21637 -> 21577;
21637 -> 21575;
21638 -> 21575;
21639 -> 21636;
21639 -> 21638;
21640 -> 21637;
21640 -> 21638;
21641 -> 21578;
21641 -> 21638;
21642 -> 21641;
21642 -> 21638;
21643 -> 21638;
21644 -> 21641;
21644 -> 21643;
21645 -> 21644;
21645 -> 21643;
21646 -> 21645;
21646 -> 21638;
21647 -> 21638;
21648 -> 21641;
21648 -> 21647;
21649 -> 21648;
21649 -> 21635;
21649 -> 21647;
21650 -> 21649;
21650 -> 21638;
21651 -> 21638;
21652 -> 21639;
21652 -> 21635;
21652 -> 21638;
21653 -> 21639;
21653 -> 21638;
21654 -> 14009;
21654 -> 21638;
21655 -> 21653;
21655 -> 21654;
21655 -> 21635;
21655 -> 14008;
21655 -> 21638;
21656 -> 21638;
21657 -> 21655;
21657 -> 21656;
21658 -> 21657;
21658 -> 21655;
21658 -> 21656;
21659 -> 21658;
21659 -> 21656;
21660 -> 21638;
21661 -> 21641;
21661 -> 21660;
21662 -> 21661;
21662 -> 21659;
21662 -> 21660;
21663 -> 21662;
21663 -> 21638;
21664 -> 21640;
21664 -> 21638;
21665 -> 21638;
21666 -> 21641;
21666 -> 21665;
21667 -> 21665;
21668 -> 21666;
21668 -> 21667;
21669 -> 21668;
21669 -> 21659;
21669 -> 21667;
21670 -> 21669;
21671 -> 21670;
21672 -> 21670;
21672 -> 21671;
21673 -> 21671;
21673 -> 21670;
21674 -> 21670;
21674 -> 21669;
21675 -> 21668;
21675 -> 21659;
21675 -> 21669;
21676 -> 21668;
21676 -> 21659;
21676 -> 21669;
21677 -> 21669;
21678 -> 21677;
21678 -> 21676;
21678 -> 21669;
21679 -> 21674;
21679 -> 21678;
21680 -> 21668;
21680 -> 21678;
21681 -> 21677;
21681 -> 21678;
21682 -> 21675;
21682 -> 21677;
21682 -> 21678;
21683 -> 21678;
21684 -> 21678;
21685 -> 21679;
21685 -> 21684;
21686 -> 21680;
21686 -> 21684;
21687 -> 21681;
21687 -> 21684;
21688 -> 21682;
21688 -> 21684;
21689 -> 21683;
21689 -> 21684;
21690 -> 21685;
21690 -> 21684;
21691 -> 21686;
21691 -> 21684;
21692 -> 21687;
21692 -> 21684;
21693 -> 21688;
21693 -> 21684;
21694 -> 21684;
21695 -> 21690;
21695 -> 21694;
21696 -> 21691;
21696 -> 21694;
21697 -> 21692;
21697 -> 21694;
21698 -> 21693;
21698 -> 21694;
21699 -> 21689;
21699 -> 21694;
21700 -> 21694;
21701 -> 21699;
21701 -> 21700;
21702 -> 21700;
21703 -> 21701;
21703 -> 21700;
21704 -> 21699;
21704 -> 21694;
21705 -> 21699;
21705 -> 21694;
21706 -> 21699;
21706 -> 21694;
21707 -> 14773;
21707 -> 21699;
21707 -> 21694;
21708 -> 21699;
21708 -> 21694;
21709 -> 21699;
21709 -> 21694;
21711 -> 21710;
21712 -> 21711;
21712 -> 21710;
21713 -> 21711;
21713 -> 21710;
21714 -> 21710;
21715 -> 21714;
21715 -> 21711;
21715 -> 21710;
21716 -> 21710;
21717 -> 21716;
21717 -> 21711;
21717 -> 21710;
21718 -> 21710;
21719 -> 21718;
21719 -> 21699;
21719 -> 21694;
21720 -> 21694;
21721 -> 21695;
21721 -> 21720;
21721 -> 21694;
21722 -> 21694;
21723 -> 21696;
21723 -> 21722;
21723 -> 21694;
21724 -> 21694;
21725 -> 21697;
21725 -> 21724;
21725 -> 21694;
21726 -> 21698;
21726 -> 21682;
21726 -> 21694;
21727 -> 21696;
21727 -> 21699;
21727 -> 21694;
21728 -> 21694;
21729 -> 21694;
21730 -> 21695;
21730 -> 21729;
21731 -> 21730;
21731 -> 21682;
21731 -> 21729;
21732 -> 21731;
21732 -> 21694;
21733 -> 21698;
21733 -> 21694;
21734 -> 21699;
21734 -> 21705;
21734 -> 21694;
21735 -> 21728;
21735 -> 21694;
21736 -> 21732;
21736 -> 21733;
21736 -> 21734;
21736 -> 21735;
21736 -> 21682;
21736 -> 21694;
21737 -> 21736;
21737 -> 0;
21737 -> 21694;
21738 -> 21694;
21739 -> 21737;
21739 -> 21694;
21740 -> 21739;
21740 -> 21699;
21740 -> 21694;
21741 -> 21697;
21741 -> 21699;
21741 -> 21694;
21742 -> 21698;
21742 -> 21699;
21742 -> 21694;
21743 -> 21683;
21743 -> 21677;
21743 -> 21676;
21743 -> 21678;
21744 -> 21668;
21744 -> 21736;
21744 -> 21669;
21745 -> 21676;
21745 -> 21669;
21746 -> 21745;
21746 -> 21676;
21746 -> 21743;
21746 -> 21701;
21746 -> 21703;
21746 -> 21727;
21746 -> 21736;
21746 -> 21741;
21746 -> 21707;
21746 -> 21740;
21746 -> 21709;
21746 -> 21719;
21746 -> 21742;
21746 -> 21715;
21746 -> 21717;
21746 -> 21682;
21746 -> 21669;
21747 -> 21665;
21748 -> 21666;
21748 -> 21746;
21748 -> 21665;
21749 -> 21748;
21749 -> 21638;
21750 -> 21639;
21750 -> 21638;
21751 -> 21638;
21752 -> 21749;
21752 -> 21751;
21753 -> 21750;
21753 -> 21751;
21754 -> 21752;
21754 -> 21746;
21754 -> 21751;
21755 -> 21753;
21755 -> 21635;
21755 -> 21754;
21755 -> 21751;
21756 -> 21751;
21757 -> 21753;
21757 -> 21635;
21757 -> 21756;
21757 -> 21751;
21758 -> 21751;
21759 -> 21758;
21759 -> 21754;
21759 -> 21751;
21760 -> 21753;
21760 -> 21758;
21760 -> 21635;
21760 -> 21746;
21760 -> 21759;
21761 -> 21759;
21762 -> 21760;
21762 -> 21761;
21763 -> 21760;
21763 -> 21761;
21765 -> 21764;
21767 -> 21766;
21769 -> 21768;
21770 -> 21763;
21770 -> 21760;
21770 -> 21761;
21771 -> 21761;
21772 -> 21770;
21772 -> 21771;
21773 -> 21772;
21773 -> 21113;
21773 -> 21771;
21774 -> 21763;
21774 -> 21760;
21774 -> 21762;
21774 -> 21761;
21775 -> 21773;
21775 -> 21774;
21775 -> 21761;
21776 -> 21775;
21777 -> 21639;
21777 -> 21638;
21778 -> 21640;
21778 -> 21638;
21779 -> 21638;
21780 -> 21777;
21780 -> 21779;
21781 -> 21778;
21781 -> 21779;
21782 -> 21641;
21782 -> 21779;
21783 -> 21782;
21783 -> 21779;
21784 -> 21780;
21784 -> 21779;
21785 -> 21781;
21785 -> 21779;
21786 -> 21779;
21787 -> 21779;
21788 -> 21783;
21788 -> 21787;
21789 -> 21784;
21789 -> 21787;
21790 -> 21785;
21790 -> 21787;
21791 -> 21786;
21791 -> 21787;
21792 -> 21786;
21792 -> 21787;
21793 -> 21787;
21794 -> 21788;
21794 -> 21793;
21795 -> 21794;
21795 -> 21760;
21795 -> 21793;
21796 -> 21787;
21797 -> 21788;
21797 -> 21796;
21798 -> 21797;
21798 -> 21760;
21798 -> 21796;
21799 -> 21787;
21800 -> 21788;
21800 -> 21799;
21801 -> 21787;
21802 -> 21800;
21802 -> 21801;
21803 -> 21801;
21804 -> 21802;
21804 -> 21803;
21805 -> 21804;
21805 -> 21760;
21805 -> 21803;
21806 -> 21801;
21807 -> 21802;
21807 -> 21760;
21807 -> 21801;
21809 -> 21808;
21810 -> 0;
21811 -> 21810;
21811 -> 0;
21812 -> 21811;
21814 -> 21813;
21815 -> 21812;
21815 -> 21813;
21816 -> 21815;
21816 -> 21814;
21817 -> 21814;
21818 -> 21817;
21819 -> 21817;
21819 -> 21814;
21820 -> 21816;
21820 -> 21817;
21820 -> 21814;
21821 -> 21812;
21821 -> 21813;
21822 -> 21813;
21823 -> 21789;
21823 -> 21787;
21824 -> 21787;
21825 -> 21798;
21825 -> 21824;
21826 -> 21807;
21826 -> 21824;
21827 -> 21823;
21827 -> 21824;
21828 -> 21824;
21829 -> 21825;
21829 -> 21824;
21830 -> 21824;
21831 -> 21829;
21831 -> 21830;
21832 -> 21831;
21832 -> 21830;
21833 -> 21830;
21834 -> 21832;
21834 -> 21833;
21834 -> 21830;
21835 -> 21834;
21835 -> 21830;
21836 -> 21835;
21836 -> 21821;
21837 -> 21836;
21837 -> 21828;
21838 -> 21828;
21839 -> 21838;
21840 -> 21838;
21840 -> 21828;
21841 -> 21837;
21841 -> 21838;
21841 -> 21828;
21842 -> 21824;
21843 -> 21842;
21843 -> 21826;
21843 -> 21760;
21843 -> 21824;
21844 -> 21826;
21844 -> 21842;
21844 -> 21760;
21844 -> 21843;
21845 -> 21827;
21845 -> 21842;
21845 -> 21635;
21845 -> 21844;
21845 -> 21843;
21846 -> 21844;
21846 -> 21843;
21847 -> 21843;
21848 -> 21846;
21848 -> 21847;
21849 -> 21845;
21849 -> 21847;
21850 -> 21849;
21850 -> 21845;
21850 -> 21847;
21851 -> 21847;
21852 -> 21850;
21852 -> 21851;
21853 -> 21852;
21853 -> 21113;
21853 -> 21851;
21854 -> 21849;
21854 -> 21845;
21854 -> 21848;
21854 -> 21847;
21855 -> 21853;
21855 -> 21854;
21855 -> 21847;
21856 -> 21844;
21856 -> 21855;
21857 -> 21845;
21857 -> 21855;
21858 -> 21828;
21858 -> 21841;
21858 -> 21856;
21858 -> 21857;
21858 -> 21836;
21858 -> 21845;
21858 -> 21855;
21859 -> 21787;
21860 -> 21788;
21860 -> 21859;
21861 -> 0;
21862 -> 21788;
21862 -> 21787;
21863 -> 21790;
21863 -> 21787;
21864 -> 21791;
21864 -> 21787;
21865 -> 21787;
21866 -> 21795;
21866 -> 21865;
21867 -> 21824;
21867 -> 21865;
21868 -> 21860;
21868 -> 21865;
21869 -> 21862;
21869 -> 21865;
21870 -> 21863;
21870 -> 21865;
21871 -> 21864;
21871 -> 21865;
21872 -> 21792;
21872 -> 21865;
21873 -> 21868;
21873 -> 21865;
21874 -> 21871;
21874 -> 21865;
21875 -> 21865;
21876 -> 21873;
21876 -> 21875;
21877 -> 21874;
21877 -> 21875;
21878 -> 21872;
21878 -> 21875;
21879 -> 21877;
21879 -> 21875;
21880 -> 21875;
21881 -> 21879;
21881 -> 21880;
21882 -> 21878;
21882 -> 21880;
21883 -> 21878;
21883 -> 21875;
21884 -> 21875;
21885 -> 21876;
21885 -> 21884;
21885 -> 21875;
21886 -> 21876;
21886 -> 21878;
21886 -> 21875;
21887 -> 21872;
21887 -> 21865;
21888 -> 21872;
21888 -> 21865;
21889 -> 21872;
21889 -> 21865;
21890 -> 21872;
21890 -> 21865;
21891 -> 21872;
21891 -> 21865;
21892 -> 21872;
21892 -> 21865;
21893 -> 21865;
21894 -> 21868;
21894 -> 21893;
21895 -> 21893;
21896 -> 21894;
21896 -> 21895;
21897 -> 21895;
21898 -> 21896;
21898 -> 21897;
21899 -> 21897;
21900 -> 21898;
21900 -> 21899;
21901 -> 21899;
21902 -> 21900;
21902 -> 21901;
21903 -> 21902;
21903 -> 21899;
21904 -> 21903;
21904 -> 21897;
21905 -> 21904;
21905 -> 21895;
21906 -> 21905;
21906 -> 21893;
21907 -> 21906;
21907 -> 21865;
21908 -> 21868;
21908 -> 21865;
21909 -> 21865;
21910 -> 21908;
21910 -> 21909;
21911 -> 21909;
21912 -> 21910;
21912 -> 21911;
21912 -> 21909;
21913 -> 21909;
21914 -> 21910;
21914 -> 21913;
21915 -> 21913;
21915 -> 21909;
21916 -> 21915;
21916 -> 21865;
21917 -> 21866;
21917 -> 21872;
21917 -> 21865;
21918 -> 21867;
21918 -> 21872;
21918 -> 21865;
21919 -> 21870;
21919 -> 21872;
21919 -> 21865;
21920 -> 21865;
21921 -> 21869;
21921 -> 21920;
21921 -> 21865;
21922 -> 21921;
21923 -> 21869;
21923 -> 21922;
21924 -> 21923;
21924 -> 21922;
21925 -> 21924;
21925 -> 21921;
21926 -> 21869;
21926 -> 21921;
21927 -> 21921;
21928 -> 21869;
21928 -> 21927;
21929 -> 21927;
21930 -> 21928;
21930 -> 21929;
21931 -> 21930;
21931 -> 21858;
21931 -> 21929;
21932 -> 21927;
21933 -> 21928;
21933 -> 21858;
21933 -> 21927;
21934 -> 21933;
21934 -> 21921;
21935 -> 21934;
21935 -> 21872;
21935 -> 21921;
21936 -> 21867;
21936 -> 21872;
21936 -> 21921;
21937 -> 21792;
21937 -> 21787;
21938 -> 21789;
21938 -> 21792;
21938 -> 21787;
21939 -> 21788;
21939 -> 21792;
21939 -> 21787;
21940 -> 21787;
21941 -> 21788;
21941 -> 21940;
21942 -> 21941;
21942 -> 21858;
21942 -> 21940;
21943 -> 21942;
21943 -> 21787;
21944 -> 21787;
21945 -> 21788;
21945 -> 21944;
21946 -> 21945;
21946 -> 21858;
21946 -> 21944;
21947 -> 21946;
21947 -> 21787;
21948 -> 21787;
21949 -> 21786;
21949 -> 21638;
21950 -> 21949;
21950 -> 21575;
21951 -> 21950;
21951 -> 21570;
21952 -> 21951;
21952 -> 21544;
21953 -> 21544;
21954 -> 21544;
21955 -> 21952;
21955 -> 21954;
21956 -> 21953;
21956 -> 21954;
21957 -> 21953;
21957 -> 21954;
21958 -> 21955;
21958 -> 21954;
21959 -> 21956;
21959 -> 0;
21959 -> 21954;
21960 -> 21956;
21960 -> 21954;
21961 -> 21955;
21961 -> 21960;
21962 -> 21960;
21963 -> 21961;
21963 -> 21962;
21964 -> 21962;
21965 -> 21963;
21965 -> 21964;
21966 -> 21964;
21967 -> 21965;
21967 -> 21966;
21968 -> 21966;
21969 -> 21967;
21969 -> 21968;
21970 -> 21969;
21970 -> 21886;
21970 -> 21968;
21971 -> 21970;
21971 -> 21966;
21972 -> 21971;
21972 -> 21964;
21973 -> 21972;
21973 -> 21962;
21974 -> 21962;
21975 -> 21973;
21975 -> 21974;
21976 -> 21975;
21976 -> 21858;
21976 -> 21974;
21977 -> 0;
21977 -> 21976;
21978 -> 21957;
21978 -> 21954;
21979 -> 21954;
21980 -> 21978;
21980 -> 21979;
21981 -> 21980;
21981 -> 21957;
21981 -> 21979;
21982 -> 20360;
21982 -> 21981;
21983 -> 21982;
21983 -> 21954;
21984 -> 21955;
21984 -> 21954;
21985 -> 21984;
21985 -> 21954;
21986 -> 21955;
21986 -> 21985;
21987 -> 21985;
21988 -> 21986;
21988 -> 21987;
21989 -> 21987;
21990 -> 21988;
21990 -> 21989;
21991 -> 21989;
21992 -> 21990;
21992 -> 21991;
21993 -> 21991;
21994 -> 21992;
21994 -> 21993;
21995 -> 21994;
21995 -> 21886;
21995 -> 21993;
21996 -> 21995;
21996 -> 21991;
21997 -> 21996;
21997 -> 21989;
21998 -> 21997;
21998 -> 21987;
21999 -> 21987;
22000 -> 21998;
22000 -> 21999;
22001 -> 22000;
22001 -> 21858;
22001 -> 21999;
22002 -> 21977;
22002 -> 0;
22002 -> 21954;
22003 -> 21954;
22004 -> 22001;
22004 -> 22003;
22004 -> 21954;
22005 -> 22004;
22005 -> 22002;
22005 -> 21954;
22006 -> 21954;
22007 -> 21983;
22007 -> 22006;
22007 -> 21954;
22008 -> 21983;
22008 -> 21954;
22009 -> 21954;
22009 -> 21544;
22010 -> 22009;
22010 -> 21541;
22011 -> 22010;
22011 -> 19964;
22012 -> 19969;
22012 -> 21858;
22012 -> 19964;
22013 -> 19964;
22014 -> 22012;
22014 -> 22013;
22015 -> 22013;
22015 -> 19964;
22016 -> 22012;
22016 -> 22015;
22016 -> 19964;
22017 -> 19966;
22017 -> 19964;
22018 -> 21511;
22018 -> 19964;
22019 -> 19964;
22020 -> 22016;
22020 -> 22019;
22021 -> 22017;
22021 -> 22019;
22022 -> 22018;
22022 -> 22019;
22023 -> 19968;
22023 -> 22019;
22024 -> 22020;
22024 -> 22019;
22025 -> 22019;
22026 -> 22024;
22026 -> 22025;
22027 -> 22023;
22027 -> 22025;
22028 -> 22025;
22029 -> 22028;
22030 -> 22026;
22030 -> 22029;
22030 -> 22028;
22031 -> 22025;
22032 -> 22031;
22033 -> 22026;
22033 -> 22032;
22033 -> 22031;
22034 -> 22031;
22035 -> 22034;
22036 -> 22034;
22037 -> 22036;
22038 -> 22037;
22039 -> 22037;
22040 -> 22026;
22040 -> 22039;
22040 -> 22037;
22041 -> 22026;
22041 -> 22037;
22042 -> 22037;
22043 -> 22026;
22043 -> 22042;
22043 -> 22037;
22044 -> 22036;
22045 -> 22026;
22046 -> 22045;
22046 -> 22026;
22047 -> 0;
22047 -> 22026;
22048 -> 22026;
22049 -> 22020;
22049 -> 22019;
22050 -> 22019;
22051 -> 22049;
22051 -> 22050;
22052 -> 22023;
22052 -> 22050;
22053 -> 22051;
22053 -> 22016;
22053 -> 22026;
22053 -> 22050;
22054 -> 22050;
22055 -> 22053;
22055 -> 22054;
22056 -> 22054;
22057 -> 22055;
22057 -> 22056;
22057 -> 22054;
22058 -> 22050;
22059 -> 22052;
22059 -> 22055;
22059 -> 22058;
22060 -> 22059;
22060 -> 22050;
22061 -> 0;
22061 -> 22050;
22062 -> 22050;
22063 -> 22060;
22063 -> 22062;
22064 -> 22061;
22064 -> 22062;
22065 -> 22055;
22065 -> 22062;
22066 -> 22020;
22066 -> 22016;
22066 -> 22055;
22066 -> 22019;
22067 -> 22019;
22068 -> 22067;
22069 -> 22066;
22069 -> 22068;
22069 -> 22067;
22070 -> 22019;
22071 -> 22022;
22071 -> 22070;
22072 -> 22071;
22072 -> 21177;
22072 -> 22070;
22073 -> 22072;
22073 -> 22070;
22074 -> 22073;
22074 -> 22019;
22075 -> 22019;
22076 -> 22023;
22076 -> 22075;
22077 -> 22076;
22077 -> 22066;
22077 -> 22075;
22078 -> 0;
22078 -> 22075;
22079 -> 22075;
22080 -> 22077;
22080 -> 22079;
22081 -> 22078;
22081 -> 22079;
22082 -> 22080;
22082 -> 22019;
22083 -> 22074;
22083 -> 22082;
22083 -> 22019;
22084 -> 22026;
22084 -> 22083;
22085 -> 22063;
22085 -> 22083;
22086 -> 22022;
22086 -> 22083;
22087 -> 22066;
22087 -> 22083;
22088 -> 22021;
22088 -> 22083;
22089 -> 22083;
22090 -> 22084;
22090 -> 22089;
22091 -> 22085;
22091 -> 22089;
22092 -> 22086;
22092 -> 22089;
22093 -> 22087;
22093 -> 22089;
22094 -> 22088;
22094 -> 22089;
22095 -> 22089;
22096 -> 22090;
22096 -> 22089;
22097 -> 22091;
22097 -> 22089;
22098 -> 22093;
22098 -> 22066;
22098 -> 22089;
22099 -> 22095;
22099 -> 22089;
22100 -> 22089;
22101 -> 22096;
22101 -> 22100;
22102 -> 22097;
22102 -> 22100;
22103 -> 22098;
22103 -> 22100;
22104 -> 22099;
22104 -> 22100;
22105 -> 0;
22105 -> 22100;
22106 -> 22105;
22106 -> 22100;
22107 -> 22100;
22108 -> 22103;
22108 -> 22107;
22109 -> 22108;
22109 -> 22100;
22110 -> 22100;
22111 -> 22106;
22111 -> 22110;
22112 -> 22109;
22112 -> 22110;
22113 -> 22111;
22113 -> 22110;
22114 -> 22110;
22115 -> 22113;
22115 -> 22114;
22116 -> 22112;
22116 -> 22114;
22117 -> 22115;
22117 -> 22114;
22118 -> 22114;
22119 -> 22117;
22119 -> 22118;
22120 -> 22119;
22120 -> 22118;
22121 -> 22120;
22122 -> 22114;
22123 -> 22121;
22123 -> 22122;
22123 -> 22114;
22124 -> 22116;
22124 -> 22066;
22124 -> 22114;
22125 -> 22115;
22125 -> 22114;
22126 -> 22114;
22127 -> 22125;
22127 -> 22126;
22128 -> 22127;
22128 -> 22126;
22129 -> 22126;
22130 -> 22128;
22130 -> 22129;
22131 -> 22130;
22131 -> 22129;
22132 -> 22131;
22133 -> 22126;
22134 -> 22127;
22134 -> 22126;
22135 -> 0;
22135 -> 22134;
22136 -> 22124;
22136 -> 22135;
22136 -> 22114;
22137 -> 22136;
22138 -> 22137;
22138 -> 22110;
22139 -> 22138;
22139 -> 22100;
22140 -> 22138;
22140 -> 22100;
22141 -> 22101;
22141 -> 22140;
22141 -> 22100;
22142 -> 22102;
22142 -> 22141;
22143 -> 0;
22143 -> 22142;
22144 -> 22143;
22144 -> 22141;
22145 -> 22141;
22146 -> 22141;
22147 -> 22144;
22147 -> 22146;
22148 -> 22145;
22148 -> 22146;
22149 -> 22147;
22149 -> 22146;
22150 -> 22147;
22151 -> 0;
22151 -> 22150;
22152 -> 22147;
22152 -> 0;
22152 -> 22146;
22153 -> 22104;
22153 -> 22145;
22153 -> 22095;
22153 -> 22151;
22153 -> 22146;
22153 -> 22148;
22153 -> 0;
22153 -> 22141;
22154 -> 22089;
22155 -> 22095;
22155 -> 22089;
22156 -> 22155;
22156 -> 22153;
22156 -> 22089;
22157 -> 22094;
22157 -> 22156;
22158 -> 22092;
22158 -> 22156;
22159 -> 22156;
22160 -> 22156;
22161 -> 22158;
22161 -> 22160;
22162 -> 22159;
22162 -> 22160;
22163 -> 22159;
22163 -> 22160;
22164 -> 22160;
22165 -> 22163;
22165 -> 22164;
22166 -> 11008;
22166 -> 22164;
22167 -> 0;
22167 -> 22164;
22168 -> 22164;
22169 -> 22168;
22169 -> 22166;
22169 -> 22167;
22169 -> 22153;
22169 -> 22164;
22170 -> 22169;
22170 -> 22168;
22171 -> 0;
22171 -> 22169;
22172 -> 22168;
22172 -> 22164;
22173 -> 22163;
22173 -> 22160;
22174 -> 22160;
22175 -> 22161;
22175 -> 22174;
22176 -> 22175;
22176 -> 22160;
22177 -> 22161;
22177 -> 22163;
22177 -> 22160;
22178 -> 22162;
22178 -> 22163;
22178 -> 22160;
22179 -> 22093;
22179 -> 22156;
22180 -> 22156;
22181 -> 22157;
22181 -> 22180;
22182 -> 22159;
22182 -> 22180;
22183 -> 22179;
22183 -> 22180;
22184 -> 22182;
22184 -> 22180;
22185 -> 22183;
22185 -> 22180;
22186 -> 22180;
22187 -> 22180;
22188 -> 22184;
22188 -> 22187;
22189 -> 22185;
22189 -> 22187;
22190 -> 22186;
22190 -> 22187;
22191 -> 22186;
22191 -> 22187;
22192 -> 22188;
22192 -> 22187;
22193 -> 22189;
22193 -> 22187;
22194 -> 22190;
22194 -> 22187;
22195 -> 22187;
22196 -> 22195;
22196 -> 22192;
22196 -> 22193;
22196 -> 22194;
22196 -> 22171;
22196 -> 22172;
22196 -> 22173;
22196 -> 22178;
22196 -> 22177;
22196 -> 21177;
22196 -> 21178;
22196 -> 21179;
22196 -> 22187;
22197 -> 22186;
22197 -> 22180;
22198 -> 22181;
22198 -> 22197;
22198 -> 19535;
22198 -> 22196;
22198 -> 22180;
22199 -> 22095;
22199 -> 22198;
22199 -> 22089;
22200 -> 22083;
22201 -> 19964;
22202 -> 19964;
22203 -> 19968;
22203 -> 22202;
22204 -> 22203;
22204 -> 22199;
22204 -> 22202;
22205 -> 0;
22205 -> 22202;
22206 -> 22202;
22207 -> 22205;
22207 -> 22206;
22208 -> 22204;
22208 -> 19964;
22209 -> 19966;
22209 -> 22208;
22210 -> 19968;
22210 -> 22199;
22210 -> 22208;
22211 -> 22011;
22211 -> 22208;
22212 -> 22208;
22213 -> 22208;
22214 -> 22210;
22214 -> 22213;
22215 -> 22211;
22215 -> 22213;
22216 -> 22212;
22216 -> 22213;
22217 -> 22213;
22218 -> 22217;
22219 -> 22216;
22219 -> 22213;
22220 -> 22214;
22220 -> 22216;
22220 -> 22213;
22221 -> 22215;
22221 -> 22216;
22221 -> 22213;
22222 -> 22208;
22223 -> 19965;
22223 -> 22222;
22224 -> 22223;
22224 -> 22222;
22225 -> 22224;
22225 -> 22217;
22225 -> 22219;
22225 -> 22220;
22225 -> 22221;
22225 -> 21955;
22225 -> 21977;
22225 -> 22008;
22225 -> 21878;
22225 -> 21881;
22225 -> 21886;
22225 -> 21919;
22225 -> 21918;
22225 -> 21917;
22225 -> 21936;
22225 -> 21891;
22225 -> 21892;
22225 -> 21935;
22225 -> 21939;
22225 -> 21938;
22225 -> 21841;
22225 -> 21858;
22225 -> 21635;
22225 -> 22222;
22226 -> 22222;
22227 -> 22226;
22228 -> 22225;
22228 -> 22227;
22228 -> 22226;
22229 -> 22208;
22230 -> 22209;
22230 -> 22229;
22231 -> 22212;
22231 -> 22229;
22232 -> 22225;
22232 -> 22229;
22233 -> 22011;
22233 -> 19964;
22234 -> 19964;
22235 -> 22233;
22235 -> 22234;
22236 -> 22234;
22237 -> 22234;
22238 -> 22236;
22238 -> 22237;
22239 -> 22237;
22240 -> 22235;
22240 -> 22239;
22241 -> 22240;
22241 -> 21955;
22241 -> 22239;
22242 -> 22241;
22242 -> 22239;
22243 -> 22242;
22243 -> 22237;
22244 -> 22237;
22245 -> 22244;
22245 -> 22238;
22245 -> 22237;
22246 -> 22237;
22247 -> 22246;
22247 -> 22238;
22247 -> 22237;
22248 -> 22236;
22248 -> 19964;
22249 -> 22248;
22249 -> 19960;
22250 -> 19938;
22251 -> 22249;
22251 -> 22250;
22252 -> 22250;
22253 -> 22235;
22253 -> 21955;
22253 -> 22252;
22254 -> 19940;
22254 -> 22253;
22255 -> 22253;
22256 -> 22253;
22257 -> 22254;
22257 -> 22253;
22258 -> 22255;
22258 -> 22253;
22259 -> 22256;
22259 -> 22253;
22260 -> 22257;
22260 -> 22253;
22261 -> 22258;
22261 -> 22253;
22262 -> 22259;
22262 -> 22253;
22263 -> 22260;
22263 -> 22253;
22264 -> 22253;
22264 -> 22008;
22265 -> 22261;
22265 -> 22253;
22266 -> 22262;
22266 -> 22253;
22267 -> 22263;
22267 -> 22253;
22268 -> 22265;
22268 -> 22253;
22269 -> 22266;
22269 -> 22253;
22270 -> 22267;
22270 -> 22253;
22271 -> 22253;
22271 -> 22008;
22272 -> 22270;
22272 -> 22253;
22273 -> 22269;
22273 -> 22253;
22274 -> 22253;
22275 -> 22268;
22275 -> 22253;
22276 -> 22272;
22276 -> 22253;
22277 -> 22273;
22277 -> 22253;
22278 -> 22274;
22278 -> 22253;
22279 -> 22275;
22279 -> 22253;
22280 -> 22253;
22281 -> 22253;
22282 -> 22280;
22282 -> 22281;
22283 -> 22282;
22283 -> 22232;
22283 -> 22281;
22284 -> 22283;
22284 -> 22253;
22285 -> 22253;
22286 -> 22284;
22286 -> 22285;
22287 -> 22285;
22287 -> 22253;
22288 -> 22276;
22288 -> 22287;
22289 -> 22277;
22289 -> 22287;
22290 -> 22278;
22290 -> 22287;
22291 -> 22287;
22292 -> 22279;
22292 -> 22291;
22293 -> 22292;
22293 -> 22232;
22293 -> 22291;
22294 -> 22287;
22295 -> 22279;
22295 -> 22294;
22296 -> 22294;
22297 -> 22295;
22297 -> 22296;
22298 -> 22297;
22298 -> 22232;
22298 -> 22296;
22299 -> 22298;
22299 -> 22294;
22300 -> 22299;
22300 -> 22294;
22301 -> 22294;
22302 -> 22299;
22302 -> 22301;
22303 -> 0;
22303 -> 22301;
22304 -> 22303;
22304 -> 22294;
22305 -> 22300;
22305 -> 22304;
22305 -> 22294;
22306 -> 22299;
22306 -> 22294;
22307 -> 22306;
22308 -> 22307;
22308 -> 22306;
22309 -> 22279;
22309 -> 22232;
22309 -> 22287;
22310 -> 22288;
22310 -> 22287;
22311 -> 22289;
22311 -> 22287;
22312 -> 22290;
22312 -> 22287;
22313 -> 22293;
22313 -> 22287;
22314 -> 22308;
22314 -> 22287;
22315 -> 22309;
22315 -> 22287;
22316 -> 22287;
22316 -> 22232;
22317 -> 22287;
22318 -> 22287;
22318 -> 22317;
22319 -> 22317;
22320 -> 22318;
22320 -> 22319;
22321 -> 22320;
22321 -> 22316;
22321 -> 22319;
22322 -> 22321;
22322 -> 22317;
22323 -> 22317;
22323 -> 22287;
22324 -> 22287;
22325 -> 22287;
22325 -> 22324;
22326 -> 22324;
22327 -> 22325;
22327 -> 22326;
22328 -> 22327;
22328 -> 22316;
22328 -> 22326;
22329 -> 22328;
22329 -> 22324;
22330 -> 22324;
22330 -> 22287;
22331 -> 22314;
22331 -> 22287;
22332 -> 22287;
22333 -> 22287;
22334 -> 22332;
22334 -> 22333;
22335 -> 22334;
22335 -> 22316;
22335 -> 22333;
22336 -> 22335;
22336 -> 22317;
22337 -> 22312;
22337 -> 22287;
22338 -> 22337;
22338 -> 22287;
22339 -> 22310;
22339 -> 22287;
22340 -> 22311;
22340 -> 22287;
22341 -> 22313;
22341 -> 22287;
22342 -> 22315;
22342 -> 22287;
22343 -> 22287;
22344 -> 22339;
22344 -> 22343;
22344 -> 22287;
22345 -> 22341;
22345 -> 22287;
22346 -> 22317;
22346 -> 22287;
22347 -> 22317;
22347 -> 22287;
22348 -> 22287;
22349 -> 22347;
22349 -> 22316;
22349 -> 22348;
22350 -> 22348;
22351 -> 22349;
22351 -> 22350;
22352 -> 22350;
22352 -> 22348;
22353 -> 22349;
22353 -> 14132;
22353 -> 22348;
22354 -> 22349;
22354 -> 14132;
22355 -> 22349;
22356 -> 22349;
22356 -> 14132;
22356 -> 22348;
22357 -> 0;
22357 -> 22349;
22358 -> 22349;
22359 -> 22349;
22360 -> 22349;
22360 -> 22359;
22361 -> 22359;
22361 -> 22349;
22362 -> 22349;
22363 -> 22358;
22363 -> 22349;
22364 -> 22349;
22364 -> 22363;
22365 -> 0;
22365 -> 22349;
22366 -> 22364;
22367 -> 22364;
22367 -> 22366;
22368 -> 22366;
22368 -> 22364;
22369 -> 22364;
22369 -> 22350;
22370 -> 22364;
22371 -> 22364;
22372 -> 22349;
22372 -> 22364;
22372 -> 22348;
22373 -> 22372;
22373 -> 22287;
22374 -> 22373;
22374 -> 22287;
22375 -> 22287;
22376 -> 22374;
22376 -> 22375;
22376 -> 22287;
22377 -> 22376;
22377 -> 22287;
22378 -> 22377;
22378 -> 22287;
22379 -> 0;
22379 -> 22378;
22380 -> 22287;
22381 -> 22379;
22381 -> 22287;
22382 -> 22287;
22383 -> 22380;
22383 -> 22382;
22383 -> 22287;
22384 -> 22379;
22384 -> 22287;
22385 -> 22384;
22385 -> 22287;
22386 -> 22337;
22386 -> 22385;
22387 -> 22253;
22388 -> 19930;
22388 -> 19928;
22389 -> 19929;
22389 -> 19928;
22390 -> 19931;
22390 -> 19928;
22391 -> 19928;
22392 -> 22388;
22392 -> 22391;
22393 -> 22389;
22393 -> 22391;
22394 -> 22390;
22394 -> 22391;
22395 -> 19933;
22395 -> 22391;
22396 -> 22391;
22397 -> 22253;
22397 -> 22396;
22398 -> 22397;
22398 -> 22245;
22398 -> 22396;
22399 -> 22398;
22399 -> 0;
22399 -> 22396;
22400 -> 22399;
22400 -> 22391;
22401 -> 19928;
22402 -> 19541;
22403 -> 19494;
22403 -> 22402;
22404 -> 22402;
22405 -> 22403;
22405 -> 22404;
22406 -> 22405;
22406 -> 22364;
22406 -> 22404;
22407 -> 22406;
22407 -> 0;
22407 -> 22402;
22408 -> 22402;
22409 -> 22407;
22409 -> 22408;
22409 -> 22402;
22410 -> 22409;
22410 -> 19541;
22411 -> 19494;
22411 -> 22364;
22411 -> 19492;
22412 -> 19492;
22413 -> 19494;
22413 -> 22412;
22414 -> 22412;
22415 -> 22413;
22415 -> 22414;
22416 -> 22414;
22417 -> 22415;
22417 -> 22416;
22418 -> 22417;
22418 -> 22364;
22418 -> 22416;
22419 -> 22418;
22419 -> 0;
22419 -> 22414;
22420 -> 22414;
22421 -> 22419;
22421 -> 22420;
22421 -> 22414;
22422 -> 22421;
22422 -> 22412;
22423 -> 0;
22423 -> 22422;
22424 -> 22423;
22424 -> 19492;
22425 -> 19492;
22426 -> 22424;
22426 -> 22425;
22427 -> 22253;
22427 -> 22425;
22428 -> 22427;
22428 -> 22425;
22429 -> 22426;
22429 -> 22425;
22430 -> 22425;
22431 -> 22428;
22431 -> 22430;
22432 -> 22429;
22432 -> 22430;
22433 -> 22427;
22433 -> 22008;
22433 -> 22430;
22434 -> 22431;
22434 -> 21955;
22434 -> 22430;
22435 -> 22431;
22435 -> 21977;
22435 -> 22430;
22436 -> 22432;
22436 -> 22430;
22437 -> 22430;
22438 -> 22434;
22438 -> 22437;
22439 -> 22435;
22439 -> 22437;
22440 -> 22436;
22440 -> 22437;
22441 -> 22437;
22442 -> 22437;
22443 -> 22437;
22444 -> 22442;
22444 -> 22443;
22445 -> 22438;
22445 -> 22443;
22446 -> 22445;
22446 -> 22443;
22447 -> 22438;
22447 -> 22446;
22448 -> 22446;
22449 -> 22447;
22449 -> 22448;
22450 -> 22448;
22451 -> 22449;
22451 -> 22450;
22452 -> 22450;
22453 -> 22451;
22453 -> 22452;
22454 -> 22452;
22455 -> 22453;
22455 -> 22454;
22456 -> 22455;
22456 -> 22364;
22456 -> 22454;
22457 -> 22448;
22458 -> 22439;
22458 -> 0;
22458 -> 22443;
22459 -> 22443;
22460 -> 22456;
22460 -> 22459;
22460 -> 22443;
22461 -> 22460;
22461 -> 22458;
22461 -> 22443;
22462 -> 22443;
22463 -> 22440;
22463 -> 22462;
22463 -> 22443;
22464 -> 22442;
22464 -> 22430;
22465 -> 22464;
22465 -> 19492;
22468 -> 22466;
22468 -> 22467;
22469 -> 22467;
22470 -> 22468;
22470 -> 22469;
22470 -> 22467;
22471 -> 22467;
22472 -> 19492;
22473 -> 19492;
22474 -> 22465;
22474 -> 22473;
22475 -> 22472;
22475 -> 22473;
22476 -> 22474;
22476 -> 22475;
22476 -> 22473;
22477 -> 22411;
22477 -> 22472;
22477 -> 22476;
22477 -> 22364;
22477 -> 22438;
22477 -> 22439;
22477 -> 22440;
22477 -> 19492;
22478 -> 22477;
22479 -> 22478;
22479 -> 22008;
22480 -> 22478;
22480 -> 22477;
22481 -> 19532;
22481 -> 22477;
22482 -> 22477;
22483 -> 22480;
22483 -> 22482;
22484 -> 22481;
22484 -> 22482;
22485 -> 19494;
22485 -> 22482;
22486 -> 22482;
22487 -> 22483;
22487 -> 22486;
22488 -> 22486;
22489 -> 22487;
22489 -> 22477;
22489 -> 22488;
22490 -> 22489;
22490 -> 22477;
22490 -> 0;
22490 -> 22488;
22491 -> 22488;
22492 -> 22490;
22492 -> 22486;
22493 -> 22492;
22493 -> 22482;
22494 -> 22483;
22494 -> 22493;
22495 -> 22493;
22496 -> 22494;
22496 -> 22495;
22497 -> 22495;
22498 -> 22496;
22498 -> 22497;
22499 -> 0;
22499 -> 22497;
22500 -> 22499;
22500 -> 22495;
22501 -> 22500;
22501 -> 22493;
22502 -> 22483;
22502 -> 22501;
22503 -> 22501;
22504 -> 22501;
22505 -> 22502;
22505 -> 22504;
22506 -> 22503;
22506 -> 22504;
22507 -> 22504;
22508 -> 22505;
22508 -> 22507;
22508 -> 22504;
22509 -> 22504;
22510 -> 22505;
22510 -> 22509;
22511 -> 22509;
22511 -> 22504;
22512 -> 22506;
22512 -> 22504;
22513 -> 22512;
22514 -> 22513;
22515 -> 22483;
22515 -> 22514;
22516 -> 22514;
22517 -> 22515;
22517 -> 22477;
22517 -> 22516;
22518 -> 22517;
22518 -> 14132;
22519 -> 22517;
22520 -> 22517;
22520 -> 14132;
22520 -> 22516;
22521 -> 22517;
22521 -> 22514;
22522 -> 22521;
22522 -> 22513;
22523 -> 22522;
22524 -> 22485;
22524 -> 22523;
22525 -> 22523;
22526 -> 22524;
22526 -> 22525;
22527 -> 22526;
22527 -> 0;
22527 -> 22523;
22528 -> 22523;
22529 -> 22527;
22529 -> 22528;
22529 -> 22523;
22530 -> 22529;
22530 -> 22522;
22531 -> 22530;
22532 -> 22531;
22532 -> 22530;
22533 -> 22482;
22534 -> 22485;
22534 -> 22482;
22535 -> 22483;
22535 -> 22482;
22536 -> 22533;
22536 -> 22482;
22537 -> 22482;
22538 -> 22534;
22538 -> 22537;
22539 -> 22535;
22539 -> 22537;
22540 -> 22536;
22540 -> 22537;
22541 -> 22539;
22541 -> 22537;
22542 -> 22538;
22542 -> 22537;
22543 -> 22540;
22543 -> 22537;
22544 -> 22537;
22545 -> 22541;
22545 -> 22544;
22546 -> 22542;
22546 -> 22544;
22547 -> 22543;
22547 -> 22544;
22548 -> 22547;
22548 -> 22544;
22549 -> 22545;
22549 -> 22544;
22550 -> 22548;
22550 -> 22544;
22551 -> 22546;
22551 -> 22544;
22552 -> 22544;
22553 -> 22544;
22554 -> 22549;
22554 -> 22553;
22555 -> 22550;
22555 -> 22553;
22556 -> 22551;
22556 -> 22553;
22557 -> 22552;
22557 -> 22553;
22558 -> 22553;
22559 -> 22554;
22559 -> 22553;
22560 -> 22555;
22560 -> 22553;
22561 -> 22556;
22561 -> 22553;
22562 -> 22557;
22562 -> 22553;
22563 -> 22553;
22564 -> 22558;
22564 -> 22563;
22565 -> 22559;
22565 -> 22563;
22566 -> 22558;
22566 -> 22563;
22567 -> 22560;
22567 -> 22563;
22568 -> 22561;
22568 -> 22563;
22569 -> 22562;
22569 -> 22563;
22570 -> 22558;
22570 -> 22563;
22571 -> 22563;
22572 -> 22564;
22572 -> 22571;
22573 -> 22572;
22573 -> 22563;
22574 -> 22565;
22574 -> 22563;
22575 -> 22573;
22575 -> 22574;
22575 -> 22563;
22576 -> 22563;
22577 -> 22569;
22577 -> 22576;
22577 -> 22563;
22578 -> 22570;
22578 -> 22576;
22578 -> 22563;
22579 -> 22577;
22579 -> 22578;
22579 -> 22563;
22580 -> 22563;
22581 -> 22565;
22581 -> 22580;
22582 -> 22580;
22583 -> 22580;
22584 -> 22581;
22584 -> 22583;
22585 -> 22583;
22586 -> 22584;
22586 -> 22477;
22586 -> 22585;
22587 -> 22586;
22587 -> 22583;
22588 -> 22587;
22588 -> 22580;
22589 -> 22588;
22590 -> 22581;
22590 -> 22589;
22591 -> 22590;
22591 -> 22477;
22591 -> 22589;
22592 -> 22591;
22592 -> 22588;
22593 -> 22588;
22594 -> 22592;
22594 -> 22593;
22594 -> 22588;
22595 -> 22580;
22596 -> 22564;
22596 -> 22595;
22597 -> 22596;
22597 -> 22580;
22598 -> 22597;
22599 -> 22567;
22599 -> 22598;
22599 -> 22597;
22600 -> 22581;
22600 -> 22599;
22601 -> 22568;
22601 -> 22599;
22602 -> 22582;
22602 -> 22599;
22603 -> 22600;
22603 -> 22601;
22603 -> 22602;
22603 -> 22567;
22603 -> 22477;
22603 -> 22550;
22603 -> 22599;
22604 -> 22599;
22605 -> 22603;
22605 -> 22604;
22606 -> 22603;
22606 -> 22604;
22607 -> 22603;
22607 -> 22604;
22608 -> 22604;
22609 -> 22605;
22609 -> 22608;
22610 -> 22608;
22611 -> 22609;
22611 -> 22603;
22611 -> 22610;
22612 -> 22611;
22612 -> 22608;
22613 -> 22612;
22613 -> 22604;
22614 -> 22605;
22614 -> 22613;
22615 -> 22606;
22615 -> 22613;
22616 -> 22607;
22616 -> 22613;
22617 -> 22613;
22618 -> 22614;
22618 -> 22617;
22619 -> 22615;
22619 -> 22617;
22620 -> 22616;
22620 -> 22617;
22621 -> 22617;
22622 -> 22618;
22622 -> 22621;
22623 -> 22621;
22624 -> 22622;
22624 -> 22603;
22624 -> 22623;
22625 -> 0;
22625 -> 22623;
22626 -> 22624;
22626 -> 22621;
22627 -> 22626;
22627 -> 22617;
22628 -> 22627;
22628 -> 0;
22628 -> 22617;
22629 -> 22628;
22630 -> 22620;
22630 -> 22629;
22630 -> 22603;
22630 -> 22599;
22631 -> 22580;
22632 -> 22631;
22632 -> 22580;
22633 -> 22580;
22634 -> 22581;
22634 -> 22633;
22635 -> 22633;
22636 -> 22634;
22636 -> 22630;
22636 -> 22635;
22637 -> 22636;
22637 -> 22580;
22638 -> 22637;
22639 -> 22581;
22639 -> 22638;
22640 -> 22639;
22640 -> 22630;
22640 -> 22638;
22641 -> 22640;
22641 -> 22637;
22642 -> 22641;
22642 -> 22630;
22642 -> 22637;
22643 -> 22637;
22644 -> 22637;
22645 -> 22641;
22645 -> 22630;
22645 -> 22644;
22645 -> 22637;
22646 -> 22641;
22646 -> 22644;
22646 -> 22630;
22646 -> 22637;
22647 -> 22569;
22647 -> 22580;
22648 -> 22647;
22649 -> 22569;
22649 -> 22580;
22650 -> 22649;
22651 -> 22646;
22651 -> 22650;
22652 -> 22651;
22652 -> 22646;
22652 -> 22650;
22653 -> 22650;
22654 -> 22652;
22654 -> 22653;
22655 -> 22651;
22655 -> 22646;
22655 -> 22653;
22656 -> 22654;
22656 -> 22653;
22657 -> 22653;
22658 -> 22656;
22658 -> 22657;
22659 -> 22658;
22659 -> 22657;
22660 -> 22657;
22661 -> 22659;
22661 -> 22660;
22662 -> 22661;
22662 -> 22649;
22663 -> 22662;
22663 -> 22583;
22664 -> 22663;
22664 -> 22580;
22665 -> 22664;
22666 -> 22665;
22666 -> 22664;
22667 -> 22664;
22668 -> 22666;
22668 -> 22667;
22668 -> 22664;
22669 -> 22648;
22669 -> 22595;
22670 -> 22669;
22670 -> 22580;
22671 -> 22670;
22672 -> 22567;
22672 -> 22671;
22672 -> 22670;
22673 -> 22662;
22673 -> 22672;
22674 -> 22568;
22674 -> 22672;
22675 -> 22582;
22675 -> 22672;
22676 -> 22672;
22677 -> 22673;
22677 -> 22676;
22678 -> 22676;
22679 -> 22677;
22679 -> 22673;
22680 -> 0;
22680 -> 22673;
22681 -> 22662;
22681 -> 22673;
22682 -> 0;
22682 -> 22673;
22683 -> 22682;
22683 -> 0;
22683 -> 22673;
22684 -> 22683;
22685 -> 22548;
22685 -> 22544;
22686 -> 22684;
22686 -> 22544;
22687 -> 22484;
22687 -> 22482;
22688 -> 22482;
22689 -> 22485;
22689 -> 22688;
22690 -> 22689;
22690 -> 22673;
22690 -> 22688;
22691 -> 22690;
22691 -> 22482;
22692 -> 22685;
22692 -> 22482;
22693 -> 22482;
22694 -> 22687;
22694 -> 22693;
22695 -> 22691;
22695 -> 22693;
22696 -> 22692;
22696 -> 22693;
22697 -> 22696;
22697 -> 22693;
22698 -> 22697;
22699 -> 22477;
22700 -> 22477;
22701 -> 22700;
22701 -> 22673;
22702 -> 22700;
22702 -> 22673;
22703 -> 22700;
22703 -> 22673;
22704 -> 22703;
22704 -> 22477;
22705 -> 19532;
22705 -> 22477;
22706 -> 22704;
22706 -> 22705;
22706 -> 22673;
22706 -> 19532;
22706 -> 22477;
22707 -> 22477;
22708 -> 19517;
22708 -> 22706;
22708 -> 22707;
22708 -> 22477;
22709 -> 22708;
22709 -> 22477;
22710 -> 22709;
22711 -> 22710;
22711 -> 22708;
22712 -> 22710;
22712 -> 22709;
22713 -> 19535;
22713 -> 22709;
22714 -> 0;
22714 -> 22477;
22715 -> 22477;
22716 -> 22714;
22716 -> 22715;
22717 -> 19494;
22717 -> 22712;
22717 -> 22715;
22718 -> 22717;
22718 -> 22716;
22718 -> 22715;
22719 -> 19532;
22719 -> 22712;
22719 -> 22718;
22719 -> 19492;
22720 -> 19535;
22720 -> 22719;
22720 -> 19492;
22721 -> 19494;
22721 -> 22720;
22721 -> 19492;
22722 -> 22721;
22722 -> 19489;
22723 -> 19487;
22724 -> 22722;
22724 -> 22723;
22725 -> 22723;
22726 -> 22724;
22726 -> 22720;
22726 -> 22725;
22727 -> 1;
22728 -> 22724;
22728 -> 22727;
22729 -> 22727;
22730 -> 22729;
}