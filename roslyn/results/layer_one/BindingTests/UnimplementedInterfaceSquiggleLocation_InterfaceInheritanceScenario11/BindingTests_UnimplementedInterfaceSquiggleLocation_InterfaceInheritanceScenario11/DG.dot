digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 736122"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 736123"];
3 [label="param BindingTests(this) 736124"];
4 [label="'C' 736125"];
5 [label="DefaultTypeName = 'C' 736126"];
6 [label="'M' 736127"];
7 [label="DefaultMethodName = 'M' 736128"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 736129"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 736130"];
10 [label="param CompilingTestBase(this) 736131"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 736132"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 736133"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 736134"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 736135"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 736136"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 736137"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 736138"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 736139"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 736140"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 736141"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 736142"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 736143"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 736144"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 736145"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 736146"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 736147"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 736148"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 736149"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 736150"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 736151"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 736152"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 736153"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 736154"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 736155"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 736156"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 736157"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 736158"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 736159"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 736160"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 736161"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 736162"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 736163"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 736164"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 736165"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 736166"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 736167"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 736168"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 736169"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 736170"];
50 [label="LazyThreadSafetyMode.PublicationOnly 736171"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 736172"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 736173"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 736174"];
54 [label="LazyThreadSafetyMode.PublicationOnly 736175"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 736176"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 736177"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 736178"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 736179"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 736180"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 736181"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 736182"];
62 [label="LazyThreadSafetyMode.PublicationOnly 736183"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 736184"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 736185"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 736186"];
66 [label="LazyThreadSafetyMode.PublicationOnly 736187"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 736188"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 736189"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 736190"];
70 [label="LazyThreadSafetyMode.PublicationOnly 736191"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 736192"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 736193"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 736194"];
74 [label="LazyThreadSafetyMode.PublicationOnly 736195"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736196"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736197"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 736198"];
78 [label="LazyThreadSafetyMode.PublicationOnly 736199"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736200"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736201"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 736202"];
82 [label="LazyThreadSafetyMode.PublicationOnly 736203"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736204"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736205"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 736206"];
86 [label="LazyThreadSafetyMode.PublicationOnly 736207"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736208"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736209"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 736210"];
90 [label="LazyThreadSafetyMode.PublicationOnly 736211"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736212"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736213"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 736214"];
94 [label="LazyThreadSafetyMode.PublicationOnly 736215"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736216"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736217"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 736218"];
98 [label="LazyThreadSafetyMode.PublicationOnly 736219"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736220"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736221"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 736222"];
102 [label="LazyThreadSafetyMode.PublicationOnly 736223"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 736224"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 736225"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 736226"];
106 [label="LazyThreadSafetyMode.PublicationOnly 736227"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 736228"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 736229"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 736230"];
110 [label="LazyThreadSafetyMode.PublicationOnly 736231"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736232"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736233"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 736234"];
114 [label="LazyThreadSafetyMode.PublicationOnly 736235"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736236"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736237"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 736238"];
118 [label="LazyThreadSafetyMode.PublicationOnly 736239"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736240"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736241"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 736242"];
122 [label="LazyThreadSafetyMode.PublicationOnly 736243"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736244"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736245"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 736246"];
126 [label="LazyThreadSafetyMode.PublicationOnly 736247"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 736248"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 736249"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 736250"];
130 [label="LazyThreadSafetyMode.PublicationOnly 736251"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736252"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736253"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 736254"];
134 [label="LazyThreadSafetyMode.PublicationOnly 736255"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736256"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736257"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 736258"];
138 [label="LazyThreadSafetyMode.PublicationOnly 736259"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736260"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736261"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 736262"];
142 [label="LazyThreadSafetyMode.PublicationOnly 736263"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736264"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736265"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 736266"];
146 [label="LazyThreadSafetyMode.PublicationOnly 736267"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736268"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736269"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 736270"];
150 [label="LazyThreadSafetyMode.PublicationOnly 736271"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736272"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736273"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 736274"];
154 [label="LazyThreadSafetyMode.PublicationOnly 736275"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736276"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736277"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 736278"];
158 [label="LazyThreadSafetyMode.PublicationOnly 736279"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736280"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736281"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 736282"];
162 [label="LazyThreadSafetyMode.PublicationOnly 736283"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736284"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736285"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 736286"];
166 [label="LazyThreadSafetyMode.PublicationOnly 736287"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736288"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736289"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 736290"];
170 [label="LazyThreadSafetyMode.PublicationOnly 736291"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736292"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736293"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 736294"];
174 [label="LazyThreadSafetyMode.PublicationOnly 736295"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736296"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736297"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 736298"];
178 [label="LazyThreadSafetyMode.PublicationOnly 736299"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736300"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 736301"];
181 [label="@'R:\\Invalid.dll' 736302"];
182 [label="fullPath: @'R:\\Invalid.dll' 736303"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 736304"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 736305"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 736306"];
186 [label="MscorlibRef_v4_0_30316_17626 736307"];
187 [label="Net451.mscorlib 736308"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 736309"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 736310"];
190 [label="'/*<bind>*/' 736311"];
191 [label="StartString = '/*<bind>*/' 736312"];
192 [label="'/*</bind>*/' 736313"];
193 [label="EndString = '/*</bind>*/' 736314"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 736315"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 736316"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 736317"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 736318"];
198 [label="param CSharpTestBase(this) 736319"];
199 [label="param CommonTestBase(this) 736320"];
200 [label="param TestBase(this) 736321"];
201 [label="_temp 736322"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 736323"];
203 [label="param UnimplementedInterfaceSquiggleLocation_InterfaceInheritanceScenario11(this) 736324"];
204 [label="string scenarioCode = @'\nstatic class Module1\n{\n    public static void Main()\n    {\n    }\n}\n\ninterface Ibase\n{\n    void method1();\n}\n\ninterface Ibase2\n{\n    void method2();\n}\n\ninterface Iderived : Ibase\n{\n    void method3();\n}\n\ninterface Iderived2 : Iderived\n{\n    void method4();\n}\n\nclass foo : Iderived2, Iderived, Ibase, Ibase2\n{\n    void Ibase.method1()\n    { }\n    void Ibase2.method2()\n    { }\n    void Iderived2.method4()\n    { }\n}\n '; 736325"];
205 [label="var testAssembly = CreateCompilation(scenarioCode); 736326"];
206 [label="scenarioCode 736327"];
207 [label="param operator(string source) 736328"];
208 [label="source 736329"];
209 [label="new CSharpTestSource(source) 736330"];
210 [label="param CSharpTestSource(object value) 736331"];
211 [label="param CSharpTestSource(this) 736332"];
212 [label="Value 736333"];
213 [label="var testAssembly = CreateCompilation(scenarioCode); 736334"];
214 [label="var testAssembly = CreateCompilation(scenarioCode); 736335"];
215 [label="CreateCompilation(scenarioCode) 736336"];
216 [label="param CreateCompilation(CSharpTestSource source) 736337"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 736338"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 736339"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 736340"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 736341"];
221 [label="param CreateCompilation(string assemblyName = '') 736342"];
222 [label="param CreateCompilation(string sourceFileName = '') 736343"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 736344"];
224 [label="source 736345"];
225 [label="targetFramework 736346"];
226 [label="references 736347"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 736348"];
228 [label="param GetReferences(TargetFramework tf) 736349"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 736350"];
230 [label="var references = GetReferences(tf); 736351"];
231 [label="GetReferences(tf) 736352"];
232 [label="param GetReferences(TargetFramework targetFramework) 736353"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 736354"];
234 [label="StandardReferences 736355"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 736356"];
236 [label="Mscorlib46ExtendedReferences 736357"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 736358"];
238 [label="TestBase.ValueTupleRef 736359"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 736360"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 736361"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 736362"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 736363"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 736364"];
244 [label="return references; 736365"];
245 [label="options 736366"];
246 [label="parseOptions 736367"];
247 [label="assemblyName 736368"];
248 [label="sourceFileName 736369"];
249 [label="skipUsesIsNullable 736370"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 736371"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 736372"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 736373"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 736374"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 736375"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 736376"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 736377"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 736378"];
258 [label="source 736379"];
259 [label="references 736380"];
260 [label="options 736381"];
261 [label="parseOptions 736382"];
262 [label="assemblyName 736383"];
263 [label="sourceFileName 736384"];
264 [label="skipUsesIsNullable 736385"];
265 [label="null 736386"];
266 [label="experimentalFeature: null 736387"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 736388"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 736389"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 736390"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 736391"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 736392"];
272 [label="param CreateCompilationCore(string assemblyName) 736393"];
273 [label="param CreateCompilationCore(string sourceFileName) 736394"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 736395"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 736396"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 736397"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 736398"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 736399"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 736400"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 736401"];
281 [label="param GetSyntaxTrees(this) 736402"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 736403"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 736404"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 736405"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 736406"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 736407"];
287 [label="param Parse(string text) 736408"];
288 [label="param Parse(string filename = '') 736409"];
289 [label="param Parse(CSharpParseOptions options = null) 736410"];
290 [label="param Parse(Encoding encoding = null) 736411"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 736412"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 736413"];
293 [label="kind: SourceCodeKind.Regular 736414"];
294 [label="documentationMode: DocumentationMode.Parse 736415"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 736416"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 736417"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 736418"];
298 [label="SourceCodeKind.Script 736419"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 736420"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 736421"];
301 [label="LanguageVersion.CSharp6 736422"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 736423"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 736424"];
304 [label="LanguageVersion.CSharp7 736425"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 736426"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 736427"];
307 [label="LanguageVersion.CSharp7_1 736428"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 736429"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 736430"];
310 [label="LanguageVersion.CSharp7_2 736431"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 736432"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 736433"];
313 [label="LanguageVersion.CSharp7_3 736434"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 736435"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 736436"];
316 [label="LanguageVersion.Default 736437"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 736438"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 736439"];
319 [label="LanguageVersion.Preview 736440"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 736441"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 736442"];
322 [label="LanguageVersion.CSharp8 736443"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 736444"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 736445"];
325 [label="LanguageVersion.CSharp9 736446"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 736447"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 736448"];
328 [label="DocumentationMode.Diagnose 736449"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 736450"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 736451"];
331 [label="Regular 736452"];
332 [label="'UseLegacyStrongNameProvider' 736453"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 736454"];
334 [label="param WithFeature(this CSharpParseOptions options) 736455"];
335 [label="param WithFeature(string feature) 736456"];
336 [label="param WithFeature(string value = 'true') 736457"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 736458"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 736459"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 736460"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 736461"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 736462"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 736463"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 736464"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 736465"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 736466"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 736467"];
347 [label="1 736468"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 736469"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 736470"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 736471"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 736472"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 736473"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 736474"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 736475"];
355 [label="LanguageVersion.CSharp8 736476"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 736477"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 736478"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 736479"];
359 [label="new SmallDictionary<string, string> { } 736480"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 736481"];
361 [label="kind: SourceCodeKind.Regular 736482"];
362 [label="documentationMode: DocumentationMode.None 736483"];
363 [label="languageVersion: LanguageVersion.Preview 736484"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 736485"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 736486"];
366 [label="s_experimentalFeatures 736487"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 736488"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 736489"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 736490"];
370 [label="'testV7SwitchBinder' 736491"];
371 [label="'true' 736492"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 736493"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 736494"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 736495"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 736496"];
376 [label="RegularWithRecursivePatterns = Regular8 736497"];
377 [label="RegularWithoutPatternCombinators = Regular8 736498"];
378 [label="RegularWithPatternCombinators = RegularPreview 736499"];
379 [label="OutputKind.DynamicallyLinkedLibrary 736500"];
380 [label="OptimizationLevel.Release 736501"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 736502"];
382 [label="param CreateTestOptions(OutputKind outputKind) 736503"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736504"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 736505"];
385 [label="outputKind 736506"];
386 [label="optimizationLevel: optimizationLevel 736507"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 736508"];
388 [label="allowUnsafe: allowUnsafe 736509"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736510"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736511"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 736512"];
392 [label="OutputKind.ConsoleApplication 736513"];
393 [label="OptimizationLevel.Release 736514"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 736515"];
395 [label="param CreateTestOptions(OutputKind outputKind) 736516"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736517"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 736518"];
398 [label="outputKind 736519"];
399 [label="optimizationLevel: optimizationLevel 736520"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 736521"];
401 [label="allowUnsafe: allowUnsafe 736522"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736523"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736524"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 736525"];
405 [label="true 736526"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 736527"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 736528"];
408 [label="true 736529"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 736530"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 736531"];
411 [label="OutputKind.DynamicallyLinkedLibrary 736532"];
412 [label="OptimizationLevel.Debug 736533"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 736534"];
414 [label="param CreateTestOptions(OutputKind outputKind) 736535"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736536"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 736537"];
417 [label="outputKind 736538"];
418 [label="optimizationLevel: optimizationLevel 736539"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 736540"];
420 [label="allowUnsafe: allowUnsafe 736541"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736542"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736543"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 736544"];
424 [label="OutputKind.ConsoleApplication 736545"];
425 [label="OptimizationLevel.Debug 736546"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 736547"];
427 [label="param CreateTestOptions(OutputKind outputKind) 736548"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736549"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 736550"];
430 [label="outputKind 736551"];
431 [label="optimizationLevel: optimizationLevel 736552"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 736553"];
433 [label="allowUnsafe: allowUnsafe 736554"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736555"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736556"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 736557"];
437 [label="OutputKind.WindowsRuntimeMetadata 736558"];
438 [label="OptimizationLevel.Release 736559"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 736560"];
440 [label="param CreateTestOptions(OutputKind outputKind) 736561"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736562"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 736563"];
443 [label="outputKind 736564"];
444 [label="optimizationLevel: optimizationLevel 736565"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 736566"];
446 [label="allowUnsafe: allowUnsafe 736567"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736568"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736569"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 736570"];
450 [label="OutputKind.WindowsRuntimeMetadata 736571"];
451 [label="OptimizationLevel.Debug 736572"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 736573"];
453 [label="param CreateTestOptions(OutputKind outputKind) 736574"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736575"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 736576"];
456 [label="outputKind 736577"];
457 [label="optimizationLevel: optimizationLevel 736578"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 736579"];
459 [label="allowUnsafe: allowUnsafe 736580"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736581"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736582"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 736583"];
463 [label="OutputKind.NetModule 736584"];
464 [label="OptimizationLevel.Release 736585"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 736586"];
466 [label="param CreateTestOptions(OutputKind outputKind) 736587"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736588"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 736589"];
469 [label="outputKind 736590"];
470 [label="optimizationLevel: optimizationLevel 736591"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 736592"];
472 [label="allowUnsafe: allowUnsafe 736593"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736594"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736595"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 736596"];
476 [label="OutputKind.NetModule 736597"];
477 [label="OptimizationLevel.Debug 736598"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 736599"];
479 [label="param CreateTestOptions(OutputKind outputKind) 736600"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 736601"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 736602"];
482 [label="outputKind 736603"];
483 [label="optimizationLevel: optimizationLevel 736604"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 736605"];
485 [label="allowUnsafe: allowUnsafe 736606"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736607"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 736608"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 736609"];
489 [label="true 736610"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 736611"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 736612"];
492 [label="true 736613"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 736614"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 736615"];
495 [label="true 736616"];
496 [label="DebugDll.WithAllowUnsafe(true) 736617"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 736618"];
498 [label="true 736619"];
499 [label="DebugExe.WithAllowUnsafe(true) 736620"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 736621"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 736622"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736623"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736624"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 736625"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736626"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736627"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 736628"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736629"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736630"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 736631"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736632"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 736633"];
513 [label="DebugInformationFormat.Pdb 736634"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 736635"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 736636"];
516 [label="options = TestOptions.Regular; 736637"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 736638"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 736639"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 736640"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 736641"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 736642"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 736643"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 736644"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 736645"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 736646"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 736647"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 736648"];
528 [label="param CheckSerializable(SyntaxTree tree) 736649"];
529 [label="var stream = new MemoryStream(); 736650"];
530 [label="var root = tree.GetRoot(); 736651"];
531 [label="var root = tree.GetRoot(); 736652"];
532 [label="root.SerializeTo(stream); 736653"];
533 [label="root.SerializeTo(stream); 736654"];
534 [label="root.SerializeTo(stream); 736655"];
535 [label="stream.Position = 0; 736656"];
536 [label="stream.Position 736657"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 736658"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 736659"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 736660"];
540 [label="return tree; 736661"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 736662"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 736663"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 736664"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 736665"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 736666"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 736667"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 736668"];
548 [label="hasTopLevelStatements 736669"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 736670"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 736671"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 736672"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 736673"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 736674"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 736675"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 736676"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 736677"];
557 [label="return; 736678"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 736679"];
559 [label="var compilation = createCompilationLambda(); 736680"];
560 [label="var compilation = createCompilationLambda(); 736681"];
561 [label="return Guid.NewGuid().ToString('D'); 736682"];
562 [label="var compilation = createCompilationLambda(); 736683"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 736684"];
564 [label="IsNullableEnabled(compilation) 736685"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 736686"];
566 [label="var trees = compilation.SyntaxTrees; 736687"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 736688"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 736689"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 736690"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 736691"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 736692"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 736693"];
573 [label="return compilation; 736694"];
574 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)); 736695"];
575 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)); 736696"];
576 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)); 736697"];
577 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived') 736698"];
578 [label="param Diagnostic(object code) 736699"];
579 [label="param Diagnostic(string squiggledText = null) 736700"];
580 [label="param Diagnostic(object[] arguments = null) 736701"];
581 [label="param Diagnostic(LinePosition? startLocation = null) 736702"];
582 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 736703"];
583 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 736704"];
584 [label="param Diagnostic(bool isSuppressed = false) 736705"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736706"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736707"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736708"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736709"];
589 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736710"];
590 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736711"];
591 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736712"];
592 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 736713"];
593 [label="param Diagnostic(object code) 736714"];
594 [label="param Diagnostic(string squiggledText = null) 736715"];
595 [label="param Diagnostic(object[] arguments = null) 736716"];
596 [label="param Diagnostic(LinePosition? startLocation = null) 736717"];
597 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 736718"];
598 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 736719"];
599 [label="param Diagnostic(bool isSuppressed = false) 736720"];
600 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 736721"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736722"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736723"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736724"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736725"];
605 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736726"];
606 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736727"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736728"];
608 [label="{ } 736729"];
609 [label="None = { } 736730"];
610 [label="null 736731"];
611 [label="Any = null 736732"];
612 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 736733"];
613 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 736734"];
614 [label="param DiagnosticDescription(object code) 736735"];
615 [label="param DiagnosticDescription(bool isWarningAsError) 736736"];
616 [label="param DiagnosticDescription(string squiggledText) 736737"];
617 [label="param DiagnosticDescription(object[] arguments) 736738"];
618 [label="param DiagnosticDescription(LinePosition? startLocation) 736739"];
619 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 736740"];
620 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 736741"];
621 [label="param DiagnosticDescription(Type errorCodeType = null) 736742"];
622 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 736743"];
623 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 736744"];
624 [label="param DiagnosticDescription(bool isSuppressed = false) 736745"];
625 [label="param DiagnosticDescription(this) 736746"];
626 [label="_code 736747"];
627 [label="_isWarningAsError 736748"];
628 [label="_isSuppressed 736749"];
629 [label="_squiggledText 736750"];
630 [label="_arguments 736751"];
631 [label="_startPosition 736752"];
632 [label="_argumentOrderDoesNotMatter 736753"];
633 [label="_errorCodeType 736754"];
634 [label="_ignoreArgumentsWhenComparing 736755"];
635 [label="_defaultSeverityOpt 736756"];
636 [label="_effectiveSeverityOpt 736757"];
637 [label="_syntaxPredicate 736758"];
638 [label="_showPredicate 736759"];
639 [label="_location 736760"];
640 [label="_argumentsAsStrings 736761"];
641 [label="_code 736762"];
642 [label="_isWarningAsError 736763"];
643 [label="_squiggledText 736764"];
644 [label="_arguments 736765"];
645 [label="_startPosition 736766"];
646 [label="_syntaxPredicate 736767"];
647 [label="_argumentOrderDoesNotMatter 736768"];
648 [label="_errorCodeType = errorCodeType ?? code.GetType(); 736769"];
649 [label="_errorCodeType 736770"];
650 [label="_defaultSeverityOpt 736771"];
651 [label="_effectiveSeverityOpt 736772"];
652 [label="_isSuppressed 736773"];
653 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 736774"];
654 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)); 736775"];
655 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()') 736776"];
656 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()') 736777"];
657 [label="param WithArguments(params object[] arguments) 736778"];
658 [label="param WithArguments(this) 736779"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736780"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736781"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736782"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736783"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736784"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736785"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736786"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736787"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736788"];
668 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736789"];
669 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736790"];
670 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 736791"];
671 [label="param DiagnosticDescription(object code) 736792"];
672 [label="param DiagnosticDescription(bool isWarningAsError) 736793"];
673 [label="param DiagnosticDescription(string squiggledText) 736794"];
674 [label="param DiagnosticDescription(object[] arguments) 736795"];
675 [label="param DiagnosticDescription(LinePosition? startLocation) 736796"];
676 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 736797"];
677 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 736798"];
678 [label="param DiagnosticDescription(Type errorCodeType = null) 736799"];
679 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 736800"];
680 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 736801"];
681 [label="param DiagnosticDescription(bool isSuppressed = false) 736802"];
682 [label="param DiagnosticDescription(this) 736803"];
683 [label="_code 736804"];
684 [label="_isWarningAsError 736805"];
685 [label="_isSuppressed 736806"];
686 [label="_squiggledText 736807"];
687 [label="_arguments 736808"];
688 [label="_startPosition 736809"];
689 [label="_argumentOrderDoesNotMatter 736810"];
690 [label="_errorCodeType 736811"];
691 [label="_ignoreArgumentsWhenComparing 736812"];
692 [label="_defaultSeverityOpt 736813"];
693 [label="_effectiveSeverityOpt 736814"];
694 [label="_syntaxPredicate 736815"];
695 [label="_showPredicate 736816"];
696 [label="_location 736817"];
697 [label="_argumentsAsStrings 736818"];
698 [label="_arguments 736819"];
699 [label="_argumentOrderDoesNotMatter 736820"];
700 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)); 736821"];
701 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24) 736822"];
702 [label="param WithLocation(int line) 736823"];
703 [label="param WithLocation(int column) 736824"];
704 [label="param WithLocation(this) 736825"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736826"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736827"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736828"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736829"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736830"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736831"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736832"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736833"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736834"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736835"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736836"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736837"];
717 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736838"];
718 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 736839"];
719 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 736840"];
720 [label="param DiagnosticDescription(object code) 736841"];
721 [label="param DiagnosticDescription(bool isWarningAsError) 736842"];
722 [label="param DiagnosticDescription(string squiggledText) 736843"];
723 [label="param DiagnosticDescription(object[] arguments) 736844"];
724 [label="param DiagnosticDescription(LinePosition? startLocation) 736845"];
725 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 736846"];
726 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 736847"];
727 [label="param DiagnosticDescription(Type errorCodeType = null) 736848"];
728 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 736849"];
729 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 736850"];
730 [label="param DiagnosticDescription(bool isSuppressed = false) 736851"];
731 [label="param DiagnosticDescription(this) 736852"];
732 [label="_code 736853"];
733 [label="_isWarningAsError 736854"];
734 [label="_isSuppressed 736855"];
735 [label="_squiggledText 736856"];
736 [label="_arguments 736857"];
737 [label="_startPosition 736858"];
738 [label="_argumentOrderDoesNotMatter 736859"];
739 [label="_errorCodeType 736860"];
740 [label="_ignoreArgumentsWhenComparing 736861"];
741 [label="_defaultSeverityOpt 736862"];
742 [label="_effectiveSeverityOpt 736863"];
743 [label="_syntaxPredicate 736864"];
744 [label="_showPredicate 736865"];
745 [label="_location 736866"];
746 [label="_argumentsAsStrings 736867"];
747 [label="_startPosition 736868"];
748 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)); 736869"];
749 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)) 736870"];
750 [label="testAssembly.VerifyDiagnostics(\n                // (29,24): error CS0535: 'foo' does not implement interface member 'Iderived.method3()'\n                // class foo : Iderived2, Iderived, Ibase, Ibase2\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'Iderived').WithArguments('foo', 'Iderived.method3()').WithLocation(29, 24)) 736871"];
751 [label="param VerifyDiagnostics(this TCompilation c) 736872"];
752 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 736873"];
753 [label="var diagnostics = c.GetDiagnostics(); 736874"];
754 [label="null 736875"];
755 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 736876"];
756 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 736877"];
757 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 736878"];
758 [label="null 736879"];
759 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 736880"];
760 [label="param Imports(CSharpCompilation compilation) 736881"];
761 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 736882"];
762 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 736883"];
763 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 736884"];
764 [label="param Imports(DiagnosticBag diagnostics) 736885"];
765 [label="param Imports(this) 736886"];
766 [label="_compilation 736887"];
767 [label="_diagnostics 736888"];
768 [label="UsingAliases 736889"];
769 [label="Debug.Assert(usingAliases != null); 736890"];
770 [label="Debug.Assert(usingAliases != null); 736891"];
771 [label="Debug.Assert(!usings.IsDefault); 736892"];
772 [label="Debug.Assert(!externs.IsDefault); 736893"];
773 [label="_compilation 736894"];
774 [label="this.UsingAliases 736895"];
775 [label="this.Usings 736896"];
776 [label="_diagnostics 736897"];
777 [label="this.ExternAliases 736898"];
778 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 736899"];
779 [label="var diagnostics = c.GetDiagnostics(); 736900"];
780 [label="param FromGlobalUsings(CSharpCompilation compilation) 736901"];
781 [label="var usings = compilation.Options.Usings; 736902"];
782 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 736903"];
783 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 736904"];
784 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 736905"];
785 [label="return Empty; 736906"];
786 [label="var diagnostics = c.GetDiagnostics(); 736907"];
787 [label="param Complete(CancellationToken cancellationToken) 736908"];
788 [label="param Complete(this) 736909"];
789 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 736910"];
790 [label="cancellationToken.ThrowIfCancellationRequested(); 736911"];
791 [label="var incompletePart = _state.NextIncompletePart; 736912"];
792 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 736913"];
793 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 736914"];
794 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 736915"];
795 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 736916"];
796 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 736917"];
797 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 736918"];
798 [label="Validate() 736919"];
799 [label="param Validate(this) 736920"];
800 [label="if (this == Empty)\n            {\n                return;\n            } 736921"];
801 [label="return; 736922"];
802 [label="Validate(); 736923"];
803 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 736924"];
804 [label="return; 736925"];
805 [label="param Includes(this BinderFlags self) 736926"];
806 [label="param Includes(BinderFlags other) 736927"];
807 [label="return (self & other) == other; 736928"];
808 [label="var diagnostics = c.GetDiagnostics(); 736929"];
809 [label="0 736930"];
810 [label="ExternalScope = 0 736931"];
811 [label="1 736932"];
812 [label="TopLevelScope = 1 736933"];
813 [label="2 736934"];
814 [label="ValueKindInsignificantBits = 2 736935"];
815 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 736936"];
816 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 736937"];
817 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 736938"];
818 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 736939"];
819 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 736940"];
820 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 736941"];
821 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 736942"];
822 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 736943"];
823 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 736944"];
824 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 736945"];
825 [label="10 736946"];
826 [label="MaxParameterListsForErrorRecovery = 10 736947"];
827 [label="'<>h__TransparentIdentifier' 736948"];
828 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 736949"];
829 [label="s => (MethodSymbol)s 736950"];
830 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 736951"];
831 [label="s => (PropertySymbol)s 736952"];
832 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 736953"];
833 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 736954"];
834 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 736955"];
835 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 736956"];
836 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 736957"];
837 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 736958"];
838 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 736959"];
839 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 736960"];
840 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 736961"];
841 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 736962"];
842 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 736963"];
843 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 736964"];
844 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 736965"];
845 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 736966"];
846 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 736967"];
847 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 736968"];
848 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 736969"];
849 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 736970"];
850 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 736971"];
851 [label="param GetWellKnownTypeMember(WellKnownMember member) 736972"];
852 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 736973"];
853 [label="param GetWellKnownTypeMember(Location location = null) 736974"];
854 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 736975"];
855 [label="param GetWellKnownTypeMember(bool isOptional = false) 736976"];
856 [label="Debug.Assert((syntax != null) ^ (location != null)); 736977"];
857 [label="Debug.Assert((syntax != null) ^ (location != null)); 736978"];
858 [label="Debug.Assert((syntax != null) ^ (location != null)); 736979"];
859 [label="Debug.Assert((syntax != null) ^ (location != null)); 736980"];
860 [label="DiagnosticInfo useSiteDiagnostic; 736981"];
861 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 736982"];
862 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 736983"];
863 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 736984"];
864 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 736985"];
865 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 736986"];
866 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 736987"];
867 [label="param GetWellKnownTypeMember(WellKnownMember member) 736988"];
868 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 736989"];
869 [label="param GetWellKnownTypeMember(bool isOptional = false) 736990"];
870 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 736991"];
871 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 736992"];
872 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 736993"];
873 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 736994"];
874 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 736995"];
875 [label="Debug.Assert(symbol is object); 736996"];
876 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 736997"];
877 [label="isInternal = false; 736998"];
878 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 736999"];
879 [label="symbol = symbol.ContainingType; 737000"];
880 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 737001"];
881 [label="return true; 737002"];
882 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 737003"];
883 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 737004"];
884 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 737005"];
885 [label="Debug.Assert(symbol is object); 737006"];
886 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 737007"];
887 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 737008"];
888 [label="symbol = symbol.ContainingType; 737009"];
889 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 737010"];
890 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 737011"];
891 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 737012"];
892 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 737013"];
893 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 737014"];
894 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 737015"];
895 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 737016"];
896 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 737017"];
897 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 737018"];
898 [label="Debug.Assert(symbol is object); 737019"];
899 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 737020"];
900 [label="isInternal = false; 737021"];
901 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 737022"];
902 [label="symbol = symbol.ContainingType; 737023"];
903 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 737024"];
904 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 737025"];
905 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 737026"];
906 [label="Debug.Assert(symbol is object); 737027"];
907 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 737028"];
908 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 737029"];
909 [label="symbol = symbol.ContainingType; 737030"];
910 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 737031"];
911 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 737032"];
912 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 737033"];
913 [label="return memberSymbol; 737034"];
914 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 737035"];
915 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 737036"];
916 [label="return memberSymbol; 737037"];
917 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 737038"];
918 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 737039"];
919 [label="Debug.Assert(symbol is object); 737040"];
920 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 737041"];
921 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 737042"];
922 [label="symbol = symbol.ContainingType; 737043"];
923 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 737044"];
924 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 737045"];
925 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 737046"];
926 [label="Debug.Assert(symbol is object); 737047"];
927 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 737048"];
928 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 737049"];
929 [label="symbol = symbol.ContainingType; 737050"];
930 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 737051"];
931 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 737052"];
932 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 737053"];
933 [label="return memberSymbol; 737054"];
934 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 737055"];
935 [label="return memberSymbol; 737056"];
936 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 737057"];
937 [label="return memberSymbol; 737058"];
938 [label="return memberSymbol; 737059"];
939 [label="param GetBinder(SyntaxNode node) 737060"];
940 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 737061"];
941 [label="param GetBinder(Symbol memberOpt = null) 737062"];
942 [label="param GetBinder(this) 737063"];
943 [label="int position = node.SpanStart; 737064"];
944 [label="InScript 737065"];
945 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 737066"];
946 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 737067"];
947 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 737068"];
948 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 737069"];
949 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 737070"];
950 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 737071"];
951 [label="node = node.Parent; 737072"];
952 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 737073"];
953 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 737074"];
954 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 737075"];
955 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 737076"];
956 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 737077"];
957 [label="param GetBinder(SyntaxNode node) 737078"];
958 [label="param GetBinder(int position) 737079"];
959 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 737080"];
960 [label="param GetBinder(Symbol memberOpt = null) 737081"];
961 [label="param GetBinder(this) 737082"];
962 [label="Debug.Assert(node != null); 737083"];
963 [label="Debug.Assert(node != null); 737084"];
964 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 737085"];
965 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 737086"];
966 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 737087"];
967 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 737088"];
968 [label="param BinderFactoryVisitor(BinderFactory factory) 737089"];
969 [label="param BinderFactoryVisitor(this) 737090"];
970 [label="param BinderFactoryVisitor(this) 737091"];
971 [label="_position 737092"];
972 [label="_memberDeclarationOpt 737093"];
973 [label="_memberOpt 737094"];
974 [label="_factory 737095"];
975 [label="_factory 737096"];
976 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 737097"];
977 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 737098"];
978 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 737099"];
979 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 737100"];
980 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 737101"];
981 [label="param Initialize(int position) 737102"];
982 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 737103"];
983 [label="param Initialize(Symbol memberOpt) 737104"];
984 [label="param Initialize(this) 737105"];
985 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 737106"];
986 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 737107"];
987 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 737108"];
988 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 737109"];
989 [label="_position 737110"];
990 [label="_memberDeclarationOpt 737111"];
991 [label="_memberOpt 737112"];
992 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 737113"];
993 [label="Binder result = visitor.Visit(node); 737114"];
994 [label="visitor.Visit(node) 737115"];
995 [label="param Visit(SyntaxNode node) 737116"];
996 [label="param Visit(this) 737117"];
997 [label="return VisitCore(node); 737118"];
998 [label="VisitCore(node) 737119"];
999 [label="param VisitCore(SyntaxNode node) 737120"];
1000 [label="param VisitCore(this) 737121"];
1001 [label="return ((CSharpSyntaxNode)node).Accept(this); 737122"];
1002 [label="return ((CSharpSyntaxNode)node).Accept(this); 737123"];
1003 [label="return ((CSharpSyntaxNode)node).Accept(this); 737124"];
1004 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 737125"];
1005 [label="param VisitClassDeclaration(this) 737126"];
1006 [label="return VisitTypeDeclarationCore(node); 737127"];
1007 [label="VisitTypeDeclarationCore(node) 737128"];
1008 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 737129"];
1009 [label="param VisitTypeDeclarationCore(this) 737130"];
1010 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 737131"];
1011 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 737132"];
1012 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 737133"];
1013 [label="NodeUsage extraInfo = NodeUsage.Normal; 737134"];
1014 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 737135"];
1015 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 737136"];
1016 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 737137"];
1017 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 737138"];
1018 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 737139"];
1019 [label="return VisitTypeDeclarationCore(parent, extraInfo); 737140"];
1020 [label="return VisitTypeDeclarationCore(parent, extraInfo); 737141"];
1021 [label="VisitTypeDeclarationCore(parent, extraInfo) 737142"];
1022 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 737143"];
1023 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 737144"];
1024 [label="param VisitTypeDeclarationCore(this) 737145"];
1025 [label="var key = CreateBinderCacheKey(parent, extraInfo); 737146"];
1026 [label="var key = CreateBinderCacheKey(parent, extraInfo); 737147"];
1027 [label="CreateBinderCacheKey(parent, extraInfo) 737148"];
1028 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 737149"];
1029 [label="param CreateBinderCacheKey(NodeUsage usage) 737150"];
1030 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737151"];
1031 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737152"];
1032 [label="return new BinderCacheKey(node, usage); 737153"];
1033 [label="return new BinderCacheKey(node, usage); 737154"];
1034 [label="return new BinderCacheKey(node, usage); 737155"];
1035 [label="new BinderCacheKey(node, usage) 737156"];
1036 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 737157"];
1037 [label="param BinderCacheKey(NodeUsage usage) 737158"];
1038 [label="param BinderCacheKey(this) 737159"];
1039 [label="this.syntaxNode 737160"];
1040 [label="this.usage 737161"];
1041 [label="var key = CreateBinderCacheKey(parent, extraInfo); 737162"];
1042 [label="Binder resultBinder; 737163"];
1043 [label="binderCache 737164"];
1044 [label="get\n                {\n                    return _factory._binderCache;\n                } 737165"];
1045 [label="return _factory._binderCache; 737166"];
1046 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 737167"];
1047 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 737168"];
1048 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 737169"];
1049 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 737170"];
1050 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 737171"];
1051 [label="param GetHashCode(this) 737172"];
1052 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 737173"];
1053 [label="resultBinder = VisitCore(parent.Parent); 737174"];
1054 [label="VisitCore(parent.Parent) 737175"];
1055 [label="param VisitCore(SyntaxNode node) 737176"];
1056 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 737177"];
1057 [label="param VisitCompilationUnit(this) 737178"];
1058 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 737179"];
1059 [label="IsInUsing(parent) 737180"];
1060 [label="param IsInUsing(CSharpSyntaxNode containingNode) 737181"];
1061 [label="param IsInUsing(this) 737182"];
1062 [label="TextSpan containingSpan = containingNode.Span; 737183"];
1063 [label="SyntaxToken token; 737184"];
1064 [label="token 737185"];
1065 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 737186"];
1066 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 737187"];
1067 [label="token = containingNode.FindToken(_position); 737188"];
1068 [label="token = containingNode.FindToken(_position); 737189"];
1069 [label="var node = token.Parent; 737190"];
1070 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 737191"];
1071 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 737192"];
1072 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 737193"];
1073 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 737194"];
1074 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 737195"];
1075 [label="node = node.Parent; 737196"];
1076 [label="return false; 737197"];
1077 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 737198"];
1078 [label="InScript 737199"];
1079 [label="get\n                {\n                    return _factory.InScript;\n                } 737200"];
1080 [label="_factory.InScript 737201"];
1081 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 737202"];
1082 [label="return _factory.InScript; 737203"];
1083 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 737204"];
1084 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 737205"];
1085 [label="param VisitCompilationUnit(bool inUsing) 737206"];
1086 [label="param VisitCompilationUnit(bool inScript) 737207"];
1087 [label="param VisitCompilationUnit(this) 737208"];
1088 [label="syntaxTree 737209"];
1089 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 737210"];
1090 [label="return _factory._syntaxTree; 737211"];
1091 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 737212"];
1092 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 737213"];
1093 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 737214"];
1094 [label="inUsing 737215"];
1095 [label="inScript 737216"];
1096 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 737217"];
1097 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 737218"];
1098 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 737219"];
1099 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 737220"];
1100 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 737221"];
1101 [label="param CreateBinderCacheKey(NodeUsage usage) 737222"];
1102 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737223"];
1103 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737224"];
1104 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 737225"];
1105 [label="Binder result; 737226"];
1106 [label="binderCache 737227"];
1107 [label="get\n                {\n                    return _factory._binderCache;\n                } 737228"];
1108 [label="return _factory._binderCache; 737229"];
1109 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 737230"];
1110 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 737231"];
1111 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 737232"];
1112 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 737233"];
1113 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 737234"];
1114 [label="this.buckStopsHereBinder 737235"];
1115 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 737236"];
1116 [label="return _factory._buckStopsHereBinder; 737237"];
1117 [label="result = this.buckStopsHereBinder; 737238"];
1118 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 737239"];
1119 [label="compilation 737240"];
1120 [label="get\n                {\n                    return _factory._compilation;\n                } 737241"];
1121 [label="return _factory._compilation; 737242"];
1122 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 737243"];
1123 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 737244"];
1124 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 737245"];
1125 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 737246"];
1126 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 737247"];
1127 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 737248"];
1128 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 737249"];
1129 [label="param InContainerBinder(Binder next) 737250"];
1130 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 737251"];
1131 [label="param InContainerBinder(bool inUsing) 737252"];
1132 [label="param InContainerBinder(this) 737253"];
1133 [label="next 737254"];
1134 [label="param InContainerBinder(this) 737255"];
1135 [label="param Binder(Binder next) 737256"];
1136 [label="param Binder(this) 737257"];
1137 [label="param Binder(Conversions? conversions = null) 737258"];
1138 [label="internal CSharpCompilation Compilation { get; } 737259"];
1139 [label="Flags 737260"];
1140 [label="protected internal Binder? Next { get; } 737261"];
1141 [label="_lazyConversions 737262"];
1142 [label="_lazyOverloadResolution 737263"];
1143 [label="RoslynDebug.Assert(next != null); 737264"];
1144 [label="RoslynDebug.Assert(next != null); 737265"];
1145 [label="Next 737266"];
1146 [label="this.Flags 737267"];
1147 [label="this.Compilation 737268"];
1148 [label="_lazyConversions 737269"];
1149 [label="_container 737270"];
1150 [label="_computeImports 737271"];
1151 [label="_lazyImports 737272"];
1152 [label="_lazyImportChain 737273"];
1153 [label="_lazyQuickAttributeChecker 737274"];
1154 [label="Debug.Assert((object)container != null); 737275"];
1155 [label="Debug.Assert((object)container != null); 737276"];
1156 [label="Debug.Assert(declarationSyntax != null); 737277"];
1157 [label="Debug.Assert(declarationSyntax != null); 737278"];
1158 [label="_container 737279"];
1159 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 737280"];
1160 [label="_computeImports 737281"];
1161 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 737282"];
1162 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 737283"];
1163 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 737284"];
1164 [label="_usingsSyntax 737285"];
1165 [label="compilation 737286"];
1166 [label="get\n                {\n                    return _factory._compilation;\n                } 737287"];
1167 [label="return _factory._compilation; 737288"];
1168 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 737289"];
1169 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 737290"];
1170 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 737291"];
1171 [label="binderCache 737292"];
1172 [label="return _factory._binderCache; 737293"];
1173 [label="binderCache.TryAdd(key, result); 737294"];
1174 [label="binderCache.TryAdd(key, result); 737295"];
1175 [label="binderCache.TryAdd(key, result); 737296"];
1176 [label="binderCache.TryAdd(key, result); 737297"];
1177 [label="binderCache.TryAdd(key, result); 737298"];
1178 [label="param Equals(BinderCacheKey other) 737299"];
1179 [label="param Equals(this) 737300"];
1180 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 737301"];
1181 [label="return result; 737302"];
1182 [label="return ((CSharpSyntaxNode)node).Accept(this); 737303"];
1183 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 737304"];
1184 [label="resultBinder.ContainingMemberOrLambda 737305"];
1185 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 737306"];
1186 [label="var merged = _container as MergedNamespaceSymbol; 737307"];
1187 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 737308"];
1188 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 737309"];
1189 [label="((object)merged != null) 737310"];
1190 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 737311"];
1191 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 737312"];
1192 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 737313"];
1193 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 737314"];
1194 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 737315"];
1195 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 737316"];
1196 [label="new InContainerBinder(typeSymbol, resultBinder) 737317"];
1197 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 737318"];
1198 [label="param InContainerBinder(Binder next) 737319"];
1199 [label="param InContainerBinder(Imports imports = null) 737320"];
1200 [label="param InContainerBinder(this) 737321"];
1201 [label="next 737322"];
1202 [label="param InContainerBinder(this) 737323"];
1203 [label="param Binder(Binder next) 737324"];
1204 [label="param Binder(this) 737325"];
1205 [label="param Binder(Conversions? conversions = null) 737326"];
1206 [label="internal CSharpCompilation Compilation { get; } 737327"];
1207 [label="Flags 737328"];
1208 [label="protected internal Binder? Next { get; } 737329"];
1209 [label="_lazyConversions 737330"];
1210 [label="_lazyOverloadResolution 737331"];
1211 [label="RoslynDebug.Assert(next != null); 737332"];
1212 [label="RoslynDebug.Assert(next != null); 737333"];
1213 [label="this.Flags 737334"];
1214 [label="this.Compilation 737335"];
1215 [label="_lazyConversions 737336"];
1216 [label="_container 737337"];
1217 [label="_computeImports 737338"];
1218 [label="_lazyImports 737339"];
1219 [label="_lazyImportChain 737340"];
1220 [label="_lazyQuickAttributeChecker 737341"];
1221 [label="Debug.Assert((object)container != null || imports != null); 737342"];
1222 [label="Debug.Assert((object)container != null || imports != null); 737343"];
1223 [label="_container 737344"];
1224 [label="_lazyImports = imports ?? Imports.Empty; 737345"];
1225 [label="_lazyImports = imports ?? Imports.Empty; 737346"];
1226 [label="_lazyImports 737347"];
1227 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 737348"];
1228 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 737349"];
1229 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 737350"];
1230 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 737351"];
1231 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 737352"];
1232 [label="param WithUnsafeRegionIfNecessary(this) 737353"];
1233 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 737354"];
1234 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 737355"];
1235 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 737356"];
1236 [label="param Includes(this BinderFlags self) 737357"];
1237 [label="param Includes(BinderFlags other) 737358"];
1238 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 737359"];
1239 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 737360"];
1240 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 737361"];
1241 [label="binderCache 737362"];
1242 [label="return _factory._binderCache; 737363"];
1243 [label="binderCache.TryAdd(key, resultBinder); 737364"];
1244 [label="binderCache.TryAdd(key, resultBinder); 737365"];
1245 [label="binderCache.TryAdd(key, resultBinder); 737366"];
1246 [label="binderCache.TryAdd(key, resultBinder); 737367"];
1247 [label="binderCache.TryAdd(key, resultBinder); 737368"];
1248 [label="return resultBinder; 737369"];
1249 [label="return ((CSharpSyntaxNode)node).Accept(this); 737370"];
1250 [label="_binderFactoryVisitorPool.Free(visitor); 737371"];
1251 [label="_binderFactoryVisitorPool.Free(visitor); 737372"];
1252 [label="return result; 737373"];
1253 [label="var diagnostics = c.GetDiagnostics(); 737374"];
1254 [label="Debug.Assert(node != null); 737375"];
1255 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 737376"];
1256 [label="container.AssertMemberExposure(memberOpt); 737377"];
1257 [label="container.AssertMemberExposure(memberOpt); 737378"];
1258 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 737379"];
1259 [label="param VisitMethodDeclaration(this) 737380"];
1260 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 737381"];
1261 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 737382"];
1262 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 737383"];
1263 [label="NodeUsage usage; 737384"];
1264 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 737385"];
1265 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 737386"];
1266 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 737387"];
1267 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 737388"];
1268 [label="usage = NodeUsage.Normal; 737389"];
1269 [label="var key = CreateBinderCacheKey(methodDecl, usage); 737390"];
1270 [label="var key = CreateBinderCacheKey(methodDecl, usage); 737391"];
1271 [label="CreateBinderCacheKey(methodDecl, usage) 737392"];
1272 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 737393"];
1273 [label="param CreateBinderCacheKey(NodeUsage usage) 737394"];
1274 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737395"];
1275 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737396"];
1276 [label="return new BinderCacheKey(node, usage); 737397"];
1277 [label="new BinderCacheKey(node, usage) 737398"];
1278 [label="param BinderCacheKey(this) 737399"];
1279 [label="var key = CreateBinderCacheKey(methodDecl, usage); 737400"];
1280 [label="Binder resultBinder; 737401"];
1281 [label="binderCache 737402"];
1282 [label="get\n                {\n                    return _factory._binderCache;\n                } 737403"];
1283 [label="return _factory._binderCache; 737404"];
1284 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 737405"];
1285 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 737406"];
1286 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 737407"];
1287 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 737408"];
1288 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 737409"];
1289 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 737410"];
1290 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 737411"];
1291 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 737412"];
1292 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 737413"];
1293 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 737414"];
1294 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 737415"];
1295 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 737416"];
1296 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 737417"];
1297 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737418"];
1298 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 737419"];
1299 [label="SourceMemberMethodSymbol method = null; 737420"];
1300 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 737421"];
1301 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 737422"];
1302 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 737423"];
1303 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 737424"];
1304 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 737425"];
1305 [label="param WithUnsafeRegionIfNecessary(this) 737426"];
1306 [label="binderCache 737427"];
1307 [label="return _factory._binderCache; 737428"];
1308 [label="binderCache.TryAdd(key, resultBinder); 737429"];
1309 [label="binderCache.TryAdd(key, resultBinder); 737430"];
1310 [label="binderCache.TryAdd(key, resultBinder); 737431"];
1311 [label="binderCache.TryAdd(key, resultBinder); 737432"];
1312 [label="return resultBinder; 737433"];
1313 [label="return ((CSharpSyntaxNode)node).Accept(this); 737434"];
1314 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 737435"];
1315 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 737436"];
1316 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 737437"];
1317 [label="Debug.Assert((object)containing != null); 737438"];
1318 [label="Debug.Assert((object)containing != null); 737439"];
1319 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 737440"];
1320 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 737441"];
1321 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 737442"];
1322 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 737443"];
1323 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 737444"];
1324 [label="param BinderWithContainingMemberOrLambda(Binder next) 737445"];
1325 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 737446"];
1326 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 737447"];
1327 [label="param BinderWithContainingMemberOrLambda(this) 737448"];
1328 [label="next 737449"];
1329 [label="flags 737450"];
1330 [label="param BinderWithContainingMemberOrLambda(this) 737451"];
1331 [label="param Binder(Binder next) 737452"];
1332 [label="param Binder(BinderFlags flags) 737453"];
1333 [label="param Binder(this) 737454"];
1334 [label="internal CSharpCompilation Compilation { get; } 737455"];
1335 [label="Flags 737456"];
1336 [label="protected internal Binder? Next { get; } 737457"];
1337 [label="_lazyConversions 737458"];
1338 [label="_lazyOverloadResolution 737459"];
1339 [label="RoslynDebug.Assert(next != null); 737460"];
1340 [label="RoslynDebug.Assert(next != null); 737461"];
1341 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 737462"];
1342 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 737463"];
1343 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 737464"];
1344 [label="param Includes(this BinderFlags self) 737465"];
1345 [label="param Includes(BinderFlags other) 737466"];
1346 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 737467"];
1347 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 737468"];
1348 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 737469"];
1349 [label="param Includes(this BinderFlags self) 737470"];
1350 [label="param Includes(BinderFlags other) 737471"];
1351 [label="Next 737472"];
1352 [label="this.Flags 737473"];
1353 [label="this.Compilation 737474"];
1354 [label="_containingMemberOrLambda 737475"];
1355 [label="Debug.Assert(containingMemberOrLambda != null); 737476"];
1356 [label="Debug.Assert(containingMemberOrLambda != null); 737477"];
1357 [label="_containingMemberOrLambda 737478"];
1358 [label="var diagnostics = c.GetDiagnostics(); 737479"];
1359 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 737480"];
1360 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 737481"];
1361 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 737482"];
1362 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 737483"];
1363 [label="param ValidateParameterNameConflicts(this) 737484"];
1364 [label="PooledHashSet<string>? tpNames = null; 737485"];
1365 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 737486"];
1366 [label="PooledHashSet<string>? pNames = null; 737487"];
1367 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 737488"];
1368 [label="tpNames?.Free(); 737489"];
1369 [label="pNames?.Free(); 737490"];
1370 [label="param BindType(ExpressionSyntax syntax) 737491"];
1371 [label="param BindType(DiagnosticBag diagnostics) 737492"];
1372 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 737493"];
1373 [label="param BindType(bool suppressUseSiteDiagnostics = false) 737494"];
1374 [label="param BindType(this) 737495"];
1375 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 737496"];
1376 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 737497"];
1377 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 737498"];
1378 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 737499"];
1379 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 737500"];
1380 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 737501"];
1381 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 737502"];
1382 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 737503"];
1383 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 737504"];
1384 [label="param BindTypeOrAlias(this) 737505"];
1385 [label="Debug.Assert(diagnostics != null); 737506"];
1386 [label="Debug.Assert(diagnostics != null); 737507"];
1387 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 737508"];
1388 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 737509"];
1389 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 737510"];
1390 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 737511"];
1391 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 737512"];
1392 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 737513"];
1393 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 737514"];
1394 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 737515"];
1395 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 737516"];
1396 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 737517"];
1397 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 737518"];
1398 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 737519"];
1399 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 737520"];
1400 [label="return bindPredefined(syntax, diagnostics); 737521"];
1401 [label="return bindPredefined(syntax, diagnostics); 737522"];
1402 [label="bindPredefined(syntax, diagnostics) 737523"];
1403 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 737524"];
1404 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 737525"];
1405 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 737526"];
1406 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 737527"];
1407 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 737528"];
1408 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 737529"];
1409 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 737530"];
1410 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 737531"];
1411 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 737532"];
1412 [label="param BindPredefinedTypeSymbol(this) 737533"];
1413 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 737534"];
1414 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 737535"];
1415 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 737536"];
1416 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 737537"];
1417 [label="param GetSpecialType(SpecialType typeId) 737538"];
1418 [label="param GetSpecialType(DiagnosticBag diagnostics) 737539"];
1419 [label="param GetSpecialType(SyntaxNode node) 737540"];
1420 [label="param GetSpecialType(this) 737541"];
1421 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 737542"];
1422 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 737543"];
1423 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 737544"];
1424 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 737545"];
1425 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 737546"];
1426 [label="param GetSpecialType(CSharpCompilation compilation) 737547"];
1427 [label="param GetSpecialType(SpecialType typeId) 737548"];
1428 [label="param GetSpecialType(SyntaxNode node) 737549"];
1429 [label="param GetSpecialType(DiagnosticBag diagnostics) 737550"];
1430 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 737551"];
1431 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 737552"];
1432 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 737553"];
1433 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 737554"];
1434 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 737555"];
1435 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 737556"];
1436 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 737557"];
1437 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 737558"];
1438 [label="param ReportUseSiteDiagnostics(Symbol symbol) 737559"];
1439 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 737560"];
1440 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 737561"];
1441 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 737562"];
1442 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 737563"];
1443 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 737564"];
1444 [label="return typeSymbol; 737565"];
1445 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 737566"];
1446 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 737567"];
1447 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 737568"];
1448 [label="param AreNullableAnnotationsEnabled(this) 737569"];
1449 [label="RoslynDebug.Assert(token.SyntaxTree is object); 737570"];
1450 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 737571"];
1451 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 737572"];
1452 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 737573"];
1453 [label="param AreNullableAnnotationsEnabled(int position) 737574"];
1454 [label="param AreNullableAnnotationsEnabled(this) 737575"];
1455 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 737576"];
1456 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 737577"];
1457 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 737578"];
1458 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 737579"];
1459 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 737580"];
1460 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 737581"];
1461 [label="AreNullableAnnotationsGloballyEnabled() 737582"];
1462 [label="param AreNullableAnnotationsGloballyEnabled(this) 737583"];
1463 [label="RoslynDebug.Assert(Next is object); 737584"];
1464 [label="Next.AreNullableAnnotationsGloballyEnabled() 737585"];
1465 [label="param AreNullableAnnotationsGloballyEnabled(this) 737586"];
1466 [label="param AreNullableAnnotationsGloballyEnabled(this) 737587"];
1467 [label="GetGlobalAnnotationState() 737588"];
1468 [label="param GetGlobalAnnotationState(this) 737589"];
1469 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 737590"];
1470 [label="return false; 737591"];
1471 [label="return GetGlobalAnnotationState(); 737592"];
1472 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 737593"];
1473 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 737594"];
1474 [label="type 737595"];
1475 [label="param operator(TypeWithAnnotations typeWithAnnotations) 737596"];
1476 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 737597"];
1477 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 737598"];
1478 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 737599"];
1479 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 737600"];
1480 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 737601"];
1481 [label="Debug.Assert(typeWithAnnotations.HasType); 737602"];
1482 [label="_typeWithAnnotations 737603"];
1483 [label="_symbol = null; 737604"];
1484 [label="_symbol 737605"];
1485 [label="_isNullableEnabled = false; 737606"];
1486 [label="_isNullableEnabled 737607"];
1487 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 737608"];
1488 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 737609"];
1489 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 737610"];
1490 [label="symbol.IsType 737611"];
1491 [label="=> !_typeWithAnnotations.IsDefault 737612"];
1492 [label="!_typeWithAnnotations.IsDefault 737613"];
1493 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 737614"];
1494 [label="symbol.IsType 737615"];
1495 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 737616"];
1496 [label="symbol.TypeWithAnnotations 737617"];
1497 [label="=> _typeWithAnnotations 737618"];
1498 [label="_typeWithAnnotations 737619"];
1499 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 737620"];
1500 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 737621"];
1501 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 737622"];
1502 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 737623"];
1503 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 737624"];
1504 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 737625"];
1505 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 737626"];
1506 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 737627"];
1507 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 737628"];
1508 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 737629"];
1509 [label="param ReportDiagnosticsIfObsolete(this) 737630"];
1510 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 737631"];
1511 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 737632"];
1512 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 737633"];
1513 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 737634"];
1514 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 737635"];
1515 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 737636"];
1516 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 737637"];
1517 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 737638"];
1518 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 737639"];
1519 [label="param ReportDiagnosticsIfObsolete(this) 737640"];
1520 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 737641"];
1521 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737642"];
1522 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737643"];
1523 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737644"];
1524 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737645"];
1525 [label="this.ContainingMemberOrLambda 737646"];
1526 [label="get { return _containingMemberOrLambda; } 737647"];
1527 [label="return _containingMemberOrLambda; 737648"];
1528 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737649"];
1529 [label="this.ContainingType 737650"];
1530 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 737651"];
1531 [label="this.ContainingMemberOrLambda 737652"];
1532 [label="get { return _containingMemberOrLambda; } 737653"];
1533 [label="return _containingMemberOrLambda; 737654"];
1534 [label="var member = this.ContainingMemberOrLambda; 737655"];
1535 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 737656"];
1536 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 737657"];
1537 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 737658"];
1538 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 737659"];
1539 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737660"];
1540 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737661"];
1541 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 737662"];
1542 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 737663"];
1543 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 737664"];
1544 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 737665"];
1545 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 737666"];
1546 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 737667"];
1547 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 737668"];
1548 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 737669"];
1549 [label="RoslynDebug.Assert(symbol is object); 737670"];
1550 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 737671"];
1551 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 737672"];
1552 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 737673"];
1553 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 737674"];
1554 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 737675"];
1555 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 737676"];
1556 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 737677"];
1557 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 737678"];
1558 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 737679"];
1559 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 737680"];
1560 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 737681"];
1561 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 737682"];
1562 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 737683"];
1563 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 737684"];
1564 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 737685"];
1565 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 737686"];
1566 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 737687"];
1567 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 737688"];
1568 [label="RoslynDebug.Assert(diagnostics != null); 737689"];
1569 [label="RoslynDebug.Assert(diagnostics != null); 737690"];
1570 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 737691"];
1571 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 737692"];
1572 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 737693"];
1573 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 737694"];
1574 [label="DiagnosticInfo? info = null; 737695"];
1575 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 737696"];
1576 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 737697"];
1577 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 737698"];
1578 [label="return kind; 737699"];
1579 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 737700"];
1580 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 737701"];
1581 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 737702"];
1582 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 737703"];
1583 [label="return symbol; 737704"];
1584 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 737705"];
1585 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 737706"];
1586 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 737707"];
1587 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 737708"];
1588 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 737709"];
1589 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 737710"];
1590 [label="param UnwrapAlias(DiagnosticBag diagnostics) 737711"];
1591 [label="param UnwrapAlias(SyntaxNode syntax) 737712"];
1592 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 737713"];
1593 [label="param UnwrapAlias(this) 737714"];
1594 [label="symbol.IsAlias 737715"];
1595 [label="=> _symbol?.Kind == SymbolKind.Alias 737716"];
1596 [label="_symbol 737717"];
1597 [label="_symbol?.Kind == SymbolKind.Alias 737718"];
1598 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 737719"];
1599 [label="return symbol; 737720"];
1600 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 737721"];
1601 [label="=> _typeWithAnnotations 737722"];
1602 [label="_typeWithAnnotations 737723"];
1603 [label="var diagnostics = c.GetDiagnostics(); 737724"];
1604 [label="param TypeConversions(AssemblySymbol corLibrary) 737725"];
1605 [label="param TypeConversions(bool includeNullability = false) 737726"];
1606 [label="param TypeConversions(this) 737727"];
1607 [label="corLibrary 737728"];
1608 [label="0 737729"];
1609 [label="includeNullability 737730"];
1610 [label="null 737731"];
1611 [label="param TypeConversions(this) 737732"];
1612 [label="param TypeConversions(AssemblySymbol corLibrary) 737733"];
1613 [label="param TypeConversions(int currentRecursionDepth) 737734"];
1614 [label="param TypeConversions(bool includeNullability) 737735"];
1615 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 737736"];
1616 [label="param TypeConversions(this) 737737"];
1617 [label="corLibrary 737738"];
1618 [label="currentRecursionDepth 737739"];
1619 [label="includeNullability 737740"];
1620 [label="otherNullabilityOpt 737741"];
1621 [label="param TypeConversions(this) 737742"];
1622 [label="param ConversionsBase(AssemblySymbol corLibrary) 737743"];
1623 [label="param ConversionsBase(int currentRecursionDepth) 737744"];
1624 [label="param ConversionsBase(bool includeNullability) 737745"];
1625 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 737746"];
1626 [label="param ConversionsBase(this) 737747"];
1627 [label="corLibrary 737748"];
1628 [label="currentRecursionDepth 737749"];
1629 [label="IncludeNullability 737750"];
1630 [label="_lazyOtherNullability 737751"];
1631 [label="Debug.Assert((object)corLibrary != null); 737752"];
1632 [label="Debug.Assert((object)corLibrary != null); 737753"];
1633 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 737754"];
1634 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 737755"];
1635 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 737756"];
1636 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 737757"];
1637 [label="this.corLibrary 737758"];
1638 [label="this.currentRecursionDepth 737759"];
1639 [label="IncludeNullability 737760"];
1640 [label="_lazyOtherNullability 737761"];
1641 [label="var diagnostics = c.GetDiagnostics(); 737762"];
1642 [label="diagnostics.Verify(expected); 737763"];
1643 [label="diagnostics.Verify(expected); 737764"];
1644 [label="diagnostics.Verify(expected) 737765"];
1645 [label="param Verify(this ImmutableArray<Diagnostic> actual) 737766"];
1646 [label="param Verify(params DiagnosticDescription[] expected) 737767"];
1647 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 737768"];
1648 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 737769"];
1649 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 737770"];
1650 [label="param Verify(this IEnumerable<Diagnostic> actual) 737771"];
1651 [label="param Verify(params DiagnosticDescription[] expected) 737772"];
1652 [label="Verify(actual, expected, errorCodeOnly: false); 737773"];
1653 [label="Verify(actual, expected, errorCodeOnly: false); 737774"];
1654 [label="Verify(actual, expected, errorCodeOnly: false); 737775"];
1655 [label="Verify(actual, expected, errorCodeOnly: false) 737776"];
1656 [label="param Verify(IEnumerable<Diagnostic> actual) 737777"];
1657 [label="param Verify(DiagnosticDescription[] expected) 737778"];
1658 [label="param Verify(bool errorCodeOnly) 737779"];
1659 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 737780"];
1660 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 737781"];
1661 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 737782"];
1662 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 737783"];
1663 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 737784"];
1664 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 737785"];
1665 [label="=> _defaultSeverityOpt 737786"];
1666 [label="_defaultSeverityOpt 737787"];
1667 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 737788"];
1668 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 737789"];
1669 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 737790"];
1670 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 737791"];
1671 [label="=> _effectiveSeverityOpt 737792"];
1672 [label="_effectiveSeverityOpt 737793"];
1673 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 737794"];
1674 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 737795"];
1675 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 737796"];
1676 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 737797"];
1677 [label="param DiagnosticDescription(Diagnostic d) 737798"];
1678 [label="param DiagnosticDescription(bool errorCodeOnly) 737799"];
1679 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 737800"];
1680 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 737801"];
1681 [label="param DiagnosticDescription(this) 737802"];
1682 [label="_code 737803"];
1683 [label="_isWarningAsError 737804"];
1684 [label="_isSuppressed 737805"];
1685 [label="_squiggledText 737806"];
1686 [label="_arguments 737807"];
1687 [label="_startPosition 737808"];
1688 [label="_argumentOrderDoesNotMatter 737809"];
1689 [label="_errorCodeType 737810"];
1690 [label="_defaultSeverityOpt 737811"];
1691 [label="_effectiveSeverityOpt 737812"];
1692 [label="_syntaxPredicate 737813"];
1693 [label="_code 737814"];
1694 [label="_isWarningAsError 737815"];
1695 [label="_isSuppressed 737816"];
1696 [label="_location 737817"];
1697 [label="includeDefaultSeverity 737818"];
1698 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 737819"];
1699 [label="_defaultSeverityOpt 737820"];
1700 [label="includeEffectiveSeverity 737821"];
1701 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 737822"];
1702 [label="_effectiveSeverityOpt 737823"];
1703 [label="DiagnosticWithInfo dinfo = null; 737824"];
1704 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 737825"];
1705 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 737826"];
1706 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 737827"];
1707 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 737828"];
1708 [label="dinfo = d as DiagnosticWithInfo; 737829"];
1709 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 737830"];
1710 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 737831"];
1711 [label="_errorCodeType 737832"];
1712 [label="_code 737833"];
1713 [label="_ignoreArgumentsWhenComparing 737834"];
1714 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 737835"];
1715 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 737836"];
1716 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 737837"];
1717 [label="_squiggledText 737838"];
1718 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 737839"];
1719 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 737840"];
1720 [label="_arguments 737841"];
1721 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 737842"];
1722 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 737843"];
1723 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 737844"];
1724 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 737845"];
1725 [label="_startPosition 737846"];
1726 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 737847"];
1727 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 737848"];
1728 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 737849"];
1729 [label="int index = unmatched.IndexOf(d); 737850"];
1730 [label="int index = unmatched.IndexOf(d); 737851"];
1731 [label="param Equals(object obj) 737852"];
1732 [label="param Equals(this) 737853"];
1733 [label="var d = obj as DiagnosticDescription; 737854"];
1734 [label="if (d == null)\n                return false; 737855"];
1735 [label="if (d == null)\n                return false; 737856"];
1736 [label="if (!_code.Equals(d._code))\n                return false; 737857"];
1737 [label="if (!_code.Equals(d._code))\n                return false; 737858"];
1738 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 737859"];
1739 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 737860"];
1740 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 737861"];
1741 [label="if (_squiggledText != d._squiggledText)\n                    return false; 737862"];
1742 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 737863"];
1743 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 737864"];
1744 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 737865"];
1745 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 737866"];
1746 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 737867"];
1747 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 737868"];
1748 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 737869"];
1749 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 737870"];
1750 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 737871"];
1751 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 737872"];
1752 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 737873"];
1753 [label="if (d._arguments == null)\n                    return false; 737874"];
1754 [label="GetArgumentsAsStrings() 737875"];
1755 [label="param GetArgumentsAsStrings(this) 737876"];
1756 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 737877"];
1757 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 737878"];
1758 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 737879"];
1759 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 737880"];
1760 [label="_argumentsAsStrings 737881"];
1761 [label="return _argumentsAsStrings; 737882"];
1762 [label="var args1 = GetArgumentsAsStrings(); 737883"];
1763 [label="d.GetArgumentsAsStrings() 737884"];
1764 [label="param GetArgumentsAsStrings(this) 737885"];
1765 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 737886"];
1766 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 737887"];
1767 [label="return _argumentsAsStrings; 737888"];
1768 [label="var args2 = d.GetArgumentsAsStrings(); 737889"];
1769 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 737890"];
1770 [label="if (!args1.SequenceEqual(args2))\n                        return false; 737891"];
1771 [label="if (!args1.SequenceEqual(args2))\n                        return false; 737892"];
1772 [label="if (!args1.SequenceEqual(args2))\n                        return false; 737893"];
1773 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 737894"];
1774 [label="return true; 737895"];
1775 [label="int index = unmatched.IndexOf(d); 737896"];
1776 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 737897"];
1777 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 737898"];
1778 [label="unmatched.RemoveAt(index); 737899"];
1779 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 737900"];
1780 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 737901"];
1781 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 737902"];
1782 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 737903"];
1783 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 737904"];
1784 [label="DiagnosticDescription.GetAssertText(expected, actual) 737905"];
1785 [label="param GetAssertText(DiagnosticDescription[] expected) 737906"];
1786 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 737907"];
1787 [label="const int CSharp = 1; 737908"];
1788 [label="const int VisualBasic = 2; 737909"];
1789 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 737910"];
1790 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 737911"];
1791 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 737912"];
1792 [label="actual.Any() && actual.First() is CSDiagnostic 737913"];
1793 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 737914"];
1794 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 737915"];
1795 [label="int indentDepth = (language == CSharp) ? 4 : 1; 737916"];
1796 [label="(language == CSharp) 737917"];
1797 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 737918"];
1798 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 737919"];
1799 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 737920"];
1800 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 737921"];
1801 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 737922"];
1802 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 737923"];
1803 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 737924"];
1804 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 737925"];
1805 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 737926"];
1806 [label="IsSortedOrEmpty(expected) 737927"];
1807 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 737928"];
1808 [label="new LinePositionComparer() 737929"];
1809 [label="param LinePositionComparer(this) 737930"];
1810 [label="Instance = new LinePositionComparer() 737931"];
1811 [label="var comparer = LinePositionComparer.Instance; 737932"];
1812 [label="DiagnosticDescription last = null; 737933"];
1813 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 737934"];
1814 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 737935"];
1815 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 737936"];
1816 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 737937"];
1817 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 737938"];
1818 [label="last = diagnostic; 737939"];
1819 [label="return true; 737940"];
1820 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 737941"];
1821 [label="actual = Sort(actual); 737942"];
1822 [label="Sort(actual) 737943"];
1823 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 737944"];
1824 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 737945"];
1825 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 737946"];
1826 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 737947"];
1827 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 737948"];
1828 [label="var assertText = new StringBuilder(); 737949"];
1829 [label="assertText.AppendLine(); 737950"];
1830 [label="int i; 737951"];
1831 [label="assertText.AppendLine('Expected:'); 737952"];
1832 [label="assertText.AppendLine('Expected:'); 737953"];
1833 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 737954"];
1834 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 737955"];
1835 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 737956"];
1836 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 737957"];
1837 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 737958"];
1838 [label="GetDiagnosticDescription(d, indentDepth) 737959"];
1839 [label="param GetDiagnosticDescription(DiagnosticDescription d) 737960"];
1840 [label="param GetDiagnosticDescription(int indentDepth) 737961"];
1841 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 737962"];
1842 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 737963"];
1843 [label="d.ToString() 737964"];
1844 [label="param ToString(this) 737965"];
1845 [label="var sb = new StringBuilder(); 737966"];
1846 [label="sb.Append('Diagnostic('); 737967"];
1847 [label="sb.Append('Diagnostic('); 737968"];
1848 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 737969"];
1849 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 737970"];
1850 [label="sb.Append(_errorCodeType.Name); 737971"];
1851 [label="sb.Append(_errorCodeType.Name); 737972"];
1852 [label="sb.Append('.'); 737973"];
1853 [label="sb.Append('.'); 737974"];
1854 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 737975"];
1855 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 737976"];
1856 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 737977"];
1857 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 737978"];
1858 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 737979"];
1859 [label="sb.Append(', \\''); 737980"];
1860 [label="sb.Append(', \\''); 737981"];
1861 [label="sb.Append(_squiggledText); 737982"];
1862 [label="sb.Append(_squiggledText); 737983"];
1863 [label="sb.Append('''); 737984"];
1864 [label="sb.Append('''); 737985"];
1865 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 737986"];
1866 [label="sb.Append(')'); 737987"];
1867 [label="sb.Append(')'); 737988"];
1868 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 737989"];
1869 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 737990"];
1870 [label="sb.Append('.WithArguments('); 737991"];
1871 [label="sb.Append('.WithArguments('); 737992"];
1872 [label="GetArgumentsAsStrings() 737993"];
1873 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 737994"];
1874 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 737995"];
1875 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 737996"];
1876 [label="sb.Append('\\''); 737997"];
1877 [label="sb.Append('\\''); 737998"];
1878 [label="sb.Append(argumentStrings.Current); 737999"];
1879 [label="sb.Append(argumentStrings.Current); 738000"];
1880 [label="sb.Append('\\''); 738001"];
1881 [label="sb.Append('\\''); 738002"];
1882 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 738003"];
1883 [label="sb.Append(', '); 738004"];
1884 [label="sb.Append(', '); 738005"];
1885 [label="sb.Append(')'); 738006"];
1886 [label="sb.Append(')'); 738007"];
1887 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 738008"];
1888 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 738009"];
1889 [label="sb.Append('.WithLocation('); 738010"];
1890 [label="sb.Append('.WithLocation('); 738011"];
1891 [label="sb.Append(_startPosition.Value.Line + 1); 738012"];
1892 [label="sb.Append(_startPosition.Value.Line + 1); 738013"];
1893 [label="sb.Append(', '); 738014"];
1894 [label="sb.Append(', '); 738015"];
1895 [label="sb.Append(_startPosition.Value.Character + 1); 738016"];
1896 [label="sb.Append(_startPosition.Value.Character + 1); 738017"];
1897 [label="sb.Append(')'); 738018"];
1898 [label="sb.Append(')'); 738019"];
1899 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 738020"];
1900 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 738021"];
1901 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 738022"];
1902 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 738023"];
1903 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 738024"];
1904 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 738025"];
1905 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 738026"];
1906 [label="return sb.ToString(); 738027"];
1907 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738028"];
1908 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738029"];
1909 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 738030"];
1910 [label="GetCommaSeparatedLines(assertText, expectedText); 738031"];
1911 [label="GetCommaSeparatedLines(assertText, expectedText); 738032"];
1912 [label="GetCommaSeparatedLines(assertText, expectedText) 738033"];
1913 [label="param GetCommaSeparatedLines(StringBuilder sb) 738034"];
1914 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 738035"];
1915 [label="int n = lines.Count; 738036"];
1916 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 738037"];
1917 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 738038"];
1918 [label="sb.Append(lines[i]); 738039"];
1919 [label="sb.Append(lines[i]); 738040"];
1920 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 738041"];
1921 [label="sb.AppendLine(); 738042"];
1922 [label="GetCommaSeparatedLines(assertText, expectedText); 738043"];
1923 [label="assertText.AppendLine('Actual:'); 738044"];
1924 [label="assertText.AppendLine('Actual:'); 738045"];
1925 [label="var actualText = ArrayBuilder<string>.GetInstance(); 738046"];
1926 [label="var e = actual.GetEnumerator(); 738047"];
1927 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 738048"];
1928 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 738049"];
1929 [label="param Compare(LinePosition? x) 738050"];
1930 [label="param Compare(LinePosition? y) 738051"];
1931 [label="param Compare(this) 738052"];
1932 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 738053"];
1933 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 738054"];
1934 [label="if (y == null)\n                {\n                    return 1;\n                } 738055"];
1935 [label="if (y == null)\n                {\n                    return 1;\n                } 738056"];
1936 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 738057"];
1937 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 738058"];
1938 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 738059"];
1939 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 738060"];
1940 [label="return x.Value.Character.CompareTo(y.Value.Character); 738061"];
1941 [label="return x.Value.Character.CompareTo(y.Value.Character); 738062"];
1942 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 738063"];
1943 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 738064"];
1944 [label="Diagnostic d = e.Current; 738065"];
1945 [label="string message = d.ToString(); 738066"];
1946 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 738067"];
1947 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 738068"];
1948 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 738069"];
1949 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 738070"];
1950 [label="Indent(assertText, indentDepth); 738071"];
1951 [label="Indent(assertText, indentDepth); 738072"];
1952 [label="Indent(assertText, indentDepth) 738073"];
1953 [label="param Indent(StringBuilder sb) 738074"];
1954 [label="param Indent(int count) 738075"];
1955 [label="sb.Append(' ', 4 * count); 738076"];
1956 [label="sb.Append(' ', 4 * count); 738077"];
1957 [label="sb.Append(' ', 4 * count); 738078"];
1958 [label="Indent(assertText, indentDepth); 738079"];
1959 [label="assertText.Append('// '); 738080"];
1960 [label="assertText.Append('// '); 738081"];
1961 [label="assertText.AppendLine(d.ToString()); 738082"];
1962 [label="assertText.AppendLine(d.ToString()); 738083"];
1963 [label="var l = d.Location; 738084"];
1964 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 738085"];
1965 [label="Indent(assertText, indentDepth); 738086"];
1966 [label="Indent(assertText, indentDepth); 738087"];
1967 [label="Indent(assertText, indentDepth) 738088"];
1968 [label="param Indent(StringBuilder sb) 738089"];
1969 [label="param Indent(int count) 738090"];
1970 [label="sb.Append(' ', 4 * count); 738091"];
1971 [label="sb.Append(' ', 4 * count); 738092"];
1972 [label="sb.Append(' ', 4 * count); 738093"];
1973 [label="Indent(assertText, indentDepth); 738094"];
1974 [label="assertText.Append('// '); 738095"];
1975 [label="assertText.Append('// '); 738096"];
1976 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 738097"];
1977 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 738098"];
1978 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 738099"];
1979 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 738100"];
1980 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 738101"];
1981 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 738102"];
1982 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 738103"];
1983 [label="param DiagnosticDescription(Diagnostic d) 738104"];
1984 [label="param DiagnosticDescription(bool errorCodeOnly) 738105"];
1985 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 738106"];
1986 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 738107"];
1987 [label="param DiagnosticDescription(this) 738108"];
1988 [label="_code 738109"];
1989 [label="_isWarningAsError 738110"];
1990 [label="_isSuppressed 738111"];
1991 [label="_squiggledText 738112"];
1992 [label="_arguments 738113"];
1993 [label="_startPosition 738114"];
1994 [label="_errorCodeType 738115"];
1995 [label="_defaultSeverityOpt 738116"];
1996 [label="_effectiveSeverityOpt 738117"];
1997 [label="_code 738118"];
1998 [label="_isWarningAsError 738119"];
1999 [label="_isSuppressed 738120"];
2000 [label="_location 738121"];
2001 [label="DiagnosticWithInfo dinfo = null; 738122"];
2002 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 738123"];
2003 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 738124"];
2004 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 738125"];
2005 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 738126"];
2006 [label="var diffDescription = description; 738127"];
2007 [label="var idx = Array.IndexOf(expected, description); 738128"];
2008 [label="var idx = Array.IndexOf(expected, description); 738129"];
2009 [label="var idx = Array.IndexOf(expected, description); 738130"];
2010 [label="var idx = Array.IndexOf(expected, description); 738131"];
2011 [label="if (d == null)\n                return false; 738132"];
2012 [label="if (d == null)\n                return false; 738133"];
2013 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 738134"];
2014 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 738135"];
2015 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 738136"];
2016 [label="if (_squiggledText != d._squiggledText)\n                    return false; 738137"];
2017 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 738138"];
2018 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 738139"];
2019 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 738140"];
2020 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 738141"];
2021 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 738142"];
2022 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 738143"];
2023 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 738144"];
2024 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 738145"];
2025 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 738146"];
2026 [label="if (d._arguments == null)\n                    return false; 738147"];
2027 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 738148"];
2028 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 738149"];
2029 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 738150"];
2030 [label="diffDescription = expected[idx]; 738151"];
2031 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 738152"];
2032 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 738153"];
2033 [label="GetDiagnosticDescription(description, indentDepth) 738154"];
2034 [label="param GetDiagnosticDescription(DiagnosticDescription d) 738155"];
2035 [label="param GetDiagnosticDescription(int indentDepth) 738156"];
2036 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738157"];
2037 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738158"];
2038 [label="var sb = new StringBuilder(); 738159"];
2039 [label="sb.Append('Diagnostic('); 738160"];
2040 [label="sb.Append('Diagnostic('); 738161"];
2041 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 738162"];
2042 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 738163"];
2043 [label="sb.Append(_errorCodeType.Name); 738164"];
2044 [label="sb.Append(_errorCodeType.Name); 738165"];
2045 [label="sb.Append('.'); 738166"];
2046 [label="sb.Append('.'); 738167"];
2047 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 738168"];
2048 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 738169"];
2049 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 738170"];
2050 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 738171"];
2051 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 738172"];
2052 [label="sb.Append(', \\''); 738173"];
2053 [label="sb.Append(', \\''); 738174"];
2054 [label="sb.Append(_squiggledText); 738175"];
2055 [label="sb.Append(_squiggledText); 738176"];
2056 [label="sb.Append('''); 738177"];
2057 [label="sb.Append('''); 738178"];
2058 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 738179"];
2059 [label="sb.Append(')'); 738180"];
2060 [label="sb.Append(')'); 738181"];
2061 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 738182"];
2062 [label="sb.Append('.WithArguments('); 738183"];
2063 [label="sb.Append('.WithArguments('); 738184"];
2064 [label="sb.Append('\\''); 738185"];
2065 [label="sb.Append('\\''); 738186"];
2066 [label="sb.Append(argumentStrings.Current); 738187"];
2067 [label="sb.Append(argumentStrings.Current); 738188"];
2068 [label="sb.Append('\\''); 738189"];
2069 [label="sb.Append('\\''); 738190"];
2070 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 738191"];
2071 [label="sb.Append(', '); 738192"];
2072 [label="sb.Append(', '); 738193"];
2073 [label="sb.Append(')'); 738194"];
2074 [label="sb.Append(')'); 738195"];
2075 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 738196"];
2076 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 738197"];
2077 [label="sb.Append('.WithLocation('); 738198"];
2078 [label="sb.Append('.WithLocation('); 738199"];
2079 [label="sb.Append(_startPosition.Value.Line + 1); 738200"];
2080 [label="sb.Append(_startPosition.Value.Line + 1); 738201"];
2081 [label="sb.Append(', '); 738202"];
2082 [label="sb.Append(', '); 738203"];
2083 [label="sb.Append(_startPosition.Value.Character + 1); 738204"];
2084 [label="sb.Append(_startPosition.Value.Character + 1); 738205"];
2085 [label="sb.Append(')'); 738206"];
2086 [label="sb.Append(')'); 738207"];
2087 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 738208"];
2088 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 738209"];
2089 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 738210"];
2090 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 738211"];
2091 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 738212"];
2092 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 738213"];
2093 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 738214"];
2094 [label="return sb.ToString(); 738215"];
2095 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738216"];
2096 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738217"];
2097 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 738218"];
2098 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 738219"];
2099 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 738220"];
2100 [label="GetDiagnosticDescription(diffDescription, indentDepth) 738221"];
2101 [label="param GetDiagnosticDescription(DiagnosticDescription d) 738222"];
2102 [label="param GetDiagnosticDescription(int indentDepth) 738223"];
2103 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738224"];
2104 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738225"];
2105 [label="var sb = new StringBuilder(); 738226"];
2106 [label="sb.Append('Diagnostic('); 738227"];
2107 [label="sb.Append('Diagnostic('); 738228"];
2108 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 738229"];
2109 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 738230"];
2110 [label="sb.Append(_errorCodeType.Name); 738231"];
2111 [label="sb.Append(_errorCodeType.Name); 738232"];
2112 [label="sb.Append('.'); 738233"];
2113 [label="sb.Append('.'); 738234"];
2114 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 738235"];
2115 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 738236"];
2116 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 738237"];
2117 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 738238"];
2118 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 738239"];
2119 [label="sb.Append(', \\''); 738240"];
2120 [label="sb.Append(', \\''); 738241"];
2121 [label="sb.Append(_squiggledText); 738242"];
2122 [label="sb.Append(_squiggledText); 738243"];
2123 [label="sb.Append('''); 738244"];
2124 [label="sb.Append('''); 738245"];
2125 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 738246"];
2126 [label="sb.Append(')'); 738247"];
2127 [label="sb.Append(')'); 738248"];
2128 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 738249"];
2129 [label="sb.Append('.WithArguments('); 738250"];
2130 [label="sb.Append('.WithArguments('); 738251"];
2131 [label="sb.Append('\\''); 738252"];
2132 [label="sb.Append('\\''); 738253"];
2133 [label="sb.Append(argumentStrings.Current); 738254"];
2134 [label="sb.Append(argumentStrings.Current); 738255"];
2135 [label="sb.Append('\\''); 738256"];
2136 [label="sb.Append('\\''); 738257"];
2137 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 738258"];
2138 [label="sb.Append(', '); 738259"];
2139 [label="sb.Append(', '); 738260"];
2140 [label="sb.Append(')'); 738261"];
2141 [label="sb.Append(')'); 738262"];
2142 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 738263"];
2143 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 738264"];
2144 [label="sb.Append('.WithLocation('); 738265"];
2145 [label="sb.Append('.WithLocation('); 738266"];
2146 [label="sb.Append(_startPosition.Value.Line + 1); 738267"];
2147 [label="sb.Append(_startPosition.Value.Line + 1); 738268"];
2148 [label="sb.Append(', '); 738269"];
2149 [label="sb.Append(', '); 738270"];
2150 [label="sb.Append(_startPosition.Value.Character + 1); 738271"];
2151 [label="sb.Append(_startPosition.Value.Character + 1); 738272"];
2152 [label="sb.Append(')'); 738273"];
2153 [label="sb.Append(')'); 738274"];
2154 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 738275"];
2155 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 738276"];
2156 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 738277"];
2157 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 738278"];
2158 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 738279"];
2159 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 738280"];
2160 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 738281"];
2161 [label="return sb.ToString(); 738282"];
2162 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738283"];
2163 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 738284"];
2164 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 738285"];
2165 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 738286"];
2166 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 738287"];
2167 [label="assertText.AppendLine(); 738288"];
2168 [label="assertText.AppendLine('Diff:'); 738289"];
2169 [label="assertText.AppendLine('Diff:'); 738290"];
2170 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 738291"];
2171 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 738292"];
2172 [label="new[] { '\\r', '\\n' } 738293"];
2173 [label="'\\r' 738294"];
2174 [label="'\\n' 738295"];
2175 [label="new[] { '\\r', '\\n' } 738296"];
2176 [label="new[] { '\\r', '\\n' } 738297"];
2177 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 738298"];
2178 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 738299"];
2179 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 738300"];
2180 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 738301"];
2181 [label="param DiffReport(IEnumerable<T> expected) 738302"];
2182 [label="param DiffReport(IEnumerable<T> actual) 738303"];
2183 [label="param DiffReport(string separator) 738304"];
2184 [label="param DiffReport(IEqualityComparer<T> comparer = null) 738305"];
2185 [label="param DiffReport(Func<T, string> toString = null) 738306"];
2186 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 738307"];
2187 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 738308"];
2188 [label="(comparer != null) 738309"];
2189 [label="EqualityComparer<T>.Default 738310"];
2190 [label="new LCS<T>(EqualityComparer<T>.Default) 738311"];
2191 [label="param LCS(IEqualityComparer<T> comparer) 738312"];
2192 [label="param LCS(this) 738313"];
2193 [label="1 738314"];
2194 [label="DeleteCost = 1 738315"];
2195 [label="1 738316"];
2196 [label="InsertCost = 1 738317"];
2197 [label="2 738318"];
2198 [label="UpdateCost = 2 738319"];
2199 [label="param LongestCommonSubsequence(this) 738320"];
2200 [label="_comparer 738321"];
2201 [label="_comparer 738322"];
2202 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 738323"];
2203 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 738324"];
2204 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 738325"];
2205 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 738326"];
2206 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 738327"];
2207 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 738328"];
2208 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 738329"];
2209 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 738330"];
2210 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 738331"];
2211 [label="lcs.CalculateDiff(expectedList, actualList, toString) 738332"];
2212 [label="param CalculateDiff(IList<T> sequenceA) 738333"];
2213 [label="param CalculateDiff(IList<T> sequenceB) 738334"];
2214 [label="param CalculateDiff(Func<T, string> toString) 738335"];
2215 [label="param CalculateDiff(this) 738336"];
2216 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 738337"];
2217 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 738338"];
2218 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 738339"];
2219 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 738340"];
2220 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 738341"];
2221 [label="param GetEdits(TSequence sequenceA) 738342"];
2222 [label="param GetEdits(int lengthA) 738343"];
2223 [label="param GetEdits(TSequence sequenceB) 738344"];
2224 [label="param GetEdits(int lengthB) 738345"];
2225 [label="param GetEdits(this) 738346"];
2226 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 738347"];
2227 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 738348"];
2228 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 738349"];
2229 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 738350"];
2230 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 738351"];
2231 [label="param ComputeCostMatrix(TSequence sequenceA) 738352"];
2232 [label="param ComputeCostMatrix(int lengthA) 738353"];
2233 [label="param ComputeCostMatrix(TSequence sequenceB) 738354"];
2234 [label="param ComputeCostMatrix(int lengthB) 738355"];
2235 [label="param ComputeCostMatrix(this) 738356"];
2236 [label="var la = lengthA + 1; 738357"];
2237 [label="var la = lengthA + 1; 738358"];
2238 [label="var lb = lengthB + 1; 738359"];
2239 [label="var lb = lengthB + 1; 738360"];
2240 [label="var d = new int[la, lb]; 738361"];
2241 [label="d[0, 0] = 0; 738362"];
2242 [label="d[0, 0] 738363"];
2243 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 738364"];
2244 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 738365"];
2245 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 738366"];
2246 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 738367"];
2247 [label="d[i, 0] 738368"];
2248 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 738369"];
2249 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 738370"];
2250 [label="d[0, j] = d[0, j - 1] + InsertCost; 738371"];
2251 [label="d[0, j] = d[0, j - 1] + InsertCost; 738372"];
2252 [label="d[0, j] 738373"];
2253 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 738374"];
2254 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 738375"];
2255 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 738376"];
2256 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 738377"];
2257 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 738378"];
2258 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 738379"];
2259 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 738380"];
2260 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 738381"];
2261 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 738382"];
2262 [label="param ItemsEqual(IList<T> sequenceA) 738383"];
2263 [label="param ItemsEqual(int indexA) 738384"];
2264 [label="param ItemsEqual(IList<T> sequenceB) 738385"];
2265 [label="param ItemsEqual(int indexB) 738386"];
2266 [label="param ItemsEqual(this) 738387"];
2267 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 738388"];
2268 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 738389"];
2269 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 738390"];
2270 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 738391"];
2271 [label="int m2 = d[i - 1, j] + DeleteCost; 738392"];
2272 [label="int m2 = d[i - 1, j] + DeleteCost; 738393"];
2273 [label="int m3 = d[i, j - 1] + InsertCost; 738394"];
2274 [label="int m3 = d[i, j - 1] + InsertCost; 738395"];
2275 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 738396"];
2276 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 738397"];
2277 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 738398"];
2278 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 738399"];
2279 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 738400"];
2280 [label="d[i, j] 738401"];
2281 [label="return d; 738402"];
2282 [label="int i = lengthA; 738403"];
2283 [label="int j = lengthB; 738404"];
2284 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 738405"];
2285 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 738406"];
2286 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 738407"];
2287 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 738408"];
2288 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 738409"];
2289 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 738410"];
2290 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 738411"];
2291 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 738412"];
2292 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 738413"];
2293 [label="i--; 738414"];
2294 [label="j--; 738415"];
2295 [label="yield return new Edit(EditKind.Update, i, j); 738416"];
2296 [label="yield return new Edit(EditKind.Update, i, j); 738417"];
2297 [label="yield return new Edit(EditKind.Update, i, j); 738418"];
2298 [label="yield return new Edit(EditKind.Update, i, j); 738419"];
2299 [label="new Edit(EditKind.Update, i, j) 738420"];
2300 [label="param Edit(EditKind kind) 738421"];
2301 [label="param Edit(int indexA) 738422"];
2302 [label="param Edit(int indexB) 738423"];
2303 [label="param Edit(this) 738424"];
2304 [label="this.Kind 738425"];
2305 [label="this.IndexA 738426"];
2306 [label="this.IndexB 738427"];
2307 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 738428"];
2308 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 738429"];
2309 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 738430"];
2310 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 738431"];
2311 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 738432"];
2312 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 738433"];
2313 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 738434"];
2314 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 738435"];
2315 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 738436"];
2316 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 738437"];
2317 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 738438"];
2318 [label="actualText.Free(); 738439"];
2319 [label="expectedText.Free(); 738440"];
2320 [label="return assertText.ToString(); 738441"];
2321 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 738442"];
2322 [label="diagnostics.Verify(expected); 738443"];
2323 [label="VerifyAssemblyIds(c, diagnostics); 738444"];
2324 [label="VerifyAssemblyIds(c, diagnostics); 738445"];
2325 [label="VerifyAssemblyIds(c, diagnostics) 738446"];
2326 [label="param VerifyAssemblyIds(TCompilation c) 738447"];
2327 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 738448"];
2328 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 738449"];
2329 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 738450"];
2330 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 738451"];
2331 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 738452"];
2332 [label="CustomAssert.True(assemblyIds.IsEmpty); 738453"];
2333 [label="VerifyAssemblyIds(c, diagnostics); 738454"];
2334 [label="return c; 738455"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 573;
574 -> 1;
575 -> 1;
576 -> 0;
576 -> 1;
577 -> 1;
578 -> 576;
578 -> 577;
579 -> 575;
579 -> 577;
580 -> 575;
580 -> 577;
581 -> 575;
581 -> 577;
582 -> 575;
582 -> 577;
583 -> 575;
583 -> 577;
584 -> 575;
584 -> 577;
585 -> 578;
585 -> 577;
586 -> 579;
586 -> 577;
587 -> 580;
587 -> 577;
588 -> 581;
588 -> 577;
589 -> 582;
589 -> 577;
590 -> 583;
590 -> 577;
591 -> 584;
591 -> 577;
592 -> 577;
593 -> 585;
593 -> 592;
594 -> 586;
594 -> 592;
595 -> 587;
595 -> 592;
596 -> 588;
596 -> 592;
597 -> 589;
597 -> 592;
598 -> 590;
598 -> 592;
599 -> 591;
599 -> 592;
600 -> 593;
600 -> 592;
601 -> 593;
601 -> 592;
602 -> 592;
603 -> 594;
603 -> 592;
604 -> 595;
604 -> 592;
605 -> 596;
605 -> 592;
606 -> 597;
606 -> 592;
607 -> 598;
607 -> 592;
609 -> 608;
611 -> 610;
612 -> 599;
612 -> 592;
613 -> 592;
614 -> 601;
614 -> 613;
615 -> 602;
615 -> 613;
616 -> 603;
616 -> 613;
617 -> 604;
617 -> 613;
618 -> 605;
618 -> 613;
619 -> 606;
619 -> 613;
620 -> 607;
620 -> 613;
621 -> 601;
621 -> 613;
622 -> 612;
622 -> 613;
623 -> 602;
623 -> 613;
624 -> 602;
624 -> 613;
625 -> 602;
625 -> 613;
626 -> 625;
626 -> 613;
627 -> 625;
627 -> 613;
628 -> 625;
628 -> 613;
629 -> 625;
629 -> 613;
630 -> 625;
630 -> 613;
631 -> 625;
631 -> 613;
632 -> 625;
632 -> 613;
633 -> 625;
633 -> 613;
634 -> 625;
634 -> 613;
635 -> 625;
635 -> 613;
636 -> 625;
636 -> 613;
637 -> 625;
637 -> 613;
638 -> 625;
638 -> 613;
639 -> 625;
639 -> 613;
640 -> 625;
640 -> 613;
641 -> 614;
641 -> 625;
641 -> 613;
642 -> 615;
642 -> 625;
642 -> 613;
643 -> 616;
643 -> 625;
643 -> 613;
644 -> 617;
644 -> 625;
644 -> 613;
645 -> 618;
645 -> 625;
645 -> 613;
646 -> 619;
646 -> 625;
646 -> 613;
647 -> 620;
647 -> 625;
647 -> 613;
648 -> 621;
648 -> 613;
649 -> 648;
649 -> 625;
649 -> 613;
650 -> 622;
650 -> 625;
650 -> 613;
651 -> 623;
651 -> 625;
651 -> 613;
652 -> 624;
652 -> 625;
652 -> 613;
653 -> 602;
653 -> 577;
654 -> 653;
654 -> 1;
655 -> 575;
655 -> 1;
656 -> 1;
657 -> 575;
657 -> 656;
658 -> 654;
658 -> 656;
659 -> 658;
659 -> 641;
659 -> 656;
660 -> 658;
660 -> 642;
660 -> 656;
661 -> 658;
661 -> 643;
661 -> 656;
662 -> 657;
662 -> 656;
663 -> 658;
663 -> 645;
663 -> 656;
664 -> 658;
664 -> 646;
664 -> 656;
665 -> 656;
666 -> 658;
666 -> 649;
666 -> 656;
667 -> 658;
667 -> 650;
667 -> 656;
668 -> 658;
668 -> 651;
668 -> 656;
669 -> 658;
669 -> 652;
669 -> 656;
670 -> 656;
671 -> 659;
671 -> 670;
672 -> 660;
672 -> 670;
673 -> 661;
673 -> 670;
674 -> 662;
674 -> 670;
675 -> 663;
675 -> 670;
676 -> 664;
676 -> 670;
677 -> 665;
677 -> 670;
678 -> 666;
678 -> 670;
679 -> 667;
679 -> 670;
680 -> 668;
680 -> 670;
681 -> 669;
681 -> 670;
682 -> 665;
682 -> 670;
683 -> 682;
683 -> 670;
684 -> 682;
684 -> 670;
685 -> 682;
685 -> 670;
686 -> 682;
686 -> 670;
687 -> 682;
687 -> 670;
688 -> 682;
688 -> 670;
689 -> 682;
689 -> 670;
690 -> 682;
690 -> 670;
691 -> 682;
691 -> 670;
692 -> 682;
692 -> 670;
693 -> 682;
693 -> 670;
694 -> 682;
694 -> 670;
695 -> 682;
695 -> 670;
696 -> 682;
696 -> 670;
697 -> 682;
697 -> 670;
698 -> 674;
698 -> 682;
698 -> 670;
699 -> 677;
699 -> 682;
699 -> 670;
700 -> 665;
700 -> 1;
701 -> 1;
702 -> 575;
702 -> 701;
703 -> 575;
703 -> 701;
704 -> 700;
704 -> 701;
705 -> 704;
705 -> 671;
705 -> 701;
706 -> 704;
706 -> 672;
706 -> 701;
707 -> 704;
707 -> 673;
707 -> 701;
708 -> 704;
708 -> 698;
708 -> 701;
709 -> 701;
710 -> 702;
710 -> 709;
710 -> 701;
711 -> 703;
711 -> 709;
711 -> 701;
712 -> 710;
712 -> 711;
712 -> 701;
713 -> 704;
713 -> 676;
713 -> 701;
714 -> 704;
714 -> 699;
714 -> 701;
715 -> 704;
715 -> 678;
715 -> 701;
716 -> 704;
716 -> 679;
716 -> 701;
717 -> 704;
717 -> 680;
717 -> 701;
718 -> 704;
718 -> 681;
718 -> 701;
719 -> 701;
720 -> 705;
720 -> 719;
721 -> 706;
721 -> 719;
722 -> 707;
722 -> 719;
723 -> 708;
723 -> 719;
724 -> 712;
724 -> 719;
725 -> 713;
725 -> 719;
726 -> 714;
726 -> 719;
727 -> 715;
727 -> 719;
728 -> 716;
728 -> 719;
729 -> 717;
729 -> 719;
730 -> 718;
730 -> 719;
731 -> 709;
731 -> 719;
732 -> 731;
732 -> 719;
733 -> 731;
733 -> 719;
734 -> 731;
734 -> 719;
735 -> 731;
735 -> 719;
736 -> 731;
736 -> 719;
737 -> 731;
737 -> 719;
738 -> 731;
738 -> 719;
739 -> 731;
739 -> 719;
740 -> 731;
740 -> 719;
741 -> 731;
741 -> 719;
742 -> 731;
742 -> 719;
743 -> 731;
743 -> 719;
744 -> 731;
744 -> 719;
745 -> 731;
745 -> 719;
746 -> 731;
746 -> 719;
747 -> 724;
747 -> 731;
747 -> 719;
748 -> 709;
748 -> 1;
749 -> 748;
749 -> 575;
749 -> 1;
750 -> 1;
751 -> 574;
751 -> 750;
752 -> 575;
752 -> 750;
753 -> 750;
755 -> 0;
756 -> 0;
757 -> 0;
760 -> 754;
760 -> 759;
761 -> 755;
761 -> 759;
762 -> 756;
762 -> 759;
763 -> 757;
763 -> 759;
764 -> 758;
764 -> 759;
765 -> 759;
766 -> 765;
766 -> 759;
767 -> 765;
767 -> 759;
768 -> 765;
768 -> 759;
769 -> 759;
770 -> 761;
770 -> 769;
770 -> 759;
771 -> 762;
771 -> 0;
771 -> 759;
772 -> 763;
772 -> 0;
772 -> 759;
773 -> 760;
773 -> 765;
773 -> 759;
774 -> 761;
774 -> 765;
774 -> 759;
775 -> 762;
775 -> 765;
775 -> 759;
776 -> 764;
776 -> 765;
776 -> 759;
777 -> 763;
777 -> 765;
777 -> 759;
778 -> 759;
779 -> 753;
779 -> 751;
779 -> 571;
779 -> 750;
780 -> 779;
780 -> 753;
781 -> 780;
781 -> 779;
781 -> 753;
782 -> 753;
783 -> 781;
783 -> 779;
783 -> 782;
783 -> 753;
784 -> 780;
784 -> 779;
784 -> 782;
784 -> 753;
785 -> 778;
785 -> 783;
786 -> 779;
786 -> 785;
786 -> 773;
786 -> 776;
786 -> 774;
786 -> 775;
786 -> 777;
786 -> 0;
786 -> 750;
787 -> 779;
787 -> 753;
788 -> 779;
788 -> 753;
789 -> 753;
790 -> 787;
790 -> 786;
790 -> 789;
791 -> 788;
791 -> 790;
791 -> 789;
792 -> 791;
792 -> 789;
793 -> 0;
793 -> 792;
794 -> 791;
794 -> 789;
795 -> 787;
795 -> 789;
796 -> 788;
796 -> 793;
796 -> 794;
796 -> 795;
796 -> 789;
797 -> 0;
797 -> 796;
798 -> 797;
799 -> 788;
799 -> 798;
800 -> 799;
800 -> 778;
800 -> 798;
801 -> 800;
802 -> 797;
803 -> 0;
803 -> 797;
804 -> 803;
805 -> 779;
805 -> 753;
806 -> 779;
806 -> 753;
807 -> 805;
807 -> 806;
807 -> 753;
808 -> 779;
808 -> 807;
808 -> 803;
808 -> 750;
810 -> 809;
812 -> 811;
814 -> 813;
817 -> 816;
818 -> 0;
819 -> 0;
820 -> 0;
821 -> 820;
823 -> 818;
823 -> 819;
823 -> 821;
823 -> 822;
824 -> 823;
826 -> 825;
828 -> 827;
830 -> 829;
832 -> 831;
833 -> 779;
833 -> 753;
834 -> 779;
834 -> 753;
835 -> 779;
835 -> 753;
836 -> 779;
836 -> 753;
837 -> 779;
837 -> 753;
838 -> 753;
839 -> 836;
839 -> 838;
839 -> 753;
840 -> 837;
840 -> 838;
840 -> 753;
841 -> 839;
841 -> 840;
841 -> 753;
842 -> 834;
842 -> 753;
843 -> 833;
843 -> 753;
844 -> 834;
844 -> 753;
845 -> 835;
845 -> 753;
846 -> 836;
846 -> 753;
847 -> 837;
847 -> 753;
848 -> 842;
848 -> 753;
849 -> 753;
850 -> 843;
850 -> 849;
851 -> 844;
851 -> 849;
852 -> 845;
852 -> 849;
853 -> 846;
853 -> 849;
854 -> 847;
854 -> 849;
855 -> 848;
855 -> 849;
856 -> 849;
857 -> 854;
857 -> 856;
857 -> 849;
858 -> 853;
858 -> 856;
858 -> 849;
859 -> 857;
859 -> 858;
859 -> 849;
860 -> 849;
861 -> 850;
861 -> 849;
862 -> 851;
862 -> 849;
863 -> 860;
863 -> 849;
864 -> 855;
864 -> 849;
865 -> 849;
866 -> 861;
866 -> 865;
867 -> 862;
867 -> 865;
868 -> 863;
868 -> 865;
869 -> 864;
869 -> 865;
870 -> 867;
870 -> 865;
871 -> 870;
871 -> 866;
871 -> 808;
871 -> 865;
872 -> 865;
873 -> 871;
873 -> 872;
874 -> 871;
874 -> 872;
875 -> 873;
875 -> 872;
876 -> 873;
876 -> 871;
876 -> 872;
877 -> 872;
878 -> 873;
878 -> 871;
878 -> 872;
879 -> 873;
879 -> 871;
879 -> 872;
880 -> 879;
880 -> 872;
881 -> 872;
882 -> 877;
882 -> 881;
882 -> 865;
883 -> 877;
883 -> 872;
884 -> 877;
884 -> 872;
885 -> 883;
885 -> 872;
886 -> 883;
886 -> 872;
887 -> 883;
887 -> 872;
888 -> 883;
888 -> 872;
889 -> 888;
889 -> 872;
890 -> 888;
890 -> 889;
891 -> 866;
891 -> 870;
891 -> 871;
891 -> 881;
891 -> 865;
892 -> 865;
893 -> 891;
893 -> 892;
893 -> 865;
894 -> 891;
894 -> 893;
895 -> 893;
896 -> 894;
896 -> 895;
897 -> 894;
897 -> 895;
898 -> 896;
898 -> 895;
899 -> 896;
899 -> 894;
899 -> 895;
900 -> 895;
901 -> 896;
901 -> 894;
901 -> 895;
902 -> 896;
902 -> 894;
902 -> 895;
903 -> 902;
903 -> 895;
904 -> 900;
904 -> 895;
905 -> 900;
905 -> 895;
906 -> 904;
906 -> 895;
907 -> 904;
907 -> 895;
908 -> 904;
908 -> 895;
909 -> 904;
909 -> 895;
910 -> 909;
910 -> 895;
911 -> 893;
912 -> 895;
912 -> 911;
912 -> 893;
913 -> 891;
913 -> 865;
914 -> 849;
915 -> 895;
915 -> 914;
915 -> 849;
916 -> 913;
916 -> 849;
917 -> 895;
917 -> 872;
918 -> 895;
918 -> 872;
919 -> 917;
919 -> 872;
920 -> 917;
920 -> 895;
920 -> 872;
921 -> 917;
921 -> 895;
921 -> 872;
922 -> 917;
922 -> 895;
922 -> 872;
923 -> 922;
923 -> 872;
924 -> 900;
925 -> 900;
926 -> 924;
926 -> 900;
927 -> 924;
927 -> 900;
928 -> 924;
928 -> 900;
929 -> 924;
929 -> 900;
930 -> 929;
930 -> 900;
931 -> 895;
932 -> 900;
932 -> 931;
932 -> 895;
933 -> 895;
933 -> 865;
934 -> 900;
934 -> 914;
934 -> 849;
935 -> 933;
935 -> 849;
936 -> 900;
937 -> 900;
937 -> 865;
938 -> 937;
938 -> 849;
939 -> 779;
939 -> 753;
940 -> 779;
940 -> 753;
941 -> 779;
941 -> 753;
942 -> 779;
942 -> 753;
943 -> 939;
943 -> 900;
943 -> 753;
944 -> 753;
945 -> 942;
945 -> 944;
946 -> 945;
946 -> 900;
946 -> 0;
946 -> 944;
947 -> 946;
947 -> 753;
948 -> 753;
949 -> 939;
949 -> 900;
949 -> 948;
949 -> 753;
950 -> 947;
950 -> 949;
950 -> 753;
951 -> 939;
951 -> 900;
951 -> 950;
952 -> 951;
952 -> 753;
953 -> 943;
953 -> 753;
954 -> 940;
954 -> 753;
955 -> 941;
955 -> 753;
956 -> 753;
957 -> 952;
957 -> 956;
958 -> 953;
958 -> 956;
959 -> 954;
959 -> 956;
960 -> 955;
960 -> 956;
961 -> 942;
961 -> 956;
962 -> 956;
963 -> 957;
963 -> 962;
963 -> 956;
964 -> 960;
964 -> 956;
965 -> 960;
965 -> 900;
965 -> 956;
966 -> 961;
966 -> 900;
966 -> 956;
967 -> 956;
968 -> 966;
968 -> 967;
969 -> 966;
969 -> 967;
970 -> 967;
971 -> 970;
971 -> 967;
972 -> 970;
972 -> 967;
973 -> 970;
973 -> 967;
974 -> 970;
974 -> 967;
975 -> 968;
975 -> 970;
975 -> 967;
976 -> 966;
976 -> 970;
976 -> 971;
976 -> 972;
976 -> 973;
976 -> 974;
976 -> 975;
976 -> 956;
977 -> 958;
977 -> 956;
978 -> 959;
978 -> 956;
979 -> 960;
979 -> 956;
980 -> 956;
981 -> 977;
981 -> 980;
982 -> 978;
982 -> 980;
983 -> 979;
983 -> 980;
984 -> 976;
984 -> 980;
985 -> 980;
986 -> 982;
986 -> 985;
986 -> 980;
987 -> 983;
987 -> 985;
987 -> 980;
988 -> 986;
988 -> 987;
988 -> 980;
989 -> 981;
989 -> 984;
989 -> 980;
990 -> 982;
990 -> 984;
990 -> 980;
991 -> 983;
991 -> 984;
991 -> 980;
992 -> 956;
993 -> 957;
993 -> 956;
994 -> 956;
995 -> 993;
995 -> 994;
996 -> 976;
996 -> 994;
997 -> 995;
997 -> 994;
998 -> 994;
999 -> 997;
999 -> 998;
1000 -> 996;
1000 -> 998;
1001 -> 1000;
1001 -> 998;
1002 -> 1001;
1002 -> 999;
1002 -> 976;
1002 -> 989;
1002 -> 990;
1002 -> 991;
1002 -> 998;
1003 -> 998;
1004 -> 1002;
1004 -> 1003;
1005 -> 1002;
1005 -> 1003;
1006 -> 1004;
1006 -> 1003;
1007 -> 1003;
1008 -> 1006;
1008 -> 1007;
1009 -> 1005;
1009 -> 1007;
1010 -> 1009;
1010 -> 1002;
1010 -> 1007;
1011 -> 1008;
1011 -> 1007;
1012 -> 1010;
1012 -> 1011;
1012 -> 1002;
1012 -> 1007;
1013 -> 0;
1013 -> 1007;
1014 -> 1007;
1015 -> 1008;
1015 -> 1012;
1015 -> 1014;
1015 -> 1007;
1016 -> 1009;
1016 -> 1012;
1016 -> 1007;
1017 -> 1008;
1017 -> 1012;
1017 -> 1007;
1018 -> 0;
1018 -> 1015;
1019 -> 1008;
1019 -> 1007;
1020 -> 1018;
1020 -> 1007;
1021 -> 1007;
1022 -> 1019;
1022 -> 1021;
1023 -> 1020;
1023 -> 1021;
1024 -> 1009;
1024 -> 1021;
1025 -> 1022;
1025 -> 1021;
1026 -> 1023;
1026 -> 1021;
1027 -> 1021;
1028 -> 1025;
1028 -> 1027;
1029 -> 1026;
1029 -> 1027;
1030 -> 1029;
1030 -> 1027;
1031 -> 1027;
1032 -> 1028;
1032 -> 1027;
1033 -> 1029;
1033 -> 1027;
1034 -> 1027;
1035 -> 1027;
1036 -> 1032;
1036 -> 1035;
1037 -> 1033;
1037 -> 1035;
1038 -> 1034;
1038 -> 1035;
1039 -> 1036;
1039 -> 1038;
1039 -> 1035;
1040 -> 1037;
1040 -> 1038;
1040 -> 1035;
1041 -> 1034;
1041 -> 1021;
1042 -> 1021;
1043 -> 1021;
1044 -> 1024;
1044 -> 1043;
1045 -> 1044;
1045 -> 1016;
1045 -> 1043;
1046 -> 1045;
1046 -> 1021;
1047 -> 1041;
1047 -> 1021;
1048 -> 1042;
1048 -> 1021;
1049 -> 1047;
1049 -> 1048;
1049 -> 1046;
1049 -> 1039;
1049 -> 1040;
1049 -> 1016;
1049 -> 1021;
1050 -> 1021;
1051 -> 1049;
1051 -> 1050;
1052 -> 1051;
1052 -> 1049;
1052 -> 1050;
1053 -> 1022;
1053 -> 1052;
1054 -> 1052;
1055 -> 1053;
1055 -> 1054;
1056 -> 1055;
1056 -> 1054;
1057 -> 1055;
1057 -> 1054;
1058 -> 1056;
1058 -> 1054;
1059 -> 1054;
1060 -> 1058;
1060 -> 1059;
1061 -> 1057;
1061 -> 1059;
1062 -> 1060;
1062 -> 1055;
1062 -> 1059;
1063 -> 1059;
1064 -> 1063;
1064 -> 1059;
1065 -> 1060;
1065 -> 1055;
1065 -> 1059;
1066 -> 1061;
1066 -> 1065;
1066 -> 1062;
1066 -> 1055;
1067 -> 1061;
1067 -> 1065;
1067 -> 1066;
1068 -> 1066;
1069 -> 1067;
1069 -> 1059;
1070 -> 1059;
1071 -> 1069;
1071 -> 1070;
1071 -> 1059;
1072 -> 1069;
1072 -> 1060;
1072 -> 1059;
1073 -> 1069;
1073 -> 1071;
1074 -> 0;
1074 -> 1071;
1075 -> 1069;
1075 -> 1073;
1075 -> 1071;
1076 -> 1059;
1077 -> 1076;
1077 -> 1054;
1078 -> 1054;
1079 -> 1057;
1079 -> 1078;
1080 -> 1078;
1081 -> 1079;
1081 -> 1075;
1081 -> 1080;
1082 -> 1081;
1082 -> 1078;
1083 -> 1054;
1084 -> 1058;
1084 -> 1083;
1085 -> 1077;
1085 -> 1083;
1086 -> 1082;
1086 -> 1083;
1087 -> 1057;
1087 -> 1083;
1088 -> 1083;
1089 -> 1087;
1089 -> 1088;
1090 -> 1089;
1090 -> 1075;
1090 -> 1088;
1091 -> 1090;
1091 -> 1083;
1092 -> 1083;
1093 -> 1084;
1093 -> 1091;
1093 -> 1083;
1094 -> 1085;
1094 -> 1083;
1095 -> 1086;
1095 -> 1094;
1096 -> 0;
1096 -> 1095;
1097 -> 1084;
1097 -> 1083;
1098 -> 1096;
1098 -> 1083;
1099 -> 1083;
1100 -> 1097;
1100 -> 1099;
1101 -> 1098;
1101 -> 1099;
1102 -> 1101;
1102 -> 1099;
1103 -> 1099;
1104 -> 1099;
1104 -> 1083;
1105 -> 1083;
1106 -> 1083;
1107 -> 1087;
1107 -> 1106;
1108 -> 1107;
1108 -> 1075;
1108 -> 1106;
1109 -> 1108;
1109 -> 1083;
1110 -> 1104;
1110 -> 1083;
1111 -> 1105;
1111 -> 1083;
1112 -> 1110;
1112 -> 1111;
1112 -> 1109;
1112 -> 1100;
1112 -> 1101;
1112 -> 1075;
1112 -> 1083;
1113 -> 1083;
1114 -> 1112;
1115 -> 1087;
1115 -> 1114;
1116 -> 1115;
1116 -> 1112;
1116 -> 1114;
1117 -> 1116;
1117 -> 1112;
1118 -> 1086;
1118 -> 1112;
1119 -> 1118;
1120 -> 1087;
1120 -> 1119;
1121 -> 1120;
1121 -> 1112;
1121 -> 1119;
1122 -> 1121;
1122 -> 1118;
1123 -> 1117;
1123 -> 1118;
1124 -> 1084;
1124 -> 1118;
1125 -> 1085;
1125 -> 1118;
1126 -> 1118;
1127 -> 1118;
1128 -> 1122;
1128 -> 1127;
1129 -> 1123;
1129 -> 1127;
1130 -> 1124;
1130 -> 1127;
1131 -> 1125;
1131 -> 1127;
1132 -> 1126;
1132 -> 1127;
1133 -> 1129;
1133 -> 1127;
1134 -> 1127;
1135 -> 1133;
1135 -> 1134;
1136 -> 1132;
1136 -> 1134;
1137 -> 1134;
1138 -> 1136;
1138 -> 1134;
1139 -> 1136;
1139 -> 1134;
1140 -> 1136;
1140 -> 1134;
1141 -> 1136;
1141 -> 1134;
1142 -> 1136;
1142 -> 1134;
1143 -> 1134;
1144 -> 1135;
1144 -> 1143;
1144 -> 1134;
1145 -> 1135;
1145 -> 1136;
1145 -> 1134;
1146 -> 1135;
1146 -> 1112;
1146 -> 1136;
1146 -> 1134;
1147 -> 1135;
1147 -> 1112;
1147 -> 1136;
1147 -> 1134;
1148 -> 1137;
1148 -> 1136;
1148 -> 1134;
1149 -> 1132;
1149 -> 1127;
1150 -> 1132;
1150 -> 1127;
1151 -> 1132;
1151 -> 1127;
1152 -> 1132;
1152 -> 1127;
1153 -> 1132;
1153 -> 1127;
1154 -> 1127;
1155 -> 1128;
1155 -> 1154;
1155 -> 1127;
1156 -> 1127;
1157 -> 1130;
1157 -> 1156;
1157 -> 1127;
1158 -> 1128;
1158 -> 1132;
1158 -> 1127;
1159 -> 1130;
1159 -> 1132;
1159 -> 1131;
1159 -> 1127;
1160 -> 1159;
1160 -> 1132;
1160 -> 1127;
1161 -> 1131;
1161 -> 1127;
1162 -> 1130;
1162 -> 1112;
1162 -> 1161;
1163 -> 1130;
1163 -> 1162;
1164 -> 1163;
1164 -> 1162;
1164 -> 1132;
1165 -> 1118;
1166 -> 1087;
1166 -> 1165;
1167 -> 1166;
1167 -> 1162;
1167 -> 1165;
1168 -> 1167;
1168 -> 1118;
1169 -> 1084;
1169 -> 1118;
1170 -> 1118;
1171 -> 1112;
1172 -> 1171;
1172 -> 1168;
1173 -> 1172;
1173 -> 1112;
1174 -> 1104;
1174 -> 1112;
1175 -> 1126;
1175 -> 1112;
1176 -> 1174;
1176 -> 1175;
1176 -> 1173;
1176 -> 1100;
1176 -> 1101;
1176 -> 1147;
1176 -> 1146;
1176 -> 1145;
1176 -> 1148;
1176 -> 1142;
1176 -> 1158;
1176 -> 1160;
1176 -> 1151;
1176 -> 1152;
1176 -> 1153;
1176 -> 1164;
1176 -> 1168;
1176 -> 1159;
1176 -> 1162;
1176 -> 1112;
1177 -> 1112;
1178 -> 1176;
1178 -> 1177;
1179 -> 1176;
1179 -> 1177;
1180 -> 1179;
1180 -> 1176;
1180 -> 1178;
1180 -> 1177;
1181 -> 1126;
1181 -> 1083;
1182 -> 1055;
1182 -> 1181;
1182 -> 1180;
1182 -> 1054;
1183 -> 1023;
1183 -> 1096;
1183 -> 1052;
1184 -> 1183;
1185 -> 1182;
1185 -> 1184;
1186 -> 1185;
1186 -> 1182;
1186 -> 1184;
1187 -> 1184;
1188 -> 1186;
1188 -> 1187;
1188 -> 1184;
1189 -> 1188;
1189 -> 1184;
1190 -> 1189;
1190 -> 1183;
1191 -> 1022;
1191 -> 1183;
1192 -> 1023;
1192 -> 0;
1192 -> 1183;
1193 -> 1190;
1193 -> 1192;
1194 -> 1182;
1194 -> 1192;
1195 -> 1192;
1196 -> 1192;
1197 -> 1193;
1197 -> 1196;
1198 -> 1194;
1198 -> 1196;
1199 -> 1195;
1199 -> 1196;
1200 -> 1195;
1200 -> 1196;
1201 -> 1198;
1201 -> 1196;
1202 -> 1196;
1203 -> 1201;
1203 -> 1202;
1204 -> 1200;
1204 -> 1202;
1205 -> 1202;
1206 -> 1204;
1206 -> 1202;
1207 -> 1204;
1207 -> 1202;
1208 -> 1204;
1208 -> 1202;
1209 -> 1204;
1209 -> 1202;
1210 -> 1204;
1210 -> 1202;
1211 -> 1202;
1212 -> 1203;
1212 -> 1211;
1212 -> 1202;
1213 -> 1203;
1213 -> 1190;
1213 -> 1204;
1213 -> 1202;
1214 -> 1203;
1214 -> 1190;
1214 -> 1204;
1214 -> 1202;
1215 -> 1205;
1215 -> 1204;
1215 -> 1202;
1216 -> 1200;
1216 -> 1196;
1217 -> 1200;
1217 -> 1196;
1218 -> 1200;
1218 -> 1196;
1219 -> 1200;
1219 -> 1196;
1220 -> 1200;
1220 -> 1196;
1221 -> 1196;
1222 -> 1197;
1222 -> 1221;
1222 -> 1196;
1223 -> 1197;
1223 -> 1200;
1223 -> 1196;
1224 -> 778;
1224 -> 1196;
1225 -> 1224;
1225 -> 1199;
1225 -> 1196;
1226 -> 1225;
1226 -> 1200;
1226 -> 1196;
1227 -> 1192;
1228 -> 1022;
1228 -> 1190;
1228 -> 1227;
1228 -> 1192;
1229 -> 1022;
1229 -> 1190;
1229 -> 1052;
1230 -> 1052;
1231 -> 1229;
1231 -> 1230;
1232 -> 1195;
1232 -> 1230;
1233 -> 1232;
1233 -> 1213;
1233 -> 1230;
1234 -> 0;
1234 -> 1230;
1235 -> 1230;
1236 -> 1233;
1236 -> 1235;
1237 -> 1234;
1237 -> 1235;
1238 -> 1231;
1238 -> 1230;
1239 -> 1236;
1239 -> 1238;
1239 -> 1230;
1240 -> 1239;
1240 -> 1230;
1241 -> 1052;
1242 -> 1241;
1242 -> 1238;
1243 -> 1242;
1243 -> 1052;
1244 -> 1041;
1244 -> 1052;
1245 -> 1240;
1245 -> 1052;
1246 -> 1244;
1246 -> 1245;
1246 -> 1243;
1246 -> 1039;
1246 -> 1040;
1246 -> 1214;
1246 -> 1213;
1246 -> 1203;
1246 -> 1215;
1246 -> 1210;
1246 -> 1223;
1246 -> 1217;
1246 -> 1226;
1246 -> 1219;
1246 -> 1220;
1246 -> 1238;
1246 -> 1052;
1247 -> 1052;
1248 -> 1240;
1248 -> 1021;
1249 -> 1002;
1249 -> 1248;
1249 -> 1246;
1249 -> 998;
1250 -> 976;
1250 -> 956;
1251 -> 961;
1251 -> 1249;
1251 -> 1250;
1251 -> 956;
1252 -> 1249;
1252 -> 956;
1253 -> 779;
1253 -> 1252;
1253 -> 1251;
1253 -> 750;
1254 -> 1253;
1254 -> 962;
1254 -> 956;
1255 -> 960;
1255 -> 1253;
1255 -> 956;
1256 -> 960;
1256 -> 1255;
1257 -> 1255;
1258 -> 1256;
1258 -> 1003;
1259 -> 1256;
1259 -> 1003;
1260 -> 1259;
1260 -> 1256;
1260 -> 1003;
1261 -> 1258;
1261 -> 1003;
1262 -> 1260;
1262 -> 1261;
1262 -> 1256;
1262 -> 1003;
1263 -> 1003;
1264 -> 1259;
1264 -> 1262;
1264 -> 1003;
1265 -> 1258;
1265 -> 1003;
1266 -> 1259;
1266 -> 1264;
1267 -> 1258;
1267 -> 1264;
1268 -> 1096;
1268 -> 1266;
1269 -> 1258;
1269 -> 1003;
1270 -> 1268;
1270 -> 1003;
1271 -> 1003;
1272 -> 1269;
1272 -> 1271;
1273 -> 1270;
1273 -> 1271;
1274 -> 1273;
1274 -> 1271;
1275 -> 1271;
1276 -> 1271;
1277 -> 1271;
1278 -> 1276;
1278 -> 1277;
1279 -> 1276;
1279 -> 1003;
1280 -> 1003;
1281 -> 1003;
1282 -> 1259;
1282 -> 1281;
1283 -> 1282;
1283 -> 1266;
1283 -> 1281;
1284 -> 1283;
1284 -> 1003;
1285 -> 1279;
1285 -> 1003;
1286 -> 1280;
1286 -> 1003;
1287 -> 1285;
1287 -> 1286;
1287 -> 1284;
1287 -> 1272;
1287 -> 1273;
1287 -> 1266;
1287 -> 1003;
1288 -> 1003;
1289 -> 1258;
1289 -> 1287;
1290 -> 1287;
1291 -> 1289;
1291 -> 1290;
1291 -> 1287;
1292 -> 1289;
1292 -> 1291;
1293 -> 0;
1293 -> 1291;
1294 -> 1291;
1295 -> 1292;
1295 -> 1294;
1296 -> 1293;
1296 -> 1294;
1297 -> 1296;
1297 -> 1294;
1298 -> 1294;
1299 -> 1287;
1300 -> 1268;
1300 -> 1096;
1300 -> 1287;
1301 -> 1268;
1301 -> 0;
1301 -> 1287;
1302 -> 1258;
1302 -> 1295;
1302 -> 1287;
1303 -> 1287;
1304 -> 1302;
1304 -> 1303;
1305 -> 1295;
1305 -> 1303;
1306 -> 1287;
1307 -> 1306;
1307 -> 1304;
1308 -> 1307;
1308 -> 1287;
1309 -> 1279;
1309 -> 1287;
1310 -> 1304;
1310 -> 1287;
1311 -> 1287;
1312 -> 1304;
1312 -> 1003;
1313 -> 1256;
1313 -> 1312;
1313 -> 1308;
1313 -> 998;
1314 -> 779;
1314 -> 753;
1315 -> 779;
1315 -> 753;
1316 -> 779;
1316 -> 753;
1317 -> 753;
1318 -> 1315;
1318 -> 1317;
1318 -> 753;
1319 -> 1316;
1319 -> 753;
1320 -> 1316;
1320 -> 1313;
1320 -> 1314;
1320 -> 753;
1321 -> 1315;
1321 -> 753;
1322 -> 753;
1323 -> 753;
1324 -> 1319;
1324 -> 1323;
1325 -> 1320;
1325 -> 1323;
1326 -> 1321;
1326 -> 1323;
1327 -> 1322;
1327 -> 1323;
1328 -> 1324;
1328 -> 1323;
1329 -> 1325;
1329 -> 1323;
1330 -> 1323;
1331 -> 1328;
1331 -> 1330;
1332 -> 1329;
1332 -> 1330;
1333 -> 1327;
1333 -> 1330;
1334 -> 1333;
1334 -> 1330;
1335 -> 1333;
1335 -> 1330;
1336 -> 1333;
1336 -> 1330;
1337 -> 1333;
1337 -> 1330;
1338 -> 1333;
1338 -> 1330;
1339 -> 1330;
1340 -> 1331;
1340 -> 1339;
1340 -> 1330;
1341 -> 1332;
1341 -> 1330;
1342 -> 0;
1342 -> 1330;
1343 -> 1330;
1344 -> 1341;
1344 -> 1343;
1345 -> 1342;
1345 -> 1343;
1346 -> 1332;
1346 -> 1330;
1347 -> 0;
1347 -> 1330;
1348 -> 1330;
1349 -> 1346;
1349 -> 1348;
1350 -> 1347;
1350 -> 1348;
1351 -> 1331;
1351 -> 1333;
1351 -> 1330;
1352 -> 1332;
1352 -> 1333;
1352 -> 1330;
1353 -> 1331;
1353 -> 1313;
1353 -> 1333;
1353 -> 1330;
1354 -> 1327;
1354 -> 1323;
1355 -> 1323;
1356 -> 1326;
1356 -> 1355;
1356 -> 1323;
1357 -> 1326;
1357 -> 1327;
1357 -> 1323;
1358 -> 779;
1358 -> 1322;
1358 -> 1313;
1358 -> 1353;
1358 -> 1352;
1358 -> 1351;
1358 -> 1337;
1358 -> 1338;
1358 -> 1357;
1358 -> 750;
1359 -> 779;
1359 -> 753;
1360 -> 779;
1360 -> 753;
1361 -> 779;
1361 -> 753;
1362 -> 779;
1362 -> 753;
1363 -> 779;
1363 -> 753;
1364 -> 753;
1365 -> 1359;
1365 -> 1358;
1365 -> 753;
1366 -> 753;
1367 -> 1360;
1367 -> 1358;
1367 -> 753;
1368 -> 1364;
1368 -> 753;
1369 -> 1366;
1369 -> 753;
1370 -> 779;
1370 -> 753;
1371 -> 779;
1371 -> 753;
1372 -> 779;
1372 -> 753;
1373 -> 779;
1373 -> 753;
1374 -> 779;
1374 -> 753;
1375 -> 1370;
1375 -> 753;
1376 -> 1371;
1376 -> 753;
1377 -> 1372;
1377 -> 753;
1378 -> 1373;
1378 -> 753;
1379 -> 753;
1380 -> 1375;
1380 -> 1379;
1381 -> 1376;
1381 -> 1379;
1382 -> 1377;
1382 -> 1379;
1383 -> 1378;
1383 -> 1379;
1384 -> 1374;
1384 -> 1379;
1385 -> 1379;
1386 -> 1381;
1386 -> 1385;
1386 -> 1379;
1387 -> 1380;
1387 -> 1379;
1388 -> 1381;
1388 -> 1379;
1389 -> 1382;
1389 -> 1379;
1390 -> 1379;
1391 -> 1382;
1391 -> 1390;
1391 -> 1379;
1392 -> 1391;
1392 -> 1383;
1392 -> 1379;
1393 -> 1379;
1394 -> 1387;
1394 -> 1393;
1395 -> 1388;
1395 -> 1393;
1396 -> 1389;
1396 -> 1393;
1397 -> 1392;
1397 -> 1393;
1398 -> 1384;
1398 -> 1393;
1399 -> 1394;
1399 -> 1358;
1399 -> 1393;
1400 -> 1394;
1400 -> 1399;
1401 -> 1395;
1401 -> 1399;
1402 -> 1399;
1403 -> 1400;
1403 -> 1402;
1404 -> 1401;
1404 -> 1402;
1405 -> 1398;
1405 -> 1402;
1406 -> 1403;
1406 -> 1402;
1407 -> 1406;
1407 -> 1402;
1408 -> 1404;
1408 -> 1402;
1409 -> 1402;
1410 -> 1407;
1410 -> 1409;
1411 -> 1408;
1411 -> 1409;
1412 -> 1405;
1412 -> 1409;
1413 -> 1410;
1413 -> 1399;
1413 -> 1409;
1414 -> 1411;
1414 -> 1409;
1415 -> 1410;
1415 -> 1409;
1416 -> 1409;
1417 -> 1413;
1417 -> 1416;
1418 -> 1414;
1418 -> 1416;
1419 -> 1415;
1419 -> 1416;
1420 -> 1412;
1420 -> 1416;
1421 -> 1420;
1421 -> 1413;
1421 -> 1416;
1422 -> 1417;
1422 -> 1416;
1423 -> 1419;
1423 -> 1416;
1424 -> 1418;
1424 -> 1416;
1425 -> 1416;
1426 -> 1421;
1426 -> 1425;
1427 -> 1422;
1427 -> 1425;
1428 -> 1423;
1428 -> 1425;
1429 -> 1424;
1429 -> 1425;
1430 -> 1427;
1430 -> 1425;
1431 -> 1426;
1431 -> 1430;
1431 -> 1413;
1431 -> 1425;
1432 -> 1425;
1433 -> 1431;
1433 -> 1432;
1433 -> 1425;
1434 -> 1431;
1434 -> 1425;
1435 -> 1429;
1435 -> 1425;
1436 -> 1428;
1436 -> 1425;
1437 -> 1425;
1438 -> 1434;
1438 -> 1437;
1439 -> 1435;
1439 -> 1437;
1440 -> 1436;
1440 -> 1437;
1441 -> 1438;
1441 -> 1431;
1441 -> 1437;
1442 -> 1437;
1443 -> 1441;
1443 -> 1442;
1443 -> 1437;
1444 -> 1431;
1444 -> 1425;
1445 -> 1406;
1445 -> 1441;
1445 -> 1402;
1446 -> 1402;
1447 -> 1445;
1447 -> 1446;
1448 -> 1405;
1448 -> 1446;
1449 -> 1447;
1449 -> 1441;
1449 -> 1446;
1450 -> 1447;
1450 -> 1441;
1450 -> 1446;
1451 -> 1446;
1452 -> 1450;
1452 -> 1451;
1453 -> 1450;
1453 -> 1451;
1454 -> 1448;
1454 -> 1451;
1455 -> 1452;
1455 -> 1451;
1456 -> 1453;
1456 -> 1451;
1457 -> 1455;
1457 -> 1456;
1457 -> 1449;
1457 -> 1451;
1458 -> 1457;
1458 -> 1451;
1459 -> 1454;
1459 -> 1457;
1459 -> 1458;
1460 -> 0;
1460 -> 1458;
1461 -> 1458;
1462 -> 1454;
1462 -> 1461;
1463 -> 1462;
1463 -> 1459;
1463 -> 1461;
1464 -> 1461;
1465 -> 1462;
1465 -> 1463;
1465 -> 1464;
1466 -> 1465;
1466 -> 1464;
1467 -> 1464;
1468 -> 1466;
1468 -> 1467;
1469 -> 1468;
1469 -> 1465;
1469 -> 1467;
1470 -> 1469;
1471 -> 1470;
1471 -> 1464;
1472 -> 1471;
1472 -> 1464;
1473 -> 1444;
1473 -> 1402;
1474 -> 1402;
1475 -> 1473;
1475 -> 1474;
1476 -> 1475;
1476 -> 1474;
1477 -> 1474;
1478 -> 1474;
1479 -> 1476;
1479 -> 1478;
1480 -> 1477;
1480 -> 1478;
1481 -> 1479;
1481 -> 1478;
1482 -> 1479;
1482 -> 1480;
1482 -> 1478;
1483 -> 1478;
1484 -> 1483;
1484 -> 1480;
1484 -> 1478;
1485 -> 1478;
1486 -> 1485;
1486 -> 1480;
1486 -> 1478;
1487 -> 1477;
1487 -> 1402;
1488 -> 1402;
1489 -> 1472;
1489 -> 1487;
1489 -> 1488;
1489 -> 1482;
1489 -> 1484;
1489 -> 1486;
1489 -> 1402;
1490 -> 1379;
1491 -> 1489;
1491 -> 1490;
1492 -> 1491;
1492 -> 1489;
1492 -> 1490;
1493 -> 1492;
1493 -> 1379;
1494 -> 1493;
1495 -> 1494;
1495 -> 1493;
1496 -> 1495;
1497 -> 1489;
1497 -> 1496;
1498 -> 1497;
1498 -> 1489;
1498 -> 1496;
1499 -> 1498;
1499 -> 1495;
1500 -> 1384;
1500 -> 1495;
1501 -> 1380;
1501 -> 1495;
1502 -> 1381;
1502 -> 1495;
1503 -> 1500;
1503 -> 1501;
1503 -> 1502;
1503 -> 1499;
1503 -> 1465;
1503 -> 1489;
1503 -> 1495;
1504 -> 1495;
1505 -> 1503;
1505 -> 1504;
1506 -> 1503;
1506 -> 1504;
1507 -> 1503;
1507 -> 1504;
1508 -> 1503;
1508 -> 1504;
1509 -> 1503;
1509 -> 1504;
1510 -> 1505;
1510 -> 1504;
1511 -> 1506;
1511 -> 1504;
1512 -> 1507;
1512 -> 1504;
1513 -> 1508;
1513 -> 1504;
1514 -> 1504;
1515 -> 1510;
1515 -> 1514;
1516 -> 1511;
1516 -> 1514;
1517 -> 1512;
1517 -> 1514;
1518 -> 1513;
1518 -> 1514;
1519 -> 1509;
1519 -> 1514;
1520 -> 1516;
1520 -> 1503;
1520 -> 1514;
1521 -> 1515;
1521 -> 1520;
1522 -> 1516;
1522 -> 1520;
1523 -> 1517;
1523 -> 1520;
1524 -> 1518;
1524 -> 1520;
1525 -> 1520;
1526 -> 1519;
1526 -> 1525;
1527 -> 1526;
1527 -> 1503;
1527 -> 1525;
1528 -> 1527;
1528 -> 1520;
1529 -> 1520;
1530 -> 1519;
1530 -> 1529;
1531 -> 1529;
1532 -> 1530;
1532 -> 1531;
1533 -> 1532;
1533 -> 1503;
1533 -> 1531;
1534 -> 1533;
1534 -> 1529;
1535 -> 1534;
1535 -> 1529;
1536 -> 1534;
1536 -> 1503;
1536 -> 0;
1536 -> 1529;
1537 -> 1534;
1537 -> 1529;
1538 -> 1534;
1538 -> 1503;
1538 -> 1529;
1539 -> 1538;
1539 -> 1520;
1540 -> 1519;
1540 -> 1503;
1540 -> 1520;
1541 -> 1520;
1542 -> 1521;
1542 -> 1541;
1543 -> 1522;
1543 -> 1541;
1544 -> 1523;
1544 -> 1541;
1545 -> 1524;
1545 -> 1541;
1546 -> 1528;
1546 -> 1541;
1547 -> 1539;
1547 -> 1541;
1548 -> 1540;
1548 -> 1541;
1549 -> 1543;
1549 -> 1541;
1550 -> 1543;
1550 -> 1549;
1550 -> 0;
1550 -> 1541;
1551 -> 1543;
1551 -> 1549;
1551 -> 0;
1551 -> 1541;
1552 -> 1543;
1552 -> 1541;
1553 -> 1547;
1553 -> 1541;
1554 -> 1552;
1554 -> 1553;
1554 -> 1549;
1554 -> 1541;
1555 -> 1545;
1555 -> 1541;
1556 -> 1555;
1556 -> 1541;
1557 -> 1542;
1557 -> 1541;
1558 -> 1554;
1558 -> 1541;
1559 -> 1544;
1559 -> 1541;
1560 -> 1546;
1560 -> 1541;
1561 -> 1548;
1561 -> 1541;
1562 -> 1541;
1563 -> 1557;
1563 -> 1562;
1564 -> 1558;
1564 -> 1562;
1565 -> 1559;
1565 -> 1562;
1566 -> 1560;
1566 -> 1562;
1567 -> 1561;
1567 -> 1562;
1568 -> 1562;
1569 -> 1563;
1569 -> 1568;
1569 -> 1562;
1570 -> 1564;
1570 -> 1562;
1571 -> 1566;
1571 -> 1562;
1572 -> 1562;
1573 -> 1570;
1573 -> 1571;
1573 -> 1572;
1573 -> 1554;
1573 -> 1562;
1574 -> 1562;
1575 -> 1573;
1575 -> 1562;
1576 -> 1562;
1577 -> 1574;
1577 -> 1576;
1577 -> 1562;
1578 -> 1573;
1578 -> 1562;
1579 -> 1578;
1579 -> 1541;
1580 -> 1555;
1580 -> 1579;
1581 -> 1520;
1582 -> 1504;
1583 -> 1489;
1583 -> 1493;
1584 -> 1583;
1584 -> 753;
1585 -> 1371;
1585 -> 753;
1586 -> 1370;
1586 -> 753;
1587 -> 1372;
1587 -> 753;
1588 -> 753;
1589 -> 1584;
1589 -> 1588;
1590 -> 1585;
1590 -> 1588;
1591 -> 1586;
1591 -> 1588;
1592 -> 1587;
1592 -> 1588;
1593 -> 1374;
1593 -> 1588;
1594 -> 1588;
1595 -> 1589;
1595 -> 1594;
1596 -> 1595;
1596 -> 1489;
1596 -> 1594;
1597 -> 1596;
1597 -> 0;
1597 -> 1594;
1598 -> 1597;
1598 -> 1588;
1599 -> 1589;
1599 -> 1588;
1600 -> 753;
1601 -> 1599;
1601 -> 1600;
1602 -> 1601;
1602 -> 1489;
1602 -> 1600;
1603 -> 779;
1603 -> 1602;
1603 -> 1573;
1603 -> 750;
1604 -> 779;
1604 -> 753;
1605 -> 779;
1605 -> 753;
1606 -> 779;
1606 -> 753;
1607 -> 1604;
1607 -> 753;
1608 -> 753;
1609 -> 1605;
1609 -> 753;
1610 -> 753;
1611 -> 753;
1612 -> 1607;
1612 -> 1611;
1613 -> 1608;
1613 -> 1611;
1614 -> 1609;
1614 -> 1611;
1615 -> 1610;
1615 -> 1611;
1616 -> 1606;
1616 -> 1611;
1617 -> 1612;
1617 -> 1611;
1618 -> 1613;
1618 -> 1611;
1619 -> 1614;
1619 -> 1611;
1620 -> 1615;
1620 -> 1611;
1621 -> 1611;
1622 -> 1617;
1622 -> 1621;
1623 -> 1618;
1623 -> 1621;
1624 -> 1619;
1624 -> 1621;
1625 -> 1620;
1625 -> 1621;
1626 -> 1616;
1626 -> 1621;
1627 -> 1626;
1627 -> 1621;
1628 -> 1626;
1628 -> 1621;
1629 -> 1626;
1629 -> 1621;
1630 -> 1626;
1630 -> 1621;
1631 -> 1621;
1632 -> 1622;
1632 -> 1631;
1632 -> 1621;
1633 -> 1621;
1634 -> 1625;
1634 -> 1633;
1634 -> 1621;
1635 -> 1621;
1636 -> 1625;
1636 -> 1635;
1636 -> 1621;
1637 -> 1622;
1637 -> 1626;
1637 -> 1621;
1638 -> 1623;
1638 -> 1626;
1638 -> 1621;
1639 -> 1624;
1639 -> 1626;
1639 -> 1621;
1640 -> 1625;
1640 -> 1626;
1640 -> 1621;
1641 -> 779;
1641 -> 1603;
1641 -> 1637;
1641 -> 1638;
1641 -> 1639;
1641 -> 1640;
1641 -> 750;
1642 -> 1641;
1642 -> 750;
1643 -> 752;
1643 -> 750;
1644 -> 750;
1645 -> 1642;
1645 -> 1644;
1646 -> 1643;
1646 -> 1644;
1647 -> 1645;
1647 -> 1644;
1648 -> 1646;
1648 -> 1644;
1649 -> 1644;
1650 -> 1647;
1650 -> 1649;
1651 -> 1648;
1651 -> 1649;
1652 -> 1650;
1652 -> 1649;
1653 -> 1651;
1653 -> 1649;
1654 -> 1649;
1655 -> 1649;
1656 -> 1652;
1656 -> 1655;
1657 -> 1653;
1657 -> 1655;
1658 -> 1654;
1658 -> 1655;
1659 -> 1655;
1660 -> 1657;
1660 -> 1659;
1660 -> 1655;
1661 -> 1657;
1661 -> 1655;
1662 -> 1661;
1662 -> 575;
1662 -> 749;
1662 -> 720;
1662 -> 721;
1662 -> 730;
1662 -> 722;
1662 -> 723;
1662 -> 747;
1662 -> 726;
1662 -> 727;
1662 -> 740;
1662 -> 728;
1662 -> 729;
1662 -> 725;
1662 -> 744;
1662 -> 745;
1662 -> 746;
1662 -> 712;
1662 -> 655;
1662 -> 601;
1662 -> 1655;
1663 -> 1655;
1664 -> 1661;
1664 -> 1663;
1664 -> 575;
1664 -> 749;
1664 -> 720;
1664 -> 721;
1664 -> 730;
1664 -> 722;
1664 -> 723;
1664 -> 747;
1664 -> 726;
1664 -> 727;
1664 -> 740;
1664 -> 728;
1664 -> 729;
1664 -> 725;
1664 -> 744;
1664 -> 745;
1664 -> 746;
1664 -> 712;
1664 -> 655;
1664 -> 601;
1664 -> 1655;
1665 -> 1664;
1665 -> 1663;
1666 -> 1665;
1666 -> 1664;
1666 -> 1663;
1667 -> 1657;
1667 -> 1655;
1668 -> 1667;
1668 -> 1666;
1668 -> 1655;
1669 -> 1655;
1670 -> 1667;
1670 -> 1669;
1670 -> 1666;
1670 -> 1655;
1671 -> 1670;
1671 -> 1669;
1672 -> 1671;
1672 -> 1670;
1672 -> 1669;
1673 -> 1656;
1673 -> 1655;
1674 -> 1658;
1674 -> 1666;
1674 -> 1672;
1674 -> 1655;
1675 -> 1673;
1675 -> 1674;
1675 -> 1655;
1676 -> 1655;
1677 -> 1675;
1677 -> 1676;
1678 -> 1675;
1678 -> 1676;
1679 -> 1675;
1679 -> 1676;
1680 -> 1675;
1680 -> 1676;
1681 -> 1675;
1681 -> 1676;
1682 -> 1681;
1682 -> 1676;
1683 -> 1681;
1683 -> 1676;
1684 -> 1681;
1684 -> 1676;
1685 -> 1681;
1685 -> 1676;
1686 -> 1681;
1686 -> 1676;
1687 -> 1681;
1687 -> 1676;
1688 -> 1681;
1688 -> 1676;
1689 -> 1681;
1689 -> 1676;
1690 -> 1681;
1690 -> 1676;
1691 -> 1681;
1691 -> 1676;
1692 -> 1681;
1692 -> 1676;
1693 -> 1677;
1693 -> 1675;
1693 -> 1681;
1693 -> 1676;
1694 -> 1677;
1694 -> 1675;
1694 -> 1681;
1694 -> 1676;
1695 -> 1677;
1695 -> 1675;
1695 -> 1681;
1695 -> 1676;
1696 -> 1677;
1696 -> 1675;
1696 -> 1681;
1696 -> 1676;
1697 -> 1679;
1697 -> 1676;
1698 -> 1697;
1699 -> 1698;
1699 -> 1681;
1699 -> 1676;
1700 -> 1680;
1700 -> 1676;
1701 -> 1700;
1702 -> 1701;
1702 -> 1681;
1702 -> 1676;
1703 -> 1676;
1704 -> 1676;
1705 -> 1677;
1705 -> 1675;
1705 -> 1704;
1705 -> 1676;
1706 -> 1677;
1706 -> 1675;
1706 -> 1676;
1707 -> 0;
1707 -> 1676;
1708 -> 1677;
1708 -> 1705;
1709 -> 1705;
1710 -> 1708;
1710 -> 1709;
1710 -> 1705;
1711 -> 1708;
1711 -> 1706;
1711 -> 1681;
1711 -> 1710;
1712 -> 1677;
1712 -> 1706;
1712 -> 1681;
1712 -> 1710;
1713 -> 1678;
1713 -> 1681;
1713 -> 1676;
1714 -> 1681;
1714 -> 1713;
1714 -> 1676;
1715 -> 1681;
1715 -> 1696;
1715 -> 1706;
1715 -> 1714;
1716 -> 1715;
1717 -> 1716;
1717 -> 1681;
1717 -> 1715;
1718 -> 1714;
1719 -> 1708;
1719 -> 1718;
1719 -> 1714;
1720 -> 1708;
1720 -> 1716;
1720 -> 1681;
1720 -> 1719;
1721 -> 1714;
1722 -> 1681;
1722 -> 1720;
1722 -> 1721;
1722 -> 1714;
1723 -> 1681;
1723 -> 1720;
1723 -> 1716;
1723 -> 1721;
1723 -> 1714;
1724 -> 1681;
1724 -> 1696;
1724 -> 1716;
1724 -> 1676;
1725 -> 1724;
1725 -> 1681;
1725 -> 1676;
1726 -> 1675;
1726 -> 1724;
1726 -> 1712;
1726 -> 1694;
1726 -> 1695;
1726 -> 1717;
1726 -> 1720;
1726 -> 1725;
1726 -> 1688;
1726 -> 1711;
1726 -> 1713;
1726 -> 1699;
1726 -> 1702;
1726 -> 1692;
1726 -> 1681;
1726 -> 1696;
1726 -> 1655;
1727 -> 1657;
1727 -> 1655;
1728 -> 1727;
1728 -> 1672;
1728 -> 1655;
1729 -> 1728;
1730 -> 1729;
1730 -> 1726;
1730 -> 1672;
1730 -> 1728;
1731 -> 1730;
1731 -> 1729;
1732 -> 1730;
1732 -> 1729;
1733 -> 1731;
1733 -> 1729;
1734 -> 1729;
1735 -> 1733;
1735 -> 1734;
1735 -> 1729;
1736 -> 1733;
1736 -> 1730;
1736 -> 1729;
1737 -> 1732;
1737 -> 1730;
1737 -> 1736;
1737 -> 1729;
1738 -> 1732;
1738 -> 1737;
1738 -> 1733;
1738 -> 1729;
1739 -> 1732;
1739 -> 1737;
1739 -> 1733;
1739 -> 1729;
1740 -> 1732;
1740 -> 1737;
1740 -> 1729;
1741 -> 1732;
1741 -> 1737;
1741 -> 1733;
1741 -> 1740;
1742 -> 1729;
1743 -> 1732;
1743 -> 1737;
1743 -> 1742;
1743 -> 1729;
1744 -> 1743;
1745 -> 1732;
1745 -> 1737;
1745 -> 1733;
1745 -> 1744;
1746 -> 1729;
1747 -> 1732;
1747 -> 1737;
1747 -> 1746;
1747 -> 1729;
1748 -> 1729;
1749 -> 1733;
1749 -> 1737;
1749 -> 1748;
1749 -> 1729;
1750 -> 1732;
1750 -> 1737;
1750 -> 1733;
1750 -> 1729;
1751 -> 1729;
1752 -> 1732;
1752 -> 1737;
1752 -> 1751;
1752 -> 1729;
1753 -> 1752;
1754 -> 1752;
1755 -> 1732;
1755 -> 1754;
1756 -> 1754;
1757 -> 1755;
1757 -> 1737;
1757 -> 1756;
1757 -> 1754;
1758 -> 1755;
1758 -> 1737;
1758 -> 1757;
1759 -> 1757;
1760 -> 1758;
1760 -> 1755;
1760 -> 1757;
1761 -> 1755;
1761 -> 1737;
1761 -> 1760;
1761 -> 1754;
1762 -> 1761;
1762 -> 1752;
1763 -> 1752;
1764 -> 1733;
1764 -> 1763;
1765 -> 1763;
1766 -> 1764;
1766 -> 1737;
1766 -> 1760;
1766 -> 1765;
1766 -> 1763;
1767 -> 1764;
1767 -> 1737;
1767 -> 1760;
1767 -> 1766;
1767 -> 1763;
1768 -> 1767;
1768 -> 1752;
1769 -> 1732;
1769 -> 1737;
1769 -> 1733;
1769 -> 1752;
1770 -> 1762;
1770 -> 1769;
1771 -> 1768;
1771 -> 1769;
1772 -> 1770;
1772 -> 1771;
1772 -> 1737;
1772 -> 1760;
1772 -> 1766;
1772 -> 1758;
1772 -> 1759;
1772 -> 1769;
1773 -> 1732;
1773 -> 1772;
1773 -> 1733;
1773 -> 1729;
1774 -> 1729;
1775 -> 1730;
1775 -> 1774;
1775 -> 1772;
1775 -> 1728;
1776 -> 1728;
1777 -> 1775;
1777 -> 1776;
1777 -> 1728;
1778 -> 1775;
1778 -> 1777;
1779 -> 1655;
1780 -> 1726;
1780 -> 1778;
1780 -> 1779;
1780 -> 1655;
1781 -> 1655;
1782 -> 1657;
1782 -> 1655;
1783 -> 1656;
1783 -> 1655;
1784 -> 1655;
1785 -> 1782;
1785 -> 1784;
1786 -> 1783;
1786 -> 1784;
1787 -> 1784;
1788 -> 1784;
1789 -> 1786;
1789 -> 1784;
1790 -> 1789;
1790 -> 1778;
1790 -> 1784;
1791 -> 1778;
1791 -> 1784;
1792 -> 1790;
1792 -> 1784;
1793 -> 1787;
1793 -> 1792;
1794 -> 1793;
1794 -> 1784;
1795 -> 1793;
1795 -> 1784;
1796 -> 1795;
1796 -> 1784;
1797 -> 1785;
1797 -> 1784;
1798 -> 1797;
1798 -> 1778;
1798 -> 1784;
1799 -> 1784;
1800 -> 1797;
1800 -> 1799;
1800 -> 1778;
1800 -> 1784;
1801 -> 1785;
1801 -> 1784;
1802 -> 1801;
1802 -> 1800;
1802 -> 1784;
1803 -> 1784;
1804 -> 1801;
1804 -> 1803;
1804 -> 1800;
1804 -> 1784;
1805 -> 1785;
1805 -> 1784;
1806 -> 1784;
1807 -> 1805;
1807 -> 1806;
1809 -> 1808;
1810 -> 1808;
1811 -> 1810;
1811 -> 1806;
1812 -> 1806;
1813 -> 1807;
1813 -> 1806;
1814 -> 1813;
1814 -> 1804;
1814 -> 1806;
1815 -> 1814;
1816 -> 1814;
1817 -> 1812;
1817 -> 1816;
1817 -> 1814;
1818 -> 1814;
1819 -> 1806;
1820 -> 1819;
1820 -> 1784;
1821 -> 1786;
1821 -> 1820;
1822 -> 1820;
1823 -> 1821;
1823 -> 1822;
1824 -> 1823;
1824 -> 1822;
1825 -> 1822;
1826 -> 1810;
1826 -> 1822;
1827 -> 1824;
1827 -> 1825;
1827 -> 1826;
1827 -> 1804;
1827 -> 1822;
1828 -> 1784;
1829 -> 1828;
1829 -> 1784;
1830 -> 1784;
1831 -> 1784;
1832 -> 1828;
1832 -> 1831;
1832 -> 1829;
1832 -> 1784;
1833 -> 1784;
1834 -> 1785;
1834 -> 1784;
1835 -> 1834;
1835 -> 1827;
1835 -> 1784;
1836 -> 1835;
1837 -> 1796;
1837 -> 1835;
1838 -> 1835;
1839 -> 1836;
1839 -> 1838;
1840 -> 1837;
1840 -> 1838;
1841 -> 1838;
1842 -> 1841;
1842 -> 1840;
1842 -> 1838;
1843 -> 1838;
1844 -> 1839;
1844 -> 1843;
1845 -> 1843;
1846 -> 1843;
1847 -> 1845;
1847 -> 1846;
1847 -> 1843;
1848 -> 1843;
1849 -> 1844;
1849 -> 1827;
1849 -> 1848;
1849 -> 1843;
1850 -> 1844;
1850 -> 1827;
1850 -> 1849;
1851 -> 1845;
1851 -> 1850;
1851 -> 1847;
1851 -> 1849;
1852 -> 1849;
1853 -> 1845;
1853 -> 1852;
1853 -> 1851;
1853 -> 1849;
1854 -> 1844;
1854 -> 1827;
1854 -> 1849;
1855 -> 1845;
1855 -> 1854;
1855 -> 1853;
1855 -> 1849;
1856 -> 1843;
1857 -> 1844;
1857 -> 1827;
1857 -> 1856;
1857 -> 1843;
1858 -> 1857;
1859 -> 1858;
1860 -> 1845;
1860 -> 1859;
1860 -> 1855;
1860 -> 1858;
1861 -> 1844;
1861 -> 1827;
1861 -> 1858;
1862 -> 1845;
1862 -> 1861;
1862 -> 1860;
1862 -> 1858;
1863 -> 1857;
1864 -> 1845;
1864 -> 1863;
1864 -> 1862;
1864 -> 1857;
1865 -> 1844;
1865 -> 1827;
1865 -> 1843;
1866 -> 1843;
1867 -> 1845;
1867 -> 1866;
1867 -> 1864;
1867 -> 1843;
1868 -> 1843;
1869 -> 1844;
1869 -> 1827;
1869 -> 1868;
1869 -> 1843;
1870 -> 1869;
1871 -> 1845;
1871 -> 1870;
1871 -> 1867;
1871 -> 1869;
1872 -> 1869;
1873 -> 1872;
1873 -> 1869;
1874 -> 1869;
1875 -> 1873;
1875 -> 1869;
1876 -> 1875;
1877 -> 1845;
1877 -> 1876;
1877 -> 1871;
1877 -> 1875;
1878 -> 1873;
1878 -> 1875;
1879 -> 1845;
1879 -> 1878;
1879 -> 1877;
1879 -> 1875;
1880 -> 1875;
1881 -> 1845;
1881 -> 1880;
1881 -> 1879;
1881 -> 1875;
1882 -> 1875;
1883 -> 1882;
1884 -> 1845;
1884 -> 1883;
1884 -> 1881;
1884 -> 1882;
1885 -> 1869;
1886 -> 1845;
1886 -> 1885;
1886 -> 1884;
1886 -> 1869;
1887 -> 1843;
1888 -> 1844;
1888 -> 1875;
1888 -> 1887;
1888 -> 1843;
1889 -> 1888;
1890 -> 1845;
1890 -> 1889;
1890 -> 1886;
1890 -> 1888;
1891 -> 1888;
1892 -> 1845;
1892 -> 1891;
1892 -> 1890;
1892 -> 1888;
1893 -> 1888;
1894 -> 1845;
1894 -> 1893;
1894 -> 1892;
1894 -> 1888;
1895 -> 1888;
1896 -> 1845;
1896 -> 1895;
1896 -> 1894;
1896 -> 1888;
1897 -> 1888;
1898 -> 1845;
1898 -> 1897;
1898 -> 1896;
1898 -> 1888;
1899 -> 1844;
1899 -> 1875;
1899 -> 1843;
1900 -> 1843;
1901 -> 1844;
1901 -> 1875;
1901 -> 1900;
1901 -> 1843;
1902 -> 1843;
1903 -> 1844;
1903 -> 1875;
1903 -> 1902;
1903 -> 1843;
1904 -> 1843;
1905 -> 1844;
1905 -> 1875;
1905 -> 1904;
1905 -> 1843;
1906 -> 1845;
1906 -> 1898;
1906 -> 1843;
1907 -> 1906;
1907 -> 1838;
1908 -> 1842;
1908 -> 1907;
1908 -> 1838;
1909 -> 1833;
1909 -> 1908;
1909 -> 1835;
1910 -> 1828;
1910 -> 1784;
1911 -> 1833;
1911 -> 1784;
1912 -> 1784;
1913 -> 1910;
1913 -> 1912;
1914 -> 1911;
1914 -> 1912;
1915 -> 1914;
1915 -> 1909;
1915 -> 1912;
1916 -> 1912;
1917 -> 1916;
1917 -> 1915;
1917 -> 1912;
1918 -> 1914;
1918 -> 1916;
1918 -> 1909;
1918 -> 1917;
1919 -> 1913;
1919 -> 1918;
1919 -> 1832;
1919 -> 1917;
1920 -> 1917;
1921 -> 1913;
1921 -> 1919;
1921 -> 1917;
1922 -> 1784;
1923 -> 1784;
1924 -> 1828;
1924 -> 1923;
1924 -> 1921;
1924 -> 1784;
1925 -> 1784;
1926 -> 1827;
1926 -> 1875;
1926 -> 1784;
1927 -> 1784;
1928 -> 1926;
1928 -> 1784;
1929 -> 1928;
1929 -> 1927;
1930 -> 1928;
1930 -> 1927;
1931 -> 1928;
1931 -> 1927;
1932 -> 1927;
1933 -> 1929;
1933 -> 1932;
1933 -> 1927;
1934 -> 1927;
1935 -> 1930;
1935 -> 1934;
1935 -> 1927;
1936 -> 1930;
1936 -> 1928;
1936 -> 1927;
1937 -> 1929;
1937 -> 1928;
1937 -> 1936;
1937 -> 1927;
1938 -> 1927;
1939 -> 1937;
1939 -> 1938;
1939 -> 1927;
1940 -> 1930;
1940 -> 1928;
1940 -> 1927;
1941 -> 1929;
1941 -> 1928;
1941 -> 1940;
1941 -> 1927;
1942 -> 1930;
1942 -> 1941;
1942 -> 1927;
1943 -> 1942;
1943 -> 1938;
1943 -> 1927;
1944 -> 1926;
1944 -> 1941;
1945 -> 1944;
1945 -> 1941;
1946 -> 1945;
1946 -> 1941;
1947 -> 1941;
1948 -> 1941;
1949 -> 1794;
1949 -> 1941;
1950 -> 1828;
1950 -> 1949;
1951 -> 1796;
1951 -> 1949;
1952 -> 1949;
1953 -> 1950;
1953 -> 1952;
1954 -> 1951;
1954 -> 1952;
1955 -> 1952;
1956 -> 1955;
1956 -> 1954;
1956 -> 1952;
1957 -> 1953;
1957 -> 1955;
1957 -> 1956;
1957 -> 1924;
1957 -> 1952;
1958 -> 1949;
1959 -> 1949;
1960 -> 1828;
1960 -> 1959;
1960 -> 1957;
1960 -> 1949;
1961 -> 1944;
1961 -> 1945;
1961 -> 1949;
1962 -> 1828;
1962 -> 1961;
1962 -> 1960;
1962 -> 1949;
1963 -> 1944;
1963 -> 1961;
1963 -> 1949;
1964 -> 1963;
1964 -> 1961;
1964 -> 1949;
1965 -> 1828;
1965 -> 1964;
1966 -> 1796;
1966 -> 1964;
1967 -> 1964;
1968 -> 1965;
1968 -> 1967;
1969 -> 1966;
1969 -> 1967;
1970 -> 1967;
1971 -> 1970;
1971 -> 1969;
1971 -> 1967;
1972 -> 1968;
1972 -> 1970;
1972 -> 1971;
1972 -> 1962;
1972 -> 1967;
1973 -> 1964;
1974 -> 1964;
1975 -> 1828;
1975 -> 1974;
1975 -> 1972;
1975 -> 1964;
1976 -> 1964;
1977 -> 1828;
1977 -> 1976;
1977 -> 1975;
1977 -> 1964;
1978 -> 1944;
1978 -> 1941;
1979 -> 1941;
1980 -> 1798;
1980 -> 1941;
1981 -> 1802;
1981 -> 1941;
1982 -> 1941;
1983 -> 1978;
1983 -> 1982;
1984 -> 1979;
1984 -> 1982;
1985 -> 1980;
1985 -> 1982;
1986 -> 1981;
1986 -> 1982;
1987 -> 1979;
1987 -> 1982;
1988 -> 1987;
1988 -> 1982;
1989 -> 1987;
1989 -> 1982;
1990 -> 1987;
1990 -> 1982;
1991 -> 1987;
1991 -> 1982;
1992 -> 1987;
1992 -> 1982;
1993 -> 1987;
1993 -> 1982;
1994 -> 1987;
1994 -> 1982;
1995 -> 1987;
1995 -> 1982;
1996 -> 1987;
1996 -> 1982;
1997 -> 1983;
1997 -> 1976;
1997 -> 1987;
1997 -> 1982;
1998 -> 1983;
1998 -> 1976;
1998 -> 1987;
1998 -> 1982;
1999 -> 1983;
1999 -> 1976;
1999 -> 1987;
1999 -> 1982;
2000 -> 1983;
2000 -> 1976;
2000 -> 1987;
2000 -> 1982;
2001 -> 1982;
2002 -> 1983;
2002 -> 1976;
2002 -> 1982;
2003 -> 1987;
2004 -> 1987;
2004 -> 2002;
2004 -> 2003;
2005 -> 1987;
2005 -> 2002;
2005 -> 2000;
2005 -> 2003;
2006 -> 1979;
2006 -> 1941;
2007 -> 1785;
2007 -> 1941;
2008 -> 1979;
2008 -> 1941;
2009 -> 2007;
2009 -> 2008;
2009 -> 2000;
2009 -> 2002;
2009 -> 1998;
2009 -> 1999;
2009 -> 1987;
2009 -> 1984;
2009 -> 1985;
2009 -> 1986;
2009 -> 1941;
2010 -> 1941;
2011 -> 2010;
2012 -> 2009;
2012 -> 2011;
2012 -> 2010;
2013 -> 2009;
2013 -> 2010;
2014 -> 2009;
2014 -> 2010;
2015 -> 2009;
2015 -> 2010;
2016 -> 2009;
2016 -> 2015;
2017 -> 2010;
2018 -> 2009;
2018 -> 2017;
2018 -> 2010;
2019 -> 2018;
2020 -> 2009;
2020 -> 2019;
2021 -> 2010;
2022 -> 2009;
2022 -> 2021;
2022 -> 2010;
2023 -> 2010;
2024 -> 2009;
2024 -> 2023;
2024 -> 2010;
2025 -> 2009;
2025 -> 2010;
2026 -> 2009;
2027 -> 2009;
2027 -> 2010;
2028 -> 1941;
2029 -> 2009;
2029 -> 2028;
2029 -> 1941;
2030 -> 1785;
2030 -> 2009;
2030 -> 2029;
2031 -> 1979;
2031 -> 1941;
2032 -> 1796;
2032 -> 1941;
2033 -> 1941;
2034 -> 2031;
2034 -> 2033;
2035 -> 2032;
2035 -> 2033;
2036 -> 2033;
2037 -> 2036;
2037 -> 2035;
2037 -> 2033;
2038 -> 2033;
2039 -> 2033;
2040 -> 2038;
2040 -> 2039;
2040 -> 2033;
2041 -> 2033;
2042 -> 2034;
2042 -> 2009;
2042 -> 2041;
2042 -> 2033;
2043 -> 2034;
2043 -> 2009;
2043 -> 2042;
2044 -> 2038;
2044 -> 2043;
2044 -> 2040;
2044 -> 2042;
2045 -> 2042;
2046 -> 2038;
2046 -> 2045;
2046 -> 2044;
2046 -> 2042;
2047 -> 2034;
2047 -> 2009;
2047 -> 2042;
2048 -> 2038;
2048 -> 2047;
2048 -> 2046;
2048 -> 2042;
2049 -> 2033;
2050 -> 2034;
2050 -> 2009;
2050 -> 2049;
2050 -> 2033;
2051 -> 2050;
2052 -> 2051;
2053 -> 2038;
2053 -> 2052;
2053 -> 2048;
2053 -> 2051;
2054 -> 2034;
2054 -> 2009;
2054 -> 2051;
2055 -> 2038;
2055 -> 2054;
2055 -> 2053;
2055 -> 2051;
2056 -> 2050;
2057 -> 2038;
2057 -> 2056;
2057 -> 2055;
2057 -> 2050;
2058 -> 2034;
2058 -> 2009;
2058 -> 2033;
2059 -> 2033;
2060 -> 2038;
2060 -> 2059;
2060 -> 2057;
2060 -> 2033;
2061 -> 2034;
2061 -> 2009;
2061 -> 2033;
2062 -> 2061;
2063 -> 2038;
2063 -> 2062;
2063 -> 2060;
2063 -> 2061;
2064 -> 2061;
2065 -> 2038;
2065 -> 2064;
2065 -> 2063;
2065 -> 2061;
2066 -> 2061;
2067 -> 2038;
2067 -> 2066;
2067 -> 2065;
2067 -> 2061;
2068 -> 2061;
2069 -> 2038;
2069 -> 2068;
2069 -> 2067;
2069 -> 2061;
2070 -> 2061;
2071 -> 2070;
2072 -> 2038;
2072 -> 2071;
2072 -> 2069;
2072 -> 2070;
2073 -> 2061;
2074 -> 2038;
2074 -> 2073;
2074 -> 2072;
2074 -> 2061;
2075 -> 2033;
2076 -> 2034;
2076 -> 2061;
2076 -> 2075;
2076 -> 2033;
2077 -> 2076;
2078 -> 2038;
2078 -> 2077;
2078 -> 2074;
2078 -> 2076;
2079 -> 2076;
2080 -> 2038;
2080 -> 2079;
2080 -> 2078;
2080 -> 2076;
2081 -> 2076;
2082 -> 2038;
2082 -> 2081;
2082 -> 2080;
2082 -> 2076;
2083 -> 2076;
2084 -> 2038;
2084 -> 2083;
2084 -> 2082;
2084 -> 2076;
2085 -> 2076;
2086 -> 2038;
2086 -> 2085;
2086 -> 2084;
2086 -> 2076;
2087 -> 2034;
2087 -> 2061;
2087 -> 2033;
2088 -> 2033;
2089 -> 2034;
2089 -> 2061;
2089 -> 2088;
2089 -> 2033;
2090 -> 2033;
2091 -> 2034;
2091 -> 2061;
2091 -> 2090;
2091 -> 2033;
2092 -> 2033;
2093 -> 2034;
2093 -> 2061;
2093 -> 2092;
2093 -> 2033;
2094 -> 2038;
2094 -> 2086;
2094 -> 2033;
2095 -> 2094;
2095 -> 2033;
2096 -> 2037;
2096 -> 2095;
2096 -> 2033;
2097 -> 1828;
2097 -> 2096;
2097 -> 1977;
2097 -> 1941;
2098 -> 2030;
2098 -> 1941;
2099 -> 1796;
2099 -> 1941;
2100 -> 1941;
2101 -> 2098;
2101 -> 2100;
2102 -> 2099;
2102 -> 2100;
2103 -> 2100;
2104 -> 2103;
2104 -> 2102;
2104 -> 2100;
2105 -> 2100;
2106 -> 2100;
2107 -> 2105;
2107 -> 2106;
2107 -> 2100;
2108 -> 2100;
2109 -> 2101;
2109 -> 2061;
2109 -> 2108;
2109 -> 2100;
2110 -> 2101;
2110 -> 2061;
2110 -> 2109;
2111 -> 2105;
2111 -> 2110;
2111 -> 2107;
2111 -> 2109;
2112 -> 2109;
2113 -> 2105;
2113 -> 2112;
2113 -> 2111;
2113 -> 2109;
2114 -> 2101;
2114 -> 2061;
2114 -> 2109;
2115 -> 2105;
2115 -> 2114;
2115 -> 2113;
2115 -> 2109;
2116 -> 2100;
2117 -> 2101;
2117 -> 2061;
2117 -> 2116;
2117 -> 2100;
2118 -> 2117;
2119 -> 2118;
2120 -> 2105;
2120 -> 2119;
2120 -> 2115;
2120 -> 2118;
2121 -> 2101;
2121 -> 2061;
2121 -> 2118;
2122 -> 2105;
2122 -> 2121;
2122 -> 2120;
2122 -> 2118;
2123 -> 2117;
2124 -> 2105;
2124 -> 2123;
2124 -> 2122;
2124 -> 2117;
2125 -> 2101;
2125 -> 2061;
2125 -> 2100;
2126 -> 2100;
2127 -> 2105;
2127 -> 2126;
2127 -> 2124;
2127 -> 2100;
2128 -> 2101;
2128 -> 2061;
2128 -> 2100;
2129 -> 2128;
2130 -> 2105;
2130 -> 2129;
2130 -> 2127;
2130 -> 2128;
2131 -> 2128;
2132 -> 2105;
2132 -> 2131;
2132 -> 2130;
2132 -> 2128;
2133 -> 2128;
2134 -> 2105;
2134 -> 2133;
2134 -> 2132;
2134 -> 2128;
2135 -> 2128;
2136 -> 2105;
2136 -> 2135;
2136 -> 2134;
2136 -> 2128;
2137 -> 2128;
2138 -> 2137;
2139 -> 2105;
2139 -> 2138;
2139 -> 2136;
2139 -> 2137;
2140 -> 2128;
2141 -> 2105;
2141 -> 2140;
2141 -> 2139;
2141 -> 2128;
2142 -> 2100;
2143 -> 2101;
2143 -> 2128;
2143 -> 2142;
2143 -> 2100;
2144 -> 2143;
2145 -> 2105;
2145 -> 2144;
2145 -> 2141;
2145 -> 2143;
2146 -> 2143;
2147 -> 2105;
2147 -> 2146;
2147 -> 2145;
2147 -> 2143;
2148 -> 2143;
2149 -> 2105;
2149 -> 2148;
2149 -> 2147;
2149 -> 2143;
2150 -> 2143;
2151 -> 2105;
2151 -> 2150;
2151 -> 2149;
2151 -> 2143;
2152 -> 2143;
2153 -> 2105;
2153 -> 2152;
2153 -> 2151;
2153 -> 2143;
2154 -> 2101;
2154 -> 2128;
2154 -> 2100;
2155 -> 2100;
2156 -> 2101;
2156 -> 2128;
2156 -> 2155;
2156 -> 2100;
2157 -> 2100;
2158 -> 2101;
2158 -> 2128;
2158 -> 2157;
2158 -> 2100;
2159 -> 2100;
2160 -> 2101;
2160 -> 2128;
2160 -> 2159;
2160 -> 2100;
2161 -> 2105;
2161 -> 2153;
2161 -> 2100;
2162 -> 2161;
2162 -> 2100;
2163 -> 2104;
2163 -> 2162;
2163 -> 2100;
2164 -> 1925;
2164 -> 2163;
2164 -> 1941;
2165 -> 1784;
2166 -> 1941;
2166 -> 2165;
2166 -> 1784;
2167 -> 1828;
2167 -> 2097;
2167 -> 2166;
2168 -> 1784;
2169 -> 1828;
2169 -> 2168;
2169 -> 2167;
2169 -> 1784;
2170 -> 1833;
2170 -> 1784;
2171 -> 1925;
2171 -> 1784;
2175 -> 2173;
2175 -> 2172;
2176 -> 2174;
2176 -> 2172;
2177 -> 2172;
2178 -> 0;
2178 -> 1784;
2179 -> 1784;
2180 -> 1784;
2181 -> 2170;
2181 -> 2180;
2182 -> 2171;
2182 -> 2180;
2183 -> 2178;
2183 -> 2180;
2184 -> 2179;
2184 -> 2180;
2185 -> 2179;
2185 -> 2180;
2186 -> 2180;
2187 -> 2184;
2187 -> 2186;
2187 -> 2180;
2188 -> 2187;
2188 -> 2180;
2189 -> 0;
2191 -> 2189;
2191 -> 2190;
2192 -> 2190;
2194 -> 2193;
2196 -> 2195;
2198 -> 2197;
2199 -> 2192;
2200 -> 2192;
2200 -> 2190;
2201 -> 2191;
2201 -> 2192;
2201 -> 2190;
2202 -> 2190;
2203 -> 2180;
2204 -> 2203;
2204 -> 2185;
2204 -> 2180;
2205 -> 2181;
2205 -> 2180;
2206 -> 2182;
2206 -> 2180;
2207 -> 2183;
2207 -> 2180;
2208 -> 2205;
2208 -> 2180;
2209 -> 2206;
2209 -> 2180;
2210 -> 2204;
2210 -> 2180;
2211 -> 2180;
2212 -> 2208;
2212 -> 2211;
2213 -> 2209;
2213 -> 2211;
2214 -> 2210;
2214 -> 2211;
2215 -> 2188;
2215 -> 2211;
2216 -> 2212;
2216 -> 2211;
2217 -> 2212;
2217 -> 2205;
2217 -> 2211;
2218 -> 2213;
2218 -> 2211;
2219 -> 2213;
2219 -> 2206;
2219 -> 2211;
2220 -> 2211;
2221 -> 2216;
2221 -> 2220;
2222 -> 2217;
2222 -> 2220;
2223 -> 2218;
2223 -> 2220;
2224 -> 2219;
2224 -> 2220;
2225 -> 2215;
2225 -> 2220;
2226 -> 2221;
2226 -> 2220;
2227 -> 2222;
2227 -> 2220;
2228 -> 2223;
2228 -> 2220;
2229 -> 2224;
2229 -> 2220;
2230 -> 2220;
2231 -> 2226;
2231 -> 2230;
2232 -> 2227;
2232 -> 2230;
2233 -> 2228;
2233 -> 2230;
2234 -> 2229;
2234 -> 2230;
2235 -> 2225;
2235 -> 2230;
2236 -> 2230;
2237 -> 2232;
2237 -> 2236;
2237 -> 2230;
2238 -> 2230;
2239 -> 2234;
2239 -> 2238;
2239 -> 2230;
2240 -> 2237;
2240 -> 2239;
2240 -> 2230;
2241 -> 2230;
2242 -> 2241;
2242 -> 2240;
2242 -> 2230;
2243 -> 2230;
2244 -> 2243;
2244 -> 2232;
2244 -> 2230;
2245 -> 2244;
2246 -> 2240;
2246 -> 2242;
2246 -> 2245;
2246 -> 2244;
2247 -> 2246;
2247 -> 2243;
2247 -> 2245;
2247 -> 2240;
2247 -> 2244;
2248 -> 2230;
2249 -> 2248;
2249 -> 2234;
2249 -> 2230;
2250 -> 2249;
2251 -> 2240;
2251 -> 2242;
2251 -> 2247;
2251 -> 2250;
2251 -> 2249;
2252 -> 2251;
2252 -> 2250;
2252 -> 2248;
2252 -> 2240;
2252 -> 2249;
2253 -> 2230;
2254 -> 2253;
2254 -> 2232;
2254 -> 2230;
2255 -> 2254;
2256 -> 2255;
2256 -> 2234;
2256 -> 2254;
2257 -> 2256;
2258 -> 2240;
2258 -> 2242;
2258 -> 2247;
2258 -> 2252;
2258 -> 2257;
2258 -> 2256;
2259 -> 2231;
2259 -> 2256;
2260 -> 2233;
2260 -> 2256;
2261 -> 2256;
2262 -> 2259;
2262 -> 2261;
2263 -> 2257;
2263 -> 2261;
2264 -> 2260;
2264 -> 2261;
2265 -> 2257;
2265 -> 2261;
2266 -> 2235;
2266 -> 2261;
2267 -> 2262;
2267 -> 2205;
2267 -> 2263;
2267 -> 2261;
2268 -> 2264;
2268 -> 2206;
2268 -> 2265;
2268 -> 2261;
2269 -> 2266;
2269 -> 0;
2269 -> 2267;
2269 -> 2268;
2269 -> 2205;
2269 -> 2206;
2269 -> 2261;
2270 -> 2258;
2270 -> 2269;
2270 -> 2256;
2271 -> 2256;
2272 -> 2240;
2272 -> 2242;
2272 -> 2247;
2272 -> 2252;
2272 -> 2271;
2272 -> 2255;
2272 -> 2256;
2273 -> 2256;
2274 -> 2240;
2274 -> 2242;
2274 -> 2247;
2274 -> 2252;
2274 -> 2253;
2274 -> 2273;
2274 -> 2256;
2275 -> 2270;
2275 -> 2256;
2276 -> 2272;
2276 -> 2256;
2277 -> 2275;
2277 -> 2276;
2277 -> 2256;
2278 -> 2274;
2278 -> 2256;
2279 -> 2277;
2279 -> 2278;
2279 -> 2256;
2280 -> 2279;
2280 -> 2253;
2280 -> 2255;
2280 -> 2240;
2280 -> 2256;
2281 -> 2240;
2281 -> 2230;
2282 -> 2222;
2282 -> 2220;
2283 -> 2224;
2283 -> 2220;
2284 -> 2220;
2285 -> 2282;
2285 -> 2284;
2285 -> 2220;
2286 -> 2283;
2286 -> 2284;
2286 -> 2220;
2287 -> 2285;
2287 -> 2286;
2287 -> 2220;
2288 -> 2281;
2288 -> 2240;
2288 -> 2242;
2288 -> 2247;
2288 -> 2252;
2288 -> 2280;
2288 -> 2282;
2288 -> 2283;
2288 -> 2287;
2289 -> 2287;
2290 -> 2281;
2290 -> 2240;
2290 -> 2242;
2290 -> 2247;
2290 -> 2252;
2290 -> 2280;
2290 -> 2289;
2290 -> 2283;
2290 -> 2287;
2291 -> 2281;
2291 -> 2240;
2291 -> 2242;
2291 -> 2247;
2291 -> 2252;
2291 -> 2280;
2291 -> 2282;
2291 -> 2283;
2291 -> 2290;
2292 -> 2290;
2293 -> 2282;
2293 -> 2292;
2294 -> 2283;
2294 -> 2292;
2295 -> 2292;
2296 -> 0;
2296 -> 2292;
2297 -> 2293;
2297 -> 2292;
2298 -> 2294;
2298 -> 2292;
2299 -> 2292;
2300 -> 2296;
2300 -> 2299;
2301 -> 2297;
2301 -> 2299;
2302 -> 2298;
2302 -> 2299;
2303 -> 2295;
2303 -> 2299;
2304 -> 2300;
2304 -> 2303;
2304 -> 2299;
2305 -> 2301;
2305 -> 2303;
2305 -> 2299;
2306 -> 2302;
2306 -> 2303;
2306 -> 2299;
2307 -> 2220;
2308 -> 2293;
2308 -> 2307;
2308 -> 2220;
2309 -> 2220;
2310 -> 2294;
2310 -> 2309;
2310 -> 2220;
2311 -> 2295;
2311 -> 2304;
2311 -> 2305;
2311 -> 2306;
2311 -> 2211;
2312 -> 2311;
2313 -> 2312;
2314 -> 2213;
2314 -> 2206;
2314 -> 2269;
2314 -> 2311;
2314 -> 2312;
2315 -> 2214;
2315 -> 2314;
2315 -> 2203;
2315 -> 2312;
2316 -> 2207;
2316 -> 2313;
2316 -> 2180;
2317 -> 1828;
2317 -> 2316;
2317 -> 2169;
2317 -> 1784;
2318 -> 1925;
2318 -> 2164;
2318 -> 1784;
2319 -> 1833;
2319 -> 1918;
2319 -> 1784;
2320 -> 1828;
2320 -> 2317;
2320 -> 1784;
2321 -> 1644;
2322 -> 750;
2323 -> 751;
2323 -> 750;
2324 -> 1641;
2324 -> 750;
2325 -> 750;
2326 -> 2323;
2326 -> 2325;
2327 -> 2324;
2327 -> 2325;
2328 -> 2327;
2328 -> 2325;
2329 -> 2328;
2329 -> 1641;
2329 -> 2128;
2330 -> 2326;
2330 -> 2329;
2330 -> 2128;
2330 -> 2328;
2331 -> 2328;
2331 -> 2330;
2332 -> 2331;
2332 -> 2330;
2333 -> 750;
2334 -> 751;
2334 -> 750;
}